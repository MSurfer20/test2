{-
   Zulip REST API

   Powerful open source group chat 

   OpenAPI Version: 3.0.1
   Zulip REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ZulipREST.API.Messages
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ZulipREST.API.Messages where

import ZulipREST.Core
import ZulipREST.MimeTypes
import ZulipREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Messages

-- *** addReaction

-- | @POST \/messages\/{message_id}\/reactions@
-- 
-- Add an emoji reaction
-- 
-- Add an [emoji reaction](/help/emoji-reactions) to a message.  `POST {{ api_url }}/v1/messages/{message_id}/reactions` 
-- 
addReaction 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> EmojiName -- ^ "emojiName" -  The target emoji's human-readable name.  To find an emoji's name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji's text name. 
  -> ZulipRESTRequest AddReaction MimeNoContent JsonSuccess MimeJSON
addReaction (MessageId messageId) (EmojiName emojiName) =
  _mkRequest "POST" ["/messages/",toPath messageId,"/reactions"]
    `addQuery` toQuery ("emoji_name", Just emojiName)

data AddReaction  

-- | /Optional Param/ "emoji_code" - A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For most API clients, you won't need this, but it's important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the `emoji_code` in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \"diffenent\" emoji. 
instance HasOptionalParam AddReaction EmojiCode where
  applyOptionalParam req (EmojiCode xs) =
    req `addQuery` toQuery ("emoji_code", Just xs)

-- | /Optional Param/ "reaction_type" - If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode codepoint). * `realm_emoji`: Custom emoji. (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to    namespace the `zulip` emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed `unicode_emoji` if this parameter was not specified. 
instance HasOptionalParam AddReaction ReactionType where
  applyOptionalParam req (ReactionType xs) =
    req `addQuery` toQuery ("reaction_type", Just xs)
-- | @application/json@
instance Produces AddReaction MimeJSON


-- *** checkMessagesMatchNarrow

-- | @GET \/messages\/matches_narrow@
-- 
-- Check if messages match a narrow
-- 
-- Check whether a set of messages match a [narrow](/api/construct-narrow).  `GET {{ api_url }}/v1/messages/matches_narrow`  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the `match_subject` and `match_content` objects is designed to match those of `GET /messages`, so that a client can splice these fields into a `message` object received from `GET /events` and end up with an extended message object identical to how a `GET /messages` for the current narrow would have returned the message. 
-- 
checkMessagesMatchNarrow 
  :: MsgIds -- ^ "msgIds" -  List of IDs for the messages to check.
  -> Narrow -- ^ "narrow" -  A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow).
  -> ZulipRESTRequest CheckMessagesMatchNarrow MimeNoContent AnyType MimeJSON
checkMessagesMatchNarrow (MsgIds msgIds) (Narrow narrow) =
  _mkRequest "GET" ["/messages/matches_narrow"]
    `addQuery` toQueryColl MultiParamArray ("msg_ids", Just msgIds)
    `addQuery` toQueryColl MultiParamArray ("narrow", Just narrow)

data CheckMessagesMatchNarrow  
-- | @application/json@
instance Produces CheckMessagesMatchNarrow MimeJSON


-- *** deleteMessage

-- | @DELETE \/messages\/{message_id}@
-- 
-- Delete a message
-- 
-- Permanently delete a message.  `DELETE {{ api_url }}/v1/messages/{msg_id}`  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
-- 
deleteMessage 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> ZulipRESTRequest DeleteMessage MimeNoContent JsonSuccess MimeJSON
deleteMessage (MessageId messageId) =
  _mkRequest "DELETE" ["/messages/",toPath messageId]

data DeleteMessage  
-- | @application/json@
instance Produces DeleteMessage MimeJSON


-- *** getFileTemporaryUrl

-- | @GET \/user_uploads\/{realm_id_str}\/{filename}@
-- 
-- Get public temporary URL
-- 
-- Get a temporary URL for access to the file that doesn't require authentication. 
-- 
getFileTemporaryUrl 
  :: RealmIdStr -- ^ "realmIdStr" -  The realm id. 
  -> FilenameText -- ^ "filename" -  Path to the URL. 
  -> ZulipRESTRequest GetFileTemporaryUrl MimeNoContent JsonSuccessBase MimeJSON
getFileTemporaryUrl (RealmIdStr realmIdStr) (FilenameText filename) =
  _mkRequest "GET" ["/user_uploads/",toPath realmIdStr,"/",toPath filename]

data GetFileTemporaryUrl  
-- | @application/json@
instance Produces GetFileTemporaryUrl MimeJSON


-- *** getMessageHistory

-- | @GET \/messages\/{message_id}\/history@
-- 
-- Get a message's edit history
-- 
-- Fetch the message edit history of a previously edited message.  `GET {{ api_url }}/v1/messages/{message_id}/history`  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
-- 
getMessageHistory 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> ZulipRESTRequest GetMessageHistory MimeNoContent JsonSuccessBase MimeJSON
getMessageHistory (MessageId messageId) =
  _mkRequest "GET" ["/messages/",toPath messageId,"/history"]

data GetMessageHistory  
-- | @application/json@
instance Produces GetMessageHistory MimeJSON


-- *** getMessages0

-- | @GET \/messages@
-- 
-- Get messages
-- 
-- Fetch message history from a Zulip server.  `GET {{ api_url }}/v1/messages`  This `GET /api/v1/messages` endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip's powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user's message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an `anchor` message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the `num_before` and `num_after` limits.  We recommend using `num_before <= 1000` and `num_after <= 1000` to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
-- 
getMessages0 
  :: NumBefore -- ^ "numBefore" -  The number of messages with IDs less than the anchor to retrieve. 
  -> NumAfter -- ^ "numAfter" -  The number of messages with IDs greater than the anchor to retrieve. 
  -> ZulipRESTRequest GetMessages0 MimeNoContent JsonSuccessBase MimeJSON
getMessages0 (NumBefore numBefore) (NumAfter numAfter) =
  _mkRequest "GET" ["/messages"]
    `addQuery` toQuery ("num_before", Just numBefore)
    `addQuery` toQuery ("num_after", Just numAfter)

data GetMessages0  

-- | /Optional Param/ "anchor" - Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * `newest`: The most recent message. * `oldest`: The oldest message. * `first_unread`: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of `'newest'` and `'oldest'` are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   `first_unread` functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, `oldest` can be emulated with   `anchor=0`, and `newest` with `anchor=10000000000000000`   (that specific large value works around a bug in Zulip   2.1.x and older in the `found_newest` return value). 
instance HasOptionalParam GetMessages0 Anchor where
  applyOptionalParam req (Anchor xs) =
    req `addQuery` toQuery ("anchor", Just xs)

-- | /Optional Param/ "narrow" - The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow). 
instance HasOptionalParam GetMessages0 Narrow where
  applyOptionalParam req (Narrow xs) =
    req `addQuery` toQueryColl MultiParamArray ("narrow", Just xs)

-- | /Optional Param/ "client_gravatar" - Whether the client supports computing gravatars URLs.  If enabled, `avatar_url` will be included in the response only if there is a Zulip avatar, and will be `null` for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The `client_gravatar` field is set to `true` if clients can compute their own gravatars. 
instance HasOptionalParam GetMessages0 ClientGravatar where
  applyOptionalParam req (ClientGravatar xs) =
    req `addQuery` toQuery ("client_gravatar", Just xs)

-- | /Optional Param/ "apply_markdown" - If `true`, message content is returned in the rendered HTML format. If `false`, message content is returned in the raw Markdown-format text that user entered. 
instance HasOptionalParam GetMessages0 ApplyMarkdown where
  applyOptionalParam req (ApplyMarkdown xs) =
    req `addQuery` toQuery ("apply_markdown", Just xs)

-- | /Optional Param/ "use_first_unread_anchor" - Legacy way to specify `anchor=\"first_unread\"` in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the `anchor`.  Mutually exclusive with `anchor`.  **Changes**: Deprecated in Zulip 3.0, replaced by `anchor=\"first_unread\"` instead. 
instance HasOptionalParam GetMessages0 UseFirstUnreadAnchor where
  applyOptionalParam req (UseFirstUnreadAnchor xs) =
    req `addQuery` toQuery ("use_first_unread_anchor", Just xs)
-- | @application/json@
instance Produces GetMessages0 MimeJSON


-- *** getRawMessage

-- | @GET \/messages\/{message_id}@
-- 
-- Get a message's raw Markdown
-- 
-- Get the raw content of a message.  `GET {{ api_url }}/v1/messages/{msg_id}`  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message's raw Markdown (e.g. for pre-filling a message-editing UI). 
-- 
getRawMessage 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> ZulipRESTRequest GetRawMessage MimeNoContent JsonSuccessBase MimeJSON
getRawMessage (MessageId messageId) =
  _mkRequest "GET" ["/messages/",toPath messageId]

data GetRawMessage  
-- | @application/json@
instance Produces GetRawMessage MimeJSON


-- *** markAllAsRead

-- | @POST \/mark_all_as_read@
-- 
-- Mark all messages as read
-- 
-- Marks all of the current user's unread messages as read.  `POST {{ api_url }}/v1/mark_all_as_read` 
-- 
markAllAsRead 
  :: ZulipRESTRequest MarkAllAsRead MimeNoContent JsonSuccess MimeJSON
markAllAsRead =
  _mkRequest "POST" ["/mark_all_as_read"]

data MarkAllAsRead  
-- | @application/json@
instance Produces MarkAllAsRead MimeJSON


-- *** markStreamAsRead

-- | @POST \/mark_stream_as_read@
-- 
-- Mark messages in a stream as read
-- 
-- Mark all the unread messages in a stream as read. 
-- 
markStreamAsRead 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest MarkStreamAsRead MimeNoContent JsonSuccess MimeJSON
markStreamAsRead (StreamId streamId) =
  _mkRequest "POST" ["/mark_stream_as_read"]
    `addQuery` toQuery ("stream_id", Just streamId)

data MarkStreamAsRead  
-- | @application/json@
instance Produces MarkStreamAsRead MimeJSON


-- *** markTopicAsRead

-- | @POST \/mark_topic_as_read@
-- 
-- Mark messages in a topic as read
-- 
-- Mark all the unread messages in a topic as read. 
-- 
markTopicAsRead 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> TopicName -- ^ "topicName" -  The name of the topic whose messages should be marked as read. 
  -> ZulipRESTRequest MarkTopicAsRead MimeNoContent JsonSuccess MimeJSON
markTopicAsRead (StreamId streamId) (TopicName topicName) =
  _mkRequest "POST" ["/mark_topic_as_read"]
    `addQuery` toQuery ("stream_id", Just streamId)
    `addQuery` toQuery ("topic_name", Just topicName)

data MarkTopicAsRead  
-- | @application/json@
instance Produces MarkTopicAsRead MimeJSON


-- *** removeReaction

-- | @DELETE \/messages\/{message_id}\/reactions@
-- 
-- Remove an emoji reaction
-- 
-- Remove an [emoji reaction](/help/emoji-reactions) from a message.  `DELETE {{ api_url }}/v1/messages/{message_id}/reactions` 
-- 
removeReaction 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> ZulipRESTRequest RemoveReaction MimeNoContent JsonSuccess MimeJSON
removeReaction (MessageId messageId) =
  _mkRequest "DELETE" ["/messages/",toPath messageId,"/reactions"]

data RemoveReaction  

-- | /Optional Param/ "emoji_name" - The target emoji's human-readable name.  To find an emoji's name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji's text name. 
instance HasOptionalParam RemoveReaction EmojiName where
  applyOptionalParam req (EmojiName xs) =
    req `addQuery` toQuery ("emoji_name", Just xs)

-- | /Optional Param/ "emoji_code" - A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For most API clients, you won't need this, but it's important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the `emoji_code` in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \"diffenent\" emoji. 
instance HasOptionalParam RemoveReaction EmojiCode where
  applyOptionalParam req (EmojiCode xs) =
    req `addQuery` toQuery ("emoji_code", Just xs)

-- | /Optional Param/ "reaction_type" - If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode codepoint). * `realm_emoji`: Custom emoji. (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to    namespace the `zulip` emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed `unicode_emoji` if this parameter was not specified. 
instance HasOptionalParam RemoveReaction ReactionType where
  applyOptionalParam req (ReactionType xs) =
    req `addQuery` toQuery ("reaction_type", Just xs)
-- | @application/json@
instance Produces RemoveReaction MimeJSON


-- *** renderMessage

-- | @POST \/messages\/render@
-- 
-- Render message
-- 
-- Render a message to HTML.  `POST {{ api_url }}/v1/messages/render` 
-- 
renderMessage 
  :: Content -- ^ "content" -  The content of the message. Maximum message size of 10000 bytes. 
  -> ZulipRESTRequest RenderMessage MimeNoContent JsonSuccessBase MimeJSON
renderMessage (Content content) =
  _mkRequest "POST" ["/messages/render"]
    `addQuery` toQuery ("content", Just content)

data RenderMessage  
-- | @application/json@
instance Produces RenderMessage MimeJSON


-- *** sendMessage

-- | @POST \/messages@
-- 
-- Send a message
-- 
-- Send a stream or a private message.  `POST {{ api_url }}/v1/messages` 
-- 
sendMessage 
  :: ParamType -- ^ "_type" -  The type of message to be sent. `private` for a private message and `stream` for a stream message. 
  -> To -- ^ "to" -  For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0. 
  -> Content -- ^ "content" -  The content of the message. Maximum message size of 10000 bytes. 
  -> ZulipRESTRequest SendMessage MimeNoContent JsonSuccessBase MimeJSON
sendMessage (ParamType _type) (To to) (Content content) =
  _mkRequest "POST" ["/messages"]
    `addQuery` toQuery ("type", Just _type)
    `addQuery` toQueryColl MultiParamArray ("to", Just to)
    `addQuery` toQuery ("content", Just content)

data SendMessage  

-- | /Optional Param/ "topic" - The topic of the message. Only required for stream messages (`type=\"stream\"`), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as `subject`, which is currently a deprecated alias. 
instance HasOptionalParam SendMessage Topic where
  applyOptionalParam req (Topic xs) =
    req `addQuery` toQuery ("topic", Just xs)

-- | /Optional Param/ "queue_id" - For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, `local_id` is required.  If the message is successfully sent, the server will include `local_id` in the `message` event that the client with this `queue_id` will receive notifying it of the new message via [`GET /events`](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device). 
instance HasOptionalParam SendMessage QueueId where
  applyOptionalParam req (QueueId xs) =
    req `addQuery` toQuery ("queue_id", Just xs)

-- | /Optional Param/ "local_id" - For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the `queue_id` description. 
instance HasOptionalParam SendMessage LocalId where
  applyOptionalParam req (LocalId xs) =
    req `addQuery` toQuery ("local_id", Just xs)
-- | @application/json@
instance Produces SendMessage MimeJSON


-- *** updateMessage

-- | @PATCH \/messages\/{message_id}@
-- 
-- Edit a message
-- 
-- Edit/update the content or topic of a message.  `PATCH {{ api_url }}/v1/messages/{msg_id}`  `{msg_id}` in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to `✔ {original_topic}`.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
-- 
updateMessage 
  :: MessageId -- ^ "messageId" -  The target message's ID. 
  -> ZulipRESTRequest UpdateMessage MimeNoContent JsonSuccess MimeJSON
updateMessage (MessageId messageId) =
  _mkRequest "PATCH" ["/messages/",toPath messageId]

data UpdateMessage  

-- | /Optional Param/ "topic" - The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as `subject`, which is currently a deprecated alias. 
instance HasOptionalParam UpdateMessage Topic where
  applyOptionalParam req (Topic xs) =
    req `addQuery` toQuery ("topic", Just xs)

-- | /Optional Param/ "propagate_mode" - Which message(s) should be edited: just the one indicated in `message_id`, messages in the same topic that had been sent after this one, or all of them.  Only the default value of `change_one` is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic. 
instance HasOptionalParam UpdateMessage PropagateMode where
  applyOptionalParam req (PropagateMode xs) =
    req `addQuery` toQuery ("propagate_mode", Just xs)

-- | /Optional Param/ "send_notification_to_old_thread" - Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9). 
instance HasOptionalParam UpdateMessage SendNotificationToOldThread where
  applyOptionalParam req (SendNotificationToOldThread xs) =
    req `addQuery` toQuery ("send_notification_to_old_thread", Just xs)

-- | /Optional Param/ "send_notification_to_new_thread" - Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9). 
instance HasOptionalParam UpdateMessage SendNotificationToNewThread where
  applyOptionalParam req (SendNotificationToNewThread xs) =
    req `addQuery` toQuery ("send_notification_to_new_thread", Just xs)

-- | /Optional Param/ "content" - The content of the message. Maximum message size of 10000 bytes. 
instance HasOptionalParam UpdateMessage Content where
  applyOptionalParam req (Content xs) =
    req `addQuery` toQuery ("content", Just xs)

-- | /Optional Param/ "stream_id" - The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message. 
instance HasOptionalParam UpdateMessage StreamId where
  applyOptionalParam req (StreamId xs) =
    req `addQuery` toQuery ("stream_id", Just xs)
-- | @application/json@
instance Produces UpdateMessage MimeJSON


-- *** updateMessageFlags

-- | @POST \/messages\/flags@
-- 
-- Update personal message flags
-- 
-- Add or remove personal message flags like `read` and `starred` on a collection of message IDs.  `POST {{ api_url }}/v1/messages/flags`  For updating the `read` flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
-- 
updateMessageFlags 
  :: Messages2 -- ^ "messages" -  An array containing the IDs of the target messages. 
  -> Op -- ^ "op" -  Whether to `add` the flag or `remove` it. 
  -> Flag -- ^ "flag" -  The flag that should be added/removed. 
  -> ZulipRESTRequest UpdateMessageFlags MimeNoContent JsonSuccessBase MimeJSON
updateMessageFlags (Messages2 messages) (Op op) (Flag flag) =
  _mkRequest "POST" ["/messages/flags"]
    `addQuery` toQueryColl MultiParamArray ("messages", Just messages)
    `addQuery` toQuery ("op", Just op)
    `addQuery` toQuery ("flag", Just flag)

data UpdateMessageFlags  
-- | @application/json@
instance Produces UpdateMessageFlags MimeJSON


-- *** uploadFile

-- | @POST \/user_uploads@
-- 
-- Upload a file
-- 
-- Upload a single file and get the corresponding URI.  `POST {{ api_url }}/v1/user_uploads`  Initially, only you will be able to access the link.  To share the uploaded file, you'll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
-- 
uploadFile 
  :: (Consumes UploadFile MimeMultipartFormData)
  => ZulipRESTRequest UploadFile MimeMultipartFormData JsonSuccessBase MimeJSON
uploadFile =
  _mkRequest "POST" ["/user_uploads"]

data UploadFile  
instance HasOptionalParam UploadFile Filename where
  applyOptionalParam req (Filename xs) =
    req `_addMultiFormPart` NH.partFileSource "filename" xs

-- | @multipart/form-data@
instance Consumes UploadFile MimeMultipartFormData

-- | @application/json@
instance Produces UploadFile MimeJSON

