{-
   Zulip REST API

   Powerful open source group chat 

   OpenAPI Version: 3.0.1
   Zulip REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ZulipREST.API.Streams
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ZulipREST.API.Streams where

import ZulipREST.Core
import ZulipREST.MimeTypes
import ZulipREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Streams

-- *** archiveStream

-- | @DELETE \/streams\/{stream_id}@
-- 
-- Archive a stream
-- 
-- [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 
-- 
archiveStream 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest ArchiveStream MimeNoContent JsonSuccess MimeJSON
archiveStream (StreamId streamId) =
  _mkRequest "DELETE" ["/streams/",toPath streamId]

data ArchiveStream  
-- | @application/json@
instance Produces ArchiveStream MimeJSON


-- *** createBigBlueButtonVideoCall

-- | @GET \/calls\/bigbluebutton\/create@
-- 
-- Create BigBlueButton video call
-- 
-- Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
-- 
createBigBlueButtonVideoCall 
  :: ZulipRESTRequest CreateBigBlueButtonVideoCall MimeNoContent JsonSuccessBase MimeJSON
createBigBlueButtonVideoCall =
  _mkRequest "GET" ["/calls/bigbluebutton/create"]

data CreateBigBlueButtonVideoCall  
-- | @application/json@
instance Produces CreateBigBlueButtonVideoCall MimeJSON


-- *** deleteTopic

-- | @POST \/streams\/{stream_id}\/delete_topic@
-- 
-- Delete a topic
-- 
-- Delete all messages in a topic.  `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
-- 
deleteTopic 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> TopicName -- ^ "topicName" -  The name of the topic to delete. 
  -> ZulipRESTRequest DeleteTopic MimeNoContent JsonSuccess MimeJSON
deleteTopic (StreamId streamId) (TopicName topicName) =
  _mkRequest "POST" ["/streams/",toPath streamId,"/delete_topic"]
    `addQuery` toQuery ("topic_name", Just topicName)

data DeleteTopic  
-- | @application/json@
instance Produces DeleteTopic MimeJSON


-- *** getStreamId

-- | @GET \/get_stream_id@
-- 
-- Get stream ID
-- 
-- Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 
-- 
getStreamId 
  :: Stream -- ^ "stream" -  The name of the stream to access. 
  -> ZulipRESTRequest GetStreamId MimeNoContent JsonSuccessBase MimeJSON
getStreamId (Stream stream) =
  _mkRequest "GET" ["/get_stream_id"]
    `addQuery` toQuery ("stream", Just stream)

data GetStreamId  
-- | @application/json@
instance Produces GetStreamId MimeJSON


-- *** getStreamTopics

-- | @GET \/users\/me\/{stream_id}\/topics@
-- 
-- Get topics in a stream
-- 
-- Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 
-- 
getStreamTopics 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest GetStreamTopics MimeNoContent JsonSuccessBase MimeJSON
getStreamTopics (StreamId streamId) =
  _mkRequest "GET" ["/users/me/",toPath streamId,"/topics"]

data GetStreamTopics  
-- | @application/json@
instance Produces GetStreamTopics MimeJSON


-- *** getStreams

-- | @GET \/streams@
-- 
-- Get all streams
-- 
-- Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 
-- 
getStreams 
  :: ZulipRESTRequest GetStreams MimeNoContent JsonSuccessBase MimeJSON
getStreams =
  _mkRequest "GET" ["/streams"]

data GetStreams  

-- | /Optional Param/ "include_public" - Include all public streams. 
instance HasOptionalParam GetStreams IncludePublic where
  applyOptionalParam req (IncludePublic xs) =
    req `addQuery` toQuery ("include_public", Just xs)

-- | /Optional Param/ "include_web_public" - Include all web public streams. 
instance HasOptionalParam GetStreams IncludeWebPublic where
  applyOptionalParam req (IncludeWebPublic xs) =
    req `addQuery` toQuery ("include_web_public", Just xs)

-- | /Optional Param/ "include_subscribed" - Include all streams that the user is subscribed to. 
instance HasOptionalParam GetStreams IncludeSubscribed where
  applyOptionalParam req (IncludeSubscribed xs) =
    req `addQuery` toQuery ("include_subscribed", Just xs)

-- | /Optional Param/ "include_all_active" - Include all active streams. The user must have administrative privileges to use this parameter. 
instance HasOptionalParam GetStreams IncludeAllActive where
  applyOptionalParam req (IncludeAllActive xs) =
    req `addQuery` toQuery ("include_all_active", Just xs)

-- | /Optional Param/ "include_default" - Include all default streams for the user's realm. 
instance HasOptionalParam GetStreams IncludeDefault where
  applyOptionalParam req (IncludeDefault xs) =
    req `addQuery` toQuery ("include_default", Just xs)

-- | /Optional Param/ "include_owner_subscribed" - If the user is a bot, include all streams that the bot's owner is subscribed to. 
instance HasOptionalParam GetStreams IncludeOwnerSubscribed where
  applyOptionalParam req (IncludeOwnerSubscribed xs) =
    req `addQuery` toQuery ("include_owner_subscribed", Just xs)
-- | @application/json@
instance Produces GetStreams MimeJSON


-- *** getSubscribers

-- | @GET \/streams\/{stream_id}\/members@
-- 
-- Get the subscribers of a stream
-- 
-- Get all users subscribed to a stream.  `Get {{ api_url }}/v1/streams/{stream_id}/members` 
-- 
getSubscribers 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest GetSubscribers MimeNoContent JsonSuccessBase MimeJSON
getSubscribers (StreamId streamId) =
  _mkRequest "GET" ["/streams/",toPath streamId,"/members"]

data GetSubscribers  
-- | @application/json@
instance Produces GetSubscribers MimeJSON


-- *** getSubscriptionStatus

-- | @GET \/users\/{user_id}\/subscriptions\/{stream_id}@
-- 
-- Get subscription status
-- 
-- Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 
-- 
getSubscriptionStatus 
  :: UserId -- ^ "userId" -  The target user's ID. 
  -> StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest GetSubscriptionStatus MimeNoContent JsonSuccessBase MimeJSON
getSubscriptionStatus (UserId userId) (StreamId streamId) =
  _mkRequest "GET" ["/users/",toPath userId,"/subscriptions/",toPath streamId]

data GetSubscriptionStatus  
-- | @application/json@
instance Produces GetSubscriptionStatus MimeJSON


-- *** getSubscriptions

-- | @GET \/users\/me\/subscriptions@
-- 
-- Get subscribed streams
-- 
-- Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 
-- 
getSubscriptions 
  :: ZulipRESTRequest GetSubscriptions MimeNoContent JsonSuccessBase MimeJSON
getSubscriptions =
  _mkRequest "GET" ["/users/me/subscriptions"]

data GetSubscriptions  

-- | /Optional Param/ "include_subscribers" - Whether each returned stream object should include a `subscribers` field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
instance HasOptionalParam GetSubscriptions IncludeSubscribers where
  applyOptionalParam req (IncludeSubscribers xs) =
    req `addQuery` toQuery ("include_subscribers", Just xs)
-- | @application/json@
instance Produces GetSubscriptions MimeJSON


-- *** muteTopic

-- | @PATCH \/users\/me\/subscriptions\/muted_topics@
-- 
-- Topic muting
-- 
-- This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 
-- 
muteTopic 
  :: Topic -- ^ "topic" -  The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
  -> Op -- ^ "op" -  Whether to mute (`add`) or unmute (`remove`) the provided topic. 
  -> ZulipRESTRequest MuteTopic MimeNoContent JsonSuccess MimeJSON
muteTopic (Topic topic) (Op op) =
  _mkRequest "PATCH" ["/users/me/subscriptions/muted_topics"]
    `addQuery` toQuery ("topic", Just topic)
    `addQuery` toQuery ("op", Just op)

data MuteTopic  

-- | /Optional Param/ "stream" - The name of the stream to access. 
instance HasOptionalParam MuteTopic Stream where
  applyOptionalParam req (Stream xs) =
    req `addQuery` toQuery ("stream", Just xs)

-- | /Optional Param/ "stream_id" - The ID of the stream to access. 
instance HasOptionalParam MuteTopic StreamId where
  applyOptionalParam req (StreamId xs) =
    req `addQuery` toQuery ("stream_id", Just xs)
-- | @application/json@
instance Produces MuteTopic MimeJSON


-- *** subscribe

-- | @POST \/users\/me\/subscriptions@
-- 
-- Subscribe to a stream
-- 
-- Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 
-- 
subscribe 
  :: Subscriptions2 -- ^ "subscriptions" -  A list of dictionaries containing the key `name` and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key `description` with an appropriate value. 
  -> ZulipRESTRequest Subscribe MimeNoContent OneOfobjectobject MimeJSON
subscribe (Subscriptions2 subscriptions) =
  _mkRequest "POST" ["/users/me/subscriptions"]
    `addQuery` toQueryColl MultiParamArray ("subscriptions", Just subscriptions)

data Subscribe  

-- | /Optional Param/ "principals" - A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
instance HasOptionalParam Subscribe Principals where
  applyOptionalParam req (Principals xs) =
    req `addQuery` toQueryColl MultiParamArray ("principals", Just xs)

-- | /Optional Param/ "authorization_errors_fatal" - A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When `True`, an authorization error is reported as such. When set to `False`, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the `unauthorized` key. 
instance HasOptionalParam Subscribe AuthorizationErrorsFatal where
  applyOptionalParam req (AuthorizationErrorsFatal xs) =
    req `addQuery` toQuery ("authorization_errors_fatal", Just xs)

-- | /Optional Param/ "announce" - If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream's creation. 
instance HasOptionalParam Subscribe Announce where
  applyOptionalParam req (Announce xs) =
    req `addQuery` toQuery ("announce", Just xs)

-- | /Optional Param/ "invite_only" - As described above, this endpoint will create a new stream if passed a stream name that doesn't already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
instance HasOptionalParam Subscribe InviteOnly where
  applyOptionalParam req (InviteOnly xs) =
    req `addQuery` toQuery ("invite_only", Just xs)

-- | /Optional Param/ "history_public_to_subscribers" - Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
instance HasOptionalParam Subscribe HistoryPublicToSubscribers where
  applyOptionalParam req (HistoryPublicToSubscribers xs) =
    req `addQuery` toQuery ("history_public_to_subscribers", Just xs)

-- | /Optional Param/ "stream_post_policy" - Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
instance HasOptionalParam Subscribe StreamPostPolicy where
  applyOptionalParam req (StreamPostPolicy xs) =
    req `addQuery` toQuery ("stream_post_policy", Just xs)

-- | /Optional Param/ "message_retention_days" - Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
instance HasOptionalParam Subscribe MessageRetentionDays where
  applyOptionalParam req (MessageRetentionDays xs) =
    req `addQuery` toQuery ("message_retention_days", Just xs)
-- | @application/json@
instance Produces Subscribe MimeJSON


-- *** unsubscribe

-- | @DELETE \/users\/me\/subscriptions@
-- 
-- Unsubscribe from a stream
-- 
-- Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 
-- 
unsubscribe 
  :: Subscriptions3 -- ^ "subscriptions" -  A list of stream names to unsubscribe from. This parameter is called `streams` in our Python API. 
  -> ZulipRESTRequest Unsubscribe MimeNoContent JsonSuccessBase MimeJSON
unsubscribe (Subscriptions3 subscriptions) =
  _mkRequest "DELETE" ["/users/me/subscriptions"]
    `addQuery` toQueryColl MultiParamArray ("subscriptions", Just subscriptions)

data Unsubscribe  

-- | /Optional Param/ "principals" - A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
instance HasOptionalParam Unsubscribe Principals where
  applyOptionalParam req (Principals xs) =
    req `addQuery` toQueryColl MultiParamArray ("principals", Just xs)
-- | @application/json@
instance Produces Unsubscribe MimeJSON


-- *** updateStream

-- | @PATCH \/streams\/{stream_id}@
-- 
-- Update a stream
-- 
-- Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 
-- 
updateStream 
  :: StreamId -- ^ "streamId" -  The ID of the stream to access. 
  -> ZulipRESTRequest UpdateStream MimeNoContent JsonSuccess MimeJSON
updateStream (StreamId streamId) =
  _mkRequest "PATCH" ["/streams/",toPath streamId]

data UpdateStream  

-- | /Optional Param/ "description" - The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
instance HasOptionalParam UpdateStream Description where
  applyOptionalParam req (Description xs) =
    req `addQuery` toQuery ("description", Just xs)

-- | /Optional Param/ "new_name" - The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
instance HasOptionalParam UpdateStream NewName where
  applyOptionalParam req (NewName xs) =
    req `addQuery` toQuery ("new_name", Just xs)

-- | /Optional Param/ "is_private" - Change whether the stream is a private stream. 
instance HasOptionalParam UpdateStream IsPrivate where
  applyOptionalParam req (IsPrivate xs) =
    req `addQuery` toQuery ("is_private", Just xs)

-- | /Optional Param/ "is_announcement_only" - Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   `stream_post_policy` instead. 
instance HasOptionalParam UpdateStream IsAnnouncementOnly where
  applyOptionalParam req (IsAnnouncementOnly xs) =
    req `addQuery` toQuery ("is_announcement_only", Just xs)

-- | /Optional Param/ "stream_post_policy" - Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
instance HasOptionalParam UpdateStream StreamPostPolicy where
  applyOptionalParam req (StreamPostPolicy xs) =
    req `addQuery` toQuery ("stream_post_policy", Just xs)

-- | /Optional Param/ "history_public_to_subscribers" - Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
instance HasOptionalParam UpdateStream HistoryPublicToSubscribers where
  applyOptionalParam req (HistoryPublicToSubscribers xs) =
    req `addQuery` toQuery ("history_public_to_subscribers", Just xs)

-- | /Optional Param/ "message_retention_days" - Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
instance HasOptionalParam UpdateStream MessageRetentionDays where
  applyOptionalParam req (MessageRetentionDays xs) =
    req `addQuery` toQuery ("message_retention_days", Just xs)
-- | @application/json@
instance Produces UpdateStream MimeJSON


-- *** updateSubscriptionSettings

-- | @POST \/users\/me\/subscriptions\/properties@
-- 
-- Update subscription settings
-- 
-- This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 
-- 
updateSubscriptionSettings 
  :: SubscriptionData -- ^ "subscriptionData" -  A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a `stream_id` key that identifies the stream, as well as the `property` being modified and its new `value`.  The possible values for each `property` and `value` pairs are:  * `color` (string): the hex value of the user's display color for the stream. * `is_muted` (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named `in_home_view` (with the   opposite value, `in_home_view=!is_muted`); for   backwards-compatibility, modern Zulip still accepts that value. * `pin_to_top` (boolean): whether to pin the stream at the top of the stream list. * `desktop_notifications` (boolean): whether to show desktop notifications     for all messages sent to the stream. * `audible_notifications` (boolean): whether to play a sound   notification for all messages sent to the stream. * `push_notifications` (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * `email_notifications` (boolean): whether to trigger an email     notification for all messages sent to the stream. 
  -> ZulipRESTRequest UpdateSubscriptionSettings MimeNoContent JsonSuccessBase MimeJSON
updateSubscriptionSettings (SubscriptionData subscriptionData) =
  _mkRequest "POST" ["/users/me/subscriptions/properties"]
    `addQuery` toQueryColl MultiParamArray ("subscription_data", Just subscriptionData)

data UpdateSubscriptionSettings  
-- | @application/json@
instance Produces UpdateSubscriptionSettings MimeJSON


-- *** updateSubscriptions

-- | @PATCH \/users\/me\/subscriptions@
-- 
-- Update subscriptions
-- 
-- Update which streams you are are subscribed to. 
-- 
updateSubscriptions 
  :: ZulipRESTRequest UpdateSubscriptions MimeNoContent JsonSuccessBase MimeJSON
updateSubscriptions =
  _mkRequest "PATCH" ["/users/me/subscriptions"]

data UpdateSubscriptions  

-- | /Optional Param/ "delete" - A list of stream names to unsubscribe from. 
instance HasOptionalParam UpdateSubscriptions Delete where
  applyOptionalParam req (Delete xs) =
    req `addQuery` toQueryColl MultiParamArray ("delete", Just xs)

-- | /Optional Param/ "add" - A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
instance HasOptionalParam UpdateSubscriptions Add where
  applyOptionalParam req (Add xs) =
    req `addQuery` toQueryColl MultiParamArray ("add", Just xs)
-- | @application/json@
instance Produces UpdateSubscriptions MimeJSON

