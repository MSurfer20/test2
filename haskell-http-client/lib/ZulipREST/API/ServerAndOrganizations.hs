{-
   Zulip REST API

   Powerful open source group chat 

   OpenAPI Version: 3.0.1
   Zulip REST API API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : ZulipREST.API.ServerAndOrganizations
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module ZulipREST.API.ServerAndOrganizations where

import ZulipREST.Core
import ZulipREST.MimeTypes
import ZulipREST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ServerAndOrganizations

-- *** addCodePlayground

-- | @POST \/realm\/playgrounds@
-- 
-- Add a code playground
-- 
-- Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
-- 
addCodePlayground 
  :: Name -- ^ "name" -  The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
  -> PygmentsLanguage -- ^ "pygmentsLanguage" -  The name of the Pygments language lexer for that programming language. 
  -> UrlPrefix -- ^ "urlPrefix" -  The url prefix for the playground. 
  -> ZulipRESTRequest AddCodePlayground MimeNoContent JsonSuccessBase MimeJSON
addCodePlayground (Name name) (PygmentsLanguage pygmentsLanguage) (UrlPrefix urlPrefix) =
  _mkRequest "POST" ["/realm/playgrounds"]
    `addQuery` toQuery ("name", Just name)
    `addQuery` toQuery ("pygments_language", Just pygmentsLanguage)
    `addQuery` toQuery ("url_prefix", Just urlPrefix)

data AddCodePlayground  
-- | @application/json@
instance Produces AddCodePlayground MimeJSON


-- *** addLinkifier

-- | @POST \/realm\/filters@
-- 
-- Add a linkifier
-- 
-- Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 
-- 
addLinkifier 
  :: Pattern -- ^ "pattern" -  The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  -> UrlFormatString -- ^ "urlFormatString" -  The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  -> ZulipRESTRequest AddLinkifier MimeNoContent JsonSuccessBase MimeJSON
addLinkifier (Pattern pattern) (UrlFormatString urlFormatString) =
  _mkRequest "POST" ["/realm/filters"]
    `addQuery` toQuery ("pattern", Just pattern)
    `addQuery` toQuery ("url_format_string", Just urlFormatString)

data AddLinkifier  
-- | @application/json@
instance Produces AddLinkifier MimeJSON


-- *** createCustomProfileField

-- | @POST \/realm\/profile_fields@
-- 
-- Create a custom profile field
-- 
-- [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.  `POST {{ api_url }}/v1/realm/profile_fields` 
-- 
createCustomProfileField 
  :: FieldType -- ^ "fieldType" -  The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
  -> ZulipRESTRequest CreateCustomProfileField MimeNoContent JsonSuccessBase MimeJSON
createCustomProfileField (FieldType fieldType) =
  _mkRequest "POST" ["/realm/profile_fields"]
    `addQuery` toQuery ("field_type", Just fieldType)

data CreateCustomProfileField  

-- | /Optional Param/ "name" - The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user's profile. 
instance HasOptionalParam CreateCustomProfileField Name where
  applyOptionalParam req (Name xs) =
    req `addQuery` toQuery ("name", Just xs)

-- | /Optional Param/ "hint" - The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
instance HasOptionalParam CreateCustomProfileField Hint where
  applyOptionalParam req (Hint xs) =
    req `addQuery` toQuery ("hint", Just xs)

-- | /Optional Param/ "field_data" - Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
instance HasOptionalParam CreateCustomProfileField FieldData where
  applyOptionalParam req (FieldData xs) =
    req `addQuery` toQuery ("field_data", Just xs)
-- | @application/json@
instance Produces CreateCustomProfileField MimeJSON


-- *** getCustomEmoji

-- | @GET \/realm\/emoji@
-- 
-- Get all custom emoji
-- 
-- Get all the custom emoji in the user's organization.  `GET {{ api_url }}/v1/realm/emoji` 
-- 
getCustomEmoji 
  :: ZulipRESTRequest GetCustomEmoji MimeNoContent JsonSuccessBase MimeJSON
getCustomEmoji =
  _mkRequest "GET" ["/realm/emoji"]

data GetCustomEmoji  
-- | @application/json@
instance Produces GetCustomEmoji MimeJSON


-- *** getCustomProfileFields

-- | @GET \/realm\/profile_fields@
-- 
-- Get all custom profile fields
-- 
-- Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user's organization.  `GET {{ api_url }}/v1/realm/profile_fields` 
-- 
getCustomProfileFields 
  :: ZulipRESTRequest GetCustomProfileFields MimeNoContent JsonSuccessBase MimeJSON
getCustomProfileFields =
  _mkRequest "GET" ["/realm/profile_fields"]

data GetCustomProfileFields  
-- | @application/json@
instance Produces GetCustomProfileFields MimeJSON


-- *** getLinkifiers

-- | @GET \/realm\/linkifiers@
-- 
-- Get linkifiers
-- 
-- List all of an organization's configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 
-- 
getLinkifiers 
  :: ZulipRESTRequest GetLinkifiers MimeNoContent JsonSuccessBase MimeJSON
getLinkifiers =
  _mkRequest "GET" ["/realm/linkifiers"]

data GetLinkifiers  
-- | @application/json@
instance Produces GetLinkifiers MimeJSON


-- *** getServerSettings

-- | @GET \/server_settings@
-- 
-- Get server settings
-- 
-- Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it's running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
-- 
getServerSettings 
  :: ZulipRESTRequest GetServerSettings MimeNoContent JsonSuccessBase MimeJSON
getServerSettings =
  _mkRequest "GET" ["/server_settings"]

data GetServerSettings  
-- | @application/json@
instance Produces GetServerSettings MimeJSON


-- *** removeCodePlayground

-- | @DELETE \/realm\/playgrounds\/{playground_id}@
-- 
-- Remove a code playground
-- 
-- Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 
-- 
removeCodePlayground 
  :: PlaygroundId -- ^ "playgroundId" -  The ID of the playground that you want to remove. 
  -> ZulipRESTRequest RemoveCodePlayground MimeNoContent JsonSuccess MimeJSON
removeCodePlayground (PlaygroundId playgroundId) =
  _mkRequest "DELETE" ["/realm/playgrounds/",toPath playgroundId]

data RemoveCodePlayground  
-- | @application/json@
instance Produces RemoveCodePlayground MimeJSON


-- *** removeLinkifier

-- | @DELETE \/realm\/filters\/{filter_id}@
-- 
-- Remove a linkifier
-- 
-- Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 
-- 
removeLinkifier 
  :: FilterId -- ^ "filterId" -  The ID of the linkifier that you want to remove. 
  -> ZulipRESTRequest RemoveLinkifier MimeNoContent JsonSuccess MimeJSON
removeLinkifier (FilterId filterId) =
  _mkRequest "DELETE" ["/realm/filters/",toPath filterId]

data RemoveLinkifier  
-- | @application/json@
instance Produces RemoveLinkifier MimeJSON


-- *** reorderCustomProfileFields

-- | @PATCH \/realm\/profile_fields@
-- 
-- Reorder custom profile fields
-- 
-- Reorder the custom profile fields in the user's organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
-- 
reorderCustomProfileFields 
  :: Order -- ^ "order" -  A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
  -> ZulipRESTRequest ReorderCustomProfileFields MimeNoContent JsonSuccess MimeJSON
reorderCustomProfileFields (Order order) =
  _mkRequest "PATCH" ["/realm/profile_fields"]
    `addQuery` toQueryColl MultiParamArray ("order", Just order)

data ReorderCustomProfileFields  
-- | @application/json@
instance Produces ReorderCustomProfileFields MimeJSON


-- *** updateLinkifier

-- | @PATCH \/realm\/filters\/{filter_id}@
-- 
-- Update a linkifier
-- 
-- Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 
-- 
updateLinkifier 
  :: FilterId -- ^ "filterId" -  The ID of the linkifier that you want to update. 
  -> Pattern -- ^ "pattern" -  The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  -> UrlFormatString -- ^ "urlFormatString" -  The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  -> ZulipRESTRequest UpdateLinkifier MimeNoContent JsonSuccess MimeJSON
updateLinkifier (FilterId filterId) (Pattern pattern) (UrlFormatString urlFormatString) =
  _mkRequest "PATCH" ["/realm/filters/",toPath filterId]
    `addQuery` toQuery ("pattern", Just pattern)
    `addQuery` toQuery ("url_format_string", Just urlFormatString)

data UpdateLinkifier  
-- | @application/json@
instance Produces UpdateLinkifier MimeJSON


-- *** uploadCustomEmoji

-- | @POST \/realm\/emoji\/{emoji_name}@
-- 
-- Upload custom emoji
-- 
-- This endpoint is used to upload a custom emoji for use in the user's organization.  Access to this endpoint depends on the [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 
-- 
uploadCustomEmoji 
  :: (Consumes UploadCustomEmoji MimeMultipartFormData)
  => EmojiName -- ^ "emojiName" -  The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
  -> ZulipRESTRequest UploadCustomEmoji MimeMultipartFormData JsonSuccess MimeJSON
uploadCustomEmoji (EmojiName emojiName) =
  _mkRequest "POST" ["/realm/emoji/",toPath emojiName]

data UploadCustomEmoji  
instance HasOptionalParam UploadCustomEmoji Filename where
  applyOptionalParam req (Filename xs) =
    req `_addMultiFormPart` NH.partFileSource "filename" xs

-- | @multipart/form-data@
instance Consumes UploadCustomEmoji MimeMultipartFormData

-- | @application/json@
instance Produces UploadCustomEmoji MimeJSON

