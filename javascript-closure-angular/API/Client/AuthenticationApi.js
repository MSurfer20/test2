/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.AuthenticationApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Powerful open source group chat 
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * https://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.AuthenticationApi');

goog.require('API.Client.ApiKeyResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.AuthenticationApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('AuthenticationApiBasePath') ?
                   /** @type {!string} */ ($injector.get('AuthenticationApiBasePath')) :
                   'https://example.zulipchat.com/api/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('AuthenticationApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('AuthenticationApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.AuthenticationApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Fetch an API key (development only)
 * For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60; 
 * @param {!string} username The email address for the user that owns the API key. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiKeyResponse>}
 */
API.Client.AuthenticationApi.prototype.devFetchApiKey = function(username, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/dev_fetch_api_key';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'username' is set
  if (!username) {
    throw new Error('Missing required parameter username when calling devFetchApiKey');
  }
  if (username !== undefined) {
    queryParameters['username'] = username;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Fetch an API key (production)
 * This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 
 * @param {!string} username The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
 * @param {!string} password The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ApiKeyResponse>}
 */
API.Client.AuthenticationApi.prototype.fetchApiKey = function(username, password, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/fetch_api_key';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'username' is set
  if (!username) {
    throw new Error('Missing required parameter username when calling fetchApiKey');
  }
  // verify required parameter 'password' is set
  if (!password) {
    throw new Error('Missing required parameter password when calling fetchApiKey');
  }
  if (username !== undefined) {
    queryParameters['username'] = username;
  }

  if (password !== undefined) {
    queryParameters['password'] = password;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
