/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DraftsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Powerful open source group chat 
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * https://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.DraftsApi');

goog.require('API.Client.CodedError');
goog.require('API.Client.Draft');
goog.require('API.Client.JsonError');
goog.require('API.Client.JsonSuccess');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DraftsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DraftsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DraftsApiBasePath')) :
                   'https://example.zulipchat.com/api/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DraftsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DraftsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DraftsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Create drafts
 * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
 * @param {!Array<!API.Client.Draft>=} opt_drafts A JSON-encoded list of containing new draft objects. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.DraftsApi.prototype.createDrafts = function(opt_drafts, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/drafts';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_drafts !== undefined) {
    queryParameters['drafts'] = opt_drafts;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a draft
 * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
 * @param {!number} draftId The ID of the draft you want to delete. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.DraftsApi.prototype.deleteDraft = function(draftId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/drafts/{draft_id}'
      .replace('{' + 'draft_id' + '}', String(draftId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'draftId' is set
  if (!draftId) {
    throw new Error('Missing required parameter draftId when calling deleteDraft');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Edit a draft
 * Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
 * @param {!number} draftId The ID of the draft to be edited. 
 * @param {!API.Client.Draft} draft A JSON-encoded object containing a replacement draft object for this ID. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.DraftsApi.prototype.editDraft = function(draftId, draft, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/drafts/{draft_id}'
      .replace('{' + 'draft_id' + '}', String(draftId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'draftId' is set
  if (!draftId) {
    throw new Error('Missing required parameter draftId when calling editDraft');
  }
  // verify required parameter 'draft' is set
  if (!draft) {
    throw new Error('Missing required parameter draft when calling editDraft');
  }
  if (draft !== undefined) {
    queryParameters['draft'] = draft;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get drafts
 * Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.DraftsApi.prototype.getDrafts = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/drafts';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
