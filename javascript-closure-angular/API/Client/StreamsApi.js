/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.StreamsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Powerful open source group chat 
 * Version: 1.0.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * https://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.StreamsApi');

goog.require('API.Client.CodedError');
goog.require('API.Client.JsonError');
goog.require('API.Client.JsonSuccess');
goog.require('API.Client.JsonSuccessBase');
goog.require('API.Client.NonExistingStreamError');
goog.require('API.Client.oneOf&lt;object,object&gt;');
goog.require('API.Client.oneOf&lt;string,integer&gt;');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.StreamsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('StreamsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('StreamsApiBasePath')) :
                   'https://example.zulipchat.com/api/v1';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('StreamsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('StreamsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.StreamsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Archive a stream
 * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.StreamsApi.prototype.archiveStream = function(streamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/streams/{stream_id}'
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling archiveStream');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create BigBlueButton video call
 * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.createBigBlueButtonVideoCall = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/calls/bigbluebutton/create';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a topic
 * Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!string} topicName The name of the topic to delete. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.StreamsApi.prototype.deleteTopic = function(streamId, topicName, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/streams/{stream_id}/delete_topic'
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling deleteTopic');
  }
  // verify required parameter 'topicName' is set
  if (!topicName) {
    throw new Error('Missing required parameter topicName when calling deleteTopic');
  }
  if (topicName !== undefined) {
    queryParameters['topic_name'] = topicName;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get stream ID
 * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
 * @param {!string} stream The name of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getStreamId = function(stream, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/get_stream_id';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'stream' is set
  if (!stream) {
    throw new Error('Missing required parameter stream when calling getStreamId');
  }
  if (stream !== undefined) {
    queryParameters['stream'] = stream;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get topics in a stream
 * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getStreamTopics = function(streamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/{stream_id}/topics'
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling getStreamTopics');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get all streams
 * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
 * @param {!boolean=} opt_includePublic Include all public streams. 
 * @param {!boolean=} opt_includeWebPublic Include all web public streams. 
 * @param {!boolean=} opt_includeSubscribed Include all streams that the user is subscribed to. 
 * @param {!boolean=} opt_includeAllActive Include all active streams. The user must have administrative privileges to use this parameter. 
 * @param {!boolean=} opt_includeDefault Include all default streams for the user&#39;s realm. 
 * @param {!boolean=} opt_includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getStreams = function(opt_includePublic, opt_includeWebPublic, opt_includeSubscribed, opt_includeAllActive, opt_includeDefault, opt_includeOwnerSubscribed, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/streams';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_includePublic !== undefined) {
    queryParameters['include_public'] = opt_includePublic;
  }

  if (opt_includeWebPublic !== undefined) {
    queryParameters['include_web_public'] = opt_includeWebPublic;
  }

  if (opt_includeSubscribed !== undefined) {
    queryParameters['include_subscribed'] = opt_includeSubscribed;
  }

  if (opt_includeAllActive !== undefined) {
    queryParameters['include_all_active'] = opt_includeAllActive;
  }

  if (opt_includeDefault !== undefined) {
    queryParameters['include_default'] = opt_includeDefault;
  }

  if (opt_includeOwnerSubscribed !== undefined) {
    queryParameters['include_owner_subscribed'] = opt_includeOwnerSubscribed;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get the subscribers of a stream
 * Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getSubscribers = function(streamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/streams/{stream_id}/members'
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling getSubscribers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get subscription status
 * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
 * @param {!number} userId The target user&#39;s ID. 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getSubscriptionStatus = function(userId, streamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/{user_id}/subscriptions/{stream_id}'
      .replace('{' + 'user_id' + '}', String(userId))
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'userId' is set
  if (!userId) {
    throw new Error('Missing required parameter userId when calling getSubscriptionStatus');
  }
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling getSubscriptionStatus');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get subscribed streams
 * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
 * @param {!boolean=} opt_includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.getSubscriptions = function(opt_includeSubscribers, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_includeSubscribers !== undefined) {
    queryParameters['include_subscribers'] = opt_includeSubscribers;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Topic muting
 * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
 * @param {!string} topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
 * @param {!string} op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
 * @param {!string=} opt_stream The name of the stream to access. 
 * @param {!number=} opt_streamId The ID of the stream to access. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.StreamsApi.prototype.muteTopic = function(topic, op, opt_stream, opt_streamId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions/muted_topics';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'topic' is set
  if (!topic) {
    throw new Error('Missing required parameter topic when calling muteTopic');
  }
  // verify required parameter 'op' is set
  if (!op) {
    throw new Error('Missing required parameter op when calling muteTopic');
  }
  if (opt_stream !== undefined) {
    queryParameters['stream'] = opt_stream;
  }

  if (opt_streamId !== undefined) {
    queryParameters['stream_id'] = opt_streamId;
  }

  if (topic !== undefined) {
    queryParameters['topic'] = topic;
  }

  if (op !== undefined) {
    queryParameters['op'] = op;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Subscribe to a stream
 * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
 * @param {!Array<!API.Client.Object>} subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
 * @param {!Array<!API.Client.oneOf<string,integer>>=} opt_principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
 * @param {!boolean=} opt_authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. 
 * @param {!boolean=} opt_announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation. 
 * @param {!boolean=} opt_inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
 * @param {!boolean=} opt_historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
 * @param {!number=} opt_streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
 * @param {!API.Client.oneOf<string,integer>=} opt_messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.oneOf<object,object>>}
 */
API.Client.StreamsApi.prototype.subscribe = function(subscriptions, opt_principals, opt_authorizationErrorsFatal, opt_announce, opt_inviteOnly, opt_historyPublicToSubscribers, opt_streamPostPolicy, opt_messageRetentionDays, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'subscriptions' is set
  if (!subscriptions) {
    throw new Error('Missing required parameter subscriptions when calling subscribe');
  }
  if (subscriptions !== undefined) {
    queryParameters['subscriptions'] = subscriptions;
  }

  if (opt_principals !== undefined) {
    queryParameters['principals'] = opt_principals;
  }

  if (opt_authorizationErrorsFatal !== undefined) {
    queryParameters['authorization_errors_fatal'] = opt_authorizationErrorsFatal;
  }

  if (opt_announce !== undefined) {
    queryParameters['announce'] = opt_announce;
  }

  if (opt_inviteOnly !== undefined) {
    queryParameters['invite_only'] = opt_inviteOnly;
  }

  if (opt_historyPublicToSubscribers !== undefined) {
    queryParameters['history_public_to_subscribers'] = opt_historyPublicToSubscribers;
  }

  if (opt_streamPostPolicy !== undefined) {
    queryParameters['stream_post_policy'] = opt_streamPostPolicy;
  }

  if (opt_messageRetentionDays !== undefined) {
    queryParameters['message_retention_days'] = opt_messageRetentionDays;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Unsubscribe from a stream
 * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
 * @param {!Array<!string>} subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
 * @param {!Array<!API.Client.oneOf<string,integer>>=} opt_principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.unsubscribe = function(subscriptions, opt_principals, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'subscriptions' is set
  if (!subscriptions) {
    throw new Error('Missing required parameter subscriptions when calling unsubscribe');
  }
  if (subscriptions !== undefined) {
    queryParameters['subscriptions'] = subscriptions;
  }

  if (opt_principals !== undefined) {
    queryParameters['principals'] = opt_principals;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update a stream
 * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
 * @param {!number} streamId The ID of the stream to access. 
 * @param {!string=} opt_description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
 * @param {!string=} opt_newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
 * @param {!boolean=} opt_isPrivate Change whether the stream is a private stream. 
 * @param {!boolean=} opt_isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. 
 * @param {!number=} opt_streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
 * @param {!boolean=} opt_historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
 * @param {!API.Client.oneOf<string,integer>=} opt_messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccess>}
 */
API.Client.StreamsApi.prototype.updateStream = function(streamId, opt_description, opt_newName, opt_isPrivate, opt_isAnnouncementOnly, opt_streamPostPolicy, opt_historyPublicToSubscribers, opt_messageRetentionDays, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/streams/{stream_id}'
      .replace('{' + 'stream_id' + '}', String(streamId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'streamId' is set
  if (!streamId) {
    throw new Error('Missing required parameter streamId when calling updateStream');
  }
  if (opt_description !== undefined) {
    queryParameters['description'] = opt_description;
  }

  if (opt_newName !== undefined) {
    queryParameters['new_name'] = opt_newName;
  }

  if (opt_isPrivate !== undefined) {
    queryParameters['is_private'] = opt_isPrivate;
  }

  if (opt_isAnnouncementOnly !== undefined) {
    queryParameters['is_announcement_only'] = opt_isAnnouncementOnly;
  }

  if (opt_streamPostPolicy !== undefined) {
    queryParameters['stream_post_policy'] = opt_streamPostPolicy;
  }

  if (opt_historyPublicToSubscribers !== undefined) {
    queryParameters['history_public_to_subscribers'] = opt_historyPublicToSubscribers;
  }

  if (opt_messageRetentionDays !== undefined) {
    queryParameters['message_retention_days'] = opt_messageRetentionDays;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update subscription settings
 * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
 * @param {!Array<!API.Client.Object>} subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.updateSubscriptionSettings = function(subscriptionData, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions/properties';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'subscriptionData' is set
  if (!subscriptionData) {
    throw new Error('Missing required parameter subscriptionData when calling updateSubscriptionSettings');
  }
  if (subscriptionData !== undefined) {
    queryParameters['subscription_data'] = subscriptionData;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Update subscriptions
 * Update which streams you are are subscribed to. 
 * @param {!Array<!string>=} opt_delete A list of stream names to unsubscribe from. 
 * @param {!Array<!API.Client.Object>=} opt_add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.JsonSuccessBase>}
 */
API.Client.StreamsApi.prototype.updateSubscriptions = function(opt_delete, opt_add, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/users/me/subscriptions';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_delete !== undefined) {
    queryParameters['delete'] = opt_delete;
  }

  if (opt_add !== undefined) {
    queryParameters['add'] = opt_add;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PATCH',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
