# Zulip REST API
# Powerful open source group chat 
# The version of the OpenAPI document: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# Object containing details of the message. 
type MessagesBase {

  # The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user&#39;s email address itself for this user. 
  avatar_url: String

  # A Zulip \&quot;client\&quot; string, describing what Zulip client sent the message. 
  client: String!

  # The content/body of the message. 
  content: String!

  # The HTTP &#x60;content_type&#x60; for the message content.  This will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on whether &#x60;apply_markdown&#x60; was set. 
  content_type: String!

  # Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
  display_recipient: OneOfstringarray

  # The unique message ID.  Messages should always be displayed sorted by ID. 
  id: Int!

  # Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
  is_me_message: Boolean!

  # Data on any reactions to the message. 
  reactions: [EmojiReaction]

  # A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
  recipient_id: Int!

  # The Zulip display email address of the message&#39;s sender. 
  sender_email: String!

  # The full name of the message&#39;s sender. 
  sender_full_name: String!

  # The user ID of the message&#39;s sender. 
  sender_id: Int!

  # A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;. 
  sender_realm_str: String!

  # Only present for stream messages; the ID of the stream. 
  stream_id: Int!

  # The &#x60;topic&#x60; of the message.  Currently always &#x60;\&quot;\&quot;&#x60; for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \&quot;subjects\&quot; and will eventually change. 
  subject: String!

  # Data on any links to be included in the &#x60;topic&#x60; line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message&#39;s topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called &#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60; if present for compatibility with older Zulip servers. 
  topic_links: [MessagesBaseTopicLinks]

  # Data used for certain experimental Zulip integrations. 
  submessages: [String!]

  # The UNIX timestamp for when the message was sent, in UTC seconds. 
  timestamp: Int!

  # The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;. 
  type: String!

}
