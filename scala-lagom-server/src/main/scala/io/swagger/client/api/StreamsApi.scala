/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.swagger.client.api

import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}
import play.api.libs.json._
import com.lightbend.lagom.scaladsl.api.deser.PathParamSerializer

import io.swagger.client.model.CodedError
import io.swagger.client.model.JsonError
import io.swagger.client.model.JsonSuccess
import io.swagger.client.model.JsonSuccessBase
import io.swagger.client.model.NonExistingStreamError
import io.swagger.client.model.OneOfobjectobject
import io.swagger.client.model.OneOfstringinteger

trait StreamsApi extends Service {


  final override def descriptor = {
    import Service._
    named("StreamsApi").withCalls(
      restCall(Method.DELETE, "/streams/:stream_id", archiveStream _), 
      restCall(Method.GET, "/calls/bigbluebutton/create", createBigBlueButtonVideoCall _), 
      restCall(Method.GET, "/get_stream_id?stream", getStreamId _), 
      restCall(Method.GET, "/users/me/:stream_id/topics", getStreamTopics _), 
      restCall(Method.GET, "/streams?includePublic&includeWebPublic&includeSubscribed&includeAllActive&includeDefault&includeOwnerSubscribed", getStreams _), 
      restCall(Method.GET, "/users/:user_id/subscriptions/:stream_id", getSubscriptionStatus _), 
      restCall(Method.GET, "/users/me/subscriptions?includeSubscribers", getSubscriptions _), 
      restCall(Method.PATCH, "/users/me/subscriptions/muted_topics?stream&streamId&topic&op", muteTopic _), 
      restCall(Method.POST, "/users/me/subscriptions?subscriptions&principals&authorizationErrorsFatal&announce&inviteOnly&historyPublicToSubscribers&streamPostPolicy&messageRetentionDays", subscribe _), 
      restCall(Method.DELETE, "/users/me/subscriptions?subscriptions&principals", unsubscribe _), 
      restCall(Method.PATCH, "/streams/:stream_id?description&newName&isPrivate&isAnnouncementOnly&streamPostPolicy&historyPublicToSubscribers&messageRetentionDays", updateStream _), 
      restCall(Method.POST, "/users/me/subscriptions/properties?subscriptionData", updateSubscriptionSettings _), 
      restCall(Method.PATCH, "/users/me/subscriptions?delete&add", updateSubscriptions _)
    ).withAutoAcl(true)
  }


  /**
    * Archive a stream
    * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
    *  
    * @param streamId The ID of the stream to access.  
    * @return JsonSuccess
    */
  def archiveStream(streamId: Int): ServiceCall[NotUsed ,JsonSuccess]
  
  /**
    * Create BigBlueButton video call
    * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
    * 
    * @return JsonSuccessBase
    */
  def createBigBlueButtonVideoCall(): ServiceCall[NotUsed ,JsonSuccessBase]
        
  /**
    * Get stream ID
    * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
    *  
    * @param stream The name of the stream to access.  
    * @return JsonSuccessBase
    */
  def getStreamId(stream:String          ): ServiceCall[NotUsed ,JsonSuccessBase]
  
  /**
    * Get topics in a stream
    * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
    *  
    * @param streamId The ID of the stream to access.  
    * @return JsonSuccessBase
    */
  def getStreamTopics(streamId: Int): ServiceCall[NotUsed ,JsonSuccessBase]
        
  /**
    * Get all streams
    * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
    *  
    * @param includePublic Include all public streams.  (optional, default to true) 
    * @param includeWebPublic Include all web public streams.  (optional, default to false) 
    * @param includeSubscribed Include all streams that the user is subscribed to.  (optional, default to true) 
    * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false) 
    * @param includeDefault Include all default streams for the user&#39;s realm.  (optional, default to false) 
    * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
    * @return JsonSuccessBase
    */
  def getStreams(includePublic:           Option[Boolean] /* = true*/,includeWebPublic:           Option[Boolean] /* = false*/,includeSubscribed:           Option[Boolean] /* = true*/,includeAllActive:           Option[Boolean] /* = false*/,includeDefault:           Option[Boolean] /* = false*/,includeOwnerSubscribed:           Option[Boolean] /* = false*/): ServiceCall[NotUsed ,JsonSuccessBase]
  
  /**
    * Get subscription status
    * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
    *  
    * @param userId The target user&#39;s ID.   
    * @param streamId The ID of the stream to access.  
    * @return JsonSuccessBase
    */
  def getSubscriptionStatus(userId: Int, streamId: Int): ServiceCall[NotUsed ,JsonSuccessBase]
        
  /**
    * Get subscribed streams
    * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
    *  
    * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
    * @return JsonSuccessBase
    */
  def getSubscriptions(includeSubscribers:           Option[Boolean] /* = false*/): ServiceCall[NotUsed ,JsonSuccessBase]
        
  /**
    * Topic muting
    * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
    *  
    * @param topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.   
    * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.   
    * @param stream The name of the stream to access.  (optional) 
    * @param streamId The ID of the stream to access.  (optional)
    * @return JsonSuccess
    */
  def muteTopic(stream:           Option[String] = None,streamId:           Option[Int] = None,topic:String          ,op: Option[StreamsApiOpEnum.StreamsApiOpEnum]): ServiceCall[NotUsed ,JsonSuccess]
        
  // subscriptions:Seq[Any]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  // principals:Seq[OneOfstringinteger]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * Subscribe to a stream
    * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
    *  
    * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.   
    * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() ) 
    * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true) 
    * @param announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false) 
    * @param inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false) 
    * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional) 
    * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1) 
    * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
    * @return OneOfobjectobject
    */
  def subscribe(authorizationErrorsFatal:           Option[Boolean] /* = true*/,announce:           Option[Boolean] /* = false*/,inviteOnly:           Option[Boolean] /* = false*/,historyPublicToSubscribers:           Option[Boolean] = None,streamPostPolicy:           Option[Int] /* = 1*/,messageRetentionDays:           Option[OneOfstringinteger] = None): ServiceCall[NotUsed ,OneOfobjectobject]
        
  // subscriptions:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  // principals:Seq[OneOfstringinteger]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * Unsubscribe from a stream
    * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
    *  
    * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.   
    * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() )
    * @return JsonSuccessBase
    */
  def unsubscribe(): ServiceCall[NotUsed ,JsonSuccessBase]
        
  /**
    * Update a stream
    * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
    *  
    * @param streamId The ID of the stream to access.   
    * @param description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional) 
    * @param newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional) 
    * @param isPrivate Change whether the stream is a private stream.  (optional) 
    * @param isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional) 
    * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1) 
    * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional) 
    * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
    * @return JsonSuccess
    */
  def updateStream(description:           Option[String] = None,newName:           Option[String] = None,isPrivate:           Option[Boolean] = None,isAnnouncementOnly:           Option[Boolean] = None,streamPostPolicy:           Option[Int] /* = 1*/,historyPublicToSubscribers:           Option[Boolean] = None,messageRetentionDays:           Option[OneOfstringinteger] = NonestreamId: Int): ServiceCall[NotUsed ,JsonSuccess]
        
  // subscriptionData:Seq[Any]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * Update subscription settings
    * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
    *  
    * @param subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
    * @return JsonSuccessBase
    */
  def updateSubscriptionSettings(): ServiceCall[NotUsed ,JsonSuccessBase]
        
  // delete:Seq[String]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  // add:Seq[Any]  -- not yet supported Seq PathParamSerializers for multi value query parameters https://github.com/lagom/lagom/issues/643
      
  /**
    * Update subscriptions
    * Update which streams you are are subscribed to. 
    *  
    * @param delete A list of stream names to unsubscribe from.  (optional, default to new ListBuffer[String]() ) 
    * @param add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional, default to new ListBuffer[Any]() )
    * @return JsonSuccessBase
    */
  def updateSubscriptions(): ServiceCall[NotUsed ,JsonSuccessBase]
  

        object StreamsApiOpEnum extends Enumeration {
        val   add, remove = Value     
        type StreamsApiOpEnum = Value
        implicit val format: Format[Value] = Format(Reads.enumNameReads(this), Writes.enumNameWrites[StreamsApiOpEnum.type])
        implicit val pathParamSerializer: PathParamSerializer[StreamsApiOpEnum] = PathParamSerializer.required("StreamsApiOpEnum")(withName)(_.toString)
        }
  }

