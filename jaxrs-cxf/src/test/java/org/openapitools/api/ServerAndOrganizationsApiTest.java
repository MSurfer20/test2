/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import java.io.File;
import org.openapitools.model.JsonSuccess;
import org.openapitools.model.JsonSuccessBase;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Zulip REST API
 *
 * <p>Powerful open source group chat 
 *
 * API tests for ServerAndOrganizationsApi 
 */
public class ServerAndOrganizationsApiTest {


    private ServerAndOrganizationsApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://example.zulipchat.com/api/v1", ServerAndOrganizationsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Add a code playground
     *
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCodePlaygroundTest() {
        String name = null;
        String pygmentsLanguage = null;
        String urlPrefix = null;
        //JsonSuccessBase response = api.addCodePlayground(name, pygmentsLanguage, urlPrefix);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Add a linkifier
     *
     * Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLinkifierTest() {
        String pattern = null;
        String urlFormatString = null;
        //JsonSuccessBase response = api.addLinkifier(pattern, urlFormatString);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Create a custom profile field
     *
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomProfileFieldTest() {
        Integer fieldType = null;
        String name = null;
        String hint = null;
        Object fieldData = null;
        //JsonSuccessBase response = api.createCustomProfileField(fieldType, name, hint, fieldData);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get all custom emoji
     *
     * Get all the custom emoji in the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomEmojiTest() {
        //JsonSuccessBase response = api.getCustomEmoji();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get all custom profile fields
     *
     * Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomProfileFieldsTest() {
        //JsonSuccessBase response = api.getCustomProfileFields();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get linkifiers
     *
     * List all of an organization&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLinkifiersTest() {
        //JsonSuccessBase response = api.getLinkifiers();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get server settings
     *
     * Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getServerSettingsTest() {
        //JsonSuccessBase response = api.getServerSettings();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Remove a code playground
     *
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeCodePlaygroundTest() {
        Integer playgroundId = null;
        //JsonSuccess response = api.removeCodePlayground(playgroundId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Remove a linkifier
     *
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeLinkifierTest() {
        Integer filterId = null;
        //JsonSuccess response = api.removeLinkifier(filterId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Reorder custom profile fields
     *
     * Reorder the custom profile fields in the user&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reorderCustomProfileFieldsTest() {
        List<Integer> order = null;
        //JsonSuccess response = api.reorderCustomProfileFields(order);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update a linkifier
     *
     * Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLinkifierTest() {
        Integer filterId = null;
        String pattern = null;
        String urlFormatString = null;
        //JsonSuccess response = api.updateLinkifier(filterId, pattern, urlFormatString);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Upload custom emoji
     *
     * This endpoint is used to upload a custom emoji for use in the user&#39;s organization.  Access to this endpoint depends on the [organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadCustomEmojiTest() {
        String emojiName = null;
        org.apache.cxf.jaxrs.ext.multipart.Attachment filename = null;
        //JsonSuccess response = api.uploadCustomEmoji(emojiName, filename);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
