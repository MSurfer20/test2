<?xml version="1.0" encoding="utf-8"?>
<definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:schemas="http://localhost/soap/ServiceV1/model" xmlns:wsdl="http://localhost/soap/ServiceV1/service" targetNamespace="http://localhost/soap/ServiceV1/service" xmlns="http://schemas.xmlsoap.org/wsdl/">
  <types>
    <xs:schema xmlns:tns="http://localhost/soap/ServiceV1/model" targetNamespace="http://localhost/soap/ServiceV1/model" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="PostDev_fetch_api_key_RequestMessage" type="schemas:PostDev_fetch_api_key_RequestMessage" />
      <xs:element name="PostDev_fetch_api_key_ResponseMessage" type="schemas:PostDev_fetch_api_key_ResponseMessage" />
      <xs:element name="PostFetch_api_key_RequestMessage" type="schemas:PostFetch_api_key_RequestMessage" />
      <xs:element name="PostFetch_api_key_ResponseMessage" type="schemas:PostFetch_api_key_ResponseMessage" />
      <xs:element name="PostDrafts_RequestMessage" type="schemas:PostDrafts_RequestMessage" />
      <xs:element name="PostDrafts_ResponseMessage" type="schemas:PostDrafts_ResponseMessage" />
      <xs:element name="PostDrafts_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeleteDraftsByDraft_id_RequestMessage" type="schemas:DeleteDraftsByDraft_id_RequestMessage" />
      <xs:element name="DeleteDraftsByDraft_id_ResponseMessage" type="schemas:DeleteDraftsByDraft_id_ResponseMessage" />
      <xs:element name="DeleteDraftsByDraft_id_404" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Not Found.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchDraftsByDraft_id_RequestMessage" type="schemas:PatchDraftsByDraft_id_RequestMessage" />
      <xs:element name="PatchDraftsByDraft_id_ResponseMessage" type="schemas:PatchDraftsByDraft_id_ResponseMessage" />
      <xs:element name="PatchDraftsByDraft_id_404" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Not Found.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetDrafts_RequestMessage" type="schemas:GetDrafts_RequestMessage" />
      <xs:element name="GetDrafts_ResponseMessage" type="schemas:GetDrafts_ResponseMessage" />
      <xs:element name="PostMessagesReactionsByMessage_id_RequestMessage" type="schemas:PostMessagesReactionsByMessage_id_RequestMessage" />
      <xs:element name="PostMessagesReactionsByMessage_id_ResponseMessage" type="schemas:PostMessagesReactionsByMessage_id_ResponseMessage" />
      <xs:element name="PostMessagesReactionsByMessage_id_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetMessagesMatches_narrow_RequestMessage" type="schemas:GetMessagesMatches_narrow_RequestMessage" />
      <xs:element name="GetMessagesMatches_narrow_ResponseMessage" type="schemas:GetMessagesMatches_narrow_ResponseMessage" />
      <xs:element name="DeleteMessagesByMessage_id_RequestMessage" type="schemas:DeleteMessagesByMessage_id_RequestMessage" />
      <xs:element name="DeleteMessagesByMessage_id_ResponseMessage" type="schemas:DeleteMessagesByMessage_id_ResponseMessage" />
      <xs:element name="DeleteMessagesByMessage_id_400" type="schemas:oneOf&lt;object,object&gt;">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetUser_uploadsByRealm_id_strAndFilename_RequestMessage" type="schemas:GetUser_uploadsByRealm_id_strAndFilename_RequestMessage" />
      <xs:element name="GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage" type="schemas:GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage" />
      <xs:element name="GetMessagesHistoryByMessage_id_RequestMessage" type="schemas:GetMessagesHistoryByMessage_id_RequestMessage" />
      <xs:element name="GetMessagesHistoryByMessage_id_ResponseMessage" type="schemas:GetMessagesHistoryByMessage_id_ResponseMessage" />
      <xs:element name="GetMessagesHistoryByMessage_id_400" type="schemas:InvalidMessageError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetMessages_RequestMessage" type="schemas:GetMessages_RequestMessage" />
      <xs:element name="GetMessages_ResponseMessage" type="schemas:GetMessages_ResponseMessage" />
      <xs:element name="GetMessagesByMessage_id_RequestMessage" type="schemas:GetMessagesByMessage_id_RequestMessage" />
      <xs:element name="GetMessagesByMessage_id_ResponseMessage" type="schemas:GetMessagesByMessage_id_ResponseMessage" />
      <xs:element name="GetMessagesByMessage_id_400" type="schemas:InvalidMessageError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostMark_all_as_read_RequestMessage" type="schemas:PostMark_all_as_read_RequestMessage" />
      <xs:element name="PostMark_all_as_read_ResponseMessage" type="schemas:PostMark_all_as_read_ResponseMessage" />
      <xs:element name="PostMark_stream_as_read_RequestMessage" type="schemas:PostMark_stream_as_read_RequestMessage" />
      <xs:element name="PostMark_stream_as_read_ResponseMessage" type="schemas:PostMark_stream_as_read_ResponseMessage" />
      <xs:element name="PostMark_topic_as_read_RequestMessage" type="schemas:PostMark_topic_as_read_RequestMessage" />
      <xs:element name="PostMark_topic_as_read_ResponseMessage" type="schemas:PostMark_topic_as_read_ResponseMessage" />
      <xs:element name="DeleteMessagesReactionsByMessage_id_RequestMessage" type="schemas:DeleteMessagesReactionsByMessage_id_RequestMessage" />
      <xs:element name="DeleteMessagesReactionsByMessage_id_ResponseMessage" type="schemas:DeleteMessagesReactionsByMessage_id_ResponseMessage" />
      <xs:element name="DeleteMessagesReactionsByMessage_id_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostMessagesRender_RequestMessage" type="schemas:PostMessagesRender_RequestMessage" />
      <xs:element name="PostMessagesRender_ResponseMessage" type="schemas:PostMessagesRender_ResponseMessage" />
      <xs:element name="PostMessages_RequestMessage" type="schemas:PostMessages_RequestMessage" />
      <xs:element name="PostMessages_ResponseMessage" type="schemas:PostMessages_ResponseMessage" />
      <xs:element name="PostMessages_400" type="schemas:oneOf&lt;object,object&gt;">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchMessagesByMessage_id_RequestMessage" type="schemas:PatchMessagesByMessage_id_RequestMessage" />
      <xs:element name="PatchMessagesByMessage_id_ResponseMessage" type="schemas:PatchMessagesByMessage_id_ResponseMessage" />
      <xs:element name="PatchMessagesByMessage_id_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostMessagesFlags_RequestMessage" type="schemas:PostMessagesFlags_RequestMessage" />
      <xs:element name="PostMessagesFlags_ResponseMessage" type="schemas:PostMessagesFlags_ResponseMessage" />
      <xs:element name="PostUser_uploads_RequestMessage" type="schemas:PostUser_uploads_RequestMessage" />
      <xs:element name="PostUser_uploads_ResponseMessage" type="schemas:PostUser_uploads_ResponseMessage" />
      <xs:element name="DeleteEvents_RequestMessage" type="schemas:DeleteEvents_RequestMessage" />
      <xs:element name="DeleteEvents_ResponseMessage" type="schemas:DeleteEvents_ResponseMessage" />
      <xs:element name="DeleteEvents_400" type="schemas:BadEventQueueIdError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetEvents_RequestMessage" type="schemas:GetEvents_RequestMessage" />
      <xs:element name="GetEvents_ResponseMessage" type="schemas:GetEvents_ResponseMessage" />
      <xs:element name="GetEvents_400" type="schemas:BadEventQueueIdError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostReal-time_RequestMessage" type="schemas:PostReal-time_RequestMessage" />
      <xs:element name="PostReal-time_ResponseMessage" type="schemas:PostReal-time_ResponseMessage" />
      <xs:element name="PostRegister_RequestMessage" type="schemas:PostRegister_RequestMessage" />
      <xs:element name="PostRegister_ResponseMessage" type="schemas:PostRegister_ResponseMessage" />
      <xs:element name="PostRest-error-handling_RequestMessage" type="schemas:PostRest-error-handling_RequestMessage" />
      <xs:element name="PostRest-error-handling_ResponseMessage" type="schemas:PostRest-error-handling_ResponseMessage" />
      <xs:element name="PostRest-error-handling_400" type="schemas:oneOf&lt;InvalidApiKeyError,MissingArgumentError,UserNotAuthorizedError&gt;">
        <xs:annotation>
          <xs:documentation>Bad request. </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostRest-error-handling_401" type="schemas:oneOf&lt;UserDeactivatedError,RealmDeactivatedError&gt;">
        <xs:annotation>
          <xs:documentation>Unauthorized. </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostRest-error-handling_429" type="schemas:oneOf&lt;RateLimitedError&gt;">
        <xs:annotation>
          <xs:documentation>Rate limit exceeded. </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostRealmPlaygrounds_RequestMessage" type="schemas:PostRealmPlaygrounds_RequestMessage" />
      <xs:element name="PostRealmPlaygrounds_ResponseMessage" type="schemas:PostRealmPlaygrounds_ResponseMessage" />
      <xs:element name="PostRealmFilters_RequestMessage" type="schemas:PostRealmFilters_RequestMessage" />
      <xs:element name="PostRealmFilters_ResponseMessage" type="schemas:PostRealmFilters_ResponseMessage" />
      <xs:element name="PostRealmProfile_fields_RequestMessage" type="schemas:PostRealmProfile_fields_RequestMessage" />
      <xs:element name="PostRealmProfile_fields_ResponseMessage" type="schemas:PostRealmProfile_fields_ResponseMessage" />
      <xs:element name="GetRealmEmoji_RequestMessage" type="schemas:GetRealmEmoji_RequestMessage" />
      <xs:element name="GetRealmEmoji_ResponseMessage" type="schemas:GetRealmEmoji_ResponseMessage" />
      <xs:element name="GetRealmProfile_fields_RequestMessage" type="schemas:GetRealmProfile_fields_RequestMessage" />
      <xs:element name="GetRealmProfile_fields_ResponseMessage" type="schemas:GetRealmProfile_fields_ResponseMessage" />
      <xs:element name="GetRealmLinkifiers_RequestMessage" type="schemas:GetRealmLinkifiers_RequestMessage" />
      <xs:element name="GetRealmLinkifiers_ResponseMessage" type="schemas:GetRealmLinkifiers_ResponseMessage" />
      <xs:element name="GetServer_settings_RequestMessage" type="schemas:GetServer_settings_RequestMessage" />
      <xs:element name="GetServer_settings_ResponseMessage" type="schemas:GetServer_settings_ResponseMessage" />
      <xs:element name="DeleteRealmPlaygroundsByPlayground_id_RequestMessage" type="schemas:DeleteRealmPlaygroundsByPlayground_id_RequestMessage" />
      <xs:element name="DeleteRealmPlaygroundsByPlayground_id_ResponseMessage" type="schemas:DeleteRealmPlaygroundsByPlayground_id_ResponseMessage" />
      <xs:element name="DeleteRealmFiltersByFilter_id_RequestMessage" type="schemas:DeleteRealmFiltersByFilter_id_RequestMessage" />
      <xs:element name="DeleteRealmFiltersByFilter_id_ResponseMessage" type="schemas:DeleteRealmFiltersByFilter_id_ResponseMessage" />
      <xs:element name="PatchRealmProfile_fields_RequestMessage" type="schemas:PatchRealmProfile_fields_RequestMessage" />
      <xs:element name="PatchRealmProfile_fields_ResponseMessage" type="schemas:PatchRealmProfile_fields_ResponseMessage" />
      <xs:element name="PatchRealmFiltersByFilter_id_RequestMessage" type="schemas:PatchRealmFiltersByFilter_id_RequestMessage" />
      <xs:element name="PatchRealmFiltersByFilter_id_ResponseMessage" type="schemas:PatchRealmFiltersByFilter_id_ResponseMessage" />
      <xs:element name="PostRealmEmojiByEmoji_name_RequestMessage" type="schemas:PostRealmEmojiByEmoji_name_RequestMessage" />
      <xs:element name="PostRealmEmojiByEmoji_name_ResponseMessage" type="schemas:PostRealmEmojiByEmoji_name_ResponseMessage" />
      <xs:element name="DeleteStreamsByStream_id_RequestMessage" type="schemas:DeleteStreamsByStream_id_RequestMessage" />
      <xs:element name="DeleteStreamsByStream_id_ResponseMessage" type="schemas:DeleteStreamsByStream_id_ResponseMessage" />
      <xs:element name="DeleteStreamsByStream_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetCallsBigbluebuttonCreate_RequestMessage" type="schemas:GetCallsBigbluebuttonCreate_RequestMessage" />
      <xs:element name="GetCallsBigbluebuttonCreate_ResponseMessage" type="schemas:GetCallsBigbluebuttonCreate_ResponseMessage" />
      <xs:element name="PostStreamsDelete_topicByStream_id_RequestMessage" type="schemas:PostStreamsDelete_topicByStream_id_RequestMessage" />
      <xs:element name="PostStreamsDelete_topicByStream_id_ResponseMessage" type="schemas:PostStreamsDelete_topicByStream_id_ResponseMessage" />
      <xs:element name="PostStreamsDelete_topicByStream_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Error.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetGet_stream_id_RequestMessage" type="schemas:GetGet_stream_id_RequestMessage" />
      <xs:element name="GetGet_stream_id_ResponseMessage" type="schemas:GetGet_stream_id_ResponseMessage" />
      <xs:element name="GetGet_stream_id_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetUsersMeTopicsByStream_id_RequestMessage" type="schemas:GetUsersMeTopicsByStream_id_RequestMessage" />
      <xs:element name="GetUsersMeTopicsByStream_id_ResponseMessage" type="schemas:GetUsersMeTopicsByStream_id_ResponseMessage" />
      <xs:element name="GetUsersMeTopicsByStream_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetStreams_RequestMessage" type="schemas:GetStreams_RequestMessage" />
      <xs:element name="GetStreams_ResponseMessage" type="schemas:GetStreams_ResponseMessage" />
      <xs:element name="GetStreams_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetStreamsMembersByStream_id_RequestMessage" type="schemas:GetStreamsMembersByStream_id_RequestMessage" />
      <xs:element name="GetStreamsMembersByStream_id_ResponseMessage" type="schemas:GetStreamsMembersByStream_id_ResponseMessage" />
      <xs:element name="GetStreamsMembersByStream_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage" type="schemas:GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage" />
      <xs:element name="GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage" type="schemas:GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage" />
      <xs:element name="GetUsersMeSubscriptions_RequestMessage" type="schemas:GetUsersMeSubscriptions_RequestMessage" />
      <xs:element name="GetUsersMeSubscriptions_ResponseMessage" type="schemas:GetUsersMeSubscriptions_ResponseMessage" />
      <xs:element name="PatchUsersMeSubscriptionsMuted_topics_RequestMessage" type="schemas:PatchUsersMeSubscriptionsMuted_topics_RequestMessage" />
      <xs:element name="PatchUsersMeSubscriptionsMuted_topics_ResponseMessage" type="schemas:PatchUsersMeSubscriptionsMuted_topics_ResponseMessage" />
      <xs:element name="PatchUsersMeSubscriptionsMuted_topics_400" type="schemas:oneOf&lt;object,object&gt;">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostUsersMeSubscriptions_RequestMessage" type="schemas:PostUsersMeSubscriptions_RequestMessage" />
      <xs:element name="PostUsersMeSubscriptions_ResponseMessage" type="schemas:PostUsersMeSubscriptions_ResponseMessage" />
      <xs:element name="PostUsersMeSubscriptions_400" type="schemas:oneOf&lt;object,object&gt;">
        <xs:annotation>
          <xs:documentation>Success.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeleteUsersMeSubscriptions_RequestMessage" type="schemas:DeleteUsersMeSubscriptions_RequestMessage" />
      <xs:element name="DeleteUsersMeSubscriptions_ResponseMessage" type="schemas:DeleteUsersMeSubscriptions_ResponseMessage" />
      <xs:element name="DeleteUsersMeSubscriptions_400" type="schemas:NonExistingStreamError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchStreamsByStream_id_RequestMessage" type="schemas:PatchStreamsByStream_id_RequestMessage" />
      <xs:element name="PatchStreamsByStream_id_ResponseMessage" type="schemas:PatchStreamsByStream_id_ResponseMessage" />
      <xs:element name="PatchStreamsByStream_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostUsersMeSubscriptionsProperties_RequestMessage" type="schemas:PostUsersMeSubscriptionsProperties_RequestMessage" />
      <xs:element name="PostUsersMeSubscriptionsProperties_ResponseMessage" type="schemas:PostUsersMeSubscriptionsProperties_ResponseMessage" />
      <xs:element name="PatchUsersMeSubscriptions_RequestMessage" type="schemas:PatchUsersMeSubscriptions_RequestMessage" />
      <xs:element name="PatchUsersMeSubscriptions_ResponseMessage" type="schemas:PatchUsersMeSubscriptions_ResponseMessage" />
      <xs:element name="PostUsers_RequestMessage" type="schemas:PostUsers_RequestMessage" />
      <xs:element name="PostUsers_ResponseMessage" type="schemas:PostUsers_ResponseMessage" />
      <xs:element name="PostUsers_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostUser_groupsCreate_RequestMessage" type="schemas:PostUser_groupsCreate_RequestMessage" />
      <xs:element name="PostUser_groupsCreate_ResponseMessage" type="schemas:PostUser_groupsCreate_ResponseMessage" />
      <xs:element name="PostUser_groupsCreate_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeleteUsersMe_RequestMessage" type="schemas:DeleteUsersMe_RequestMessage" />
      <xs:element name="DeleteUsersMe_ResponseMessage" type="schemas:DeleteUsersMe_ResponseMessage" />
      <xs:element name="DeleteUsersMe_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeleteUsersByUser_id_RequestMessage" type="schemas:DeleteUsersByUser_id_RequestMessage" />
      <xs:element name="DeleteUsersByUser_id_ResponseMessage" type="schemas:DeleteUsersByUser_id_ResponseMessage" />
      <xs:element name="DeleteUsersByUser_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="GetAttachments_RequestMessage" type="schemas:GetAttachments_RequestMessage" />
      <xs:element name="GetAttachments_ResponseMessage" type="schemas:GetAttachments_ResponseMessage" />
      <xs:element name="GetUsersMe_RequestMessage" type="schemas:GetUsersMe_RequestMessage" />
      <xs:element name="GetUsersMe_ResponseMessage" type="schemas:GetUsersMe_ResponseMessage" />
      <xs:element name="GetUsersByUser_id_RequestMessage" type="schemas:GetUsersByUser_id_RequestMessage" />
      <xs:element name="GetUsersByUser_id_ResponseMessage" type="schemas:GetUsersByUser_id_ResponseMessage" />
      <xs:element name="GetUsersByEmail_RequestMessage" type="schemas:GetUsersByEmail_RequestMessage" />
      <xs:element name="GetUsersByEmail_ResponseMessage" type="schemas:GetUsersByEmail_ResponseMessage" />
      <xs:element name="GetUser_groups_RequestMessage" type="schemas:GetUser_groups_RequestMessage" />
      <xs:element name="GetUser_groups_ResponseMessage" type="schemas:GetUser_groups_ResponseMessage" />
      <xs:element name="GetUsersPresenceByUser_id_or_email_RequestMessage" type="schemas:GetUsersPresenceByUser_id_or_email_RequestMessage" />
      <xs:element name="GetUsersPresenceByUser_id_or_email_ResponseMessage" type="schemas:GetUsersPresenceByUser_id_or_email_ResponseMessage" />
      <xs:element name="GetUsers_RequestMessage" type="schemas:GetUsers_RequestMessage" />
      <xs:element name="GetUsers_ResponseMessage" type="schemas:GetUsers_ResponseMessage" />
      <xs:element name="PostUsersMeMuted_usersByMuted_user_id_RequestMessage" type="schemas:PostUsersMeMuted_usersByMuted_user_id_RequestMessage" />
      <xs:element name="PostUsersMeMuted_usersByMuted_user_id_ResponseMessage" type="schemas:PostUsersMeMuted_usersByMuted_user_id_ResponseMessage" />
      <xs:element name="PostUsersMeMuted_usersByMuted_user_id_400" type="schemas:oneOf&lt;object,object,object&gt;">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostUsersReactivateByUser_id_RequestMessage" type="schemas:PostUsersReactivateByUser_id_RequestMessage" />
      <xs:element name="PostUsersReactivateByUser_id_ResponseMessage" type="schemas:PostUsersReactivateByUser_id_ResponseMessage" />
      <xs:element name="DeleteUser_groupsByUser_group_id_RequestMessage" type="schemas:DeleteUser_groupsByUser_group_id_RequestMessage" />
      <xs:element name="DeleteUser_groupsByUser_group_id_ResponseMessage" type="schemas:DeleteUser_groupsByUser_group_id_ResponseMessage" />
      <xs:element name="DeleteUser_groupsByUser_group_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostTyping_RequestMessage" type="schemas:PostTyping_RequestMessage" />
      <xs:element name="PostTyping_ResponseMessage" type="schemas:PostTyping_ResponseMessage" />
      <xs:element name="PostTyping_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage" type="schemas:DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage" />
      <xs:element name="DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage" type="schemas:DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage" />
      <xs:element name="DeleteUsersMeMuted_usersByMuted_user_id_400" type="schemas:oneOf&lt;object,object&gt;">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchSettings_RequestMessage" type="schemas:PatchSettings_RequestMessage" />
      <xs:element name="PatchSettings_ResponseMessage" type="schemas:PatchSettings_ResponseMessage" />
      <xs:element name="PostUsersMeStatus_RequestMessage" type="schemas:PostUsersMeStatus_RequestMessage" />
      <xs:element name="PostUsersMeStatus_ResponseMessage" type="schemas:PostUsersMeStatus_ResponseMessage" />
      <xs:element name="PostUsersMeStatus_400" type="schemas:oneOf&lt;object,object,object,object,object,object&gt;">
        <xs:annotation>
          <xs:documentation>Success.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchUsersByUser_id_RequestMessage" type="schemas:PatchUsersByUser_id_RequestMessage" />
      <xs:element name="PatchUsersByUser_id_ResponseMessage" type="schemas:PatchUsersByUser_id_ResponseMessage" />
      <xs:element name="PatchUsersByUser_id_400" type="schemas:CodedError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PatchUser_groupsByUser_group_id_RequestMessage" type="schemas:PatchUser_groupsByUser_group_id_RequestMessage" />
      <xs:element name="PatchUser_groupsByUser_group_id_ResponseMessage" type="schemas:PatchUser_groupsByUser_group_id_ResponseMessage" />
      <xs:element name="PatchUser_groupsByUser_group_id_400" type="schemas:JsonError">
        <xs:annotation>
          <xs:documentation>Bad request.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PostUser_groupsMembersByUser_group_id_RequestMessage" type="schemas:PostUser_groupsMembersByUser_group_id_RequestMessage" />
      <xs:element name="PostUser_groupsMembersByUser_group_id_ResponseMessage" type="schemas:PostUser_groupsMembersByUser_group_id_ResponseMessage" />
      <xs:element name="PostZulip-outgoing-webhook_RequestMessage" type="schemas:PostZulip-outgoing-webhook_RequestMessage" />
      <xs:element name="PostZulip-outgoing-webhook_ResponseMessage" type="schemas:PostZulip-outgoing-webhook_ResponseMessage" />
      <xs:complexType name="AddSubscriptionsResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="subscribed" type="schemas:string">
            <xs:annotation>
              <xs:documentation>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="already_subscribed" type="schemas:string">
            <xs:annotation>
              <xs:documentation>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="unauthorized" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AddSubscriptionsResponseAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="subscribed" type="schemas:string">
            <xs:annotation>
              <xs:documentation>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="already_subscribed" type="schemas:string">
            <xs:annotation>
              <xs:documentation>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="unauthorized" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ApiKeyResponse">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="1" name="api_key" type="xs:string">
            <xs:annotation>
              <xs:documentation>The API key that can be used to authenticate as the requested user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email address of the user who owns the API key </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="ApiKeyResponseAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="1" name="api_key" type="xs:string">
            <xs:annotation>
              <xs:documentation>The API key that can be used to authenticate as the requested user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email address of the user who owns the API key </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Attachments">
        <xs:annotation>
          <xs:documentation>Dictionary containing details of a file uploaded by a user. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID for the attachment. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Name of the uploaded file. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="path_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>A representation of the path of the file within the repository of user-uploaded files.  If the &#x60;path_id&#x60; of a file is &#x60;{realm_id}/ab/cdef/temp_file.py&#x60;, its URL will be: &#x60;{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="size" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Size of the file in bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="create_time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Time when the attachment was uploaded as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously a floating point number. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="messages" type="schemas:Attachments_messages">
            <xs:annotation>
              <xs:documentation>Contains basic details on any Zulip messages that have been sent referencing this [uploaded file](/api/upload-file). This includes messages sent by any user in the Zulip organization who sent a message containing a link to the uploaded file. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="AttachmentsMessages">
        <xs:sequence>
          <xs:element minOccurs="0" name="date_sent" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Time when the message was sent as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously strangely called &#x60;name&#x60; and was a floating point number. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique message ID.  Messages should always be displayed sorted by ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BadEventQueueIdError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="queue_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The string that identifies the invalid event queue. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BadEventQueueIdErrorAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="queue_id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The string that identifies the invalid event queue. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicBot">
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="api_key" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_sending_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_events_register_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_all_public_streams" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="services" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicBotAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="api_key" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_sending_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_events_register_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_all_public_streams" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="services" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicBotBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The user id of the bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="full_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The full name of the bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="api_key" type="xs:string">
            <xs:annotation>
              <xs:documentation>The API key of the bot which it uses to make API requests. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="default_sending_stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="default_events_register_stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="default_all_public_streams" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the bot can send messages to all streams by default. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="avatar_url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL of the bot&#39;s avatar. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="owner_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The user id of the bot&#39;s owner.  Null if the bot has no owner. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="services" type="schemas:oneOf&lt;object,object&gt;">
            <xs:annotation>
              <xs:documentation>The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicStream">
        <xs:sequence>
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="description" type="xs:AnyType" />
          <xs:element minOccurs="0" name="date_created" type="xs:AnyType" />
          <xs:element minOccurs="0" name="invite_only" type="xs:AnyType" />
          <xs:element minOccurs="0" name="rendered_description" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_web_public" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_post_policy" type="xs:AnyType" />
          <xs:element minOccurs="0" name="message_retention_days" type="xs:AnyType" />
          <xs:element minOccurs="0" name="history_public_to_subscribers" type="xs:AnyType" />
          <xs:element minOccurs="0" name="first_message_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_announcement_only" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicStreamAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="description" type="xs:AnyType" />
          <xs:element minOccurs="0" name="date_created" type="xs:AnyType" />
          <xs:element minOccurs="0" name="invite_only" type="xs:AnyType" />
          <xs:element minOccurs="0" name="rendered_description" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_web_public" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_post_policy" type="xs:AnyType" />
          <xs:element minOccurs="0" name="message_retention_days" type="xs:AnyType" />
          <xs:element minOccurs="0" name="history_public_to_subscribers" type="xs:AnyType" />
          <xs:element minOccurs="0" name="first_message_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_announcement_only" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BasicStreamBase">
        <xs:annotation>
          <xs:documentation>Object containing basic details about the stream. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="stream_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID of the stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="date_created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="invite_only" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Specifies whether the stream is private or not. Only people who have been invited can access a private stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="rendered_description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_web_public" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the stream has been configured to allow unauthenticated access to its message history from the web. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream_post_policy" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message_retention_days" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="history_public_to_subscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="first_message_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_announcement_only" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Bot">
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="api_key" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_sending_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_events_register_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_all_public_streams" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="services" type="xs:AnyType" />
          <xs:element minOccurs="0" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email of the bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bot_type" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_active" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean describing whether the user account has been deactivated. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="BotAllOf">
        <xs:annotation>
          <xs:documentation>Object containing details of a bot. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="api_key" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_sending_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_events_register_stream" type="xs:AnyType" />
          <xs:element minOccurs="0" name="default_all_public_streams" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="services" type="xs:AnyType" />
          <xs:element minOccurs="0" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email of the bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bot_type" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_active" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean describing whether the user account has been deactivated. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CodedError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CodedErrorAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CodedErrorBase">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:string">
            <xs:annotation>
              <xs:documentation>A string that identifies the error. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CodedErrorBaseAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:string">
            <xs:annotation>
              <xs:documentation>A string that identifies the error. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="CustomProfileField">
        <xs:annotation>
          <xs:documentation>Dictionary containing the details of a custom profile field configured for this organization. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="order" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Custom profile fields are displayed in both settings UI and UI showing users&#39; profiles in increasing &#x60;order&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the custom profile field. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hint" type="xs:string">
            <xs:annotation>
              <xs:documentation>The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="field_data" type="xs:string">
            <xs:annotation>
              <xs:documentation>Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DefaultStreamGroup">
        <xs:annotation>
          <xs:documentation>Dictionary containing details of a default stream group. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Name of the default stream group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>Description of the default stream group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>id of the default stream group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="streams" type="schemas:BasicStream">
            <xs:annotation>
              <xs:documentation>Array containing details about the streams in the default stream group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Draft">
        <xs:annotation>
          <xs:documentation>A dictionary for representing a message draft. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of the draft. Either unaddressed (empty string), \&quot;stream\&quot;, or \&quot;private\&quot; (for PMs and private group messages). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="to" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An array of the tentative target audience IDs. For \&quot;stream\&quot; messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="topic" type="xs:string">
            <xs:annotation>
              <xs:documentation>For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The body of the draft. Should not contain null bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timestamp" type="xs:double">
            <xs:annotation>
              <xs:documentation>A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="emoji_code" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emoji_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Name of the emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reaction_type" type="xs:string">
            <xs:annotation>
              <xs:documentation>One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiReaction">
        <xs:sequence>
          <xs:element minOccurs="0" name="emoji_code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="emoji_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reaction_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiReactionAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="emoji_code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="emoji_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reaction_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiReactionBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="emoji_code" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emoji_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Name of the emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reaction_type" type="xs:string">
            <xs:annotation>
              <xs:documentation>One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The &#x60;user&#x60; object is deprecated and will be removed in the future. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="schemas:EmojiReactionBase_allOf_user" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiReactionBaseAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="user_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The &#x60;user&#x60; object is deprecated and will be removed in the future. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user" type="schemas:EmojiReactionBase_allOf_user" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="EmojiReactionBaseAllOfUser">
        <xs:annotation>
          <xs:documentation>Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>ID of the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>Email of the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="full_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Full name of the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_mirror_dummy" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the user is a mirror dummy. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessages">
        <xs:sequence>
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="client" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="display_recipient" type="xs:AnyType" />
          <xs:element minOccurs="0" name="id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_me_message" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reactions" type="xs:AnyType" />
          <xs:element minOccurs="0" name="recipient_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_realm_str" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="subject" type="xs:AnyType" />
          <xs:element minOccurs="0" name="topic_links" type="xs:AnyType" />
          <xs:element minOccurs="0" name="submessages" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timestamp" type="xs:AnyType" />
          <xs:element minOccurs="0" name="type" type="xs:AnyType" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="flags" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="last_edit_timestamp" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp for when the message was last edited, in UTC seconds. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="match_content" type="xs:string">
            <xs:annotation>
              <xs:documentation>Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="match_subject" type="xs:string">
            <xs:annotation>
              <xs:documentation>Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="client" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="display_recipient" type="xs:AnyType" />
          <xs:element minOccurs="0" name="id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_me_message" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reactions" type="xs:AnyType" />
          <xs:element minOccurs="0" name="recipient_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_realm_str" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="subject" type="xs:AnyType" />
          <xs:element minOccurs="0" name="topic_links" type="xs:AnyType" />
          <xs:element minOccurs="0" name="submessages" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timestamp" type="xs:AnyType" />
          <xs:element minOccurs="0" name="type" type="xs:AnyType" />
          <xs:element minOccurs="0" maxOccurs="unbounded" name="flags" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="last_edit_timestamp" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp for when the message was last edited, in UTC seconds. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="match_content" type="xs:string">
            <xs:annotation>
              <xs:documentation>Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="match_subject" type="xs:string">
            <xs:annotation>
              <xs:documentation>Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Hotspot">
        <xs:annotation>
          <xs:documentation>Dictionary containing details of a single hotspot. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="delay" type="xs:double">
            <xs:annotation>
              <xs:documentation>The delay after which the user should be shown the hotspot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the hotspot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>The title of the hotspot, as will be displayed to the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The description of the hotspot, as will be displayed to the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="InlineResponse200">
        <xs:annotation>
          <xs:documentation>This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="bot_email" type="xs:string">
            <xs:annotation>
              <xs:documentation>Email of the bot user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bot_full_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The full name of the bot user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="data" type="xs:string">
            <xs:annotation>
              <xs:documentation>The message content, in raw Markdown format (not rendered to HTML). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="trigger" type="xs:string">
            <xs:annotation>
              <xs:documentation>What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="token" type="xs:string">
            <xs:annotation>
              <xs:documentation>A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message" type="schemas:MessagesBase">
            <xs:annotation>
              <xs:documentation>A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="InvalidApiKeyError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="InvalidMessageError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="raw_content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The raw content of the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="InvalidMessageErrorAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="raw_content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The raw content of the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonErrorBase">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="schemas:Result" />
          <xs:element minOccurs="1" name="msg" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonErrorBaseAllOf">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="schemas:Result" />
          <xs:element minOccurs="1" name="msg" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonResponseBase">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonSuccess">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonSuccessAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonSuccessBase">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="schemas:Result" />
          <xs:element minOccurs="1" name="msg" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="JsonSuccessBaseAllOf">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="schemas:Result" />
          <xs:element minOccurs="1" name="msg" type="xs:string" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Messages">
        <xs:sequence>
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="client" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="display_recipient" type="xs:AnyType" />
          <xs:element minOccurs="0" name="id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_me_message" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reactions" type="xs:AnyType" />
          <xs:element minOccurs="0" name="recipient_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_realm_str" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="subject" type="xs:AnyType" />
          <xs:element minOccurs="0" name="topic_links" type="xs:AnyType" />
          <xs:element minOccurs="0" name="submessages" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timestamp" type="xs:AnyType" />
          <xs:element minOccurs="0" name="type" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessagesAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="client" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content" type="xs:AnyType" />
          <xs:element minOccurs="0" name="content_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="display_recipient" type="xs:AnyType" />
          <xs:element minOccurs="0" name="id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_me_message" type="xs:AnyType" />
          <xs:element minOccurs="0" name="reactions" type="xs:AnyType" />
          <xs:element minOccurs="0" name="recipient_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="sender_realm_str" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="subject" type="xs:AnyType" />
          <xs:element minOccurs="0" name="topic_links" type="xs:AnyType" />
          <xs:element minOccurs="0" name="submessages" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timestamp" type="xs:AnyType" />
          <xs:element minOccurs="0" name="type" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessagesBase">
        <xs:annotation>
          <xs:documentation>Object containing details of the message. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="avatar_url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user&#39;s email address itself for this user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="client" type="xs:string">
            <xs:annotation>
              <xs:documentation>A Zulip \&quot;client\&quot; string, describing what Zulip client sent the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The content/body of the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="content_type" type="xs:string">
            <xs:annotation>
              <xs:documentation>The HTTP &#x60;content_type&#x60; for the message content.  This will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on whether &#x60;apply_markdown&#x60; was set. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="display_recipient" type="schemas:oneOf&lt;string,array&gt;">
            <xs:annotation>
              <xs:documentation>Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique message ID.  Messages should always be displayed sorted by ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_me_message" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="reactions" type="schemas:EmojiReaction">
            <xs:annotation>
              <xs:documentation>Data on any reactions to the message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="recipient_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="sender_email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The Zulip display email address of the message&#39;s sender. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="sender_full_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The full name of the message&#39;s sender. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="sender_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The user ID of the message&#39;s sender. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="sender_realm_str" type="xs:string">
            <xs:annotation>
              <xs:documentation>A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Only present for stream messages; the ID of the stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="subject" type="xs:string">
            <xs:annotation>
              <xs:documentation>The &#x60;topic&#x60; of the message.  Currently always &#x60;\&quot;\&quot;&#x60; for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \&quot;subjects\&quot; and will eventually change. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="topic_links" type="schemas:MessagesBase_topic_links">
            <xs:annotation>
              <xs:documentation>Data on any links to be included in the &#x60;topic&#x60; line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message&#39;s topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called &#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60; if present for compatibility with older Zulip servers. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="submessages" type="xs:string">
            <xs:annotation>
              <xs:documentation>Data used for certain experimental Zulip integrations. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timestamp" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp for when the message was sent, in UTC seconds. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="type" type="xs:string">
            <xs:annotation>
              <xs:documentation>The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MessagesBaseTopicLinks">
        <xs:sequence>
          <xs:element minOccurs="0" name="text" type="xs:string">
            <xs:annotation>
              <xs:documentation>The original link text present in the topic. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The expanded target url which the link points to. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MissingArgumentError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="var_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>It contains the information about the missing parameter. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="MissingArgumentErrorAllOf">
        <xs:annotation>
          <xs:documentation>## Missing request parameter(s)  A typical failed JSON response for when a required request parameter is not supplied </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="var_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>It contains the information about the missing parameter. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="NonExistingStreamError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the stream that could not be found. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="NonExistingStreamErrorAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="result" type="xs:AnyType" />
          <xs:element minOccurs="0" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
          <xs:element minOccurs="0" name="stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the stream that could not be found. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Presence">
        <xs:annotation>
          <xs:documentation>&#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="client" type="xs:string">
            <xs:annotation>
              <xs:documentation>The client&#39;s platform name. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="status" type="schemas:Status">
            <xs:annotation>
              <xs:documentation>The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timestamp" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pushable" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client is capable of showing mobile/push notifications to the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RateLimitedError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RealmDeactivatedError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RealmDomain">
        <xs:annotation>
          <xs:documentation>Object containing details of the newly added domain. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="domain" type="xs:string">
            <xs:annotation>
              <xs:documentation>The new allowed domain. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="allow_subdomains" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether subdomains are allowed for this domain. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RealmEmoji">
        <xs:annotation>
          <xs:documentation>&#x60;{emoji_id}&#x60;: Object containing details about the emoji with  the specified ID. It has the following properties: </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID for this emoji, same as the object&#39;s key. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (&#x60;:name  :&#x60;). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="source_url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The path relative to the organization&#39;s URL where the emoji&#39;s image can be found. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="deactivated" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the emoji has been deactivated or not. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="author_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and &#x60;author&#x60; object with an &#x60;id&#x60; field. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RealmExport">
        <xs:annotation>
          <xs:documentation>Object containing details about a realm export. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The id of the export. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="acting_user_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The id of the user who did the export. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="export_time" type="xs:double">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp of when the export was made. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="deleted_timestamp" type="xs:double">
            <xs:annotation>
              <xs:documentation>The timestamp of when the export was deleted. Null if it wasn&#39;t. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="failed_timestamp" type="xs:double">
            <xs:annotation>
              <xs:documentation>The timestamp of when the export failed. Null if it didn&#39;t. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="export_url" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL of the export. &#x60;null&#x60; if there&#39;s no URL. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pending" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the export is pending or not. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="RealmPlayground">
        <xs:annotation>
          <xs:documentation>Object containing details about a realm playground. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID for the realm playground. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pygments_language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the Pygments language lexer for that programming language. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="url_prefix" type="xs:string">
            <xs:annotation>
              <xs:documentation>The url prefix for the playground. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="Subscriptions">
        <xs:sequence>
          <xs:element minOccurs="0" name="stream_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID of a stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of a stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="rendered_description" type="xs:string">
            <xs:annotation>
              <xs:documentation>A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="date_created" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="invite_only" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Specifies whether the stream is private or not. Only people who have been invited can access a private stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="subscribers" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A list of user IDs of users who are also subscribed to a given stream. Included only if &#x60;include_subscribers&#x60; is &#x60;true&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="desktop_notifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="email_notifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="wildcard_mentions_notify" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="push_notifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="audible_notifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pin_to_top" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the given stream has been pinned to the top. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="email_address" type="xs:string">
            <xs:annotation>
              <xs:documentation>Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_muted" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in &#x60;All messages&#x60; view (previously known as &#x60;Home&#x60; view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named &#x60;in_home_view&#x60; (with the opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="in_home_view" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_announcement_only" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_web_public" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the stream has been configured to allow unauthenticated access to its message history from the web. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>The user&#39;s role within the stream (distinct from the user&#39;s [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 &#x3D;&gt; Stream administrator. * 50 &#x3D;&gt; Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="color" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s personal color for the stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream_post_policy" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="message_retention_days" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="history_public_to_subscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="first_message_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream_weekly_traffic" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="User">
        <xs:sequence>
          <xs:element minOccurs="0" name="email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_bot" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_version" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_admin" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_owner" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_billing_admin" type="xs:AnyType" />
          <xs:element minOccurs="0" name="role" type="xs:AnyType" />
          <xs:element minOccurs="0" name="bot_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="bot_owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_active" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_guest" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timezone" type="xs:AnyType" />
          <xs:element minOccurs="0" name="date_joined" type="xs:AnyType" />
          <xs:element minOccurs="0" name="delivery_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="profile_data" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="UserAllOf">
        <xs:sequence>
          <xs:element minOccurs="0" name="email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_bot" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_url" type="xs:AnyType" />
          <xs:element minOccurs="0" name="avatar_version" type="xs:AnyType" />
          <xs:element minOccurs="0" name="full_name" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_admin" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_owner" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_billing_admin" type="xs:AnyType" />
          <xs:element minOccurs="0" name="role" type="xs:AnyType" />
          <xs:element minOccurs="0" name="bot_type" type="xs:AnyType" />
          <xs:element minOccurs="0" name="user_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="bot_owner_id" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_active" type="xs:AnyType" />
          <xs:element minOccurs="0" name="is_guest" type="xs:AnyType" />
          <xs:element minOccurs="0" name="timezone" type="xs:AnyType" />
          <xs:element minOccurs="0" name="date_joined" type="xs:AnyType" />
          <xs:element minOccurs="0" name="delivery_email" type="xs:AnyType" />
          <xs:element minOccurs="0" name="profile_data" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="UserBase">
        <xs:annotation>
          <xs:documentation>A dictionary containing basic data on a given Zulip user. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_bot" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user is a bot or full account. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="avatar_url" type="xs:string">
            <xs:annotation>
              <xs:documentation>URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="avatar_version" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="full_name" type="xs:string">
            <xs:annotation>
              <xs:documentation>Full name of the user or bot, used for all display purposes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_admin" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user is an organization administrator. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_owner" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_billing_admin" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="role" type="schemas:Role">
            <xs:annotation>
              <xs:documentation>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bot_type" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="user_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The unique ID of the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="bot_owner_id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_active" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user account has been deactivated. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="is_guest" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether the user is a guest user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timezone" type="xs:string">
            <xs:annotation>
              <xs:documentation>The time zone of the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="date_joined" type="xs:string">
            <xs:annotation>
              <xs:documentation>The time the user account was created. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="delivery_email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="profile_data" type="schemas:object">
            <xs:annotation>
              <xs:documentation>A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="UserDeactivatedError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="UserGroup">
        <xs:annotation>
          <xs:documentation>Object containing the user group&#39;s attributes. </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The description of the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="members" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Array containing the id of the users who are members of this user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="id" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="UserNotAuthorizedError">
        <xs:sequence>
          <xs:element minOccurs="1" name="result" type="xs:AnyType" />
          <xs:element minOccurs="1" name="msg" type="xs:AnyType" />
          <xs:element minOccurs="0" name="code" type="xs:AnyType" />
        </xs:sequence>
      </xs:complexType>
      <xs:simpleType name="Type">
        <xs:annotation>
          <xs:documentation>The type of the draft. Either unaddressed (empty string), \&quot;stream\&quot;, or \&quot;private\&quot; (for PMs and private group messages). </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="" />
          <xs:enumeration value="stream" />
          <xs:enumeration value="private" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Result">
        <xs:restriction base="xs:string">
          <xs:enumeration value="error" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Result">
        <xs:restriction base="xs:string">
          <xs:enumeration value="success" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Status">
        <xs:annotation>
          <xs:documentation>The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:enumeration value="idle" />
          <xs:enumeration value="active" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>The user&#39;s role within the stream (distinct from the user&#39;s [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 &#x3D;&gt; Stream administrator. * 50 &#x3D;&gt; Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer">
          <xs:enumeration value="20" />
          <xs:enumeration value="50" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Role">
        <xs:annotation>
          <xs:documentation>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:integer">
          <xs:enumeration value="100" />
          <xs:enumeration value="200" />
          <xs:enumeration value="300" />
          <xs:enumeration value="400" />
          <xs:enumeration value="600" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:restriction base="xs:string">
          <xs:enumeration value="PRIVATE" />
          <xs:enumeration value="STREAM" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Propagate_mode">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ONE" />
          <xs:enumeration value="LATER" />
          <xs:enumeration value="ALL" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Op">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ADD" />
          <xs:enumeration value="REMOVE" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Op">
        <xs:restriction base="xs:string">
          <xs:enumeration value="ADD" />
          <xs:enumeration value="REMOVE" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Op">
        <xs:restriction base="xs:string">
          <xs:enumeration value="START" />
          <xs:enumeration value="STOP" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Type">
        <xs:restriction base="xs:string">
          <xs:enumeration value="PRIVATE" />
          <xs:enumeration value="STREAM" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Color_scheme">
        <xs:restriction base="xs:integer">
          <xs:enumeration value="_1" />
          <xs:enumeration value="_2" />
          <xs:enumeration value="_3" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Demote_inactive_streams">
        <xs:restriction base="xs:integer">
          <xs:enumeration value="_1" />
          <xs:enumeration value="_2" />
          <xs:enumeration value="_3" />
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType name="Desktop_icon_count_display">
        <xs:restriction base="xs:integer">
          <xs:enumeration value="_1" />
          <xs:enumeration value="_2" />
          <xs:enumeration value="_3" />
        </xs:restriction>
      </xs:simpleType>
      <xs:complexType name="PostDev_fetch_api_key_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="username" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email address for the user that owns the API key. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostDev_fetch_api_key_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ApiKeyResponse" type="schemas:ApiKeyResponse">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFetch_api_key_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="username" type="xs:string">
            <xs:annotation>
              <xs:documentation>The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="password" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostFetch_api_key_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="ApiKeyResponse" type="schemas:ApiKeyResponse">
            <xs:annotation>
              <xs:documentation>Valid credentials the client can use to access the Zulip API.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostDrafts_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="drafts" type="xs:Draft">
            <xs:annotation>
              <xs:documentation>A JSON-encoded list of containing new draft objects. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostDrafts_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteDraftsByDraft_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="draftId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the draft you want to delete. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteDraftsByDraft_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchDraftsByDraft_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="draftId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the draft to be edited. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="draft" type="schemas:Draft">
            <xs:annotation>
              <xs:documentation>A JSON-encoded object containing a replacement draft object for this ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchDraftsByDraft_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetDrafts_RequestMessage" />
      <xs:complexType name="GetDrafts_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesReactionsByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="emojiName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reactionType" type="xs:string">
            <xs:annotation>
              <xs:documentation>If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesReactionsByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesMatches_narrow_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="msgIds" type="xs:integer">
            <xs:annotation>
              <xs:documentation>List of IDs for the messages to check.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="narrow" type="xs:object">
            <xs:annotation>
              <xs:documentation>A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesMatches_narrow_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="oas_any_type_not_mapped" type="schemas:oas_any_type_not_mapped">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteMessagesByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteMessagesByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUser_uploadsByRealm_id_strAndFilename_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="realmIdStr" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The realm id. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="filename" type="xs:string">
            <xs:annotation>
              <xs:documentation>Path to the URL. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesHistoryByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesHistoryByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessages_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="numBefore">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of messages with IDs less than the anchor to retrieve. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="1" name="numAfter">
            <xs:simpleType>
              <xs:annotation>
                <xs:documentation>The number of messages with IDs greater than the anchor to retrieve. </xs:documentation>
              </xs:annotation>
              <xs:restriction base="xs:integer">
                <xs:minInclusive value="0" />
              </xs:restriction>
            </xs:simpleType>
          </xs:element>
          <xs:element minOccurs="0" name="anchor" type="schemas:oneOf&lt;string,integer&gt;">
            <xs:annotation>
              <xs:documentation>Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" default="[]" name="narrow" type="xs:object">
            <xs:annotation>
              <xs:documentation>The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="clientGravatar" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="true" name="applyMarkdown" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="useFirstUnreadAnchor" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessages_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetMessagesByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMark_all_as_read_RequestMessage" />
      <xs:complexType name="PostMark_all_as_read_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMark_stream_as_read_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMark_stream_as_read_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMark_topic_as_read_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="topicName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the topic whose messages should be marked as read. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMark_topic_as_read_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteMessagesReactionsByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reactionType" type="xs:string">
            <xs:annotation>
              <xs:documentation>If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteMessagesReactionsByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesRender_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The content of the message. Maximum message size of 10000 bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesRender_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessages_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="to" type="xs:integer">
            <xs:annotation>
              <xs:documentation>For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The content of the message. Maximum message size of 10000 bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="topic" type="xs:string">
            <xs:annotation>
              <xs:documentation>The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="queueId" type="xs:string">
            <xs:annotation>
              <xs:documentation>For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="localId" type="xs:string">
            <xs:annotation>
              <xs:documentation>For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessages_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchMessagesByMessage_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="messageId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target message&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="topic" type="xs:string">
            <xs:annotation>
              <xs:documentation>The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="change_one" name="propagateMode" type="schemas:Propagate_mode">
            <xs:annotation>
              <xs:documentation>Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="true" name="sendNotificationToOldThread" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="true" name="sendNotificationToNewThread" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>The content of the message. Maximum message size of 10000 bytes. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchMessagesByMessage_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesFlags_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="messages" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An array containing the IDs of the target messages. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="op" type="schemas:Op">
            <xs:annotation>
              <xs:documentation>Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="flag" type="xs:string">
            <xs:annotation>
              <xs:documentation>The flag that should be added/removed. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostMessagesFlags_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_uploads_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="filename" type="xs:hexBinary" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_uploads_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteEvents_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="queueId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteEvents_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetEvents_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="queueId" type="xs:string">
            <xs:annotation>
              <xs:documentation>The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="lastEventId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The highest event ID in this queue that you&#39;ve received and wish to acknowledge. See the [code for &#x60;call_on_each_event&#x60;](https://github.com/zulip/python-zulip-api/blob/master/zulip/zulip/__init__.py) in the [zulip Python module](https://github.com/zulip/python-zulip-api) for an example implementation of correctly processing each event exactly once. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="dontBlock" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Set to &#x60;true&#x60; if the client is requesting a nonblocking reply. If not specified, the request will block until either a new event is available or a few minutes have passed, in which case the server will send the client a heartbeat event. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetEvents_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostReal-time_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="eventTypes" type="xs:string">
            <xs:annotation>
              <xs:documentation>A JSON-encoded array indicating which types of events you&#39;re interested in. Values that you might find useful include:    * **message** (messages)   * **subscription** (changes in your subscriptions)   * **realm_user** (changes to users in the organization and     their properties, such as their name).  If you do not specify this parameter, you will receive all events, and have to filter out the events not relevant to your client in your client code.  For most applications, one is only interested in messages, so one specifies: &#x60;event_types&#x3D;[&#39;message&#39;]&#x60;  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" default="[]" name="narrow" type="xs:array">
            <xs:annotation>
              <xs:documentation>A JSON-encoded array of arrays of length 2 indicating the narrow for which you&#39;d like to receive events for. For instance, to receive events for the stream &#x60;Denmark&#x60;, you would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages. Default is &#x60;[]&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="allPublicStreams" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether you would like to request message events from all public streams.  Useful for workflow bots that you&#39;d like to see all new messages sent to public streams.  (You can also subscribe the user to private streams). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostReal-time_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="response">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRegister_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" default="false" name="applyMarkdown" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Set to &#x60;true&#x60; if you would like the content to be rendered in HTML format (otherwise the API will return the raw text that the user entered) </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="clientGravatar" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="slimPresence" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Setting this to &#x60;true&#x60; will make presence dictionaries be keyed by user_id instead of email.  **Changes**: New in Zulip 3.0 (Unstable with no feature level yet). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="eventTypes" type="xs:string">
            <xs:annotation>
              <xs:documentation>A JSON-encoded array indicating which types of events you&#39;re interested in. Values that you might find useful include:    * **message** (messages)   * **subscription** (changes in your subscriptions)   * **realm_user** (changes to users in the organization and     their properties, such as their name).  If you do not specify this parameter, you will receive all events, and have to filter out the events not relevant to your client in your client code.  For most applications, one is only interested in messages, so one specifies: &#x60;event_types&#x3D;[&#39;message&#39;]&#x60;  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="allPublicStreams" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether you would like to request message events from all public streams.  Useful for workflow bots that you&#39;d like to see all new messages sent to public streams.  (You can also subscribe the user to private streams). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeSubscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="clientCapabilities" type="xs:Object">
            <xs:annotation>
              <xs:documentation>Dictionary containing details on features the client supports that are relevant to the format of responses sent by the server.  * &#x60;notification_settings_null&#x60;: Boolean for whether the   client can handle the current API with null values for   stream-level notification settings (which means the stream   is not customized and should inherit the user&#39;s global   notification settings for stream messages).   &lt;br /&gt;   New in Zulip 2.1.0; in earlier Zulip releases, stream-level   notification settings were simple booleans.  * &#x60;bulk_message_deletion&#x60;: Boolean for whether the client&#39;s    handler for the &#x60;delete_message&#x60; event type has been    updated to process the new bulk format (with a    &#x60;message_ids&#x60;, rather than a singleton &#x60;message_id&#x60;).    Otherwise, the server will send &#x60;delete_message&#x60; events    in a loop.    &lt;br /&gt;    New in Zulip 3.0 (feature level 13).  This    capability is for backwards-compatibility; it will be    required in a future server release.  * &#x60;user_avatar_url_field_optional&#x60;: Boolean for whether the    client required avatar URLs for all users, or supports    using &#x60;GET /avatar/{user_id}&#x60; to access user avatars.  If the    client has this capability, the server may skip sending a    &#x60;avatar_url&#x60; field in the &#x60;realm_user&#x60; at its sole discretion    to optimize network performance.  This is an important optimization    in organizations with 10,000s of users.    &lt;br /&gt;    New in Zulip 3.0 (feature level 18).  * &#x60;stream_typing_notifications&#x60;: Boolean for whether the client   supports stream typing notifications.   &lt;br /&gt;   New in Zulip 4.0 (feature level 58).  This capability is   for backwards-compatibility; it will be required in a   future server release.  * &#x60;user_settings_object&#x60;: Boolean for whether the client supports the modern   &#x60;user_settings&#x60; event type. If False, the server will additionally send the   legacy &#x60;update_display_settings&#x60; and &#x60;update_global_notifications&#x60; event   types for backwards-compatibility with clients that predate this API migration.   &lt;br /&gt;   &lt;br /&gt;   Because the feature level 89 API changes were merged together, clients can   safely make a request with this client capability and requesting all of the   &#x60;user_settings&#x60;, &#x60;update_display_settings&#x60;, and   &#x60;update_global_notifications&#x60; event types, and get exactly one copy of   settings data on any server version. (And then use the &#x60;zulip_feature_level&#x60;   in the &#x60;/register&#x60; response or the presence/absence of a &#x60;user_settings&#x60; key   to determine where to look).   &lt;br /&gt;   New in Zulip 5.0 (feature level 89).  This capability is for   backwards-compatibility; it will be removed in a future server release. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="fetchEventTypes" type="xs:string">
            <xs:annotation>
              <xs:documentation>Same as the &#x60;event_types&#x60; parameter except that the values in &#x60;fetch_event_types&#x60; are used to fetch initial data. If &#x60;fetch_event_types&#x60; is not provided, &#x60;event_types&#x60; is used and if &#x60;event_types&#x60; is not provided, this parameter defaults to &#x60;None&#x60;.  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" default="[]" name="narrow" type="xs:array">
            <xs:annotation>
              <xs:documentation>A JSON-encoded array of arrays of length 2 indicating the narrow for which you&#39;d like to receive events for. For instance, to receive events for the stream &#x60;Denmark&#x60;, you would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages. Default is &#x60;[]&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRegister_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRest-error-handling_RequestMessage" />
      <xs:complexType name="PostRealmPlaygrounds_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="pygmentsLanguage" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the Pygments language lexer for that programming language. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="urlPrefix" type="xs:string">
            <xs:annotation>
              <xs:documentation>The url prefix for the playground. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmPlaygrounds_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmFilters_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="pattern" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="urlFormatString" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmFilters_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmProfile_fields_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="fieldType" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="hint" type="xs:string">
            <xs:annotation>
              <xs:documentation>The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="fieldData" type="xs:Object">
            <xs:annotation>
              <xs:documentation>Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmProfile_fields_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetRealmEmoji_RequestMessage" />
      <xs:complexType name="GetRealmEmoji_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetRealmProfile_fields_RequestMessage" />
      <xs:complexType name="GetRealmProfile_fields_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetRealmLinkifiers_RequestMessage" />
      <xs:complexType name="GetRealmLinkifiers_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetServer_settings_RequestMessage" />
      <xs:complexType name="GetServer_settings_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteRealmPlaygroundsByPlayground_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="playgroundId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the playground that you want to remove. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteRealmPlaygroundsByPlayground_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteRealmFiltersByFilter_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="filterId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the linkifier that you want to remove. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteRealmFiltersByFilter_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchRealmProfile_fields_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="order" type="xs:integer">
            <xs:annotation>
              <xs:documentation>A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchRealmProfile_fields_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchRealmFiltersByFilter_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="filterId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the linkifier that you want to update. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="pattern" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="urlFormatString" type="xs:string">
            <xs:annotation>
              <xs:documentation>The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchRealmFiltersByFilter_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmEmojiByEmoji_name_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="emojiName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="filename" type="xs:hexBinary" />
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostRealmEmojiByEmoji_name_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteStreamsByStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteStreamsByStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetCallsBigbluebuttonCreate_RequestMessage" />
      <xs:complexType name="GetCallsBigbluebuttonCreate_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostStreamsDelete_topicByStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="topicName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the topic to delete. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostStreamsDelete_topicByStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetGet_stream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetGet_stream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersMeTopicsByStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersMeTopicsByStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetStreams_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" default="true" name="includePublic" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include all public streams. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeWebPublic" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include all web public streams. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="true" name="includeSubscribed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include all streams that the user is subscribed to. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeAllActive" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include all active streams. The user must have administrative privileges to use this parameter. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeDefault" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include all default streams for the user&#39;s realm. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeOwnerSubscribed" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If the user is a bot, include all streams that the bot&#39;s owner is subscribed to. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetStreams_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetStreamsMembersByStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetStreamsMembersByStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target user&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersMeSubscriptions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" default="false" name="includeSubscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersMeSubscriptions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersMeSubscriptionsMuted_topics_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="topic" type="xs:string">
            <xs:annotation>
              <xs:documentation>The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="op" type="schemas:Op">
            <xs:annotation>
              <xs:documentation>Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="stream" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersMeSubscriptionsMuted_topics_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeSubscriptions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="subscriptions" type="xs:object">
            <xs:annotation>
              <xs:documentation>A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="principals" type="xs:oneOf&lt;string,integer&gt;">
            <xs:annotation>
              <xs:documentation>A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="true" name="authorizationErrorsFatal" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="announce" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="inviteOnly" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="historyPublicToSubscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="streamPostPolicy" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="messageRetentionDays" type="schemas:oneOf&lt;string,integer&gt;">
            <xs:annotation>
              <xs:documentation>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeSubscriptions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="oneOf&lt;object,object&gt;" type="schemas:oneOf&lt;object,object&gt;">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersMeSubscriptions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="subscriptions" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="principals" type="xs:oneOf&lt;string,integer&gt;">
            <xs:annotation>
              <xs:documentation>A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersMeSubscriptions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchStreamsByStream_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="streamId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the stream to access. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="newName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isPrivate" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Change whether the stream is a private stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="isAnnouncementOnly" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="1" name="streamPostPolicy" type="xs:integer">
            <xs:annotation>
              <xs:documentation>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="historyPublicToSubscribers" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="messageRetentionDays" type="schemas:oneOf&lt;string,integer&gt;">
            <xs:annotation>
              <xs:documentation>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchStreamsByStream_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeSubscriptionsProperties_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="subscriptionData" type="xs:object">
            <xs:annotation>
              <xs:documentation>A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeSubscriptionsProperties_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersMeSubscriptions_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="delete" type="xs:string">
            <xs:annotation>
              <xs:documentation>A list of stream names to unsubscribe from. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="xs:object">
            <xs:annotation>
              <xs:documentation>A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersMeSubscriptions_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsers_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email address of the new user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="password" type="xs:string">
            <xs:annotation>
              <xs:documentation>The password of the new user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="fullName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The full name of the new user. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsers_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_groupsCreate_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name of the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The description of the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="members" type="xs:integer">
            <xs:annotation>
              <xs:documentation>An array containing the user IDs of the initial members for the new user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_groupsCreate_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersMe_RequestMessage" />
      <xs:complexType name="DeleteUsersMe_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersByUser_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target user&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersByUser_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetAttachments_RequestMessage" />
      <xs:complexType name="GetAttachments_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersMe_RequestMessage" />
      <xs:complexType name="GetUsersMe_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersByUser_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target user&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="clientGravatar" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeCustomProfileFields" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersByUser_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersByEmail_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>The email address of the user whose details you want to fetch. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="clientGravatar" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeCustomProfileFields" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersByEmail_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUser_groups_RequestMessage" />
      <xs:complexType name="GetUser_groups_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersPresenceByUser_id_or_email_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userIdOrEmail" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsersPresenceByUser_id_or_email_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsers_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" default="false" name="clientGravatar" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="false" name="includeCustomProfileFields" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="GetUsers_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeMuted_usersByMuted_user_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="mutedUserId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the user to mute/un-mute. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeMuted_usersByMuted_user_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersReactivateByUser_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target user&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersReactivateByUser_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="oas_any_type_not_mapped" type="schemas:oas_any_type_not_mapped">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUser_groupsByUser_group_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userGroupId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the target user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUser_groupsByUser_group_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostTyping_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="op" type="schemas:Op">
            <xs:annotation>
              <xs:documentation>Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" maxOccurs="unbounded" name="to" type="xs:integer">
            <xs:annotation>
              <xs:documentation>For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" default="private" name="type" type="schemas:Type">
            <xs:annotation>
              <xs:documentation>Type of the message being composed. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="topic" type="xs:string">
            <xs:annotation>
              <xs:documentation>Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostTyping_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="mutedUserId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the user to mute/un-mute. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchSettings_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="fullName" type="xs:string">
            <xs:annotation>
              <xs:documentation>A new display name for the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="email" type="xs:string">
            <xs:annotation>
              <xs:documentation>Asks the server to initiate a confirmation sequence to change the user&#39;s email address to the indicated value. The user will need to demonstrate control of the new email address by clicking a confirmation link sent to that address. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="oldPassword" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s old Zulip password (or LDAP password, if LDAP authentication is in use).  Required only when sending the &#x60;new_password&#x60; parameter. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="newPassword" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s new Zulip password (or LDAP password, if LDAP authentication is in use).  The &#x60;old_password&#x60; parameter must be included in the request. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="twentyFourHourTime" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="denseMode" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="starredMessageCounts" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="fluidLayoutWidth" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="highContrastMode" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="colorScheme" type="schemas:Color_scheme">
            <xs:annotation>
              <xs:documentation>Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableDraftsSynchronization" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>A boolean parameter to control whether synchronizing drafts is enabled for the user. When synchronization is disabled, all drafts stored in the server will be automatically deleted from the server.  This does not do anything (like sending events) to delete local copies of drafts stored in clients.  **Changes**: New in Zulip 5.0 (feature level 87). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="translateEmoticons" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultLanguage" type="xs:string">
            <xs:annotation>
              <xs:documentation>What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="defaultView" type="xs:string">
            <xs:annotation>
              <xs:documentation>The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="leftSideUserlist" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiset" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="demoteInactiveStreams" type="schemas:Demote_inactive_streams">
            <xs:annotation>
              <xs:documentation>Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="timezone" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableStreamDesktopNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable visual desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableStreamEmailNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable email notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableStreamPushNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable mobile notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableStreamAudibleNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable audible desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="notificationSound" type="xs:string">
            <xs:annotation>
              <xs:documentation>Notification sound name.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableDesktopNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable visual desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableSounds" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable audible desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emailNotificationsBatchingPeriodSeconds" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The duration (in seconds) for which the server should wait to batch email notifications before sending them.  **Changes**: New in Zulip 5.0 (feature level 82) </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableOfflineEmailNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable email notifications for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableOfflinePushNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable mobile notification for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableOnlinePushNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable mobile notification for private messages and @-mentions received when the user is online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableDigestEmails" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable digest emails when the user is away.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableMarketingEmails" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable marketing emails. Has no function outside Zulip Cloud.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enableLoginEmails" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Enable email notifications for new logins to account.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="messageContentInEmailNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include the message&#39;s content in email notifications for new messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="pmContentInDesktopNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include content of private messages in desktop notifications.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="wildcardMentionsNotify" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="desktopIconCountDisplay" type="schemas:Desktop_icon_count_display">
            <xs:annotation>
              <xs:documentation>Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="realmNameInNotifications" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Include organization name in subject of message notification emails.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="presenceEnabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Display the presence status to other users when online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="enterSends" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether pressing Enter in the compose box sends a message (or saves a message edit).  **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by the &#x60;POST /users/me/enter-sends&#x60; endpoint, with the same parameter format. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchSettings_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccessBase" type="schemas:JsonSuccessBase">
            <xs:annotation>
              <xs:documentation>Success</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeStatus_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="0" name="statusText" type="xs:string">
            <xs:annotation>
              <xs:documentation>The text content of the status message. Sending the empty string will clear the user&#39;s status.  **Note**: The limit on the size of the message is 60 characters. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="away" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Whether the user should be marked as \&quot;away\&quot;. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The name for the emoji to associate with this status. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="emojiCode" type="xs:string">
            <xs:annotation>
              <xs:documentation>A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="reactionType" type="xs:string">
            <xs:annotation>
              <xs:documentation>One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUsersMeStatus_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersByUser_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The target user&#39;s ID. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="fullName" type="xs:string">
            <xs:annotation>
              <xs:documentation>The user&#39;s full name. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" name="role" type="xs:integer">
            <xs:annotation>
              <xs:documentation>New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="profileData" type="xs:object">
            <xs:annotation>
              <xs:documentation>A dictionary containing the to be updated custom profile field data for the user. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUsersByUser_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUser_groupsByUser_group_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userGroupId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the target user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="name" type="xs:string">
            <xs:annotation>
              <xs:documentation>The new name of the group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="1" name="description" type="xs:string">
            <xs:annotation>
              <xs:documentation>The new description of the group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PatchUser_groupsByUser_group_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_groupsMembersByUser_group_id_RequestMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="userGroupId" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The ID of the target user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="delete" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The list of user ids to be removed from the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element minOccurs="0" maxOccurs="unbounded" name="add" type="xs:integer">
            <xs:annotation>
              <xs:documentation>The list of user ids to be added to the user group. </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostUser_groupsMembersByUser_group_id_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="JsonSuccess" type="schemas:JsonSuccess">
            <xs:annotation>
              <xs:documentation>Success.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="PostZulip-outgoing-webhook_RequestMessage" />
      <xs:complexType name="PostZulip-outgoing-webhook_ResponseMessage">
        <xs:sequence>
          <xs:element minOccurs="1" name="inline_response_200" type="schemas:inline_response_200">
            <xs:annotation>
              <xs:documentation>Success </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>  
  </types>
  <message name="PostDev_fetch_api_key_RequestMessage">
    <part name="PostDev_fetch_api_key_RequestMessage" element="schemas:PostDev_fetch_api_key_RequestMessage" />
  </message>
  <message name="PostDev_fetch_api_key_ResponseMessage">
    <part name="PostDev_fetch_api_key_ResponseMessage" element="schemas:PostDev_fetch_api_key_ResponseMessage" />
  </message>
  <message name="PostFetch_api_key_RequestMessage">
    <part name="PostFetch_api_key_RequestMessage" element="schemas:PostFetch_api_key_RequestMessage" />
  </message>
  <message name="PostFetch_api_key_ResponseMessage">
    <part name="PostFetch_api_key_ResponseMessage" element="schemas:PostFetch_api_key_ResponseMessage" />
  </message>
  <message name="PostDrafts_RequestMessage">
    <part name="PostDrafts_RequestMessage" element="schemas:PostDrafts_RequestMessage" />
  </message>
  <message name="PostDrafts_ResponseMessage">
    <part name="PostDrafts_ResponseMessage" element="schemas:PostDrafts_ResponseMessage" />
  </message>
  <message name="PostDrafts_400">
    <part name="PostDrafts_400" element="schemas:PostDrafts_400" />
  </message>
  <message name="DeleteDraftsByDraft_id_RequestMessage">
    <part name="DeleteDraftsByDraft_id_RequestMessage" element="schemas:DeleteDraftsByDraft_id_RequestMessage" />
  </message>
  <message name="DeleteDraftsByDraft_id_ResponseMessage">
    <part name="DeleteDraftsByDraft_id_ResponseMessage" element="schemas:DeleteDraftsByDraft_id_ResponseMessage" />
  </message>
  <message name="DeleteDraftsByDraft_id_404">
    <part name="DeleteDraftsByDraft_id_404" element="schemas:DeleteDraftsByDraft_id_404" />
  </message>
  <message name="PatchDraftsByDraft_id_RequestMessage">
    <part name="PatchDraftsByDraft_id_RequestMessage" element="schemas:PatchDraftsByDraft_id_RequestMessage" />
  </message>
  <message name="PatchDraftsByDraft_id_ResponseMessage">
    <part name="PatchDraftsByDraft_id_ResponseMessage" element="schemas:PatchDraftsByDraft_id_ResponseMessage" />
  </message>
  <message name="PatchDraftsByDraft_id_404">
    <part name="PatchDraftsByDraft_id_404" element="schemas:PatchDraftsByDraft_id_404" />
  </message>
  <message name="GetDrafts_RequestMessage">
    <part name="GetDrafts_RequestMessage" element="schemas:GetDrafts_RequestMessage" />
  </message>
  <message name="GetDrafts_ResponseMessage">
    <part name="GetDrafts_ResponseMessage" element="schemas:GetDrafts_ResponseMessage" />
  </message>
  <message name="PostMessagesReactionsByMessage_id_RequestMessage">
    <part name="PostMessagesReactionsByMessage_id_RequestMessage" element="schemas:PostMessagesReactionsByMessage_id_RequestMessage" />
  </message>
  <message name="PostMessagesReactionsByMessage_id_ResponseMessage">
    <part name="PostMessagesReactionsByMessage_id_ResponseMessage" element="schemas:PostMessagesReactionsByMessage_id_ResponseMessage" />
  </message>
  <message name="PostMessagesReactionsByMessage_id_400">
    <part name="PostMessagesReactionsByMessage_id_400" element="schemas:PostMessagesReactionsByMessage_id_400" />
  </message>
  <message name="GetMessagesMatches_narrow_RequestMessage">
    <part name="GetMessagesMatches_narrow_RequestMessage" element="schemas:GetMessagesMatches_narrow_RequestMessage" />
  </message>
  <message name="GetMessagesMatches_narrow_ResponseMessage">
    <part name="GetMessagesMatches_narrow_ResponseMessage" element="schemas:GetMessagesMatches_narrow_ResponseMessage" />
  </message>
  <message name="DeleteMessagesByMessage_id_RequestMessage">
    <part name="DeleteMessagesByMessage_id_RequestMessage" element="schemas:DeleteMessagesByMessage_id_RequestMessage" />
  </message>
  <message name="DeleteMessagesByMessage_id_ResponseMessage">
    <part name="DeleteMessagesByMessage_id_ResponseMessage" element="schemas:DeleteMessagesByMessage_id_ResponseMessage" />
  </message>
  <message name="DeleteMessagesByMessage_id_400">
    <part name="DeleteMessagesByMessage_id_400" element="schemas:DeleteMessagesByMessage_id_400" />
  </message>
  <message name="GetUser_uploadsByRealm_id_strAndFilename_RequestMessage">
    <part name="GetUser_uploadsByRealm_id_strAndFilename_RequestMessage" element="schemas:GetUser_uploadsByRealm_id_strAndFilename_RequestMessage" />
  </message>
  <message name="GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage">
    <part name="GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage" element="schemas:GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage" />
  </message>
  <message name="GetMessagesHistoryByMessage_id_RequestMessage">
    <part name="GetMessagesHistoryByMessage_id_RequestMessage" element="schemas:GetMessagesHistoryByMessage_id_RequestMessage" />
  </message>
  <message name="GetMessagesHistoryByMessage_id_ResponseMessage">
    <part name="GetMessagesHistoryByMessage_id_ResponseMessage" element="schemas:GetMessagesHistoryByMessage_id_ResponseMessage" />
  </message>
  <message name="GetMessagesHistoryByMessage_id_400">
    <part name="GetMessagesHistoryByMessage_id_400" element="schemas:GetMessagesHistoryByMessage_id_400" />
  </message>
  <message name="GetMessages_RequestMessage">
    <part name="GetMessages_RequestMessage" element="schemas:GetMessages_RequestMessage" />
  </message>
  <message name="GetMessages_ResponseMessage">
    <part name="GetMessages_ResponseMessage" element="schemas:GetMessages_ResponseMessage" />
  </message>
  <message name="GetMessagesByMessage_id_RequestMessage">
    <part name="GetMessagesByMessage_id_RequestMessage" element="schemas:GetMessagesByMessage_id_RequestMessage" />
  </message>
  <message name="GetMessagesByMessage_id_ResponseMessage">
    <part name="GetMessagesByMessage_id_ResponseMessage" element="schemas:GetMessagesByMessage_id_ResponseMessage" />
  </message>
  <message name="GetMessagesByMessage_id_400">
    <part name="GetMessagesByMessage_id_400" element="schemas:GetMessagesByMessage_id_400" />
  </message>
  <message name="PostMark_all_as_read_RequestMessage">
    <part name="PostMark_all_as_read_RequestMessage" element="schemas:PostMark_all_as_read_RequestMessage" />
  </message>
  <message name="PostMark_all_as_read_ResponseMessage">
    <part name="PostMark_all_as_read_ResponseMessage" element="schemas:PostMark_all_as_read_ResponseMessage" />
  </message>
  <message name="PostMark_stream_as_read_RequestMessage">
    <part name="PostMark_stream_as_read_RequestMessage" element="schemas:PostMark_stream_as_read_RequestMessage" />
  </message>
  <message name="PostMark_stream_as_read_ResponseMessage">
    <part name="PostMark_stream_as_read_ResponseMessage" element="schemas:PostMark_stream_as_read_ResponseMessage" />
  </message>
  <message name="PostMark_topic_as_read_RequestMessage">
    <part name="PostMark_topic_as_read_RequestMessage" element="schemas:PostMark_topic_as_read_RequestMessage" />
  </message>
  <message name="PostMark_topic_as_read_ResponseMessage">
    <part name="PostMark_topic_as_read_ResponseMessage" element="schemas:PostMark_topic_as_read_ResponseMessage" />
  </message>
  <message name="DeleteMessagesReactionsByMessage_id_RequestMessage">
    <part name="DeleteMessagesReactionsByMessage_id_RequestMessage" element="schemas:DeleteMessagesReactionsByMessage_id_RequestMessage" />
  </message>
  <message name="DeleteMessagesReactionsByMessage_id_ResponseMessage">
    <part name="DeleteMessagesReactionsByMessage_id_ResponseMessage" element="schemas:DeleteMessagesReactionsByMessage_id_ResponseMessage" />
  </message>
  <message name="DeleteMessagesReactionsByMessage_id_400">
    <part name="DeleteMessagesReactionsByMessage_id_400" element="schemas:DeleteMessagesReactionsByMessage_id_400" />
  </message>
  <message name="PostMessagesRender_RequestMessage">
    <part name="PostMessagesRender_RequestMessage" element="schemas:PostMessagesRender_RequestMessage" />
  </message>
  <message name="PostMessagesRender_ResponseMessage">
    <part name="PostMessagesRender_ResponseMessage" element="schemas:PostMessagesRender_ResponseMessage" />
  </message>
  <message name="PostMessages_RequestMessage">
    <part name="PostMessages_RequestMessage" element="schemas:PostMessages_RequestMessage" />
  </message>
  <message name="PostMessages_ResponseMessage">
    <part name="PostMessages_ResponseMessage" element="schemas:PostMessages_ResponseMessage" />
  </message>
  <message name="PostMessages_400">
    <part name="PostMessages_400" element="schemas:PostMessages_400" />
  </message>
  <message name="PatchMessagesByMessage_id_RequestMessage">
    <part name="PatchMessagesByMessage_id_RequestMessage" element="schemas:PatchMessagesByMessage_id_RequestMessage" />
  </message>
  <message name="PatchMessagesByMessage_id_ResponseMessage">
    <part name="PatchMessagesByMessage_id_ResponseMessage" element="schemas:PatchMessagesByMessage_id_ResponseMessage" />
  </message>
  <message name="PatchMessagesByMessage_id_400">
    <part name="PatchMessagesByMessage_id_400" element="schemas:PatchMessagesByMessage_id_400" />
  </message>
  <message name="PostMessagesFlags_RequestMessage">
    <part name="PostMessagesFlags_RequestMessage" element="schemas:PostMessagesFlags_RequestMessage" />
  </message>
  <message name="PostMessagesFlags_ResponseMessage">
    <part name="PostMessagesFlags_ResponseMessage" element="schemas:PostMessagesFlags_ResponseMessage" />
  </message>
  <message name="PostUser_uploads_RequestMessage">
    <part name="PostUser_uploads_RequestMessage" element="schemas:PostUser_uploads_RequestMessage" />
  </message>
  <message name="PostUser_uploads_ResponseMessage">
    <part name="PostUser_uploads_ResponseMessage" element="schemas:PostUser_uploads_ResponseMessage" />
  </message>
  <message name="DeleteEvents_RequestMessage">
    <part name="DeleteEvents_RequestMessage" element="schemas:DeleteEvents_RequestMessage" />
  </message>
  <message name="DeleteEvents_ResponseMessage">
    <part name="DeleteEvents_ResponseMessage" element="schemas:DeleteEvents_ResponseMessage" />
  </message>
  <message name="DeleteEvents_400">
    <part name="DeleteEvents_400" element="schemas:DeleteEvents_400" />
  </message>
  <message name="GetEvents_RequestMessage">
    <part name="GetEvents_RequestMessage" element="schemas:GetEvents_RequestMessage" />
  </message>
  <message name="GetEvents_ResponseMessage">
    <part name="GetEvents_ResponseMessage" element="schemas:GetEvents_ResponseMessage" />
  </message>
  <message name="GetEvents_400">
    <part name="GetEvents_400" element="schemas:GetEvents_400" />
  </message>
  <message name="PostReal-time_RequestMessage">
    <part name="PostReal-time_RequestMessage" element="schemas:PostReal-time_RequestMessage" />
  </message>
  <message name="PostReal-time_ResponseMessage">
    <part name="PostReal-time_ResponseMessage" element="schemas:PostReal-time_ResponseMessage" />
  </message>
  <message name="PostRegister_RequestMessage">
    <part name="PostRegister_RequestMessage" element="schemas:PostRegister_RequestMessage" />
  </message>
  <message name="PostRegister_ResponseMessage">
    <part name="PostRegister_ResponseMessage" element="schemas:PostRegister_ResponseMessage" />
  </message>
  <message name="PostRest-error-handling_RequestMessage">
    <part name="PostRest-error-handling_RequestMessage" element="schemas:PostRest-error-handling_RequestMessage" />
  </message>
  <message name="PostRest-error-handling_400">
    <part name="PostRest-error-handling_400" element="schemas:PostRest-error-handling_400" />
  </message>
  <message name="PostRest-error-handling_401">
    <part name="PostRest-error-handling_401" element="schemas:PostRest-error-handling_401" />
  </message>
  <message name="PostRest-error-handling_429">
    <part name="PostRest-error-handling_429" element="schemas:PostRest-error-handling_429" />
  </message>
  <message name="PostRealmPlaygrounds_RequestMessage">
    <part name="PostRealmPlaygrounds_RequestMessage" element="schemas:PostRealmPlaygrounds_RequestMessage" />
  </message>
  <message name="PostRealmPlaygrounds_ResponseMessage">
    <part name="PostRealmPlaygrounds_ResponseMessage" element="schemas:PostRealmPlaygrounds_ResponseMessage" />
  </message>
  <message name="PostRealmFilters_RequestMessage">
    <part name="PostRealmFilters_RequestMessage" element="schemas:PostRealmFilters_RequestMessage" />
  </message>
  <message name="PostRealmFilters_ResponseMessage">
    <part name="PostRealmFilters_ResponseMessage" element="schemas:PostRealmFilters_ResponseMessage" />
  </message>
  <message name="PostRealmProfile_fields_RequestMessage">
    <part name="PostRealmProfile_fields_RequestMessage" element="schemas:PostRealmProfile_fields_RequestMessage" />
  </message>
  <message name="PostRealmProfile_fields_ResponseMessage">
    <part name="PostRealmProfile_fields_ResponseMessage" element="schemas:PostRealmProfile_fields_ResponseMessage" />
  </message>
  <message name="GetRealmEmoji_RequestMessage">
    <part name="GetRealmEmoji_RequestMessage" element="schemas:GetRealmEmoji_RequestMessage" />
  </message>
  <message name="GetRealmEmoji_ResponseMessage">
    <part name="GetRealmEmoji_ResponseMessage" element="schemas:GetRealmEmoji_ResponseMessage" />
  </message>
  <message name="GetRealmProfile_fields_RequestMessage">
    <part name="GetRealmProfile_fields_RequestMessage" element="schemas:GetRealmProfile_fields_RequestMessage" />
  </message>
  <message name="GetRealmProfile_fields_ResponseMessage">
    <part name="GetRealmProfile_fields_ResponseMessage" element="schemas:GetRealmProfile_fields_ResponseMessage" />
  </message>
  <message name="GetRealmLinkifiers_RequestMessage">
    <part name="GetRealmLinkifiers_RequestMessage" element="schemas:GetRealmLinkifiers_RequestMessage" />
  </message>
  <message name="GetRealmLinkifiers_ResponseMessage">
    <part name="GetRealmLinkifiers_ResponseMessage" element="schemas:GetRealmLinkifiers_ResponseMessage" />
  </message>
  <message name="GetServer_settings_RequestMessage">
    <part name="GetServer_settings_RequestMessage" element="schemas:GetServer_settings_RequestMessage" />
  </message>
  <message name="GetServer_settings_ResponseMessage">
    <part name="GetServer_settings_ResponseMessage" element="schemas:GetServer_settings_ResponseMessage" />
  </message>
  <message name="DeleteRealmPlaygroundsByPlayground_id_RequestMessage">
    <part name="DeleteRealmPlaygroundsByPlayground_id_RequestMessage" element="schemas:DeleteRealmPlaygroundsByPlayground_id_RequestMessage" />
  </message>
  <message name="DeleteRealmPlaygroundsByPlayground_id_ResponseMessage">
    <part name="DeleteRealmPlaygroundsByPlayground_id_ResponseMessage" element="schemas:DeleteRealmPlaygroundsByPlayground_id_ResponseMessage" />
  </message>
  <message name="DeleteRealmFiltersByFilter_id_RequestMessage">
    <part name="DeleteRealmFiltersByFilter_id_RequestMessage" element="schemas:DeleteRealmFiltersByFilter_id_RequestMessage" />
  </message>
  <message name="DeleteRealmFiltersByFilter_id_ResponseMessage">
    <part name="DeleteRealmFiltersByFilter_id_ResponseMessage" element="schemas:DeleteRealmFiltersByFilter_id_ResponseMessage" />
  </message>
  <message name="PatchRealmProfile_fields_RequestMessage">
    <part name="PatchRealmProfile_fields_RequestMessage" element="schemas:PatchRealmProfile_fields_RequestMessage" />
  </message>
  <message name="PatchRealmProfile_fields_ResponseMessage">
    <part name="PatchRealmProfile_fields_ResponseMessage" element="schemas:PatchRealmProfile_fields_ResponseMessage" />
  </message>
  <message name="PatchRealmFiltersByFilter_id_RequestMessage">
    <part name="PatchRealmFiltersByFilter_id_RequestMessage" element="schemas:PatchRealmFiltersByFilter_id_RequestMessage" />
  </message>
  <message name="PatchRealmFiltersByFilter_id_ResponseMessage">
    <part name="PatchRealmFiltersByFilter_id_ResponseMessage" element="schemas:PatchRealmFiltersByFilter_id_ResponseMessage" />
  </message>
  <message name="PostRealmEmojiByEmoji_name_RequestMessage">
    <part name="PostRealmEmojiByEmoji_name_RequestMessage" element="schemas:PostRealmEmojiByEmoji_name_RequestMessage" />
  </message>
  <message name="PostRealmEmojiByEmoji_name_ResponseMessage">
    <part name="PostRealmEmojiByEmoji_name_ResponseMessage" element="schemas:PostRealmEmojiByEmoji_name_ResponseMessage" />
  </message>
  <message name="DeleteStreamsByStream_id_RequestMessage">
    <part name="DeleteStreamsByStream_id_RequestMessage" element="schemas:DeleteStreamsByStream_id_RequestMessage" />
  </message>
  <message name="DeleteStreamsByStream_id_ResponseMessage">
    <part name="DeleteStreamsByStream_id_ResponseMessage" element="schemas:DeleteStreamsByStream_id_ResponseMessage" />
  </message>
  <message name="DeleteStreamsByStream_id_400">
    <part name="DeleteStreamsByStream_id_400" element="schemas:DeleteStreamsByStream_id_400" />
  </message>
  <message name="GetCallsBigbluebuttonCreate_RequestMessage">
    <part name="GetCallsBigbluebuttonCreate_RequestMessage" element="schemas:GetCallsBigbluebuttonCreate_RequestMessage" />
  </message>
  <message name="GetCallsBigbluebuttonCreate_ResponseMessage">
    <part name="GetCallsBigbluebuttonCreate_ResponseMessage" element="schemas:GetCallsBigbluebuttonCreate_ResponseMessage" />
  </message>
  <message name="PostStreamsDelete_topicByStream_id_RequestMessage">
    <part name="PostStreamsDelete_topicByStream_id_RequestMessage" element="schemas:PostStreamsDelete_topicByStream_id_RequestMessage" />
  </message>
  <message name="PostStreamsDelete_topicByStream_id_ResponseMessage">
    <part name="PostStreamsDelete_topicByStream_id_ResponseMessage" element="schemas:PostStreamsDelete_topicByStream_id_ResponseMessage" />
  </message>
  <message name="PostStreamsDelete_topicByStream_id_400">
    <part name="PostStreamsDelete_topicByStream_id_400" element="schemas:PostStreamsDelete_topicByStream_id_400" />
  </message>
  <message name="GetGet_stream_id_RequestMessage">
    <part name="GetGet_stream_id_RequestMessage" element="schemas:GetGet_stream_id_RequestMessage" />
  </message>
  <message name="GetGet_stream_id_ResponseMessage">
    <part name="GetGet_stream_id_ResponseMessage" element="schemas:GetGet_stream_id_ResponseMessage" />
  </message>
  <message name="GetGet_stream_id_400">
    <part name="GetGet_stream_id_400" element="schemas:GetGet_stream_id_400" />
  </message>
  <message name="GetUsersMeTopicsByStream_id_RequestMessage">
    <part name="GetUsersMeTopicsByStream_id_RequestMessage" element="schemas:GetUsersMeTopicsByStream_id_RequestMessage" />
  </message>
  <message name="GetUsersMeTopicsByStream_id_ResponseMessage">
    <part name="GetUsersMeTopicsByStream_id_ResponseMessage" element="schemas:GetUsersMeTopicsByStream_id_ResponseMessage" />
  </message>
  <message name="GetUsersMeTopicsByStream_id_400">
    <part name="GetUsersMeTopicsByStream_id_400" element="schemas:GetUsersMeTopicsByStream_id_400" />
  </message>
  <message name="GetStreams_RequestMessage">
    <part name="GetStreams_RequestMessage" element="schemas:GetStreams_RequestMessage" />
  </message>
  <message name="GetStreams_ResponseMessage">
    <part name="GetStreams_ResponseMessage" element="schemas:GetStreams_ResponseMessage" />
  </message>
  <message name="GetStreams_400">
    <part name="GetStreams_400" element="schemas:GetStreams_400" />
  </message>
  <message name="GetStreamsMembersByStream_id_RequestMessage">
    <part name="GetStreamsMembersByStream_id_RequestMessage" element="schemas:GetStreamsMembersByStream_id_RequestMessage" />
  </message>
  <message name="GetStreamsMembersByStream_id_ResponseMessage">
    <part name="GetStreamsMembersByStream_id_ResponseMessage" element="schemas:GetStreamsMembersByStream_id_ResponseMessage" />
  </message>
  <message name="GetStreamsMembersByStream_id_400">
    <part name="GetStreamsMembersByStream_id_400" element="schemas:GetStreamsMembersByStream_id_400" />
  </message>
  <message name="GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage">
    <part name="GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage" element="schemas:GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage" />
  </message>
  <message name="GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage">
    <part name="GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage" element="schemas:GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage" />
  </message>
  <message name="GetUsersMeSubscriptions_RequestMessage">
    <part name="GetUsersMeSubscriptions_RequestMessage" element="schemas:GetUsersMeSubscriptions_RequestMessage" />
  </message>
  <message name="GetUsersMeSubscriptions_ResponseMessage">
    <part name="GetUsersMeSubscriptions_ResponseMessage" element="schemas:GetUsersMeSubscriptions_ResponseMessage" />
  </message>
  <message name="PatchUsersMeSubscriptionsMuted_topics_RequestMessage">
    <part name="PatchUsersMeSubscriptionsMuted_topics_RequestMessage" element="schemas:PatchUsersMeSubscriptionsMuted_topics_RequestMessage" />
  </message>
  <message name="PatchUsersMeSubscriptionsMuted_topics_ResponseMessage">
    <part name="PatchUsersMeSubscriptionsMuted_topics_ResponseMessage" element="schemas:PatchUsersMeSubscriptionsMuted_topics_ResponseMessage" />
  </message>
  <message name="PatchUsersMeSubscriptionsMuted_topics_400">
    <part name="PatchUsersMeSubscriptionsMuted_topics_400" element="schemas:PatchUsersMeSubscriptionsMuted_topics_400" />
  </message>
  <message name="PostUsersMeSubscriptions_RequestMessage">
    <part name="PostUsersMeSubscriptions_RequestMessage" element="schemas:PostUsersMeSubscriptions_RequestMessage" />
  </message>
  <message name="PostUsersMeSubscriptions_ResponseMessage">
    <part name="PostUsersMeSubscriptions_ResponseMessage" element="schemas:PostUsersMeSubscriptions_ResponseMessage" />
  </message>
  <message name="PostUsersMeSubscriptions_400">
    <part name="PostUsersMeSubscriptions_400" element="schemas:PostUsersMeSubscriptions_400" />
  </message>
  <message name="DeleteUsersMeSubscriptions_RequestMessage">
    <part name="DeleteUsersMeSubscriptions_RequestMessage" element="schemas:DeleteUsersMeSubscriptions_RequestMessage" />
  </message>
  <message name="DeleteUsersMeSubscriptions_ResponseMessage">
    <part name="DeleteUsersMeSubscriptions_ResponseMessage" element="schemas:DeleteUsersMeSubscriptions_ResponseMessage" />
  </message>
  <message name="DeleteUsersMeSubscriptions_400">
    <part name="DeleteUsersMeSubscriptions_400" element="schemas:DeleteUsersMeSubscriptions_400" />
  </message>
  <message name="PatchStreamsByStream_id_RequestMessage">
    <part name="PatchStreamsByStream_id_RequestMessage" element="schemas:PatchStreamsByStream_id_RequestMessage" />
  </message>
  <message name="PatchStreamsByStream_id_ResponseMessage">
    <part name="PatchStreamsByStream_id_ResponseMessage" element="schemas:PatchStreamsByStream_id_ResponseMessage" />
  </message>
  <message name="PatchStreamsByStream_id_400">
    <part name="PatchStreamsByStream_id_400" element="schemas:PatchStreamsByStream_id_400" />
  </message>
  <message name="PostUsersMeSubscriptionsProperties_RequestMessage">
    <part name="PostUsersMeSubscriptionsProperties_RequestMessage" element="schemas:PostUsersMeSubscriptionsProperties_RequestMessage" />
  </message>
  <message name="PostUsersMeSubscriptionsProperties_ResponseMessage">
    <part name="PostUsersMeSubscriptionsProperties_ResponseMessage" element="schemas:PostUsersMeSubscriptionsProperties_ResponseMessage" />
  </message>
  <message name="PatchUsersMeSubscriptions_RequestMessage">
    <part name="PatchUsersMeSubscriptions_RequestMessage" element="schemas:PatchUsersMeSubscriptions_RequestMessage" />
  </message>
  <message name="PatchUsersMeSubscriptions_ResponseMessage">
    <part name="PatchUsersMeSubscriptions_ResponseMessage" element="schemas:PatchUsersMeSubscriptions_ResponseMessage" />
  </message>
  <message name="PostUsers_RequestMessage">
    <part name="PostUsers_RequestMessage" element="schemas:PostUsers_RequestMessage" />
  </message>
  <message name="PostUsers_ResponseMessage">
    <part name="PostUsers_ResponseMessage" element="schemas:PostUsers_ResponseMessage" />
  </message>
  <message name="PostUsers_400">
    <part name="PostUsers_400" element="schemas:PostUsers_400" />
  </message>
  <message name="PostUser_groupsCreate_RequestMessage">
    <part name="PostUser_groupsCreate_RequestMessage" element="schemas:PostUser_groupsCreate_RequestMessage" />
  </message>
  <message name="PostUser_groupsCreate_ResponseMessage">
    <part name="PostUser_groupsCreate_ResponseMessage" element="schemas:PostUser_groupsCreate_ResponseMessage" />
  </message>
  <message name="PostUser_groupsCreate_400">
    <part name="PostUser_groupsCreate_400" element="schemas:PostUser_groupsCreate_400" />
  </message>
  <message name="DeleteUsersMe_RequestMessage">
    <part name="DeleteUsersMe_RequestMessage" element="schemas:DeleteUsersMe_RequestMessage" />
  </message>
  <message name="DeleteUsersMe_ResponseMessage">
    <part name="DeleteUsersMe_ResponseMessage" element="schemas:DeleteUsersMe_ResponseMessage" />
  </message>
  <message name="DeleteUsersMe_400">
    <part name="DeleteUsersMe_400" element="schemas:DeleteUsersMe_400" />
  </message>
  <message name="DeleteUsersByUser_id_RequestMessage">
    <part name="DeleteUsersByUser_id_RequestMessage" element="schemas:DeleteUsersByUser_id_RequestMessage" />
  </message>
  <message name="DeleteUsersByUser_id_ResponseMessage">
    <part name="DeleteUsersByUser_id_ResponseMessage" element="schemas:DeleteUsersByUser_id_ResponseMessage" />
  </message>
  <message name="DeleteUsersByUser_id_400">
    <part name="DeleteUsersByUser_id_400" element="schemas:DeleteUsersByUser_id_400" />
  </message>
  <message name="GetAttachments_RequestMessage">
    <part name="GetAttachments_RequestMessage" element="schemas:GetAttachments_RequestMessage" />
  </message>
  <message name="GetAttachments_ResponseMessage">
    <part name="GetAttachments_ResponseMessage" element="schemas:GetAttachments_ResponseMessage" />
  </message>
  <message name="GetUsersMe_RequestMessage">
    <part name="GetUsersMe_RequestMessage" element="schemas:GetUsersMe_RequestMessage" />
  </message>
  <message name="GetUsersMe_ResponseMessage">
    <part name="GetUsersMe_ResponseMessage" element="schemas:GetUsersMe_ResponseMessage" />
  </message>
  <message name="GetUsersByUser_id_RequestMessage">
    <part name="GetUsersByUser_id_RequestMessage" element="schemas:GetUsersByUser_id_RequestMessage" />
  </message>
  <message name="GetUsersByUser_id_ResponseMessage">
    <part name="GetUsersByUser_id_ResponseMessage" element="schemas:GetUsersByUser_id_ResponseMessage" />
  </message>
  <message name="GetUsersByEmail_RequestMessage">
    <part name="GetUsersByEmail_RequestMessage" element="schemas:GetUsersByEmail_RequestMessage" />
  </message>
  <message name="GetUsersByEmail_ResponseMessage">
    <part name="GetUsersByEmail_ResponseMessage" element="schemas:GetUsersByEmail_ResponseMessage" />
  </message>
  <message name="GetUser_groups_RequestMessage">
    <part name="GetUser_groups_RequestMessage" element="schemas:GetUser_groups_RequestMessage" />
  </message>
  <message name="GetUser_groups_ResponseMessage">
    <part name="GetUser_groups_ResponseMessage" element="schemas:GetUser_groups_ResponseMessage" />
  </message>
  <message name="GetUsersPresenceByUser_id_or_email_RequestMessage">
    <part name="GetUsersPresenceByUser_id_or_email_RequestMessage" element="schemas:GetUsersPresenceByUser_id_or_email_RequestMessage" />
  </message>
  <message name="GetUsersPresenceByUser_id_or_email_ResponseMessage">
    <part name="GetUsersPresenceByUser_id_or_email_ResponseMessage" element="schemas:GetUsersPresenceByUser_id_or_email_ResponseMessage" />
  </message>
  <message name="GetUsers_RequestMessage">
    <part name="GetUsers_RequestMessage" element="schemas:GetUsers_RequestMessage" />
  </message>
  <message name="GetUsers_ResponseMessage">
    <part name="GetUsers_ResponseMessage" element="schemas:GetUsers_ResponseMessage" />
  </message>
  <message name="PostUsersMeMuted_usersByMuted_user_id_RequestMessage">
    <part name="PostUsersMeMuted_usersByMuted_user_id_RequestMessage" element="schemas:PostUsersMeMuted_usersByMuted_user_id_RequestMessage" />
  </message>
  <message name="PostUsersMeMuted_usersByMuted_user_id_ResponseMessage">
    <part name="PostUsersMeMuted_usersByMuted_user_id_ResponseMessage" element="schemas:PostUsersMeMuted_usersByMuted_user_id_ResponseMessage" />
  </message>
  <message name="PostUsersMeMuted_usersByMuted_user_id_400">
    <part name="PostUsersMeMuted_usersByMuted_user_id_400" element="schemas:PostUsersMeMuted_usersByMuted_user_id_400" />
  </message>
  <message name="PostUsersReactivateByUser_id_RequestMessage">
    <part name="PostUsersReactivateByUser_id_RequestMessage" element="schemas:PostUsersReactivateByUser_id_RequestMessage" />
  </message>
  <message name="PostUsersReactivateByUser_id_ResponseMessage">
    <part name="PostUsersReactivateByUser_id_ResponseMessage" element="schemas:PostUsersReactivateByUser_id_ResponseMessage" />
  </message>
  <message name="DeleteUser_groupsByUser_group_id_RequestMessage">
    <part name="DeleteUser_groupsByUser_group_id_RequestMessage" element="schemas:DeleteUser_groupsByUser_group_id_RequestMessage" />
  </message>
  <message name="DeleteUser_groupsByUser_group_id_ResponseMessage">
    <part name="DeleteUser_groupsByUser_group_id_ResponseMessage" element="schemas:DeleteUser_groupsByUser_group_id_ResponseMessage" />
  </message>
  <message name="DeleteUser_groupsByUser_group_id_400">
    <part name="DeleteUser_groupsByUser_group_id_400" element="schemas:DeleteUser_groupsByUser_group_id_400" />
  </message>
  <message name="PostTyping_RequestMessage">
    <part name="PostTyping_RequestMessage" element="schemas:PostTyping_RequestMessage" />
  </message>
  <message name="PostTyping_ResponseMessage">
    <part name="PostTyping_ResponseMessage" element="schemas:PostTyping_ResponseMessage" />
  </message>
  <message name="PostTyping_400">
    <part name="PostTyping_400" element="schemas:PostTyping_400" />
  </message>
  <message name="DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage">
    <part name="DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage" element="schemas:DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage" />
  </message>
  <message name="DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage">
    <part name="DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage" element="schemas:DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage" />
  </message>
  <message name="DeleteUsersMeMuted_usersByMuted_user_id_400">
    <part name="DeleteUsersMeMuted_usersByMuted_user_id_400" element="schemas:DeleteUsersMeMuted_usersByMuted_user_id_400" />
  </message>
  <message name="PatchSettings_RequestMessage">
    <part name="PatchSettings_RequestMessage" element="schemas:PatchSettings_RequestMessage" />
  </message>
  <message name="PatchSettings_ResponseMessage">
    <part name="PatchSettings_ResponseMessage" element="schemas:PatchSettings_ResponseMessage" />
  </message>
  <message name="PostUsersMeStatus_RequestMessage">
    <part name="PostUsersMeStatus_RequestMessage" element="schemas:PostUsersMeStatus_RequestMessage" />
  </message>
  <message name="PostUsersMeStatus_ResponseMessage">
    <part name="PostUsersMeStatus_ResponseMessage" element="schemas:PostUsersMeStatus_ResponseMessage" />
  </message>
  <message name="PostUsersMeStatus_400">
    <part name="PostUsersMeStatus_400" element="schemas:PostUsersMeStatus_400" />
  </message>
  <message name="PatchUsersByUser_id_RequestMessage">
    <part name="PatchUsersByUser_id_RequestMessage" element="schemas:PatchUsersByUser_id_RequestMessage" />
  </message>
  <message name="PatchUsersByUser_id_ResponseMessage">
    <part name="PatchUsersByUser_id_ResponseMessage" element="schemas:PatchUsersByUser_id_ResponseMessage" />
  </message>
  <message name="PatchUsersByUser_id_400">
    <part name="PatchUsersByUser_id_400" element="schemas:PatchUsersByUser_id_400" />
  </message>
  <message name="PatchUser_groupsByUser_group_id_RequestMessage">
    <part name="PatchUser_groupsByUser_group_id_RequestMessage" element="schemas:PatchUser_groupsByUser_group_id_RequestMessage" />
  </message>
  <message name="PatchUser_groupsByUser_group_id_ResponseMessage">
    <part name="PatchUser_groupsByUser_group_id_ResponseMessage" element="schemas:PatchUser_groupsByUser_group_id_ResponseMessage" />
  </message>
  <message name="PatchUser_groupsByUser_group_id_400">
    <part name="PatchUser_groupsByUser_group_id_400" element="schemas:PatchUser_groupsByUser_group_id_400" />
  </message>
  <message name="PostUser_groupsMembersByUser_group_id_RequestMessage">
    <part name="PostUser_groupsMembersByUser_group_id_RequestMessage" element="schemas:PostUser_groupsMembersByUser_group_id_RequestMessage" />
  </message>
  <message name="PostUser_groupsMembersByUser_group_id_ResponseMessage">
    <part name="PostUser_groupsMembersByUser_group_id_ResponseMessage" element="schemas:PostUser_groupsMembersByUser_group_id_ResponseMessage" />
  </message>
  <message name="PostZulip-outgoing-webhook_RequestMessage">
    <part name="PostZulip-outgoing-webhook_RequestMessage" element="schemas:PostZulip-outgoing-webhook_RequestMessage" />
  </message>
  <message name="PostZulip-outgoing-webhook_ResponseMessage">
    <part name="PostZulip-outgoing-webhook_ResponseMessage" element="schemas:PostZulip-outgoing-webhook_ResponseMessage" />
  </message>
  <portType name="ServiceV1_PortType">
    <operation name="PostDev_fetch_api_key">
      <documentation>For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60; </documentation>
      <input message="wsdl:PostDev_fetch_api_key_RequestMessage" />
      <output message="wsdl:PostDev_fetch_api_key_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostFetch_api_key">
      <documentation>This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). </documentation>
      <input message="wsdl:PostFetch_api_key_RequestMessage" />
      <output message="wsdl:PostFetch_api_key_ResponseMessage">
        <documentation>Valid credentials the client can use to access the Zulip API.</documentation>
      </output>
    </operation>
    <operation name="PostDrafts">
      <documentation>Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; </documentation>
      <input message="wsdl:PostDrafts_RequestMessage" />
      <output message="wsdl:PostDrafts_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostDrafts_400" message="wsdl:PostDrafts_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="DeleteDraftsByDraft_id">
      <documentation>Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; </documentation>
      <input message="wsdl:DeleteDraftsByDraft_id_RequestMessage" />
      <output message="wsdl:DeleteDraftsByDraft_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteDraftsByDraft_id_404" message="wsdl:DeleteDraftsByDraft_id_404">
        <documentation>Not Found.</documentation>
      </fault>
    </operation>
    <operation name="PatchDraftsByDraft_id">
      <documentation>Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; </documentation>
      <input message="wsdl:PatchDraftsByDraft_id_RequestMessage" />
      <output message="wsdl:PatchDraftsByDraft_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchDraftsByDraft_id_404" message="wsdl:PatchDraftsByDraft_id_404">
        <documentation>Not Found.</documentation>
      </fault>
    </operation>
    <operation name="GetDrafts">
      <documentation>Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; </documentation>
      <input message="wsdl:GetDrafts_RequestMessage" />
      <output message="wsdl:GetDrafts_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostMessagesReactionsByMessage_id">
      <documentation>Add an [emoji reaction](/help/emoji-reactions) to a message.  &#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60; </documentation>
      <input message="wsdl:PostMessagesReactionsByMessage_id_RequestMessage" />
      <output message="wsdl:PostMessagesReactionsByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostMessagesReactionsByMessage_id_400" message="wsdl:PostMessagesReactionsByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetMessagesMatches_narrow">
      <documentation>Check whether a set of messages match a [narrow](/api/construct-narrow).  &#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a &#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message object identical to how a &#x60;GET /messages&#x60; for the current narrow would have returned the message. </documentation>
      <input message="wsdl:GetMessagesMatches_narrow_RequestMessage" />
      <output message="wsdl:GetMessagesMatches_narrow_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteMessagesByMessage_id">
      <documentation>Permanently delete a message.  &#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely </documentation>
      <input message="wsdl:DeleteMessagesByMessage_id_RequestMessage" />
      <output message="wsdl:DeleteMessagesByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteMessagesByMessage_id_400" message="wsdl:DeleteMessagesByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetUser_uploadsByRealm_id_strAndFilename">
      <documentation>Get a temporary URL for access to the file that doesn&#39;t require authentication. </documentation>
      <input message="wsdl:GetUser_uploadsByRealm_id_strAndFilename_RequestMessage" />
      <output message="wsdl:GetUser_uploadsByRealm_id_strAndFilename_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetMessagesHistoryByMessage_id">
      <documentation>Fetch the message edit history of a previously edited message.  &#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history </documentation>
      <input message="wsdl:GetMessagesHistoryByMessage_id_RequestMessage" />
      <output message="wsdl:GetMessagesHistoryByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetMessagesHistoryByMessage_id_400" message="wsdl:GetMessagesHistoryByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetMessages">
      <documentation>Fetch message history from a Zulip server.  &#x60;GET {{ api_url }}/v1/messages&#x60;  This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip&#39;s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user&#39;s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an &#x60;anchor&#x60; message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.  We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. </documentation>
      <input message="wsdl:GetMessages_RequestMessage" />
      <output message="wsdl:GetMessages_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetMessagesByMessage_id">
      <documentation>Get the raw content of a message.  &#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message&#39;s raw Markdown (e.g. for pre-filling a message-editing UI). </documentation>
      <input message="wsdl:GetMessagesByMessage_id_RequestMessage" />
      <output message="wsdl:GetMessagesByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetMessagesByMessage_id_400" message="wsdl:GetMessagesByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostMark_all_as_read">
      <documentation>Marks all of the current user&#39;s unread messages as read.  &#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60; </documentation>
      <input message="wsdl:PostMark_all_as_read_RequestMessage" />
      <output message="wsdl:PostMark_all_as_read_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostMark_stream_as_read">
      <documentation>Mark all the unread messages in a stream as read. </documentation>
      <input message="wsdl:PostMark_stream_as_read_RequestMessage" />
      <output message="wsdl:PostMark_stream_as_read_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostMark_topic_as_read">
      <documentation>Mark all the unread messages in a topic as read. </documentation>
      <input message="wsdl:PostMark_topic_as_read_RequestMessage" />
      <output message="wsdl:PostMark_topic_as_read_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteMessagesReactionsByMessage_id">
      <documentation>Remove an [emoji reaction](/help/emoji-reactions) from a message.  &#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60; </documentation>
      <input message="wsdl:DeleteMessagesReactionsByMessage_id_RequestMessage" />
      <output message="wsdl:DeleteMessagesReactionsByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteMessagesReactionsByMessage_id_400" message="wsdl:DeleteMessagesReactionsByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostMessagesRender">
      <documentation>Render a message to HTML.  &#x60;POST {{ api_url }}/v1/messages/render&#x60; </documentation>
      <input message="wsdl:PostMessagesRender_RequestMessage" />
      <output message="wsdl:PostMessagesRender_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostMessages">
      <documentation>Send a stream or a private message.  &#x60;POST {{ api_url }}/v1/messages&#x60; </documentation>
      <input message="wsdl:PostMessages_RequestMessage" />
      <output message="wsdl:PostMessages_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostMessages_400" message="wsdl:PostMessages_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PatchMessagesByMessage_id">
      <documentation>Edit/update the content or topic of a message.  &#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;  &#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to &#x60;✔ {original_topic}&#x60;.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion </documentation>
      <input message="wsdl:PatchMessagesByMessage_id_RequestMessage" />
      <output message="wsdl:PatchMessagesByMessage_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchMessagesByMessage_id_400" message="wsdl:PatchMessagesByMessage_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostMessagesFlags">
      <documentation>Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60; on a collection of message IDs.  &#x60;POST {{ api_url }}/v1/messages/flags&#x60;  For updating the &#x60;read&#x60; flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). </documentation>
      <input message="wsdl:PostMessagesFlags_RequestMessage" />
      <output message="wsdl:PostMessagesFlags_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostUser_uploads">
      <documentation>Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message </documentation>
      <input message="wsdl:PostUser_uploads_RequestMessage" />
      <output message="wsdl:PostUser_uploads_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteEvents">
      <documentation>Delete a previously registered queue.  &#x60;DELETE {{ api_url }}/v1/events&#x60; </documentation>
      <input message="wsdl:DeleteEvents_RequestMessage" />
      <output message="wsdl:DeleteEvents_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteEvents_400" message="wsdl:DeleteEvents_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetEvents">
      <documentation>&#x60;GET {{ api_url }}/v1/events&#x60;  This endpoint allows you to receive new events from [a registered event queue](/api/register-queue).  Long-lived clients should use the &#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by &#x60;POST /register&#x60; as the client-side HTTP request timeout for calls to this endpoint.  It is guaranteed to be higher than heartbeat frequency and should be respected by clients to avoid breaking when heartbeat frequency increases. </documentation>
      <input message="wsdl:GetEvents_RequestMessage" />
      <output message="wsdl:GetEvents_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetEvents_400" message="wsdl:GetEvents_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostReal-time">
      <documentation>(Ignored) </documentation>
      <input message="wsdl:PostReal-time_RequestMessage" />
      <output message="wsdl:PostReal-time_ResponseMessage">
        <documentation>Success</documentation>
      </output>
    </operation>
    <operation name="PostRegister">
      <documentation>&#x60;POST {{ api_url }}/v1/register&#x60;  This powerful endpoint can be used to register a Zulip \&quot;event queue\&quot; (subscribed to certain types of \&quot;events\&quot;, or updates to the messages and other Zulip data the current user has access to), as well as to fetch the current state of that data.  (&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is intended primarily for complex applications for which the more convenient &#x60;call_on_each_event&#x60; API is insufficient).  This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be used in subsequent calls to the [\&quot;events\&quot; endpoint](/api/get-events) to request events from the Zulip server using long-polling.  The server will queue events for up to 10 minutes of inactivity. After 10 minutes, your event queue will be garbage-collected.  The server will send &#x60;heartbeat&#x60; events every minute, which makes it easy to implement a robust client that does not miss events unless the client loses network connectivity with the Zulip server for 10 minutes or longer.  Once the server garbage-collects your event queue, the server will [return an error](/api/get-events#bad_event_queue_id-errors) with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from the event queue.  Your software will need to handle that error condition by re-initializing itself (e.g. this is what triggers your browser reloading the Zulip web app when your laptop comes back online after being offline for more than 10 minutes).  When prototyping with this API, we recommend first calling &#x60;register&#x60; with no &#x60;event_types&#x60; parameter to see all the available data from all supported event types.  Before using your client in production, you should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters so that your client only requests the data it needs.  A few minutes doing this often saves 90% of the total bandwidth and other resources consumed by a client using this API.  See the [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html) if you need deeper details about how the Zulip event queue system works, avoids clients needing to worry about large classes of potentially messy races, etc. </documentation>
      <input message="wsdl:PostRegister_RequestMessage" />
      <output message="wsdl:PostRegister_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostRest-error-handling">
      <documentation>Common error to many endpoints </documentation>
      <input message="wsdl:PostRest-error-handling_RequestMessage" />
      <fault name="PostRest-error-handling_400" message="wsdl:PostRest-error-handling_400">
        <documentation>Bad request. </documentation>
      </fault>
      <fault name="PostRest-error-handling_401" message="wsdl:PostRest-error-handling_401">
        <documentation>Unauthorized. </documentation>
      </fault>
      <fault name="PostRest-error-handling_429" message="wsdl:PostRest-error-handling_429">
        <documentation>Rate limit exceeded. </documentation>
      </fault>
    </operation>
    <operation name="PostRealmPlaygrounds">
      <documentation>Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). </documentation>
      <input message="wsdl:PostRealmPlaygrounds_RequestMessage" />
      <output message="wsdl:PostRealmPlaygrounds_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostRealmFilters">
      <documentation>Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; </documentation>
      <input message="wsdl:PostRealmFilters_RequestMessage" />
      <output message="wsdl:PostRealmFilters_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostRealmProfile_fields">
      <documentation>[Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; </documentation>
      <input message="wsdl:PostRealmProfile_fields_RequestMessage" />
      <output message="wsdl:PostRealmProfile_fields_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetRealmEmoji">
      <documentation>Get all the custom emoji in the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; </documentation>
      <input message="wsdl:GetRealmEmoji_RequestMessage" />
      <output message="wsdl:GetRealmEmoji_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetRealmProfile_fields">
      <documentation>Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60; </documentation>
      <input message="wsdl:GetRealmProfile_fields_RequestMessage" />
      <output message="wsdl:GetRealmProfile_fields_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetRealmLinkifiers">
      <documentation>List all of an organization&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. </documentation>
      <input message="wsdl:GetRealmLinkifiers_RequestMessage" />
      <output message="wsdl:GetRealmLinkifiers_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetServer_settings">
      <documentation>Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). </documentation>
      <input message="wsdl:GetServer_settings_RequestMessage" />
      <output message="wsdl:GetServer_settings_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteRealmPlaygroundsByPlayground_id">
      <documentation>Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). </documentation>
      <input message="wsdl:DeleteRealmPlaygroundsByPlayground_id_RequestMessage" />
      <output message="wsdl:DeleteRealmPlaygroundsByPlayground_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteRealmFiltersByFilter_id">
      <documentation>Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; </documentation>
      <input message="wsdl:DeleteRealmFiltersByFilter_id_RequestMessage" />
      <output message="wsdl:DeleteRealmFiltersByFilter_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PatchRealmProfile_fields">
      <documentation>Reorder the custom profile fields in the user&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). </documentation>
      <input message="wsdl:PatchRealmProfile_fields_RequestMessage" />
      <output message="wsdl:PatchRealmProfile_fields_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PatchRealmFiltersByFilter_id">
      <documentation>Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57). </documentation>
      <input message="wsdl:PatchRealmFiltersByFilter_id_RequestMessage" />
      <output message="wsdl:PatchRealmFiltersByFilter_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostRealmEmojiByEmoji_name">
      <documentation>This endpoint is used to upload a custom emoji for use in the user&#39;s organization.  Access to this endpoint depends on the [organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; </documentation>
      <input message="wsdl:PostRealmEmojiByEmoji_name_RequestMessage" />
      <output message="wsdl:PostRealmEmojiByEmoji_name_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="DeleteStreamsByStream_id">
      <documentation>[Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; </documentation>
      <input message="wsdl:DeleteStreamsByStream_id_RequestMessage" />
      <output message="wsdl:DeleteStreamsByStream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteStreamsByStream_id_400" message="wsdl:DeleteStreamsByStream_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetCallsBigbluebuttonCreate">
      <documentation>Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. </documentation>
      <input message="wsdl:GetCallsBigbluebuttonCreate_RequestMessage" />
      <output message="wsdl:GetCallsBigbluebuttonCreate_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostStreamsDelete_topicByStream_id">
      <documentation>Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. </documentation>
      <input message="wsdl:PostStreamsDelete_topicByStream_id_RequestMessage" />
      <output message="wsdl:PostStreamsDelete_topicByStream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostStreamsDelete_topicByStream_id_400" message="wsdl:PostStreamsDelete_topicByStream_id_400">
        <documentation>Error.</documentation>
      </fault>
    </operation>
    <operation name="GetGet_stream_id">
      <documentation>Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; </documentation>
      <input message="wsdl:GetGet_stream_id_RequestMessage" />
      <output message="wsdl:GetGet_stream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetGet_stream_id_400" message="wsdl:GetGet_stream_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetUsersMeTopicsByStream_id">
      <documentation>Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; </documentation>
      <input message="wsdl:GetUsersMeTopicsByStream_id_RequestMessage" />
      <output message="wsdl:GetUsersMeTopicsByStream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetUsersMeTopicsByStream_id_400" message="wsdl:GetUsersMeTopicsByStream_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetStreams">
      <documentation>Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; </documentation>
      <input message="wsdl:GetStreams_RequestMessage" />
      <output message="wsdl:GetStreams_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetStreams_400" message="wsdl:GetStreams_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetStreamsMembersByStream_id">
      <documentation>Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; </documentation>
      <input message="wsdl:GetStreamsMembersByStream_id_RequestMessage" />
      <output message="wsdl:GetStreamsMembersByStream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="GetStreamsMembersByStream_id_400" message="wsdl:GetStreamsMembersByStream_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="GetUsersSubscriptionsByUser_idAndStream_id">
      <documentation>Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). </documentation>
      <input message="wsdl:GetUsersSubscriptionsByUser_idAndStream_id_RequestMessage" />
      <output message="wsdl:GetUsersSubscriptionsByUser_idAndStream_id_ResponseMessage">
        <documentation>Success</documentation>
      </output>
    </operation>
    <operation name="GetUsersMeSubscriptions">
      <documentation>Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; </documentation>
      <input message="wsdl:GetUsersMeSubscriptions_RequestMessage" />
      <output message="wsdl:GetUsersMeSubscriptions_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PatchUsersMeSubscriptionsMuted_topics">
      <documentation>This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; </documentation>
      <input message="wsdl:PatchUsersMeSubscriptionsMuted_topics_RequestMessage" />
      <output message="wsdl:PatchUsersMeSubscriptionsMuted_topics_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchUsersMeSubscriptionsMuted_topics_400" message="wsdl:PatchUsersMeSubscriptionsMuted_topics_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostUsersMeSubscriptions">
      <documentation>Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. </documentation>
      <input message="wsdl:PostUsersMeSubscriptions_RequestMessage" />
      <output message="wsdl:PostUsersMeSubscriptions_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostUsersMeSubscriptions_400" message="wsdl:PostUsersMeSubscriptions_400">
        <documentation>Success.</documentation>
      </fault>
    </operation>
    <operation name="DeleteUsersMeSubscriptions">
      <documentation>Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; </documentation>
      <input message="wsdl:DeleteUsersMeSubscriptions_RequestMessage" />
      <output message="wsdl:DeleteUsersMeSubscriptions_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteUsersMeSubscriptions_400" message="wsdl:DeleteUsersMeSubscriptions_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PatchStreamsByStream_id">
      <documentation>Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; </documentation>
      <input message="wsdl:PatchStreamsByStream_id_RequestMessage" />
      <output message="wsdl:PatchStreamsByStream_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchStreamsByStream_id_400" message="wsdl:PatchStreamsByStream_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostUsersMeSubscriptionsProperties">
      <documentation>This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; </documentation>
      <input message="wsdl:PostUsersMeSubscriptionsProperties_RequestMessage" />
      <output message="wsdl:PostUsersMeSubscriptionsProperties_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PatchUsersMeSubscriptions">
      <documentation>Update which streams you are are subscribed to. </documentation>
      <input message="wsdl:PatchUsersMeSubscriptions_RequestMessage" />
      <output message="wsdl:PatchUsersMeSubscriptions_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostUsers">
      <documentation>{!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; </documentation>
      <input message="wsdl:PostUsers_RequestMessage" />
      <output message="wsdl:PostUsers_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostUsers_400" message="wsdl:PostUsers_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostUser_groupsCreate">
      <documentation>Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; </documentation>
      <input message="wsdl:PostUser_groupsCreate_RequestMessage" />
      <output message="wsdl:PostUser_groupsCreate_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostUser_groupsCreate_400" message="wsdl:PostUser_groupsCreate_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="DeleteUsersMe">
      <documentation>Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. </documentation>
      <input message="wsdl:DeleteUsersMe_RequestMessage" />
      <output message="wsdl:DeleteUsersMe_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteUsersMe_400" message="wsdl:DeleteUsersMe_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="DeleteUsersByUser_id">
      <documentation>[Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; </documentation>
      <input message="wsdl:DeleteUsersByUser_id_RequestMessage" />
      <output message="wsdl:DeleteUsersByUser_id_ResponseMessage">
        <documentation>Success</documentation>
      </output>
      <fault name="DeleteUsersByUser_id_400" message="wsdl:DeleteUsersByUser_id_400">
        <documentation>Bad request</documentation>
      </fault>
    </operation>
    <operation name="GetAttachments">
      <documentation>Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; </documentation>
      <input message="wsdl:GetAttachments_RequestMessage" />
      <output message="wsdl:GetAttachments_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetUsersMe">
      <documentation>Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; </documentation>
      <input message="wsdl:GetUsersMe_RequestMessage" />
      <output message="wsdl:GetUsersMe_ResponseMessage">
        <documentation>Success</documentation>
      </output>
    </operation>
    <operation name="GetUsersByUser_id">
      <documentation>Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* </documentation>
      <input message="wsdl:GetUsersByUser_id_RequestMessage" />
      <output message="wsdl:GetUsersByUser_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetUsersByEmail">
      <documentation>Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* </documentation>
      <input message="wsdl:GetUsersByEmail_RequestMessage" />
      <output message="wsdl:GetUsersByEmail_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetUser_groups">
      <documentation>{!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; </documentation>
      <input message="wsdl:GetUser_groups_RequestMessage" />
      <output message="wsdl:GetUser_groups_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetUsersPresenceByUser_id_or_email">
      <documentation>Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. </documentation>
      <input message="wsdl:GetUsersPresenceByUser_id_or_email_RequestMessage" />
      <output message="wsdl:GetUsersPresenceByUser_id_or_email_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="GetUsers">
      <documentation>Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). </documentation>
      <input message="wsdl:GetUsers_RequestMessage" />
      <output message="wsdl:GetUsers_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostUsersMeMuted_usersByMuted_user_id">
      <documentation>This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). </documentation>
      <input message="wsdl:PostUsersMeMuted_usersByMuted_user_id_RequestMessage" />
      <output message="wsdl:PostUsersMeMuted_usersByMuted_user_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostUsersMeMuted_usersByMuted_user_id_400" message="wsdl:PostUsersMeMuted_usersByMuted_user_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostUsersReactivateByUser_id">
      <documentation>[Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; </documentation>
      <input message="wsdl:PostUsersReactivateByUser_id_RequestMessage" />
      <output message="wsdl:PostUsersReactivateByUser_id_ResponseMessage">
        <documentation>Success</documentation>
      </output>
    </operation>
    <operation name="DeleteUser_groupsByUser_group_id">
      <documentation>Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; </documentation>
      <input message="wsdl:DeleteUser_groupsByUser_group_id_RequestMessage" />
      <output message="wsdl:DeleteUser_groupsByUser_group_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteUser_groupsByUser_group_id_400" message="wsdl:DeleteUser_groupsByUser_group_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostTyping">
      <documentation>Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. </documentation>
      <input message="wsdl:PostTyping_RequestMessage" />
      <output message="wsdl:PostTyping_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostTyping_400" message="wsdl:PostTyping_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="DeleteUsersMeMuted_usersByMuted_user_id">
      <documentation>This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). </documentation>
      <input message="wsdl:DeleteUsersMeMuted_usersByMuted_user_id_RequestMessage" />
      <output message="wsdl:DeleteUsersMeMuted_usersByMuted_user_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="DeleteUsersMeMuted_usersByMuted_user_id_400" message="wsdl:DeleteUsersMeMuted_usersByMuted_user_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PatchSettings">
      <documentation>This endpoint is used to edit the current user&#39;s settings.  &#x60;PATCH {{ api_url }}/v1/settings&#x60;  **Changes**: Prior to Zulip 5.0 (feature level 80), this endpoint only supported the &#x60;full_name&#x60;, &#x60;email&#x60;, &#x60;old_password&#x60;, and &#x60;new_password&#x60; parameters. Notification settings were managed by &#x60;PATCH /settings/notifications&#x60;, and all other settings by &#x60;PATCH /settings/display&#x60;. The feature level 80 migration to merge these endpoints did not change how request parameters are encoded. Note, however, that it did change the handling of any invalid parameters present in a request to change notification or display settings, since the merged endpoint uses the new response format that was introduced for &#x60;/settings&#x60; in Zulip 5.0 (feature level 78).  The &#x60;/settings/display&#x60; and &#x60;/settings/notifications&#x60; endpoints are now deprecated aliases for this endpoint for backwards-compatibility, and will be removed once clients have migrated to use this endpoint. </documentation>
      <input message="wsdl:PatchSettings_RequestMessage" />
      <output message="wsdl:PatchSettings_ResponseMessage">
        <documentation>Success</documentation>
      </output>
    </operation>
    <operation name="PostUsersMeStatus">
      <documentation>Change your [status](/help/status-and-availability).  &#x60;POST {{ api_url }}/v1/users/me/status&#x60;  A request to this endpoint will only change the parameters passed. For example, passing just &#x60;status_text&#x60; requests a change in the status text, but will leave the status emoji unchanged.  Clients that wish to set the user&#39;s status to a specific value should pass all supported parameters. </documentation>
      <input message="wsdl:PostUsersMeStatus_RequestMessage" />
      <output message="wsdl:PostUsersMeStatus_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PostUsersMeStatus_400" message="wsdl:PostUsersMeStatus_400">
        <documentation>Success.</documentation>
      </fault>
    </operation>
    <operation name="PatchUsersByUser_id">
      <documentation>Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). </documentation>
      <input message="wsdl:PatchUsersByUser_id_RequestMessage" />
      <output message="wsdl:PatchUsersByUser_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchUsersByUser_id_400" message="wsdl:PatchUsersByUser_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PatchUser_groupsByUser_group_id">
      <documentation>Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; </documentation>
      <input message="wsdl:PatchUser_groupsByUser_group_id_RequestMessage" />
      <output message="wsdl:PatchUser_groupsByUser_group_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
      <fault name="PatchUser_groupsByUser_group_id_400" message="wsdl:PatchUser_groupsByUser_group_id_400">
        <documentation>Bad request.</documentation>
      </fault>
    </operation>
    <operation name="PostUser_groupsMembersByUser_group_id">
      <documentation>Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; </documentation>
      <input message="wsdl:PostUser_groupsMembersByUser_group_id_RequestMessage" />
      <output message="wsdl:PostUser_groupsMembersByUser_group_id_ResponseMessage">
        <documentation>Success.</documentation>
      </output>
    </operation>
    <operation name="PostZulip-outgoing-webhook">
      <documentation>Outgoing webhooks allows to build or set up Zulip integrations which are notified when certain types of messages are sent in Zulip. </documentation>
      <input message="wsdl:PostZulip-outgoing-webhook_RequestMessage" />
      <output message="wsdl:PostZulip-outgoing-webhook_ResponseMessage">
        <documentation>Success </documentation>
      </output>
    </operation>
  </portType>
  <binding name="ServiceV1_Binding" type="wsdl:ServiceV1_PortType">
    <soap:binding transport="http://schemas.xmlsoap.org/soap/http" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
    <operation name="PostDev_fetch_api_key">
      <soap:operation soapAction="PostDev_fetch_api_key" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostFetch_api_key">
      <soap:operation soapAction="PostFetch_api_key" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostDrafts">
      <soap:operation soapAction="PostDrafts" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostDrafts_400">
        <soap:fault use="literal" name="PostDrafts_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="DeleteDraftsByDraft_id">
      <soap:operation soapAction="DeleteDraftsByDraft_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteDraftsByDraft_id_404">
        <soap:fault use="literal" name="DeleteDraftsByDraft_id_404" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchDraftsByDraft_id">
      <soap:operation soapAction="PatchDraftsByDraft_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchDraftsByDraft_id_404">
        <soap:fault use="literal" name="PatchDraftsByDraft_id_404" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetDrafts">
      <soap:operation soapAction="GetDrafts" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostMessagesReactionsByMessage_id">
      <soap:operation soapAction="PostMessagesReactionsByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostMessagesReactionsByMessage_id_400">
        <soap:fault use="literal" name="PostMessagesReactionsByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetMessagesMatches_narrow">
      <soap:operation soapAction="GetMessagesMatches_narrow" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteMessagesByMessage_id">
      <soap:operation soapAction="DeleteMessagesByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteMessagesByMessage_id_400">
        <soap:fault use="literal" name="DeleteMessagesByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetUser_uploadsByRealm_id_strAndFilename">
      <soap:operation soapAction="GetUser_uploadsByRealm_id_strAndFilename" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetMessagesHistoryByMessage_id">
      <soap:operation soapAction="GetMessagesHistoryByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetMessagesHistoryByMessage_id_400">
        <soap:fault use="literal" name="GetMessagesHistoryByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetMessages">
      <soap:operation soapAction="GetMessages" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetMessagesByMessage_id">
      <soap:operation soapAction="GetMessagesByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetMessagesByMessage_id_400">
        <soap:fault use="literal" name="GetMessagesByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostMark_all_as_read">
      <soap:operation soapAction="PostMark_all_as_read" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostMark_stream_as_read">
      <soap:operation soapAction="PostMark_stream_as_read" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostMark_topic_as_read">
      <soap:operation soapAction="PostMark_topic_as_read" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteMessagesReactionsByMessage_id">
      <soap:operation soapAction="DeleteMessagesReactionsByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteMessagesReactionsByMessage_id_400">
        <soap:fault use="literal" name="DeleteMessagesReactionsByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostMessagesRender">
      <soap:operation soapAction="PostMessagesRender" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostMessages">
      <soap:operation soapAction="PostMessages" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostMessages_400">
        <soap:fault use="literal" name="PostMessages_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchMessagesByMessage_id">
      <soap:operation soapAction="PatchMessagesByMessage_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchMessagesByMessage_id_400">
        <soap:fault use="literal" name="PatchMessagesByMessage_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostMessagesFlags">
      <soap:operation soapAction="PostMessagesFlags" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostUser_uploads">
      <soap:operation soapAction="PostUser_uploads" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteEvents">
      <soap:operation soapAction="DeleteEvents" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteEvents_400">
        <soap:fault use="literal" name="DeleteEvents_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetEvents">
      <soap:operation soapAction="GetEvents" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetEvents_400">
        <soap:fault use="literal" name="GetEvents_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostReal-time">
      <soap:operation soapAction="PostReal-time" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostRegister">
      <soap:operation soapAction="PostRegister" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostRest-error-handling">
      <soap:operation soapAction="PostRest-error-handling" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <fault name="PostRest-error-handling_400">
        <soap:fault use="literal" name="PostRest-error-handling_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
      <fault name="PostRest-error-handling_401">
        <soap:fault use="literal" name="PostRest-error-handling_401" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
      <fault name="PostRest-error-handling_429">
        <soap:fault use="literal" name="PostRest-error-handling_429" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostRealmPlaygrounds">
      <soap:operation soapAction="PostRealmPlaygrounds" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostRealmFilters">
      <soap:operation soapAction="PostRealmFilters" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostRealmProfile_fields">
      <soap:operation soapAction="PostRealmProfile_fields" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetRealmEmoji">
      <soap:operation soapAction="GetRealmEmoji" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetRealmProfile_fields">
      <soap:operation soapAction="GetRealmProfile_fields" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetRealmLinkifiers">
      <soap:operation soapAction="GetRealmLinkifiers" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetServer_settings">
      <soap:operation soapAction="GetServer_settings" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteRealmPlaygroundsByPlayground_id">
      <soap:operation soapAction="DeleteRealmPlaygroundsByPlayground_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteRealmFiltersByFilter_id">
      <soap:operation soapAction="DeleteRealmFiltersByFilter_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PatchRealmProfile_fields">
      <soap:operation soapAction="PatchRealmProfile_fields" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PatchRealmFiltersByFilter_id">
      <soap:operation soapAction="PatchRealmFiltersByFilter_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostRealmEmojiByEmoji_name">
      <soap:operation soapAction="PostRealmEmojiByEmoji_name" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteStreamsByStream_id">
      <soap:operation soapAction="DeleteStreamsByStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteStreamsByStream_id_400">
        <soap:fault use="literal" name="DeleteStreamsByStream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetCallsBigbluebuttonCreate">
      <soap:operation soapAction="GetCallsBigbluebuttonCreate" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostStreamsDelete_topicByStream_id">
      <soap:operation soapAction="PostStreamsDelete_topicByStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostStreamsDelete_topicByStream_id_400">
        <soap:fault use="literal" name="PostStreamsDelete_topicByStream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetGet_stream_id">
      <soap:operation soapAction="GetGet_stream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetGet_stream_id_400">
        <soap:fault use="literal" name="GetGet_stream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetUsersMeTopicsByStream_id">
      <soap:operation soapAction="GetUsersMeTopicsByStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetUsersMeTopicsByStream_id_400">
        <soap:fault use="literal" name="GetUsersMeTopicsByStream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetStreams">
      <soap:operation soapAction="GetStreams" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetStreams_400">
        <soap:fault use="literal" name="GetStreams_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetStreamsMembersByStream_id">
      <soap:operation soapAction="GetStreamsMembersByStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="GetStreamsMembersByStream_id_400">
        <soap:fault use="literal" name="GetStreamsMembersByStream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetUsersSubscriptionsByUser_idAndStream_id">
      <soap:operation soapAction="GetUsersSubscriptionsByUser_idAndStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsersMeSubscriptions">
      <soap:operation soapAction="GetUsersMeSubscriptions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PatchUsersMeSubscriptionsMuted_topics">
      <soap:operation soapAction="PatchUsersMeSubscriptionsMuted_topics" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchUsersMeSubscriptionsMuted_topics_400">
        <soap:fault use="literal" name="PatchUsersMeSubscriptionsMuted_topics_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostUsersMeSubscriptions">
      <soap:operation soapAction="PostUsersMeSubscriptions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostUsersMeSubscriptions_400">
        <soap:fault use="literal" name="PostUsersMeSubscriptions_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="DeleteUsersMeSubscriptions">
      <soap:operation soapAction="DeleteUsersMeSubscriptions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteUsersMeSubscriptions_400">
        <soap:fault use="literal" name="DeleteUsersMeSubscriptions_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchStreamsByStream_id">
      <soap:operation soapAction="PatchStreamsByStream_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchStreamsByStream_id_400">
        <soap:fault use="literal" name="PatchStreamsByStream_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostUsersMeSubscriptionsProperties">
      <soap:operation soapAction="PostUsersMeSubscriptionsProperties" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PatchUsersMeSubscriptions">
      <soap:operation soapAction="PatchUsersMeSubscriptions" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostUsers">
      <soap:operation soapAction="PostUsers" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostUsers_400">
        <soap:fault use="literal" name="PostUsers_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostUser_groupsCreate">
      <soap:operation soapAction="PostUser_groupsCreate" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostUser_groupsCreate_400">
        <soap:fault use="literal" name="PostUser_groupsCreate_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="DeleteUsersMe">
      <soap:operation soapAction="DeleteUsersMe" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteUsersMe_400">
        <soap:fault use="literal" name="DeleteUsersMe_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="DeleteUsersByUser_id">
      <soap:operation soapAction="DeleteUsersByUser_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteUsersByUser_id_400">
        <soap:fault use="literal" name="DeleteUsersByUser_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="GetAttachments">
      <soap:operation soapAction="GetAttachments" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsersMe">
      <soap:operation soapAction="GetUsersMe" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsersByUser_id">
      <soap:operation soapAction="GetUsersByUser_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsersByEmail">
      <soap:operation soapAction="GetUsersByEmail" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUser_groups">
      <soap:operation soapAction="GetUser_groups" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsersPresenceByUser_id_or_email">
      <soap:operation soapAction="GetUsersPresenceByUser_id_or_email" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="GetUsers">
      <soap:operation soapAction="GetUsers" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostUsersMeMuted_usersByMuted_user_id">
      <soap:operation soapAction="PostUsersMeMuted_usersByMuted_user_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostUsersMeMuted_usersByMuted_user_id_400">
        <soap:fault use="literal" name="PostUsersMeMuted_usersByMuted_user_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostUsersReactivateByUser_id">
      <soap:operation soapAction="PostUsersReactivateByUser_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="DeleteUser_groupsByUser_group_id">
      <soap:operation soapAction="DeleteUser_groupsByUser_group_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteUser_groupsByUser_group_id_400">
        <soap:fault use="literal" name="DeleteUser_groupsByUser_group_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostTyping">
      <soap:operation soapAction="PostTyping" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostTyping_400">
        <soap:fault use="literal" name="PostTyping_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="DeleteUsersMeMuted_usersByMuted_user_id">
      <soap:operation soapAction="DeleteUsersMeMuted_usersByMuted_user_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="DeleteUsersMeMuted_usersByMuted_user_id_400">
        <soap:fault use="literal" name="DeleteUsersMeMuted_usersByMuted_user_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchSettings">
      <soap:operation soapAction="PatchSettings" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostUsersMeStatus">
      <soap:operation soapAction="PostUsersMeStatus" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PostUsersMeStatus_400">
        <soap:fault use="literal" name="PostUsersMeStatus_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchUsersByUser_id">
      <soap:operation soapAction="PatchUsersByUser_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchUsersByUser_id_400">
        <soap:fault use="literal" name="PatchUsersByUser_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PatchUser_groupsByUser_group_id">
      <soap:operation soapAction="PatchUser_groupsByUser_group_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
      <fault name="PatchUser_groupsByUser_group_id_400">
        <soap:fault use="literal" name="PatchUser_groupsByUser_group_id_400" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </fault>
    </operation>
    <operation name="PostUser_groupsMembersByUser_group_id">
      <soap:operation soapAction="PostUser_groupsMembersByUser_group_id" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
    <operation name="PostZulip-outgoing-webhook">
      <soap:operation soapAction="PostZulip-outgoing-webhook" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      <input>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </input>
      <output>
        <soap:body use="literal" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
      </output>
    </operation>
  </binding>
  <service name="ServiceV1">
    <documentation>Powerful open source group chat </documentation>
    <port name="default_Port" binding="wsdl:ServiceV1_Binding">
      <soap:address location="http://localhost/soap/ServiceV1" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" />
    </port>
  </service>
</definitions>