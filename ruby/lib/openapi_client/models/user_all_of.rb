=begin
#Zulip REST API

#Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class UserAllOf
    attr_accessor :email

    attr_accessor :is_bot

    attr_accessor :avatar_url

    attr_accessor :avatar_version

    attr_accessor :full_name

    attr_accessor :is_admin

    attr_accessor :is_owner

    attr_accessor :is_billing_admin

    attr_accessor :role

    attr_accessor :bot_type

    attr_accessor :user_id

    attr_accessor :bot_owner_id

    attr_accessor :is_active

    attr_accessor :is_guest

    attr_accessor :timezone

    attr_accessor :date_joined

    attr_accessor :delivery_email

    attr_accessor :profile_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'is_bot' => :'is_bot',
        :'avatar_url' => :'avatar_url',
        :'avatar_version' => :'avatar_version',
        :'full_name' => :'full_name',
        :'is_admin' => :'is_admin',
        :'is_owner' => :'is_owner',
        :'is_billing_admin' => :'is_billing_admin',
        :'role' => :'role',
        :'bot_type' => :'bot_type',
        :'user_id' => :'user_id',
        :'bot_owner_id' => :'bot_owner_id',
        :'is_active' => :'is_active',
        :'is_guest' => :'is_guest',
        :'timezone' => :'timezone',
        :'date_joined' => :'date_joined',
        :'delivery_email' => :'delivery_email',
        :'profile_data' => :'profile_data'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'email' => :'AnyType',
        :'is_bot' => :'AnyType',
        :'avatar_url' => :'AnyType',
        :'avatar_version' => :'AnyType',
        :'full_name' => :'AnyType',
        :'is_admin' => :'AnyType',
        :'is_owner' => :'AnyType',
        :'is_billing_admin' => :'AnyType',
        :'role' => :'AnyType',
        :'bot_type' => :'AnyType',
        :'user_id' => :'AnyType',
        :'bot_owner_id' => :'AnyType',
        :'is_active' => :'AnyType',
        :'is_guest' => :'AnyType',
        :'timezone' => :'AnyType',
        :'date_joined' => :'AnyType',
        :'delivery_email' => :'AnyType',
        :'profile_data' => :'AnyType'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'email',
        :'is_bot',
        :'avatar_url',
        :'avatar_version',
        :'full_name',
        :'is_admin',
        :'is_owner',
        :'is_billing_admin',
        :'role',
        :'bot_type',
        :'user_id',
        :'bot_owner_id',
        :'is_active',
        :'is_guest',
        :'timezone',
        :'date_joined',
        :'delivery_email',
        :'profile_data'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::UserAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::UserAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'is_bot')
        self.is_bot = attributes[:'is_bot']
      end

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'avatar_version')
        self.avatar_version = attributes[:'avatar_version']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'is_admin')
        self.is_admin = attributes[:'is_admin']
      end

      if attributes.key?(:'is_owner')
        self.is_owner = attributes[:'is_owner']
      end

      if attributes.key?(:'is_billing_admin')
        self.is_billing_admin = attributes[:'is_billing_admin']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'bot_type')
        self.bot_type = attributes[:'bot_type']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'bot_owner_id')
        self.bot_owner_id = attributes[:'bot_owner_id']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      end

      if attributes.key?(:'is_guest')
        self.is_guest = attributes[:'is_guest']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'date_joined')
        self.date_joined = attributes[:'date_joined']
      end

      if attributes.key?(:'delivery_email')
        self.delivery_email = attributes[:'delivery_email']
      end

      if attributes.key?(:'profile_data')
        self.profile_data = attributes[:'profile_data']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          is_bot == o.is_bot &&
          avatar_url == o.avatar_url &&
          avatar_version == o.avatar_version &&
          full_name == o.full_name &&
          is_admin == o.is_admin &&
          is_owner == o.is_owner &&
          is_billing_admin == o.is_billing_admin &&
          role == o.role &&
          bot_type == o.bot_type &&
          user_id == o.user_id &&
          bot_owner_id == o.bot_owner_id &&
          is_active == o.is_active &&
          is_guest == o.is_guest &&
          timezone == o.timezone &&
          date_joined == o.date_joined &&
          delivery_email == o.delivery_email &&
          profile_data == o.profile_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [email, is_bot, avatar_url, avatar_version, full_name, is_admin, is_owner, is_billing_admin, role, bot_type, user_id, bot_owner_id, is_active, is_guest, timezone, date_joined, delivery_email, profile_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
