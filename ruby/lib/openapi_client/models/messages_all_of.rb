=begin
#Zulip REST API

#Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'date'
require 'time'

module OpenapiClient
  class MessagesAllOf
    attr_accessor :avatar_url

    attr_accessor :client

    attr_accessor :content

    attr_accessor :content_type

    attr_accessor :display_recipient

    attr_accessor :id

    attr_accessor :is_me_message

    attr_accessor :reactions

    attr_accessor :recipient_id

    attr_accessor :sender_email

    attr_accessor :sender_full_name

    attr_accessor :sender_id

    attr_accessor :sender_realm_str

    attr_accessor :stream_id

    attr_accessor :subject

    attr_accessor :topic_links

    attr_accessor :submessages

    attr_accessor :timestamp

    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'avatar_url' => :'avatar_url',
        :'client' => :'client',
        :'content' => :'content',
        :'content_type' => :'content_type',
        :'display_recipient' => :'display_recipient',
        :'id' => :'id',
        :'is_me_message' => :'is_me_message',
        :'reactions' => :'reactions',
        :'recipient_id' => :'recipient_id',
        :'sender_email' => :'sender_email',
        :'sender_full_name' => :'sender_full_name',
        :'sender_id' => :'sender_id',
        :'sender_realm_str' => :'sender_realm_str',
        :'stream_id' => :'stream_id',
        :'subject' => :'subject',
        :'topic_links' => :'topic_links',
        :'submessages' => :'submessages',
        :'timestamp' => :'timestamp',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'avatar_url' => :'AnyType',
        :'client' => :'AnyType',
        :'content' => :'AnyType',
        :'content_type' => :'AnyType',
        :'display_recipient' => :'AnyType',
        :'id' => :'AnyType',
        :'is_me_message' => :'AnyType',
        :'reactions' => :'AnyType',
        :'recipient_id' => :'AnyType',
        :'sender_email' => :'AnyType',
        :'sender_full_name' => :'AnyType',
        :'sender_id' => :'AnyType',
        :'sender_realm_str' => :'AnyType',
        :'stream_id' => :'AnyType',
        :'subject' => :'AnyType',
        :'topic_links' => :'AnyType',
        :'submessages' => :'AnyType',
        :'timestamp' => :'AnyType',
        :'type' => :'AnyType'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'avatar_url',
        :'client',
        :'content',
        :'content_type',
        :'display_recipient',
        :'id',
        :'is_me_message',
        :'reactions',
        :'recipient_id',
        :'sender_email',
        :'sender_full_name',
        :'sender_id',
        :'sender_realm_str',
        :'stream_id',
        :'subject',
        :'topic_links',
        :'submessages',
        :'timestamp',
        :'type'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::MessagesAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::MessagesAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'avatar_url')
        self.avatar_url = attributes[:'avatar_url']
      end

      if attributes.key?(:'client')
        self.client = attributes[:'client']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      end

      if attributes.key?(:'display_recipient')
        self.display_recipient = attributes[:'display_recipient']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_me_message')
        self.is_me_message = attributes[:'is_me_message']
      end

      if attributes.key?(:'reactions')
        self.reactions = attributes[:'reactions']
      end

      if attributes.key?(:'recipient_id')
        self.recipient_id = attributes[:'recipient_id']
      end

      if attributes.key?(:'sender_email')
        self.sender_email = attributes[:'sender_email']
      end

      if attributes.key?(:'sender_full_name')
        self.sender_full_name = attributes[:'sender_full_name']
      end

      if attributes.key?(:'sender_id')
        self.sender_id = attributes[:'sender_id']
      end

      if attributes.key?(:'sender_realm_str')
        self.sender_realm_str = attributes[:'sender_realm_str']
      end

      if attributes.key?(:'stream_id')
        self.stream_id = attributes[:'stream_id']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'topic_links')
        self.topic_links = attributes[:'topic_links']
      end

      if attributes.key?(:'submessages')
        self.submessages = attributes[:'submessages']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          avatar_url == o.avatar_url &&
          client == o.client &&
          content == o.content &&
          content_type == o.content_type &&
          display_recipient == o.display_recipient &&
          id == o.id &&
          is_me_message == o.is_me_message &&
          reactions == o.reactions &&
          recipient_id == o.recipient_id &&
          sender_email == o.sender_email &&
          sender_full_name == o.sender_full_name &&
          sender_id == o.sender_id &&
          sender_realm_str == o.sender_realm_str &&
          stream_id == o.stream_id &&
          subject == o.subject &&
          topic_links == o.topic_links &&
          submessages == o.submessages &&
          timestamp == o.timestamp &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [avatar_url, client, content, content_type, display_recipient, id, is_me_message, reactions, recipient_id, sender_email, sender_full_name, sender_id, sender_realm_str, stream_id, subject, topic_links, submessages, timestamp, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
