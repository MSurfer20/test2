=begin
#Zulip REST API

#Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module OpenapiClient
  class StreamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive a stream
    # [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def archive_stream(stream_id, opts = {})
      data, _status_code, _headers = archive_stream_with_http_info(stream_id, opts)
      data
    end

    # Archive a stream
    # [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def archive_stream_with_http_info(stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.archive_stream ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.archive_stream"
      end
      # resource path
      local_var_path = '/streams/{stream_id}'.sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.archive_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#archive_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create BigBlueButton video call
    # Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def create_big_blue_button_video_call(opts = {})
      data, _status_code, _headers = create_big_blue_button_video_call_with_http_info(opts)
      data
    end

    # Create BigBlueButton video call
    # Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def create_big_blue_button_video_call_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.create_big_blue_button_video_call ...'
      end
      # resource path
      local_var_path = '/calls/bigbluebutton/create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.create_big_blue_button_video_call",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#create_big_blue_button_video_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a topic
    # Delete all messages in a topic.  `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param topic_name [String] The name of the topic to delete. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def delete_topic(stream_id, topic_name, opts = {})
      data, _status_code, _headers = delete_topic_with_http_info(stream_id, topic_name, opts)
      data
    end

    # Delete a topic
    # Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param topic_name [String] The name of the topic to delete. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def delete_topic_with_http_info(stream_id, topic_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.delete_topic ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.delete_topic"
      end
      # verify the required parameter 'topic_name' is set
      if @api_client.config.client_side_validation && topic_name.nil?
        fail ArgumentError, "Missing the required parameter 'topic_name' when calling StreamsApi.delete_topic"
      end
      # resource path
      local_var_path = '/streams/{stream_id}/delete_topic'.sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'topic_name'] = topic_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.delete_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#delete_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get stream ID
    # Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 
    # @param stream [String] The name of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_stream_id(stream, opts = {})
      data, _status_code, _headers = get_stream_id_with_http_info(stream, opts)
      data
    end

    # Get stream ID
    # Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
    # @param stream [String] The name of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_stream_id_with_http_info(stream, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_stream_id ...'
      end
      # verify the required parameter 'stream' is set
      if @api_client.config.client_side_validation && stream.nil?
        fail ArgumentError, "Missing the required parameter 'stream' when calling StreamsApi.get_stream_id"
      end
      # resource path
      local_var_path = '/get_stream_id'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'stream'] = stream

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_stream_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get topics in a stream
    # Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_stream_topics(stream_id, opts = {})
      data, _status_code, _headers = get_stream_topics_with_http_info(stream_id, opts)
      data
    end

    # Get topics in a stream
    # Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_stream_topics_with_http_info(stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_stream_topics ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.get_stream_topics"
      end
      # resource path
      local_var_path = '/users/me/{stream_id}/topics'.sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_stream_topics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_stream_topics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all streams
    # Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_public Include all public streams.  (default to true)
    # @option opts [Boolean] :include_web_public Include all web public streams.  (default to false)
    # @option opts [Boolean] :include_subscribed Include all streams that the user is subscribed to.  (default to true)
    # @option opts [Boolean] :include_all_active Include all active streams. The user must have administrative privileges to use this parameter.  (default to false)
    # @option opts [Boolean] :include_default Include all default streams for the user&#39;s realm.  (default to false)
    # @option opts [Boolean] :include_owner_subscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (default to false)
    # @return [JsonSuccessBase]
    def get_streams(opts = {})
      data, _status_code, _headers = get_streams_with_http_info(opts)
      data
    end

    # Get all streams
    # Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_public Include all public streams. 
    # @option opts [Boolean] :include_web_public Include all web public streams. 
    # @option opts [Boolean] :include_subscribed Include all streams that the user is subscribed to. 
    # @option opts [Boolean] :include_all_active Include all active streams. The user must have administrative privileges to use this parameter. 
    # @option opts [Boolean] :include_default Include all default streams for the user&#39;s realm. 
    # @option opts [Boolean] :include_owner_subscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_streams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_streams ...'
      end
      # resource path
      local_var_path = '/streams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_public'] = opts[:'include_public'] if !opts[:'include_public'].nil?
      query_params[:'include_web_public'] = opts[:'include_web_public'] if !opts[:'include_web_public'].nil?
      query_params[:'include_subscribed'] = opts[:'include_subscribed'] if !opts[:'include_subscribed'].nil?
      query_params[:'include_all_active'] = opts[:'include_all_active'] if !opts[:'include_all_active'].nil?
      query_params[:'include_default'] = opts[:'include_default'] if !opts[:'include_default'].nil?
      query_params[:'include_owner_subscribed'] = opts[:'include_owner_subscribed'] if !opts[:'include_owner_subscribed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_streams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the subscribers of a stream
    # Get all users subscribed to a stream.  `Get {{ api_url }}/v1/streams/{stream_id}/members` 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_subscribers(stream_id, opts = {})
      data, _status_code, _headers = get_subscribers_with_http_info(stream_id, opts)
      data
    end

    # Get the subscribers of a stream
    # Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscribers_with_http_info(stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_subscribers ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.get_subscribers"
      end
      # resource path
      local_var_path = '/streams/{stream_id}/members'.sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_subscribers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscription status
    # Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_subscription_status(user_id, stream_id, opts = {})
      data, _status_code, _headers = get_subscription_status_with_http_info(user_id, stream_id, opts)
      data
    end

    # Get subscription status
    # Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscription_status_with_http_info(user_id, stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_subscription_status ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling StreamsApi.get_subscription_status"
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.get_subscription_status"
      end
      # resource path
      local_var_path = '/users/{user_id}/subscriptions/{stream_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_subscription_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_subscription_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get subscribed streams
    # Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_subscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (default to false)
    # @return [JsonSuccessBase]
    def get_subscriptions(opts = {})
      data, _status_code, _headers = get_subscriptions_with_http_info(opts)
      data
    end

    # Get subscribed streams
    # Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_subscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.get_subscriptions ...'
      end
      # resource path
      local_var_path = '/users/me/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include_subscribers'] = opts[:'include_subscribers'] if !opts[:'include_subscribers'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.get_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Topic muting
    # This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 
    # @param topic [String] The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
    # @param op [String] Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :stream The name of the stream to access. 
    # @option opts [Integer] :stream_id The ID of the stream to access. 
    # @return [JsonSuccess]
    def mute_topic(topic, op, opts = {})
      data, _status_code, _headers = mute_topic_with_http_info(topic, op, opts)
      data
    end

    # Topic muting
    # This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
    # @param topic [String] The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
    # @param op [String] Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :stream The name of the stream to access. 
    # @option opts [Integer] :stream_id The ID of the stream to access. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def mute_topic_with_http_info(topic, op, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.mute_topic ...'
      end
      # verify the required parameter 'topic' is set
      if @api_client.config.client_side_validation && topic.nil?
        fail ArgumentError, "Missing the required parameter 'topic' when calling StreamsApi.mute_topic"
      end
      # verify the required parameter 'op' is set
      if @api_client.config.client_side_validation && op.nil?
        fail ArgumentError, "Missing the required parameter 'op' when calling StreamsApi.mute_topic"
      end
      # verify enum value
      allowable_values = ["add", "remove"]
      if @api_client.config.client_side_validation && !allowable_values.include?(op)
        fail ArgumentError, "invalid value for \"op\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/users/me/subscriptions/muted_topics'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'topic'] = topic
      query_params[:'op'] = op
      query_params[:'stream'] = opts[:'stream'] if !opts[:'stream'].nil?
      query_params[:'stream_id'] = opts[:'stream_id'] if !opts[:'stream_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.mute_topic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#mute_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe to a stream
    # Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 
    # @param subscriptions [Array<Object>] A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<OneOfstringinteger>] :principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
    # @option opts [Boolean] :authorization_errors_fatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (default to true)
    # @option opts [Boolean] :announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (default to false)
    # @option opts [Boolean] :invite_only As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (default to false)
    # @option opts [Boolean] :history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    # @option opts [Integer] :stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (default to 1)
    # @option opts [OneOfstringinteger] :message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    # @return [OneOfobjectobject]
    def subscribe(subscriptions, opts = {})
      data, _status_code, _headers = subscribe_with_http_info(subscriptions, opts)
      data
    end

    # Subscribe to a stream
    # Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
    # @param subscriptions [Array<Object>] A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<OneOfstringinteger>] :principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
    # @option opts [Boolean] :authorization_errors_fatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. 
    # @option opts [Boolean] :announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation. 
    # @option opts [Boolean] :invite_only As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
    # @option opts [Boolean] :history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    # @option opts [Integer] :stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
    # @option opts [OneOfstringinteger] :message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    # @return [Array<(OneOfobjectobject, Integer, Hash)>] OneOfobjectobject data, response status code and response headers
    def subscribe_with_http_info(subscriptions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.subscribe ...'
      end
      # verify the required parameter 'subscriptions' is set
      if @api_client.config.client_side_validation && subscriptions.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptions' when calling StreamsApi.subscribe"
      end
      # resource path
      local_var_path = '/users/me/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscriptions'] = @api_client.build_collection_param(subscriptions, :multi)
      query_params[:'principals'] = @api_client.build_collection_param(opts[:'principals'], :multi) if !opts[:'principals'].nil?
      query_params[:'authorization_errors_fatal'] = opts[:'authorization_errors_fatal'] if !opts[:'authorization_errors_fatal'].nil?
      query_params[:'announce'] = opts[:'announce'] if !opts[:'announce'].nil?
      query_params[:'invite_only'] = opts[:'invite_only'] if !opts[:'invite_only'].nil?
      query_params[:'history_public_to_subscribers'] = opts[:'history_public_to_subscribers'] if !opts[:'history_public_to_subscribers'].nil?
      query_params[:'stream_post_policy'] = opts[:'stream_post_policy'] if !opts[:'stream_post_policy'].nil?
      query_params[:'message_retention_days'] = opts[:'message_retention_days'] if !opts[:'message_retention_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OneOfobjectobject'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.subscribe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe from a stream
    # Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 
    # @param subscriptions [Array<String>] A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<OneOfstringinteger>] :principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
    # @return [JsonSuccessBase]
    def unsubscribe(subscriptions, opts = {})
      data, _status_code, _headers = unsubscribe_with_http_info(subscriptions, opts)
      data
    end

    # Unsubscribe from a stream
    # Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
    # @param subscriptions [Array<String>] A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<OneOfstringinteger>] :principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def unsubscribe_with_http_info(subscriptions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.unsubscribe ...'
      end
      # verify the required parameter 'subscriptions' is set
      if @api_client.config.client_side_validation && subscriptions.nil?
        fail ArgumentError, "Missing the required parameter 'subscriptions' when calling StreamsApi.unsubscribe"
      end
      # resource path
      local_var_path = '/users/me/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscriptions'] = @api_client.build_collection_param(subscriptions, :multi)
      query_params[:'principals'] = @api_client.build_collection_param(opts[:'principals'], :multi) if !opts[:'principals'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.unsubscribe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#unsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a stream
    # Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    # @option opts [String] :new_name The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Boolean] :is_private Change whether the stream is a private stream. 
    # @option opts [Boolean] :is_announcement_only Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. 
    # @option opts [Integer] :stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (default to 1)
    # @option opts [Boolean] :history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    # @option opts [OneOfstringinteger] :message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    # @return [JsonSuccess]
    def update_stream(stream_id, opts = {})
      data, _status_code, _headers = update_stream_with_http_info(stream_id, opts)
      data
    end

    # Update a stream
    # Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
    # @param stream_id [Integer] The ID of the stream to access. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    # @option opts [String] :new_name The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Boolean] :is_private Change whether the stream is a private stream. 
    # @option opts [Boolean] :is_announcement_only Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. 
    # @option opts [Integer] :stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
    # @option opts [Boolean] :history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    # @option opts [OneOfstringinteger] :message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def update_stream_with_http_info(stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.update_stream ...'
      end
      # verify the required parameter 'stream_id' is set
      if @api_client.config.client_side_validation && stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'stream_id' when calling StreamsApi.update_stream"
      end
      # resource path
      local_var_path = '/streams/{stream_id}'.sub('{' + 'stream_id' + '}', CGI.escape(stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'new_name'] = opts[:'new_name'] if !opts[:'new_name'].nil?
      query_params[:'is_private'] = opts[:'is_private'] if !opts[:'is_private'].nil?
      query_params[:'is_announcement_only'] = opts[:'is_announcement_only'] if !opts[:'is_announcement_only'].nil?
      query_params[:'stream_post_policy'] = opts[:'stream_post_policy'] if !opts[:'stream_post_policy'].nil?
      query_params[:'history_public_to_subscribers'] = opts[:'history_public_to_subscribers'] if !opts[:'history_public_to_subscribers'].nil?
      query_params[:'message_retention_days'] = opts[:'message_retention_days'] if !opts[:'message_retention_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.update_stream",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#update_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update subscription settings
    # This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 
    # @param subscription_data [Array<Object>] A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def update_subscription_settings(subscription_data, opts = {})
      data, _status_code, _headers = update_subscription_settings_with_http_info(subscription_data, opts)
      data
    end

    # Update subscription settings
    # This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
    # @param subscription_data [Array<Object>] A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_subscription_settings_with_http_info(subscription_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.update_subscription_settings ...'
      end
      # verify the required parameter 'subscription_data' is set
      if @api_client.config.client_side_validation && subscription_data.nil?
        fail ArgumentError, "Missing the required parameter 'subscription_data' when calling StreamsApi.update_subscription_settings"
      end
      # resource path
      local_var_path = '/users/me/subscriptions/properties'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'subscription_data'] = @api_client.build_collection_param(subscription_data, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.update_subscription_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#update_subscription_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update subscriptions
    # Update which streams you are are subscribed to. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :delete A list of stream names to unsubscribe from. 
    # @option opts [Array<Object>] :add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
    # @return [JsonSuccessBase]
    def update_subscriptions(opts = {})
      data, _status_code, _headers = update_subscriptions_with_http_info(opts)
      data
    end

    # Update subscriptions
    # Update which streams you are are subscribed to. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :delete A list of stream names to unsubscribe from. 
    # @option opts [Array<Object>] :add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_subscriptions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StreamsApi.update_subscriptions ...'
      end
      # resource path
      local_var_path = '/users/me/subscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'delete'] = @api_client.build_collection_param(opts[:'delete'], :multi) if !opts[:'delete'].nil?
      query_params[:'add'] = @api_client.build_collection_param(opts[:'add'], :multi) if !opts[:'add'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"StreamsApi.update_subscriptions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StreamsApi#update_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
