=begin
#Zulip REST API

#Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.0

=end

require 'cgi'

module OpenapiClient
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a user
    # {!can-create-users-only.md!}  Create a new user account via the API.  `POST {{ api_url }}/v1/users` 
    # @param email [String] The email address of the new user. 
    # @param password [String] The password of the new user. 
    # @param full_name [String] The full name of the new user. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def create_user(email, password, full_name, opts = {})
      data, _status_code, _headers = create_user_with_http_info(email, password, full_name, opts)
      data
    end

    # Create a user
    # {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; 
    # @param email [String] The email address of the new user. 
    # @param password [String] The password of the new user. 
    # @param full_name [String] The full name of the new user. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def create_user_with_http_info(email, password, full_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UsersApi.create_user"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling UsersApi.create_user"
      end
      # verify the required parameter 'full_name' is set
      if @api_client.config.client_side_validation && full_name.nil?
        fail ArgumentError, "Missing the required parameter 'full_name' when calling UsersApi.create_user"
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email
      query_params[:'password'] = password
      query_params[:'full_name'] = full_name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a user group
    # Create a new [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/create` 
    # @param name [String] The name of the user group. 
    # @param description [String] The description of the user group. 
    # @param members [Array<Integer>] An array containing the user IDs of the initial members for the new user group. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def create_user_group(name, description, members, opts = {})
      data, _status_code, _headers = create_user_group_with_http_info(name, description, members, opts)
      data
    end

    # Create a user group
    # Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
    # @param name [String] The name of the user group. 
    # @param description [String] The description of the user group. 
    # @param members [Array<Integer>] An array containing the user IDs of the initial members for the new user group. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def create_user_group_with_http_info(name, description, members, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_user_group ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UsersApi.create_user_group"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling UsersApi.create_user_group"
      end
      # verify the required parameter 'members' is set
      if @api_client.config.client_side_validation && members.nil?
        fail ArgumentError, "Missing the required parameter 'members' when calling UsersApi.create_user_group"
      end
      # resource path
      local_var_path = '/user_groups/create'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'description'] = description
      query_params[:'members'] = @api_client.build_collection_param(members, :multi)

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.create_user_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate own user
    # Deactivates the user's account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  `DELETE {{ api_url }}/v1/users/me`  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def deactivate_own_user(opts = {})
      data, _status_code, _headers = deactivate_own_user_with_http_info(opts)
      data
    end

    # Deactivate own user
    # Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def deactivate_own_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.deactivate_own_user ...'
      end
      # resource path
      local_var_path = '/users/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.deactivate_own_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#deactivate_own_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate a user
    # [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `DELETE {{ api_url }}/v1/users/{user_id}` 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def deactivate_user(user_id, opts = {})
      data, _status_code, _headers = deactivate_user_with_http_info(user_id, opts)
      data
    end

    # Deactivate a user
    # [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def deactivate_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.deactivate_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.deactivate_user"
      end
      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.deactivate_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#deactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attachments
    # Fetch metadata on files uploaded by the requesting user.  `GET {{ api_url }}/v1/attachments` 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_attachments(opts = {})
      data, _status_code, _headers = get_attachments_with_http_info(opts)
      data
    end

    # Get attachments
    # Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_attachments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_attachments ...'
      end
      # resource path
      local_var_path = '/attachments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_attachments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get own user
    # Get basic data about the user/bot that requests this endpoint.  `GET {{ api_url }}/v1/users/me` 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_own_user(opts = {})
      data, _status_code, _headers = get_own_user_with_http_info(opts)
      data
    end

    # Get own user
    # Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_own_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_own_user ...'
      end
      # resource path
      local_var_path = '/users/me'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_own_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_own_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user
    # Fetch details for a single user in the organization.  `GET {{ api_url }}/v1/users/{user_id}`  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (default to false)
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (default to false)
    # @return [JsonSuccessBase]
    def get_user(user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(user_id, opts)
      data
    end

    # Get a user
    # Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. 
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.get_user"
      end
      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_gravatar'] = opts[:'client_gravatar'] if !opts[:'client_gravatar'].nil?
      query_params[:'include_custom_profile_fields'] = opts[:'include_custom_profile_fields'] if !opts[:'include_custom_profile_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user by email
    # Fetch details for a single user in the organization given a Zulip display email address.  `GET {{ api_url }}/v1/users/{email}`  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
    # @param email [String] The email address of the user whose details you want to fetch. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (default to false)
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (default to false)
    # @return [JsonSuccessBase]
    def get_user_by_email(email, opts = {})
      data, _status_code, _headers = get_user_by_email_with_http_info(email, opts)
      data
    end

    # Get a user by email
    # Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
    # @param email [String] The email address of the user whose details you want to fetch. 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. 
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_user_by_email_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_by_email ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UsersApi.get_user_by_email"
      end
      # resource path
      local_var_path = '/users/{email}'.sub('{' + 'email' + '}', CGI.escape(email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_gravatar'] = opts[:'client_gravatar'] if !opts[:'client_gravatar'].nil?
      query_params[:'include_custom_profile_fields'] = opts[:'include_custom_profile_fields'] if !opts[:'include_custom_profile_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_by_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_by_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user groups
    # {!api-members-only.md!}  Fetches all of the user groups in the organization.  `GET {{ api_url }}/v1/user_groups` 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_user_groups(opts = {})
      data, _status_code, _headers = get_user_groups_with_http_info(opts)
      data
    end

    # Get user groups
    # {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_user_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_groups ...'
      end
      # resource path
      local_var_path = '/user_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user presence
    # Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user's presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`  See [Zulip's developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
    # @param user_id_or_email [String] The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccessBase]
    def get_user_presence(user_id_or_email, opts = {})
      data, _status_code, _headers = get_user_presence_with_http_info(user_id_or_email, opts)
      data
    end

    # Get user presence
    # Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
    # @param user_id_or_email [String] The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_user_presence_with_http_info(user_id_or_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_user_presence ...'
      end
      # verify the required parameter 'user_id_or_email' is set
      if @api_client.config.client_side_validation && user_id_or_email.nil?
        fail ArgumentError, "Missing the required parameter 'user_id_or_email' when calling UsersApi.get_user_presence"
      end
      # resource path
      local_var_path = '/users/{user_id_or_email}/presence'.sub('{' + 'user_id_or_email' + '}', CGI.escape(user_id_or_email.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_user_presence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_presence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all users
    # Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  `GET {{ api_url }}/v1/users`  You can also [fetch details on a single user](/api/get-user). 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (default to false)
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (default to false)
    # @return [JsonSuccessBase]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # Get all users
    # Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. 
    # @option opts [Boolean] :include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...'
      end
      # resource path
      local_var_path = '/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_gravatar'] = opts[:'client_gravatar'] if !opts[:'client_gravatar'].nil?
      query_params[:'include_custom_profile_fields'] = opts[:'include_custom_profile_fields'] if !opts[:'include_custom_profile_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mute a user
    # This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you've muted will be automatically marked as read and hidden.  `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \"Muted user\", rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \"All users that exist   on this stream or realm\", e.g. for organization   administration or showing stream subscribers, should display   the user's name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
    # @param muted_user_id [Integer] The ID of the user to mute/un-mute. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def mute_user(muted_user_id, opts = {})
      data, _status_code, _headers = mute_user_with_http_info(muted_user_id, opts)
      data
    end

    # Mute a user
    # This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
    # @param muted_user_id [Integer] The ID of the user to mute/un-mute. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def mute_user_with_http_info(muted_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.mute_user ...'
      end
      # verify the required parameter 'muted_user_id' is set
      if @api_client.config.client_side_validation && muted_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'muted_user_id' when calling UsersApi.mute_user"
      end
      # resource path
      local_var_path = '/users/me/muted_users/{muted_user_id}'.sub('{' + 'muted_user_id' + '}', CGI.escape(muted_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.mute_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#mute_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reactivate a user
    # [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `POST {{ api_url }}/v1/users/{user_id}/reactivate` 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @return [AnyType]
    def reactivate_user(user_id, opts = {})
      data, _status_code, _headers = reactivate_user_with_http_info(user_id, opts)
      data
    end

    # Reactivate a user
    # [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnyType, Integer, Hash)>] AnyType data, response status code and response headers
    def reactivate_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.reactivate_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.reactivate_user"
      end
      # resource path
      local_var_path = '/users/{user_id}/reactivate'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnyType'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.reactivate_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#reactivate_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a user group
    # Delete a [user group](/help/user-groups).  `DELETE {{ api_url }}/v1/user_groups/{user_group_id}` 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def remove_user_group(user_group_id, opts = {})
      data, _status_code, _headers = remove_user_group_with_http_info(user_group_id, opts)
      data
    end

    # Delete a user group
    # Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def remove_user_group_with_http_info(user_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.remove_user_group ...'
      end
      # verify the required parameter 'user_group_id' is set
      if @api_client.config.client_side_validation && user_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_id' when calling UsersApi.remove_user_group"
      end
      # resource path
      local_var_path = '/user_groups/{user_group_id}'.sub('{' + 'user_group_id' + '}', CGI.escape(user_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.remove_user_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#remove_user_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set \"typing\" status
    # Notify other users whether the current user is typing a message.  `POST {{ api_url }}/v1/typing`  Clients implementing Zulip's typing notifications protocol should work as follows:  * Send a request to this endpoint with `op=\"start\"` when a user starts typing a message,   and also every `TYPING_STARTED_WAIT_PERIOD=10` seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with `op=\"stop\"` when a user pauses using the   compose UI for at least `TYPING_STOPPED_WAIT_PERIOD=5` seconds or cancels   the compose action (if it had previously sent a \"start\" operation for that   compose action). * Start displaying \"Sender is typing\" for a given conversation when the client   receives an `op=\"start\"` event from the [events API](/api/get-events). * Continue displaying \"Sender is typing\" until they receive an `op=\"stop\"` event   from the [events API](/api/get-events) or `TYPING_STARTED_EXPIRY_PERIOD=15`   seconds have passed without a new `op=\"start\"` event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   `stream_typing_notifications` in the `client_capabilities` parameter to `/register`.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip's typing notifications protocol. 
    # @param op [String] Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. 
    # @param to [Array<Integer>] For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of the message being composed.  (default to 'private')
    # @option opts [String] :topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type. 
    # @return [JsonSuccess]
    def set_typing_status(op, to, opts = {})
      data, _status_code, _headers = set_typing_status_with_http_info(op, to, opts)
      data
    end

    # Set \&quot;typing\&quot; status
    # Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. 
    # @param op [String] Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. 
    # @param to [Array<Integer>] For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Type of the message being composed. 
    # @option opts [String] :topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def set_typing_status_with_http_info(op, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.set_typing_status ...'
      end
      # verify the required parameter 'op' is set
      if @api_client.config.client_side_validation && op.nil?
        fail ArgumentError, "Missing the required parameter 'op' when calling UsersApi.set_typing_status"
      end
      # verify enum value
      allowable_values = ["start", "stop"]
      if @api_client.config.client_side_validation && !allowable_values.include?(op)
        fail ArgumentError, "invalid value for \"op\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling UsersApi.set_typing_status"
      end
      allowable_values = ["private", "stream"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/typing'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'op'] = op
      query_params[:'to'] = @api_client.build_collection_param(to, :multi)
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'topic'] = opts[:'topic'] if !opts[:'topic'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.set_typing_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#set_typing_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unmute a user
    # This endpoint unmutes a user.  `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  **Changes**: New in Zulip 4.0 (feature level 48). 
    # @param muted_user_id [Integer] The ID of the user to mute/un-mute. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def unmute_user(muted_user_id, opts = {})
      data, _status_code, _headers = unmute_user_with_http_info(muted_user_id, opts)
      data
    end

    # Unmute a user
    # This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). 
    # @param muted_user_id [Integer] The ID of the user to mute/un-mute. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def unmute_user_with_http_info(muted_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.unmute_user ...'
      end
      # verify the required parameter 'muted_user_id' is set
      if @api_client.config.client_side_validation && muted_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'muted_user_id' when calling UsersApi.unmute_user"
      end
      # resource path
      local_var_path = '/users/me/muted_users/{muted_user_id}'.sub('{' + 'muted_user_id' + '}', CGI.escape(muted_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.unmute_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#unmute_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update display settings
    # This endpoint is used to edit the current user's user interface settings.  `PATCH {{ api_url }}/v1/settings/display` 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :twenty_four_hour_time Whether time should be [displayed in 24-hour notation](/help/change-the-time-format). 
    # @option opts [Boolean] :dense_mode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip. 
    # @option opts [Boolean] :starred_message_counts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages). 
    # @option opts [Boolean] :fluid_layout_width Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens. 
    # @option opts [Boolean] :high_contrast_mode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users. 
    # @option opts [Integer] :color_scheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query. 
    # @option opts [Boolean] :translate_emoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends. 
    # @option opts [String] :default_language What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
    # @option opts [String] :default_view The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Boolean] :left_side_userlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked. 
    # @option opts [String] :emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Integer] :demote_inactive_streams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never 
    # @option opts [String] :timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @return [JsonSuccessBase]
    def update_display_settings(opts = {})
      data, _status_code, _headers = update_display_settings_with_http_info(opts)
      data
    end

    # Update display settings
    # This endpoint is used to edit the current user&#39;s user interface settings.  &#x60;PATCH {{ api_url }}/v1/settings/display&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :twenty_four_hour_time Whether time should be [displayed in 24-hour notation](/help/change-the-time-format). 
    # @option opts [Boolean] :dense_mode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip. 
    # @option opts [Boolean] :starred_message_counts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages). 
    # @option opts [Boolean] :fluid_layout_width Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens. 
    # @option opts [Boolean] :high_contrast_mode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users. 
    # @option opts [Integer] :color_scheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query. 
    # @option opts [Boolean] :translate_emoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends. 
    # @option opts [String] :default_language What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
    # @option opts [String] :default_view The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Boolean] :left_side_userlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked. 
    # @option opts [String] :emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @option opts [Integer] :demote_inactive_streams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never 
    # @option opts [String] :timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_display_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_display_settings ...'
      end
      allowable_values = [1, 2, 3]
      if @api_client.config.client_side_validation && opts[:'color_scheme'] && !allowable_values.include?(opts[:'color_scheme'])
        fail ArgumentError, "invalid value for \"color_scheme\", must be one of #{allowable_values}"
      end
      allowable_values = [1, 2, 3]
      if @api_client.config.client_side_validation && opts[:'demote_inactive_streams'] && !allowable_values.include?(opts[:'demote_inactive_streams'])
        fail ArgumentError, "invalid value for \"demote_inactive_streams\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/settings/display'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'twenty_four_hour_time'] = opts[:'twenty_four_hour_time'] if !opts[:'twenty_four_hour_time'].nil?
      query_params[:'dense_mode'] = opts[:'dense_mode'] if !opts[:'dense_mode'].nil?
      query_params[:'starred_message_counts'] = opts[:'starred_message_counts'] if !opts[:'starred_message_counts'].nil?
      query_params[:'fluid_layout_width'] = opts[:'fluid_layout_width'] if !opts[:'fluid_layout_width'].nil?
      query_params[:'high_contrast_mode'] = opts[:'high_contrast_mode'] if !opts[:'high_contrast_mode'].nil?
      query_params[:'color_scheme'] = opts[:'color_scheme'] if !opts[:'color_scheme'].nil?
      query_params[:'translate_emoticons'] = opts[:'translate_emoticons'] if !opts[:'translate_emoticons'].nil?
      query_params[:'default_language'] = opts[:'default_language'] if !opts[:'default_language'].nil?
      query_params[:'default_view'] = opts[:'default_view'] if !opts[:'default_view'].nil?
      query_params[:'left_side_userlist'] = opts[:'left_side_userlist'] if !opts[:'left_side_userlist'].nil?
      query_params[:'emojiset'] = opts[:'emojiset'] if !opts[:'emojiset'].nil?
      query_params[:'demote_inactive_streams'] = opts[:'demote_inactive_streams'] if !opts[:'demote_inactive_streams'].nil?
      query_params[:'timezone'] = opts[:'timezone'] if !opts[:'timezone'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.update_display_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_display_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update notification settings
    # This endpoint is used to edit the user's global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  `PATCH {{ api_url }}/v1/settings/notifications` 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enable_stream_desktop_notifications Enable visual desktop notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_email_notifications Enable email notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_push_notifications Enable mobile notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_audible_notifications Enable audible desktop notifications for stream messages. 
    # @option opts [String] :notification_sound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
    # @option opts [Boolean] :enable_desktop_notifications Enable visual desktop notifications for private messages and @-mentions. 
    # @option opts [Boolean] :enable_sounds Enable audible desktop notifications for private messages and @-mentions. 
    # @option opts [Boolean] :enable_offline_email_notifications Enable email notifications for private messages and @-mentions received when the user is offline. 
    # @option opts [Boolean] :enable_offline_push_notifications Enable mobile notification for private messages and @-mentions received when the user is offline. 
    # @option opts [Boolean] :enable_online_push_notifications Enable mobile notification for private messages and @-mentions received when the user is online. 
    # @option opts [Boolean] :enable_digest_emails Enable digest emails when the user is away. 
    # @option opts [Boolean] :enable_marketing_emails Enable marketing emails. Has no function outside Zulip Cloud. 
    # @option opts [Boolean] :enable_login_emails Enable email notifications for new logins to account. 
    # @option opts [Boolean] :message_content_in_email_notifications Include the message&#39;s content in email notifications for new messages. 
    # @option opts [Boolean] :pm_content_in_desktop_notifications Include content of private messages in desktop notifications. 
    # @option opts [Boolean] :wildcard_mentions_notify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention. 
    # @option opts [Integer] :desktop_icon_count_display Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None 
    # @option opts [Boolean] :realm_name_in_notifications Include organization name in subject of message notification emails. 
    # @option opts [Boolean] :presence_enabled Display the presence status to other users when online. 
    # @return [JsonSuccessBase]
    def update_notification_settings(opts = {})
      data, _status_code, _headers = update_notification_settings_with_http_info(opts)
      data
    end

    # Update notification settings
    # This endpoint is used to edit the user&#39;s global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  &#x60;PATCH {{ api_url }}/v1/settings/notifications&#x60; 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enable_stream_desktop_notifications Enable visual desktop notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_email_notifications Enable email notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_push_notifications Enable mobile notifications for stream messages. 
    # @option opts [Boolean] :enable_stream_audible_notifications Enable audible desktop notifications for stream messages. 
    # @option opts [String] :notification_sound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
    # @option opts [Boolean] :enable_desktop_notifications Enable visual desktop notifications for private messages and @-mentions. 
    # @option opts [Boolean] :enable_sounds Enable audible desktop notifications for private messages and @-mentions. 
    # @option opts [Boolean] :enable_offline_email_notifications Enable email notifications for private messages and @-mentions received when the user is offline. 
    # @option opts [Boolean] :enable_offline_push_notifications Enable mobile notification for private messages and @-mentions received when the user is offline. 
    # @option opts [Boolean] :enable_online_push_notifications Enable mobile notification for private messages and @-mentions received when the user is online. 
    # @option opts [Boolean] :enable_digest_emails Enable digest emails when the user is away. 
    # @option opts [Boolean] :enable_marketing_emails Enable marketing emails. Has no function outside Zulip Cloud. 
    # @option opts [Boolean] :enable_login_emails Enable email notifications for new logins to account. 
    # @option opts [Boolean] :message_content_in_email_notifications Include the message&#39;s content in email notifications for new messages. 
    # @option opts [Boolean] :pm_content_in_desktop_notifications Include content of private messages in desktop notifications. 
    # @option opts [Boolean] :wildcard_mentions_notify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention. 
    # @option opts [Integer] :desktop_icon_count_display Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None 
    # @option opts [Boolean] :realm_name_in_notifications Include organization name in subject of message notification emails. 
    # @option opts [Boolean] :presence_enabled Display the presence status to other users when online. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_notification_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_notification_settings ...'
      end
      allowable_values = [1, 2, 3]
      if @api_client.config.client_side_validation && opts[:'desktop_icon_count_display'] && !allowable_values.include?(opts[:'desktop_icon_count_display'])
        fail ArgumentError, "invalid value for \"desktop_icon_count_display\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/settings/notifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enable_stream_desktop_notifications'] = opts[:'enable_stream_desktop_notifications'] if !opts[:'enable_stream_desktop_notifications'].nil?
      query_params[:'enable_stream_email_notifications'] = opts[:'enable_stream_email_notifications'] if !opts[:'enable_stream_email_notifications'].nil?
      query_params[:'enable_stream_push_notifications'] = opts[:'enable_stream_push_notifications'] if !opts[:'enable_stream_push_notifications'].nil?
      query_params[:'enable_stream_audible_notifications'] = opts[:'enable_stream_audible_notifications'] if !opts[:'enable_stream_audible_notifications'].nil?
      query_params[:'notification_sound'] = opts[:'notification_sound'] if !opts[:'notification_sound'].nil?
      query_params[:'enable_desktop_notifications'] = opts[:'enable_desktop_notifications'] if !opts[:'enable_desktop_notifications'].nil?
      query_params[:'enable_sounds'] = opts[:'enable_sounds'] if !opts[:'enable_sounds'].nil?
      query_params[:'enable_offline_email_notifications'] = opts[:'enable_offline_email_notifications'] if !opts[:'enable_offline_email_notifications'].nil?
      query_params[:'enable_offline_push_notifications'] = opts[:'enable_offline_push_notifications'] if !opts[:'enable_offline_push_notifications'].nil?
      query_params[:'enable_online_push_notifications'] = opts[:'enable_online_push_notifications'] if !opts[:'enable_online_push_notifications'].nil?
      query_params[:'enable_digest_emails'] = opts[:'enable_digest_emails'] if !opts[:'enable_digest_emails'].nil?
      query_params[:'enable_marketing_emails'] = opts[:'enable_marketing_emails'] if !opts[:'enable_marketing_emails'].nil?
      query_params[:'enable_login_emails'] = opts[:'enable_login_emails'] if !opts[:'enable_login_emails'].nil?
      query_params[:'message_content_in_email_notifications'] = opts[:'message_content_in_email_notifications'] if !opts[:'message_content_in_email_notifications'].nil?
      query_params[:'pm_content_in_desktop_notifications'] = opts[:'pm_content_in_desktop_notifications'] if !opts[:'pm_content_in_desktop_notifications'].nil?
      query_params[:'wildcard_mentions_notify'] = opts[:'wildcard_mentions_notify'] if !opts[:'wildcard_mentions_notify'].nil?
      query_params[:'desktop_icon_count_display'] = opts[:'desktop_icon_count_display'] if !opts[:'desktop_icon_count_display'].nil?
      query_params[:'realm_name_in_notifications'] = opts[:'realm_name_in_notifications'] if !opts[:'realm_name_in_notifications'].nil?
      query_params[:'presence_enabled'] = opts[:'presence_enabled'] if !opts[:'presence_enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccessBase'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.update_notification_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_notification_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user
    # Administrative endpoint to update the details of another user in the organization.  `PATCH {{ api_url }}/v1/users/{user_id}`  Supports everything an administrator can do to edit details of another user's account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :full_name The user&#39;s full name. 
    # @option opts [Integer] :role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). 
    # @option opts [Array<Object>] :profile_data A dictionary containing the to be updated custom profile field data for the user. 
    # @return [JsonSuccess]
    def update_user(user_id, opts = {})
      data, _status_code, _headers = update_user_with_http_info(user_id, opts)
      data
    end

    # Update a user
    # Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
    # @param user_id [Integer] The target user&#39;s ID. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :full_name The user&#39;s full name. 
    # @option opts [Integer] :role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). 
    # @option opts [Array<Object>] :profile_data A dictionary containing the to be updated custom profile field data for the user. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def update_user_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.update_user"
      end
      # resource path
      local_var_path = '/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'full_name'] = opts[:'full_name'] if !opts[:'full_name'].nil?
      query_params[:'role'] = opts[:'role'] if !opts[:'role'].nil?
      query_params[:'profile_data'] = @api_client.build_collection_param(opts[:'profile_data'], :multi) if !opts[:'profile_data'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a user group
    # Update the name or description of a [user group](/help/user-groups).  `PATCH {{ api_url }}/v1/user_groups/{user_group_id}` 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param name [String] The new name of the group. 
    # @param description [String] The new description of the group. 
    # @param [Hash] opts the optional parameters
    # @return [JsonSuccess]
    def update_user_group(user_group_id, name, description, opts = {})
      data, _status_code, _headers = update_user_group_with_http_info(user_group_id, name, description, opts)
      data
    end

    # Update a user group
    # Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param name [String] The new name of the group. 
    # @param description [String] The new description of the group. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def update_user_group_with_http_info(user_group_id, name, description, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_group ...'
      end
      # verify the required parameter 'user_group_id' is set
      if @api_client.config.client_side_validation && user_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_id' when calling UsersApi.update_user_group"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling UsersApi.update_user_group"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling UsersApi.update_user_group"
      end
      # resource path
      local_var_path = '/user_groups/{user_group_id}'.sub('{' + 'user_group_id' + '}', CGI.escape(user_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'description'] = description

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update user group members
    # Update the members of a [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/{user_group_id}/members` 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :delete The list of user ids to be removed from the user group. 
    # @option opts [Array<Integer>] :add The list of user ids to be added to the user group. 
    # @return [JsonSuccess]
    def update_user_group_members(user_group_id, opts = {})
      data, _status_code, _headers = update_user_group_members_with_http_info(user_group_id, opts)
      data
    end

    # Update user group members
    # Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
    # @param user_group_id [Integer] The ID of the target user group. 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :delete The list of user ids to be removed from the user group. 
    # @option opts [Array<Integer>] :add The list of user ids to be added to the user group. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def update_user_group_members_with_http_info(user_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_group_members ...'
      end
      # verify the required parameter 'user_group_id' is set
      if @api_client.config.client_side_validation && user_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_group_id' when calling UsersApi.update_user_group_members"
      end
      # resource path
      local_var_path = '/user_groups/{user_group_id}/members'.sub('{' + 'user_group_id' + '}', CGI.escape(user_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'delete'] = @api_client.build_collection_param(opts[:'delete'], :multi) if !opts[:'delete'].nil?
      query_params[:'add'] = @api_client.build_collection_param(opts[:'add'], :multi) if !opts[:'add'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'JsonSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"UsersApi.update_user_group_members",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
