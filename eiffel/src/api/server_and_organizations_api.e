note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	SERVERANDORGANIZATIONS_API

inherit

    API_I


feature -- API Access


	add_code_playground (name: STRING_32; pygments_language: STRING_32; url_prefix: STRING_32): detachable JSON_SUCCESS_BASE
			-- Add a code playground
			-- Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
			-- 
			-- argument: name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language.  (required)
			-- 
			-- argument: pygments_language The name of the Pygments language lexer for that programming language.  (required)
			-- 
			-- argument: url_prefix The url prefix for the playground.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/playgrounds"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pygments_language", pygments_language));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "url_prefix", url_prefix));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	add_linkifier (pattern: STRING_32; url_format_string: STRING_32): detachable JSON_SUCCESS_BASE
			-- Add a linkifier
			-- Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; 
			-- 
			-- argument: pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  (required)
			-- 
			-- argument: url_format_string The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/filters"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pattern", pattern));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "url_format_string", url_format_string));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	create_custom_profile_field (field_type: INTEGER_32; name: STRING_32; hint: STRING_32; field_data: detachable ANY): detachable JSON_SUCCESS_BASE
			-- Create a custom profile field
			-- [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; 
			-- 
			-- argument: field_type The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  (required)
			-- 
			-- argument: name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional, default to null)
			-- 
			-- argument: hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional, default to null)
			-- 
			-- argument: field_data Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/profile_fields"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "hint", hint));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "field_type", field_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "field_data", field_data));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	custom_emoji : detachable JSON_SUCCESS_BASE
			-- Get all custom emoji
			-- Get all the custom emoji in the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/emoji"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	custom_profile_fields : detachable JSON_SUCCESS_BASE
			-- Get all custom profile fields
			-- Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60; 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/profile_fields"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	linkifiers : detachable JSON_SUCCESS_BASE
			-- Get linkifiers
			-- List all of an organization&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/linkifiers"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	remove_code_playground (playground_id: INTEGER_32): detachable JSON_SUCCESS
			-- Remove a code playground
			-- Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). 
			-- 
			-- argument: playground_id The ID of the playground that you want to remove.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/playgrounds/{playground_id}"
			l_path.replace_substring_all ("{"+"playground_id"+"}", api_client.url_encode (playground_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	remove_linkifier (filter_id: INTEGER_32): detachable JSON_SUCCESS
			-- Remove a linkifier
			-- Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; 
			-- 
			-- argument: filter_id The ID of the linkifier that you want to remove.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/filters/{filter_id}"
			l_path.replace_substring_all ("{"+"filter_id"+"}", api_client.url_encode (filter_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	reorder_custom_profile_fields (order: LIST [INTEGER_32]): detachable JSON_SUCCESS
			-- Reorder custom profile fields
			-- Reorder the custom profile fields in the user&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
			-- 
			-- argument: order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/profile_fields"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "order", order));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	server_settings : detachable JSON_SUCCESS_BASE
			-- Get server settings
			-- Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/server_settings"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_linkifier (filter_id: INTEGER_32; pattern: STRING_32; url_format_string: STRING_32): detachable JSON_SUCCESS
			-- Update a linkifier
			-- Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57). 
			-- 
			-- argument: filter_id The ID of the linkifier that you want to update.  (required)
			-- 
			-- argument: pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  (required)
			-- 
			-- argument: url_format_string The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/filters/{filter_id}"
			l_path.replace_substring_all ("{"+"filter_id"+"}", api_client.url_encode (filter_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pattern", pattern));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "url_format_string", url_format_string));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	upload_custom_emoji (emoji_name: STRING_32; filename: FILE): detachable JSON_SUCCESS
			-- Upload custom emoji
			-- This endpoint is used to upload a custom emoji for use in the user&#39;s organization.  Access to this endpoint depends on the [organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; 
			-- 
			-- argument: emoji_name The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji).  (required)
			-- 
			-- argument: filename  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/realm/emoji/{emoji_name}"
			l_path.replace_substring_all ("{"+"emoji_name"+"}", api_client.url_encode (emoji_name.out))

			if attached filename as l_filename then
				l_request.add_form(l_filename,"filename");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"multipart/form-data">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
