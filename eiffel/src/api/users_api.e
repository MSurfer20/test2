note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	USERS_API

inherit

    API_I


feature -- API Access


	attachments : detachable JSON_SUCCESS_BASE
			-- Get attachments
			-- Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/attachments"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	create_user (email: STRING_32; password: STRING_32; full_name: STRING_32): detachable JSON_SUCCESS_BASE
			-- Create a user
			-- {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; 
			-- 
			-- argument: email The email address of the new user.  (required)
			-- 
			-- argument: password The password of the new user.  (required)
			-- 
			-- argument: full_name The full name of the new user.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "email", email));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "password", password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "full_name", full_name));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	create_user_group (name: STRING_32; description: STRING_32; members: LIST [INTEGER_32]): detachable JSON_SUCCESS
			-- Create a user group
			-- Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
			-- 
			-- argument: name The name of the user group.  (required)
			-- 
			-- argument: description The description of the user group.  (required)
			-- 
			-- argument: members An array containing the user IDs of the initial members for the new user group.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_groups/create"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "description", description));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "members", members));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	deactivate_own_user : detachable JSON_SUCCESS
			-- Deactivate own user
			-- Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	deactivate_user (user_id: INTEGER_32): detachable JSON_SUCCESS
			-- Deactivate a user
			-- [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; 
			-- 
			-- argument: user_id The target user&#39;s ID.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id}"
			l_path.replace_substring_all ("{"+"user_id"+"}", api_client.url_encode (user_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	mute_user (muted_user_id: INTEGER_32): detachable JSON_SUCCESS
			-- Mute a user
			-- This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
			-- 
			-- argument: muted_user_id The ID of the user to mute/un-mute.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/muted_users/{muted_user_id}"
			l_path.replace_substring_all ("{"+"muted_user_id"+"}", api_client.url_encode (muted_user_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	own_user : detachable JSON_SUCCESS_BASE
			-- Get own user
			-- Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	reactivate_user (user_id: INTEGER_32): detachable ANY
			-- Reactivate a user
			-- [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; 
			-- 
			-- argument: user_id The target user&#39;s ID.  (required)
			-- 
			-- 
			-- Result ANY
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id}/reactivate"
			l_path.replace_substring_all ("{"+"user_id"+"}", api_client.url_encode (user_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ANY } l_response.data ({ ANY }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	remove_user_group (user_group_id: INTEGER_32): detachable JSON_SUCCESS
			-- Delete a user group
			-- Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
			-- 
			-- argument: user_group_id The ID of the target user group.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_groups/{user_group_id}"
			l_path.replace_substring_all ("{"+"user_group_id"+"}", api_client.url_encode (user_group_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	set_typing_status (op: STRING_32; to: LIST [INTEGER_32]; type: STRING_32; topic: STRING_32): detachable JSON_SUCCESS
			-- Set \&quot;typing\&quot; status
			-- Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. 
			-- 
			-- argument: op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  (required)
			-- 
			-- argument: to For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  (required)
			-- 
			-- argument: type Type of the message being composed.  (optional, default to private)
			-- 
			-- argument: topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/typing"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "type", type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "op", op));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "to", to));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "topic", topic));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	unmute_user (muted_user_id: INTEGER_32): detachable JSON_SUCCESS
			-- Unmute a user
			-- This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). 
			-- 
			-- argument: muted_user_id The ID of the user to mute/un-mute.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/muted_users/{muted_user_id}"
			l_path.replace_substring_all ("{"+"muted_user_id"+"}", api_client.url_encode (muted_user_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_settings (full_name: STRING_32; email: STRING_32; old_password: STRING_32; new_password: STRING_32; twenty_four_hour_time: BOOLEAN; dense_mode: BOOLEAN; starred_message_counts: BOOLEAN; fluid_layout_width: BOOLEAN; high_contrast_mode: BOOLEAN; color_scheme: INTEGER_32; enable_drafts_synchronization: BOOLEAN; translate_emoticons: BOOLEAN; default_language: STRING_32; default_view: STRING_32; left_side_userlist: BOOLEAN; emojiset: STRING_32; demote_inactive_streams: INTEGER_32; timezone: STRING_32; enable_stream_desktop_notifications: BOOLEAN; enable_stream_email_notifications: BOOLEAN; enable_stream_push_notifications: BOOLEAN; enable_stream_audible_notifications: BOOLEAN; notification_sound: STRING_32; enable_desktop_notifications: BOOLEAN; enable_sounds: BOOLEAN; email_notifications_batching_period_seconds: INTEGER_32; enable_offline_email_notifications: BOOLEAN; enable_offline_push_notifications: BOOLEAN; enable_online_push_notifications: BOOLEAN; enable_digest_emails: BOOLEAN; enable_marketing_emails: BOOLEAN; enable_login_emails: BOOLEAN; message_content_in_email_notifications: BOOLEAN; pm_content_in_desktop_notifications: BOOLEAN; wildcard_mentions_notify: BOOLEAN; desktop_icon_count_display: INTEGER_32; realm_name_in_notifications: BOOLEAN; presence_enabled: BOOLEAN; enter_sends: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Update settings
			-- This endpoint is used to edit the current user&#39;s settings.  &#x60;PATCH {{ api_url }}/v1/settings&#x60;  **Changes**: Prior to Zulip 5.0 (feature level 80), this endpoint only supported the &#x60;full_name&#x60;, &#x60;email&#x60;, &#x60;old_password&#x60;, and &#x60;new_password&#x60; parameters. Notification settings were managed by &#x60;PATCH /settings/notifications&#x60;, and all other settings by &#x60;PATCH /settings/display&#x60;. The feature level 80 migration to merge these endpoints did not change how request parameters are encoded. Note, however, that it did change the handling of any invalid parameters present in a request to change notification or display settings, since the merged endpoint uses the new response format that was introduced for &#x60;/settings&#x60; in Zulip 5.0 (feature level 78).  The &#x60;/settings/display&#x60; and &#x60;/settings/notifications&#x60; endpoints are now deprecated aliases for this endpoint for backwards-compatibility, and will be removed once clients have migrated to use this endpoint. 
			-- 
			-- argument: full_name A new display name for the user.  (optional, default to null)
			-- 
			-- argument: email Asks the server to initiate a confirmation sequence to change the user&#39;s email address to the indicated value. The user will need to demonstrate control of the new email address by clicking a confirmation link sent to that address.  (optional, default to null)
			-- 
			-- argument: old_password The user&#39;s old Zulip password (or LDAP password, if LDAP authentication is in use).  Required only when sending the &#x60;new_password&#x60; parameter.  (optional, default to null)
			-- 
			-- argument: new_password The user&#39;s new Zulip password (or LDAP password, if LDAP authentication is in use).  The &#x60;old_password&#x60; parameter must be included in the request.  (optional, default to null)
			-- 
			-- argument: twenty_four_hour_time Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: dense_mode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: starred_message_counts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: fluid_layout_width Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: high_contrast_mode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: color_scheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_drafts_synchronization A boolean parameter to control whether synchronizing drafts is enabled for the user. When synchronization is disabled, all drafts stored in the server will be automatically deleted from the server.  This does not do anything (like sending events) to delete local copies of drafts stored in clients.  **Changes**: New in Zulip 5.0 (feature level 87).  (optional, default to null)
			-- 
			-- argument: translate_emoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: default_language What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).  (optional, default to null)
			-- 
			-- argument: default_view The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).  (optional, default to null)
			-- 
			-- argument: left_side_userlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).  (optional, default to null)
			-- 
			-- argument: demote_inactive_streams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).  (optional, default to null)
			-- 
			-- argument: enable_stream_desktop_notifications Enable visual desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_stream_email_notifications Enable email notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_stream_push_notifications Enable mobile notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_stream_audible_notifications Enable audible desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: notification_sound Notification sound name.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).  (optional, default to null)
			-- 
			-- argument: enable_desktop_notifications Enable visual desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_sounds Enable audible desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: email_notifications_batching_period_seconds The duration (in seconds) for which the server should wait to batch email notifications before sending them.  **Changes**: New in Zulip 5.0 (feature level 82)  (optional, default to null)
			-- 
			-- argument: enable_offline_email_notifications Enable email notifications for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_offline_push_notifications Enable mobile notification for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_online_push_notifications Enable mobile notification for private messages and @-mentions received when the user is online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_digest_emails Enable digest emails when the user is away.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_marketing_emails Enable marketing emails. Has no function outside Zulip Cloud.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enable_login_emails Enable email notifications for new logins to account.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: message_content_in_email_notifications Include the message&#39;s content in email notifications for new messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: pm_content_in_desktop_notifications Include content of private messages in desktop notifications.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: wildcard_mentions_notify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: desktop_icon_count_display Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: realm_name_in_notifications Include organization name in subject of message notification emails.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: presence_enabled Display the presence status to other users when online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  (optional, default to null)
			-- 
			-- argument: enter_sends Whether pressing Enter in the compose box sends a message (or saves a message edit).  **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by the &#x60;POST /users/me/enter-sends&#x60; endpoint, with the same parameter format.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/settings"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "full_name", full_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "email", email));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "old_password", old_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "new_password", new_password));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "twenty_four_hour_time", twenty_four_hour_time));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dense_mode", dense_mode));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "starred_message_counts", starred_message_counts));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fluid_layout_width", fluid_layout_width));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "high_contrast_mode", high_contrast_mode));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "color_scheme", color_scheme));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_drafts_synchronization", enable_drafts_synchronization));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "translate_emoticons", translate_emoticons));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "default_language", default_language));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "default_view", default_view));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "left_side_userlist", left_side_userlist));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "emojiset", emojiset));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "demote_inactive_streams", demote_inactive_streams));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "timezone", timezone));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_stream_desktop_notifications", enable_stream_desktop_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_stream_email_notifications", enable_stream_email_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_stream_push_notifications", enable_stream_push_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_stream_audible_notifications", enable_stream_audible_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "notification_sound", notification_sound));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_desktop_notifications", enable_desktop_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_sounds", enable_sounds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "email_notifications_batching_period_seconds", email_notifications_batching_period_seconds));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_offline_email_notifications", enable_offline_email_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_offline_push_notifications", enable_offline_push_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_online_push_notifications", enable_online_push_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_digest_emails", enable_digest_emails));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_marketing_emails", enable_marketing_emails));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enable_login_emails", enable_login_emails));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "message_content_in_email_notifications", message_content_in_email_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pm_content_in_desktop_notifications", pm_content_in_desktop_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "wildcard_mentions_notify", wildcard_mentions_notify));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "desktop_icon_count_display", desktop_icon_count_display));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "realm_name_in_notifications", realm_name_in_notifications));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "presence_enabled", presence_enabled));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "enter_sends", enter_sends));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_status (status_text: STRING_32; away: BOOLEAN; emoji_name: STRING_32; emoji_code: STRING_32; reaction_type: STRING_32): detachable JSON_SUCCESS
			-- Update your status
			-- Change your [status](/help/status-and-availability).  &#x60;POST {{ api_url }}/v1/users/me/status&#x60;  A request to this endpoint will only change the parameters passed. For example, passing just &#x60;status_text&#x60; requests a change in the status text, but will leave the status emoji unchanged.  Clients that wish to set the user&#39;s status to a specific value should pass all supported parameters. 
			-- 
			-- argument: status_text The text content of the status message. Sending the empty string will clear the user&#39;s status.  **Note**: The limit on the size of the message is 60 characters.  (optional, default to null)
			-- 
			-- argument: away Whether the user should be marked as \&quot;away\&quot;.  (optional, default to null)
			-- 
			-- argument: emoji_name The name for the emoji to associate with this status.  (optional, default to null)
			-- 
			-- argument: emoji_code A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji.  (optional, default to null)
			-- 
			-- argument: reaction_type One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/status"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "status_text", status_text));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "away", away));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "emoji_name", emoji_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "emoji_code", emoji_code));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "reaction_type", reaction_type));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_user (user_id: INTEGER_32; full_name: STRING_32; role: INTEGER_32; profile_data: detachable LIST [ANY]): detachable JSON_SUCCESS
			-- Update a user
			-- Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
			-- 
			-- argument: user_id The target user&#39;s ID.  (required)
			-- 
			-- argument: full_name The user&#39;s full name.  (optional, default to null)
			-- 
			-- argument: role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional, default to null)
			-- 
			-- argument: profile_data A dictionary containing the to be updated custom profile field data for the user.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id}"
			l_path.replace_substring_all ("{"+"user_id"+"}", api_client.url_encode (user_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "full_name", full_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "role", role));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "profile_data", profile_data));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_user_group (user_group_id: INTEGER_32; name: STRING_32; description: STRING_32): detachable JSON_SUCCESS
			-- Update a user group
			-- Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
			-- 
			-- argument: user_group_id The ID of the target user group.  (required)
			-- 
			-- argument: name The new name of the group.  (required)
			-- 
			-- argument: description The new description of the group.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_groups/{user_group_id}"
			l_path.replace_substring_all ("{"+"user_group_id"+"}", api_client.url_encode (user_group_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "description", description));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_user_group_members (user_group_id: INTEGER_32; delete: detachable LIST [INTEGER_32]; add: detachable LIST [INTEGER_32]): detachable JSON_SUCCESS
			-- Update user group members
			-- Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
			-- 
			-- argument: user_group_id The ID of the target user group.  (required)
			-- 
			-- argument: delete The list of user ids to be removed from the user group.  (optional, default to null)
			-- 
			-- argument: add The list of user ids to be added to the user group.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_groups/{user_group_id}/members"
			l_path.replace_substring_all ("{"+"user_group_id"+"}", api_client.url_encode (user_group_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "delete", delete));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "add", add));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	user (user_id: INTEGER_32; client_gravatar: BOOLEAN; include_custom_profile_fields: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Get a user
			-- Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
			-- 
			-- argument: user_id The target user&#39;s ID.  (required)
			-- 
			-- argument: client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
			-- 
			-- argument: include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id}"
			l_path.replace_substring_all ("{"+"user_id"+"}", api_client.url_encode (user_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "client_gravatar", client_gravatar));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_custom_profile_fields", include_custom_profile_fields));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	user_by_email (email: STRING_32; client_gravatar: BOOLEAN; include_custom_profile_fields: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Get a user by email
			-- Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
			-- 
			-- argument: email The email address of the user whose details you want to fetch.  (required)
			-- 
			-- argument: client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
			-- 
			-- argument: include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{email}"
			l_path.replace_substring_all ("{"+"email"+"}", api_client.url_encode (email.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "client_gravatar", client_gravatar));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_custom_profile_fields", include_custom_profile_fields));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	user_groups : detachable JSON_SUCCESS_BASE
			-- Get user groups
			-- {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/user_groups"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	user_presence (user_id_or_email: STRING_32): detachable JSON_SUCCESS_BASE
			-- Get user presence
			-- Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
			-- 
			-- argument: user_id_or_email The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id_or_email}/presence"
			l_path.replace_substring_all ("{"+"user_id_or_email"+"}", api_client.url_encode (user_id_or_email.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	users (client_gravatar: BOOLEAN; include_custom_profile_fields: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Get all users
			-- Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). 
			-- 
			-- argument: client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
			-- 
			-- argument: include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "client_gravatar", client_gravatar));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_custom_profile_fields", include_custom_profile_fields));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
