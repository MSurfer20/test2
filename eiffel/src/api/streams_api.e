note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	STREAMS_API

inherit

    API_I


feature -- API Access


	archive_stream (stream_id: INTEGER_32): detachable JSON_SUCCESS
			-- Archive a stream
			-- [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
			-- 
			-- argument: stream_id The ID of the stream to access.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/streams/{stream_id}"
			l_path.replace_substring_all ("{"+"stream_id"+"}", api_client.url_encode (stream_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	create_big_blue_button_video_call : detachable JSON_SUCCESS_BASE
			-- Create BigBlueButton video call
			-- Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/calls/bigbluebutton/create"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	mute_topic (topic: STRING_32; op: STRING_32; stream: STRING_32; stream_id: INTEGER_32): detachable JSON_SUCCESS
			-- Topic muting
			-- This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
			-- 
			-- argument: topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  (required)
			-- 
			-- argument: op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  (required)
			-- 
			-- argument: stream The name of the stream to access.  (optional, default to null)
			-- 
			-- argument: stream_id The ID of the stream to access.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions/muted_topics"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stream", stream));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stream_id", stream_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "topic", topic));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "op", op));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	stream_id (stream: STRING_32): detachable JSON_SUCCESS_BASE
			-- Get stream ID
			-- Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
			-- 
			-- argument: stream The name of the stream to access.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/get_stream_id"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stream", stream));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	stream_topics (stream_id: INTEGER_32): detachable JSON_SUCCESS_BASE
			-- Get topics in a stream
			-- Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
			-- 
			-- argument: stream_id The ID of the stream to access.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/{stream_id}/topics"
			l_path.replace_substring_all ("{"+"stream_id"+"}", api_client.url_encode (stream_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	streams (include_public: BOOLEAN; include_web_public: BOOLEAN; include_subscribed: BOOLEAN; include_all_active: BOOLEAN; include_default: BOOLEAN; include_owner_subscribed: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Get all streams
			-- Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
			-- 
			-- argument: include_public Include all public streams.  (optional, default to true)
			-- 
			-- argument: include_web_public Include all web public streams.  (optional, default to false)
			-- 
			-- argument: include_subscribed Include all streams that the user is subscribed to.  (optional, default to true)
			-- 
			-- argument: include_all_active Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
			-- 
			-- argument: include_default Include all default streams for the user&#39;s realm.  (optional, default to false)
			-- 
			-- argument: include_owner_subscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/streams"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_public", include_public));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_web_public", include_web_public));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_subscribed", include_subscribed));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_all_active", include_all_active));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_default", include_default));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_owner_subscribed", include_owner_subscribed));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	subscribe (subscriptions: LIST [ANY]; principals: detachable LIST [ONE_OFSTRINGINTEGER]; authorization_errors_fatal: BOOLEAN; announce: BOOLEAN; invite_only: BOOLEAN; history_public_to_subscribers: BOOLEAN; stream_post_policy: INTEGER_32; message_retention_days: detachable ONE_OFSTRINGINTEGER): detachable ONE_OFOBJECTOBJECT
			-- Subscribe to a stream
			-- Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
			-- 
			-- argument: subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  (required)
			-- 
			-- argument: principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to null)
			-- 
			-- argument: authorization_errors_fatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
			-- 
			-- argument: announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
			-- 
			-- argument: invite_only As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
			-- 
			-- argument: history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional, default to null)
			-- 
			-- argument: stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
			-- 
			-- argument: message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional, default to null)
			-- 
			-- 
			-- Result ONE_OFOBJECTOBJECT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "subscriptions", subscriptions));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "principals", principals));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "authorization_errors_fatal", authorization_errors_fatal));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "announce", announce));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "invite_only", invite_only));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "history_public_to_subscribers", history_public_to_subscribers));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stream_post_policy", stream_post_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "message_retention_days", message_retention_days));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ONE_OFOBJECTOBJECT } l_response.data ({ ONE_OFOBJECTOBJECT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	subscription_status (user_id: INTEGER_32; stream_id: INTEGER_32): detachable JSON_SUCCESS_BASE
			-- Get subscription status
			-- Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
			-- 
			-- argument: user_id The target user&#39;s ID.  (required)
			-- 
			-- argument: stream_id The ID of the stream to access.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/{user_id}/subscriptions/{stream_id}"
			l_path.replace_substring_all ("{"+"user_id"+"}", api_client.url_encode (user_id.out))
			l_path.replace_substring_all ("{"+"stream_id"+"}", api_client.url_encode (stream_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	subscriptions (include_subscribers: BOOLEAN): detachable JSON_SUCCESS_BASE
			-- Get subscribed streams
			-- Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
			-- 
			-- argument: include_subscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "include_subscribers", include_subscribers));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	unsubscribe (subscriptions: LIST [STRING_32]; principals: detachable LIST [ONE_OFSTRINGINTEGER]): detachable JSON_SUCCESS_BASE
			-- Unsubscribe from a stream
			-- Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
			-- 
			-- argument: subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  (required)
			-- 
			-- argument: principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "subscriptions", subscriptions));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "principals", principals));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Delete", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_stream (stream_id: INTEGER_32; description: STRING_32; new_name: STRING_32; is_private: BOOLEAN; is_announcement_only: BOOLEAN; stream_post_policy: INTEGER_32; history_public_to_subscribers: BOOLEAN; message_retention_days: detachable ONE_OFSTRINGINTEGER): detachable JSON_SUCCESS
			-- Update a stream
			-- Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
			-- 
			-- argument: stream_id The ID of the stream to access.  (required)
			-- 
			-- argument: description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional, default to null)
			-- 
			-- argument: new_name The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional, default to null)
			-- 
			-- argument: is_private Change whether the stream is a private stream.  (optional, default to null)
			-- 
			-- argument: is_announcement_only Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional, default to null)
			-- 
			-- argument: stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
			-- 
			-- argument: history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional, default to null)
			-- 
			-- argument: message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/streams/{stream_id}"
			l_path.replace_substring_all ("{"+"stream_id"+"}", api_client.url_encode (stream_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "description", description));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "new_name", new_name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "is_private", is_private));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "is_announcement_only", is_announcement_only));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "stream_post_policy", stream_post_policy));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "history_public_to_subscribers", history_public_to_subscribers));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "message_retention_days", message_retention_days));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS } l_response.data ({ JSON_SUCCESS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_subscription_settings (subscription_data: LIST [ANY]): detachable JSON_SUCCESS_BASE
			-- Update subscription settings
			-- This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
			-- 
			-- argument: subscription_data A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  (required)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions/properties"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "subscription_data", subscription_data));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	update_subscriptions (delete: detachable LIST [STRING_32]; add: detachable LIST [ANY]): detachable JSON_SUCCESS_BASE
			-- Update subscriptions
			-- Update which streams you are are subscribed to. 
			-- 
			-- argument: delete A list of stream names to unsubscribe from.  (optional, default to null)
			-- 
			-- argument: add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional, default to null)
			-- 
			-- 
			-- Result JSON_SUCCESS_BASE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/users/me/subscriptions"
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "delete", delete));
			l_request.fill_query_params(api_client.parameter_to_tuple("multi", "add", add));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<>>)
			l_response := api_client.call_api (l_path, "Patch", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { JSON_SUCCESS_BASE } l_response.data ({ JSON_SUCCESS_BASE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
