note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ADD_SUBSCRIPTIONS_RESPONSE_ALL_OF 




feature --Access

    var_result: detachable ANY 
      
    msg: detachable ANY 
      
    subscribed: detachable STRING_TABLE [LIST [STRING_32]] 
      -- A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
    already_subscribed: detachable STRING_TABLE [LIST [STRING_32]] 
      -- A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
    unauthorized: detachable LIST [STRING_32] 
      -- A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 

feature -- Change Element  
 
    set_var_result (a_name: like var_result)
        -- Set 'var_result' with 'a_name'.
      do
        var_result := a_name
      ensure
        var_result_set: var_result = a_name		
      end

    set_msg (a_name: like msg)
        -- Set 'msg' with 'a_name'.
      do
        msg := a_name
      ensure
        msg_set: msg = a_name		
      end

    set_subscribed (a_name: like subscribed)
        -- Set 'subscribed' with 'a_name'.
      do
        subscribed := a_name
      ensure
        subscribed_set: subscribed = a_name		
      end

    set_already_subscribed (a_name: like already_subscribed)
        -- Set 'already_subscribed' with 'a_name'.
      do
        already_subscribed := a_name
      ensure
        already_subscribed_set: already_subscribed = a_name		
      end

    set_unauthorized (a_name: like unauthorized)
        -- Set 'unauthorized' with 'a_name'.
      do
        unauthorized := a_name
      ensure
        unauthorized_set: unauthorized = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ADD_SUBSCRIPTIONS_RESPONSE_ALL_OF%N")
        if attached var_result as l_var_result then
          Result.append ("%Nvar_result:")
          Result.append (l_var_result.out)
          Result.append ("%N")    
        end  
        if attached msg as l_msg then
          Result.append ("%Nmsg:")
          Result.append (l_msg.out)
          Result.append ("%N")    
        end  
        if attached subscribed as l_subscribed then
          Result.append ("%Nsubscribed:")
          across l_subscribed as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached already_subscribed as l_already_subscribed then
          Result.append ("%Nalready_subscribed:")
          across l_already_subscribed as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end        
        if attached unauthorized as l_unauthorized then
          across l_unauthorized as ic loop
            Result.append ("%N unauthorized:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


