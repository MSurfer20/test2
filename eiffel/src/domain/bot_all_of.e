note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class BOT_ALL_OF 




feature --Access

    user_id: detachable ANY 
      
    full_name: detachable ANY 
      
    api_key: detachable ANY 
      
    default_sending_stream: detachable ANY 
      
    default_events_register_stream: detachable ANY 
      
    default_all_public_streams: detachable ANY 
      
    avatar_url: detachable ANY 
      
    owner_id: detachable ANY 
      
    services: detachable ANY 
      
    email: detachable STRING_32 
      -- The email of the bot. 
 	bot_type: INTEGER_32 
    	 -- An integer describing the type of bot: * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
 	is_active: BOOLEAN 
    	 -- A boolean describing whether the user account has been deactivated. 

feature -- Change Element  
 
    set_user_id (a_name: like user_id)
        -- Set 'user_id' with 'a_name'.
      do
        user_id := a_name
      ensure
        user_id_set: user_id = a_name		
      end

    set_full_name (a_name: like full_name)
        -- Set 'full_name' with 'a_name'.
      do
        full_name := a_name
      ensure
        full_name_set: full_name = a_name		
      end

    set_api_key (a_name: like api_key)
        -- Set 'api_key' with 'a_name'.
      do
        api_key := a_name
      ensure
        api_key_set: api_key = a_name		
      end

    set_default_sending_stream (a_name: like default_sending_stream)
        -- Set 'default_sending_stream' with 'a_name'.
      do
        default_sending_stream := a_name
      ensure
        default_sending_stream_set: default_sending_stream = a_name		
      end

    set_default_events_register_stream (a_name: like default_events_register_stream)
        -- Set 'default_events_register_stream' with 'a_name'.
      do
        default_events_register_stream := a_name
      ensure
        default_events_register_stream_set: default_events_register_stream = a_name		
      end

    set_default_all_public_streams (a_name: like default_all_public_streams)
        -- Set 'default_all_public_streams' with 'a_name'.
      do
        default_all_public_streams := a_name
      ensure
        default_all_public_streams_set: default_all_public_streams = a_name		
      end

    set_avatar_url (a_name: like avatar_url)
        -- Set 'avatar_url' with 'a_name'.
      do
        avatar_url := a_name
      ensure
        avatar_url_set: avatar_url = a_name		
      end

    set_owner_id (a_name: like owner_id)
        -- Set 'owner_id' with 'a_name'.
      do
        owner_id := a_name
      ensure
        owner_id_set: owner_id = a_name		
      end

    set_services (a_name: like services)
        -- Set 'services' with 'a_name'.
      do
        services := a_name
      ensure
        services_set: services = a_name		
      end

    set_email (a_name: like email)
        -- Set 'email' with 'a_name'.
      do
        email := a_name
      ensure
        email_set: email = a_name		
      end

    set_bot_type (a_name: like bot_type)
        -- Set 'bot_type' with 'a_name'.
      do
        bot_type := a_name
      ensure
        bot_type_set: bot_type = a_name		
      end

    set_is_active (a_name: like is_active)
        -- Set 'is_active' with 'a_name'.
      do
        is_active := a_name
      ensure
        is_active_set: is_active = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass BOT_ALL_OF%N")
        if attached user_id as l_user_id then
          Result.append ("%Nuser_id:")
          Result.append (l_user_id.out)
          Result.append ("%N")    
        end  
        if attached full_name as l_full_name then
          Result.append ("%Nfull_name:")
          Result.append (l_full_name.out)
          Result.append ("%N")    
        end  
        if attached api_key as l_api_key then
          Result.append ("%Napi_key:")
          Result.append (l_api_key.out)
          Result.append ("%N")    
        end  
        if attached default_sending_stream as l_default_sending_stream then
          Result.append ("%Ndefault_sending_stream:")
          Result.append (l_default_sending_stream.out)
          Result.append ("%N")    
        end  
        if attached default_events_register_stream as l_default_events_register_stream then
          Result.append ("%Ndefault_events_register_stream:")
          Result.append (l_default_events_register_stream.out)
          Result.append ("%N")    
        end  
        if attached default_all_public_streams as l_default_all_public_streams then
          Result.append ("%Ndefault_all_public_streams:")
          Result.append (l_default_all_public_streams.out)
          Result.append ("%N")    
        end  
        if attached avatar_url as l_avatar_url then
          Result.append ("%Navatar_url:")
          Result.append (l_avatar_url.out)
          Result.append ("%N")    
        end  
        if attached owner_id as l_owner_id then
          Result.append ("%Nowner_id:")
          Result.append (l_owner_id.out)
          Result.append ("%N")    
        end  
        if attached services as l_services then
          Result.append ("%Nservices:")
          Result.append (l_services.out)
          Result.append ("%N")    
        end  
        if attached email as l_email then
          Result.append ("%Nemail:")
          Result.append (l_email.out)
          Result.append ("%N")    
        end  
        if attached bot_type as l_bot_type then
          Result.append ("%Nbot_type:")
          Result.append (l_bot_type.out)
          Result.append ("%N")    
        end  
        if attached is_active as l_is_active then
          Result.append ("%Nis_active:")
          Result.append (l_is_active.out)
          Result.append ("%N")    
        end  
      end
end


