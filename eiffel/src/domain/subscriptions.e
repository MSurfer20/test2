note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SUBSCRIPTIONS 




feature --Access

 	stream_id: INTEGER_32 
    	 -- The unique ID of a stream. 
    name: detachable STRING_32 
      -- The name of a stream. 
    description: detachable STRING_32 
      -- The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 
    rendered_description: detachable STRING_32 
      -- A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
 	date_created: INTEGER_32 
    	 -- The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
 	invite_only: BOOLEAN 
    	 -- Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
 	subscribers: detachable LIST [INTEGER_32] 
    	 -- A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`. 
 	desktop_notifications: BOOLEAN 
    	 -- A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. 
 	email_notifications: BOOLEAN 
    	 -- A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. 
 	wildcard_mentions_notify: BOOLEAN 
    	 -- A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. 
 	push_notifications: BOOLEAN 
    	 -- A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. 
 	audible_notifications: BOOLEAN 
    	 -- A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. 
 	pin_to_top: BOOLEAN 
    	 -- A boolean specifying whether the given stream has been pinned to the top. 
    email_address: detachable STRING_32 
      -- Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). 
 	is_muted: BOOLEAN 
    	 -- Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`). 
 	in_home_view: BOOLEAN 
    	 -- Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. 
 	is_announcement_only: BOOLEAN 
    	 -- Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 
 	is_web_public: BOOLEAN 
    	 -- Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
 	role: INTEGER_32 
    	 -- The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). 
    color: detachable STRING_32 
      -- The user's personal color for the stream. 
 	stream_post_policy: INTEGER_32 
    	 -- Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
 	message_retention_days: INTEGER_32 
    	 -- Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
 	history_public_to_subscribers: BOOLEAN 
    	 -- Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 
 	first_message_id: INTEGER_32 
    	 -- The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
 	stream_weekly_traffic: INTEGER_32 
    	 -- The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. 

feature -- Change Element  
 
    set_stream_id (a_name: like stream_id)
        -- Set 'stream_id' with 'a_name'.
      do
        stream_id := a_name
      ensure
        stream_id_set: stream_id = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name		
      end

    set_rendered_description (a_name: like rendered_description)
        -- Set 'rendered_description' with 'a_name'.
      do
        rendered_description := a_name
      ensure
        rendered_description_set: rendered_description = a_name		
      end

    set_date_created (a_name: like date_created)
        -- Set 'date_created' with 'a_name'.
      do
        date_created := a_name
      ensure
        date_created_set: date_created = a_name		
      end

    set_invite_only (a_name: like invite_only)
        -- Set 'invite_only' with 'a_name'.
      do
        invite_only := a_name
      ensure
        invite_only_set: invite_only = a_name		
      end

    set_subscribers (a_name: like subscribers)
        -- Set 'subscribers' with 'a_name'.
      do
        subscribers := a_name
      ensure
        subscribers_set: subscribers = a_name		
      end

    set_desktop_notifications (a_name: like desktop_notifications)
        -- Set 'desktop_notifications' with 'a_name'.
      do
        desktop_notifications := a_name
      ensure
        desktop_notifications_set: desktop_notifications = a_name		
      end

    set_email_notifications (a_name: like email_notifications)
        -- Set 'email_notifications' with 'a_name'.
      do
        email_notifications := a_name
      ensure
        email_notifications_set: email_notifications = a_name		
      end

    set_wildcard_mentions_notify (a_name: like wildcard_mentions_notify)
        -- Set 'wildcard_mentions_notify' with 'a_name'.
      do
        wildcard_mentions_notify := a_name
      ensure
        wildcard_mentions_notify_set: wildcard_mentions_notify = a_name		
      end

    set_push_notifications (a_name: like push_notifications)
        -- Set 'push_notifications' with 'a_name'.
      do
        push_notifications := a_name
      ensure
        push_notifications_set: push_notifications = a_name		
      end

    set_audible_notifications (a_name: like audible_notifications)
        -- Set 'audible_notifications' with 'a_name'.
      do
        audible_notifications := a_name
      ensure
        audible_notifications_set: audible_notifications = a_name		
      end

    set_pin_to_top (a_name: like pin_to_top)
        -- Set 'pin_to_top' with 'a_name'.
      do
        pin_to_top := a_name
      ensure
        pin_to_top_set: pin_to_top = a_name		
      end

    set_email_address (a_name: like email_address)
        -- Set 'email_address' with 'a_name'.
      do
        email_address := a_name
      ensure
        email_address_set: email_address = a_name		
      end

    set_is_muted (a_name: like is_muted)
        -- Set 'is_muted' with 'a_name'.
      do
        is_muted := a_name
      ensure
        is_muted_set: is_muted = a_name		
      end

    set_in_home_view (a_name: like in_home_view)
        -- Set 'in_home_view' with 'a_name'.
      do
        in_home_view := a_name
      ensure
        in_home_view_set: in_home_view = a_name		
      end

    set_is_announcement_only (a_name: like is_announcement_only)
        -- Set 'is_announcement_only' with 'a_name'.
      do
        is_announcement_only := a_name
      ensure
        is_announcement_only_set: is_announcement_only = a_name		
      end

    set_is_web_public (a_name: like is_web_public)
        -- Set 'is_web_public' with 'a_name'.
      do
        is_web_public := a_name
      ensure
        is_web_public_set: is_web_public = a_name		
      end

    set_role (a_name: like role)
        -- Set 'role' with 'a_name'.
      do
        role := a_name
      ensure
        role_set: role = a_name		
      end

    set_color (a_name: like color)
        -- Set 'color' with 'a_name'.
      do
        color := a_name
      ensure
        color_set: color = a_name		
      end

    set_stream_post_policy (a_name: like stream_post_policy)
        -- Set 'stream_post_policy' with 'a_name'.
      do
        stream_post_policy := a_name
      ensure
        stream_post_policy_set: stream_post_policy = a_name		
      end

    set_message_retention_days (a_name: like message_retention_days)
        -- Set 'message_retention_days' with 'a_name'.
      do
        message_retention_days := a_name
      ensure
        message_retention_days_set: message_retention_days = a_name		
      end

    set_history_public_to_subscribers (a_name: like history_public_to_subscribers)
        -- Set 'history_public_to_subscribers' with 'a_name'.
      do
        history_public_to_subscribers := a_name
      ensure
        history_public_to_subscribers_set: history_public_to_subscribers = a_name		
      end

    set_first_message_id (a_name: like first_message_id)
        -- Set 'first_message_id' with 'a_name'.
      do
        first_message_id := a_name
      ensure
        first_message_id_set: first_message_id = a_name		
      end

    set_stream_weekly_traffic (a_name: like stream_weekly_traffic)
        -- Set 'stream_weekly_traffic' with 'a_name'.
      do
        stream_weekly_traffic := a_name
      ensure
        stream_weekly_traffic_set: stream_weekly_traffic = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SUBSCRIPTIONS%N")
        if attached stream_id as l_stream_id then
          Result.append ("%Nstream_id:")
          Result.append (l_stream_id.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")    
        end  
        if attached rendered_description as l_rendered_description then
          Result.append ("%Nrendered_description:")
          Result.append (l_rendered_description.out)
          Result.append ("%N")    
        end  
        if attached date_created as l_date_created then
          Result.append ("%Ndate_created:")
          Result.append (l_date_created.out)
          Result.append ("%N")    
        end  
        if attached invite_only as l_invite_only then
          Result.append ("%Ninvite_only:")
          Result.append (l_invite_only.out)
          Result.append ("%N")    
        end  
        if attached subscribers as l_subscribers then
          across l_subscribers as ic loop
            Result.append ("%N subscribers:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached desktop_notifications as l_desktop_notifications then
          Result.append ("%Ndesktop_notifications:")
          Result.append (l_desktop_notifications.out)
          Result.append ("%N")    
        end  
        if attached email_notifications as l_email_notifications then
          Result.append ("%Nemail_notifications:")
          Result.append (l_email_notifications.out)
          Result.append ("%N")    
        end  
        if attached wildcard_mentions_notify as l_wildcard_mentions_notify then
          Result.append ("%Nwildcard_mentions_notify:")
          Result.append (l_wildcard_mentions_notify.out)
          Result.append ("%N")    
        end  
        if attached push_notifications as l_push_notifications then
          Result.append ("%Npush_notifications:")
          Result.append (l_push_notifications.out)
          Result.append ("%N")    
        end  
        if attached audible_notifications as l_audible_notifications then
          Result.append ("%Naudible_notifications:")
          Result.append (l_audible_notifications.out)
          Result.append ("%N")    
        end  
        if attached pin_to_top as l_pin_to_top then
          Result.append ("%Npin_to_top:")
          Result.append (l_pin_to_top.out)
          Result.append ("%N")    
        end  
        if attached email_address as l_email_address then
          Result.append ("%Nemail_address:")
          Result.append (l_email_address.out)
          Result.append ("%N")    
        end  
        if attached is_muted as l_is_muted then
          Result.append ("%Nis_muted:")
          Result.append (l_is_muted.out)
          Result.append ("%N")    
        end  
        if attached in_home_view as l_in_home_view then
          Result.append ("%Nin_home_view:")
          Result.append (l_in_home_view.out)
          Result.append ("%N")    
        end  
        if attached is_announcement_only as l_is_announcement_only then
          Result.append ("%Nis_announcement_only:")
          Result.append (l_is_announcement_only.out)
          Result.append ("%N")    
        end  
        if attached is_web_public as l_is_web_public then
          Result.append ("%Nis_web_public:")
          Result.append (l_is_web_public.out)
          Result.append ("%N")    
        end  
        if attached role as l_role then
          Result.append ("%Nrole:")
          Result.append (l_role.out)
          Result.append ("%N")    
        end  
        if attached color as l_color then
          Result.append ("%Ncolor:")
          Result.append (l_color.out)
          Result.append ("%N")    
        end  
        if attached stream_post_policy as l_stream_post_policy then
          Result.append ("%Nstream_post_policy:")
          Result.append (l_stream_post_policy.out)
          Result.append ("%N")    
        end  
        if attached message_retention_days as l_message_retention_days then
          Result.append ("%Nmessage_retention_days:")
          Result.append (l_message_retention_days.out)
          Result.append ("%N")    
        end  
        if attached history_public_to_subscribers as l_history_public_to_subscribers then
          Result.append ("%Nhistory_public_to_subscribers:")
          Result.append (l_history_public_to_subscribers.out)
          Result.append ("%N")    
        end  
        if attached first_message_id as l_first_message_id then
          Result.append ("%Nfirst_message_id:")
          Result.append (l_first_message_id.out)
          Result.append ("%N")    
        end  
        if attached stream_weekly_traffic as l_stream_weekly_traffic then
          Result.append ("%Nstream_weekly_traffic:")
          Result.append (l_stream_weekly_traffic.out)
          Result.append ("%N")    
        end  
      end
end


