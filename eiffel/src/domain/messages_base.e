note
 description:"[
		Zulip REST API
 		Powerful open source group chat 
  		The version of the OpenAPI document: 1.0.0
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MESSAGES_BASE 




feature --Access

    avatar_url: detachable STRING_32 
      -- The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
    client: detachable STRING_32 
      -- A Zulip \"client\" string, describing what Zulip client sent the message. 
    content: detachable STRING_32 
      -- The content/body of the message. 
    content_type: detachable STRING_32 
      -- The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
    display_recipient: detachable ONE_OFSTRINGARRAY 
      -- Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
 	id: INTEGER_32 
    	 -- The unique message ID.  Messages should always be displayed sorted by ID. 
 	is_me_message: BOOLEAN 
    	 -- Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
    reactions: detachable LIST [EMOJI_REACTION] 
      -- Data on any reactions to the message. 
 	recipient_id: INTEGER_32 
    	 -- A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
    sender_email: detachable STRING_32 
      -- The Zulip display email address of the message's sender. 
    sender_full_name: detachable STRING_32 
      -- The full name of the message's sender. 
 	sender_id: INTEGER_32 
    	 -- The user ID of the message's sender. 
    sender_realm_str: detachable STRING_32 
      -- A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
 	stream_id: INTEGER_32 
    	 -- Only present for stream messages; the ID of the stream. 
    subject: detachable STRING_32 
      -- The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
    topic_links: detachable LIST [MESSAGES_BASE_TOPIC_LINKS] 
      -- Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
    submessages: detachable LIST [STRING_32] 
      -- Data used for certain experimental Zulip integrations. 
 	timestamp: INTEGER_32 
    	 -- The UNIX timestamp for when the message was sent, in UTC seconds. 
    type: detachable STRING_32 
      -- The type of the message: `stream` or `private`. 

feature -- Change Element  
 
    set_avatar_url (a_name: like avatar_url)
        -- Set 'avatar_url' with 'a_name'.
      do
        avatar_url := a_name
      ensure
        avatar_url_set: avatar_url = a_name		
      end

    set_client (a_name: like client)
        -- Set 'client' with 'a_name'.
      do
        client := a_name
      ensure
        client_set: client = a_name		
      end

    set_content (a_name: like content)
        -- Set 'content' with 'a_name'.
      do
        content := a_name
      ensure
        content_set: content = a_name		
      end

    set_content_type (a_name: like content_type)
        -- Set 'content_type' with 'a_name'.
      do
        content_type := a_name
      ensure
        content_type_set: content_type = a_name		
      end

    set_display_recipient (a_name: like display_recipient)
        -- Set 'display_recipient' with 'a_name'.
      do
        display_recipient := a_name
      ensure
        display_recipient_set: display_recipient = a_name		
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name		
      end

    set_is_me_message (a_name: like is_me_message)
        -- Set 'is_me_message' with 'a_name'.
      do
        is_me_message := a_name
      ensure
        is_me_message_set: is_me_message = a_name		
      end

    set_reactions (a_name: like reactions)
        -- Set 'reactions' with 'a_name'.
      do
        reactions := a_name
      ensure
        reactions_set: reactions = a_name		
      end

    set_recipient_id (a_name: like recipient_id)
        -- Set 'recipient_id' with 'a_name'.
      do
        recipient_id := a_name
      ensure
        recipient_id_set: recipient_id = a_name		
      end

    set_sender_email (a_name: like sender_email)
        -- Set 'sender_email' with 'a_name'.
      do
        sender_email := a_name
      ensure
        sender_email_set: sender_email = a_name		
      end

    set_sender_full_name (a_name: like sender_full_name)
        -- Set 'sender_full_name' with 'a_name'.
      do
        sender_full_name := a_name
      ensure
        sender_full_name_set: sender_full_name = a_name		
      end

    set_sender_id (a_name: like sender_id)
        -- Set 'sender_id' with 'a_name'.
      do
        sender_id := a_name
      ensure
        sender_id_set: sender_id = a_name		
      end

    set_sender_realm_str (a_name: like sender_realm_str)
        -- Set 'sender_realm_str' with 'a_name'.
      do
        sender_realm_str := a_name
      ensure
        sender_realm_str_set: sender_realm_str = a_name		
      end

    set_stream_id (a_name: like stream_id)
        -- Set 'stream_id' with 'a_name'.
      do
        stream_id := a_name
      ensure
        stream_id_set: stream_id = a_name		
      end

    set_subject (a_name: like subject)
        -- Set 'subject' with 'a_name'.
      do
        subject := a_name
      ensure
        subject_set: subject = a_name		
      end

    set_topic_links (a_name: like topic_links)
        -- Set 'topic_links' with 'a_name'.
      do
        topic_links := a_name
      ensure
        topic_links_set: topic_links = a_name		
      end

    set_submessages (a_name: like submessages)
        -- Set 'submessages' with 'a_name'.
      do
        submessages := a_name
      ensure
        submessages_set: submessages = a_name		
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name		
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name		
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MESSAGES_BASE%N")
        if attached avatar_url as l_avatar_url then
          Result.append ("%Navatar_url:")
          Result.append (l_avatar_url.out)
          Result.append ("%N")    
        end  
        if attached client as l_client then
          Result.append ("%Nclient:")
          Result.append (l_client.out)
          Result.append ("%N")    
        end  
        if attached content as l_content then
          Result.append ("%Ncontent:")
          Result.append (l_content.out)
          Result.append ("%N")    
        end  
        if attached content_type as l_content_type then
          Result.append ("%Ncontent_type:")
          Result.append (l_content_type.out)
          Result.append ("%N")    
        end  
        if attached display_recipient as l_display_recipient then
          Result.append ("%Ndisplay_recipient:")
          Result.append (l_display_recipient.out)
          Result.append ("%N")    
        end  
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")    
        end  
        if attached is_me_message as l_is_me_message then
          Result.append ("%Nis_me_message:")
          Result.append (l_is_me_message.out)
          Result.append ("%N")    
        end  
        if attached reactions as l_reactions then
          across l_reactions as ic loop
            Result.append ("%N reactions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached recipient_id as l_recipient_id then
          Result.append ("%Nrecipient_id:")
          Result.append (l_recipient_id.out)
          Result.append ("%N")    
        end  
        if attached sender_email as l_sender_email then
          Result.append ("%Nsender_email:")
          Result.append (l_sender_email.out)
          Result.append ("%N")    
        end  
        if attached sender_full_name as l_sender_full_name then
          Result.append ("%Nsender_full_name:")
          Result.append (l_sender_full_name.out)
          Result.append ("%N")    
        end  
        if attached sender_id as l_sender_id then
          Result.append ("%Nsender_id:")
          Result.append (l_sender_id.out)
          Result.append ("%N")    
        end  
        if attached sender_realm_str as l_sender_realm_str then
          Result.append ("%Nsender_realm_str:")
          Result.append (l_sender_realm_str.out)
          Result.append ("%N")    
        end  
        if attached stream_id as l_stream_id then
          Result.append ("%Nstream_id:")
          Result.append (l_stream_id.out)
          Result.append ("%N")    
        end  
        if attached subject as l_subject then
          Result.append ("%Nsubject:")
          Result.append (l_subject.out)
          Result.append ("%N")    
        end  
        if attached topic_links as l_topic_links then
          across l_topic_links as ic loop
            Result.append ("%N topic_links:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached submessages as l_submessages then
          across l_submessages as ic loop
            Result.append ("%N submessages:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")    
        end  
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")    
        end  
      end
end


