/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.CodedError
import org.openapitools.client.model.JsonError
import org.openapitools.client.model.JsonSuccess
import org.openapitools.client.model.JsonSuccessBase
import org.openapitools.client.model.NonExistingStreamError
import org.openapitools.client.model.OneOfobjectobject
import org.openapitools.client.model.OneOfstringinteger
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class StreamsApi(
  val defBasePath: String = "https://example.zulipchat.com/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new StreamsApiAsyncHelper(client, config)

  /**
   * Archive a stream
   * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return JsonSuccess
   */
  def archiveStream(streamId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(archiveStreamAsync(streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Archive a stream asynchronously
   * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return Future(JsonSuccess)
   */
  def archiveStreamAsync(streamId: Integer): Future[JsonSuccess] = {
      helper.archiveStream(streamId)
  }

  /**
   * Create BigBlueButton video call
   * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
   *
   * @return JsonSuccessBase
   */
  def createBigBlueButtonVideoCall(): Option[JsonSuccessBase] = {
    val await = Try(Await.result(createBigBlueButtonVideoCallAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create BigBlueButton video call asynchronously
   * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
   *
   * @return Future(JsonSuccessBase)
   */
  def createBigBlueButtonVideoCallAsync(): Future[JsonSuccessBase] = {
      helper.createBigBlueButtonVideoCall()
  }

  /**
   * Delete a topic
   * Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
   *
   * @param streamId The ID of the stream to access.  
   * @param topicName The name of the topic to delete.  
   * @return JsonSuccess
   */
  def deleteTopic(streamId: Integer, topicName: String): Option[JsonSuccess] = {
    val await = Try(Await.result(deleteTopicAsync(streamId, topicName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a topic asynchronously
   * Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
   *
   * @param streamId The ID of the stream to access.  
   * @param topicName The name of the topic to delete.  
   * @return Future(JsonSuccess)
   */
  def deleteTopicAsync(streamId: Integer, topicName: String): Future[JsonSuccess] = {
      helper.deleteTopic(streamId, topicName)
  }

  /**
   * Get stream ID
   * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
   *
   * @param stream The name of the stream to access.  
   * @return JsonSuccessBase
   */
  def getStreamId(stream: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getStreamIdAsync(stream), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get stream ID asynchronously
   * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
   *
   * @param stream The name of the stream to access.  
   * @return Future(JsonSuccessBase)
   */
  def getStreamIdAsync(stream: String): Future[JsonSuccessBase] = {
      helper.getStreamId(stream)
  }

  /**
   * Get topics in a stream
   * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return JsonSuccessBase
   */
  def getStreamTopics(streamId: Integer): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getStreamTopicsAsync(streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get topics in a stream asynchronously
   * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return Future(JsonSuccessBase)
   */
  def getStreamTopicsAsync(streamId: Integer): Future[JsonSuccessBase] = {
      helper.getStreamTopics(streamId)
  }

  /**
   * Get all streams
   * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
   *
   * @param includePublic Include all public streams.  (optional, default to true)
   * @param includeWebPublic Include all web public streams.  (optional, default to false)
   * @param includeSubscribed Include all streams that the user is subscribed to.  (optional, default to true)
   * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
   * @param includeDefault Include all default streams for the user&#39;s realm.  (optional, default to false)
   * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getStreams(includePublic: Option[Boolean] = None, includeWebPublic: Option[Boolean] = None, includeSubscribed: Option[Boolean] = None, includeAllActive: Option[Boolean] = None, includeDefault: Option[Boolean] = None, includeOwnerSubscribed: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getStreamsAsync(includePublic, includeWebPublic, includeSubscribed, includeAllActive, includeDefault, includeOwnerSubscribed), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all streams asynchronously
   * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
   *
   * @param includePublic Include all public streams.  (optional, default to true)
   * @param includeWebPublic Include all web public streams.  (optional, default to false)
   * @param includeSubscribed Include all streams that the user is subscribed to.  (optional, default to true)
   * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
   * @param includeDefault Include all default streams for the user&#39;s realm.  (optional, default to false)
   * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getStreamsAsync(includePublic: Option[Boolean] = None, includeWebPublic: Option[Boolean] = None, includeSubscribed: Option[Boolean] = None, includeAllActive: Option[Boolean] = None, includeDefault: Option[Boolean] = None, includeOwnerSubscribed: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getStreams(includePublic, includeWebPublic, includeSubscribed, includeAllActive, includeDefault, includeOwnerSubscribed)
  }

  /**
   * Get the subscribers of a stream
   * Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return JsonSuccessBase
   */
  def getSubscribers(streamId: Integer): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getSubscribersAsync(streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the subscribers of a stream asynchronously
   * Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @return Future(JsonSuccessBase)
   */
  def getSubscribersAsync(streamId: Integer): Future[JsonSuccessBase] = {
      helper.getSubscribers(streamId)
  }

  /**
   * Get subscription status
   * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
   *
   * @param userId The target user&#39;s ID.  
   * @param streamId The ID of the stream to access.  
   * @return JsonSuccessBase
   */
  def getSubscriptionStatus(userId: Integer, streamId: Integer): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getSubscriptionStatusAsync(userId, streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get subscription status asynchronously
   * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
   *
   * @param userId The target user&#39;s ID.  
   * @param streamId The ID of the stream to access.  
   * @return Future(JsonSuccessBase)
   */
  def getSubscriptionStatusAsync(userId: Integer, streamId: Integer): Future[JsonSuccessBase] = {
      helper.getSubscriptionStatus(userId, streamId)
  }

  /**
   * Get subscribed streams
   * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
   *
   * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getSubscriptions(includeSubscribers: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getSubscriptionsAsync(includeSubscribers), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get subscribed streams asynchronously
   * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
   *
   * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getSubscriptionsAsync(includeSubscribers: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getSubscriptions(includeSubscribers)
  }

  /**
   * Topic muting
   * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
   *
   * @param topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  
   * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  
   * @param stream The name of the stream to access.  (optional)
   * @param streamId The ID of the stream to access.  (optional)
   * @return JsonSuccess
   */
  def muteTopic(topic: String, op: String, stream: Option[String] = None, streamId: Option[Integer] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(muteTopicAsync(topic, op, stream, streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Topic muting asynchronously
   * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
   *
   * @param topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  
   * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  
   * @param stream The name of the stream to access.  (optional)
   * @param streamId The ID of the stream to access.  (optional)
   * @return Future(JsonSuccess)
   */
  def muteTopicAsync(topic: String, op: String, stream: Option[String] = None, streamId: Option[Integer] = None): Future[JsonSuccess] = {
      helper.muteTopic(topic, op, stream, streamId)
  }

  /**
   * Subscribe to a stream
   * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
   *
   * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  
   * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() )
   * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
   * @param announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
   * @param inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
   * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
   * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
   * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
   * @return OneOfobjectobject
   */
  def subscribe(subscriptions: List[Any], principals: Option[List[OneOfstringinteger]] = None, authorizationErrorsFatal: Option[Boolean] = None, announce: Option[Boolean] = None, inviteOnly: Option[Boolean] = None, historyPublicToSubscribers: Option[Boolean] = None, streamPostPolicy: Option[Integer] = None, messageRetentionDays: Option[OneOfstringinteger] = None): Option[OneOfobjectobject] = {
    val await = Try(Await.result(subscribeAsync(subscriptions, principals, authorizationErrorsFatal, announce, inviteOnly, historyPublicToSubscribers, streamPostPolicy, messageRetentionDays), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Subscribe to a stream asynchronously
   * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
   *
   * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  
   * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() )
   * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
   * @param announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
   * @param inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
   * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
   * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
   * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
   * @return Future(OneOfobjectobject)
   */
  def subscribeAsync(subscriptions: List[Any], principals: Option[List[OneOfstringinteger]] = None, authorizationErrorsFatal: Option[Boolean] = None, announce: Option[Boolean] = None, inviteOnly: Option[Boolean] = None, historyPublicToSubscribers: Option[Boolean] = None, streamPostPolicy: Option[Integer] = None, messageRetentionDays: Option[OneOfstringinteger] = None): Future[OneOfobjectobject] = {
      helper.subscribe(subscriptions, principals, authorizationErrorsFatal, announce, inviteOnly, historyPublicToSubscribers, streamPostPolicy, messageRetentionDays)
  }

  /**
   * Unsubscribe from a stream
   * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
   *
   * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
   * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() )
   * @return JsonSuccessBase
   */
  def unsubscribe(subscriptions: List[String], principals: Option[List[OneOfstringinteger]] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(unsubscribeAsync(subscriptions, principals), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Unsubscribe from a stream asynchronously
   * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
   *
   * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
   * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional, default to new ListBuffer[OneOfstringinteger]() )
   * @return Future(JsonSuccessBase)
   */
  def unsubscribeAsync(subscriptions: List[String], principals: Option[List[OneOfstringinteger]] = None): Future[JsonSuccessBase] = {
      helper.unsubscribe(subscriptions, principals)
  }

  /**
   * Update a stream
   * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @param description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param isPrivate Change whether the stream is a private stream.  (optional)
   * @param isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
   * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
   * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
   * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
   * @return JsonSuccess
   */
  def updateStream(streamId: Integer, description: Option[String] = None, newName: Option[String] = None, isPrivate: Option[Boolean] = None, isAnnouncementOnly: Option[Boolean] = None, streamPostPolicy: Option[Integer] = None, historyPublicToSubscribers: Option[Boolean] = None, messageRetentionDays: Option[OneOfstringinteger] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(updateStreamAsync(streamId, description, newName, isPrivate, isAnnouncementOnly, streamPostPolicy, historyPublicToSubscribers, messageRetentionDays), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a stream asynchronously
   * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
   *
   * @param streamId The ID of the stream to access.  
   * @param description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param isPrivate Change whether the stream is a private stream.  (optional)
   * @param isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
   * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
   * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
   * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
   * @return Future(JsonSuccess)
   */
  def updateStreamAsync(streamId: Integer, description: Option[String] = None, newName: Option[String] = None, isPrivate: Option[Boolean] = None, isAnnouncementOnly: Option[Boolean] = None, streamPostPolicy: Option[Integer] = None, historyPublicToSubscribers: Option[Boolean] = None, messageRetentionDays: Option[OneOfstringinteger] = None): Future[JsonSuccess] = {
      helper.updateStream(streamId, description, newName, isPrivate, isAnnouncementOnly, streamPostPolicy, historyPublicToSubscribers, messageRetentionDays)
  }

  /**
   * Update subscription settings
   * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
   *
   * @param subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
   * @return JsonSuccessBase
   */
  def updateSubscriptionSettings(subscriptionData: List[Any]): Option[JsonSuccessBase] = {
    val await = Try(Await.result(updateSubscriptionSettingsAsync(subscriptionData), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update subscription settings asynchronously
   * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
   *
   * @param subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
   * @return Future(JsonSuccessBase)
   */
  def updateSubscriptionSettingsAsync(subscriptionData: List[Any]): Future[JsonSuccessBase] = {
      helper.updateSubscriptionSettings(subscriptionData)
  }

  /**
   * Update subscriptions
   * Update which streams you are are subscribed to. 
   *
   * @param delete A list of stream names to unsubscribe from.  (optional, default to new ListBuffer[String]() )
   * @param add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional, default to new ListBuffer[Any]() )
   * @return JsonSuccessBase
   */
  def updateSubscriptions(delete: Option[List[String]] = None, add: Option[List[Any]] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(updateSubscriptionsAsync(delete, add), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update subscriptions asynchronously
   * Update which streams you are are subscribed to. 
   *
   * @param delete A list of stream names to unsubscribe from.  (optional, default to new ListBuffer[String]() )
   * @param add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional, default to new ListBuffer[Any]() )
   * @return Future(JsonSuccessBase)
   */
  def updateSubscriptionsAsync(delete: Option[List[String]] = None, add: Option[List[Any]] = None): Future[JsonSuccessBase] = {
      helper.updateSubscriptions(delete, add)
  }

}

class StreamsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def archiveStream(streamId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/streams/{stream_id}")
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def createBigBlueButtonVideoCall()(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/calls/bigbluebutton/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def deleteTopic(streamId: Integer,
    topicName: String)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/streams/{stream_id}/delete_topic")
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (topicName == null) throw new Exception("Missing required parameter 'topicName' when calling StreamsApi->deleteTopic")

    queryParams += "topic_name" -> topicName.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getStreamId(stream: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/get_stream_id"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (stream == null) throw new Exception("Missing required parameter 'stream' when calling StreamsApi->getStreamId")

    queryParams += "stream" -> stream.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getStreamTopics(streamId: Integer)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me/{stream_id}/topics")
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getStreams(includePublic: Option[Boolean] = None,
    includeWebPublic: Option[Boolean] = None,
    includeSubscribed: Option[Boolean] = None,
    includeAllActive: Option[Boolean] = None,
    includeDefault: Option[Boolean] = None,
    includeOwnerSubscribed: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/streams"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    includePublic match {
      case Some(param) => queryParams += "include_public" -> param.toString
      case _ => queryParams
    }
    includeWebPublic match {
      case Some(param) => queryParams += "include_web_public" -> param.toString
      case _ => queryParams
    }
    includeSubscribed match {
      case Some(param) => queryParams += "include_subscribed" -> param.toString
      case _ => queryParams
    }
    includeAllActive match {
      case Some(param) => queryParams += "include_all_active" -> param.toString
      case _ => queryParams
    }
    includeDefault match {
      case Some(param) => queryParams += "include_default" -> param.toString
      case _ => queryParams
    }
    includeOwnerSubscribed match {
      case Some(param) => queryParams += "include_owner_subscribed" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getSubscribers(streamId: Integer)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/streams/{stream_id}/members")
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getSubscriptionStatus(userId: Integer,
    streamId: Integer)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/subscriptions/{stream_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString)
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getSubscriptions(includeSubscribers: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    includeSubscribers match {
      case Some(param) => queryParams += "include_subscribers" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def muteTopic(topic: String,
    op: String,
    stream: Option[String] = None,
    streamId: Option[Integer] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions/muted_topics"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (topic == null) throw new Exception("Missing required parameter 'topic' when calling StreamsApi->muteTopic")

    if (op == null) throw new Exception("Missing required parameter 'op' when calling StreamsApi->muteTopic")

    stream match {
      case Some(param) => queryParams += "stream" -> param.toString
      case _ => queryParams
    }
    streamId match {
      case Some(param) => queryParams += "stream_id" -> param.toString
      case _ => queryParams
    }
    queryParams += "topic" -> topic.toString
    queryParams += "op" -> op.toString

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def subscribe(subscriptions: List[Any],
    principals: Option[List[OneOfstringinteger]] = None,
    authorizationErrorsFatal: Option[Boolean] = None,
    announce: Option[Boolean] = None,
    inviteOnly: Option[Boolean] = None,
    historyPublicToSubscribers: Option[Boolean] = None,
    streamPostPolicy: Option[Integer] = None,
    messageRetentionDays: Option[OneOfstringinteger] = None
    )(implicit reader: ClientResponseReader[OneOfobjectobject]): Future[OneOfobjectobject] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriptions == null) throw new Exception("Missing required parameter 'subscriptions' when calling StreamsApi->subscribe")
    queryParams += "subscriptions" -> subscriptions.toString
    principals match {
      case Some(param) => queryParams += "principals" -> param.toString
      case _ => queryParams
    }
    authorizationErrorsFatal match {
      case Some(param) => queryParams += "authorization_errors_fatal" -> param.toString
      case _ => queryParams
    }
    announce match {
      case Some(param) => queryParams += "announce" -> param.toString
      case _ => queryParams
    }
    inviteOnly match {
      case Some(param) => queryParams += "invite_only" -> param.toString
      case _ => queryParams
    }
    historyPublicToSubscribers match {
      case Some(param) => queryParams += "history_public_to_subscribers" -> param.toString
      case _ => queryParams
    }
    streamPostPolicy match {
      case Some(param) => queryParams += "stream_post_policy" -> param.toString
      case _ => queryParams
    }
    messageRetentionDays match {
      case Some(param) => queryParams += "message_retention_days" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def unsubscribe(subscriptions: List[String],
    principals: Option[List[OneOfstringinteger]] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriptions == null) throw new Exception("Missing required parameter 'subscriptions' when calling StreamsApi->unsubscribe")
    queryParams += "subscriptions" -> subscriptions.toString
    principals match {
      case Some(param) => queryParams += "principals" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateStream(streamId: Integer,
    description: Option[String] = None,
    newName: Option[String] = None,
    isPrivate: Option[Boolean] = None,
    isAnnouncementOnly: Option[Boolean] = None,
    streamPostPolicy: Option[Integer] = None,
    historyPublicToSubscribers: Option[Boolean] = None,
    messageRetentionDays: Option[OneOfstringinteger] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/streams/{stream_id}")
      replaceAll("\\{" + "stream_id" + "\\}", streamId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    description match {
      case Some(param) => queryParams += "description" -> param.toString
      case _ => queryParams
    }
    newName match {
      case Some(param) => queryParams += "new_name" -> param.toString
      case _ => queryParams
    }
    isPrivate match {
      case Some(param) => queryParams += "is_private" -> param.toString
      case _ => queryParams
    }
    isAnnouncementOnly match {
      case Some(param) => queryParams += "is_announcement_only" -> param.toString
      case _ => queryParams
    }
    streamPostPolicy match {
      case Some(param) => queryParams += "stream_post_policy" -> param.toString
      case _ => queryParams
    }
    historyPublicToSubscribers match {
      case Some(param) => queryParams += "history_public_to_subscribers" -> param.toString
      case _ => queryParams
    }
    messageRetentionDays match {
      case Some(param) => queryParams += "message_retention_days" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateSubscriptionSettings(subscriptionData: List[Any])(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions/properties"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (subscriptionData == null) throw new Exception("Missing required parameter 'subscriptionData' when calling StreamsApi->updateSubscriptionSettings")
    queryParams += "subscription_data" -> subscriptionData.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateSubscriptions(delete: Option[List[String]] = None,
    add: Option[List[Any]] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me/subscriptions"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    delete match {
      case Some(param) => queryParams += "delete" -> param.toString
      case _ => queryParams
    }
    add match {
      case Some(param) => queryParams += "add" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
