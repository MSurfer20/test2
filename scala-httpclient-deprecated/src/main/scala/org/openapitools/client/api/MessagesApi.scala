/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.AnyType
import org.openapitools.client.model.CodedError
import java.io.File
import org.openapitools.client.model.InvalidMessageError
import org.openapitools.client.model.JsonSuccess
import org.openapitools.client.model.JsonSuccessBase
import org.openapitools.client.model.OneOfobjectobject
import org.openapitools.client.model.OneOfstringinteger
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class MessagesApi(
  val defBasePath: String = "https://example.zulipchat.com/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new MessagesApiAsyncHelper(client, config)

  /**
   * Add an emoji reaction
   * Add an [emoji reaction](/help/emoji-reactions) to a message.  &#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
   *
   * @param messageId The target message&#39;s ID.  
   * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  
   * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
   * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
   * @return JsonSuccess
   */
  def addReaction(messageId: Integer, emojiName: String, emojiCode: Option[String] = None, reactionType: Option[String] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(addReactionAsync(messageId, emojiName, emojiCode, reactionType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Add an emoji reaction asynchronously
   * Add an [emoji reaction](/help/emoji-reactions) to a message.  &#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
   *
   * @param messageId The target message&#39;s ID.  
   * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  
   * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
   * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
   * @return Future(JsonSuccess)
   */
  def addReactionAsync(messageId: Integer, emojiName: String, emojiCode: Option[String] = None, reactionType: Option[String] = None): Future[JsonSuccess] = {
      helper.addReaction(messageId, emojiName, emojiCode, reactionType)
  }

  /**
   * Check if messages match a narrow
   * Check whether a set of messages match a [narrow](/api/construct-narrow).  &#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a &#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message object identical to how a &#x60;GET /messages&#x60; for the current narrow would have returned the message. 
   *
   * @param msgIds List of IDs for the messages to check. 
   * @param narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). 
   * @return AnyType
   */
  def checkMessagesMatchNarrow(msgIds: List[Integer], narrow: List[Any]): Option[AnyType] = {
    val await = Try(Await.result(checkMessagesMatchNarrowAsync(msgIds, narrow), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Check if messages match a narrow asynchronously
   * Check whether a set of messages match a [narrow](/api/construct-narrow).  &#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a &#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message object identical to how a &#x60;GET /messages&#x60; for the current narrow would have returned the message. 
   *
   * @param msgIds List of IDs for the messages to check. 
   * @param narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). 
   * @return Future(AnyType)
   */
  def checkMessagesMatchNarrowAsync(msgIds: List[Integer], narrow: List[Any]): Future[AnyType] = {
      helper.checkMessagesMatchNarrow(msgIds, narrow)
  }

  /**
   * Delete a message
   * Permanently delete a message.  &#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
   *
   * @param messageId The target message&#39;s ID.  
   * @return JsonSuccess
   */
  def deleteMessage(messageId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(deleteMessageAsync(messageId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a message asynchronously
   * Permanently delete a message.  &#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
   *
   * @param messageId The target message&#39;s ID.  
   * @return Future(JsonSuccess)
   */
  def deleteMessageAsync(messageId: Integer): Future[JsonSuccess] = {
      helper.deleteMessage(messageId)
  }

  /**
   * Get public temporary URL
   * Get a temporary URL for access to the file that doesn&#39;t require authentication. 
   *
   * @param realmIdStr The realm id.  
   * @param filename Path to the URL.  
   * @return JsonSuccessBase
   */
  def getFileTemporaryUrl(realmIdStr: Integer, filename: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getFileTemporaryUrlAsync(realmIdStr, filename), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get public temporary URL asynchronously
   * Get a temporary URL for access to the file that doesn&#39;t require authentication. 
   *
   * @param realmIdStr The realm id.  
   * @param filename Path to the URL.  
   * @return Future(JsonSuccessBase)
   */
  def getFileTemporaryUrlAsync(realmIdStr: Integer, filename: String): Future[JsonSuccessBase] = {
      helper.getFileTemporaryUrl(realmIdStr, filename)
  }

  /**
   * Get a message&#39;s edit history
   * Fetch the message edit history of a previously edited message.  &#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
   *
   * @param messageId The target message&#39;s ID.  
   * @return JsonSuccessBase
   */
  def getMessageHistory(messageId: Integer): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getMessageHistoryAsync(messageId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a message&#39;s edit history asynchronously
   * Fetch the message edit history of a previously edited message.  &#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
   *
   * @param messageId The target message&#39;s ID.  
   * @return Future(JsonSuccessBase)
   */
  def getMessageHistoryAsync(messageId: Integer): Future[JsonSuccessBase] = {
      helper.getMessageHistory(messageId)
  }

  /**
   * Get messages
   * Fetch message history from a Zulip server.  &#x60;GET {{ api_url }}/v1/messages&#x60;  This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip&#39;s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user&#39;s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an &#x60;anchor&#x60; message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.  We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
   *
   * @param numBefore The number of messages with IDs less than the anchor to retrieve.  
   * @param numAfter The number of messages with IDs greater than the anchor to retrieve.  
   * @param anchor Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value).  (optional)
   * @param narrow The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow).  (optional, default to [])
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param applyMarkdown If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered.  (optional, default to true)
   * @param useFirstUnreadAnchor Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getMessages(numBefore: Integer, numAfter: Integer, anchor: Option[OneOfstringinteger] = None, narrow: Option[List[Any]] = None, clientGravatar: Option[Boolean] = None, applyMarkdown: Option[Boolean] = None, useFirstUnreadAnchor: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getMessagesAsync(numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get messages asynchronously
   * Fetch message history from a Zulip server.  &#x60;GET {{ api_url }}/v1/messages&#x60;  This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip&#39;s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user&#39;s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an &#x60;anchor&#x60; message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.  We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
   *
   * @param numBefore The number of messages with IDs less than the anchor to retrieve.  
   * @param numAfter The number of messages with IDs greater than the anchor to retrieve.  
   * @param anchor Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value).  (optional)
   * @param narrow The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow).  (optional, default to [])
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param applyMarkdown If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered.  (optional, default to true)
   * @param useFirstUnreadAnchor Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getMessagesAsync(numBefore: Integer, numAfter: Integer, anchor: Option[OneOfstringinteger] = None, narrow: Option[List[Any]] = None, clientGravatar: Option[Boolean] = None, applyMarkdown: Option[Boolean] = None, useFirstUnreadAnchor: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getMessages(numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor)
  }

  /**
   * Get a message&#39;s raw Markdown
   * Get the raw content of a message.  &#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message&#39;s raw Markdown (e.g. for pre-filling a message-editing UI). 
   *
   * @param messageId The target message&#39;s ID.  
   * @return JsonSuccessBase
   */
  def getRawMessage(messageId: Integer): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getRawMessageAsync(messageId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a message&#39;s raw Markdown asynchronously
   * Get the raw content of a message.  &#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message&#39;s raw Markdown (e.g. for pre-filling a message-editing UI). 
   *
   * @param messageId The target message&#39;s ID.  
   * @return Future(JsonSuccessBase)
   */
  def getRawMessageAsync(messageId: Integer): Future[JsonSuccessBase] = {
      helper.getRawMessage(messageId)
  }

  /**
   * Mark all messages as read
   * Marks all of the current user&#39;s unread messages as read.  &#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60; 
   *
   * @return JsonSuccess
   */
  def markAllAsRead(): Option[JsonSuccess] = {
    val await = Try(Await.result(markAllAsReadAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Mark all messages as read asynchronously
   * Marks all of the current user&#39;s unread messages as read.  &#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60; 
   *
   * @return Future(JsonSuccess)
   */
  def markAllAsReadAsync(): Future[JsonSuccess] = {
      helper.markAllAsRead()
  }

  /**
   * Mark messages in a stream as read
   * Mark all the unread messages in a stream as read. 
   *
   * @param streamId The ID of the stream to access.  
   * @return JsonSuccess
   */
  def markStreamAsRead(streamId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(markStreamAsReadAsync(streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Mark messages in a stream as read asynchronously
   * Mark all the unread messages in a stream as read. 
   *
   * @param streamId The ID of the stream to access.  
   * @return Future(JsonSuccess)
   */
  def markStreamAsReadAsync(streamId: Integer): Future[JsonSuccess] = {
      helper.markStreamAsRead(streamId)
  }

  /**
   * Mark messages in a topic as read
   * Mark all the unread messages in a topic as read. 
   *
   * @param streamId The ID of the stream to access.  
   * @param topicName The name of the topic whose messages should be marked as read.  
   * @return JsonSuccess
   */
  def markTopicAsRead(streamId: Integer, topicName: String): Option[JsonSuccess] = {
    val await = Try(Await.result(markTopicAsReadAsync(streamId, topicName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Mark messages in a topic as read asynchronously
   * Mark all the unread messages in a topic as read. 
   *
   * @param streamId The ID of the stream to access.  
   * @param topicName The name of the topic whose messages should be marked as read.  
   * @return Future(JsonSuccess)
   */
  def markTopicAsReadAsync(streamId: Integer, topicName: String): Future[JsonSuccess] = {
      helper.markTopicAsRead(streamId, topicName)
  }

  /**
   * Remove an emoji reaction
   * Remove an [emoji reaction](/help/emoji-reactions) from a message.  &#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
   *
   * @param messageId The target message&#39;s ID.  
   * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (optional)
   * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
   * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
   * @return JsonSuccess
   */
  def removeReaction(messageId: Integer, emojiName: Option[String] = None, emojiCode: Option[String] = None, reactionType: Option[String] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(removeReactionAsync(messageId, emojiName, emojiCode, reactionType), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Remove an emoji reaction asynchronously
   * Remove an [emoji reaction](/help/emoji-reactions) from a message.  &#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
   *
   * @param messageId The target message&#39;s ID.  
   * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (optional)
   * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
   * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
   * @return Future(JsonSuccess)
   */
  def removeReactionAsync(messageId: Integer, emojiName: Option[String] = None, emojiCode: Option[String] = None, reactionType: Option[String] = None): Future[JsonSuccess] = {
      helper.removeReaction(messageId, emojiName, emojiCode, reactionType)
  }

  /**
   * Render message
   * Render a message to HTML.  &#x60;POST {{ api_url }}/v1/messages/render&#x60; 
   *
   * @param content The content of the message. Maximum message size of 10000 bytes.  
   * @return JsonSuccessBase
   */
  def renderMessage(content: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(renderMessageAsync(content), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Render message asynchronously
   * Render a message to HTML.  &#x60;POST {{ api_url }}/v1/messages/render&#x60; 
   *
   * @param content The content of the message. Maximum message size of 10000 bytes.  
   * @return Future(JsonSuccessBase)
   */
  def renderMessageAsync(content: String): Future[JsonSuccessBase] = {
      helper.renderMessage(content)
  }

  /**
   * Send a message
   * Send a stream or a private message.  &#x60;POST {{ api_url }}/v1/messages&#x60; 
   *
   * @param `type` The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message.  
   * @param to For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.  
   * @param content The content of the message. Maximum message size of 10000 bytes.  
   * @param topic The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
   * @param queueId For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device).  (optional)
   * @param localId For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description.  (optional)
   * @return JsonSuccessBase
   */
  def sendMessage(`type`: String, to: List[Integer], content: String, topic: Option[String] = None, queueId: Option[String] = None, localId: Option[String] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(sendMessageAsync(`type`, to, content, topic, queueId, localId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Send a message asynchronously
   * Send a stream or a private message.  &#x60;POST {{ api_url }}/v1/messages&#x60; 
   *
   * @param `type` The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message.  
   * @param to For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.  
   * @param content The content of the message. Maximum message size of 10000 bytes.  
   * @param topic The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
   * @param queueId For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device).  (optional)
   * @param localId For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description.  (optional)
   * @return Future(JsonSuccessBase)
   */
  def sendMessageAsync(`type`: String, to: List[Integer], content: String, topic: Option[String] = None, queueId: Option[String] = None, localId: Option[String] = None): Future[JsonSuccessBase] = {
      helper.sendMessage(`type`, to, content, topic, queueId, localId)
  }

  /**
   * Edit a message
   * Edit/update the content or topic of a message.  &#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;  &#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to &#x60;✔ {original_topic}&#x60;.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
   *
   * @param messageId The target message&#39;s ID.  
   * @param topic The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
   * @param propagateMode Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic.  (optional, default to change_one)
   * @param sendNotificationToOldThread Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
   * @param sendNotificationToNewThread Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
   * @param content The content of the message. Maximum message size of 10000 bytes.  (optional)
   * @param streamId The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message.  (optional)
   * @return JsonSuccess
   */
  def updateMessage(messageId: Integer, topic: Option[String] = None, propagateMode: Option[String] = None, sendNotificationToOldThread: Option[Boolean] = None, sendNotificationToNewThread: Option[Boolean] = None, content: Option[String] = None, streamId: Option[Integer] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(updateMessageAsync(messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Edit a message asynchronously
   * Edit/update the content or topic of a message.  &#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;  &#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to &#x60;✔ {original_topic}&#x60;.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
   *
   * @param messageId The target message&#39;s ID.  
   * @param topic The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
   * @param propagateMode Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic.  (optional, default to change_one)
   * @param sendNotificationToOldThread Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
   * @param sendNotificationToNewThread Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
   * @param content The content of the message. Maximum message size of 10000 bytes.  (optional)
   * @param streamId The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message.  (optional)
   * @return Future(JsonSuccess)
   */
  def updateMessageAsync(messageId: Integer, topic: Option[String] = None, propagateMode: Option[String] = None, sendNotificationToOldThread: Option[Boolean] = None, sendNotificationToNewThread: Option[Boolean] = None, content: Option[String] = None, streamId: Option[Integer] = None): Future[JsonSuccess] = {
      helper.updateMessage(messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId)
  }

  /**
   * Update personal message flags
   * Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60; on a collection of message IDs.  &#x60;POST {{ api_url }}/v1/messages/flags&#x60;  For updating the &#x60;read&#x60; flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
   *
   * @param messages An array containing the IDs of the target messages.  
   * @param op Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it.  
   * @param flag The flag that should be added/removed.  
   * @return JsonSuccessBase
   */
  def updateMessageFlags(messages: List[Integer], op: String, flag: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(updateMessageFlagsAsync(messages, op, flag), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update personal message flags asynchronously
   * Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60; on a collection of message IDs.  &#x60;POST {{ api_url }}/v1/messages/flags&#x60;  For updating the &#x60;read&#x60; flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
   *
   * @param messages An array containing the IDs of the target messages.  
   * @param op Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it.  
   * @param flag The flag that should be added/removed.  
   * @return Future(JsonSuccessBase)
   */
  def updateMessageFlagsAsync(messages: List[Integer], op: String, flag: String): Future[JsonSuccessBase] = {
      helper.updateMessageFlags(messages, op, flag)
  }

  /**
   * Upload a file
   * Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
   *
   * @param filename  (optional)
   * @return JsonSuccessBase
   */
  def uploadFile(filename: Option[File] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(uploadFileAsync(filename), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Upload a file asynchronously
   * Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
   *
   * @param filename  (optional)
   * @return Future(JsonSuccessBase)
   */
  def uploadFileAsync(filename: Option[File] = None): Future[JsonSuccessBase] = {
      helper.uploadFile(filename)
  }

}

class MessagesApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addReaction(messageId: Integer,
    emojiName: String,
    emojiCode: Option[String] = None,
    reactionType: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}/reactions")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (emojiName == null) throw new Exception("Missing required parameter 'emojiName' when calling MessagesApi->addReaction")

    queryParams += "emoji_name" -> emojiName.toString
    emojiCode match {
      case Some(param) => queryParams += "emoji_code" -> param.toString
      case _ => queryParams
    }
    reactionType match {
      case Some(param) => queryParams += "reaction_type" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def checkMessagesMatchNarrow(msgIds: List[Integer],
    narrow: List[Any])(implicit reader: ClientResponseReader[AnyType]): Future[AnyType] = {
    // create path and map variables
    val path = (addFmt("/messages/matches_narrow"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (msgIds == null) throw new Exception("Missing required parameter 'msgIds' when calling MessagesApi->checkMessagesMatchNarrow")
    if (narrow == null) throw new Exception("Missing required parameter 'narrow' when calling MessagesApi->checkMessagesMatchNarrow")
    queryParams += "msg_ids" -> msgIds.toString
    queryParams += "narrow" -> narrow.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def deleteMessage(messageId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getFileTemporaryUrl(realmIdStr: Integer,
    filename: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/user_uploads/{realm_id_str}/{filename}")
      replaceAll("\\{" + "realm_id_str" + "\\}", realmIdStr.toString)
      replaceAll("\\{" + "filename" + "\\}", filename.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (filename == null) throw new Exception("Missing required parameter 'filename' when calling MessagesApi->getFileTemporaryUrl")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getMessageHistory(messageId: Integer)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}/history")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getMessages(numBefore: Integer,
    numAfter: Integer,
    anchor: Option[OneOfstringinteger] = None,
    narrow: Option[List[Any]] = None,
    clientGravatar: Option[Boolean] = None,
    applyMarkdown: Option[Boolean] = None,
    useFirstUnreadAnchor: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    anchor match {
      case Some(param) => queryParams += "anchor" -> param.toString
      case _ => queryParams
    }
    queryParams += "num_before" -> numBefore.toString
    queryParams += "num_after" -> numAfter.toString
    narrow match {
      case Some(param) => queryParams += "narrow" -> param.toString
      case _ => queryParams
    }
    clientGravatar match {
      case Some(param) => queryParams += "client_gravatar" -> param.toString
      case _ => queryParams
    }
    applyMarkdown match {
      case Some(param) => queryParams += "apply_markdown" -> param.toString
      case _ => queryParams
    }
    useFirstUnreadAnchor match {
      case Some(param) => queryParams += "use_first_unread_anchor" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getRawMessage(messageId: Integer)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def markAllAsRead()(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/mark_all_as_read"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def markStreamAsRead(streamId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/mark_stream_as_read"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    queryParams += "stream_id" -> streamId.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def markTopicAsRead(streamId: Integer,
    topicName: String)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/mark_topic_as_read"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (topicName == null) throw new Exception("Missing required parameter 'topicName' when calling MessagesApi->markTopicAsRead")

    queryParams += "stream_id" -> streamId.toString
    queryParams += "topic_name" -> topicName.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def removeReaction(messageId: Integer,
    emojiName: Option[String] = None,
    emojiCode: Option[String] = None,
    reactionType: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}/reactions")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    emojiName match {
      case Some(param) => queryParams += "emoji_name" -> param.toString
      case _ => queryParams
    }
    emojiCode match {
      case Some(param) => queryParams += "emoji_code" -> param.toString
      case _ => queryParams
    }
    reactionType match {
      case Some(param) => queryParams += "reaction_type" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def renderMessage(content: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages/render"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (content == null) throw new Exception("Missing required parameter 'content' when calling MessagesApi->renderMessage")

    queryParams += "content" -> content.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def sendMessage(`type`: String,
    to: List[Integer],
    content: String,
    topic: Option[String] = None,
    queueId: Option[String] = None,
    localId: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (`type` == null) throw new Exception("Missing required parameter '`type`' when calling MessagesApi->sendMessage")

    if (to == null) throw new Exception("Missing required parameter 'to' when calling MessagesApi->sendMessage")
    if (content == null) throw new Exception("Missing required parameter 'content' when calling MessagesApi->sendMessage")

    queryParams += "type" -> `type`.toString
    queryParams += "to" -> to.toString
    queryParams += "content" -> content.toString
    topic match {
      case Some(param) => queryParams += "topic" -> param.toString
      case _ => queryParams
    }
    queueId match {
      case Some(param) => queryParams += "queue_id" -> param.toString
      case _ => queryParams
    }
    localId match {
      case Some(param) => queryParams += "local_id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateMessage(messageId: Integer,
    topic: Option[String] = None,
    propagateMode: Option[String] = None,
    sendNotificationToOldThread: Option[Boolean] = None,
    sendNotificationToNewThread: Option[Boolean] = None,
    content: Option[String] = None,
    streamId: Option[Integer] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/messages/{message_id}")
      replaceAll("\\{" + "message_id" + "\\}", messageId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    topic match {
      case Some(param) => queryParams += "topic" -> param.toString
      case _ => queryParams
    }
    propagateMode match {
      case Some(param) => queryParams += "propagate_mode" -> param.toString
      case _ => queryParams
    }
    sendNotificationToOldThread match {
      case Some(param) => queryParams += "send_notification_to_old_thread" -> param.toString
      case _ => queryParams
    }
    sendNotificationToNewThread match {
      case Some(param) => queryParams += "send_notification_to_new_thread" -> param.toString
      case _ => queryParams
    }
    content match {
      case Some(param) => queryParams += "content" -> param.toString
      case _ => queryParams
    }
    streamId match {
      case Some(param) => queryParams += "stream_id" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateMessageFlags(messages: List[Integer],
    op: String,
    flag: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/messages/flags"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (messages == null) throw new Exception("Missing required parameter 'messages' when calling MessagesApi->updateMessageFlags")
    if (op == null) throw new Exception("Missing required parameter 'op' when calling MessagesApi->updateMessageFlags")

    if (flag == null) throw new Exception("Missing required parameter 'flag' when calling MessagesApi->updateMessageFlags")

    queryParams += "messages" -> messages.toString
    queryParams += "op" -> op.toString
    queryParams += "flag" -> flag.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def uploadFile(filename: Option[File] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/user_uploads"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
