/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api

import java.text.SimpleDateFormat

import org.openapitools.client.model.AnyType
import org.openapitools.client.model.CodedError
import org.openapitools.client.model.JsonError
import org.openapitools.client.model.JsonSuccess
import org.openapitools.client.model.JsonSuccessBase
import org.openapitools.client.model.OneOfobjectobject
import org.openapitools.client.model.OneOfobjectobjectobject
import org.openapitools.client.{ApiInvoker, ApiException}

import collection.mutable
import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart
import com.wordnik.swagger.client._
import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._
import javax.ws.rs.core.Response.Status.Family

import java.net.URI
import java.io.File
import java.util.Date
import java.util.TimeZone
import javax.ws.rs.core.{MediaType, Response}

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.collection.mutable.HashMap
import scala.util.{Failure, Success, Try}

import org.json4s._

class UsersApi(
  val defBasePath: String = "https://example.zulipchat.com/api/v1",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UsersApiAsyncHelper(client, config)

  /**
   * Create a user
   * {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; 
   *
   * @param email The email address of the new user.  
   * @param password The password of the new user.  
   * @param fullName The full name of the new user.  
   * @return JsonSuccessBase
   */
  def createUser(email: String, password: String, fullName: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(createUserAsync(email, password, fullName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a user asynchronously
   * {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; 
   *
   * @param email The email address of the new user.  
   * @param password The password of the new user.  
   * @param fullName The full name of the new user.  
   * @return Future(JsonSuccessBase)
   */
  def createUserAsync(email: String, password: String, fullName: String): Future[JsonSuccessBase] = {
      helper.createUser(email, password, fullName)
  }

  /**
   * Create a user group
   * Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
   *
   * @param name The name of the user group.  
   * @param description The description of the user group.  
   * @param members An array containing the user IDs of the initial members for the new user group.  
   * @return JsonSuccess
   */
  def createUserGroup(name: String, description: String, members: List[Integer]): Option[JsonSuccess] = {
    val await = Try(Await.result(createUserGroupAsync(name, description, members), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a user group asynchronously
   * Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
   *
   * @param name The name of the user group.  
   * @param description The description of the user group.  
   * @param members An array containing the user IDs of the initial members for the new user group.  
   * @return Future(JsonSuccess)
   */
  def createUserGroupAsync(name: String, description: String, members: List[Integer]): Future[JsonSuccess] = {
      helper.createUserGroup(name, description, members)
  }

  /**
   * Deactivate own user
   * Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
   *
   * @return JsonSuccess
   */
  def deactivateOwnUser(): Option[JsonSuccess] = {
    val await = Try(Await.result(deactivateOwnUserAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deactivate own user asynchronously
   * Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
   *
   * @return Future(JsonSuccess)
   */
  def deactivateOwnUserAsync(): Future[JsonSuccess] = {
      helper.deactivateOwnUser()
  }

  /**
   * Deactivate a user
   * [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; 
   *
   * @param userId The target user&#39;s ID.  
   * @return JsonSuccess
   */
  def deactivateUser(userId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(deactivateUserAsync(userId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deactivate a user asynchronously
   * [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; 
   *
   * @param userId The target user&#39;s ID.  
   * @return Future(JsonSuccess)
   */
  def deactivateUserAsync(userId: Integer): Future[JsonSuccess] = {
      helper.deactivateUser(userId)
  }

  /**
   * Get attachments
   * Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; 
   *
   * @return JsonSuccessBase
   */
  def getAttachments(): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getAttachmentsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get attachments asynchronously
   * Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; 
   *
   * @return Future(JsonSuccessBase)
   */
  def getAttachmentsAsync(): Future[JsonSuccessBase] = {
      helper.getAttachments()
  }

  /**
   * Get own user
   * Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; 
   *
   * @return JsonSuccessBase
   */
  def getOwnUser(): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getOwnUserAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get own user asynchronously
   * Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; 
   *
   * @return Future(JsonSuccessBase)
   */
  def getOwnUserAsync(): Future[JsonSuccessBase] = {
      helper.getOwnUser()
  }

  /**
   * Get a user
   * Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
   *
   * @param userId The target user&#39;s ID.  
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getUser(userId: Integer, clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getUserAsync(userId, clientGravatar, includeCustomProfileFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a user asynchronously
   * Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
   *
   * @param userId The target user&#39;s ID.  
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getUserAsync(userId: Integer, clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getUser(userId, clientGravatar, includeCustomProfileFields)
  }

  /**
   * Get a user by email
   * Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
   *
   * @param email The email address of the user whose details you want to fetch.  
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getUserByEmail(email: String, clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getUserByEmailAsync(email, clientGravatar, includeCustomProfileFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get a user by email asynchronously
   * Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
   *
   * @param email The email address of the user whose details you want to fetch.  
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getUserByEmailAsync(email: String, clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getUserByEmail(email, clientGravatar, includeCustomProfileFields)
  }

  /**
   * Get user groups
   * {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
   *
   * @return JsonSuccessBase
   */
  def getUserGroups(): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getUserGroupsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user groups asynchronously
   * {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
   *
   * @return Future(JsonSuccessBase)
   */
  def getUserGroupsAsync(): Future[JsonSuccessBase] = {
      helper.getUserGroups()
  }

  /**
   * Get user presence
   * Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
   *
   * @param userIdOrEmail The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
   * @return JsonSuccessBase
   */
  def getUserPresence(userIdOrEmail: String): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getUserPresenceAsync(userIdOrEmail), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user presence asynchronously
   * Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
   *
   * @param userIdOrEmail The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
   * @return Future(JsonSuccessBase)
   */
  def getUserPresenceAsync(userIdOrEmail: String): Future[JsonSuccessBase] = {
      helper.getUserPresence(userIdOrEmail)
  }

  /**
   * Get all users
   * Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). 
   *
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return JsonSuccessBase
   */
  def getUsers(clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(getUsersAsync(clientGravatar, includeCustomProfileFields), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all users asynchronously
   * Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). 
   *
   * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
   * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
   * @return Future(JsonSuccessBase)
   */
  def getUsersAsync(clientGravatar: Option[Boolean] = None, includeCustomProfileFields: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.getUsers(clientGravatar, includeCustomProfileFields)
  }

  /**
   * Mute a user
   * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
   *
   * @param mutedUserId The ID of the user to mute/un-mute.  
   * @return JsonSuccess
   */
  def muteUser(mutedUserId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(muteUserAsync(mutedUserId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Mute a user asynchronously
   * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
   *
   * @param mutedUserId The ID of the user to mute/un-mute.  
   * @return Future(JsonSuccess)
   */
  def muteUserAsync(mutedUserId: Integer): Future[JsonSuccess] = {
      helper.muteUser(mutedUserId)
  }

  /**
   * Reactivate a user
   * [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; 
   *
   * @param userId The target user&#39;s ID.  
   * @return AnyType
   */
  def reactivateUser(userId: Integer): Option[AnyType] = {
    val await = Try(Await.result(reactivateUserAsync(userId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Reactivate a user asynchronously
   * [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; 
   *
   * @param userId The target user&#39;s ID.  
   * @return Future(AnyType)
   */
  def reactivateUserAsync(userId: Integer): Future[AnyType] = {
      helper.reactivateUser(userId)
  }

  /**
   * Delete a user group
   * Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @return JsonSuccess
   */
  def removeUserGroup(userGroupId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(removeUserGroupAsync(userGroupId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a user group asynchronously
   * Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @return Future(JsonSuccess)
   */
  def removeUserGroupAsync(userGroupId: Integer): Future[JsonSuccess] = {
      helper.removeUserGroup(userGroupId)
  }

  /**
   * Set \&quot;typing\&quot; status
   * Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. 
   *
   * @param op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  
   * @param to For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  
   * @param `type` Type of the message being composed.  (optional, default to private)
   * @param topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
   * @return JsonSuccess
   */
  def setTypingStatus(op: String, to: List[Integer], `type`: Option[String] = None, topic: Option[String] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(setTypingStatusAsync(op, to, `type`, topic), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set \&quot;typing\&quot; status asynchronously
   * Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. 
   *
   * @param op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  
   * @param to For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  
   * @param `type` Type of the message being composed.  (optional, default to private)
   * @param topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
   * @return Future(JsonSuccess)
   */
  def setTypingStatusAsync(op: String, to: List[Integer], `type`: Option[String] = None, topic: Option[String] = None): Future[JsonSuccess] = {
      helper.setTypingStatus(op, to, `type`, topic)
  }

  /**
   * Unmute a user
   * This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). 
   *
   * @param mutedUserId The ID of the user to mute/un-mute.  
   * @return JsonSuccess
   */
  def unmuteUser(mutedUserId: Integer): Option[JsonSuccess] = {
    val await = Try(Await.result(unmuteUserAsync(mutedUserId), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Unmute a user asynchronously
   * This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). 
   *
   * @param mutedUserId The ID of the user to mute/un-mute.  
   * @return Future(JsonSuccess)
   */
  def unmuteUserAsync(mutedUserId: Integer): Future[JsonSuccess] = {
      helper.unmuteUser(mutedUserId)
  }

  /**
   * Update display settings
   * This endpoint is used to edit the current user&#39;s user interface settings.  &#x60;PATCH {{ api_url }}/v1/settings/display&#x60; 
   *
   * @param twentyFourHourTime Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
   * @param denseMode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
   * @param starredMessageCounts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
   * @param fluidLayoutWidth Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
   * @param highContrastMode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
   * @param colorScheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
   * @param translateEmoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
   * @param defaultLanguage What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
   * @param defaultView The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param leftSideUserlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
   * @param emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param demoteInactiveStreams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
   * @param timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @return JsonSuccessBase
   */
  def updateDisplaySettings(twentyFourHourTime: Option[Boolean] = None, denseMode: Option[Boolean] = None, starredMessageCounts: Option[Boolean] = None, fluidLayoutWidth: Option[Boolean] = None, highContrastMode: Option[Boolean] = None, colorScheme: Option[Integer] = None, translateEmoticons: Option[Boolean] = None, defaultLanguage: Option[String] = None, defaultView: Option[String] = None, leftSideUserlist: Option[Boolean] = None, emojiset: Option[String] = None, demoteInactiveStreams: Option[Integer] = None, timezone: Option[String] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(updateDisplaySettingsAsync(twentyFourHourTime, denseMode, starredMessageCounts, fluidLayoutWidth, highContrastMode, colorScheme, translateEmoticons, defaultLanguage, defaultView, leftSideUserlist, emojiset, demoteInactiveStreams, timezone), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update display settings asynchronously
   * This endpoint is used to edit the current user&#39;s user interface settings.  &#x60;PATCH {{ api_url }}/v1/settings/display&#x60; 
   *
   * @param twentyFourHourTime Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
   * @param denseMode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
   * @param starredMessageCounts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
   * @param fluidLayoutWidth Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
   * @param highContrastMode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
   * @param colorScheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
   * @param translateEmoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
   * @param defaultLanguage What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
   * @param defaultView The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param leftSideUserlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
   * @param emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @param demoteInactiveStreams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
   * @param timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
   * @return Future(JsonSuccessBase)
   */
  def updateDisplaySettingsAsync(twentyFourHourTime: Option[Boolean] = None, denseMode: Option[Boolean] = None, starredMessageCounts: Option[Boolean] = None, fluidLayoutWidth: Option[Boolean] = None, highContrastMode: Option[Boolean] = None, colorScheme: Option[Integer] = None, translateEmoticons: Option[Boolean] = None, defaultLanguage: Option[String] = None, defaultView: Option[String] = None, leftSideUserlist: Option[Boolean] = None, emojiset: Option[String] = None, demoteInactiveStreams: Option[Integer] = None, timezone: Option[String] = None): Future[JsonSuccessBase] = {
      helper.updateDisplaySettings(twentyFourHourTime, denseMode, starredMessageCounts, fluidLayoutWidth, highContrastMode, colorScheme, translateEmoticons, defaultLanguage, defaultView, leftSideUserlist, emojiset, demoteInactiveStreams, timezone)
  }

  /**
   * Update notification settings
   * This endpoint is used to edit the user&#39;s global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  &#x60;PATCH {{ api_url }}/v1/settings/notifications&#x60; 
   *
   * @param enableStreamDesktopNotifications Enable visual desktop notifications for stream messages.  (optional)
   * @param enableStreamEmailNotifications Enable email notifications for stream messages.  (optional)
   * @param enableStreamPushNotifications Enable mobile notifications for stream messages.  (optional)
   * @param enableStreamAudibleNotifications Enable audible desktop notifications for stream messages.  (optional)
   * @param notificationSound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
   * @param enableDesktopNotifications Enable visual desktop notifications for private messages and @-mentions.  (optional)
   * @param enableSounds Enable audible desktop notifications for private messages and @-mentions.  (optional)
   * @param enableOfflineEmailNotifications Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
   * @param enableOfflinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
   * @param enableOnlinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
   * @param enableDigestEmails Enable digest emails when the user is away.  (optional)
   * @param enableMarketingEmails Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
   * @param enableLoginEmails Enable email notifications for new logins to account.  (optional)
   * @param messageContentInEmailNotifications Include the message&#39;s content in email notifications for new messages.  (optional)
   * @param pmContentInDesktopNotifications Include content of private messages in desktop notifications.  (optional)
   * @param wildcardMentionsNotify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
   * @param desktopIconCountDisplay Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
   * @param realmNameInNotifications Include organization name in subject of message notification emails.  (optional)
   * @param presenceEnabled Display the presence status to other users when online.  (optional)
   * @return JsonSuccessBase
   */
  def updateNotificationSettings(enableStreamDesktopNotifications: Option[Boolean] = None, enableStreamEmailNotifications: Option[Boolean] = None, enableStreamPushNotifications: Option[Boolean] = None, enableStreamAudibleNotifications: Option[Boolean] = None, notificationSound: Option[String] = None, enableDesktopNotifications: Option[Boolean] = None, enableSounds: Option[Boolean] = None, enableOfflineEmailNotifications: Option[Boolean] = None, enableOfflinePushNotifications: Option[Boolean] = None, enableOnlinePushNotifications: Option[Boolean] = None, enableDigestEmails: Option[Boolean] = None, enableMarketingEmails: Option[Boolean] = None, enableLoginEmails: Option[Boolean] = None, messageContentInEmailNotifications: Option[Boolean] = None, pmContentInDesktopNotifications: Option[Boolean] = None, wildcardMentionsNotify: Option[Boolean] = None, desktopIconCountDisplay: Option[Integer] = None, realmNameInNotifications: Option[Boolean] = None, presenceEnabled: Option[Boolean] = None): Option[JsonSuccessBase] = {
    val await = Try(Await.result(updateNotificationSettingsAsync(enableStreamDesktopNotifications, enableStreamEmailNotifications, enableStreamPushNotifications, enableStreamAudibleNotifications, notificationSound, enableDesktopNotifications, enableSounds, enableOfflineEmailNotifications, enableOfflinePushNotifications, enableOnlinePushNotifications, enableDigestEmails, enableMarketingEmails, enableLoginEmails, messageContentInEmailNotifications, pmContentInDesktopNotifications, wildcardMentionsNotify, desktopIconCountDisplay, realmNameInNotifications, presenceEnabled), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update notification settings asynchronously
   * This endpoint is used to edit the user&#39;s global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  &#x60;PATCH {{ api_url }}/v1/settings/notifications&#x60; 
   *
   * @param enableStreamDesktopNotifications Enable visual desktop notifications for stream messages.  (optional)
   * @param enableStreamEmailNotifications Enable email notifications for stream messages.  (optional)
   * @param enableStreamPushNotifications Enable mobile notifications for stream messages.  (optional)
   * @param enableStreamAudibleNotifications Enable audible desktop notifications for stream messages.  (optional)
   * @param notificationSound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
   * @param enableDesktopNotifications Enable visual desktop notifications for private messages and @-mentions.  (optional)
   * @param enableSounds Enable audible desktop notifications for private messages and @-mentions.  (optional)
   * @param enableOfflineEmailNotifications Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
   * @param enableOfflinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
   * @param enableOnlinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
   * @param enableDigestEmails Enable digest emails when the user is away.  (optional)
   * @param enableMarketingEmails Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
   * @param enableLoginEmails Enable email notifications for new logins to account.  (optional)
   * @param messageContentInEmailNotifications Include the message&#39;s content in email notifications for new messages.  (optional)
   * @param pmContentInDesktopNotifications Include content of private messages in desktop notifications.  (optional)
   * @param wildcardMentionsNotify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
   * @param desktopIconCountDisplay Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
   * @param realmNameInNotifications Include organization name in subject of message notification emails.  (optional)
   * @param presenceEnabled Display the presence status to other users when online.  (optional)
   * @return Future(JsonSuccessBase)
   */
  def updateNotificationSettingsAsync(enableStreamDesktopNotifications: Option[Boolean] = None, enableStreamEmailNotifications: Option[Boolean] = None, enableStreamPushNotifications: Option[Boolean] = None, enableStreamAudibleNotifications: Option[Boolean] = None, notificationSound: Option[String] = None, enableDesktopNotifications: Option[Boolean] = None, enableSounds: Option[Boolean] = None, enableOfflineEmailNotifications: Option[Boolean] = None, enableOfflinePushNotifications: Option[Boolean] = None, enableOnlinePushNotifications: Option[Boolean] = None, enableDigestEmails: Option[Boolean] = None, enableMarketingEmails: Option[Boolean] = None, enableLoginEmails: Option[Boolean] = None, messageContentInEmailNotifications: Option[Boolean] = None, pmContentInDesktopNotifications: Option[Boolean] = None, wildcardMentionsNotify: Option[Boolean] = None, desktopIconCountDisplay: Option[Integer] = None, realmNameInNotifications: Option[Boolean] = None, presenceEnabled: Option[Boolean] = None): Future[JsonSuccessBase] = {
      helper.updateNotificationSettings(enableStreamDesktopNotifications, enableStreamEmailNotifications, enableStreamPushNotifications, enableStreamAudibleNotifications, notificationSound, enableDesktopNotifications, enableSounds, enableOfflineEmailNotifications, enableOfflinePushNotifications, enableOnlinePushNotifications, enableDigestEmails, enableMarketingEmails, enableLoginEmails, messageContentInEmailNotifications, pmContentInDesktopNotifications, wildcardMentionsNotify, desktopIconCountDisplay, realmNameInNotifications, presenceEnabled)
  }

  /**
   * Update a user
   * Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
   *
   * @param userId The target user&#39;s ID.  
   * @param fullName The user&#39;s full name.  (optional)
   * @param role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
   * @param profileData A dictionary containing the to be updated custom profile field data for the user.  (optional, default to new ListBuffer[Any]() )
   * @return JsonSuccess
   */
  def updateUser(userId: Integer, fullName: Option[String] = None, role: Option[Integer] = None, profileData: Option[List[Any]] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(updateUserAsync(userId, fullName, role, profileData), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a user asynchronously
   * Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
   *
   * @param userId The target user&#39;s ID.  
   * @param fullName The user&#39;s full name.  (optional)
   * @param role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
   * @param profileData A dictionary containing the to be updated custom profile field data for the user.  (optional, default to new ListBuffer[Any]() )
   * @return Future(JsonSuccess)
   */
  def updateUserAsync(userId: Integer, fullName: Option[String] = None, role: Option[Integer] = None, profileData: Option[List[Any]] = None): Future[JsonSuccess] = {
      helper.updateUser(userId, fullName, role, profileData)
  }

  /**
   * Update a user group
   * Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @param name The new name of the group.  
   * @param description The new description of the group.  
   * @return JsonSuccess
   */
  def updateUserGroup(userGroupId: Integer, name: String, description: String): Option[JsonSuccess] = {
    val await = Try(Await.result(updateUserGroupAsync(userGroupId, name, description), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update a user group asynchronously
   * Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @param name The new name of the group.  
   * @param description The new description of the group.  
   * @return Future(JsonSuccess)
   */
  def updateUserGroupAsync(userGroupId: Integer, name: String, description: String): Future[JsonSuccess] = {
      helper.updateUserGroup(userGroupId, name, description)
  }

  /**
   * Update user group members
   * Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @param delete The list of user ids to be removed from the user group.  (optional, default to new ListBuffer[Integer]() )
   * @param add The list of user ids to be added to the user group.  (optional, default to new ListBuffer[Integer]() )
   * @return JsonSuccess
   */
  def updateUserGroupMembers(userGroupId: Integer, delete: Option[List[Integer]] = None, add: Option[List[Integer]] = None): Option[JsonSuccess] = {
    val await = Try(Await.result(updateUserGroupMembersAsync(userGroupId, delete, add), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update user group members asynchronously
   * Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
   *
   * @param userGroupId The ID of the target user group.  
   * @param delete The list of user ids to be removed from the user group.  (optional, default to new ListBuffer[Integer]() )
   * @param add The list of user ids to be added to the user group.  (optional, default to new ListBuffer[Integer]() )
   * @return Future(JsonSuccess)
   */
  def updateUserGroupMembersAsync(userGroupId: Integer, delete: Option[List[Integer]] = None, add: Option[List[Integer]] = None): Future[JsonSuccess] = {
      helper.updateUserGroupMembers(userGroupId, delete, add)
  }

}

class UsersApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createUser(email: String,
    password: String,
    fullName: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling UsersApi->createUser")

    if (password == null) throw new Exception("Missing required parameter 'password' when calling UsersApi->createUser")

    if (fullName == null) throw new Exception("Missing required parameter 'fullName' when calling UsersApi->createUser")

    queryParams += "email" -> email.toString
    queryParams += "password" -> password.toString
    queryParams += "full_name" -> fullName.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def createUserGroup(name: String,
    description: String,
    members: List[Integer])(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/user_groups/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling UsersApi->createUserGroup")

    if (description == null) throw new Exception("Missing required parameter 'description' when calling UsersApi->createUserGroup")

    if (members == null) throw new Exception("Missing required parameter 'members' when calling UsersApi->createUserGroup")
    queryParams += "name" -> name.toString
    queryParams += "description" -> description.toString
    queryParams += "members" -> members.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def deactivateOwnUser()(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/me"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def deactivateUser(userId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getAttachments()(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/attachments"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getOwnUser()(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/me"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getUser(userId: Integer,
    clientGravatar: Option[Boolean] = None,
    includeCustomProfileFields: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    clientGravatar match {
      case Some(param) => queryParams += "client_gravatar" -> param.toString
      case _ => queryParams
    }
    includeCustomProfileFields match {
      case Some(param) => queryParams += "include_custom_profile_fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getUserByEmail(email: String,
    clientGravatar: Option[Boolean] = None,
    includeCustomProfileFields: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/{email}")
      replaceAll("\\{" + "email" + "\\}", email.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling UsersApi->getUserByEmail")

    clientGravatar match {
      case Some(param) => queryParams += "client_gravatar" -> param.toString
      case _ => queryParams
    }
    includeCustomProfileFields match {
      case Some(param) => queryParams += "include_custom_profile_fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getUserGroups()(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/user_groups"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getUserPresence(userIdOrEmail: String)(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id_or_email}/presence")
      replaceAll("\\{" + "user_id_or_email" + "\\}", userIdOrEmail.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (userIdOrEmail == null) throw new Exception("Missing required parameter 'userIdOrEmail' when calling UsersApi->getUserPresence")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def getUsers(clientGravatar: Option[Boolean] = None,
    includeCustomProfileFields: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/users"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    clientGravatar match {
      case Some(param) => queryParams += "client_gravatar" -> param.toString
      case _ => queryParams
    }
    includeCustomProfileFields match {
      case Some(param) => queryParams += "include_custom_profile_fields" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def muteUser(mutedUserId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/me/muted_users/{muted_user_id}")
      replaceAll("\\{" + "muted_user_id" + "\\}", mutedUserId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def reactivateUser(userId: Integer)(implicit reader: ClientResponseReader[AnyType]): Future[AnyType] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}/reactivate")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def removeUserGroup(userGroupId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/user_groups/{user_group_id}")
      replaceAll("\\{" + "user_group_id" + "\\}", userGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def setTypingStatus(op: String,
    to: List[Integer],
    `type`: Option[String] = None,
    topic: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/typing"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (op == null) throw new Exception("Missing required parameter 'op' when calling UsersApi->setTypingStatus")

    if (to == null) throw new Exception("Missing required parameter 'to' when calling UsersApi->setTypingStatus")
    `type` match {
      case Some(param) => queryParams += "type" -> param.toString
      case _ => queryParams
    }
    queryParams += "op" -> op.toString
    queryParams += "to" -> to.toString
    topic match {
      case Some(param) => queryParams += "topic" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def unmuteUser(mutedUserId: Integer)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/me/muted_users/{muted_user_id}")
      replaceAll("\\{" + "muted_user_id" + "\\}", mutedUserId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateDisplaySettings(twentyFourHourTime: Option[Boolean] = None,
    denseMode: Option[Boolean] = None,
    starredMessageCounts: Option[Boolean] = None,
    fluidLayoutWidth: Option[Boolean] = None,
    highContrastMode: Option[Boolean] = None,
    colorScheme: Option[Integer] = None,
    translateEmoticons: Option[Boolean] = None,
    defaultLanguage: Option[String] = None,
    defaultView: Option[String] = None,
    leftSideUserlist: Option[Boolean] = None,
    emojiset: Option[String] = None,
    demoteInactiveStreams: Option[Integer] = None,
    timezone: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/settings/display"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    twentyFourHourTime match {
      case Some(param) => queryParams += "twenty_four_hour_time" -> param.toString
      case _ => queryParams
    }
    denseMode match {
      case Some(param) => queryParams += "dense_mode" -> param.toString
      case _ => queryParams
    }
    starredMessageCounts match {
      case Some(param) => queryParams += "starred_message_counts" -> param.toString
      case _ => queryParams
    }
    fluidLayoutWidth match {
      case Some(param) => queryParams += "fluid_layout_width" -> param.toString
      case _ => queryParams
    }
    highContrastMode match {
      case Some(param) => queryParams += "high_contrast_mode" -> param.toString
      case _ => queryParams
    }
    colorScheme match {
      case Some(param) => queryParams += "color_scheme" -> param.toString
      case _ => queryParams
    }
    translateEmoticons match {
      case Some(param) => queryParams += "translate_emoticons" -> param.toString
      case _ => queryParams
    }
    defaultLanguage match {
      case Some(param) => queryParams += "default_language" -> param.toString
      case _ => queryParams
    }
    defaultView match {
      case Some(param) => queryParams += "default_view" -> param.toString
      case _ => queryParams
    }
    leftSideUserlist match {
      case Some(param) => queryParams += "left_side_userlist" -> param.toString
      case _ => queryParams
    }
    emojiset match {
      case Some(param) => queryParams += "emojiset" -> param.toString
      case _ => queryParams
    }
    demoteInactiveStreams match {
      case Some(param) => queryParams += "demote_inactive_streams" -> param.toString
      case _ => queryParams
    }
    timezone match {
      case Some(param) => queryParams += "timezone" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateNotificationSettings(enableStreamDesktopNotifications: Option[Boolean] = None,
    enableStreamEmailNotifications: Option[Boolean] = None,
    enableStreamPushNotifications: Option[Boolean] = None,
    enableStreamAudibleNotifications: Option[Boolean] = None,
    notificationSound: Option[String] = None,
    enableDesktopNotifications: Option[Boolean] = None,
    enableSounds: Option[Boolean] = None,
    enableOfflineEmailNotifications: Option[Boolean] = None,
    enableOfflinePushNotifications: Option[Boolean] = None,
    enableOnlinePushNotifications: Option[Boolean] = None,
    enableDigestEmails: Option[Boolean] = None,
    enableMarketingEmails: Option[Boolean] = None,
    enableLoginEmails: Option[Boolean] = None,
    messageContentInEmailNotifications: Option[Boolean] = None,
    pmContentInDesktopNotifications: Option[Boolean] = None,
    wildcardMentionsNotify: Option[Boolean] = None,
    desktopIconCountDisplay: Option[Integer] = None,
    realmNameInNotifications: Option[Boolean] = None,
    presenceEnabled: Option[Boolean] = None
    )(implicit reader: ClientResponseReader[JsonSuccessBase]): Future[JsonSuccessBase] = {
    // create path and map variables
    val path = (addFmt("/settings/notifications"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    enableStreamDesktopNotifications match {
      case Some(param) => queryParams += "enable_stream_desktop_notifications" -> param.toString
      case _ => queryParams
    }
    enableStreamEmailNotifications match {
      case Some(param) => queryParams += "enable_stream_email_notifications" -> param.toString
      case _ => queryParams
    }
    enableStreamPushNotifications match {
      case Some(param) => queryParams += "enable_stream_push_notifications" -> param.toString
      case _ => queryParams
    }
    enableStreamAudibleNotifications match {
      case Some(param) => queryParams += "enable_stream_audible_notifications" -> param.toString
      case _ => queryParams
    }
    notificationSound match {
      case Some(param) => queryParams += "notification_sound" -> param.toString
      case _ => queryParams
    }
    enableDesktopNotifications match {
      case Some(param) => queryParams += "enable_desktop_notifications" -> param.toString
      case _ => queryParams
    }
    enableSounds match {
      case Some(param) => queryParams += "enable_sounds" -> param.toString
      case _ => queryParams
    }
    enableOfflineEmailNotifications match {
      case Some(param) => queryParams += "enable_offline_email_notifications" -> param.toString
      case _ => queryParams
    }
    enableOfflinePushNotifications match {
      case Some(param) => queryParams += "enable_offline_push_notifications" -> param.toString
      case _ => queryParams
    }
    enableOnlinePushNotifications match {
      case Some(param) => queryParams += "enable_online_push_notifications" -> param.toString
      case _ => queryParams
    }
    enableDigestEmails match {
      case Some(param) => queryParams += "enable_digest_emails" -> param.toString
      case _ => queryParams
    }
    enableMarketingEmails match {
      case Some(param) => queryParams += "enable_marketing_emails" -> param.toString
      case _ => queryParams
    }
    enableLoginEmails match {
      case Some(param) => queryParams += "enable_login_emails" -> param.toString
      case _ => queryParams
    }
    messageContentInEmailNotifications match {
      case Some(param) => queryParams += "message_content_in_email_notifications" -> param.toString
      case _ => queryParams
    }
    pmContentInDesktopNotifications match {
      case Some(param) => queryParams += "pm_content_in_desktop_notifications" -> param.toString
      case _ => queryParams
    }
    wildcardMentionsNotify match {
      case Some(param) => queryParams += "wildcard_mentions_notify" -> param.toString
      case _ => queryParams
    }
    desktopIconCountDisplay match {
      case Some(param) => queryParams += "desktop_icon_count_display" -> param.toString
      case _ => queryParams
    }
    realmNameInNotifications match {
      case Some(param) => queryParams += "realm_name_in_notifications" -> param.toString
      case _ => queryParams
    }
    presenceEnabled match {
      case Some(param) => queryParams += "presence_enabled" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateUser(userId: Integer,
    fullName: Option[String] = None,
    role: Option[Integer] = None,
    profileData: Option[List[Any]] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/users/{user_id}")
      replaceAll("\\{" + "user_id" + "\\}", userId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    fullName match {
      case Some(param) => queryParams += "full_name" -> param.toString
      case _ => queryParams
    }
    role match {
      case Some(param) => queryParams += "role" -> param.toString
      case _ => queryParams
    }
    profileData match {
      case Some(param) => queryParams += "profile_data" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateUserGroup(userGroupId: Integer,
    name: String,
    description: String)(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/user_groups/{user_group_id}")
      replaceAll("\\{" + "user_group_id" + "\\}", userGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling UsersApi->updateUserGroup")

    if (description == null) throw new Exception("Missing required parameter 'description' when calling UsersApi->updateUserGroup")

    queryParams += "name" -> name.toString
    queryParams += "description" -> description.toString

    val resFuture = client.submit("PATCH", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }

  def updateUserGroupMembers(userGroupId: Integer,
    delete: Option[List[Integer]] = None,
    add: Option[List[Integer]] = None
    )(implicit reader: ClientResponseReader[JsonSuccess]): Future[JsonSuccess] = {
    // create path and map variables
    val path = (addFmt("/user_groups/{user_group_id}/members")
      replaceAll("\\{" + "user_group_id" + "\\}", userGroupId.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    delete match {
      case Some(param) => queryParams += "delete" -> param.toString
      case _ => queryParams
    }
    add match {
      case Some(param) => queryParams += "add" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      val status = Response.Status.fromStatusCode(resp.statusCode)
      status.getFamily match {
        case Family.SUCCESSFUL | Family.REDIRECTION | Family.INFORMATIONAL => process(reader.read(resp))
        case _ => throw new ApiException(resp.statusCode, resp.statusText)
      }
    }
  }


}
