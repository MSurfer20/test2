# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ZulipRESTAPI.Api.ServerAndOrganizations do
  @moduledoc """
  API calls for all endpoints tagged `ServerAndOrganizations`.
  """

  alias ZulipRESTAPI.Connection
  import ZulipRESTAPI.RequestBuilder


  @doc """
  Add a code playground
  Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - name (String.t): The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
  - pygments_language (String.t): The name of the Pygments language lexer for that programming language. 
  - url_prefix (String.t): The url prefix for the playground. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec add_code_playground(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def add_code_playground(connection, name, pygments_language, url_prefix, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/realm/playgrounds")
    |> add_param(:query, :"name", name)
    |> add_param(:query, :"pygments_language", pygments_language)
    |> add_param(:query, :"url_prefix", url_prefix)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Add a linkifier
  Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - pattern (String.t): The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  - url_format_string (String.t): The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec add_linkifier(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def add_linkifier(connection, pattern, url_format_string, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/realm/filters")
    |> add_param(:query, :"pattern", pattern)
    |> add_param(:query, :"url_format_string", url_format_string)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Create a custom profile field
  [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.  `POST {{ api_url }}/v1/realm/profile_fields` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - field_type (integer()): The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
  - opts (KeywordList): [optional] Optional parameters
    - :name (String.t): The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user's profile. 
    - :hint (String.t): The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
    - :field_data (map()): Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_custom_profile_field(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def create_custom_profile_field(connection, field_type, opts \\ []) do
    optional_params = %{
      :"name" => :query,
      :"hint" => :query,
      :"field_data" => :query
    }
    %{}
    |> method(:post)
    |> url("/realm/profile_fields")
    |> add_param(:query, :"field_type", field_type)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get all custom emoji
  Get all the custom emoji in the user's organization.  `GET {{ api_url }}/v1/realm/emoji` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_custom_emoji(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_custom_emoji(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/realm/emoji")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get all custom profile fields
  Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user's organization.  `GET {{ api_url }}/v1/realm/profile_fields` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_custom_profile_fields(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_custom_profile_fields(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/realm/profile_fields")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get linkifiers
  List all of an organization's configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_linkifiers(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_linkifiers(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/realm/linkifiers")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get server settings
  Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it's running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_server_settings(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_server_settings(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/server_settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Remove a code playground
  Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - playground_id (integer()): The ID of the playground that you want to remove. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec remove_code_playground(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def remove_code_playground(connection, playground_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/realm/playgrounds/#{playground_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}}
    ])
  end

  @doc """
  Remove a linkifier
  Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - filter_id (integer()): The ID of the linkifier that you want to remove. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec remove_linkifier(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def remove_linkifier(connection, filter_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/realm/filters/#{filter_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}}
    ])
  end

  @doc """
  Reorder custom profile fields
  Reorder the custom profile fields in the user's organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - order ([integer()]): A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec reorder_custom_profile_fields(Tesla.Env.client, list(Integer.t), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def reorder_custom_profile_fields(connection, order, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/realm/profile_fields")
    |> add_param(:query, :"order", order)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}}
    ])
  end

  @doc """
  Update a linkifier
  Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - filter_id (integer()): The ID of the linkifier that you want to update. 
  - pattern (String.t): The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  - url_format_string (String.t): The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_linkifier(Tesla.Env.client, integer(), String.t, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def update_linkifier(connection, filter_id, pattern, url_format_string, _opts \\ []) do
    %{}
    |> method(:patch)
    |> url("/realm/filters/#{filter_id}")
    |> add_param(:query, :"pattern", pattern)
    |> add_param(:query, :"url_format_string", url_format_string)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}}
    ])
  end

  @doc """
  Upload custom emoji
  This endpoint is used to upload a custom emoji for use in the user's organization.  Access to this endpoint depends on the [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - emoji_name (String.t): The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
  - opts (KeywordList): [optional] Optional parameters
    - :filename (String.t): 
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec upload_custom_emoji(Tesla.Env.client, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def upload_custom_emoji(connection, emoji_name, opts \\ []) do
    optional_params = %{
      :"filename" => :form
    }
    %{}
    |> method(:post)
    |> url("/realm/emoji/#{emoji_name}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}}
    ])
  end
end
