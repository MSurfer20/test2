# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ZulipRESTAPI.Api.Streams do
  @moduledoc """
  API calls for all endpoints tagged `Streams`.
  """

  alias ZulipRESTAPI.Connection
  import ZulipRESTAPI.RequestBuilder


  @doc """
  Archive a stream
  [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - stream_id (integer()): The ID of the stream to access. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec archive_stream(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonError.t} | {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def archive_stream(connection, stream_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/streams/#{stream_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}},
      { 400, %ZulipRESTAPI.Model.JsonError{}}
    ])
  end

  @doc """
  Create BigBlueButton video call
  Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec create_big_blue_button_video_call(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def create_big_blue_button_video_call(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/calls/bigbluebutton/create")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get stream ID
  Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - stream (String.t): The name of the stream to access. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_stream_id(Tesla.Env.client, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:ok, ZulipRESTAPI.Model.CodedError.t} | {:error, Tesla.Env.t}
  def get_stream_id(connection, stream, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/get_stream_id")
    |> add_param(:query, :"stream", stream)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}},
      { 400, %ZulipRESTAPI.Model.CodedError{}}
    ])
  end

  @doc """
  Get topics in a stream
  Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - stream_id (integer()): The ID of the stream to access. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_stream_topics(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonError.t} | {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_stream_topics(connection, stream_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/me/#{stream_id}/topics")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}},
      { 400, %ZulipRESTAPI.Model.JsonError{}}
    ])
  end

  @doc """
  Get all streams
  Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :include_public (boolean()): Include all public streams. 
    - :include_web_public (boolean()): Include all web public streams. 
    - :include_subscribed (boolean()): Include all streams that the user is subscribed to. 
    - :include_all_active (boolean()): Include all active streams. The user must have administrative privileges to use this parameter. 
    - :include_default (boolean()): Include all default streams for the user's realm. 
    - :include_owner_subscribed (boolean()): If the user is a bot, include all streams that the bot's owner is subscribed to. 
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_streams(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:ok, ZulipRESTAPI.Model.CodedError.t} | {:error, Tesla.Env.t}
  def get_streams(connection, opts \\ []) do
    optional_params = %{
      :"include_public" => :query,
      :"include_web_public" => :query,
      :"include_subscribed" => :query,
      :"include_all_active" => :query,
      :"include_default" => :query,
      :"include_owner_subscribed" => :query
    }
    %{}
    |> method(:get)
    |> url("/streams")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}},
      { 400, %ZulipRESTAPI.Model.CodedError{}}
    ])
  end

  @doc """
  Get subscription status
  Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - user_id (integer()): The target user's ID. 
  - stream_id (integer()): The ID of the stream to access. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_subscription_status(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_subscription_status(connection, user_id, stream_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{user_id}/subscriptions/#{stream_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Get subscribed streams
  Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :include_subscribers (boolean()): Whether each returned stream object should include a `subscribers` field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_subscriptions(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def get_subscriptions(connection, opts \\ []) do
    optional_params = %{
      :"include_subscribers" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/subscriptions")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Topic muting
  This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - topic (String.t): The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
  - op (String.t): Whether to mute (`add`) or unmute (`remove`) the provided topic. 
  - opts (KeywordList): [optional] Optional parameters
    - :stream (String.t): The name of the stream to access. 
    - :stream_id (integer()): The ID of the stream to access. 
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec mute_topic(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.OneOfobjectobject.t} | {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def mute_topic(connection, topic, op, opts \\ []) do
    optional_params = %{
      :"stream" => :query,
      :"stream_id" => :query
    }
    %{}
    |> method(:patch)
    |> url("/users/me/subscriptions/muted_topics")
    |> add_param(:query, :"topic", topic)
    |> add_param(:query, :"op", op)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}},
      { 400, %ZulipRESTAPI.Model.OneOfobjectobject{}}
    ])
  end

  @doc """
  Subscribe to a stream
  Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - subscriptions ([map()]): A list of dictionaries containing the key `name` and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key `description` with an appropriate value. 
  - opts (KeywordList): [optional] Optional parameters
    - :principals ([OneOfstringinteger]): A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
    - :authorization_errors_fatal (boolean()): A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When `True`, an authorization error is reported as such. When set to `False`, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the `unauthorized` key. 
    - :announce (boolean()): If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream's creation. 
    - :invite_only (boolean()): As described above, this endpoint will create a new stream if passed a stream name that doesn't already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
    - :history_public_to_subscribers (boolean()): Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    - :stream_post_policy (integer()): Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
    - :message_retention_days (OneOfstringinteger): Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
  ## Returns

  {:ok, OneOfobjectobject} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec subscribe(Tesla.Env.client, list(Map.t), keyword()) :: {:ok, ZulipRESTAPI.Model.OneOfobjectobject.t} | {:error, Tesla.Env.t}
  def subscribe(connection, subscriptions, opts \\ []) do
    optional_params = %{
      :"principals" => :query,
      :"authorization_errors_fatal" => :query,
      :"announce" => :query,
      :"invite_only" => :query,
      :"history_public_to_subscribers" => :query,
      :"stream_post_policy" => :query,
      :"message_retention_days" => :query
    }
    %{}
    |> method(:post)
    |> url("/users/me/subscriptions")
    |> add_param(:query, :"subscriptions", subscriptions)
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.OneOfobjectobject{}},
      { 400, %ZulipRESTAPI.Model.OneOfobjectobject{}}
    ])
  end

  @doc """
  Unsubscribe from a stream
  Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - subscriptions ([String.t]): A list of stream names to unsubscribe from. This parameter is called `streams` in our Python API. 
  - opts (KeywordList): [optional] Optional parameters
    - :principals ([OneOfstringinteger]): A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec unsubscribe(Tesla.Env.client, list(String.t), keyword()) :: {:ok, ZulipRESTAPI.Model.NonExistingStreamError.t} | {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def unsubscribe(connection, subscriptions, opts \\ []) do
    optional_params = %{
      :"principals" => :query
    }
    %{}
    |> method(:delete)
    |> url("/users/me/subscriptions")
    |> add_param(:query, :"subscriptions", subscriptions)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}},
      { 400, %ZulipRESTAPI.Model.NonExistingStreamError{}}
    ])
  end

  @doc """
  Update a stream
  Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - stream_id (integer()): The ID of the stream to access. 
  - opts (KeywordList): [optional] Optional parameters
    - :description (String.t): The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    - :new_name (String.t): The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
    - :is_private (boolean()): Change whether the stream is a private stream. 
    - :is_announcement_only (boolean()): Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   `stream_post_policy` instead. 
    - :stream_post_policy (integer()): Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
    - :history_public_to_subscribers (boolean()): Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
    - :message_retention_days (OneOfstringinteger): Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
  ## Returns

  {:ok, JsonSuccess} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_stream(Tesla.Env.client, integer(), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonError.t} | {:ok, ZulipRESTAPI.Model.JsonSuccess.t} | {:error, Tesla.Env.t}
  def update_stream(connection, stream_id, opts \\ []) do
    optional_params = %{
      :"description" => :query,
      :"new_name" => :query,
      :"is_private" => :query,
      :"is_announcement_only" => :query,
      :"stream_post_policy" => :query,
      :"history_public_to_subscribers" => :query,
      :"message_retention_days" => :query
    }
    %{}
    |> method(:patch)
    |> url("/streams/#{stream_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccess{}},
      { 400, %ZulipRESTAPI.Model.JsonError{}}
    ])
  end

  @doc """
  Update subscription settings
  This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - subscription_data ([map()]): A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a `stream_id` key that identifies the stream, as well as the `property` being modified and its new `value`.  The possible values for each `property` and `value` pairs are:  * `color` (string): the hex value of the user's display color for the stream. * `is_muted` (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named `in_home_view` (with the   opposite value, `in_home_view=!is_muted`); for   backwards-compatibility, modern Zulip still accepts that value. * `pin_to_top` (boolean): whether to pin the stream at the top of the stream list. * `desktop_notifications` (boolean): whether to show desktop notifications     for all messages sent to the stream. * `audible_notifications` (boolean): whether to play a sound   notification for all messages sent to the stream. * `push_notifications` (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * `email_notifications` (boolean): whether to trigger an email     notification for all messages sent to the stream. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_subscription_settings(Tesla.Env.client, list(Map.t), keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def update_subscription_settings(connection, subscription_data, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users/me/subscriptions/properties")
    |> add_param(:query, :"subscription_data", subscription_data)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end

  @doc """
  Update subscriptions
  Update which streams you are are subscribed to. 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :delete ([String.t]): A list of stream names to unsubscribe from. 
    - :add ([map()]): A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
  ## Returns

  {:ok, JsonSuccessBase} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_subscriptions(Tesla.Env.client, keyword()) :: {:ok, ZulipRESTAPI.Model.JsonSuccessBase.t} | {:error, Tesla.Env.t}
  def update_subscriptions(connection, opts \\ []) do
    optional_params = %{
      :"delete" => :query,
      :"add" => :query
    }
    %{}
    |> method(:patch)
    |> url("/users/me/subscriptions")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.JsonSuccessBase{}}
    ])
  end
end
