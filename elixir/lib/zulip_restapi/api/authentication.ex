# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule ZulipRESTAPI.Api.Authentication do
  @moduledoc """
  API calls for all endpoints tagged `Authentication`.
  """

  alias ZulipRESTAPI.Connection
  import ZulipRESTAPI.RequestBuilder


  @doc """
  Fetch an API key (development only)
  For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  `POST {{ api_url }}/v1/dev_fetch_api_key` 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - username (String.t): The email address for the user that owns the API key. 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ApiKeyResponse} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec dev_fetch_api_key(Tesla.Env.client, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.ApiKeyResponse.t} | {:error, Tesla.Env.t}
  def dev_fetch_api_key(connection, username, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/dev_fetch_api_key")
    |> add_param(:query, :"username", username)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.ApiKeyResponse{}}
    ])
  end

  @doc """
  Fetch an API key (production)
  This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user's Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the `mobile_flow_otp` in a webview, and the credentials are returned to the app (encrypted) via a redirect to a `zulip://` URL.  !!! warn \"\"     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 

  ## Parameters

  - connection (ZulipRESTAPI.Connection): Connection to server
  - username (String.t): The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the `require_email_format_usernames` parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
  - password (String.t): The user's Zulip password (or LDAP password, if LDAP authentication is in use). 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, ApiKeyResponse} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec fetch_api_key(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, ZulipRESTAPI.Model.ApiKeyResponse.t} | {:error, Tesla.Env.t}
  def fetch_api_key(connection, username, password, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/fetch_api_key")
    |> add_param(:query, :"username", username)
    |> add_param(:query, :"password", password)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %ZulipRESTAPI.Model.ApiKeyResponse{}}
    ])
  end
end
