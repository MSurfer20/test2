/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.locations.*
import org.openapitools.server.models.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Fetch an API key (development only)
     * For easy testing of mobile apps and other clients and against Zulip
development servers, we support fetching a Zulip API key for any user
on the development server without authentication (so that they can
implement analogues of the one-click login process available for Zulip
development servers on the web).

**Note:** This endpoint is only available on Zulip development
servers; for obvious security reasons it will always return an error
in a Zulip production server.

&#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60;

     * @param username The email address for the user that owns the API key.  
     */
    @Location("/dev_fetch_api_key") class devFetchApiKey(val username: kotlin.String)

    /**
     * Fetch an API key (production)
     * This API endpoint is used by clients such as the Zulip mobile and
terminal apps to implement password-based authentication.  Given the
user&#39;s Zulip login credentials, it returns a Zulip API key that the client
can use to make requests requests as the user.

This endpoint is only useful for Zulip servers/organizations with
EmailAuthBackend or LDAPAuthBackend enabled.

The Zulip mobile apps also support SSO/social authentication (GitHub
auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead,
the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in
a webview, and the credentials are returned to the app (encrypted) via a redirect
to a &#x60;zulip://&#x60; URL.

!!! warn &quot;&quot;
    **Note:** If you signed up using passwordless authentication and
    never had a password, you can [reset your password](/help/change-your-password).

    See the [API keys](/api/api-keys) documentation for
    more details on how to download API key manually.

In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html),
see also [the unauthenticated variant](/api/dev-fetch-api-key).

     * @param username The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details.  
     * @param password The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use).  
     */
    @Location("/fetch_api_key") class fetchApiKey(val username: kotlin.String, val password: kotlin.String)

    /**
     * Add an emoji reaction
     * Add an [emoji reaction](/help/emoji-reactions) to a message.

&#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60;

     * @param messageId The target message&#39;s ID.  
     * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
     * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
     */
    @Location("/messages/{message_id}/reactions") class addReaction(val messageId: kotlin.Int, val emojiName: kotlin.String, val emojiCode: kotlin.String? = null, val reactionType: kotlin.String? = null)

    /**
     * Check if messages match a narrow
     * Check whether a set of messages match a [narrow](/api/construct-narrow).

&#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;

For many common narrows (E.g. a topic), clients can write an
efficient client-side check to determine whether a
newly arrived message belongs in the view.

This endpoint is designed to allow clients to handle more complex narrows
for which the client does not (or in the case of full-text search,
cannot) implement this check.

The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match
those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a
&#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message
object identical to how a &#x60;GET /messages&#x60; for the current narrow would have
returned the message.

     * @param msgIds List of IDs for the messages to check. 
     * @param narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). 
     */
    @Location("/messages/matches_narrow") class checkMessagesMatchNarrow(val msgIds: kotlin.collections.List<kotlin.Int>, val narrow: kotlin.collections.List<kotlin.Any>)

    /**
     * Delete a message
     * Permanently delete a message.

&#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;

This API corresponds to the
[delete a message completely][delete-completely] feature documented in
the Zulip Help Center.

[delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely

     * @param messageId The target message&#39;s ID.  
     */
    @Location("/messages/{message_id}") class deleteMessage(val messageId: kotlin.Int)

    /**
     * Get public temporary URL
     * Get a temporary URL for access to the file that doesn&#39;t require authentication.

     * @param realmIdStr The realm id.  
     * @param filename Path to the URL.  
     */
    @Location("/user_uploads/{realm_id_str}/{filename}") class getFileTemporaryUrl(val realmIdStr: kotlin.Int, val filename: kotlin.String)

    /**
     * Get a message&#39;s edit history
     * Fetch the message edit history of a previously edited message.

&#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;

Note that edit history may be disabled in some organizations; see the
[Zulip Help Center documentation on editing messages][edit-settings].

[edit-settings]: /help/view-a-messages-edit-history

     * @param messageId The target message&#39;s ID.  
     */
    @Location("/messages/{message_id}/history") class getMessageHistory(val messageId: kotlin.Int)

    /**
     * Get messages
     * Fetch message history from a Zulip server.

&#x60;GET {{ api_url }}/v1/messages&#x60;

This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch
message history from a Zulip server.  It is useful both for Zulip
clients (e.g. the web, desktop, mobile, and terminal clients) as well
as bots, API clients, backup scripts, etc.

By specifying a [narrow filter](/api/construct-narrow), you can use
this endpoint to fetch the messages matching any search query that is
supported by Zulip&#39;s powerful full-text search backend.

When a narrow is not specified, it can be used to fetch a user&#39;s
message history. (We recommend paginating to 1000 messages at a time.)

In either case, you specify an &#x60;anchor&#x60; message (or ask the server to
calculate the first unread message for you and use that as the
anchor), as well as a number of messages before and after the anchor
message.  The server returns those messages, sorted by message ID, as
well as some metadata that makes it easy for a client to determine
whether there are more messages matching the query that were not
returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.

We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to
avoid generating very large HTTP responses. A maximum of 5000 messages
can be obtained per request; attempting to exceed this will result in an
error.

     * @param numBefore The number of messages with IDs less than the anchor to retrieve.  
     * @param numAfter The number of messages with IDs greater than the anchor to retrieve.  
     * @param anchor Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value).  (optional)
     * @param narrow The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow).  (optional)
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param applyMarkdown If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered.  (optional, default to true)
     * @param useFirstUnreadAnchor Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead.  (optional, default to false)
     */
    @Location("/messages") class getMessages(val numBefore: kotlin.Int, val numAfter: kotlin.Int, val anchor: OneOfLessThanStringCommaIntegerGreaterThan? = null, val narrow: kotlin.collections.List<kotlin.Any>? = null, val clientGravatar: kotlin.Boolean? = null, val applyMarkdown: kotlin.Boolean? = null, val useFirstUnreadAnchor: kotlin.Boolean? = null)

    /**
     * Get a message&#39;s raw Markdown
     * Get the raw content of a message.

&#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;

This is a rarely-used endpoint relevant for clients that primarily
work with HTML-rendered messages but might need to occasionally fetch
the message&#39;s raw Markdown (e.g. for pre-filling a message-editing
UI).

     * @param messageId The target message&#39;s ID.  
     */
    @Location("/messages/{message_id}") class getRawMessage(val messageId: kotlin.Int)

    /**
     * Mark all messages as read
     * Marks all of the current user&#39;s unread messages as read.

&#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60;

     */
    @Location("/mark_all_as_read") object markAllAsRead

    /**
     * Mark messages in a stream as read
     * Mark all the unread messages in a stream as read.

     * @param streamId The ID of the stream to access.  
     */
    @Location("/mark_stream_as_read") class markStreamAsRead(val streamId: kotlin.Int)

    /**
     * Mark messages in a topic as read
     * Mark all the unread messages in a topic as read.

     * @param streamId The ID of the stream to access.  
     * @param topicName The name of the topic whose messages should be marked as read.  
     */
    @Location("/mark_topic_as_read") class markTopicAsRead(val streamId: kotlin.Int, val topicName: kotlin.String)

    /**
     * Remove an emoji reaction
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.

&#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60;

     * @param messageId The target message&#39;s ID.  
     * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (optional)
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
     * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
     */
    @Location("/messages/{message_id}/reactions") class removeReaction(val messageId: kotlin.Int, val emojiName: kotlin.String? = null, val emojiCode: kotlin.String? = null, val reactionType: kotlin.String? = null)

    /**
     * Render message
     * Render a message to HTML.

&#x60;POST {{ api_url }}/v1/messages/render&#x60;

     * @param content The content of the message. Maximum message size of 10000 bytes.  
     */
    @Location("/messages/render") class renderMessage(val content: kotlin.String)

    /**
     * Send a message
     * Send a stream or a private message.

&#x60;POST {{ api_url }}/v1/messages&#x60;

     * @param type The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message.  
     * @param to For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.  
     * @param content The content of the message. Maximum message size of 10000 bytes.  
     * @param topic The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
     * @param queueId For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device).  (optional)
     * @param localId For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description.  (optional)
     */
    @Location("/messages") class sendMessage(val type: kotlin.String, val to: kotlin.collections.List<kotlin.Int>, val content: kotlin.String, val topic: kotlin.String? = null, val queueId: kotlin.String? = null, val localId: kotlin.String? = null)

    /**
     * Edit a message
     * Edit/update the content or topic of a message.

&#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;

&#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the
message you wish you update.

You can [resolve topics](/help/resolve-a-topic) by editing the
topic to &#x60;✔ {original_topic}&#x60;.

**Note**: See [configuring message
editing][config-message-editing] for detailed documentation on
when users are allowed to edit topics.

[config-message-editing]: /help/configure-message-editing-and-deletion

     * @param messageId The target message&#39;s ID.  
     * @param topic The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
     * @param propagateMode Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic.  (optional, default to change_one)
     * @param sendNotificationToOldThread Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
     * @param sendNotificationToNewThread Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
     * @param content The content of the message. Maximum message size of 10000 bytes.  (optional)
     * @param streamId The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message.  (optional)
     */
    @Location("/messages/{message_id}") class updateMessage(val messageId: kotlin.Int, val topic: kotlin.String? = null, val propagateMode: kotlin.String? = null, val sendNotificationToOldThread: kotlin.Boolean? = null, val sendNotificationToNewThread: kotlin.Boolean? = null, val content: kotlin.String? = null, val streamId: kotlin.Int? = null)

    /**
     * Update personal message flags
     * Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60;
on a collection of message IDs.

&#x60;POST {{ api_url }}/v1/messages/flags&#x60;

For updating the &#x60;read&#x60; flag on common collections of messages, see also
the
[special endpoints for marking message as read in bulk](/api/mark-all-as-read).

     * @param messages An array containing the IDs of the target messages.  
     * @param op Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it.  
     * @param flag The flag that should be added/removed.  
     */
    @Location("/messages/flags") class updateMessageFlags(val messages: kotlin.collections.List<kotlin.Int>, val op: kotlin.String, val flag: kotlin.String)

    /**
     * Upload a file
     * Upload a single file and get the corresponding URI.

&#x60;POST {{ api_url }}/v1/user_uploads&#x60;

Initially, only you will be able to access the link.  To share the
uploaded file, you&#39;ll need to [send a message][send-message]
containing the resulting link.  Users who can already access the link
can reshare it with other users by sending additional Zulip messages
containing the link.

[uploaded-files]: /help/manage-your-uploaded-files
[send-message]: /api/send-message

     * @param filename  (optional)
     */
    @Location("/user_uploads") class uploadFile(val filename: java.io.File? = null)

    /**
     * Delete an event queue
     * Delete a previously registered queue.

&#x60;DELETE {{ api_url }}/v1/events&#x60;

     * @param queueId The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)).  
     */
    @Location("/events") class deleteQueue(val queueId: kotlin.String)

    /**
     * Get events from an event queue
     * &#x60;GET {{ api_url }}/v1/events&#x60;

This endpoint allows you to receive new events from
[a registered event queue](/api/register-queue).

Long-lived clients should use the
&#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by
&#x60;POST /register&#x60; as the client-side HTTP request timeout for
calls to this endpoint.  It is guaranteed to be higher than
heartbeat frequency and should be respected by clients to
avoid breaking when heartbeat frequency increases.

     * @param queueId The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)).  
     * @param lastEventId The highest event ID in this queue that you&#39;ve received and wish to acknowledge. See the [code for &#x60;call_on_each_event&#x60;](https://github.com/zulip/python-zulip-api/blob/master/zulip/zulip/__init__.py) in the [zulip Python module](https://github.com/zulip/python-zulip-api) for an example implementation of correctly processing each event exactly once.  (optional)
     * @param dontBlock Set to &#x60;true&#x60; if the client is requesting a nonblocking reply. If not specified, the request will block until either a new event is available or a few minutes have passed, in which case the server will send the client a heartbeat event.  (optional, default to false)
     */
    @Location("/events") class getEvents(val queueId: kotlin.String, val lastEventId: kotlin.Int? = null, val dontBlock: kotlin.Boolean? = null)

    /**
     * (Ignored)

     * @param eventTypes A JSON-encoded array indicating which types of events you&#39;re interested in. Values that you might find useful include:    * **message** (messages)   * **subscription** (changes in your subscriptions)   * **realm_user** (changes to users in the organization and     their properties, such as their name).  If you do not specify this parameter, you will receive all events, and have to filter out the events not relevant to your client in your client code.  For most applications, one is only interested in messages, so one specifies: &#x60;event_types&#x3D;[&#39;message&#39;]&#x60;  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions.  (optional)
     * @param narrow A JSON-encoded array of arrays of length 2 indicating the narrow for which you&#39;d like to receive events for. For instance, to receive events for the stream &#x60;Denmark&#x60;, you would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages. Default is &#x60;[]&#x60;.  (optional)
     * @param allPublicStreams Whether you would like to request message events from all public streams.  Useful for workflow bots that you&#39;d like to see all new messages sent to public streams.  (You can also subscribe the user to private streams).  (optional, default to false)
     */
    @Location("/real-time") class realTimePost(val eventTypes: kotlin.collections.List<kotlin.String>? = null, val narrow: kotlin.collections.List<kotlin.collections.List<kotlin.String>>? = null, val allPublicStreams: kotlin.Boolean? = null)

    /**
     * Register an event queue
     * &#x60;POST {{ api_url }}/v1/register&#x60;

This powerful endpoint can be used to register a Zulip &quot;event queue&quot;
(subscribed to certain types of &quot;events&quot;, or updates to the messages
and other Zulip data the current user has access to), as well as to
fetch the current state of that data.

(&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is
intended primarily for complex applications for which the more convenient
&#x60;call_on_each_event&#x60; API is insufficient).

This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be
used in subsequent calls to the
[&quot;events&quot; endpoint](/api/get-events) to request events from
the Zulip server using long-polling.

The server will queue events for up to 10 minutes of inactivity.
After 10 minutes, your event queue will be garbage-collected.  The
server will send &#x60;heartbeat&#x60; events every minute, which makes it easy
to implement a robust client that does not miss events unless the
client loses network connectivity with the Zulip server for 10 minutes
or longer.

Once the server garbage-collects your event queue, the server will
[return an error](/api/get-events#bad_event_queue_id-errors)
with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from
the event queue.  Your software will need to handle that error
condition by re-initializing itself (e.g. this is what triggers your
browser reloading the Zulip web app when your laptop comes back online
after being offline for more than 10 minutes).

When prototyping with this API, we recommend first calling &#x60;register&#x60;
with no &#x60;event_types&#x60; parameter to see all the available data from all
supported event types.  Before using your client in production, you
should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters
so that your client only requests the data it needs.  A few minutes
doing this often saves 90% of the total bandwidth and other resources
consumed by a client using this API.

See the
[events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html)
if you need deeper details about how the Zulip event queue system
works, avoids clients needing to worry about large classes of
potentially messy races, etc.

     * @param applyMarkdown Set to &#x60;true&#x60; if you would like the content to be rendered in HTML format (otherwise the API will return the raw text that the user entered)  (optional, default to false)
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param slimPresence Setting this to &#x60;true&#x60; will make presence dictionaries be keyed by user_id instead of email.  **Changes**: New in Zulip 3.0 (Unstable with no feature level yet).  (optional, default to false)
     * @param eventTypes A JSON-encoded array indicating which types of events you&#39;re interested in. Values that you might find useful include:    * **message** (messages)   * **subscription** (changes in your subscriptions)   * **realm_user** (changes to users in the organization and     their properties, such as their name).  If you do not specify this parameter, you will receive all events, and have to filter out the events not relevant to your client in your client code.  For most applications, one is only interested in messages, so one specifies: &#x60;event_types&#x3D;[&#39;message&#39;]&#x60;  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions.  (optional)
     * @param allPublicStreams Whether you would like to request message events from all public streams.  Useful for workflow bots that you&#39;d like to see all new messages sent to public streams.  (You can also subscribe the user to private streams).  (optional, default to false)
     * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
     * @param clientCapabilities Dictionary containing details on features the client supports that are relevant to the format of responses sent by the server.  * &#x60;notification_settings_null&#x60;: Boolean for whether the   client can handle the current API with null values for   stream-level notification settings (which means the stream   is not customized and should inherit the user&#39;s global   notification settings for stream messages).  New in Zulip   2.1.0; in earlier Zulip releases, stream-level   notification settings were simple booleans.  * &#x60;bulk_message_deletion&#x60;: Boolean for whether the client&#39;s    handler for the &#x60;delete_message&#x60; event type has been    updated to process the new bulk format (with a    &#x60;message_ids&#x60;, rather than a singleton &#x60;message_id&#x60;).    Otherwise, the server will send &#x60;delete_message&#x60; events    in a loop.  New in Zulip 3.0 (feature level 13).  This    capability is for backwards-compatibility; it will be    required in a future server release.  * &#x60;user_avatar_url_field_optional&#x60;: Boolean for whether the    client required avatar URLs for all users, or supports    using &#x60;GET /avatar/{user_id}&#x60; to access user avatars.  If the    client has this capability, the server may skip sending a    &#x60;avatar_url&#x60; field in the &#x60;realm_user&#x60; at its sole discretion    to optimize network performance.  This is an important optimization    in organizations with 10,000s of users.    New in Zulip 3.0 (feature level 18).  * &#x60;stream_typing_notifications&#x60;: Boolean for whether the client   supports stream typing notifications.    New in Zulip 4.0 (feature level 58).  This capability is   for backwards-compatibility; it will be required in a   future server release.  (optional)
     * @param fetchEventTypes Same as the &#x60;event_types&#x60; parameter except that the values in &#x60;fetch_event_types&#x60; are used to fetch initial data. If &#x60;fetch_event_types&#x60; is not provided, &#x60;event_types&#x60; is used and if &#x60;event_types&#x60; is not provided, this parameter defaults to &#x60;None&#x60;.  Event types not supported by the server are ignored, in order to simplify the implementation of client apps that support multiple server versions.  (optional)
     * @param narrow A JSON-encoded array of arrays of length 2 indicating the narrow for which you&#39;d like to receive events for. For instance, to receive events for the stream &#x60;Denmark&#x60;, you would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages. Default is &#x60;[]&#x60;.  (optional)
     */
    @Location("/register") class registerQueue(val applyMarkdown: kotlin.Boolean? = null, val clientGravatar: kotlin.Boolean? = null, val slimPresence: kotlin.Boolean? = null, val eventTypes: kotlin.collections.List<kotlin.String>? = null, val allPublicStreams: kotlin.Boolean? = null, val includeSubscribers: kotlin.Boolean? = null, val clientCapabilities: kotlin.Any? = null, val fetchEventTypes: kotlin.collections.List<kotlin.String>? = null, val narrow: kotlin.collections.List<kotlin.collections.List<kotlin.String>>? = null)

    /**
     * Error handling
     * Common error to many endpoints

     */
    @Location("/rest-error-handling") object restErrorHandling

    /**
     * Add a code playground
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.

&#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;

**Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was
fixed in Zulip 4.0 (feature level 57).

     * @param name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language.  
     * @param pygmentsLanguage The name of the Pygments language lexer for that programming language.  
     * @param urlPrefix The url prefix for the playground.  
     */
    @Location("/realm/playgrounds") class addCodePlayground(val name: kotlin.String, val pygmentsLanguage: kotlin.String, val urlPrefix: kotlin.String)

    /**
     * Add a linkifier
     * Configure [linkifiers](/help/add-a-custom-linkifier),
regular expression patterns that are automatically linkified when they
appear in messages and topics.

&#x60;POST {{ api_url }}/v1/realm/filters&#x60;

     * @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     */
    @Location("/realm/filters") class addLinkifier(val pattern: kotlin.String, val urlFormatString: kotlin.String)

    /**
     * Create a custom profile field
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.

&#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60;

     * @param fieldType The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  
     * @param name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional)
     * @param hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional)
     * @param fieldData Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional)
     */
    @Location("/realm/profile_fields") class createCustomProfileField(val fieldType: kotlin.Int, val name: kotlin.String? = null, val hint: kotlin.String? = null, val fieldData: kotlin.Any? = null)

    /**
     * Get all custom emoji
     * Get all the custom emoji in the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/emoji&#x60;

     */
    @Location("/realm/emoji") object getCustomEmoji

    /**
     * Get all custom profile fields
     * Get all the [custom profile fields](/help/add-custom-profile-fields)
configured for the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60;

     */
    @Location("/realm/profile_fields") object getCustomProfileFields

    /**
     * Get linkifiers
     * List all of an organization&#39;s configured
[linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;

**Changes**: New in Zulip 4.0 (feature level 54). On older versions,
a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in
a &#x60;[pattern, url_format, id]&#x60; tuple format.

     */
    @Location("/realm/linkifiers") object getLinkifiers

    /**
     * Get server settings
     * Fetch global settings for a Zulip server.

&#x60;GET {{ api_url }}/v1/server_settings&#x60;

**Note:** this endpoint does not require any authentication at all, and you can use it to check:

* If this is a Zulip server, and if so, what version of Zulip it&#39;s running.
* What a Zulip client (e.g. a mobile app or
[zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to
know in order to display a login prompt for the server (e.g. what
authentication methods are available).

     */
    @Location("/server_settings") object getServerSettings

    /**
     * Remove a code playground
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously
configured for an organization.

&#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 49).

     * @param playgroundId The ID of the playground that you want to remove.  
     */
    @Location("/realm/playgrounds/{playground_id}") class removeCodePlayground(val playgroundId: kotlin.Int)

    /**
     * Remove a linkifier
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60;

     * @param filterId The ID of the linkifier that you want to remove.  
     */
    @Location("/realm/filters/{filter_id}") class removeLinkifier(val filterId: kotlin.Int)

    /**
     * Reorder custom profile fields
     * Reorder the custom profile fields in the user&#39;s organization.

&#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;

Custom profile fields are displayed in Zulip UI widgets in order; this
endpoint allows administrative settings UI to change the field ordering.

This endpoint is used to implement the dragging feature described in the
[custom profile fields documentation](/help/add-custom-profile-fields).

     * @param order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order.  
     */
    @Location("/realm/profile_fields") class reorderCustomProfileFields(val order: kotlin.collections.List<kotlin.Int>)

    /**
     * Update a linkifier
     * Update a [linkifier](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 57).

     * @param filterId The ID of the linkifier that you want to update.  
     * @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     */
    @Location("/realm/filters/{filter_id}") class updateLinkifier(val filterId: kotlin.Int, val pattern: kotlin.String, val urlFormatString: kotlin.String)

    /**
     * Upload custom emoji
     * This endpoint is used to upload a custom emoji for use in the user&#39;s
organization.  Access to this endpoint depends on the
[organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).

&#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60;

     * @param emojiName The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji).  
     * @param filename  (optional)
     */
    @Location("/realm/emoji/{emoji_name}") class uploadCustomEmoji(val emojiName: kotlin.String, val filename: java.io.File? = null)

    /**
     * Archive a stream
     * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.

&#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;

     * @param streamId The ID of the stream to access.  
     */
    @Location("/streams/{stream_id}") class archiveStream(val streamId: kotlin.Int)

    /**
     * Create BigBlueButton video call
     * Create a video call URL for a BigBlueButton video call.
Requires BigBlueButton to be configured on the Zulip server.

     */
    @Location("/calls/bigbluebutton/create") object createBigBlueButtonVideoCall

    /**
     * Get stream ID
     * Get the unique ID of a given stream.

&#x60;GET {{ api_url }}/v1/get_stream_id&#x60;

     * @param stream The name of the stream to access.  
     */
    @Location("/get_stream_id") class getStreamId(val stream: kotlin.String)

    /**
     * Get topics in a stream
     * Get all the topics in a specific stream

&#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;

     * @param streamId The ID of the stream to access.  
     */
    @Location("/users/me/{stream_id}/topics") class getStreamTopics(val streamId: kotlin.Int)

    /**
     * Get all streams
     * Get all streams that the user has access to.

&#x60;GET {{ api_url }}/v1/streams&#x60;

     * @param includePublic Include all public streams.  (optional, default to true)
     * @param includeWebPublic Include all web public streams.  (optional, default to false)
     * @param includeSubscribed Include all streams that the user is subscribed to.  (optional, default to true)
     * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
     * @param includeDefault Include all default streams for the user&#39;s realm.  (optional, default to false)
     * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
     */
    @Location("/streams") class getStreams(val includePublic: kotlin.Boolean? = null, val includeWebPublic: kotlin.Boolean? = null, val includeSubscribed: kotlin.Boolean? = null, val includeAllActive: kotlin.Boolean? = null, val includeDefault: kotlin.Boolean? = null, val includeOwnerSubscribed: kotlin.Boolean? = null)

    /**
     * Get subscription status
     * Check whether a user is subscribed to a stream.

&#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;

**Changes**: New in Zulip 3.0 (feature level 11).

     * @param userId The target user&#39;s ID.  
     * @param streamId The ID of the stream to access.  
     */
    @Location("/users/{user_id}/subscriptions/{stream_id}") class getSubscriptionStatus(val userId: kotlin.Int, val streamId: kotlin.Int)

    /**
     * Get subscribed streams
     * Get all streams that the user is subscribed to.

&#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;

     * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
     */
    @Location("/users/me/subscriptions") class getSubscriptions(val includeSubscribers: kotlin.Boolean? = null)

    /**
     * Topic muting
     * This endpoint mutes/unmutes a topic within a stream that the current
user is subscribed to.  Muted topics are displayed faded in the Zulip
UI, and are not included in the user&#39;s unread count totals.

&#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60;

     * @param topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  
     * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  
     * @param stream The name of the stream to access.  (optional)
     * @param streamId The ID of the stream to access.  (optional)
     */
    @Location("/users/me/subscriptions/muted_topics") class muteTopic(val topic: kotlin.String, val op: kotlin.String, val stream: kotlin.String? = null, val streamId: kotlin.Int? = null)

    /**
     * Subscribe to a stream
     * Subscribe one or more users to one or more streams.

&#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;

If any of the specified streams do not exist, they are automatically
created.  The initial [stream settings](/api/update-stream) will be determined
by the optional parameters like &#x60;invite_only&#x60; detailed below.

     * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  
     * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
     * @param announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
     * @param inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
     * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     */
    @Location("/users/me/subscriptions") class subscribe(val subscriptions: kotlin.collections.List<kotlin.Any>, val principals: kotlin.collections.List<OneOfLessThanStringCommaIntegerGreaterThan>? = null, val authorizationErrorsFatal: kotlin.Boolean? = null, val announce: kotlin.Boolean? = null, val inviteOnly: kotlin.Boolean? = null, val historyPublicToSubscribers: kotlin.Boolean? = null, val streamPostPolicy: kotlin.Int? = null, val messageRetentionDays: OneOfLessThanStringCommaIntegerGreaterThan? = null)

    /**
     * Unsubscribe from a stream
     * Unsubscribe yourself or other users from one or more streams.

&#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;

     * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
     * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     */
    @Location("/users/me/subscriptions") class unsubscribe(val subscriptions: kotlin.collections.List<kotlin.String>, val principals: kotlin.collections.List<OneOfLessThanStringCommaIntegerGreaterThan>? = null)

    /**
     * Update a stream
     * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports
an organization administrator editing any property of a stream,
including:

* Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description)
* Stream [permissions](/help/stream-permissions), including
[privacy](/help/change-the-privacy-of-a-stream) and [who can
send](/help/stream-sending-policy).

&#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60;

     * @param streamId The ID of the stream to access.  
     * @param description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     * @param newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     * @param isPrivate Change whether the stream is a private stream.  (optional)
     * @param isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
     * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     * @param historyPublicToSubscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     */
    @Location("/streams/{stream_id}") class updateStream(val streamId: kotlin.Int, val description: kotlin.String? = null, val newName: kotlin.String? = null, val isPrivate: kotlin.Boolean? = null, val isAnnouncementOnly: kotlin.Boolean? = null, val streamPostPolicy: kotlin.Int? = null, val historyPublicToSubscribers: kotlin.Boolean? = null, val messageRetentionDays: OneOfLessThanStringCommaIntegerGreaterThan? = null)

    /**
     * Update subscription settings
     * This endpoint is used to update the user&#39;s personal settings for the
streams they are subscribed to, including muting, color, pinning, and
per-stream notification settings.

&#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60;

     * @param subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
     */
    @Location("/users/me/subscriptions/properties") class updateSubscriptionSettings(val subscriptionData: kotlin.collections.List<kotlin.Any>)

    /**
     * Update subscriptions
     * Update which streams you are are subscribed to.

     * @param delete A list of stream names to unsubscribe from.  (optional)
     * @param add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional)
     */
    @Location("/users/me/subscriptions") class updateSubscriptions(val delete: kotlin.collections.List<kotlin.String>? = null, val add: kotlin.collections.List<kotlin.Any>? = null)

    /**
     * Create a user
     * {!can-create-users-only.md!}

Create a new user account via the API.

&#x60;POST {{ api_url }}/v1/users&#x60;

     * @param email The email address of the new user.  
     * @param password The password of the new user.  
     * @param fullName The full name of the new user.  
     */
    @Location("/users") class createUser(val email: kotlin.String, val password: kotlin.String, val fullName: kotlin.String)

    /**
     * Create a user group
     * Create a new [user group](/help/user-groups).

&#x60;POST {{ api_url }}/v1/user_groups/create&#x60;

     * @param name The name of the user group.  
     * @param description The description of the user group.  
     * @param members An array containing the user IDs of the initial members for the new user group.  
     */
    @Location("/user_groups/create") class createUserGroup(val name: kotlin.String, val description: kotlin.String, val members: kotlin.collections.List<kotlin.Int>)

    /**
     * Deactivate own user
     * Deactivates the user&#39;s account.  See also the administrative endpoint for
[deactivating another user](/api/deactivate-user).

&#x60;DELETE {{ api_url }}/v1/users/me&#x60;

This endpoint is primarily useful to Zulip clients providing a user settings UI.

     */
    @Location("/users/me") object deactivateOwnUser

    /**
     * Deactivate a user
     * [Deactivates a
user](https://zulip.com/help/deactivate-or-reactivate-a-user)
given their user ID.

&#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60;

     * @param userId The target user&#39;s ID.  
     */
    @Location("/users/{user_id}") class deactivateUser(val userId: kotlin.Int)

    /**
     * Get attachments
     * Fetch metadata on files uploaded by the requesting user.

&#x60;GET {{ api_url }}/v1/attachments&#x60;

     */
    @Location("/attachments") object getAttachments

    /**
     * Get own user
     * Get basic data about the user/bot that requests this endpoint.

&#x60;GET {{ api_url }}/v1/users/me&#x60;

     */
    @Location("/users/me") object getOwnUser

    /**
     * Get a user
     * Fetch details for a single user in the organization.

&#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;

You can also fetch details on [all users in the organization](/api/get-users)
or [by email](/api/get-user-by-email).

*This endpoint is new in Zulip Server 3.0 (feature level 1).*

     * @param userId The target user&#39;s ID.  
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @Location("/users/{user_id}") class getUser(val userId: kotlin.Int, val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Get a user by email
     * Fetch details for a single user in the organization given a Zulip display
email address.

&#x60;GET {{ api_url }}/v1/users/{email}&#x60;

Note that this endpoint uses Zulip display emails addresses
for organizations that have configured limited [email address
visibility](/help/restrict-visibility-of-email-addresses).

You can also fetch details on [all users in the organization](/api/get-users) or
[by user ID](/api/get-user).  Fetching by user ID is generally recommended
when possible, as users can
[change their email address](/help/change-your-email-address).

*This endpoint is new in Zulip Server 4.0 (feature level 39).*

     * @param email The email address of the user whose details you want to fetch.  
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @Location("/users/{email}") class getUserByEmail(val email: kotlin.String, val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Get user groups
     * {!api-members-only.md!}

Fetches all of the user groups in the organization.

&#x60;GET {{ api_url }}/v1/user_groups&#x60;

     */
    @Location("/user_groups") object getUserGroups

    /**
     * Get user presence
     * Get the presence status for a specific user.

This endpoint is most useful for embedding data about a user&#39;s
presence status in other sites (E.g. an employee directory).  Full
Zulip clients like mobile/desktop apps will want to use the main
presence endpoint, which returns data for all active users in the
organization, instead.

&#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;

See
[Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)
for details on the data model for presence in Zulip.

     * @param userIdOrEmail The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
     */
    @Location("/users/{user_id_or_email}/presence") class getUserPresence(val userIdOrEmail: kotlin.String)

    /**
     * Get all users
     * Retrieve details on all users in the organization.  Optionally
includes values of [custom profile field](/help/add-custom-profile-fields).

&#x60;GET {{ api_url }}/v1/users&#x60;

You can also [fetch details on a single user](/api/get-user).

     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @Location("/users") class getUsers(val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Mute a user
     * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users
you&#39;ve muted will be automatically marked as read and hidden.

&#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;

Muted users should be implemented by clients as follows:

* The server will immediately mark all messages sent by the muted
  user as read.  This will automatically clear any existing mobile
  push notifications related to the muted user.
* The server will mark any new messages sent by the muted user as read
  for your account, which prevents all email and mobile push notifications.
* Clients should exclude muted users from presence lists or other UI
  for viewing or composing 1:1 private messages. 1:1 private messages sent by
  muted users should be hidden everywhere in the Zulip UI.
* Stream messages and group private messages sent by the muted
  user should avoid displaying the content and name/avatar,
  but should display that N messages by a muted user were
  hidden (so that it is possible to interpret the messages by
  other users who are talking with the muted user).
* Group private message conversations including the muted user
  should display muted users as &quot;Muted user&quot;, rather than
  showing their name, in lists of such conversations, along with using
  a blank grey avatar where avatars are displayed.
* Administrative/settings UI elements for showing &quot;All users that exist
  on this stream or realm&quot;, e.g. for organization
  administration or showing stream subscribers, should display
  the user&#39;s name as normal.

**Changes**: New in Zulip 4.0 (feature level 48).

     * @param mutedUserId The ID of the user to mute/un-mute.  
     */
    @Location("/users/me/muted_users/{muted_user_id}") class muteUser(val mutedUserId: kotlin.Int)

    /**
     * Reactivate a user
     * [Reactivates a
user](https://zulip.com/help/deactivate-or-reactivate-a-user)
given their user ID.

&#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60;

     * @param userId The target user&#39;s ID.  
     */
    @Location("/users/{user_id}/reactivate") class reactivateUser(val userId: kotlin.Int)

    /**
     * Delete a user group
     * Delete a [user group](/help/user-groups).

&#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60;

     * @param userGroupId The ID of the target user group.  
     */
    @Location("/user_groups/{user_group_id}") class removeUserGroup(val userGroupId: kotlin.Int)

    /**
     * Set \&quot;typing\&quot; status
     * Notify other users whether the current user is typing a message.

&#x60;POST {{ api_url }}/v1/typing&#x60;

Clients implementing Zulip&#39;s typing notifications protocol should work as follows:

* Send a request to this endpoint with &#x60;op&#x3D;&quot;start&quot;&#x60; when a user starts typing a message,
  and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to
  actively type or otherwise interact with the compose UI (E.g. interacting with the
  compose box emoji picker).
* Send a request to this endpoint with &#x60;op&#x3D;&quot;stop&quot;&#x60; when a user pauses using the
  compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels
  the compose action (if it had previously sent a &quot;start&quot; operation for that
  compose action).
* Start displaying &quot;Sender is typing&quot; for a given conversation when the client
  receives an &#x60;op&#x3D;&quot;start&quot;&#x60; event from the [events API](/api/get-events).
* Continue displaying &quot;Sender is typing&quot; until they receive an &#x60;op&#x3D;&quot;stop&quot;&#x60; event
  from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;
  seconds have passed without a new &#x60;op&#x3D;&quot;start&quot;&#x60; event for that conversation.
* Clients that support displaying stream typing notifications (new in Zulip 4.0)
  should indicate they support processing stream typing events via the
  &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.

This protocol is designed to allow the server-side typing notifications implementation
to be stateless while being resilient; network failures cannot result in a user being
incorrectly displayed as perpetually typing.

See
[the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html)
for additional design details on Zulip&#39;s typing notifications protocol.

     * @param op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  
     * @param to For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  
     * @param type Type of the message being composed.  (optional, default to private)
     * @param topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
     */
    @Location("/typing") class setTypingStatus(val op: kotlin.String, val to: kotlin.collections.List<kotlin.Int>, val type: kotlin.String? = null, val topic: kotlin.String? = null)

    /**
     * Unmute a user
     * This endpoint unmutes a user.

&#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 48).

     * @param mutedUserId The ID of the user to mute/un-mute.  
     */
    @Location("/users/me/muted_users/{muted_user_id}") class unmuteUser(val mutedUserId: kotlin.Int)

    /**
     * Update display settings
     * This endpoint is used to edit the current user&#39;s user interface settings.

&#x60;PATCH {{ api_url }}/v1/settings/display&#x60;

     * @param twentyFourHourTime Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
     * @param denseMode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
     * @param starredMessageCounts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
     * @param fluidLayoutWidth Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
     * @param highContrastMode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
     * @param colorScheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
     * @param translateEmoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
     * @param defaultLanguage What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     * @param defaultView The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     * @param leftSideUserlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
     * @param emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     * @param demoteInactiveStreams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
     * @param timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     */
    @Location("/settings/display") class updateDisplaySettings(val twentyFourHourTime: kotlin.Boolean? = null, val denseMode: kotlin.Boolean? = null, val starredMessageCounts: kotlin.Boolean? = null, val fluidLayoutWidth: kotlin.Boolean? = null, val highContrastMode: kotlin.Boolean? = null, val colorScheme: kotlin.Int? = null, val translateEmoticons: kotlin.Boolean? = null, val defaultLanguage: kotlin.String? = null, val defaultView: kotlin.String? = null, val leftSideUserlist: kotlin.Boolean? = null, val emojiset: kotlin.String? = null, val demoteInactiveStreams: kotlin.Int? = null, val timezone: kotlin.String? = null)

    /**
     * Update notification settings
     * This endpoint is used to edit the user&#39;s global notification settings.
See [this endpoint](/api/update-subscription-settings) for
per-stream notification settings.

&#x60;PATCH {{ api_url }}/v1/settings/notifications&#x60;

     * @param enableStreamDesktopNotifications Enable visual desktop notifications for stream messages.  (optional)
     * @param enableStreamEmailNotifications Enable email notifications for stream messages.  (optional)
     * @param enableStreamPushNotifications Enable mobile notifications for stream messages.  (optional)
     * @param enableStreamAudibleNotifications Enable audible desktop notifications for stream messages.  (optional)
     * @param notificationSound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     * @param enableDesktopNotifications Enable visual desktop notifications for private messages and @-mentions.  (optional)
     * @param enableSounds Enable audible desktop notifications for private messages and @-mentions.  (optional)
     * @param enableOfflineEmailNotifications Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
     * @param enableOfflinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
     * @param enableOnlinePushNotifications Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
     * @param enableDigestEmails Enable digest emails when the user is away.  (optional)
     * @param enableMarketingEmails Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
     * @param enableLoginEmails Enable email notifications for new logins to account.  (optional)
     * @param messageContentInEmailNotifications Include the message&#39;s content in email notifications for new messages.  (optional)
     * @param pmContentInDesktopNotifications Include content of private messages in desktop notifications.  (optional)
     * @param wildcardMentionsNotify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
     * @param desktopIconCountDisplay Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
     * @param realmNameInNotifications Include organization name in subject of message notification emails.  (optional)
     * @param presenceEnabled Display the presence status to other users when online.  (optional)
     */
    @Location("/settings/notifications") class updateNotificationSettings(val enableStreamDesktopNotifications: kotlin.Boolean? = null, val enableStreamEmailNotifications: kotlin.Boolean? = null, val enableStreamPushNotifications: kotlin.Boolean? = null, val enableStreamAudibleNotifications: kotlin.Boolean? = null, val notificationSound: kotlin.String? = null, val enableDesktopNotifications: kotlin.Boolean? = null, val enableSounds: kotlin.Boolean? = null, val enableOfflineEmailNotifications: kotlin.Boolean? = null, val enableOfflinePushNotifications: kotlin.Boolean? = null, val enableOnlinePushNotifications: kotlin.Boolean? = null, val enableDigestEmails: kotlin.Boolean? = null, val enableMarketingEmails: kotlin.Boolean? = null, val enableLoginEmails: kotlin.Boolean? = null, val messageContentInEmailNotifications: kotlin.Boolean? = null, val pmContentInDesktopNotifications: kotlin.Boolean? = null, val wildcardMentionsNotify: kotlin.Boolean? = null, val desktopIconCountDisplay: kotlin.Int? = null, val realmNameInNotifications: kotlin.Boolean? = null, val presenceEnabled: kotlin.Boolean? = null)

    /**
     * Update a user
     * Administrative endpoint to update the details of another user in the organization.

&#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;

Supports everything an administrator can do to edit details of another
user&#39;s account, including editing full name,
[role](/help/roles-and-permissions), and [custom profile
fields](/help/add-custom-profile-fields).

     * @param userId The target user&#39;s ID.  
     * @param fullName The user&#39;s full name.  (optional)
     * @param role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
     * @param profileData A dictionary containing the to be updated custom profile field data for the user.  (optional)
     */
    @Location("/users/{user_id}") class updateUser(val userId: kotlin.Int, val fullName: kotlin.String? = null, val role: kotlin.Int? = null, val profileData: kotlin.collections.List<kotlin.Any>? = null)

    /**
     * Update a user group
     * Update the name or description of a [user group](/help/user-groups).

&#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60;

     * @param userGroupId The ID of the target user group.  
     * @param name The new name of the group.  
     * @param description The new description of the group.  
     */
    @Location("/user_groups/{user_group_id}") class updateUserGroup(val userGroupId: kotlin.Int, val name: kotlin.String, val description: kotlin.String)

    /**
     * Update user group members
     * Update the members of a [user group](/help/user-groups).

&#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60;

     * @param userGroupId The ID of the target user group.  
     * @param delete The list of user ids to be removed from the user group.  (optional)
     * @param add The list of user ids to be added to the user group.  (optional)
     */
    @Location("/user_groups/{user_group_id}/members") class updateUserGroupMembers(val userGroupId: kotlin.Int, val delete: kotlin.collections.List<kotlin.Int>? = null, val add: kotlin.collections.List<kotlin.Int>? = null)

    /**
     * Outgoing webhooks
     * Outgoing webhooks allows to build or set up Zulip integrations which are
notified when certain types of messages are sent in Zulip.

     */
    @Location("/zulip-outgoing-webhook") object zulipOutgoingWebhooks

}
