<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class UsersApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation getAttachments
     *
     * Get attachments.
     *
     *
     * @return Http response
     */
    public function getAttachments()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAttachments as a get method ?');
    }
    /**
     * Operation updateDisplaySettings
     *
     * Update display settings.
     *
     *
     * @return Http response
     */
    public function updateDisplaySettings()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $twenty_four_hour_time = $input['twenty_four_hour_time'];

        $dense_mode = $input['dense_mode'];

        $starred_message_counts = $input['starred_message_counts'];

        $fluid_layout_width = $input['fluid_layout_width'];

        $high_contrast_mode = $input['high_contrast_mode'];

        $color_scheme = $input['color_scheme'];

        $translate_emoticons = $input['translate_emoticons'];

        $default_language = $input['default_language'];

        $default_view = $input['default_view'];

        $left_side_userlist = $input['left_side_userlist'];

        $emojiset = $input['emojiset'];

        $demote_inactive_streams = $input['demote_inactive_streams'];

        $timezone = $input['timezone'];


        return response('How about implementing updateDisplaySettings as a patch method ?');
    }
    /**
     * Operation updateNotificationSettings
     *
     * Update notification settings.
     *
     *
     * @return Http response
     */
    public function updateNotificationSettings()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $enable_stream_desktop_notifications = $input['enable_stream_desktop_notifications'];

        $enable_stream_email_notifications = $input['enable_stream_email_notifications'];

        $enable_stream_push_notifications = $input['enable_stream_push_notifications'];

        $enable_stream_audible_notifications = $input['enable_stream_audible_notifications'];

        $notification_sound = $input['notification_sound'];

        $enable_desktop_notifications = $input['enable_desktop_notifications'];

        $enable_sounds = $input['enable_sounds'];

        $enable_offline_email_notifications = $input['enable_offline_email_notifications'];

        $enable_offline_push_notifications = $input['enable_offline_push_notifications'];

        $enable_online_push_notifications = $input['enable_online_push_notifications'];

        $enable_digest_emails = $input['enable_digest_emails'];

        $enable_marketing_emails = $input['enable_marketing_emails'];

        $enable_login_emails = $input['enable_login_emails'];

        $message_content_in_email_notifications = $input['message_content_in_email_notifications'];

        $pm_content_in_desktop_notifications = $input['pm_content_in_desktop_notifications'];

        $wildcard_mentions_notify = $input['wildcard_mentions_notify'];

        $desktop_icon_count_display = $input['desktop_icon_count_display'];

        $realm_name_in_notifications = $input['realm_name_in_notifications'];

        $presence_enabled = $input['presence_enabled'];


        return response('How about implementing updateNotificationSettings as a patch method ?');
    }
    /**
     * Operation setTypingStatus
     *
     * Set \"typing\" status.
     *
     *
     * @return Http response
     */
    public function setTypingStatus()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['op'])) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling setTypingStatus');
        }
        $op = $input['op'];

        if (!isset($input['to'])) {
            throw new \InvalidArgumentException('Missing the required parameter $to when calling setTypingStatus');
        }
        $to = $input['to'];

        $type = $input['type'];

        $topic = $input['topic'];


        return response('How about implementing setTypingStatus as a post method ?');
    }
    /**
     * Operation getUserGroups
     *
     * Get user groups.
     *
     *
     * @return Http response
     */
    public function getUserGroups()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUserGroups as a get method ?');
    }
    /**
     * Operation createUserGroup
     *
     * Create a user group.
     *
     *
     * @return Http response
     */
    public function createUserGroup()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createUserGroup');
        }
        $name = $input['name'];

        if (!isset($input['description'])) {
            throw new \InvalidArgumentException('Missing the required parameter $description when calling createUserGroup');
        }
        $description = $input['description'];

        if (!isset($input['members'])) {
            throw new \InvalidArgumentException('Missing the required parameter $members when calling createUserGroup');
        }
        $members = $input['members'];


        return response('How about implementing createUserGroup as a post method ?');
    }
    /**
     * Operation removeUserGroup
     *
     * Delete a user group.
     *
     * @param int $user_group_id The ID of the target user group. (required)
     *
     * @return Http response
     */
    public function removeUserGroup($user_group_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing removeUserGroup as a delete method ?');
    }
    /**
     * Operation updateUserGroup
     *
     * Update a user group.
     *
     * @param int $user_group_id The ID of the target user group. (required)
     *
     * @return Http response
     */
    public function updateUserGroup($user_group_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateUserGroup as a patch method ?');
    }
    /**
     * Operation updateUserGroupMembers
     *
     * Update user group members.
     *
     * @param int $user_group_id The ID of the target user group. (required)
     *
     * @return Http response
     */
    public function updateUserGroupMembers($user_group_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateUserGroupMembers as a post method ?');
    }
    /**
     * Operation createUser
     *
     * Create a user.
     *
     *
     * @return Http response
     */
    public function createUser()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['email'])) {
            throw new \InvalidArgumentException('Missing the required parameter $email when calling createUser');
        }
        $email = $input['email'];

        if (!isset($input['password'])) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling createUser');
        }
        $password = $input['password'];

        if (!isset($input['full_name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $full_name when calling createUser');
        }
        $full_name = $input['full_name'];


        return response('How about implementing createUser as a post method ?');
    }
    /**
     * Operation getUsers
     *
     * Get all users.
     *
     *
     * @return Http response
     */
    public function getUsers()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $client_gravatar = $input['client_gravatar'];

        $include_custom_profile_fields = $input['include_custom_profile_fields'];


        return response('How about implementing getUsers as a get method ?');
    }
    /**
     * Operation deactivateOwnUser
     *
     * Deactivate own user.
     *
     *
     * @return Http response
     */
    public function deactivateOwnUser()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deactivateOwnUser as a delete method ?');
    }
    /**
     * Operation getOwnUser
     *
     * Get own user.
     *
     *
     * @return Http response
     */
    public function getOwnUser()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getOwnUser as a get method ?');
    }
    /**
     * Operation muteUser
     *
     * Mute a user.
     *
     * @param int $muted_user_id The ID of the user to mute/un-mute. (required)
     *
     * @return Http response
     */
    public function muteUser($muted_user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing muteUser as a post method ?');
    }
    /**
     * Operation unmuteUser
     *
     * Unmute a user.
     *
     * @param int $muted_user_id The ID of the user to mute/un-mute. (required)
     *
     * @return Http response
     */
    public function unmuteUser($muted_user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing unmuteUser as a delete method ?');
    }
    /**
     * Operation getUserByEmail
     *
     * Get a user by email.
     *
     * @param string $email The email address of the user whose details you want to fetch. (required)
     *
     * @return Http response
     */
    public function getUserByEmail($email)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUserByEmail as a get method ?');
    }
    /**
     * Operation getUserPresence
     *
     * Get user presence.
     *
     * @param string $user_id_or_email The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. (required)
     *
     * @return Http response
     */
    public function getUserPresence($user_id_or_email)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUserPresence as a get method ?');
    }
    /**
     * Operation deactivateUser
     *
     * Deactivate a user.
     *
     * @param int $user_id The target user&#39;s ID. (required)
     *
     * @return Http response
     */
    public function deactivateUser($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deactivateUser as a delete method ?');
    }
    /**
     * Operation getUser
     *
     * Get a user.
     *
     * @param int $user_id The target user&#39;s ID. (required)
     *
     * @return Http response
     */
    public function getUser($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUser as a get method ?');
    }
    /**
     * Operation updateUser
     *
     * Update a user.
     *
     * @param int $user_id The target user&#39;s ID. (required)
     *
     * @return Http response
     */
    public function updateUser($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateUser as a patch method ?');
    }
    /**
     * Operation reactivateUser
     *
     * Reactivate a user.
     *
     * @param int $user_id The target user&#39;s ID. (required)
     *
     * @return Http response
     */
    public function reactivateUser($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing reactivateUser as a post method ?');
    }
}
