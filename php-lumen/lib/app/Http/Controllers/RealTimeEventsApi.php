<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class RealTimeEventsApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation deleteQueue
     *
     * Delete an event queue.
     *
     *
     * @return Http response
     */
    public function deleteQueue()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['queue_id'])) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_id when calling deleteQueue');
        }
        $queue_id = $input['queue_id'];


        return response('How about implementing deleteQueue as a delete method ?');
    }
    /**
     * Operation getEvents
     *
     * Get events from an event queue.
     *
     *
     * @return Http response
     */
    public function getEvents()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['queue_id'])) {
            throw new \InvalidArgumentException('Missing the required parameter $queue_id when calling getEvents');
        }
        $queue_id = $input['queue_id'];

        $last_event_id = $input['last_event_id'];

        $dont_block = $input['dont_block'];


        return response('How about implementing getEvents as a get method ?');
    }
    /**
     * Operation realTimePost
     *
     * .
     *
     *
     * @return Http response
     */
    public function realTimePost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $event_types = $input['event_types'];

        $narrow = $input['narrow'];

        $all_public_streams = $input['all_public_streams'];


        return response('How about implementing realTimePost as a post method ?');
    }
    /**
     * Operation registerQueue
     *
     * Register an event queue.
     *
     *
     * @return Http response
     */
    public function registerQueue()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $apply_markdown = $input['apply_markdown'];

        $client_gravatar = $input['client_gravatar'];

        $slim_presence = $input['slim_presence'];

        $event_types = $input['event_types'];

        $all_public_streams = $input['all_public_streams'];

        $include_subscribers = $input['include_subscribers'];

        $client_capabilities = $input['client_capabilities'];

        $fetch_event_types = $input['fetch_event_types'];

        $narrow = $input['narrow'];


        return response('How about implementing registerQueue as a post method ?');
    }
    /**
     * Operation restErrorHandling
     *
     * Error handling.
     *
     *
     * @return Http response
     */
    public function restErrorHandling()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing restErrorHandling as a post method ?');
    }
}
