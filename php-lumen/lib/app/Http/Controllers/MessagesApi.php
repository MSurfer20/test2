<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class MessagesApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation markAllAsRead
     *
     * Mark all messages as read.
     *
     *
     * @return Http response
     */
    public function markAllAsRead()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing markAllAsRead as a post method ?');
    }
    /**
     * Operation markStreamAsRead
     *
     * Mark messages in a stream as read.
     *
     *
     * @return Http response
     */
    public function markStreamAsRead()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['stream_id'])) {
            throw new \InvalidArgumentException('Missing the required parameter $stream_id when calling markStreamAsRead');
        }
        $stream_id = $input['stream_id'];


        return response('How about implementing markStreamAsRead as a post method ?');
    }
    /**
     * Operation markTopicAsRead
     *
     * Mark messages in a topic as read.
     *
     *
     * @return Http response
     */
    public function markTopicAsRead()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['stream_id'])) {
            throw new \InvalidArgumentException('Missing the required parameter $stream_id when calling markTopicAsRead');
        }
        $stream_id = $input['stream_id'];

        if (!isset($input['topic_name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $topic_name when calling markTopicAsRead');
        }
        $topic_name = $input['topic_name'];


        return response('How about implementing markTopicAsRead as a post method ?');
    }
    /**
     * Operation getMessages
     *
     * Get messages.
     *
     *
     * @return Http response
     */
    public function getMessages()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['num_before'])) {
            throw new \InvalidArgumentException('Missing the required parameter $num_before when calling getMessages');
        }
        if ($input['num_before'] < 0) {
            throw new \InvalidArgumentException('invalid value for $num_before when calling MessagesApi.getMessages, must be bigger than or equal to 0.');
        }
        $num_before = $input['num_before'];

        if (!isset($input['num_after'])) {
            throw new \InvalidArgumentException('Missing the required parameter $num_after when calling getMessages');
        }
        if ($input['num_after'] < 0) {
            throw new \InvalidArgumentException('invalid value for $num_after when calling MessagesApi.getMessages, must be bigger than or equal to 0.');
        }
        $num_after = $input['num_after'];

        $anchor = $input['anchor'];

        $narrow = $input['narrow'];

        $client_gravatar = $input['client_gravatar'];

        $apply_markdown = $input['apply_markdown'];

        $use_first_unread_anchor = $input['use_first_unread_anchor'];


        return response('How about implementing getMessages as a get method ?');
    }
    /**
     * Operation sendMessage
     *
     * Send a message.
     *
     *
     * @return Http response
     */
    public function sendMessage()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['type'])) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling sendMessage');
        }
        $type = $input['type'];

        if (!isset($input['to'])) {
            throw new \InvalidArgumentException('Missing the required parameter $to when calling sendMessage');
        }
        $to = $input['to'];

        if (!isset($input['content'])) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling sendMessage');
        }
        $content = $input['content'];

        $topic = $input['topic'];

        $queue_id = $input['queue_id'];

        $local_id = $input['local_id'];


        return response('How about implementing sendMessage as a post method ?');
    }
    /**
     * Operation updateMessageFlags
     *
     * Update personal message flags.
     *
     *
     * @return Http response
     */
    public function updateMessageFlags()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['messages'])) {
            throw new \InvalidArgumentException('Missing the required parameter $messages when calling updateMessageFlags');
        }
        $messages = $input['messages'];

        if (!isset($input['op'])) {
            throw new \InvalidArgumentException('Missing the required parameter $op when calling updateMessageFlags');
        }
        $op = $input['op'];

        if (!isset($input['flag'])) {
            throw new \InvalidArgumentException('Missing the required parameter $flag when calling updateMessageFlags');
        }
        $flag = $input['flag'];


        return response('How about implementing updateMessageFlags as a post method ?');
    }
    /**
     * Operation checkMessagesMatchNarrow
     *
     * Check if messages match a narrow.
     *
     *
     * @return Http response
     */
    public function checkMessagesMatchNarrow()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['msg_ids'])) {
            throw new \InvalidArgumentException('Missing the required parameter $msg_ids when calling checkMessagesMatchNarrow');
        }
        $msg_ids = $input['msg_ids'];

        if (!isset($input['narrow'])) {
            throw new \InvalidArgumentException('Missing the required parameter $narrow when calling checkMessagesMatchNarrow');
        }
        $narrow = $input['narrow'];


        return response('How about implementing checkMessagesMatchNarrow as a get method ?');
    }
    /**
     * Operation renderMessage
     *
     * Render message.
     *
     *
     * @return Http response
     */
    public function renderMessage()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['content'])) {
            throw new \InvalidArgumentException('Missing the required parameter $content when calling renderMessage');
        }
        $content = $input['content'];


        return response('How about implementing renderMessage as a post method ?');
    }
    /**
     * Operation deleteMessage
     *
     * Delete a message.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function deleteMessage($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteMessage as a delete method ?');
    }
    /**
     * Operation getRawMessage
     *
     * Get a message's raw Markdown.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function getRawMessage($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getRawMessage as a get method ?');
    }
    /**
     * Operation updateMessage
     *
     * Edit a message.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function updateMessage($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateMessage as a patch method ?');
    }
    /**
     * Operation getMessageHistory
     *
     * Get a message's edit history.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function getMessageHistory($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getMessageHistory as a get method ?');
    }
    /**
     * Operation addReaction
     *
     * Add an emoji reaction.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function addReaction($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing addReaction as a post method ?');
    }
    /**
     * Operation removeReaction
     *
     * Remove an emoji reaction.
     *
     * @param int $message_id The target message&#39;s ID. (required)
     *
     * @return Http response
     */
    public function removeReaction($message_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing removeReaction as a delete method ?');
    }
    /**
     * Operation uploadFile
     *
     * Upload a file.
     *
     *
     * @return Http response
     */
    public function uploadFile()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $filename = $input['filename'];


        return response('How about implementing uploadFile as a post method ?');
    }
    /**
     * Operation getFileTemporaryUrl
     *
     * Get public temporary URL.
     *
     * @param int $realm_id_str The realm id. (required)
     * @param string $filename Path to the URL. (required)
     *
     * @return Http response
     */
    public function getFileTemporaryUrl($realm_id_str, $filename)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getFileTemporaryUrl as a get method ?');
    }
}
