<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class ServerAndOrganizationsApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation getCustomEmoji
     *
     * Get all custom emoji.
     *
     *
     * @return Http response
     */
    public function getCustomEmoji()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCustomEmoji as a get method ?');
    }
    /**
     * Operation uploadCustomEmoji
     *
     * Upload custom emoji.
     *
     * @param string $emoji_name The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). (required)
     *
     * @return Http response
     */
    public function uploadCustomEmoji($emoji_name)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing uploadCustomEmoji as a post method ?');
    }
    /**
     * Operation addLinkifier
     *
     * Add a linkifier.
     *
     *
     * @return Http response
     */
    public function addLinkifier()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['pattern'])) {
            throw new \InvalidArgumentException('Missing the required parameter $pattern when calling addLinkifier');
        }
        $pattern = $input['pattern'];

        if (!isset($input['url_format_string'])) {
            throw new \InvalidArgumentException('Missing the required parameter $url_format_string when calling addLinkifier');
        }
        $url_format_string = $input['url_format_string'];


        return response('How about implementing addLinkifier as a post method ?');
    }
    /**
     * Operation removeLinkifier
     *
     * Remove a linkifier.
     *
     * @param int $filter_id The ID of the linkifier that you want to remove. (required)
     *
     * @return Http response
     */
    public function removeLinkifier($filter_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing removeLinkifier as a delete method ?');
    }
    /**
     * Operation updateLinkifier
     *
     * Update a linkifier.
     *
     * @param int $filter_id The ID of the linkifier that you want to update. (required)
     *
     * @return Http response
     */
    public function updateLinkifier($filter_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing updateLinkifier as a patch method ?');
    }
    /**
     * Operation getLinkifiers
     *
     * Get linkifiers.
     *
     *
     * @return Http response
     */
    public function getLinkifiers()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getLinkifiers as a get method ?');
    }
    /**
     * Operation addCodePlayground
     *
     * Add a code playground.
     *
     *
     * @return Http response
     */
    public function addCodePlayground()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['name'])) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling addCodePlayground');
        }
        $name = $input['name'];

        if (!isset($input['pygments_language'])) {
            throw new \InvalidArgumentException('Missing the required parameter $pygments_language when calling addCodePlayground');
        }
        $pygments_language = $input['pygments_language'];

        if (!isset($input['url_prefix'])) {
            throw new \InvalidArgumentException('Missing the required parameter $url_prefix when calling addCodePlayground');
        }
        $url_prefix = $input['url_prefix'];


        return response('How about implementing addCodePlayground as a post method ?');
    }
    /**
     * Operation removeCodePlayground
     *
     * Remove a code playground.
     *
     * @param int $playground_id The ID of the playground that you want to remove. (required)
     *
     * @return Http response
     */
    public function removeCodePlayground($playground_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing removeCodePlayground as a delete method ?');
    }
    /**
     * Operation createCustomProfileField
     *
     * Create a custom profile field.
     *
     *
     * @return Http response
     */
    public function createCustomProfileField()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['field_type'])) {
            throw new \InvalidArgumentException('Missing the required parameter $field_type when calling createCustomProfileField');
        }
        $field_type = $input['field_type'];

        $name = $input['name'];

        $hint = $input['hint'];

        $field_data = $input['field_data'];


        return response('How about implementing createCustomProfileField as a post method ?');
    }
    /**
     * Operation getCustomProfileFields
     *
     * Get all custom profile fields.
     *
     *
     * @return Http response
     */
    public function getCustomProfileFields()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getCustomProfileFields as a get method ?');
    }
    /**
     * Operation reorderCustomProfileFields
     *
     * Reorder custom profile fields.
     *
     *
     * @return Http response
     */
    public function reorderCustomProfileFields()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['order'])) {
            throw new \InvalidArgumentException('Missing the required parameter $order when calling reorderCustomProfileFields');
        }
        $order = $input['order'];


        return response('How about implementing reorderCustomProfileFields as a patch method ?');
    }
    /**
     * Operation getServerSettings
     *
     * Get server settings.
     *
     *
     * @return Http response
     */
    public function getServerSettings()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getServerSettings as a get method ?');
    }
}
