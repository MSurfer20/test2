--  Zulip REST API
--  Powerful open source group chat 
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
with Ada.Containers.Vectors;
package .Models is
   pragma Style_Checks ("-mr");



   type JsonErrorBaseAllOf_Type is
     record
       Result : Swagger.UString;
       Msg : Swagger.UString;
     end record;

   package JsonErrorBaseAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonErrorBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBaseAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBaseAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBaseAllOf_Type_Vectors.Vector);




   type AttachmentsMessages_Type is
     record
       Date_Sent : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_Integer;
     end record;

   package AttachmentsMessages_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => AttachmentsMessages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttachmentsMessages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttachmentsMessages_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AttachmentsMessages_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AttachmentsMessages_Type_Vectors.Vector);




   type Attachments_Type is
     record
       Id : Swagger.Nullable_Integer;
       Name : Swagger.Nullable_UString;
       Path_Id : Swagger.Nullable_UString;
       Size : Swagger.Nullable_Integer;
       Create_Time : Swagger.Nullable_Integer;
       Messages : .Models.AttachmentsMessages_Type_Vectors.Vector;
     end record;

   package Attachments_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Attachments_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Attachments_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Attachments_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Attachments_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Attachments_Type_Vectors.Vector);




   type JsonResponseBase_Type is
     record
       Result : Swagger.Nullable_UString;
     end record;

   package JsonResponseBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonResponseBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonResponseBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonResponseBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonResponseBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonResponseBase_Type_Vectors.Vector);




   type Subscriptions_Type is
     record
       Stream_Id : Swagger.Nullable_Integer;
       Name : Swagger.Nullable_UString;
       Description : Swagger.Nullable_UString;
       Rendered_Description : Swagger.Nullable_UString;
       Date_Created : Swagger.Nullable_Integer;
       Invite_Only : Swagger.Nullable_Boolean;
       Subscribers : Integer_Vectors.Vector;
       Desktop_Notifications : Swagger.Nullable_Boolean;
       Email_Notifications : Swagger.Nullable_Boolean;
       Wildcard_Mentions_Notify : Swagger.Nullable_Boolean;
       Push_Notifications : Swagger.Nullable_Boolean;
       Audible_Notifications : Swagger.Nullable_Boolean;
       Pin_To_Top : Swagger.Nullable_Boolean;
       Email_Address : Swagger.Nullable_UString;
       Is_Muted : Swagger.Nullable_Boolean;
       In_Home_View : Swagger.Nullable_Boolean;
       Is_Announcement_Only : Swagger.Nullable_Boolean;
       Is_Web_Public : Swagger.Nullable_Boolean;
       Role : Swagger.Nullable_Integer;
       Color : Swagger.Nullable_UString;
       Stream_Post_Policy : Swagger.Nullable_Integer;
       Message_Retention_Days : Swagger.Nullable_Integer;
       History_Public_To_Subscribers : Swagger.Nullable_Boolean;
       First_Message_Id : Swagger.Nullable_Integer;
       Stream_Weekly_Traffic : Swagger.Nullable_Integer;
     end record;

   package Subscriptions_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Subscriptions_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subscriptions_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subscriptions_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Subscriptions_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Subscriptions_Type_Vectors.Vector);




   type RealmExport_Type is
     record
       Id : Swagger.Nullable_Integer;
       Acting_User_Id : Swagger.Nullable_Integer;
       Export_Time : Swagger.Number;
       Deleted_Timestamp : Swagger.Number;
       Failed_Timestamp : Swagger.Number;
       Export_Url : Swagger.Nullable_UString;
       Pending : Swagger.Nullable_Boolean;
     end record;

   package RealmExport_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RealmExport_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmExport_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmExport_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmExport_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmExport_Type_Vectors.Vector);




   type RealmDomain_Type is
     record
       Domain : Swagger.Nullable_UString;
       Allow_Subdomains : Swagger.Nullable_Boolean;
     end record;

   package RealmDomain_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RealmDomain_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDomain_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDomain_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDomain_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDomain_Type_Vectors.Vector);




   type Hotspot_Type is
     record
       P_Delay : Swagger.Number;
       Name : Swagger.Nullable_UString;
       Title : Swagger.Nullable_UString;
       Description : Swagger.Nullable_UString;
     end record;

   package Hotspot_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Hotspot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Hotspot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Hotspot_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Hotspot_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Hotspot_Type_Vectors.Vector);




   type EventTypeSchema_Type is
     record
     end record;

   package EventTypeSchema_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EventTypeSchema_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventTypeSchema_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventTypeSchema_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventTypeSchema_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventTypeSchema_Type_Vectors.Vector);




   type EventIdSchema_Type is
     record
     end record;

   package EventIdSchema_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EventIdSchema_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventIdSchema_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventIdSchema_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventIdSchema_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventIdSchema_Type_Vectors.Vector);




   type BasicStreamBase_Type is
     record
       Stream_Id : Swagger.Nullable_Integer;
       Name : Swagger.Nullable_UString;
       Description : Swagger.Nullable_UString;
       Date_Created : Swagger.Nullable_Integer;
       Invite_Only : Swagger.Nullable_Boolean;
       Rendered_Description : Swagger.Nullable_UString;
       Is_Web_Public : Swagger.Nullable_Boolean;
       Stream_Post_Policy : Swagger.Nullable_Integer;
       Message_Retention_Days : Swagger.Nullable_Integer;
       History_Public_To_Subscribers : Swagger.Nullable_Boolean;
       First_Message_Id : Swagger.Nullable_Integer;
       Is_Announcement_Only : Swagger.Nullable_Boolean;
     end record;

   package BasicStreamBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicStreamBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamBase_Type_Vectors.Vector);




   type CustomProfileField_Type is
     record
       Id : Swagger.Nullable_Integer;
       P_Type : Swagger.Nullable_Integer;
       Order : Swagger.Nullable_Integer;
       Name : Swagger.Nullable_UString;
       Hint : Swagger.Nullable_UString;
       Field_Data : Swagger.Nullable_UString;
     end record;

   package CustomProfileField_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CustomProfileField_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomProfileField_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomProfileField_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CustomProfileField_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CustomProfileField_Type_Vectors.Vector);




   type RealmEmoji_Type is
     record
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Source_Url : Swagger.Nullable_UString;
       Deactivated : Swagger.Nullable_Boolean;
       Author_Id : Swagger.Nullable_Integer;
     end record;

   package RealmEmoji_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RealmEmoji_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmEmoji_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmEmoji_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmEmoji_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmEmoji_Type_Vectors.Vector);




   type RealmPlayground_Type is
     record
       Id : Swagger.Nullable_Integer;
       Name : Swagger.Nullable_UString;
       Pygments_Language : Swagger.Nullable_UString;
       Url_Prefix : Swagger.Nullable_UString;
     end record;

   package RealmPlayground_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RealmPlayground_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmPlayground_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmPlayground_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmPlayground_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmPlayground_Type_Vectors.Vector);




   type UserGroup_Type is
     record
       Name : Swagger.Nullable_UString;
       Description : Swagger.Nullable_UString;
       Members : Integer_Vectors.Vector;
       Id : Swagger.Nullable_Integer;
     end record;

   package UserGroup_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UserGroup_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserGroup_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserGroup_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserGroup_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserGroup_Type_Vectors.Vector);




   type Presence_Type is
     record
       Client : Swagger.Nullable_UString;
       Status : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_Integer;
       Pushable : Swagger.Nullable_Boolean;
     end record;

   package Presence_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Presence_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Presence_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Presence_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Presence_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Presence_Type_Vectors.Vector);




   type UserBase_Type is
     record
       Email : Swagger.Nullable_UString;
       Is_Bot : Swagger.Nullable_Boolean;
       Avatar_Url : Swagger.Nullable_UString;
       Avatar_Version : Swagger.Nullable_Integer;
       Full_Name : Swagger.Nullable_UString;
       Is_Admin : Swagger.Nullable_Boolean;
       Is_Owner : Swagger.Nullable_Boolean;
       Is_Billing_Admin : Swagger.Nullable_Boolean;
       Role : Swagger.Nullable_Integer;
       Bot_Type : Swagger.Nullable_Integer;
       User_Id : Swagger.Nullable_Integer;
       Bot_Owner_Id : Swagger.Nullable_Integer;
       Is_Active : Swagger.Nullable_Boolean;
       Is_Guest : Swagger.Nullable_Boolean;
       Timezone : Swagger.Nullable_UString;
       Date_Joined : Swagger.Nullable_UString;
       Delivery_Email : Swagger.Nullable_UString;
       Profile_Data : Swagger.Object_Map;
     end record;

   package UserBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UserBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserBase_Type_Vectors.Vector);




   type SuccessDescription_Type is
     record
     end record;

   package SuccessDescription_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SuccessDescription_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuccessDescription_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuccessDescription_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SuccessDescription_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SuccessDescription_Type_Vectors.Vector);




   type JsonSuccessBase_Type is
     record
       Result : Swagger.UString;
       Msg : Swagger.UString;
     end record;

   package JsonSuccessBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonSuccessBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBase_Type_Vectors.Vector);




   type JsonErrorBase_Type is
     record
       Result : Swagger.UString;
       Msg : Swagger.UString;
     end record;

   package JsonErrorBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonErrorBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBase_Type_Vectors.Vector);




   type EmojiReactionBaseUser_Type is
     record
       Id : Swagger.Nullable_Integer;
       Email : Swagger.Nullable_UString;
       Full_Name : Swagger.Nullable_UString;
       Is_Mirror_Dummy : Swagger.Nullable_Boolean;
     end record;

   package EmojiReactionBaseUser_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EmojiReactionBaseUser_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseUser_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseUser_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseUser_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseUser_Type_Vectors.Vector);




   type EmojiReactionBase_Type is
     record
       Emoji_Code : Swagger.Nullable_UString;
       Emoji_Name : Swagger.Nullable_UString;
       Reaction_Type : Swagger.Nullable_UString;
       User_Id : Swagger.Nullable_Integer;
       User : .Models.EmojiReactionBaseUser_Type;
     end record;

   package EmojiReactionBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EmojiReactionBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBase_Type_Vectors.Vector);




   type MessagesBaseTopicLinks_Type is
     record
       Text : Swagger.Nullable_UString;
       Url : Swagger.Nullable_UString;
     end record;

   package MessagesBaseTopicLinks_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => MessagesBaseTopicLinks_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBaseTopicLinks_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBaseTopicLinks_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBaseTopicLinks_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBaseTopicLinks_Type_Vectors.Vector);




   type JsonSuccessBaseAllOf_Type is
     record
       Result : Swagger.UString;
       Msg : Swagger.UString;
     end record;

   package JsonSuccessBaseAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonSuccessBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBaseAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBaseAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBaseAllOf_Type_Vectors.Vector);




   type BasicStream_Type is
     record
       Stream_Id : .Models.AnyType_Type;
       Name : .Models.AnyType_Type;
       Description : .Models.AnyType_Type;
       Date_Created : .Models.AnyType_Type;
       Invite_Only : .Models.AnyType_Type;
       Rendered_Description : .Models.AnyType_Type;
       Is_Web_Public : .Models.AnyType_Type;
       Stream_Post_Policy : .Models.AnyType_Type;
       Message_Retention_Days : .Models.AnyType_Type;
       History_Public_To_Subscribers : .Models.AnyType_Type;
       First_Message_Id : .Models.AnyType_Type;
       Is_Announcement_Only : .Models.AnyType_Type;
     end record;

   package BasicStream_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicStream_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStream_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStream_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStream_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStream_Type_Vectors.Vector);




   type BasicBot_Type is
     record
       User_Id : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Api_Key : .Models.AnyType_Type;
       Default_Sending_Stream : .Models.AnyType_Type;
       Default_Events_Register_Stream : .Models.AnyType_Type;
       Default_All_Public_Streams : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Owner_Id : .Models.AnyType_Type;
       Services : .Models.AnyType_Type;
     end record;

   package BasicBot_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicBot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBot_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBot_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBot_Type_Vectors.Vector);




   type BasicBotBase_Type is
     record
       User_Id : Swagger.Nullable_Integer;
       Full_Name : Swagger.Nullable_UString;
       Api_Key : Swagger.Nullable_UString;
       Default_Sending_Stream : Swagger.Nullable_UString;
       Default_Events_Register_Stream : Swagger.Nullable_UString;
       Default_All_Public_Streams : Swagger.Nullable_Boolean;
       Avatar_Url : Swagger.Nullable_UString;
       Owner_Id : Swagger.Nullable_Integer;
       Services : .Models.OneOfobjectobject_Type_Vectors.Vector;
     end record;

   package BasicBotBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicBotBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotBase_Type_Vectors.Vector);




   type Bot_Type is
     record
       User_Id : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Api_Key : .Models.AnyType_Type;
       Default_Sending_Stream : .Models.AnyType_Type;
       Default_Events_Register_Stream : .Models.AnyType_Type;
       Default_All_Public_Streams : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Owner_Id : .Models.AnyType_Type;
       Services : .Models.AnyType_Type;
       Email : Swagger.Nullable_UString;
       Bot_Type : Swagger.Nullable_Integer;
       Is_Active : Swagger.Nullable_Boolean;
     end record;

   package Bot_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Bot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Bot_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Bot_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Bot_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Bot_Type_Vectors.Vector);




   type DefaultStreamGroup_Type is
     record
       Name : Swagger.Nullable_UString;
       Description : Swagger.Nullable_UString;
       Id : Swagger.Nullable_Integer;
       Streams : .Models.BasicStream_Type_Vectors.Vector;
     end record;

   package DefaultStreamGroup_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => DefaultStreamGroup_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DefaultStreamGroup_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DefaultStreamGroup_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DefaultStreamGroup_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DefaultStreamGroup_Type_Vectors.Vector);




   type EmojiReaction_Type is
     record
       Emoji_Code : .Models.AnyType_Type;
       Emoji_Name : .Models.AnyType_Type;
       Reaction_Type : .Models.AnyType_Type;
       User_Id : .Models.AnyType_Type;
       User : .Models.AnyType_Type;
     end record;

   package EmojiReaction_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EmojiReaction_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReaction_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReaction_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReaction_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReaction_Type_Vectors.Vector);




   type Messages_Type is
     record
       Avatar_Url : .Models.AnyType_Type;
       Client : .Models.AnyType_Type;
       Content : .Models.AnyType_Type;
       Content_Type : .Models.AnyType_Type;
       Display_Recipient : .Models.AnyType_Type;
       Id : .Models.AnyType_Type;
       Is_Me_Message : .Models.AnyType_Type;
       Reactions : .Models.AnyType_Type;
       Recipient_Id : .Models.AnyType_Type;
       Sender_Email : .Models.AnyType_Type;
       Sender_Full_Name : .Models.AnyType_Type;
       Sender_Id : .Models.AnyType_Type;
       Sender_Realm_Str : .Models.AnyType_Type;
       Stream_Id : .Models.AnyType_Type;
       Subject : .Models.AnyType_Type;
       Topic_Links : .Models.AnyType_Type;
       Submessages : .Models.AnyType_Type;
       Timestamp : .Models.AnyType_Type;
       P_Type : .Models.AnyType_Type;
     end record;

   package Messages_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => Messages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Messages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Messages_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Messages_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Messages_Type_Vectors.Vector);




   type MessagesBase_Type is
     record
       Avatar_Url : Swagger.Nullable_UString;
       Client : Swagger.Nullable_UString;
       Content : Swagger.Nullable_UString;
       Content_Type : Swagger.Nullable_UString;
       Display_Recipient : .Models.OneOfstringarray_Type;
       Id : Swagger.Nullable_Integer;
       Is_Me_Message : Swagger.Nullable_Boolean;
       Reactions : .Models.EmojiReaction_Type_Vectors.Vector;
       Recipient_Id : Swagger.Nullable_Integer;
       Sender_Email : Swagger.Nullable_UString;
       Sender_Full_Name : Swagger.Nullable_UString;
       Sender_Id : Swagger.Nullable_Integer;
       Sender_Realm_Str : Swagger.Nullable_UString;
       Stream_Id : Swagger.Nullable_Integer;
       Subject : Swagger.Nullable_UString;
       Topic_Links : .Models.MessagesBaseTopicLinks_Type_Vectors.Vector;
       Submessages : Swagger.UString_Vectors.Vector;
       Timestamp : Swagger.Nullable_Integer;
       P_Type : Swagger.Nullable_UString;
     end record;

   package MessagesBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => MessagesBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBase_Type_Vectors.Vector);




   type GetMessages_Type is
     record
       Avatar_Url : .Models.AnyType_Type;
       Client : .Models.AnyType_Type;
       Content : .Models.AnyType_Type;
       Content_Type : .Models.AnyType_Type;
       Display_Recipient : .Models.AnyType_Type;
       Id : .Models.AnyType_Type;
       Is_Me_Message : .Models.AnyType_Type;
       Reactions : .Models.AnyType_Type;
       Recipient_Id : .Models.AnyType_Type;
       Sender_Email : .Models.AnyType_Type;
       Sender_Full_Name : .Models.AnyType_Type;
       Sender_Id : .Models.AnyType_Type;
       Sender_Realm_Str : .Models.AnyType_Type;
       Stream_Id : .Models.AnyType_Type;
       Subject : .Models.AnyType_Type;
       Topic_Links : .Models.AnyType_Type;
       Submessages : .Models.AnyType_Type;
       Timestamp : .Models.AnyType_Type;
       P_Type : .Models.AnyType_Type;
       Flags : Swagger.UString_Vectors.Vector;
       Last_Edit_Timestamp : Swagger.Nullable_Integer;
       Match_Content : Swagger.Nullable_UString;
       Match_Subject : Swagger.Nullable_UString;
     end record;

   package GetMessages_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => GetMessages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessages_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessages_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessages_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessages_Type_Vectors.Vector);




   type User_Type is
     record
       Email : .Models.AnyType_Type;
       Is_Bot : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Avatar_Version : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Is_Admin : .Models.AnyType_Type;
       Is_Owner : .Models.AnyType_Type;
       Is_Billing_Admin : .Models.AnyType_Type;
       Role : .Models.AnyType_Type;
       Bot_Type : .Models.AnyType_Type;
       User_Id : .Models.AnyType_Type;
       Bot_Owner_Id : .Models.AnyType_Type;
       Is_Active : .Models.AnyType_Type;
       Is_Guest : .Models.AnyType_Type;
       Timezone : .Models.AnyType_Type;
       Date_Joined : .Models.AnyType_Type;
       Delivery_Email : .Models.AnyType_Type;
       Profile_Data : .Models.AnyType_Type;
     end record;

   package User_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => User_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out User_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out User_Type_Vectors.Vector);




   type JsonSuccess_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
     end record;

   package JsonSuccess_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonSuccess_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccess_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccess_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccess_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccess_Type_Vectors.Vector);




   type JsonError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
     end record;

   package JsonError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonError_Type_Vectors.Vector);




   type ApiKeyResponse_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Api_Key : Swagger.UString;
       Email : Swagger.UString;
     end record;

   package ApiKeyResponse_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => ApiKeyResponse_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponse_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponse_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponse_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponse_Type_Vectors.Vector);




   type CodedError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package CodedError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CodedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedError_Type_Vectors.Vector);




   type CodedErrorBase_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : Swagger.Nullable_UString;
     end record;

   package CodedErrorBase_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CodedErrorBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBase_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBase_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBase_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBase_Type_Vectors.Vector);




   type BadEventQueueIdError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Queue_Id : Swagger.Nullable_UString;
     end record;

   package BadEventQueueIdError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BadEventQueueIdError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdError_Type_Vectors.Vector);




   type InvalidMessageError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Raw_Content : Swagger.Nullable_UString;
     end record;

   package InvalidMessageError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => InvalidMessageError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageError_Type_Vectors.Vector);




   type NonExistingStreamError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Stream : Swagger.Nullable_UString;
     end record;

   package NonExistingStreamError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => NonExistingStreamError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamError_Type_Vectors.Vector);




   type AddSubscriptionsResponse_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Subscribed : Swagger.UString_Vectors.Vector_Map;
       Already_Subscribed : Swagger.UString_Vectors.Vector_Map;
       Unauthorized : Swagger.UString_Vectors.Vector;
     end record;

   package AddSubscriptionsResponse_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => AddSubscriptionsResponse_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponse_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponse_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponse_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponse_Type_Vectors.Vector);




   type InvalidApiKeyError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
     end record;

   package InvalidApiKeyError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => InvalidApiKeyError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidApiKeyError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidApiKeyError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidApiKeyError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidApiKeyError_Type_Vectors.Vector);




   type MissingArgumentError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Var_Name : Swagger.Nullable_UString;
     end record;

   package MissingArgumentError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => MissingArgumentError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentError_Type_Vectors.Vector);




   type UserNotAuthorizedError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package UserNotAuthorizedError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UserNotAuthorizedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserNotAuthorizedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserNotAuthorizedError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserNotAuthorizedError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserNotAuthorizedError_Type_Vectors.Vector);




   type UserDeactivatedError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package UserDeactivatedError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UserDeactivatedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserDeactivatedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserDeactivatedError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserDeactivatedError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserDeactivatedError_Type_Vectors.Vector);




   type RateLimitedError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package RateLimitedError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RateLimitedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RateLimitedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RateLimitedError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RateLimitedError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RateLimitedError_Type_Vectors.Vector);




   type RealmDeactivatedError_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package RealmDeactivatedError_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => RealmDeactivatedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDeactivatedError_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDeactivatedError_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDeactivatedError_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDeactivatedError_Type_Vectors.Vector);




   type InlineResponse200_Type is
     record
       Bot_Email : Swagger.Nullable_UString;
       Bot_Full_Name : Swagger.Nullable_UString;
       Data : Swagger.Nullable_UString;
       Trigger : Swagger.Nullable_UString;
       Token : Swagger.Nullable_UString;
       Message : .Models.MessagesBase_Type;
     end record;

   package InlineResponse200_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => InlineResponse200_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineResponse200_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineResponse200_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InlineResponse200_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InlineResponse200_Type_Vectors.Vector);




   type BasicStreamAllOf_Type is
     record
       Stream_Id : .Models.AnyType_Type;
       Name : .Models.AnyType_Type;
       Description : .Models.AnyType_Type;
       Date_Created : .Models.AnyType_Type;
       Invite_Only : .Models.AnyType_Type;
       Rendered_Description : .Models.AnyType_Type;
       Is_Web_Public : .Models.AnyType_Type;
       Stream_Post_Policy : .Models.AnyType_Type;
       Message_Retention_Days : .Models.AnyType_Type;
       History_Public_To_Subscribers : .Models.AnyType_Type;
       First_Message_Id : .Models.AnyType_Type;
       Is_Announcement_Only : .Models.AnyType_Type;
     end record;

   package BasicStreamAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicStreamAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamAllOf_Type_Vectors.Vector);




   type BasicBotAllOf_Type is
     record
       User_Id : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Api_Key : .Models.AnyType_Type;
       Default_Sending_Stream : .Models.AnyType_Type;
       Default_Events_Register_Stream : .Models.AnyType_Type;
       Default_All_Public_Streams : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Owner_Id : .Models.AnyType_Type;
       Services : .Models.AnyType_Type;
     end record;

   package BasicBotAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BasicBotAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotAllOf_Type_Vectors.Vector);




   type BotAllOf_Type is
     record
       User_Id : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Api_Key : .Models.AnyType_Type;
       Default_Sending_Stream : .Models.AnyType_Type;
       Default_Events_Register_Stream : .Models.AnyType_Type;
       Default_All_Public_Streams : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Owner_Id : .Models.AnyType_Type;
       Services : .Models.AnyType_Type;
       Email : Swagger.Nullable_UString;
       Bot_Type : Swagger.Nullable_Integer;
       Is_Active : Swagger.Nullable_Boolean;
     end record;

   package BotAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BotAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BotAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BotAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BotAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BotAllOf_Type_Vectors.Vector);




   type EmojiReactionAllOf_Type is
     record
       Emoji_Code : .Models.AnyType_Type;
       Emoji_Name : .Models.AnyType_Type;
       Reaction_Type : .Models.AnyType_Type;
       User_Id : .Models.AnyType_Type;
       User : .Models.AnyType_Type;
     end record;

   package EmojiReactionAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => EmojiReactionAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionAllOf_Type_Vectors.Vector);




   type MessagesAllOf_Type is
     record
       Avatar_Url : .Models.AnyType_Type;
       Client : .Models.AnyType_Type;
       Content : .Models.AnyType_Type;
       Content_Type : .Models.AnyType_Type;
       Display_Recipient : .Models.AnyType_Type;
       Id : .Models.AnyType_Type;
       Is_Me_Message : .Models.AnyType_Type;
       Reactions : .Models.AnyType_Type;
       Recipient_Id : .Models.AnyType_Type;
       Sender_Email : .Models.AnyType_Type;
       Sender_Full_Name : .Models.AnyType_Type;
       Sender_Id : .Models.AnyType_Type;
       Sender_Realm_Str : .Models.AnyType_Type;
       Stream_Id : .Models.AnyType_Type;
       Subject : .Models.AnyType_Type;
       Topic_Links : .Models.AnyType_Type;
       Submessages : .Models.AnyType_Type;
       Timestamp : .Models.AnyType_Type;
       P_Type : .Models.AnyType_Type;
     end record;

   package MessagesAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => MessagesAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesAllOf_Type_Vectors.Vector);




   type GetMessagesAllOf_Type is
     record
       Avatar_Url : .Models.AnyType_Type;
       Client : .Models.AnyType_Type;
       Content : .Models.AnyType_Type;
       Content_Type : .Models.AnyType_Type;
       Display_Recipient : .Models.AnyType_Type;
       Id : .Models.AnyType_Type;
       Is_Me_Message : .Models.AnyType_Type;
       Reactions : .Models.AnyType_Type;
       Recipient_Id : .Models.AnyType_Type;
       Sender_Email : .Models.AnyType_Type;
       Sender_Full_Name : .Models.AnyType_Type;
       Sender_Id : .Models.AnyType_Type;
       Sender_Realm_Str : .Models.AnyType_Type;
       Stream_Id : .Models.AnyType_Type;
       Subject : .Models.AnyType_Type;
       Topic_Links : .Models.AnyType_Type;
       Submessages : .Models.AnyType_Type;
       Timestamp : .Models.AnyType_Type;
       P_Type : .Models.AnyType_Type;
       Flags : Swagger.UString_Vectors.Vector;
       Last_Edit_Timestamp : Swagger.Nullable_Integer;
       Match_Content : Swagger.Nullable_UString;
       Match_Subject : Swagger.Nullable_UString;
     end record;

   package GetMessagesAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => GetMessagesAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessagesAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessagesAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessagesAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessagesAllOf_Type_Vectors.Vector);




   type UserAllOf_Type is
     record
       Email : .Models.AnyType_Type;
       Is_Bot : .Models.AnyType_Type;
       Avatar_Url : .Models.AnyType_Type;
       Avatar_Version : .Models.AnyType_Type;
       Full_Name : .Models.AnyType_Type;
       Is_Admin : .Models.AnyType_Type;
       Is_Owner : .Models.AnyType_Type;
       Is_Billing_Admin : .Models.AnyType_Type;
       Role : .Models.AnyType_Type;
       Bot_Type : .Models.AnyType_Type;
       User_Id : .Models.AnyType_Type;
       Bot_Owner_Id : .Models.AnyType_Type;
       Is_Active : .Models.AnyType_Type;
       Is_Guest : .Models.AnyType_Type;
       Timezone : .Models.AnyType_Type;
       Date_Joined : .Models.AnyType_Type;
       Delivery_Email : .Models.AnyType_Type;
       Profile_Data : .Models.AnyType_Type;
     end record;

   package UserAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UserAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserAllOf_Type_Vectors.Vector);




   type JsonSuccessAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
     end record;

   package JsonSuccessAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => JsonSuccessAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessAllOf_Type_Vectors.Vector);




   type ApiKeyResponseAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Api_Key : Swagger.UString;
       Email : Swagger.UString;
     end record;

   package ApiKeyResponseAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => ApiKeyResponseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponseAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponseAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponseAllOf_Type_Vectors.Vector);




   type CodedErrorAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
     end record;

   package CodedErrorAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CodedErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorAllOf_Type_Vectors.Vector);




   type CodedErrorBaseAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : Swagger.Nullable_UString;
     end record;

   package CodedErrorBaseAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CodedErrorBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBaseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBaseAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBaseAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBaseAllOf_Type_Vectors.Vector);




   type BadEventQueueIdErrorAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Queue_Id : Swagger.Nullable_UString;
     end record;

   package BadEventQueueIdErrorAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => BadEventQueueIdErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdErrorAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdErrorAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdErrorAllOf_Type_Vectors.Vector);




   type InvalidMessageErrorAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Raw_Content : Swagger.Nullable_UString;
     end record;

   package InvalidMessageErrorAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => InvalidMessageErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageErrorAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageErrorAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageErrorAllOf_Type_Vectors.Vector);




   type NonExistingStreamErrorAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Stream : Swagger.Nullable_UString;
     end record;

   package NonExistingStreamErrorAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => NonExistingStreamErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamErrorAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamErrorAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamErrorAllOf_Type_Vectors.Vector);




   type AddSubscriptionsResponseAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Subscribed : Swagger.UString_Vectors.Vector_Map;
       Already_Subscribed : Swagger.UString_Vectors.Vector_Map;
       Unauthorized : Swagger.UString_Vectors.Vector;
     end record;

   package AddSubscriptionsResponseAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => AddSubscriptionsResponseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponseAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponseAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponseAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponseAllOf_Type_Vectors.Vector);




   type MissingArgumentErrorAllOf_Type is
     record
       Result : .Models.AnyType_Type;
       Msg : .Models.AnyType_Type;
       Code : .Models.AnyType_Type;
       Var_Name : Swagger.Nullable_UString;
     end record;

   package MissingArgumentErrorAllOf_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => MissingArgumentErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentErrorAllOf_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentErrorAllOf_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentErrorAllOf_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentErrorAllOf_Type_Vectors.Vector);



end .Models;
