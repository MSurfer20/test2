# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class EmojiBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'emoji_code': 'str',
        'emoji_name': 'str',
        'reaction_type': 'str'
    }

    attribute_map = {
        'emoji_code': 'emoji_code',
        'emoji_name': 'emoji_name',
        'reaction_type': 'reaction_type'
    }

    def __init__(self, emoji_code=None, emoji_name=None, reaction_type=None, local_vars_configuration=None):  # noqa: E501
        """EmojiBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._emoji_code = None
        self._emoji_name = None
        self._reaction_type = None
        self.discriminator = None

        if emoji_code is not None:
            self.emoji_code = emoji_code
        if emoji_name is not None:
            self.emoji_name = emoji_name
        if reaction_type is not None:
            self.reaction_type = reaction_type

    @property
    def emoji_code(self):
        """Gets the emoji_code of this EmojiBase.  # noqa: E501

        A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.   # noqa: E501

        :return: The emoji_code of this EmojiBase.  # noqa: E501
        :rtype: str
        """
        return self._emoji_code

    @emoji_code.setter
    def emoji_code(self, emoji_code):
        """Sets the emoji_code of this EmojiBase.

        A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.   # noqa: E501

        :param emoji_code: The emoji_code of this EmojiBase.  # noqa: E501
        :type emoji_code: str
        """

        self._emoji_code = emoji_code

    @property
    def emoji_name(self):
        """Gets the emoji_name of this EmojiBase.  # noqa: E501

        Name of the emoji.   # noqa: E501

        :return: The emoji_name of this EmojiBase.  # noqa: E501
        :rtype: str
        """
        return self._emoji_name

    @emoji_name.setter
    def emoji_name(self, emoji_name):
        """Sets the emoji_name of this EmojiBase.

        Name of the emoji.   # noqa: E501

        :param emoji_name: The emoji_name of this EmojiBase.  # noqa: E501
        :type emoji_name: str
        """

        self._emoji_name = emoji_name

    @property
    def reaction_type(self):
        """Gets the reaction_type of this EmojiBase.  # noqa: E501

        One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji.   # noqa: E501

        :return: The reaction_type of this EmojiBase.  # noqa: E501
        :rtype: str
        """
        return self._reaction_type

    @reaction_type.setter
    def reaction_type(self, reaction_type):
        """Sets the reaction_type of this EmojiBase.

        One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji.   # noqa: E501

        :param reaction_type: The reaction_type of this EmojiBase.  # noqa: E501
        :type reaction_type: str
        """

        self._reaction_type = reaction_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmojiBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmojiBase):
            return True

        return self.to_dict() != other.to_dict()
