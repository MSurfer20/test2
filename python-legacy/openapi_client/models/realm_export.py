# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RealmExport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'acting_user_id': 'int',
        'export_time': 'float',
        'deleted_timestamp': 'float',
        'failed_timestamp': 'float',
        'export_url': 'str',
        'pending': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'acting_user_id': 'acting_user_id',
        'export_time': 'export_time',
        'deleted_timestamp': 'deleted_timestamp',
        'failed_timestamp': 'failed_timestamp',
        'export_url': 'export_url',
        'pending': 'pending'
    }

    def __init__(self, id=None, acting_user_id=None, export_time=None, deleted_timestamp=None, failed_timestamp=None, export_url=None, pending=None, local_vars_configuration=None):  # noqa: E501
        """RealmExport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._acting_user_id = None
        self._export_time = None
        self._deleted_timestamp = None
        self._failed_timestamp = None
        self._export_url = None
        self._pending = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if acting_user_id is not None:
            self.acting_user_id = acting_user_id
        if export_time is not None:
            self.export_time = export_time
        self.deleted_timestamp = deleted_timestamp
        self.failed_timestamp = failed_timestamp
        self.export_url = export_url
        if pending is not None:
            self.pending = pending

    @property
    def id(self):
        """Gets the id of this RealmExport.  # noqa: E501

        The id of the export.   # noqa: E501

        :return: The id of this RealmExport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RealmExport.

        The id of the export.   # noqa: E501

        :param id: The id of this RealmExport.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def acting_user_id(self):
        """Gets the acting_user_id of this RealmExport.  # noqa: E501

        The id of the user who did the export.   # noqa: E501

        :return: The acting_user_id of this RealmExport.  # noqa: E501
        :rtype: int
        """
        return self._acting_user_id

    @acting_user_id.setter
    def acting_user_id(self, acting_user_id):
        """Sets the acting_user_id of this RealmExport.

        The id of the user who did the export.   # noqa: E501

        :param acting_user_id: The acting_user_id of this RealmExport.  # noqa: E501
        :type acting_user_id: int
        """

        self._acting_user_id = acting_user_id

    @property
    def export_time(self):
        """Gets the export_time of this RealmExport.  # noqa: E501

        The UNIX timestamp of when the export was made.   # noqa: E501

        :return: The export_time of this RealmExport.  # noqa: E501
        :rtype: float
        """
        return self._export_time

    @export_time.setter
    def export_time(self, export_time):
        """Sets the export_time of this RealmExport.

        The UNIX timestamp of when the export was made.   # noqa: E501

        :param export_time: The export_time of this RealmExport.  # noqa: E501
        :type export_time: float
        """

        self._export_time = export_time

    @property
    def deleted_timestamp(self):
        """Gets the deleted_timestamp of this RealmExport.  # noqa: E501

        The timestamp of when the export was deleted. Null if it wasn't.   # noqa: E501

        :return: The deleted_timestamp of this RealmExport.  # noqa: E501
        :rtype: float
        """
        return self._deleted_timestamp

    @deleted_timestamp.setter
    def deleted_timestamp(self, deleted_timestamp):
        """Sets the deleted_timestamp of this RealmExport.

        The timestamp of when the export was deleted. Null if it wasn't.   # noqa: E501

        :param deleted_timestamp: The deleted_timestamp of this RealmExport.  # noqa: E501
        :type deleted_timestamp: float
        """

        self._deleted_timestamp = deleted_timestamp

    @property
    def failed_timestamp(self):
        """Gets the failed_timestamp of this RealmExport.  # noqa: E501

        The timestamp of when the export failed. Null if it didn't.   # noqa: E501

        :return: The failed_timestamp of this RealmExport.  # noqa: E501
        :rtype: float
        """
        return self._failed_timestamp

    @failed_timestamp.setter
    def failed_timestamp(self, failed_timestamp):
        """Sets the failed_timestamp of this RealmExport.

        The timestamp of when the export failed. Null if it didn't.   # noqa: E501

        :param failed_timestamp: The failed_timestamp of this RealmExport.  # noqa: E501
        :type failed_timestamp: float
        """

        self._failed_timestamp = failed_timestamp

    @property
    def export_url(self):
        """Gets the export_url of this RealmExport.  # noqa: E501

        The URL of the export. `null` if there's no URL.   # noqa: E501

        :return: The export_url of this RealmExport.  # noqa: E501
        :rtype: str
        """
        return self._export_url

    @export_url.setter
    def export_url(self, export_url):
        """Sets the export_url of this RealmExport.

        The URL of the export. `null` if there's no URL.   # noqa: E501

        :param export_url: The export_url of this RealmExport.  # noqa: E501
        :type export_url: str
        """

        self._export_url = export_url

    @property
    def pending(self):
        """Gets the pending of this RealmExport.  # noqa: E501

        Whether the export is pending or not.   # noqa: E501

        :return: The pending of this RealmExport.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this RealmExport.

        Whether the export is pending or not.   # noqa: E501

        :param pending: The pending of this RealmExport.  # noqa: E501
        :type pending: bool
        """

        self._pending = pending

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RealmExport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RealmExport):
            return True

        return self.to_dict() != other.to_dict()
