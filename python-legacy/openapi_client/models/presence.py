# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Presence(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client': 'str',
        'status': 'str',
        'timestamp': 'int',
        'pushable': 'bool'
    }

    attribute_map = {
        'client': 'client',
        'status': 'status',
        'timestamp': 'timestamp',
        'pushable': 'pushable'
    }

    def __init__(self, client=None, status=None, timestamp=None, pushable=None, local_vars_configuration=None):  # noqa: E501
        """Presence - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._client = None
        self._status = None
        self._timestamp = None
        self._pushable = None
        self.discriminator = None

        if client is not None:
            self.client = client
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp
        if pushable is not None:
            self.pushable = pushable

    @property
    def client(self):
        """Gets the client of this Presence.  # noqa: E501

        The client's platform name.   # noqa: E501

        :return: The client of this Presence.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Presence.

        The client's platform name.   # noqa: E501

        :param client: The client of this Presence.  # noqa: E501
        :type client: str
        """

        self._client = client

    @property
    def status(self):
        """Gets the status of this Presence.  # noqa: E501

        The status of the user on this client. It is either `idle` or `active`.   # noqa: E501

        :return: The status of this Presence.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Presence.

        The status of the user on this client. It is either `idle` or `active`.   # noqa: E501

        :param status: The status of this Presence.  # noqa: E501
        :type status: str
        """
        allowed_values = ["idle", "active"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this Presence.  # noqa: E501

        The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.   # noqa: E501

        :return: The timestamp of this Presence.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Presence.

        The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.   # noqa: E501

        :param timestamp: The timestamp of this Presence.  # noqa: E501
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def pushable(self):
        """Gets the pushable of this Presence.  # noqa: E501

        Whether the client is capable of showing mobile/push notifications to the user.   # noqa: E501

        :return: The pushable of this Presence.  # noqa: E501
        :rtype: bool
        """
        return self._pushable

    @pushable.setter
    def pushable(self, pushable):
        """Sets the pushable of this Presence.

        Whether the client is capable of showing mobile/push notifications to the user.   # noqa: E501

        :param pushable: The pushable of this Presence.  # noqa: E501
        :type pushable: bool
        """

        self._pushable = pushable

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Presence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Presence):
            return True

        return self.to_dict() != other.to_dict()
