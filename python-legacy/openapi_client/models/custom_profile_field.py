# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class CustomProfileField(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'int',
        'order': 'int',
        'name': 'str',
        'hint': 'str',
        'field_data': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'order': 'order',
        'name': 'name',
        'hint': 'hint',
        'field_data': 'field_data'
    }

    def __init__(self, id=None, type=None, order=None, name=None, hint=None, field_data=None, local_vars_configuration=None):  # noqa: E501
        """CustomProfileField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._order = None
        self._name = None
        self._hint = None
        self._field_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if order is not None:
            self.order = order
        if name is not None:
            self.name = name
        if hint is not None:
            self.hint = hint
        if field_data is not None:
            self.field_data = field_data

    @property
    def id(self):
        """Gets the id of this CustomProfileField.  # noqa: E501

        The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.   # noqa: E501

        :return: The id of this CustomProfileField.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomProfileField.

        The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.   # noqa: E501

        :param id: The id of this CustomProfileField.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CustomProfileField.  # noqa: E501

        An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account   # noqa: E501

        :return: The type of this CustomProfileField.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomProfileField.

        An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account   # noqa: E501

        :param type: The type of this CustomProfileField.  # noqa: E501
        :type type: int
        """

        self._type = type

    @property
    def order(self):
        """Gets the order of this CustomProfileField.  # noqa: E501

        Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.   # noqa: E501

        :return: The order of this CustomProfileField.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CustomProfileField.

        Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.   # noqa: E501

        :param order: The order of this CustomProfileField.  # noqa: E501
        :type order: int
        """

        self._order = order

    @property
    def name(self):
        """Gets the name of this CustomProfileField.  # noqa: E501

        The name of the custom profile field.   # noqa: E501

        :return: The name of this CustomProfileField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomProfileField.

        The name of the custom profile field.   # noqa: E501

        :param name: The name of this CustomProfileField.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def hint(self):
        """Gets the hint of this CustomProfileField.  # noqa: E501

        The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.   # noqa: E501

        :return: The hint of this CustomProfileField.  # noqa: E501
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this CustomProfileField.

        The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.   # noqa: E501

        :param hint: The hint of this CustomProfileField.  # noqa: E501
        :type hint: str
        """

        self._hint = hint

    @property
    def field_data(self):
        """Gets the field_data of this CustomProfileField.  # noqa: E501

        Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.   # noqa: E501

        :return: The field_data of this CustomProfileField.  # noqa: E501
        :rtype: str
        """
        return self._field_data

    @field_data.setter
    def field_data(self, field_data):
        """Sets the field_data of this CustomProfileField.

        Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.   # noqa: E501

        :param field_data: The field_data of this CustomProfileField.  # noqa: E501
        :type field_data: str
        """

        self._field_data = field_data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomProfileField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomProfileField):
            return True

        return self.to_dict() != other.to_dict()
