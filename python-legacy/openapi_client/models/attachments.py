# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Attachments(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'path_id': 'str',
        'size': 'int',
        'create_time': 'int',
        'messages': 'list[AttachmentsMessages]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'path_id': 'path_id',
        'size': 'size',
        'create_time': 'create_time',
        'messages': 'messages'
    }

    def __init__(self, id=None, name=None, path_id=None, size=None, create_time=None, messages=None, local_vars_configuration=None):  # noqa: E501
        """Attachments - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._path_id = None
        self._size = None
        self._create_time = None
        self._messages = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if path_id is not None:
            self.path_id = path_id
        if size is not None:
            self.size = size
        if create_time is not None:
            self.create_time = create_time
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this Attachments.  # noqa: E501

        The unique ID for the attachment.   # noqa: E501

        :return: The id of this Attachments.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachments.

        The unique ID for the attachment.   # noqa: E501

        :param id: The id of this Attachments.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Attachments.  # noqa: E501

        Name of the uploaded file.   # noqa: E501

        :return: The name of this Attachments.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachments.

        Name of the uploaded file.   # noqa: E501

        :param name: The name of this Attachments.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def path_id(self):
        """Gets the path_id of this Attachments.  # noqa: E501

        A representation of the path of the file within the repository of user-uploaded files.  If the `path_id` of a file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be: `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.   # noqa: E501

        :return: The path_id of this Attachments.  # noqa: E501
        :rtype: str
        """
        return self._path_id

    @path_id.setter
    def path_id(self, path_id):
        """Sets the path_id of this Attachments.

        A representation of the path of the file within the repository of user-uploaded files.  If the `path_id` of a file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be: `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.   # noqa: E501

        :param path_id: The path_id of this Attachments.  # noqa: E501
        :type path_id: str
        """

        self._path_id = path_id

    @property
    def size(self):
        """Gets the size of this Attachments.  # noqa: E501

        Size of the file in bytes.   # noqa: E501

        :return: The size of this Attachments.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Attachments.

        Size of the file in bytes.   # noqa: E501

        :param size: The size of this Attachments.  # noqa: E501
        :type size: int
        """

        self._size = size

    @property
    def create_time(self):
        """Gets the create_time of this Attachments.  # noqa: E501

        Time when the attachment was uploaded as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously a floating point number.   # noqa: E501

        :return: The create_time of this Attachments.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Attachments.

        Time when the attachment was uploaded as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously a floating point number.   # noqa: E501

        :param create_time: The create_time of this Attachments.  # noqa: E501
        :type create_time: int
        """

        self._create_time = create_time

    @property
    def messages(self):
        """Gets the messages of this Attachments.  # noqa: E501

        Contains basic details on any Zulip messages that have been sent referencing this [uploaded file](/api/upload-file). This includes messages sent by any user in the Zulip organization who sent a message containing a link to the uploaded file.   # noqa: E501

        :return: The messages of this Attachments.  # noqa: E501
        :rtype: list[AttachmentsMessages]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Attachments.

        Contains basic details on any Zulip messages that have been sent referencing this [uploaded file](/api/upload-file). This includes messages sent by any user in the Zulip organization who sent a message containing a link to the uploaded file.   # noqa: E501

        :param messages: The messages of this Attachments.  # noqa: E501
        :type messages: list[AttachmentsMessages]
        """

        self._messages = messages

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachments):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Attachments):
            return True

        return self.to_dict() != other.to_dict()
