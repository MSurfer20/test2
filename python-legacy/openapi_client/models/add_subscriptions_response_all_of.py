# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class AddSubscriptionsResponseAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'result': 'object',
        'msg': 'object',
        'subscribed': 'dict(str, list[str])',
        'already_subscribed': 'dict(str, list[str])',
        'unauthorized': 'list[str]'
    }

    attribute_map = {
        'result': 'result',
        'msg': 'msg',
        'subscribed': 'subscribed',
        'already_subscribed': 'already_subscribed',
        'unauthorized': 'unauthorized'
    }

    def __init__(self, result=None, msg=None, subscribed=None, already_subscribed=None, unauthorized=None, local_vars_configuration=None):  # noqa: E501
        """AddSubscriptionsResponseAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._result = None
        self._msg = None
        self._subscribed = None
        self._already_subscribed = None
        self._unauthorized = None
        self.discriminator = None

        self.result = result
        self.msg = msg
        if subscribed is not None:
            self.subscribed = subscribed
        if already_subscribed is not None:
            self.already_subscribed = already_subscribed
        if unauthorized is not None:
            self.unauthorized = unauthorized

    @property
    def result(self):
        """Gets the result of this AddSubscriptionsResponseAllOf.  # noqa: E501


        :return: The result of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AddSubscriptionsResponseAllOf.


        :param result: The result of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :type result: object
        """

        self._result = result

    @property
    def msg(self):
        """Gets the msg of this AddSubscriptionsResponseAllOf.  # noqa: E501


        :return: The msg of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :rtype: object
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this AddSubscriptionsResponseAllOf.


        :param msg: The msg of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :type msg: object
        """

        self._msg = msg

    @property
    def subscribed(self):
        """Gets the subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.   # noqa: E501

        :return: The subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.   # noqa: E501

        :param subscribed: The subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :type subscribed: dict(str, list[str])
        """

        self._subscribed = subscribed

    @property
    def already_subscribed(self):
        """Gets the already_subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.   # noqa: E501

        :return: The already_subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._already_subscribed

    @already_subscribed.setter
    def already_subscribed(self, already_subscribed):
        """Sets the already_subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.   # noqa: E501

        :param already_subscribed: The already_subscribed of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :type already_subscribed: dict(str, list[str])
        """

        self._already_subscribed = already_subscribed

    @property
    def unauthorized(self):
        """Gets the unauthorized of this AddSubscriptionsResponseAllOf.  # noqa: E501

        A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`.   # noqa: E501

        :return: The unauthorized of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._unauthorized

    @unauthorized.setter
    def unauthorized(self, unauthorized):
        """Sets the unauthorized of this AddSubscriptionsResponseAllOf.

        A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`.   # noqa: E501

        :param unauthorized: The unauthorized of this AddSubscriptionsResponseAllOf.  # noqa: E501
        :type unauthorized: list[str]
        """

        self._unauthorized = unauthorized

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSubscriptionsResponseAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AddSubscriptionsResponseAllOf):
            return True

        return self.to_dict() != other.to_dict()
