# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class GetMessagesAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar_url': 'object',
        'client': 'object',
        'content': 'object',
        'content_type': 'object',
        'display_recipient': 'object',
        'id': 'object',
        'is_me_message': 'object',
        'reactions': 'object',
        'recipient_id': 'object',
        'sender_email': 'object',
        'sender_full_name': 'object',
        'sender_id': 'object',
        'sender_realm_str': 'object',
        'stream_id': 'object',
        'subject': 'object',
        'topic_links': 'object',
        'submessages': 'object',
        'timestamp': 'object',
        'type': 'object',
        'flags': 'list[str]',
        'last_edit_timestamp': 'int',
        'match_content': 'str',
        'match_subject': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatar_url',
        'client': 'client',
        'content': 'content',
        'content_type': 'content_type',
        'display_recipient': 'display_recipient',
        'id': 'id',
        'is_me_message': 'is_me_message',
        'reactions': 'reactions',
        'recipient_id': 'recipient_id',
        'sender_email': 'sender_email',
        'sender_full_name': 'sender_full_name',
        'sender_id': 'sender_id',
        'sender_realm_str': 'sender_realm_str',
        'stream_id': 'stream_id',
        'subject': 'subject',
        'topic_links': 'topic_links',
        'submessages': 'submessages',
        'timestamp': 'timestamp',
        'type': 'type',
        'flags': 'flags',
        'last_edit_timestamp': 'last_edit_timestamp',
        'match_content': 'match_content',
        'match_subject': 'match_subject'
    }

    def __init__(self, avatar_url=None, client=None, content=None, content_type=None, display_recipient=None, id=None, is_me_message=None, reactions=None, recipient_id=None, sender_email=None, sender_full_name=None, sender_id=None, sender_realm_str=None, stream_id=None, subject=None, topic_links=None, submessages=None, timestamp=None, type=None, flags=None, last_edit_timestamp=None, match_content=None, match_subject=None, local_vars_configuration=None):  # noqa: E501
        """GetMessagesAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._avatar_url = None
        self._client = None
        self._content = None
        self._content_type = None
        self._display_recipient = None
        self._id = None
        self._is_me_message = None
        self._reactions = None
        self._recipient_id = None
        self._sender_email = None
        self._sender_full_name = None
        self._sender_id = None
        self._sender_realm_str = None
        self._stream_id = None
        self._subject = None
        self._topic_links = None
        self._submessages = None
        self._timestamp = None
        self._type = None
        self._flags = None
        self._last_edit_timestamp = None
        self._match_content = None
        self._match_subject = None
        self.discriminator = None

        self.avatar_url = avatar_url
        self.client = client
        self.content = content
        self.content_type = content_type
        self.display_recipient = display_recipient
        self.id = id
        self.is_me_message = is_me_message
        self.reactions = reactions
        self.recipient_id = recipient_id
        self.sender_email = sender_email
        self.sender_full_name = sender_full_name
        self.sender_id = sender_id
        self.sender_realm_str = sender_realm_str
        self.stream_id = stream_id
        self.subject = subject
        self.topic_links = topic_links
        self.submessages = submessages
        self.timestamp = timestamp
        self.type = type
        if flags is not None:
            self.flags = flags
        if last_edit_timestamp is not None:
            self.last_edit_timestamp = last_edit_timestamp
        if match_content is not None:
            self.match_content = match_content
        if match_subject is not None:
            self.match_subject = match_subject

    @property
    def avatar_url(self):
        """Gets the avatar_url of this GetMessagesAllOf.  # noqa: E501


        :return: The avatar_url of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this GetMessagesAllOf.


        :param avatar_url: The avatar_url of this GetMessagesAllOf.  # noqa: E501
        :type avatar_url: object
        """

        self._avatar_url = avatar_url

    @property
    def client(self):
        """Gets the client of this GetMessagesAllOf.  # noqa: E501


        :return: The client of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this GetMessagesAllOf.


        :param client: The client of this GetMessagesAllOf.  # noqa: E501
        :type client: object
        """

        self._client = client

    @property
    def content(self):
        """Gets the content of this GetMessagesAllOf.  # noqa: E501


        :return: The content of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GetMessagesAllOf.


        :param content: The content of this GetMessagesAllOf.  # noqa: E501
        :type content: object
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this GetMessagesAllOf.  # noqa: E501


        :return: The content_type of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this GetMessagesAllOf.


        :param content_type: The content_type of this GetMessagesAllOf.  # noqa: E501
        :type content_type: object
        """

        self._content_type = content_type

    @property
    def display_recipient(self):
        """Gets the display_recipient of this GetMessagesAllOf.  # noqa: E501


        :return: The display_recipient of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._display_recipient

    @display_recipient.setter
    def display_recipient(self, display_recipient):
        """Sets the display_recipient of this GetMessagesAllOf.


        :param display_recipient: The display_recipient of this GetMessagesAllOf.  # noqa: E501
        :type display_recipient: object
        """

        self._display_recipient = display_recipient

    @property
    def id(self):
        """Gets the id of this GetMessagesAllOf.  # noqa: E501


        :return: The id of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetMessagesAllOf.


        :param id: The id of this GetMessagesAllOf.  # noqa: E501
        :type id: object
        """

        self._id = id

    @property
    def is_me_message(self):
        """Gets the is_me_message of this GetMessagesAllOf.  # noqa: E501


        :return: The is_me_message of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._is_me_message

    @is_me_message.setter
    def is_me_message(self, is_me_message):
        """Sets the is_me_message of this GetMessagesAllOf.


        :param is_me_message: The is_me_message of this GetMessagesAllOf.  # noqa: E501
        :type is_me_message: object
        """

        self._is_me_message = is_me_message

    @property
    def reactions(self):
        """Gets the reactions of this GetMessagesAllOf.  # noqa: E501


        :return: The reactions of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this GetMessagesAllOf.


        :param reactions: The reactions of this GetMessagesAllOf.  # noqa: E501
        :type reactions: object
        """

        self._reactions = reactions

    @property
    def recipient_id(self):
        """Gets the recipient_id of this GetMessagesAllOf.  # noqa: E501


        :return: The recipient_id of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._recipient_id

    @recipient_id.setter
    def recipient_id(self, recipient_id):
        """Sets the recipient_id of this GetMessagesAllOf.


        :param recipient_id: The recipient_id of this GetMessagesAllOf.  # noqa: E501
        :type recipient_id: object
        """

        self._recipient_id = recipient_id

    @property
    def sender_email(self):
        """Gets the sender_email of this GetMessagesAllOf.  # noqa: E501


        :return: The sender_email of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this GetMessagesAllOf.


        :param sender_email: The sender_email of this GetMessagesAllOf.  # noqa: E501
        :type sender_email: object
        """

        self._sender_email = sender_email

    @property
    def sender_full_name(self):
        """Gets the sender_full_name of this GetMessagesAllOf.  # noqa: E501


        :return: The sender_full_name of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._sender_full_name

    @sender_full_name.setter
    def sender_full_name(self, sender_full_name):
        """Sets the sender_full_name of this GetMessagesAllOf.


        :param sender_full_name: The sender_full_name of this GetMessagesAllOf.  # noqa: E501
        :type sender_full_name: object
        """

        self._sender_full_name = sender_full_name

    @property
    def sender_id(self):
        """Gets the sender_id of this GetMessagesAllOf.  # noqa: E501


        :return: The sender_id of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this GetMessagesAllOf.


        :param sender_id: The sender_id of this GetMessagesAllOf.  # noqa: E501
        :type sender_id: object
        """

        self._sender_id = sender_id

    @property
    def sender_realm_str(self):
        """Gets the sender_realm_str of this GetMessagesAllOf.  # noqa: E501


        :return: The sender_realm_str of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._sender_realm_str

    @sender_realm_str.setter
    def sender_realm_str(self, sender_realm_str):
        """Sets the sender_realm_str of this GetMessagesAllOf.


        :param sender_realm_str: The sender_realm_str of this GetMessagesAllOf.  # noqa: E501
        :type sender_realm_str: object
        """

        self._sender_realm_str = sender_realm_str

    @property
    def stream_id(self):
        """Gets the stream_id of this GetMessagesAllOf.  # noqa: E501


        :return: The stream_id of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this GetMessagesAllOf.


        :param stream_id: The stream_id of this GetMessagesAllOf.  # noqa: E501
        :type stream_id: object
        """

        self._stream_id = stream_id

    @property
    def subject(self):
        """Gets the subject of this GetMessagesAllOf.  # noqa: E501


        :return: The subject of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GetMessagesAllOf.


        :param subject: The subject of this GetMessagesAllOf.  # noqa: E501
        :type subject: object
        """

        self._subject = subject

    @property
    def topic_links(self):
        """Gets the topic_links of this GetMessagesAllOf.  # noqa: E501


        :return: The topic_links of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._topic_links

    @topic_links.setter
    def topic_links(self, topic_links):
        """Sets the topic_links of this GetMessagesAllOf.


        :param topic_links: The topic_links of this GetMessagesAllOf.  # noqa: E501
        :type topic_links: object
        """

        self._topic_links = topic_links

    @property
    def submessages(self):
        """Gets the submessages of this GetMessagesAllOf.  # noqa: E501


        :return: The submessages of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._submessages

    @submessages.setter
    def submessages(self, submessages):
        """Sets the submessages of this GetMessagesAllOf.


        :param submessages: The submessages of this GetMessagesAllOf.  # noqa: E501
        :type submessages: object
        """

        self._submessages = submessages

    @property
    def timestamp(self):
        """Gets the timestamp of this GetMessagesAllOf.  # noqa: E501


        :return: The timestamp of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetMessagesAllOf.


        :param timestamp: The timestamp of this GetMessagesAllOf.  # noqa: E501
        :type timestamp: object
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this GetMessagesAllOf.  # noqa: E501


        :return: The type of this GetMessagesAllOf.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetMessagesAllOf.


        :param type: The type of this GetMessagesAllOf.  # noqa: E501
        :type type: object
        """

        self._type = type

    @property
    def flags(self):
        """Gets the flags of this GetMessagesAllOf.  # noqa: E501

        The user's [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags   # noqa: E501

        :return: The flags of this GetMessagesAllOf.  # noqa: E501
        :rtype: list[str]
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this GetMessagesAllOf.

        The user's [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags   # noqa: E501

        :param flags: The flags of this GetMessagesAllOf.  # noqa: E501
        :type flags: list[str]
        """

        self._flags = flags

    @property
    def last_edit_timestamp(self):
        """Gets the last_edit_timestamp of this GetMessagesAllOf.  # noqa: E501

        The UNIX timestamp for when the message was last edited, in UTC seconds.   # noqa: E501

        :return: The last_edit_timestamp of this GetMessagesAllOf.  # noqa: E501
        :rtype: int
        """
        return self._last_edit_timestamp

    @last_edit_timestamp.setter
    def last_edit_timestamp(self, last_edit_timestamp):
        """Sets the last_edit_timestamp of this GetMessagesAllOf.

        The UNIX timestamp for when the message was last edited, in UTC seconds.   # noqa: E501

        :param last_edit_timestamp: The last_edit_timestamp of this GetMessagesAllOf.  # noqa: E501
        :type last_edit_timestamp: int
        """

        self._last_edit_timestamp = last_edit_timestamp

    @property
    def match_content(self):
        """Gets the match_content of this GetMessagesAllOf.  # noqa: E501

        Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.   # noqa: E501

        :return: The match_content of this GetMessagesAllOf.  # noqa: E501
        :rtype: str
        """
        return self._match_content

    @match_content.setter
    def match_content(self, match_content):
        """Sets the match_content of this GetMessagesAllOf.

        Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.   # noqa: E501

        :param match_content: The match_content of this GetMessagesAllOf.  # noqa: E501
        :type match_content: str
        """

        self._match_content = match_content

    @property
    def match_subject(self):
        """Gets the match_subject of this GetMessagesAllOf.  # noqa: E501

        Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.   # noqa: E501

        :return: The match_subject of this GetMessagesAllOf.  # noqa: E501
        :rtype: str
        """
        return self._match_subject

    @match_subject.setter
    def match_subject(self, match_subject):
        """Sets the match_subject of this GetMessagesAllOf.

        Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.   # noqa: E501

        :param match_subject: The match_subject of this GetMessagesAllOf.  # noqa: E501
        :type match_subject: str
        """

        self._match_subject = match_subject

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMessagesAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetMessagesAllOf):
            return True

        return self.to_dict() != other.to_dict()
