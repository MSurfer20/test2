# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Draft(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'type': 'str',
        'to': 'list[int]',
        'topic': 'str',
        'content': 'str',
        'timestamp': 'float'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'to': 'to',
        'topic': 'topic',
        'content': 'content',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, type=None, to=None, topic=None, content=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """Draft - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._type = None
        self._to = None
        self._topic = None
        self._content = None
        self._timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.type = type
        self.to = to
        self.topic = topic
        self.content = content
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this Draft.  # noqa: E501

        The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited.   # noqa: E501

        :return: The id of this Draft.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Draft.

        The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited.   # noqa: E501

        :param id: The id of this Draft.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Draft.  # noqa: E501

        The type of the draft. Either unaddressed (empty string), \"stream\", or \"private\" (for PMs and private group messages).   # noqa: E501

        :return: The type of this Draft.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Draft.

        The type of the draft. Either unaddressed (empty string), \"stream\", or \"private\" (for PMs and private group messages).   # noqa: E501

        :param type: The type of this Draft.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["", "stream", "private"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def to(self):
        """Gets the to of this Draft.  # noqa: E501

        An array of the tentative target audience IDs. For \"stream\" messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array.   # noqa: E501

        :return: The to of this Draft.  # noqa: E501
        :rtype: list[int]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Draft.

        An array of the tentative target audience IDs. For \"stream\" messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array.   # noqa: E501

        :param to: The to of this Draft.  # noqa: E501
        :type to: list[int]
        """
        if self.local_vars_configuration.client_side_validation and to is None:  # noqa: E501
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def topic(self):
        """Gets the topic of this Draft.  # noqa: E501

        For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes.   # noqa: E501

        :return: The topic of this Draft.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Draft.

        For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes.   # noqa: E501

        :param topic: The topic of this Draft.  # noqa: E501
        :type topic: str
        """
        if self.local_vars_configuration.client_side_validation and topic is None:  # noqa: E501
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def content(self):
        """Gets the content of this Draft.  # noqa: E501

        The body of the draft. Should not contain null bytes.   # noqa: E501

        :return: The content of this Draft.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Draft.

        The body of the draft. Should not contain null bytes.   # noqa: E501

        :param content: The content of this Draft.  # noqa: E501
        :type content: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def timestamp(self):
        """Gets the timestamp of this Draft.  # noqa: E501

        A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server.   # noqa: E501

        :return: The timestamp of this Draft.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Draft.

        A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server.   # noqa: E501

        :param timestamp: The timestamp of this Draft.  # noqa: E501
        :type timestamp: float
        """

        self._timestamp = timestamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Draft):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Draft):
            return True

        return self.to_dict() != other.to_dict()
