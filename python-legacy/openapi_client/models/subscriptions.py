# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Subscriptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stream_id': 'int',
        'name': 'str',
        'description': 'str',
        'rendered_description': 'str',
        'date_created': 'int',
        'invite_only': 'bool',
        'subscribers': 'list[int]',
        'desktop_notifications': 'bool',
        'email_notifications': 'bool',
        'wildcard_mentions_notify': 'bool',
        'push_notifications': 'bool',
        'audible_notifications': 'bool',
        'pin_to_top': 'bool',
        'email_address': 'str',
        'is_muted': 'bool',
        'in_home_view': 'bool',
        'is_announcement_only': 'bool',
        'is_web_public': 'bool',
        'role': 'int',
        'color': 'str',
        'stream_post_policy': 'int',
        'message_retention_days': 'int',
        'history_public_to_subscribers': 'bool',
        'first_message_id': 'int',
        'stream_weekly_traffic': 'int'
    }

    attribute_map = {
        'stream_id': 'stream_id',
        'name': 'name',
        'description': 'description',
        'rendered_description': 'rendered_description',
        'date_created': 'date_created',
        'invite_only': 'invite_only',
        'subscribers': 'subscribers',
        'desktop_notifications': 'desktop_notifications',
        'email_notifications': 'email_notifications',
        'wildcard_mentions_notify': 'wildcard_mentions_notify',
        'push_notifications': 'push_notifications',
        'audible_notifications': 'audible_notifications',
        'pin_to_top': 'pin_to_top',
        'email_address': 'email_address',
        'is_muted': 'is_muted',
        'in_home_view': 'in_home_view',
        'is_announcement_only': 'is_announcement_only',
        'is_web_public': 'is_web_public',
        'role': 'role',
        'color': 'color',
        'stream_post_policy': 'stream_post_policy',
        'message_retention_days': 'message_retention_days',
        'history_public_to_subscribers': 'history_public_to_subscribers',
        'first_message_id': 'first_message_id',
        'stream_weekly_traffic': 'stream_weekly_traffic'
    }

    def __init__(self, stream_id=None, name=None, description=None, rendered_description=None, date_created=None, invite_only=None, subscribers=None, desktop_notifications=None, email_notifications=None, wildcard_mentions_notify=None, push_notifications=None, audible_notifications=None, pin_to_top=None, email_address=None, is_muted=None, in_home_view=None, is_announcement_only=None, is_web_public=None, role=None, color=None, stream_post_policy=None, message_retention_days=None, history_public_to_subscribers=None, first_message_id=None, stream_weekly_traffic=None, local_vars_configuration=None):  # noqa: E501
        """Subscriptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stream_id = None
        self._name = None
        self._description = None
        self._rendered_description = None
        self._date_created = None
        self._invite_only = None
        self._subscribers = None
        self._desktop_notifications = None
        self._email_notifications = None
        self._wildcard_mentions_notify = None
        self._push_notifications = None
        self._audible_notifications = None
        self._pin_to_top = None
        self._email_address = None
        self._is_muted = None
        self._in_home_view = None
        self._is_announcement_only = None
        self._is_web_public = None
        self._role = None
        self._color = None
        self._stream_post_policy = None
        self._message_retention_days = None
        self._history_public_to_subscribers = None
        self._first_message_id = None
        self._stream_weekly_traffic = None
        self.discriminator = None

        if stream_id is not None:
            self.stream_id = stream_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if rendered_description is not None:
            self.rendered_description = rendered_description
        if date_created is not None:
            self.date_created = date_created
        if invite_only is not None:
            self.invite_only = invite_only
        if subscribers is not None:
            self.subscribers = subscribers
        self.desktop_notifications = desktop_notifications
        self.email_notifications = email_notifications
        self.wildcard_mentions_notify = wildcard_mentions_notify
        self.push_notifications = push_notifications
        self.audible_notifications = audible_notifications
        if pin_to_top is not None:
            self.pin_to_top = pin_to_top
        if email_address is not None:
            self.email_address = email_address
        if is_muted is not None:
            self.is_muted = is_muted
        if in_home_view is not None:
            self.in_home_view = in_home_view
        if is_announcement_only is not None:
            self.is_announcement_only = is_announcement_only
        if is_web_public is not None:
            self.is_web_public = is_web_public
        if role is not None:
            self.role = role
        if color is not None:
            self.color = color
        if stream_post_policy is not None:
            self.stream_post_policy = stream_post_policy
        self.message_retention_days = message_retention_days
        if history_public_to_subscribers is not None:
            self.history_public_to_subscribers = history_public_to_subscribers
        self.first_message_id = first_message_id
        self.stream_weekly_traffic = stream_weekly_traffic

    @property
    def stream_id(self):
        """Gets the stream_id of this Subscriptions.  # noqa: E501

        The unique ID of a stream.   # noqa: E501

        :return: The stream_id of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this Subscriptions.

        The unique ID of a stream.   # noqa: E501

        :param stream_id: The stream_id of this Subscriptions.  # noqa: E501
        :type stream_id: int
        """

        self._stream_id = stream_id

    @property
    def name(self):
        """Gets the name of this Subscriptions.  # noqa: E501

        The name of a stream.   # noqa: E501

        :return: The name of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Subscriptions.

        The name of a stream.   # noqa: E501

        :param name: The name of this Subscriptions.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Subscriptions.  # noqa: E501

        The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.   # noqa: E501

        :return: The description of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscriptions.

        The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.   # noqa: E501

        :param description: The description of this Subscriptions.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def rendered_description(self):
        """Gets the rendered_description of this Subscriptions.  # noqa: E501

        A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.   # noqa: E501

        :return: The rendered_description of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._rendered_description

    @rendered_description.setter
    def rendered_description(self, rendered_description):
        """Sets the rendered_description of this Subscriptions.

        A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.   # noqa: E501

        :param rendered_description: The rendered_description of this Subscriptions.  # noqa: E501
        :type rendered_description: str
        """

        self._rendered_description = rendered_description

    @property
    def date_created(self):
        """Gets the date_created of this Subscriptions.  # noqa: E501

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).   # noqa: E501

        :return: The date_created of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Subscriptions.

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).   # noqa: E501

        :param date_created: The date_created of this Subscriptions.  # noqa: E501
        :type date_created: int
        """

        self._date_created = date_created

    @property
    def invite_only(self):
        """Gets the invite_only of this Subscriptions.  # noqa: E501

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream.   # noqa: E501

        :return: The invite_only of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._invite_only

    @invite_only.setter
    def invite_only(self, invite_only):
        """Sets the invite_only of this Subscriptions.

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream.   # noqa: E501

        :param invite_only: The invite_only of this Subscriptions.  # noqa: E501
        :type invite_only: bool
        """

        self._invite_only = invite_only

    @property
    def subscribers(self):
        """Gets the subscribers of this Subscriptions.  # noqa: E501

        A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`.   # noqa: E501

        :return: The subscribers of this Subscriptions.  # noqa: E501
        :rtype: list[int]
        """
        return self._subscribers

    @subscribers.setter
    def subscribers(self, subscribers):
        """Sets the subscribers of this Subscriptions.

        A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`.   # noqa: E501

        :param subscribers: The subscribers of this Subscriptions.  # noqa: E501
        :type subscribers: list[int]
        """

        self._subscribers = subscribers

    @property
    def desktop_notifications(self):
        """Gets the desktop_notifications of this Subscriptions.  # noqa: E501

        A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream.   # noqa: E501

        :return: The desktop_notifications of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._desktop_notifications

    @desktop_notifications.setter
    def desktop_notifications(self, desktop_notifications):
        """Sets the desktop_notifications of this Subscriptions.

        A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream.   # noqa: E501

        :param desktop_notifications: The desktop_notifications of this Subscriptions.  # noqa: E501
        :type desktop_notifications: bool
        """

        self._desktop_notifications = desktop_notifications

    @property
    def email_notifications(self):
        """Gets the email_notifications of this Subscriptions.  # noqa: E501

        A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream.   # noqa: E501

        :return: The email_notifications of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this Subscriptions.

        A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream.   # noqa: E501

        :param email_notifications: The email_notifications of this Subscriptions.  # noqa: E501
        :type email_notifications: bool
        """

        self._email_notifications = email_notifications

    @property
    def wildcard_mentions_notify(self):
        """Gets the wildcard_mentions_notify of this Subscriptions.  # noqa: E501

        A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream.   # noqa: E501

        :return: The wildcard_mentions_notify of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._wildcard_mentions_notify

    @wildcard_mentions_notify.setter
    def wildcard_mentions_notify(self, wildcard_mentions_notify):
        """Sets the wildcard_mentions_notify of this Subscriptions.

        A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream.   # noqa: E501

        :param wildcard_mentions_notify: The wildcard_mentions_notify of this Subscriptions.  # noqa: E501
        :type wildcard_mentions_notify: bool
        """

        self._wildcard_mentions_notify = wildcard_mentions_notify

    @property
    def push_notifications(self):
        """Gets the push_notifications of this Subscriptions.  # noqa: E501

        A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream.   # noqa: E501

        :return: The push_notifications of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._push_notifications

    @push_notifications.setter
    def push_notifications(self, push_notifications):
        """Sets the push_notifications of this Subscriptions.

        A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream.   # noqa: E501

        :param push_notifications: The push_notifications of this Subscriptions.  # noqa: E501
        :type push_notifications: bool
        """

        self._push_notifications = push_notifications

    @property
    def audible_notifications(self):
        """Gets the audible_notifications of this Subscriptions.  # noqa: E501

        A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream.   # noqa: E501

        :return: The audible_notifications of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._audible_notifications

    @audible_notifications.setter
    def audible_notifications(self, audible_notifications):
        """Sets the audible_notifications of this Subscriptions.

        A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream.   # noqa: E501

        :param audible_notifications: The audible_notifications of this Subscriptions.  # noqa: E501
        :type audible_notifications: bool
        """

        self._audible_notifications = audible_notifications

    @property
    def pin_to_top(self):
        """Gets the pin_to_top of this Subscriptions.  # noqa: E501

        A boolean specifying whether the given stream has been pinned to the top.   # noqa: E501

        :return: The pin_to_top of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._pin_to_top

    @pin_to_top.setter
    def pin_to_top(self, pin_to_top):
        """Sets the pin_to_top of this Subscriptions.

        A boolean specifying whether the given stream has been pinned to the top.   # noqa: E501

        :param pin_to_top: The pin_to_top of this Subscriptions.  # noqa: E501
        :type pin_to_top: bool
        """

        self._pin_to_top = pin_to_top

    @property
    def email_address(self):
        """Gets the email_address of this Subscriptions.  # noqa: E501

        Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email).   # noqa: E501

        :return: The email_address of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Subscriptions.

        Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email).   # noqa: E501

        :param email_address: The email_address of this Subscriptions.  # noqa: E501
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def is_muted(self):
        """Gets the is_muted of this Subscriptions.  # noqa: E501

        Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`).   # noqa: E501

        :return: The is_muted of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._is_muted

    @is_muted.setter
    def is_muted(self, is_muted):
        """Sets the is_muted of this Subscriptions.

        Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`).   # noqa: E501

        :param is_muted: The is_muted of this Subscriptions.  # noqa: E501
        :type is_muted: bool
        """

        self._is_muted = is_muted

    @property
    def in_home_view(self):
        """Gets the in_home_view of this Subscriptions.  # noqa: E501

        Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available.   # noqa: E501

        :return: The in_home_view of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._in_home_view

    @in_home_view.setter
    def in_home_view(self, in_home_view):
        """Sets the in_home_view of this Subscriptions.

        Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available.   # noqa: E501

        :param in_home_view: The in_home_view of this Subscriptions.  # noqa: E501
        :type in_home_view: bool
        """

        self._in_home_view = in_home_view

    @property
    def is_announcement_only(self):
        """Gets the is_announcement_only of this Subscriptions.  # noqa: E501

        Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.   # noqa: E501

        :return: The is_announcement_only of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._is_announcement_only

    @is_announcement_only.setter
    def is_announcement_only(self, is_announcement_only):
        """Sets the is_announcement_only of this Subscriptions.

        Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.   # noqa: E501

        :param is_announcement_only: The is_announcement_only of this Subscriptions.  # noqa: E501
        :type is_announcement_only: bool
        """

        self._is_announcement_only = is_announcement_only

    @property
    def is_web_public(self):
        """Gets the is_web_public of this Subscriptions.  # noqa: E501

        Whether the stream has been configured to allow unauthenticated access to its message history from the web.   # noqa: E501

        :return: The is_web_public of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._is_web_public

    @is_web_public.setter
    def is_web_public(self, is_web_public):
        """Sets the is_web_public of this Subscriptions.

        Whether the stream has been configured to allow unauthenticated access to its message history from the web.   # noqa: E501

        :param is_web_public: The is_web_public of this Subscriptions.  # noqa: E501
        :type is_web_public: bool
        """

        self._is_web_public = is_web_public

    @property
    def role(self):
        """Gets the role of this Subscriptions.  # noqa: E501

        The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31).   # noqa: E501

        :return: The role of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Subscriptions.

        The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31).   # noqa: E501

        :param role: The role of this Subscriptions.  # noqa: E501
        :type role: int
        """
        allowed_values = [20, 50]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def color(self):
        """Gets the color of this Subscriptions.  # noqa: E501

        The user's personal color for the stream.   # noqa: E501

        :return: The color of this Subscriptions.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Subscriptions.

        The user's personal color for the stream.   # noqa: E501

        :param color: The color of this Subscriptions.  # noqa: E501
        :type color: str
        """

        self._color = color

    @property
    def stream_post_policy(self):
        """Gets the stream_post_policy of this Subscriptions.  # noqa: E501

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.   # noqa: E501

        :return: The stream_post_policy of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._stream_post_policy

    @stream_post_policy.setter
    def stream_post_policy(self, stream_post_policy):
        """Sets the stream_post_policy of this Subscriptions.

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.   # noqa: E501

        :param stream_post_policy: The stream_post_policy of this Subscriptions.  # noqa: E501
        :type stream_post_policy: int
        """

        self._stream_post_policy = stream_post_policy

    @property
    def message_retention_days(self):
        """Gets the message_retention_days of this Subscriptions.  # noqa: E501

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).   # noqa: E501

        :return: The message_retention_days of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._message_retention_days

    @message_retention_days.setter
    def message_retention_days(self, message_retention_days):
        """Sets the message_retention_days of this Subscriptions.

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).   # noqa: E501

        :param message_retention_days: The message_retention_days of this Subscriptions.  # noqa: E501
        :type message_retention_days: int
        """

        self._message_retention_days = message_retention_days

    @property
    def history_public_to_subscribers(self):
        """Gets the history_public_to_subscribers of this Subscriptions.  # noqa: E501

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.   # noqa: E501

        :return: The history_public_to_subscribers of this Subscriptions.  # noqa: E501
        :rtype: bool
        """
        return self._history_public_to_subscribers

    @history_public_to_subscribers.setter
    def history_public_to_subscribers(self, history_public_to_subscribers):
        """Sets the history_public_to_subscribers of this Subscriptions.

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.   # noqa: E501

        :param history_public_to_subscribers: The history_public_to_subscribers of this Subscriptions.  # noqa: E501
        :type history_public_to_subscribers: bool
        """

        self._history_public_to_subscribers = history_public_to_subscribers

    @property
    def first_message_id(self):
        """Gets the first_message_id of this Subscriptions.  # noqa: E501

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.   # noqa: E501

        :return: The first_message_id of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._first_message_id

    @first_message_id.setter
    def first_message_id(self, first_message_id):
        """Sets the first_message_id of this Subscriptions.

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.   # noqa: E501

        :param first_message_id: The first_message_id of this Subscriptions.  # noqa: E501
        :type first_message_id: int
        """

        self._first_message_id = first_message_id

    @property
    def stream_weekly_traffic(self):
        """Gets the stream_weekly_traffic of this Subscriptions.  # noqa: E501

        The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic.   # noqa: E501

        :return: The stream_weekly_traffic of this Subscriptions.  # noqa: E501
        :rtype: int
        """
        return self._stream_weekly_traffic

    @stream_weekly_traffic.setter
    def stream_weekly_traffic(self, stream_weekly_traffic):
        """Sets the stream_weekly_traffic of this Subscriptions.

        The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic.   # noqa: E501

        :param stream_weekly_traffic: The stream_weekly_traffic of this Subscriptions.  # noqa: E501
        :type stream_weekly_traffic: int
        """

        self._stream_weekly_traffic = stream_weekly_traffic

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Subscriptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Subscriptions):
            return True

        return self.to_dict() != other.to_dict()
