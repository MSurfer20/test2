# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class BasicStreamBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stream_id': 'int',
        'name': 'str',
        'description': 'str',
        'date_created': 'int',
        'invite_only': 'bool',
        'rendered_description': 'str',
        'is_web_public': 'bool',
        'stream_post_policy': 'int',
        'message_retention_days': 'int',
        'history_public_to_subscribers': 'bool',
        'first_message_id': 'int',
        'is_announcement_only': 'bool'
    }

    attribute_map = {
        'stream_id': 'stream_id',
        'name': 'name',
        'description': 'description',
        'date_created': 'date_created',
        'invite_only': 'invite_only',
        'rendered_description': 'rendered_description',
        'is_web_public': 'is_web_public',
        'stream_post_policy': 'stream_post_policy',
        'message_retention_days': 'message_retention_days',
        'history_public_to_subscribers': 'history_public_to_subscribers',
        'first_message_id': 'first_message_id',
        'is_announcement_only': 'is_announcement_only'
    }

    def __init__(self, stream_id=None, name=None, description=None, date_created=None, invite_only=None, rendered_description=None, is_web_public=None, stream_post_policy=None, message_retention_days=None, history_public_to_subscribers=None, first_message_id=None, is_announcement_only=None, local_vars_configuration=None):  # noqa: E501
        """BasicStreamBase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stream_id = None
        self._name = None
        self._description = None
        self._date_created = None
        self._invite_only = None
        self._rendered_description = None
        self._is_web_public = None
        self._stream_post_policy = None
        self._message_retention_days = None
        self._history_public_to_subscribers = None
        self._first_message_id = None
        self._is_announcement_only = None
        self.discriminator = None

        if stream_id is not None:
            self.stream_id = stream_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if date_created is not None:
            self.date_created = date_created
        if invite_only is not None:
            self.invite_only = invite_only
        if rendered_description is not None:
            self.rendered_description = rendered_description
        if is_web_public is not None:
            self.is_web_public = is_web_public
        if stream_post_policy is not None:
            self.stream_post_policy = stream_post_policy
        self.message_retention_days = message_retention_days
        if history_public_to_subscribers is not None:
            self.history_public_to_subscribers = history_public_to_subscribers
        self.first_message_id = first_message_id
        if is_announcement_only is not None:
            self.is_announcement_only = is_announcement_only

    @property
    def stream_id(self):
        """Gets the stream_id of this BasicStreamBase.  # noqa: E501

        The unique ID of the stream.   # noqa: E501

        :return: The stream_id of this BasicStreamBase.  # noqa: E501
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this BasicStreamBase.

        The unique ID of the stream.   # noqa: E501

        :param stream_id: The stream_id of this BasicStreamBase.  # noqa: E501
        :type stream_id: int
        """

        self._stream_id = stream_id

    @property
    def name(self):
        """Gets the name of this BasicStreamBase.  # noqa: E501

        The name of the stream.   # noqa: E501

        :return: The name of this BasicStreamBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicStreamBase.

        The name of the stream.   # noqa: E501

        :param name: The name of this BasicStreamBase.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BasicStreamBase.  # noqa: E501

        The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.   # noqa: E501

        :return: The description of this BasicStreamBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BasicStreamBase.

        The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.   # noqa: E501

        :param description: The description of this BasicStreamBase.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def date_created(self):
        """Gets the date_created of this BasicStreamBase.  # noqa: E501

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).   # noqa: E501

        :return: The date_created of this BasicStreamBase.  # noqa: E501
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BasicStreamBase.

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).   # noqa: E501

        :param date_created: The date_created of this BasicStreamBase.  # noqa: E501
        :type date_created: int
        """

        self._date_created = date_created

    @property
    def invite_only(self):
        """Gets the invite_only of this BasicStreamBase.  # noqa: E501

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream.   # noqa: E501

        :return: The invite_only of this BasicStreamBase.  # noqa: E501
        :rtype: bool
        """
        return self._invite_only

    @invite_only.setter
    def invite_only(self, invite_only):
        """Sets the invite_only of this BasicStreamBase.

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream.   # noqa: E501

        :param invite_only: The invite_only of this BasicStreamBase.  # noqa: E501
        :type invite_only: bool
        """

        self._invite_only = invite_only

    @property
    def rendered_description(self):
        """Gets the rendered_description of this BasicStreamBase.  # noqa: E501

        The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.   # noqa: E501

        :return: The rendered_description of this BasicStreamBase.  # noqa: E501
        :rtype: str
        """
        return self._rendered_description

    @rendered_description.setter
    def rendered_description(self, rendered_description):
        """Sets the rendered_description of this BasicStreamBase.

        The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.   # noqa: E501

        :param rendered_description: The rendered_description of this BasicStreamBase.  # noqa: E501
        :type rendered_description: str
        """

        self._rendered_description = rendered_description

    @property
    def is_web_public(self):
        """Gets the is_web_public of this BasicStreamBase.  # noqa: E501

        Whether the stream has been configured to allow unauthenticated access to its message history from the web.   # noqa: E501

        :return: The is_web_public of this BasicStreamBase.  # noqa: E501
        :rtype: bool
        """
        return self._is_web_public

    @is_web_public.setter
    def is_web_public(self, is_web_public):
        """Sets the is_web_public of this BasicStreamBase.

        Whether the stream has been configured to allow unauthenticated access to its message history from the web.   # noqa: E501

        :param is_web_public: The is_web_public of this BasicStreamBase.  # noqa: E501
        :type is_web_public: bool
        """

        self._is_web_public = is_web_public

    @property
    def stream_post_policy(self):
        """Gets the stream_post_policy of this BasicStreamBase.  # noqa: E501

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.   # noqa: E501

        :return: The stream_post_policy of this BasicStreamBase.  # noqa: E501
        :rtype: int
        """
        return self._stream_post_policy

    @stream_post_policy.setter
    def stream_post_policy(self, stream_post_policy):
        """Sets the stream_post_policy of this BasicStreamBase.

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.   # noqa: E501

        :param stream_post_policy: The stream_post_policy of this BasicStreamBase.  # noqa: E501
        :type stream_post_policy: int
        """

        self._stream_post_policy = stream_post_policy

    @property
    def message_retention_days(self):
        """Gets the message_retention_days of this BasicStreamBase.  # noqa: E501

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).   # noqa: E501

        :return: The message_retention_days of this BasicStreamBase.  # noqa: E501
        :rtype: int
        """
        return self._message_retention_days

    @message_retention_days.setter
    def message_retention_days(self, message_retention_days):
        """Sets the message_retention_days of this BasicStreamBase.

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).   # noqa: E501

        :param message_retention_days: The message_retention_days of this BasicStreamBase.  # noqa: E501
        :type message_retention_days: int
        """

        self._message_retention_days = message_retention_days

    @property
    def history_public_to_subscribers(self):
        """Gets the history_public_to_subscribers of this BasicStreamBase.  # noqa: E501

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.   # noqa: E501

        :return: The history_public_to_subscribers of this BasicStreamBase.  # noqa: E501
        :rtype: bool
        """
        return self._history_public_to_subscribers

    @history_public_to_subscribers.setter
    def history_public_to_subscribers(self, history_public_to_subscribers):
        """Sets the history_public_to_subscribers of this BasicStreamBase.

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.   # noqa: E501

        :param history_public_to_subscribers: The history_public_to_subscribers of this BasicStreamBase.  # noqa: E501
        :type history_public_to_subscribers: bool
        """

        self._history_public_to_subscribers = history_public_to_subscribers

    @property
    def first_message_id(self):
        """Gets the first_message_id of this BasicStreamBase.  # noqa: E501

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.   # noqa: E501

        :return: The first_message_id of this BasicStreamBase.  # noqa: E501
        :rtype: int
        """
        return self._first_message_id

    @first_message_id.setter
    def first_message_id(self, first_message_id):
        """Sets the first_message_id of this BasicStreamBase.

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.   # noqa: E501

        :param first_message_id: The first_message_id of this BasicStreamBase.  # noqa: E501
        :type first_message_id: int
        """

        self._first_message_id = first_message_id

    @property
    def is_announcement_only(self):
        """Gets the is_announcement_only of this BasicStreamBase.  # noqa: E501

        Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.   # noqa: E501

        :return: The is_announcement_only of this BasicStreamBase.  # noqa: E501
        :rtype: bool
        """
        return self._is_announcement_only

    @is_announcement_only.setter
    def is_announcement_only(self, is_announcement_only):
        """Sets the is_announcement_only of this BasicStreamBase.

        Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.   # noqa: E501

        :param is_announcement_only: The is_announcement_only of this BasicStreamBase.  # noqa: E501
        :type is_announcement_only: bool
        """

        self._is_announcement_only = is_announcement_only

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicStreamBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicStreamBase):
            return True

        return self.to_dict() != other.to_dict()
