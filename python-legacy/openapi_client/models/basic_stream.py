# coding: utf-8

"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class BasicStream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'stream_id': 'object',
        'name': 'object',
        'description': 'object',
        'date_created': 'object',
        'invite_only': 'object',
        'rendered_description': 'object',
        'is_web_public': 'object',
        'stream_post_policy': 'object',
        'message_retention_days': 'object',
        'history_public_to_subscribers': 'object',
        'first_message_id': 'object',
        'is_announcement_only': 'object'
    }

    attribute_map = {
        'stream_id': 'stream_id',
        'name': 'name',
        'description': 'description',
        'date_created': 'date_created',
        'invite_only': 'invite_only',
        'rendered_description': 'rendered_description',
        'is_web_public': 'is_web_public',
        'stream_post_policy': 'stream_post_policy',
        'message_retention_days': 'message_retention_days',
        'history_public_to_subscribers': 'history_public_to_subscribers',
        'first_message_id': 'first_message_id',
        'is_announcement_only': 'is_announcement_only'
    }

    def __init__(self, stream_id=None, name=None, description=None, date_created=None, invite_only=None, rendered_description=None, is_web_public=None, stream_post_policy=None, message_retention_days=None, history_public_to_subscribers=None, first_message_id=None, is_announcement_only=None, local_vars_configuration=None):  # noqa: E501
        """BasicStream - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._stream_id = None
        self._name = None
        self._description = None
        self._date_created = None
        self._invite_only = None
        self._rendered_description = None
        self._is_web_public = None
        self._stream_post_policy = None
        self._message_retention_days = None
        self._history_public_to_subscribers = None
        self._first_message_id = None
        self._is_announcement_only = None
        self.discriminator = None

        self.stream_id = stream_id
        self.name = name
        self.description = description
        self.date_created = date_created
        self.invite_only = invite_only
        self.rendered_description = rendered_description
        self.is_web_public = is_web_public
        self.stream_post_policy = stream_post_policy
        self.message_retention_days = message_retention_days
        self.history_public_to_subscribers = history_public_to_subscribers
        self.first_message_id = first_message_id
        self.is_announcement_only = is_announcement_only

    @property
    def stream_id(self):
        """Gets the stream_id of this BasicStream.  # noqa: E501


        :return: The stream_id of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this BasicStream.


        :param stream_id: The stream_id of this BasicStream.  # noqa: E501
        :type stream_id: object
        """

        self._stream_id = stream_id

    @property
    def name(self):
        """Gets the name of this BasicStream.  # noqa: E501


        :return: The name of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicStream.


        :param name: The name of this BasicStream.  # noqa: E501
        :type name: object
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BasicStream.  # noqa: E501


        :return: The description of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BasicStream.


        :param description: The description of this BasicStream.  # noqa: E501
        :type description: object
        """

        self._description = description

    @property
    def date_created(self):
        """Gets the date_created of this BasicStream.  # noqa: E501


        :return: The date_created of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BasicStream.


        :param date_created: The date_created of this BasicStream.  # noqa: E501
        :type date_created: object
        """

        self._date_created = date_created

    @property
    def invite_only(self):
        """Gets the invite_only of this BasicStream.  # noqa: E501


        :return: The invite_only of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._invite_only

    @invite_only.setter
    def invite_only(self, invite_only):
        """Sets the invite_only of this BasicStream.


        :param invite_only: The invite_only of this BasicStream.  # noqa: E501
        :type invite_only: object
        """

        self._invite_only = invite_only

    @property
    def rendered_description(self):
        """Gets the rendered_description of this BasicStream.  # noqa: E501


        :return: The rendered_description of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._rendered_description

    @rendered_description.setter
    def rendered_description(self, rendered_description):
        """Sets the rendered_description of this BasicStream.


        :param rendered_description: The rendered_description of this BasicStream.  # noqa: E501
        :type rendered_description: object
        """

        self._rendered_description = rendered_description

    @property
    def is_web_public(self):
        """Gets the is_web_public of this BasicStream.  # noqa: E501


        :return: The is_web_public of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._is_web_public

    @is_web_public.setter
    def is_web_public(self, is_web_public):
        """Sets the is_web_public of this BasicStream.


        :param is_web_public: The is_web_public of this BasicStream.  # noqa: E501
        :type is_web_public: object
        """

        self._is_web_public = is_web_public

    @property
    def stream_post_policy(self):
        """Gets the stream_post_policy of this BasicStream.  # noqa: E501


        :return: The stream_post_policy of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._stream_post_policy

    @stream_post_policy.setter
    def stream_post_policy(self, stream_post_policy):
        """Sets the stream_post_policy of this BasicStream.


        :param stream_post_policy: The stream_post_policy of this BasicStream.  # noqa: E501
        :type stream_post_policy: object
        """

        self._stream_post_policy = stream_post_policy

    @property
    def message_retention_days(self):
        """Gets the message_retention_days of this BasicStream.  # noqa: E501


        :return: The message_retention_days of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._message_retention_days

    @message_retention_days.setter
    def message_retention_days(self, message_retention_days):
        """Sets the message_retention_days of this BasicStream.


        :param message_retention_days: The message_retention_days of this BasicStream.  # noqa: E501
        :type message_retention_days: object
        """

        self._message_retention_days = message_retention_days

    @property
    def history_public_to_subscribers(self):
        """Gets the history_public_to_subscribers of this BasicStream.  # noqa: E501


        :return: The history_public_to_subscribers of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._history_public_to_subscribers

    @history_public_to_subscribers.setter
    def history_public_to_subscribers(self, history_public_to_subscribers):
        """Sets the history_public_to_subscribers of this BasicStream.


        :param history_public_to_subscribers: The history_public_to_subscribers of this BasicStream.  # noqa: E501
        :type history_public_to_subscribers: object
        """

        self._history_public_to_subscribers = history_public_to_subscribers

    @property
    def first_message_id(self):
        """Gets the first_message_id of this BasicStream.  # noqa: E501


        :return: The first_message_id of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._first_message_id

    @first_message_id.setter
    def first_message_id(self, first_message_id):
        """Sets the first_message_id of this BasicStream.


        :param first_message_id: The first_message_id of this BasicStream.  # noqa: E501
        :type first_message_id: object
        """

        self._first_message_id = first_message_id

    @property
    def is_announcement_only(self):
        """Gets the is_announcement_only of this BasicStream.  # noqa: E501


        :return: The is_announcement_only of this BasicStream.  # noqa: E501
        :rtype: object
        """
        return self._is_announcement_only

    @is_announcement_only.setter
    def is_announcement_only(self, is_announcement_only):
        """Sets the is_announcement_only of this BasicStream.


        :param is_announcement_only: The is_announcement_only of this BasicStream.  # noqa: E501
        :type is_announcement_only: object
        """

        self._is_announcement_only = is_announcement_only

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BasicStream):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BasicStream):
            return True

        return self.to_dict() != other.to_dict()
