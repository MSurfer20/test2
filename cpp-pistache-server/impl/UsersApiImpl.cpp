/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "UsersApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

UsersApiImpl::UsersApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : UsersApi(rtr)
{
}

void UsersApiImpl::create_user(const Pistache::Optional<std::string> &email, const Pistache::Optional<std::string> &password, const Pistache::Optional<std::string> &fullName, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::create_user_group(const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &description, const Pistache::Optional<std::vector<int32_t>> &members, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::deactivate_own_user(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::deactivate_user(const int32_t &userId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_attachments(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_own_user(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_user(const int32_t &userId, const Pistache::Optional<bool> &clientGravatar, const Pistache::Optional<bool> &includeCustomProfileFields, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_user_by_email(const std::string &email, const Pistache::Optional<bool> &clientGravatar, const Pistache::Optional<bool> &includeCustomProfileFields, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_user_groups(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_user_presence(const std::string &userIdOrEmail, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::get_users(const Pistache::Optional<bool> &clientGravatar, const Pistache::Optional<bool> &includeCustomProfileFields, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::mute_user(const int32_t &mutedUserId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::reactivate_user(const int32_t &userId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::remove_user_group(const int32_t &userGroupId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::set_typing_status(const Pistache::Optional<std::string> &op, const Pistache::Optional<std::vector<int32_t>> &to, const Pistache::Optional<std::string> &type, const Pistache::Optional<std::string> &topic, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::unmute_user(const int32_t &mutedUserId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::update_display_settings(const Pistache::Optional<bool> &twentyFourHourTime, const Pistache::Optional<bool> &denseMode, const Pistache::Optional<bool> &starredMessageCounts, const Pistache::Optional<bool> &fluidLayoutWidth, const Pistache::Optional<bool> &highContrastMode, const Pistache::Optional<int32_t> &colorScheme, const Pistache::Optional<bool> &translateEmoticons, const Pistache::Optional<std::string> &defaultLanguage, const Pistache::Optional<std::string> &defaultView, const Pistache::Optional<bool> &leftSideUserlist, const Pistache::Optional<std::string> &emojiset, const Pistache::Optional<int32_t> &demoteInactiveStreams, const Pistache::Optional<std::string> &timezone, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::update_notification_settings(const Pistache::Optional<bool> &enableStreamDesktopNotifications, const Pistache::Optional<bool> &enableStreamEmailNotifications, const Pistache::Optional<bool> &enableStreamPushNotifications, const Pistache::Optional<bool> &enableStreamAudibleNotifications, const Pistache::Optional<std::string> &notificationSound, const Pistache::Optional<bool> &enableDesktopNotifications, const Pistache::Optional<bool> &enableSounds, const Pistache::Optional<bool> &enableOfflineEmailNotifications, const Pistache::Optional<bool> &enableOfflinePushNotifications, const Pistache::Optional<bool> &enableOnlinePushNotifications, const Pistache::Optional<bool> &enableDigestEmails, const Pistache::Optional<bool> &enableMarketingEmails, const Pistache::Optional<bool> &enableLoginEmails, const Pistache::Optional<bool> &messageContentInEmailNotifications, const Pistache::Optional<bool> &pmContentInDesktopNotifications, const Pistache::Optional<bool> &wildcardMentionsNotify, const Pistache::Optional<int32_t> &desktopIconCountDisplay, const Pistache::Optional<bool> &realmNameInNotifications, const Pistache::Optional<bool> &presenceEnabled, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::update_user(const int32_t &userId, const Pistache::Optional<std::string> &fullName, const Pistache::Optional<int32_t> &role, const Pistache::Optional<std::vector<Object>> &profileData, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::update_user_group(const int32_t &userGroupId, const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &description, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void UsersApiImpl::update_user_group_members(const int32_t &userGroupId, const Pistache::Optional<std::vector<int32_t>> &r_delete, const Pistache::Optional<std::vector<int32_t>> &add, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

