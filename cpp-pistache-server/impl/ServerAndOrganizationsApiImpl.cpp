/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ServerAndOrganizationsApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ServerAndOrganizationsApiImpl::ServerAndOrganizationsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ServerAndOrganizationsApi(rtr)
{
}

void ServerAndOrganizationsApiImpl::add_code_playground(const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &pygmentsLanguage, const Pistache::Optional<std::string> &urlPrefix, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::add_linkifier(const Pistache::Optional<std::string> &pattern, const Pistache::Optional<std::string> &urlFormatString, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::create_custom_profile_field(const Pistache::Optional<int32_t> &fieldType, const Pistache::Optional<std::string> &name, const Pistache::Optional<std::string> &hint, const Pistache::Optional<Object> &fieldData, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::get_custom_emoji(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::get_custom_profile_fields(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::get_linkifiers(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::get_server_settings(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::remove_code_playground(const int32_t &playgroundId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::remove_linkifier(const int32_t &filterId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::reorder_custom_profile_fields(const Pistache::Optional<std::vector<int32_t>> &order, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::update_linkifier(const int32_t &filterId, const Pistache::Optional<std::string> &pattern, const Pistache::Optional<std::string> &urlFormatString, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ServerAndOrganizationsApiImpl::upload_custom_emoji(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

