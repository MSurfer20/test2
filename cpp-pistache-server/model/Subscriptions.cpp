/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Subscriptions.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Subscriptions::Subscriptions()
{
    m_Stream_id = 0;
    m_Stream_idIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Rendered_description = "";
    m_Rendered_descriptionIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Invite_only = false;
    m_Invite_onlyIsSet = false;
    m_SubscribersIsSet = false;
    m_Desktop_notifications = false;
    m_Desktop_notificationsIsSet = false;
    m_Email_notifications = false;
    m_Email_notificationsIsSet = false;
    m_Wildcard_mentions_notify = false;
    m_Wildcard_mentions_notifyIsSet = false;
    m_Push_notifications = false;
    m_Push_notificationsIsSet = false;
    m_Audible_notifications = false;
    m_Audible_notificationsIsSet = false;
    m_Pin_to_top = false;
    m_Pin_to_topIsSet = false;
    m_Email_address = "";
    m_Email_addressIsSet = false;
    m_Is_muted = false;
    m_Is_mutedIsSet = false;
    m_In_home_view = false;
    m_In_home_viewIsSet = false;
    m_Is_announcement_only = false;
    m_Is_announcement_onlyIsSet = false;
    m_Is_web_public = false;
    m_Is_web_publicIsSet = false;
    m_Role = 0;
    m_RoleIsSet = false;
    m_Color = "";
    m_ColorIsSet = false;
    m_Stream_post_policy = 0;
    m_Stream_post_policyIsSet = false;
    m_Message_retention_days = 0;
    m_Message_retention_daysIsSet = false;
    m_History_public_to_subscribers = false;
    m_History_public_to_subscribersIsSet = false;
    m_First_message_id = 0;
    m_First_message_idIsSet = false;
    m_Stream_weekly_traffic = 0;
    m_Stream_weekly_trafficIsSet = false;
    
}

void Subscriptions::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Subscriptions::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Subscriptions::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Subscriptions" : pathPrefix;

                                 
    if (subscribersIsSet())
    {
        const std::vector<int32_t>& value = m_Subscribers;
        const std::string currentValuePath = _pathPrefix + ".subscribers";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                                                                            
    return success;
}

bool Subscriptions::operator==(const Subscriptions& rhs) const
{
    return
    
    
    
    ((!streamIdIsSet() && !rhs.streamIdIsSet()) || (streamIdIsSet() && rhs.streamIdIsSet() && getStreamId() == rhs.getStreamId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!renderedDescriptionIsSet() && !rhs.renderedDescriptionIsSet()) || (renderedDescriptionIsSet() && rhs.renderedDescriptionIsSet() && getRenderedDescription() == rhs.getRenderedDescription())) &&
    
    
    ((!dateCreatedIsSet() && !rhs.dateCreatedIsSet()) || (dateCreatedIsSet() && rhs.dateCreatedIsSet() && getDateCreated() == rhs.getDateCreated())) &&
    
    
    ((!inviteOnlyIsSet() && !rhs.inviteOnlyIsSet()) || (inviteOnlyIsSet() && rhs.inviteOnlyIsSet() && isInviteOnly() == rhs.isInviteOnly())) &&
    
    
    ((!subscribersIsSet() && !rhs.subscribersIsSet()) || (subscribersIsSet() && rhs.subscribersIsSet() && getSubscribers() == rhs.getSubscribers())) &&
    
    
    ((!desktopNotificationsIsSet() && !rhs.desktopNotificationsIsSet()) || (desktopNotificationsIsSet() && rhs.desktopNotificationsIsSet() && isDesktopNotifications() == rhs.isDesktopNotifications())) &&
    
    
    ((!emailNotificationsIsSet() && !rhs.emailNotificationsIsSet()) || (emailNotificationsIsSet() && rhs.emailNotificationsIsSet() && isEmailNotifications() == rhs.isEmailNotifications())) &&
    
    
    ((!wildcardMentionsNotifyIsSet() && !rhs.wildcardMentionsNotifyIsSet()) || (wildcardMentionsNotifyIsSet() && rhs.wildcardMentionsNotifyIsSet() && isWildcardMentionsNotify() == rhs.isWildcardMentionsNotify())) &&
    
    
    ((!pushNotificationsIsSet() && !rhs.pushNotificationsIsSet()) || (pushNotificationsIsSet() && rhs.pushNotificationsIsSet() && isPushNotifications() == rhs.isPushNotifications())) &&
    
    
    ((!audibleNotificationsIsSet() && !rhs.audibleNotificationsIsSet()) || (audibleNotificationsIsSet() && rhs.audibleNotificationsIsSet() && isAudibleNotifications() == rhs.isAudibleNotifications())) &&
    
    
    ((!pinToTopIsSet() && !rhs.pinToTopIsSet()) || (pinToTopIsSet() && rhs.pinToTopIsSet() && isPinToTop() == rhs.isPinToTop())) &&
    
    
    ((!emailAddressIsSet() && !rhs.emailAddressIsSet()) || (emailAddressIsSet() && rhs.emailAddressIsSet() && getEmailAddress() == rhs.getEmailAddress())) &&
    
    
    ((!isMutedIsSet() && !rhs.isMutedIsSet()) || (isMutedIsSet() && rhs.isMutedIsSet() && isIsMuted() == rhs.isIsMuted())) &&
    
    
    ((!inHomeViewIsSet() && !rhs.inHomeViewIsSet()) || (inHomeViewIsSet() && rhs.inHomeViewIsSet() && isInHomeView() == rhs.isInHomeView())) &&
    
    
    ((!isAnnouncementOnlyIsSet() && !rhs.isAnnouncementOnlyIsSet()) || (isAnnouncementOnlyIsSet() && rhs.isAnnouncementOnlyIsSet() && isIsAnnouncementOnly() == rhs.isIsAnnouncementOnly())) &&
    
    
    ((!isWebPublicIsSet() && !rhs.isWebPublicIsSet()) || (isWebPublicIsSet() && rhs.isWebPublicIsSet() && isIsWebPublic() == rhs.isIsWebPublic())) &&
    
    
    ((!roleIsSet() && !rhs.roleIsSet()) || (roleIsSet() && rhs.roleIsSet() && getRole() == rhs.getRole())) &&
    
    
    ((!colorIsSet() && !rhs.colorIsSet()) || (colorIsSet() && rhs.colorIsSet() && getColor() == rhs.getColor())) &&
    
    
    ((!streamPostPolicyIsSet() && !rhs.streamPostPolicyIsSet()) || (streamPostPolicyIsSet() && rhs.streamPostPolicyIsSet() && getStreamPostPolicy() == rhs.getStreamPostPolicy())) &&
    
    
    ((!messageRetentionDaysIsSet() && !rhs.messageRetentionDaysIsSet()) || (messageRetentionDaysIsSet() && rhs.messageRetentionDaysIsSet() && getMessageRetentionDays() == rhs.getMessageRetentionDays())) &&
    
    
    ((!historyPublicToSubscribersIsSet() && !rhs.historyPublicToSubscribersIsSet()) || (historyPublicToSubscribersIsSet() && rhs.historyPublicToSubscribersIsSet() && isHistoryPublicToSubscribers() == rhs.isHistoryPublicToSubscribers())) &&
    
    
    ((!firstMessageIdIsSet() && !rhs.firstMessageIdIsSet()) || (firstMessageIdIsSet() && rhs.firstMessageIdIsSet() && getFirstMessageId() == rhs.getFirstMessageId())) &&
    
    
    ((!streamWeeklyTrafficIsSet() && !rhs.streamWeeklyTrafficIsSet()) || (streamWeeklyTrafficIsSet() && rhs.streamWeeklyTrafficIsSet() && getStreamWeeklyTraffic() == rhs.getStreamWeeklyTraffic()))
    
    ;
}

bool Subscriptions::operator!=(const Subscriptions& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Subscriptions& o)
{
    j = nlohmann::json();
    if(o.streamIdIsSet())
        j["stream_id"] = o.m_Stream_id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.renderedDescriptionIsSet())
        j["rendered_description"] = o.m_Rendered_description;
    if(o.dateCreatedIsSet())
        j["date_created"] = o.m_Date_created;
    if(o.inviteOnlyIsSet())
        j["invite_only"] = o.m_Invite_only;
    if(o.subscribersIsSet() || !o.m_Subscribers.empty())
        j["subscribers"] = o.m_Subscribers;
    if(o.desktopNotificationsIsSet())
        j["desktop_notifications"] = o.m_Desktop_notifications;
    if(o.emailNotificationsIsSet())
        j["email_notifications"] = o.m_Email_notifications;
    if(o.wildcardMentionsNotifyIsSet())
        j["wildcard_mentions_notify"] = o.m_Wildcard_mentions_notify;
    if(o.pushNotificationsIsSet())
        j["push_notifications"] = o.m_Push_notifications;
    if(o.audibleNotificationsIsSet())
        j["audible_notifications"] = o.m_Audible_notifications;
    if(o.pinToTopIsSet())
        j["pin_to_top"] = o.m_Pin_to_top;
    if(o.emailAddressIsSet())
        j["email_address"] = o.m_Email_address;
    if(o.isMutedIsSet())
        j["is_muted"] = o.m_Is_muted;
    if(o.inHomeViewIsSet())
        j["in_home_view"] = o.m_In_home_view;
    if(o.isAnnouncementOnlyIsSet())
        j["is_announcement_only"] = o.m_Is_announcement_only;
    if(o.isWebPublicIsSet())
        j["is_web_public"] = o.m_Is_web_public;
    if(o.roleIsSet())
        j["role"] = o.m_Role;
    if(o.colorIsSet())
        j["color"] = o.m_Color;
    if(o.streamPostPolicyIsSet())
        j["stream_post_policy"] = o.m_Stream_post_policy;
    if(o.messageRetentionDaysIsSet())
        j["message_retention_days"] = o.m_Message_retention_days;
    if(o.historyPublicToSubscribersIsSet())
        j["history_public_to_subscribers"] = o.m_History_public_to_subscribers;
    if(o.firstMessageIdIsSet())
        j["first_message_id"] = o.m_First_message_id;
    if(o.streamWeeklyTrafficIsSet())
        j["stream_weekly_traffic"] = o.m_Stream_weekly_traffic;
    
}

void from_json(const nlohmann::json& j, Subscriptions& o)
{
    if(j.find("stream_id") != j.end())
    {
        j.at("stream_id").get_to(o.m_Stream_id);
        o.m_Stream_idIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("rendered_description") != j.end())
    {
        j.at("rendered_description").get_to(o.m_Rendered_description);
        o.m_Rendered_descriptionIsSet = true;
    } 
    if(j.find("date_created") != j.end())
    {
        j.at("date_created").get_to(o.m_Date_created);
        o.m_Date_createdIsSet = true;
    } 
    if(j.find("invite_only") != j.end())
    {
        j.at("invite_only").get_to(o.m_Invite_only);
        o.m_Invite_onlyIsSet = true;
    } 
    if(j.find("subscribers") != j.end())
    {
        j.at("subscribers").get_to(o.m_Subscribers);
        o.m_SubscribersIsSet = true;
    } 
    if(j.find("desktop_notifications") != j.end())
    {
        j.at("desktop_notifications").get_to(o.m_Desktop_notifications);
        o.m_Desktop_notificationsIsSet = true;
    } 
    if(j.find("email_notifications") != j.end())
    {
        j.at("email_notifications").get_to(o.m_Email_notifications);
        o.m_Email_notificationsIsSet = true;
    } 
    if(j.find("wildcard_mentions_notify") != j.end())
    {
        j.at("wildcard_mentions_notify").get_to(o.m_Wildcard_mentions_notify);
        o.m_Wildcard_mentions_notifyIsSet = true;
    } 
    if(j.find("push_notifications") != j.end())
    {
        j.at("push_notifications").get_to(o.m_Push_notifications);
        o.m_Push_notificationsIsSet = true;
    } 
    if(j.find("audible_notifications") != j.end())
    {
        j.at("audible_notifications").get_to(o.m_Audible_notifications);
        o.m_Audible_notificationsIsSet = true;
    } 
    if(j.find("pin_to_top") != j.end())
    {
        j.at("pin_to_top").get_to(o.m_Pin_to_top);
        o.m_Pin_to_topIsSet = true;
    } 
    if(j.find("email_address") != j.end())
    {
        j.at("email_address").get_to(o.m_Email_address);
        o.m_Email_addressIsSet = true;
    } 
    if(j.find("is_muted") != j.end())
    {
        j.at("is_muted").get_to(o.m_Is_muted);
        o.m_Is_mutedIsSet = true;
    } 
    if(j.find("in_home_view") != j.end())
    {
        j.at("in_home_view").get_to(o.m_In_home_view);
        o.m_In_home_viewIsSet = true;
    } 
    if(j.find("is_announcement_only") != j.end())
    {
        j.at("is_announcement_only").get_to(o.m_Is_announcement_only);
        o.m_Is_announcement_onlyIsSet = true;
    } 
    if(j.find("is_web_public") != j.end())
    {
        j.at("is_web_public").get_to(o.m_Is_web_public);
        o.m_Is_web_publicIsSet = true;
    } 
    if(j.find("role") != j.end())
    {
        j.at("role").get_to(o.m_Role);
        o.m_RoleIsSet = true;
    } 
    if(j.find("color") != j.end())
    {
        j.at("color").get_to(o.m_Color);
        o.m_ColorIsSet = true;
    } 
    if(j.find("stream_post_policy") != j.end())
    {
        j.at("stream_post_policy").get_to(o.m_Stream_post_policy);
        o.m_Stream_post_policyIsSet = true;
    } 
    if(j.find("message_retention_days") != j.end())
    {
        j.at("message_retention_days").get_to(o.m_Message_retention_days);
        o.m_Message_retention_daysIsSet = true;
    } 
    if(j.find("history_public_to_subscribers") != j.end())
    {
        j.at("history_public_to_subscribers").get_to(o.m_History_public_to_subscribers);
        o.m_History_public_to_subscribersIsSet = true;
    } 
    if(j.find("first_message_id") != j.end())
    {
        j.at("first_message_id").get_to(o.m_First_message_id);
        o.m_First_message_idIsSet = true;
    } 
    if(j.find("stream_weekly_traffic") != j.end())
    {
        j.at("stream_weekly_traffic").get_to(o.m_Stream_weekly_traffic);
        o.m_Stream_weekly_trafficIsSet = true;
    } 
    
}

int32_t Subscriptions::getStreamId() const
{
    return m_Stream_id;
}
void Subscriptions::setStreamId(int32_t const value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}
bool Subscriptions::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}
void Subscriptions::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
std::string Subscriptions::getName() const
{
    return m_Name;
}
void Subscriptions::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Subscriptions::nameIsSet() const
{
    return m_NameIsSet;
}
void Subscriptions::unsetName()
{
    m_NameIsSet = false;
}
std::string Subscriptions::getDescription() const
{
    return m_Description;
}
void Subscriptions::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Subscriptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Subscriptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string Subscriptions::getRenderedDescription() const
{
    return m_Rendered_description;
}
void Subscriptions::setRenderedDescription(std::string const& value)
{
    m_Rendered_description = value;
    m_Rendered_descriptionIsSet = true;
}
bool Subscriptions::renderedDescriptionIsSet() const
{
    return m_Rendered_descriptionIsSet;
}
void Subscriptions::unsetRendered_description()
{
    m_Rendered_descriptionIsSet = false;
}
int32_t Subscriptions::getDateCreated() const
{
    return m_Date_created;
}
void Subscriptions::setDateCreated(int32_t const value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}
bool Subscriptions::dateCreatedIsSet() const
{
    return m_Date_createdIsSet;
}
void Subscriptions::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
bool Subscriptions::isInviteOnly() const
{
    return m_Invite_only;
}
void Subscriptions::setInviteOnly(bool const value)
{
    m_Invite_only = value;
    m_Invite_onlyIsSet = true;
}
bool Subscriptions::inviteOnlyIsSet() const
{
    return m_Invite_onlyIsSet;
}
void Subscriptions::unsetInvite_only()
{
    m_Invite_onlyIsSet = false;
}
std::vector<int32_t> Subscriptions::getSubscribers() const
{
    return m_Subscribers;
}
void Subscriptions::setSubscribers(std::vector<int32_t> const value)
{
    m_Subscribers = value;
    m_SubscribersIsSet = true;
}
bool Subscriptions::subscribersIsSet() const
{
    return m_SubscribersIsSet;
}
void Subscriptions::unsetSubscribers()
{
    m_SubscribersIsSet = false;
}
bool Subscriptions::isDesktopNotifications() const
{
    return m_Desktop_notifications;
}
void Subscriptions::setDesktopNotifications(bool const value)
{
    m_Desktop_notifications = value;
    m_Desktop_notificationsIsSet = true;
}
bool Subscriptions::desktopNotificationsIsSet() const
{
    return m_Desktop_notificationsIsSet;
}
void Subscriptions::unsetDesktop_notifications()
{
    m_Desktop_notificationsIsSet = false;
}
bool Subscriptions::isEmailNotifications() const
{
    return m_Email_notifications;
}
void Subscriptions::setEmailNotifications(bool const value)
{
    m_Email_notifications = value;
    m_Email_notificationsIsSet = true;
}
bool Subscriptions::emailNotificationsIsSet() const
{
    return m_Email_notificationsIsSet;
}
void Subscriptions::unsetEmail_notifications()
{
    m_Email_notificationsIsSet = false;
}
bool Subscriptions::isWildcardMentionsNotify() const
{
    return m_Wildcard_mentions_notify;
}
void Subscriptions::setWildcardMentionsNotify(bool const value)
{
    m_Wildcard_mentions_notify = value;
    m_Wildcard_mentions_notifyIsSet = true;
}
bool Subscriptions::wildcardMentionsNotifyIsSet() const
{
    return m_Wildcard_mentions_notifyIsSet;
}
void Subscriptions::unsetWildcard_mentions_notify()
{
    m_Wildcard_mentions_notifyIsSet = false;
}
bool Subscriptions::isPushNotifications() const
{
    return m_Push_notifications;
}
void Subscriptions::setPushNotifications(bool const value)
{
    m_Push_notifications = value;
    m_Push_notificationsIsSet = true;
}
bool Subscriptions::pushNotificationsIsSet() const
{
    return m_Push_notificationsIsSet;
}
void Subscriptions::unsetPush_notifications()
{
    m_Push_notificationsIsSet = false;
}
bool Subscriptions::isAudibleNotifications() const
{
    return m_Audible_notifications;
}
void Subscriptions::setAudibleNotifications(bool const value)
{
    m_Audible_notifications = value;
    m_Audible_notificationsIsSet = true;
}
bool Subscriptions::audibleNotificationsIsSet() const
{
    return m_Audible_notificationsIsSet;
}
void Subscriptions::unsetAudible_notifications()
{
    m_Audible_notificationsIsSet = false;
}
bool Subscriptions::isPinToTop() const
{
    return m_Pin_to_top;
}
void Subscriptions::setPinToTop(bool const value)
{
    m_Pin_to_top = value;
    m_Pin_to_topIsSet = true;
}
bool Subscriptions::pinToTopIsSet() const
{
    return m_Pin_to_topIsSet;
}
void Subscriptions::unsetPin_to_top()
{
    m_Pin_to_topIsSet = false;
}
std::string Subscriptions::getEmailAddress() const
{
    return m_Email_address;
}
void Subscriptions::setEmailAddress(std::string const& value)
{
    m_Email_address = value;
    m_Email_addressIsSet = true;
}
bool Subscriptions::emailAddressIsSet() const
{
    return m_Email_addressIsSet;
}
void Subscriptions::unsetEmail_address()
{
    m_Email_addressIsSet = false;
}
bool Subscriptions::isIsMuted() const
{
    return m_Is_muted;
}
void Subscriptions::setIsMuted(bool const value)
{
    m_Is_muted = value;
    m_Is_mutedIsSet = true;
}
bool Subscriptions::isMutedIsSet() const
{
    return m_Is_mutedIsSet;
}
void Subscriptions::unsetIs_muted()
{
    m_Is_mutedIsSet = false;
}
bool Subscriptions::isInHomeView() const
{
    return m_In_home_view;
}
void Subscriptions::setInHomeView(bool const value)
{
    m_In_home_view = value;
    m_In_home_viewIsSet = true;
}
bool Subscriptions::inHomeViewIsSet() const
{
    return m_In_home_viewIsSet;
}
void Subscriptions::unsetIn_home_view()
{
    m_In_home_viewIsSet = false;
}
bool Subscriptions::isIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}
void Subscriptions::setIsAnnouncementOnly(bool const value)
{
    m_Is_announcement_only = value;
    m_Is_announcement_onlyIsSet = true;
}
bool Subscriptions::isAnnouncementOnlyIsSet() const
{
    return m_Is_announcement_onlyIsSet;
}
void Subscriptions::unsetIs_announcement_only()
{
    m_Is_announcement_onlyIsSet = false;
}
bool Subscriptions::isIsWebPublic() const
{
    return m_Is_web_public;
}
void Subscriptions::setIsWebPublic(bool const value)
{
    m_Is_web_public = value;
    m_Is_web_publicIsSet = true;
}
bool Subscriptions::isWebPublicIsSet() const
{
    return m_Is_web_publicIsSet;
}
void Subscriptions::unsetIs_web_public()
{
    m_Is_web_publicIsSet = false;
}
int32_t Subscriptions::getRole() const
{
    return m_Role;
}
void Subscriptions::setRole(int32_t const value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool Subscriptions::roleIsSet() const
{
    return m_RoleIsSet;
}
void Subscriptions::unsetRole()
{
    m_RoleIsSet = false;
}
std::string Subscriptions::getColor() const
{
    return m_Color;
}
void Subscriptions::setColor(std::string const& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool Subscriptions::colorIsSet() const
{
    return m_ColorIsSet;
}
void Subscriptions::unsetColor()
{
    m_ColorIsSet = false;
}
int32_t Subscriptions::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}
void Subscriptions::setStreamPostPolicy(int32_t const value)
{
    m_Stream_post_policy = value;
    m_Stream_post_policyIsSet = true;
}
bool Subscriptions::streamPostPolicyIsSet() const
{
    return m_Stream_post_policyIsSet;
}
void Subscriptions::unsetStream_post_policy()
{
    m_Stream_post_policyIsSet = false;
}
int32_t Subscriptions::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}
void Subscriptions::setMessageRetentionDays(int32_t const value)
{
    m_Message_retention_days = value;
    m_Message_retention_daysIsSet = true;
}
bool Subscriptions::messageRetentionDaysIsSet() const
{
    return m_Message_retention_daysIsSet;
}
void Subscriptions::unsetMessage_retention_days()
{
    m_Message_retention_daysIsSet = false;
}
bool Subscriptions::isHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}
void Subscriptions::setHistoryPublicToSubscribers(bool const value)
{
    m_History_public_to_subscribers = value;
    m_History_public_to_subscribersIsSet = true;
}
bool Subscriptions::historyPublicToSubscribersIsSet() const
{
    return m_History_public_to_subscribersIsSet;
}
void Subscriptions::unsetHistory_public_to_subscribers()
{
    m_History_public_to_subscribersIsSet = false;
}
int32_t Subscriptions::getFirstMessageId() const
{
    return m_First_message_id;
}
void Subscriptions::setFirstMessageId(int32_t const value)
{
    m_First_message_id = value;
    m_First_message_idIsSet = true;
}
bool Subscriptions::firstMessageIdIsSet() const
{
    return m_First_message_idIsSet;
}
void Subscriptions::unsetFirst_message_id()
{
    m_First_message_idIsSet = false;
}
int32_t Subscriptions::getStreamWeeklyTraffic() const
{
    return m_Stream_weekly_traffic;
}
void Subscriptions::setStreamWeeklyTraffic(int32_t const value)
{
    m_Stream_weekly_traffic = value;
    m_Stream_weekly_trafficIsSet = true;
}
bool Subscriptions::streamWeeklyTrafficIsSet() const
{
    return m_Stream_weekly_trafficIsSet;
}
void Subscriptions::unsetStream_weekly_traffic()
{
    m_Stream_weekly_trafficIsSet = false;
}


} // namespace org::openapitools::server::model

