/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RealmEmoji.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RealmEmoji::RealmEmoji()
{
    m_Id = "";
    m_IdIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Source_url = "";
    m_Source_urlIsSet = false;
    m_Deactivated = false;
    m_DeactivatedIsSet = false;
    m_Author_id = 0;
    m_Author_idIsSet = false;
    
}

void RealmEmoji::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RealmEmoji::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RealmEmoji::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RealmEmoji" : pathPrefix;

                        
    return success;
}

bool RealmEmoji::operator==(const RealmEmoji& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!sourceUrlIsSet() && !rhs.sourceUrlIsSet()) || (sourceUrlIsSet() && rhs.sourceUrlIsSet() && getSourceUrl() == rhs.getSourceUrl())) &&
    
    
    ((!deactivatedIsSet() && !rhs.deactivatedIsSet()) || (deactivatedIsSet() && rhs.deactivatedIsSet() && isDeactivated() == rhs.isDeactivated())) &&
    
    
    ((!authorIdIsSet() && !rhs.authorIdIsSet()) || (authorIdIsSet() && rhs.authorIdIsSet() && getAuthorId() == rhs.getAuthorId()))
    
    ;
}

bool RealmEmoji::operator!=(const RealmEmoji& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RealmEmoji& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.sourceUrlIsSet())
        j["source_url"] = o.m_Source_url;
    if(o.deactivatedIsSet())
        j["deactivated"] = o.m_Deactivated;
    if(o.authorIdIsSet())
        j["author_id"] = o.m_Author_id;
    
}

void from_json(const nlohmann::json& j, RealmEmoji& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("source_url") != j.end())
    {
        j.at("source_url").get_to(o.m_Source_url);
        o.m_Source_urlIsSet = true;
    } 
    if(j.find("deactivated") != j.end())
    {
        j.at("deactivated").get_to(o.m_Deactivated);
        o.m_DeactivatedIsSet = true;
    } 
    if(j.find("author_id") != j.end())
    {
        j.at("author_id").get_to(o.m_Author_id);
        o.m_Author_idIsSet = true;
    } 
    
}

std::string RealmEmoji::getId() const
{
    return m_Id;
}
void RealmEmoji::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool RealmEmoji::idIsSet() const
{
    return m_IdIsSet;
}
void RealmEmoji::unsetId()
{
    m_IdIsSet = false;
}
std::string RealmEmoji::getName() const
{
    return m_Name;
}
void RealmEmoji::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool RealmEmoji::nameIsSet() const
{
    return m_NameIsSet;
}
void RealmEmoji::unsetName()
{
    m_NameIsSet = false;
}
std::string RealmEmoji::getSourceUrl() const
{
    return m_Source_url;
}
void RealmEmoji::setSourceUrl(std::string const& value)
{
    m_Source_url = value;
    m_Source_urlIsSet = true;
}
bool RealmEmoji::sourceUrlIsSet() const
{
    return m_Source_urlIsSet;
}
void RealmEmoji::unsetSource_url()
{
    m_Source_urlIsSet = false;
}
bool RealmEmoji::isDeactivated() const
{
    return m_Deactivated;
}
void RealmEmoji::setDeactivated(bool const value)
{
    m_Deactivated = value;
    m_DeactivatedIsSet = true;
}
bool RealmEmoji::deactivatedIsSet() const
{
    return m_DeactivatedIsSet;
}
void RealmEmoji::unsetDeactivated()
{
    m_DeactivatedIsSet = false;
}
int32_t RealmEmoji::getAuthorId() const
{
    return m_Author_id;
}
void RealmEmoji::setAuthorId(int32_t const value)
{
    m_Author_id = value;
    m_Author_idIsSet = true;
}
bool RealmEmoji::authorIdIsSet() const
{
    return m_Author_idIsSet;
}
void RealmEmoji::unsetAuthor_id()
{
    m_Author_idIsSet = false;
}


} // namespace org::openapitools::server::model

