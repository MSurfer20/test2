/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EmojiReaction_allOf.h
 *
 * 
 */

#ifndef EmojiReaction_allOf_H_
#define EmojiReaction_allOf_H_


#include "AnyType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  EmojiReaction_allOf
{
public:
    EmojiReaction_allOf();
    virtual ~EmojiReaction_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EmojiReaction_allOf& rhs) const;
    bool operator!=(const EmojiReaction_allOf& rhs) const;

    /////////////////////////////////////////////
    /// EmojiReaction_allOf members

    /// <summary>
    /// 
    /// </summary>
    AnyType getEmojiCode() const;
    void setEmojiCode(AnyType const& value);
    bool emojiCodeIsSet() const;
    void unsetEmoji_code();
    /// <summary>
    /// 
    /// </summary>
    AnyType getEmojiName() const;
    void setEmojiName(AnyType const& value);
    bool emojiNameIsSet() const;
    void unsetEmoji_name();
    /// <summary>
    /// 
    /// </summary>
    AnyType getReactionType() const;
    void setReactionType(AnyType const& value);
    bool reactionTypeIsSet() const;
    void unsetReaction_type();
    /// <summary>
    /// 
    /// </summary>
    AnyType getUserId() const;
    void setUserId(AnyType const& value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// 
    /// </summary>
    AnyType getUser() const;
    void setUser(AnyType const& value);
    bool userIsSet() const;
    void unsetUser();

    friend void to_json(nlohmann::json& j, const EmojiReaction_allOf& o);
    friend void from_json(const nlohmann::json& j, EmojiReaction_allOf& o);
protected:
    AnyType m_Emoji_code;
    bool m_Emoji_codeIsSet;
    AnyType m_Emoji_name;
    bool m_Emoji_nameIsSet;
    AnyType m_Reaction_type;
    bool m_Reaction_typeIsSet;
    AnyType m_User_id;
    bool m_User_idIsSet;
    AnyType m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EmojiReaction_allOf_H_ */
