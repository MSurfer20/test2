/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Draft.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Draft::Draft()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Type = "";
    m_Topic = "";
    m_Content = "";
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
    
}

void Draft::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Draft::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Draft::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Draft" : pathPrefix;

                 
    
    /* To */ {
        const std::vector<int32_t>& value = m_To;
        const std::string currentValuePath = _pathPrefix + ".to";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                
    return success;
}

bool Draft::operator==(const Draft& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    (getType() == rhs.getType())
     &&
    
    (getTo() == rhs.getTo())
     &&
    
    (getTopic() == rhs.getTopic())
     &&
    
    (getContent() == rhs.getContent())
     &&
    
    
    ((!timestampIsSet() && !rhs.timestampIsSet()) || (timestampIsSet() && rhs.timestampIsSet() && getTimestamp() == rhs.getTimestamp()))
    
    ;
}

bool Draft::operator!=(const Draft& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Draft& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    j["type"] = o.m_Type;
    j["to"] = o.m_To;
    j["topic"] = o.m_Topic;
    j["content"] = o.m_Content;
    if(o.timestampIsSet())
        j["timestamp"] = o.m_Timestamp;
    
}

void from_json(const nlohmann::json& j, Draft& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    j.at("type").get_to(o.m_Type);
    j.at("to").get_to(o.m_To);
    j.at("topic").get_to(o.m_Topic);
    j.at("content").get_to(o.m_Content);
    if(j.find("timestamp") != j.end())
    {
        j.at("timestamp").get_to(o.m_Timestamp);
        o.m_TimestampIsSet = true;
    } 
    
}

int32_t Draft::getId() const
{
    return m_Id;
}
void Draft::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Draft::idIsSet() const
{
    return m_IdIsSet;
}
void Draft::unsetId()
{
    m_IdIsSet = false;
}
std::string Draft::getType() const
{
    return m_Type;
}
void Draft::setType(std::string const& value)
{
    m_Type = value;
}
std::vector<int32_t> Draft::getTo() const
{
    return m_To;
}
void Draft::setTo(std::vector<int32_t> const value)
{
    m_To = value;
}
std::string Draft::getTopic() const
{
    return m_Topic;
}
void Draft::setTopic(std::string const& value)
{
    m_Topic = value;
}
std::string Draft::getContent() const
{
    return m_Content;
}
void Draft::setContent(std::string const& value)
{
    m_Content = value;
}
double Draft::getTimestamp() const
{
    return m_Timestamp;
}
void Draft::setTimestamp(double const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Draft::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void Draft::unsetTimestamp()
{
    m_TimestampIsSet = false;
}


} // namespace org::openapitools::server::model

