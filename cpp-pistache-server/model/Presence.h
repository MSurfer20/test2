/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Presence.h
 *
 * &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. 
 */

#ifndef Presence_H_
#define Presence_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. 
/// </summary>
class  Presence
{
public:
    Presence();
    virtual ~Presence() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Presence& rhs) const;
    bool operator!=(const Presence& rhs) const;

    /////////////////////////////////////////////
    /// Presence members

    /// <summary>
    /// The client&#39;s platform name. 
    /// </summary>
    std::string getClient() const;
    void setClient(std::string const& value);
    bool clientIsSet() const;
    void unsetClient();
    /// <summary>
    /// The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. 
    /// </summary>
    std::string getStatus() const;
    void setStatus(std::string const& value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t const value);
    bool timestampIsSet() const;
    void unsetTimestamp();
    /// <summary>
    /// Whether the client is capable of showing mobile/push notifications to the user. 
    /// </summary>
    bool isPushable() const;
    void setPushable(bool const value);
    bool pushableIsSet() const;
    void unsetPushable();

    friend void to_json(nlohmann::json& j, const Presence& o);
    friend void from_json(const nlohmann::json& j, Presence& o);
protected:
    std::string m_Client;
    bool m_ClientIsSet;
    std::string m_Status;
    bool m_StatusIsSet;
    int32_t m_Timestamp;
    bool m_TimestampIsSet;
    bool m_Pushable;
    bool m_PushableIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Presence_H_ */
