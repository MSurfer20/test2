/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * User_allOf.h
 *
 * 
 */

#ifndef User_allOf_H_
#define User_allOf_H_


#include "AnyType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  User_allOf
{
public:
    User_allOf();
    virtual ~User_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const User_allOf& rhs) const;
    bool operator!=(const User_allOf& rhs) const;

    /////////////////////////////////////////////
    /// User_allOf members

    /// <summary>
    /// 
    /// </summary>
    AnyType getEmail() const;
    void setEmail(AnyType const& value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsBot() const;
    void setIsBot(AnyType const& value);
    bool isBotIsSet() const;
    void unsetIs_bot();
    /// <summary>
    /// 
    /// </summary>
    AnyType getAvatarUrl() const;
    void setAvatarUrl(AnyType const& value);
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();
    /// <summary>
    /// 
    /// </summary>
    AnyType getAvatarVersion() const;
    void setAvatarVersion(AnyType const& value);
    bool avatarVersionIsSet() const;
    void unsetAvatar_version();
    /// <summary>
    /// 
    /// </summary>
    AnyType getFullName() const;
    void setFullName(AnyType const& value);
    bool fullNameIsSet() const;
    void unsetFull_name();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsAdmin() const;
    void setIsAdmin(AnyType const& value);
    bool isAdminIsSet() const;
    void unsetIs_admin();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsOwner() const;
    void setIsOwner(AnyType const& value);
    bool isOwnerIsSet() const;
    void unsetIs_owner();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsBillingAdmin() const;
    void setIsBillingAdmin(AnyType const& value);
    bool isBillingAdminIsSet() const;
    void unsetIs_billing_admin();
    /// <summary>
    /// 
    /// </summary>
    AnyType getRole() const;
    void setRole(AnyType const& value);
    bool roleIsSet() const;
    void unsetRole();
    /// <summary>
    /// 
    /// </summary>
    AnyType getBotType() const;
    void setBotType(AnyType const& value);
    bool botTypeIsSet() const;
    void unsetBot_type();
    /// <summary>
    /// 
    /// </summary>
    AnyType getUserId() const;
    void setUserId(AnyType const& value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// 
    /// </summary>
    AnyType getBotOwnerId() const;
    void setBotOwnerId(AnyType const& value);
    bool botOwnerIdIsSet() const;
    void unsetBot_owner_id();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsActive() const;
    void setIsActive(AnyType const& value);
    bool isActiveIsSet() const;
    void unsetIs_active();
    /// <summary>
    /// 
    /// </summary>
    AnyType getIsGuest() const;
    void setIsGuest(AnyType const& value);
    bool isGuestIsSet() const;
    void unsetIs_guest();
    /// <summary>
    /// 
    /// </summary>
    AnyType getTimezone() const;
    void setTimezone(AnyType const& value);
    bool timezoneIsSet() const;
    void unsetTimezone();
    /// <summary>
    /// 
    /// </summary>
    AnyType getDateJoined() const;
    void setDateJoined(AnyType const& value);
    bool dateJoinedIsSet() const;
    void unsetDate_joined();
    /// <summary>
    /// 
    /// </summary>
    AnyType getDeliveryEmail() const;
    void setDeliveryEmail(AnyType const& value);
    bool deliveryEmailIsSet() const;
    void unsetDelivery_email();
    /// <summary>
    /// 
    /// </summary>
    AnyType getProfileData() const;
    void setProfileData(AnyType const& value);
    bool profileDataIsSet() const;
    void unsetProfile_data();

    friend void to_json(nlohmann::json& j, const User_allOf& o);
    friend void from_json(const nlohmann::json& j, User_allOf& o);
protected:
    AnyType m_Email;
    bool m_EmailIsSet;
    AnyType m_Is_bot;
    bool m_Is_botIsSet;
    AnyType m_Avatar_url;
    bool m_Avatar_urlIsSet;
    AnyType m_Avatar_version;
    bool m_Avatar_versionIsSet;
    AnyType m_Full_name;
    bool m_Full_nameIsSet;
    AnyType m_Is_admin;
    bool m_Is_adminIsSet;
    AnyType m_Is_owner;
    bool m_Is_ownerIsSet;
    AnyType m_Is_billing_admin;
    bool m_Is_billing_adminIsSet;
    AnyType m_Role;
    bool m_RoleIsSet;
    AnyType m_Bot_type;
    bool m_Bot_typeIsSet;
    AnyType m_User_id;
    bool m_User_idIsSet;
    AnyType m_Bot_owner_id;
    bool m_Bot_owner_idIsSet;
    AnyType m_Is_active;
    bool m_Is_activeIsSet;
    AnyType m_Is_guest;
    bool m_Is_guestIsSet;
    AnyType m_Timezone;
    bool m_TimezoneIsSet;
    AnyType m_Date_joined;
    bool m_Date_joinedIsSet;
    AnyType m_Delivery_email;
    bool m_Delivery_emailIsSet;
    AnyType m_Profile_data;
    bool m_Profile_dataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* User_allOf_H_ */
