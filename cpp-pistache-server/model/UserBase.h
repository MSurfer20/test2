/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UserBase.h
 *
 * A dictionary containing basic data on a given Zulip user. 
 */

#ifndef UserBase_H_
#define UserBase_H_


#include <string>
#include "Object.h"
#include <map>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A dictionary containing basic data on a given Zulip user. 
/// </summary>
class  UserBase
{
public:
    UserBase();
    virtual ~UserBase() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const UserBase& rhs) const;
    bool operator!=(const UserBase& rhs) const;

    /////////////////////////////////////////////
    /// UserBase members

    /// <summary>
    /// The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string const& value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// A boolean specifying whether the user is a bot or full account. 
    /// </summary>
    bool isIsBot() const;
    void setIsBot(bool const value);
    bool isBotIsSet() const;
    void unsetIs_bot();
    /// <summary>
    /// URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. 
    /// </summary>
    std::string getAvatarUrl() const;
    void setAvatarUrl(std::string const& value);
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();
    /// <summary>
    /// Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. 
    /// </summary>
    int32_t getAvatarVersion() const;
    void setAvatarVersion(int32_t const value);
    bool avatarVersionIsSet() const;
    void unsetAvatar_version();
    /// <summary>
    /// Full name of the user or bot, used for all display purposes. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string const& value);
    bool fullNameIsSet() const;
    void unsetFull_name();
    /// <summary>
    /// A boolean specifying whether the user is an organization administrator. 
    /// </summary>
    bool isIsAdmin() const;
    void setIsAdmin(bool const value);
    bool isAdminIsSet() const;
    void unsetIs_admin();
    /// <summary>
    /// A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
    /// </summary>
    bool isIsOwner() const;
    void setIsOwner(bool const value);
    bool isOwnerIsSet() const;
    void unsetIs_owner();
    /// <summary>
    /// A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
    /// </summary>
    bool isIsBillingAdmin() const;
    void setIsBillingAdmin(bool const value);
    bool isBillingAdminIsSet() const;
    void unsetIs_billing_admin();
    /// <summary>
    /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
    /// </summary>
    int32_t getRole() const;
    void setRole(int32_t const value);
    bool roleIsSet() const;
    void unsetRole();
    /// <summary>
    /// An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
    /// </summary>
    int32_t getBotType() const;
    void setBotType(int32_t const value);
    bool botTypeIsSet() const;
    void unsetBot_type();
    /// <summary>
    /// The unique ID of the user. 
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t const value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. 
    /// </summary>
    int32_t getBotOwnerId() const;
    void setBotOwnerId(int32_t const value);
    bool botOwnerIdIsSet() const;
    void unsetBot_owner_id();
    /// <summary>
    /// A boolean specifying whether the user account has been deactivated. 
    /// </summary>
    bool isIsActive() const;
    void setIsActive(bool const value);
    bool isActiveIsSet() const;
    void unsetIs_active();
    /// <summary>
    /// A boolean specifying whether the user is a guest user. 
    /// </summary>
    bool isIsGuest() const;
    void setIsGuest(bool const value);
    bool isGuestIsSet() const;
    void unsetIs_guest();
    /// <summary>
    /// The time zone of the user. 
    /// </summary>
    std::string getTimezone() const;
    void setTimezone(std::string const& value);
    bool timezoneIsSet() const;
    void unsetTimezone();
    /// <summary>
    /// The time the user account was created. 
    /// </summary>
    std::string getDateJoined() const;
    void setDateJoined(std::string const& value);
    bool dateJoinedIsSet() const;
    void unsetDate_joined();
    /// <summary>
    /// The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
    /// </summary>
    std::string getDeliveryEmail() const;
    void setDeliveryEmail(std::string const& value);
    bool deliveryEmailIsSet() const;
    void unsetDelivery_email();
    /// <summary>
    /// A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. 
    /// </summary>
    std::map<std::string, Object> getProfileData() const;
    void setProfileData(std::map<std::string, Object> const& value);
    bool profileDataIsSet() const;
    void unsetProfile_data();

    friend void to_json(nlohmann::json& j, const UserBase& o);
    friend void from_json(const nlohmann::json& j, UserBase& o);
protected:
    std::string m_Email;
    bool m_EmailIsSet;
    bool m_Is_bot;
    bool m_Is_botIsSet;
    std::string m_Avatar_url;
    bool m_Avatar_urlIsSet;
    int32_t m_Avatar_version;
    bool m_Avatar_versionIsSet;
    std::string m_Full_name;
    bool m_Full_nameIsSet;
    bool m_Is_admin;
    bool m_Is_adminIsSet;
    bool m_Is_owner;
    bool m_Is_ownerIsSet;
    bool m_Is_billing_admin;
    bool m_Is_billing_adminIsSet;
    int32_t m_Role;
    bool m_RoleIsSet;
    int32_t m_Bot_type;
    bool m_Bot_typeIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
    int32_t m_Bot_owner_id;
    bool m_Bot_owner_idIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Is_guest;
    bool m_Is_guestIsSet;
    std::string m_Timezone;
    bool m_TimezoneIsSet;
    std::string m_Date_joined;
    bool m_Date_joinedIsSet;
    std::string m_Delivery_email;
    bool m_Delivery_emailIsSet;
    std::map<std::string, Object> m_Profile_data;
    bool m_Profile_dataIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* UserBase_H_ */
