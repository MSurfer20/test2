/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Presence.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Presence::Presence()
{
    m_Client = "";
    m_ClientIsSet = false;
    m_Status = "";
    m_StatusIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Pushable = false;
    m_PushableIsSet = false;
    
}

void Presence::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Presence::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Presence::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Presence" : pathPrefix;

                    
    return success;
}

bool Presence::operator==(const Presence& rhs) const
{
    return
    
    
    
    ((!clientIsSet() && !rhs.clientIsSet()) || (clientIsSet() && rhs.clientIsSet() && getClient() == rhs.getClient())) &&
    
    
    ((!statusIsSet() && !rhs.statusIsSet()) || (statusIsSet() && rhs.statusIsSet() && getStatus() == rhs.getStatus())) &&
    
    
    ((!timestampIsSet() && !rhs.timestampIsSet()) || (timestampIsSet() && rhs.timestampIsSet() && getTimestamp() == rhs.getTimestamp())) &&
    
    
    ((!pushableIsSet() && !rhs.pushableIsSet()) || (pushableIsSet() && rhs.pushableIsSet() && isPushable() == rhs.isPushable()))
    
    ;
}

bool Presence::operator!=(const Presence& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Presence& o)
{
    j = nlohmann::json();
    if(o.clientIsSet())
        j["client"] = o.m_Client;
    if(o.statusIsSet())
        j["status"] = o.m_Status;
    if(o.timestampIsSet())
        j["timestamp"] = o.m_Timestamp;
    if(o.pushableIsSet())
        j["pushable"] = o.m_Pushable;
    
}

void from_json(const nlohmann::json& j, Presence& o)
{
    if(j.find("client") != j.end())
    {
        j.at("client").get_to(o.m_Client);
        o.m_ClientIsSet = true;
    } 
    if(j.find("status") != j.end())
    {
        j.at("status").get_to(o.m_Status);
        o.m_StatusIsSet = true;
    } 
    if(j.find("timestamp") != j.end())
    {
        j.at("timestamp").get_to(o.m_Timestamp);
        o.m_TimestampIsSet = true;
    } 
    if(j.find("pushable") != j.end())
    {
        j.at("pushable").get_to(o.m_Pushable);
        o.m_PushableIsSet = true;
    } 
    
}

std::string Presence::getClient() const
{
    return m_Client;
}
void Presence::setClient(std::string const& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}
bool Presence::clientIsSet() const
{
    return m_ClientIsSet;
}
void Presence::unsetClient()
{
    m_ClientIsSet = false;
}
std::string Presence::getStatus() const
{
    return m_Status;
}
void Presence::setStatus(std::string const& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Presence::statusIsSet() const
{
    return m_StatusIsSet;
}
void Presence::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t Presence::getTimestamp() const
{
    return m_Timestamp;
}
void Presence::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Presence::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void Presence::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
bool Presence::isPushable() const
{
    return m_Pushable;
}
void Presence::setPushable(bool const value)
{
    m_Pushable = value;
    m_PushableIsSet = true;
}
bool Presence::pushableIsSet() const
{
    return m_PushableIsSet;
}
void Presence::unsetPushable()
{
    m_PushableIsSet = false;
}


} // namespace org::openapitools::server::model

