/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Inline_response_200.h
 *
 * This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
 */

#ifndef Inline_response_200_H_
#define Inline_response_200_H_


#include "MessagesBase.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
/// </summary>
class  Inline_response_200
{
public:
    Inline_response_200();
    virtual ~Inline_response_200() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Inline_response_200& rhs) const;
    bool operator!=(const Inline_response_200& rhs) const;

    /////////////////////////////////////////////
    /// Inline_response_200 members

    /// <summary>
    /// Email of the bot user. 
    /// </summary>
    std::string getBotEmail() const;
    void setBotEmail(std::string const& value);
    bool botEmailIsSet() const;
    void unsetBot_email();
    /// <summary>
    /// The full name of the bot user. 
    /// </summary>
    std::string getBotFullName() const;
    void setBotFullName(std::string const& value);
    bool botFullNameIsSet() const;
    void unsetBot_full_name();
    /// <summary>
    /// The message content, in raw Markdown format (not rendered to HTML). 
    /// </summary>
    std::string getData() const;
    void setData(std::string const& value);
    bool dataIsSet() const;
    void unsetData();
    /// <summary>
    /// What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. 
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string const& value);
    bool triggerIsSet() const;
    void unsetTrigger();
    /// <summary>
    /// A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. 
    /// </summary>
    std::string getToken() const;
    void setToken(std::string const& value);
    bool tokenIsSet() const;
    void unsetToken();
    /// <summary>
    /// A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). 
    /// </summary>
    MessagesBase getMessage() const;
    void setMessage(MessagesBase const& value);
    bool messageIsSet() const;
    void unsetMessage();

    friend void to_json(nlohmann::json& j, const Inline_response_200& o);
    friend void from_json(const nlohmann::json& j, Inline_response_200& o);
protected:
    std::string m_Bot_email;
    bool m_Bot_emailIsSet;
    std::string m_Bot_full_name;
    bool m_Bot_full_nameIsSet;
    std::string m_Data;
    bool m_DataIsSet;
    std::string m_Trigger;
    bool m_TriggerIsSet;
    std::string m_Token;
    bool m_TokenIsSet;
    MessagesBase m_Message;
    bool m_MessageIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Inline_response_200_H_ */
