/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Subscriptions.h
 *
 * 
 */

#ifndef Subscriptions_H_
#define Subscriptions_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Subscriptions
{
public:
    Subscriptions();
    virtual ~Subscriptions() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Subscriptions& rhs) const;
    bool operator!=(const Subscriptions& rhs) const;

    /////////////////////////////////////////////
    /// Subscriptions members

    /// <summary>
    /// The unique ID of a stream. 
    /// </summary>
    int32_t getStreamId() const;
    void setStreamId(int32_t const value);
    bool streamIdIsSet() const;
    void unsetStream_id();
    /// <summary>
    /// The name of a stream. 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
    /// </summary>
    std::string getRenderedDescription() const;
    void setRenderedDescription(std::string const& value);
    bool renderedDescriptionIsSet() const;
    void unsetRendered_description();
    /// <summary>
    /// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
    /// </summary>
    int32_t getDateCreated() const;
    void setDateCreated(int32_t const value);
    bool dateCreatedIsSet() const;
    void unsetDate_created();
    /// <summary>
    /// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
    /// </summary>
    bool isInviteOnly() const;
    void setInviteOnly(bool const value);
    bool inviteOnlyIsSet() const;
    void unsetInvite_only();
    /// <summary>
    /// A list of user IDs of users who are also subscribed to a given stream. Included only if &#x60;include_subscribers&#x60; is &#x60;true&#x60;. 
    /// </summary>
    std::vector<int32_t> getSubscribers() const;
    void setSubscribers(std::vector<int32_t> const value);
    bool subscribersIsSet() const;
    void unsetSubscribers();
    /// <summary>
    /// A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. 
    /// </summary>
    bool isDesktopNotifications() const;
    void setDesktopNotifications(bool const value);
    bool desktopNotificationsIsSet() const;
    void unsetDesktop_notifications();
    /// <summary>
    /// A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. 
    /// </summary>
    bool isEmailNotifications() const;
    void setEmailNotifications(bool const value);
    bool emailNotificationsIsSet() const;
    void unsetEmail_notifications();
    /// <summary>
    /// A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. 
    /// </summary>
    bool isWildcardMentionsNotify() const;
    void setWildcardMentionsNotify(bool const value);
    bool wildcardMentionsNotifyIsSet() const;
    void unsetWildcard_mentions_notify();
    /// <summary>
    /// A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. 
    /// </summary>
    bool isPushNotifications() const;
    void setPushNotifications(bool const value);
    bool pushNotificationsIsSet() const;
    void unsetPush_notifications();
    /// <summary>
    /// A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. 
    /// </summary>
    bool isAudibleNotifications() const;
    void setAudibleNotifications(bool const value);
    bool audibleNotificationsIsSet() const;
    void unsetAudible_notifications();
    /// <summary>
    /// A boolean specifying whether the given stream has been pinned to the top. 
    /// </summary>
    bool isPinToTop() const;
    void setPinToTop(bool const value);
    bool pinToTopIsSet() const;
    void unsetPin_to_top();
    /// <summary>
    /// Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). 
    /// </summary>
    std::string getEmailAddress() const;
    void setEmailAddress(std::string const& value);
    bool emailAddressIsSet() const;
    void unsetEmail_address();
    /// <summary>
    /// Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in &#x60;All messages&#x60; view (previously known as &#x60;Home&#x60; view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named &#x60;in_home_view&#x60; (with the opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;). 
    /// </summary>
    bool isIsMuted() const;
    void setIsMuted(bool const value);
    bool isMutedIsSet() const;
    void unsetIs_muted();
    /// <summary>
    /// Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. 
    /// </summary>
    bool isInHomeView() const;
    void setInHomeView(bool const value);
    bool inHomeViewIsSet() const;
    void unsetIn_home_view();
    /// <summary>
    /// Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. 
    /// </summary>
    bool isIsAnnouncementOnly() const;
    void setIsAnnouncementOnly(bool const value);
    bool isAnnouncementOnlyIsSet() const;
    void unsetIs_announcement_only();
    /// <summary>
    /// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
    /// </summary>
    bool isIsWebPublic() const;
    void setIsWebPublic(bool const value);
    bool isWebPublicIsSet() const;
    void unsetIs_web_public();
    /// <summary>
    /// The user&#39;s role within the stream (distinct from the user&#39;s [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 &#x3D;&gt; Stream administrator. * 50 &#x3D;&gt; Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). 
    /// </summary>
    int32_t getRole() const;
    void setRole(int32_t const value);
    bool roleIsSet() const;
    void unsetRole();
    /// <summary>
    /// The user&#39;s personal color for the stream. 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string const& value);
    bool colorIsSet() const;
    void unsetColor();
    /// <summary>
    /// Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
    /// </summary>
    int32_t getStreamPostPolicy() const;
    void setStreamPostPolicy(int32_t const value);
    bool streamPostPolicyIsSet() const;
    void unsetStream_post_policy();
    /// <summary>
    /// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    /// </summary>
    int32_t getMessageRetentionDays() const;
    void setMessageRetentionDays(int32_t const value);
    bool messageRetentionDaysIsSet() const;
    void unsetMessage_retention_days();
    /// <summary>
    /// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. 
    /// </summary>
    bool isHistoryPublicToSubscribers() const;
    void setHistoryPublicToSubscribers(bool const value);
    bool historyPublicToSubscribersIsSet() const;
    void unsetHistory_public_to_subscribers();
    /// <summary>
    /// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
    /// </summary>
    int32_t getFirstMessageId() const;
    void setFirstMessageId(int32_t const value);
    bool firstMessageIdIsSet() const;
    void unsetFirst_message_id();
    /// <summary>
    /// The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. 
    /// </summary>
    int32_t getStreamWeeklyTraffic() const;
    void setStreamWeeklyTraffic(int32_t const value);
    bool streamWeeklyTrafficIsSet() const;
    void unsetStream_weekly_traffic();

    friend void to_json(nlohmann::json& j, const Subscriptions& o);
    friend void from_json(const nlohmann::json& j, Subscriptions& o);
protected:
    int32_t m_Stream_id;
    bool m_Stream_idIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Rendered_description;
    bool m_Rendered_descriptionIsSet;
    int32_t m_Date_created;
    bool m_Date_createdIsSet;
    bool m_Invite_only;
    bool m_Invite_onlyIsSet;
    std::vector<int32_t> m_Subscribers;
    bool m_SubscribersIsSet;
    bool m_Desktop_notifications;
    bool m_Desktop_notificationsIsSet;
    bool m_Email_notifications;
    bool m_Email_notificationsIsSet;
    bool m_Wildcard_mentions_notify;
    bool m_Wildcard_mentions_notifyIsSet;
    bool m_Push_notifications;
    bool m_Push_notificationsIsSet;
    bool m_Audible_notifications;
    bool m_Audible_notificationsIsSet;
    bool m_Pin_to_top;
    bool m_Pin_to_topIsSet;
    std::string m_Email_address;
    bool m_Email_addressIsSet;
    bool m_Is_muted;
    bool m_Is_mutedIsSet;
    bool m_In_home_view;
    bool m_In_home_viewIsSet;
    bool m_Is_announcement_only;
    bool m_Is_announcement_onlyIsSet;
    bool m_Is_web_public;
    bool m_Is_web_publicIsSet;
    int32_t m_Role;
    bool m_RoleIsSet;
    std::string m_Color;
    bool m_ColorIsSet;
    int32_t m_Stream_post_policy;
    bool m_Stream_post_policyIsSet;
    int32_t m_Message_retention_days;
    bool m_Message_retention_daysIsSet;
    bool m_History_public_to_subscribers;
    bool m_History_public_to_subscribersIsSet;
    int32_t m_First_message_id;
    bool m_First_message_idIsSet;
    int32_t m_Stream_weekly_traffic;
    bool m_Stream_weekly_trafficIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Subscriptions_H_ */
