/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Hotspot.h
 *
 * Dictionary containing details of a single hotspot. 
 */

#ifndef Hotspot_H_
#define Hotspot_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Dictionary containing details of a single hotspot. 
/// </summary>
class  Hotspot
{
public:
    Hotspot();
    virtual ~Hotspot() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Hotspot& rhs) const;
    bool operator!=(const Hotspot& rhs) const;

    /////////////////////////////////////////////
    /// Hotspot members

    /// <summary>
    /// The delay after which the user should be shown the hotspot. 
    /// </summary>
    double getDelay() const;
    void setDelay(double const value);
    bool delayIsSet() const;
    void unsetDelay();
    /// <summary>
    /// The name of the hotspot. 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// The title of the hotspot, as will be displayed to the user. 
    /// </summary>
    std::string getTitle() const;
    void setTitle(std::string const& value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// The description of the hotspot, as will be displayed to the user. 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();

    friend void to_json(nlohmann::json& j, const Hotspot& o);
    friend void from_json(const nlohmann::json& j, Hotspot& o);
protected:
    double m_Delay;
    bool m_DelayIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Title;
    bool m_TitleIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Hotspot_H_ */
