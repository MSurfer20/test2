/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RealmPlayground.h
 *
 * Object containing details about a realm playground. 
 */

#ifndef RealmPlayground_H_
#define RealmPlayground_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object containing details about a realm playground. 
/// </summary>
class  RealmPlayground
{
public:
    RealmPlayground();
    virtual ~RealmPlayground() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RealmPlayground& rhs) const;
    bool operator!=(const RealmPlayground& rhs) const;

    /////////////////////////////////////////////
    /// RealmPlayground members

    /// <summary>
    /// The unique ID for the realm playground. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// The name of the Pygments language lexer for that programming language. 
    /// </summary>
    std::string getPygmentsLanguage() const;
    void setPygmentsLanguage(std::string const& value);
    bool pygmentsLanguageIsSet() const;
    void unsetPygments_language();
    /// <summary>
    /// The url prefix for the playground. 
    /// </summary>
    std::string getUrlPrefix() const;
    void setUrlPrefix(std::string const& value);
    bool urlPrefixIsSet() const;
    void unsetUrl_prefix();

    friend void to_json(nlohmann::json& j, const RealmPlayground& o);
    friend void from_json(const nlohmann::json& j, RealmPlayground& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Pygments_language;
    bool m_Pygments_languageIsSet;
    std::string m_Url_prefix;
    bool m_Url_prefixIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* RealmPlayground_H_ */
