/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EmojiReaction_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

EmojiReaction_allOf::EmojiReaction_allOf()
{
    m_Emoji_codeIsSet = false;
    m_Emoji_nameIsSet = false;
    m_Reaction_typeIsSet = false;
    m_User_idIsSet = false;
    m_UserIsSet = false;
    
}

void EmojiReaction_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool EmojiReaction_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool EmojiReaction_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "EmojiReaction_allOf" : pathPrefix;

                        
    return success;
}

bool EmojiReaction_allOf::operator==(const EmojiReaction_allOf& rhs) const
{
    return
    
    
    
    ((!emojiCodeIsSet() && !rhs.emojiCodeIsSet()) || (emojiCodeIsSet() && rhs.emojiCodeIsSet() && getEmojiCode() == rhs.getEmojiCode())) &&
    
    
    ((!emojiNameIsSet() && !rhs.emojiNameIsSet()) || (emojiNameIsSet() && rhs.emojiNameIsSet() && getEmojiName() == rhs.getEmojiName())) &&
    
    
    ((!reactionTypeIsSet() && !rhs.reactionTypeIsSet()) || (reactionTypeIsSet() && rhs.reactionTypeIsSet() && getReactionType() == rhs.getReactionType())) &&
    
    
    ((!userIdIsSet() && !rhs.userIdIsSet()) || (userIdIsSet() && rhs.userIdIsSet() && getUserId() == rhs.getUserId())) &&
    
    
    ((!userIsSet() && !rhs.userIsSet()) || (userIsSet() && rhs.userIsSet() && getUser() == rhs.getUser()))
    
    ;
}

bool EmojiReaction_allOf::operator!=(const EmojiReaction_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const EmojiReaction_allOf& o)
{
    j = nlohmann::json();
    if(o.emojiCodeIsSet())
        j["emoji_code"] = o.m_Emoji_code;
    if(o.emojiNameIsSet())
        j["emoji_name"] = o.m_Emoji_name;
    if(o.reactionTypeIsSet())
        j["reaction_type"] = o.m_Reaction_type;
    if(o.userIdIsSet())
        j["user_id"] = o.m_User_id;
    if(o.userIsSet())
        j["user"] = o.m_User;
    
}

void from_json(const nlohmann::json& j, EmojiReaction_allOf& o)
{
    if(j.find("emoji_code") != j.end())
    {
        j.at("emoji_code").get_to(o.m_Emoji_code);
        o.m_Emoji_codeIsSet = true;
    } 
    if(j.find("emoji_name") != j.end())
    {
        j.at("emoji_name").get_to(o.m_Emoji_name);
        o.m_Emoji_nameIsSet = true;
    } 
    if(j.find("reaction_type") != j.end())
    {
        j.at("reaction_type").get_to(o.m_Reaction_type);
        o.m_Reaction_typeIsSet = true;
    } 
    if(j.find("user_id") != j.end())
    {
        j.at("user_id").get_to(o.m_User_id);
        o.m_User_idIsSet = true;
    } 
    if(j.find("user") != j.end())
    {
        j.at("user").get_to(o.m_User);
        o.m_UserIsSet = true;
    } 
    
}

AnyType EmojiReaction_allOf::getEmojiCode() const
{
    return m_Emoji_code;
}
void EmojiReaction_allOf::setEmojiCode(AnyType const& value)
{
    m_Emoji_code = value;
    m_Emoji_codeIsSet = true;
}
bool EmojiReaction_allOf::emojiCodeIsSet() const
{
    return m_Emoji_codeIsSet;
}
void EmojiReaction_allOf::unsetEmoji_code()
{
    m_Emoji_codeIsSet = false;
}
AnyType EmojiReaction_allOf::getEmojiName() const
{
    return m_Emoji_name;
}
void EmojiReaction_allOf::setEmojiName(AnyType const& value)
{
    m_Emoji_name = value;
    m_Emoji_nameIsSet = true;
}
bool EmojiReaction_allOf::emojiNameIsSet() const
{
    return m_Emoji_nameIsSet;
}
void EmojiReaction_allOf::unsetEmoji_name()
{
    m_Emoji_nameIsSet = false;
}
AnyType EmojiReaction_allOf::getReactionType() const
{
    return m_Reaction_type;
}
void EmojiReaction_allOf::setReactionType(AnyType const& value)
{
    m_Reaction_type = value;
    m_Reaction_typeIsSet = true;
}
bool EmojiReaction_allOf::reactionTypeIsSet() const
{
    return m_Reaction_typeIsSet;
}
void EmojiReaction_allOf::unsetReaction_type()
{
    m_Reaction_typeIsSet = false;
}
AnyType EmojiReaction_allOf::getUserId() const
{
    return m_User_id;
}
void EmojiReaction_allOf::setUserId(AnyType const& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool EmojiReaction_allOf::userIdIsSet() const
{
    return m_User_idIsSet;
}
void EmojiReaction_allOf::unsetUser_id()
{
    m_User_idIsSet = false;
}
AnyType EmojiReaction_allOf::getUser() const
{
    return m_User;
}
void EmojiReaction_allOf::setUser(AnyType const& value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool EmojiReaction_allOf::userIsSet() const
{
    return m_UserIsSet;
}
void EmojiReaction_allOf::unsetUser()
{
    m_UserIsSet = false;
}


} // namespace org::openapitools::server::model

