/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "User_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

User_allOf::User_allOf()
{
    m_EmailIsSet = false;
    m_Is_botIsSet = false;
    m_Avatar_urlIsSet = false;
    m_Avatar_versionIsSet = false;
    m_Full_nameIsSet = false;
    m_Is_adminIsSet = false;
    m_Is_ownerIsSet = false;
    m_Is_billing_adminIsSet = false;
    m_RoleIsSet = false;
    m_Bot_typeIsSet = false;
    m_User_idIsSet = false;
    m_Bot_owner_idIsSet = false;
    m_Is_activeIsSet = false;
    m_Is_guestIsSet = false;
    m_TimezoneIsSet = false;
    m_Date_joinedIsSet = false;
    m_Delivery_emailIsSet = false;
    m_Profile_dataIsSet = false;
    
}

void User_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool User_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool User_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "User_allOf" : pathPrefix;

                                                                            
    return success;
}

bool User_allOf::operator==(const User_allOf& rhs) const
{
    return
    
    
    
    ((!emailIsSet() && !rhs.emailIsSet()) || (emailIsSet() && rhs.emailIsSet() && getEmail() == rhs.getEmail())) &&
    
    
    ((!isBotIsSet() && !rhs.isBotIsSet()) || (isBotIsSet() && rhs.isBotIsSet() && getIsBot() == rhs.getIsBot())) &&
    
    
    ((!avatarUrlIsSet() && !rhs.avatarUrlIsSet()) || (avatarUrlIsSet() && rhs.avatarUrlIsSet() && getAvatarUrl() == rhs.getAvatarUrl())) &&
    
    
    ((!avatarVersionIsSet() && !rhs.avatarVersionIsSet()) || (avatarVersionIsSet() && rhs.avatarVersionIsSet() && getAvatarVersion() == rhs.getAvatarVersion())) &&
    
    
    ((!fullNameIsSet() && !rhs.fullNameIsSet()) || (fullNameIsSet() && rhs.fullNameIsSet() && getFullName() == rhs.getFullName())) &&
    
    
    ((!isAdminIsSet() && !rhs.isAdminIsSet()) || (isAdminIsSet() && rhs.isAdminIsSet() && getIsAdmin() == rhs.getIsAdmin())) &&
    
    
    ((!isOwnerIsSet() && !rhs.isOwnerIsSet()) || (isOwnerIsSet() && rhs.isOwnerIsSet() && getIsOwner() == rhs.getIsOwner())) &&
    
    
    ((!isBillingAdminIsSet() && !rhs.isBillingAdminIsSet()) || (isBillingAdminIsSet() && rhs.isBillingAdminIsSet() && getIsBillingAdmin() == rhs.getIsBillingAdmin())) &&
    
    
    ((!roleIsSet() && !rhs.roleIsSet()) || (roleIsSet() && rhs.roleIsSet() && getRole() == rhs.getRole())) &&
    
    
    ((!botTypeIsSet() && !rhs.botTypeIsSet()) || (botTypeIsSet() && rhs.botTypeIsSet() && getBotType() == rhs.getBotType())) &&
    
    
    ((!userIdIsSet() && !rhs.userIdIsSet()) || (userIdIsSet() && rhs.userIdIsSet() && getUserId() == rhs.getUserId())) &&
    
    
    ((!botOwnerIdIsSet() && !rhs.botOwnerIdIsSet()) || (botOwnerIdIsSet() && rhs.botOwnerIdIsSet() && getBotOwnerId() == rhs.getBotOwnerId())) &&
    
    
    ((!isActiveIsSet() && !rhs.isActiveIsSet()) || (isActiveIsSet() && rhs.isActiveIsSet() && getIsActive() == rhs.getIsActive())) &&
    
    
    ((!isGuestIsSet() && !rhs.isGuestIsSet()) || (isGuestIsSet() && rhs.isGuestIsSet() && getIsGuest() == rhs.getIsGuest())) &&
    
    
    ((!timezoneIsSet() && !rhs.timezoneIsSet()) || (timezoneIsSet() && rhs.timezoneIsSet() && getTimezone() == rhs.getTimezone())) &&
    
    
    ((!dateJoinedIsSet() && !rhs.dateJoinedIsSet()) || (dateJoinedIsSet() && rhs.dateJoinedIsSet() && getDateJoined() == rhs.getDateJoined())) &&
    
    
    ((!deliveryEmailIsSet() && !rhs.deliveryEmailIsSet()) || (deliveryEmailIsSet() && rhs.deliveryEmailIsSet() && getDeliveryEmail() == rhs.getDeliveryEmail())) &&
    
    
    ((!profileDataIsSet() && !rhs.profileDataIsSet()) || (profileDataIsSet() && rhs.profileDataIsSet() && getProfileData() == rhs.getProfileData()))
    
    ;
}

bool User_allOf::operator!=(const User_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const User_allOf& o)
{
    j = nlohmann::json();
    if(o.emailIsSet())
        j["email"] = o.m_Email;
    if(o.isBotIsSet())
        j["is_bot"] = o.m_Is_bot;
    if(o.avatarUrlIsSet())
        j["avatar_url"] = o.m_Avatar_url;
    if(o.avatarVersionIsSet())
        j["avatar_version"] = o.m_Avatar_version;
    if(o.fullNameIsSet())
        j["full_name"] = o.m_Full_name;
    if(o.isAdminIsSet())
        j["is_admin"] = o.m_Is_admin;
    if(o.isOwnerIsSet())
        j["is_owner"] = o.m_Is_owner;
    if(o.isBillingAdminIsSet())
        j["is_billing_admin"] = o.m_Is_billing_admin;
    if(o.roleIsSet())
        j["role"] = o.m_Role;
    if(o.botTypeIsSet())
        j["bot_type"] = o.m_Bot_type;
    if(o.userIdIsSet())
        j["user_id"] = o.m_User_id;
    if(o.botOwnerIdIsSet())
        j["bot_owner_id"] = o.m_Bot_owner_id;
    if(o.isActiveIsSet())
        j["is_active"] = o.m_Is_active;
    if(o.isGuestIsSet())
        j["is_guest"] = o.m_Is_guest;
    if(o.timezoneIsSet())
        j["timezone"] = o.m_Timezone;
    if(o.dateJoinedIsSet())
        j["date_joined"] = o.m_Date_joined;
    if(o.deliveryEmailIsSet())
        j["delivery_email"] = o.m_Delivery_email;
    if(o.profileDataIsSet())
        j["profile_data"] = o.m_Profile_data;
    
}

void from_json(const nlohmann::json& j, User_allOf& o)
{
    if(j.find("email") != j.end())
    {
        j.at("email").get_to(o.m_Email);
        o.m_EmailIsSet = true;
    } 
    if(j.find("is_bot") != j.end())
    {
        j.at("is_bot").get_to(o.m_Is_bot);
        o.m_Is_botIsSet = true;
    } 
    if(j.find("avatar_url") != j.end())
    {
        j.at("avatar_url").get_to(o.m_Avatar_url);
        o.m_Avatar_urlIsSet = true;
    } 
    if(j.find("avatar_version") != j.end())
    {
        j.at("avatar_version").get_to(o.m_Avatar_version);
        o.m_Avatar_versionIsSet = true;
    } 
    if(j.find("full_name") != j.end())
    {
        j.at("full_name").get_to(o.m_Full_name);
        o.m_Full_nameIsSet = true;
    } 
    if(j.find("is_admin") != j.end())
    {
        j.at("is_admin").get_to(o.m_Is_admin);
        o.m_Is_adminIsSet = true;
    } 
    if(j.find("is_owner") != j.end())
    {
        j.at("is_owner").get_to(o.m_Is_owner);
        o.m_Is_ownerIsSet = true;
    } 
    if(j.find("is_billing_admin") != j.end())
    {
        j.at("is_billing_admin").get_to(o.m_Is_billing_admin);
        o.m_Is_billing_adminIsSet = true;
    } 
    if(j.find("role") != j.end())
    {
        j.at("role").get_to(o.m_Role);
        o.m_RoleIsSet = true;
    } 
    if(j.find("bot_type") != j.end())
    {
        j.at("bot_type").get_to(o.m_Bot_type);
        o.m_Bot_typeIsSet = true;
    } 
    if(j.find("user_id") != j.end())
    {
        j.at("user_id").get_to(o.m_User_id);
        o.m_User_idIsSet = true;
    } 
    if(j.find("bot_owner_id") != j.end())
    {
        j.at("bot_owner_id").get_to(o.m_Bot_owner_id);
        o.m_Bot_owner_idIsSet = true;
    } 
    if(j.find("is_active") != j.end())
    {
        j.at("is_active").get_to(o.m_Is_active);
        o.m_Is_activeIsSet = true;
    } 
    if(j.find("is_guest") != j.end())
    {
        j.at("is_guest").get_to(o.m_Is_guest);
        o.m_Is_guestIsSet = true;
    } 
    if(j.find("timezone") != j.end())
    {
        j.at("timezone").get_to(o.m_Timezone);
        o.m_TimezoneIsSet = true;
    } 
    if(j.find("date_joined") != j.end())
    {
        j.at("date_joined").get_to(o.m_Date_joined);
        o.m_Date_joinedIsSet = true;
    } 
    if(j.find("delivery_email") != j.end())
    {
        j.at("delivery_email").get_to(o.m_Delivery_email);
        o.m_Delivery_emailIsSet = true;
    } 
    if(j.find("profile_data") != j.end())
    {
        j.at("profile_data").get_to(o.m_Profile_data);
        o.m_Profile_dataIsSet = true;
    } 
    
}

AnyType User_allOf::getEmail() const
{
    return m_Email;
}
void User_allOf::setEmail(AnyType const& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool User_allOf::emailIsSet() const
{
    return m_EmailIsSet;
}
void User_allOf::unsetEmail()
{
    m_EmailIsSet = false;
}
AnyType User_allOf::getIsBot() const
{
    return m_Is_bot;
}
void User_allOf::setIsBot(AnyType const& value)
{
    m_Is_bot = value;
    m_Is_botIsSet = true;
}
bool User_allOf::isBotIsSet() const
{
    return m_Is_botIsSet;
}
void User_allOf::unsetIs_bot()
{
    m_Is_botIsSet = false;
}
AnyType User_allOf::getAvatarUrl() const
{
    return m_Avatar_url;
}
void User_allOf::setAvatarUrl(AnyType const& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}
bool User_allOf::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}
void User_allOf::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
AnyType User_allOf::getAvatarVersion() const
{
    return m_Avatar_version;
}
void User_allOf::setAvatarVersion(AnyType const& value)
{
    m_Avatar_version = value;
    m_Avatar_versionIsSet = true;
}
bool User_allOf::avatarVersionIsSet() const
{
    return m_Avatar_versionIsSet;
}
void User_allOf::unsetAvatar_version()
{
    m_Avatar_versionIsSet = false;
}
AnyType User_allOf::getFullName() const
{
    return m_Full_name;
}
void User_allOf::setFullName(AnyType const& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}
bool User_allOf::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}
void User_allOf::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
AnyType User_allOf::getIsAdmin() const
{
    return m_Is_admin;
}
void User_allOf::setIsAdmin(AnyType const& value)
{
    m_Is_admin = value;
    m_Is_adminIsSet = true;
}
bool User_allOf::isAdminIsSet() const
{
    return m_Is_adminIsSet;
}
void User_allOf::unsetIs_admin()
{
    m_Is_adminIsSet = false;
}
AnyType User_allOf::getIsOwner() const
{
    return m_Is_owner;
}
void User_allOf::setIsOwner(AnyType const& value)
{
    m_Is_owner = value;
    m_Is_ownerIsSet = true;
}
bool User_allOf::isOwnerIsSet() const
{
    return m_Is_ownerIsSet;
}
void User_allOf::unsetIs_owner()
{
    m_Is_ownerIsSet = false;
}
AnyType User_allOf::getIsBillingAdmin() const
{
    return m_Is_billing_admin;
}
void User_allOf::setIsBillingAdmin(AnyType const& value)
{
    m_Is_billing_admin = value;
    m_Is_billing_adminIsSet = true;
}
bool User_allOf::isBillingAdminIsSet() const
{
    return m_Is_billing_adminIsSet;
}
void User_allOf::unsetIs_billing_admin()
{
    m_Is_billing_adminIsSet = false;
}
AnyType User_allOf::getRole() const
{
    return m_Role;
}
void User_allOf::setRole(AnyType const& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool User_allOf::roleIsSet() const
{
    return m_RoleIsSet;
}
void User_allOf::unsetRole()
{
    m_RoleIsSet = false;
}
AnyType User_allOf::getBotType() const
{
    return m_Bot_type;
}
void User_allOf::setBotType(AnyType const& value)
{
    m_Bot_type = value;
    m_Bot_typeIsSet = true;
}
bool User_allOf::botTypeIsSet() const
{
    return m_Bot_typeIsSet;
}
void User_allOf::unsetBot_type()
{
    m_Bot_typeIsSet = false;
}
AnyType User_allOf::getUserId() const
{
    return m_User_id;
}
void User_allOf::setUserId(AnyType const& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool User_allOf::userIdIsSet() const
{
    return m_User_idIsSet;
}
void User_allOf::unsetUser_id()
{
    m_User_idIsSet = false;
}
AnyType User_allOf::getBotOwnerId() const
{
    return m_Bot_owner_id;
}
void User_allOf::setBotOwnerId(AnyType const& value)
{
    m_Bot_owner_id = value;
    m_Bot_owner_idIsSet = true;
}
bool User_allOf::botOwnerIdIsSet() const
{
    return m_Bot_owner_idIsSet;
}
void User_allOf::unsetBot_owner_id()
{
    m_Bot_owner_idIsSet = false;
}
AnyType User_allOf::getIsActive() const
{
    return m_Is_active;
}
void User_allOf::setIsActive(AnyType const& value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}
bool User_allOf::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}
void User_allOf::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
AnyType User_allOf::getIsGuest() const
{
    return m_Is_guest;
}
void User_allOf::setIsGuest(AnyType const& value)
{
    m_Is_guest = value;
    m_Is_guestIsSet = true;
}
bool User_allOf::isGuestIsSet() const
{
    return m_Is_guestIsSet;
}
void User_allOf::unsetIs_guest()
{
    m_Is_guestIsSet = false;
}
AnyType User_allOf::getTimezone() const
{
    return m_Timezone;
}
void User_allOf::setTimezone(AnyType const& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}
bool User_allOf::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}
void User_allOf::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
AnyType User_allOf::getDateJoined() const
{
    return m_Date_joined;
}
void User_allOf::setDateJoined(AnyType const& value)
{
    m_Date_joined = value;
    m_Date_joinedIsSet = true;
}
bool User_allOf::dateJoinedIsSet() const
{
    return m_Date_joinedIsSet;
}
void User_allOf::unsetDate_joined()
{
    m_Date_joinedIsSet = false;
}
AnyType User_allOf::getDeliveryEmail() const
{
    return m_Delivery_email;
}
void User_allOf::setDeliveryEmail(AnyType const& value)
{
    m_Delivery_email = value;
    m_Delivery_emailIsSet = true;
}
bool User_allOf::deliveryEmailIsSet() const
{
    return m_Delivery_emailIsSet;
}
void User_allOf::unsetDelivery_email()
{
    m_Delivery_emailIsSet = false;
}
AnyType User_allOf::getProfileData() const
{
    return m_Profile_data;
}
void User_allOf::setProfileData(AnyType const& value)
{
    m_Profile_data = value;
    m_Profile_dataIsSet = true;
}
bool User_allOf::profileDataIsSet() const
{
    return m_Profile_dataIsSet;
}
void User_allOf::unsetProfile_data()
{
    m_Profile_dataIsSet = false;
}


} // namespace org::openapitools::server::model

