/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EmojiReactionBase_user.h
 *
 * Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
 */

#ifndef EmojiReactionBase_user_H_
#define EmojiReactionBase_user_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
/// </summary>
class  EmojiReactionBase_user
{
public:
    EmojiReactionBase_user();
    virtual ~EmojiReactionBase_user() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EmojiReactionBase_user& rhs) const;
    bool operator!=(const EmojiReactionBase_user& rhs) const;

    /////////////////////////////////////////////
    /// EmojiReactionBase_user members

    /// <summary>
    /// ID of the user. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Email of the user. 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string const& value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// Full name of the user. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string const& value);
    bool fullNameIsSet() const;
    void unsetFull_name();
    /// <summary>
    /// Whether the user is a mirror dummy. 
    /// </summary>
    bool isIsMirrorDummy() const;
    void setIsMirrorDummy(bool const value);
    bool isMirrorDummyIsSet() const;
    void unsetIs_mirror_dummy();

    friend void to_json(nlohmann::json& j, const EmojiReactionBase_user& o);
    friend void from_json(const nlohmann::json& j, EmojiReactionBase_user& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    std::string m_Email;
    bool m_EmailIsSet;
    std::string m_Full_name;
    bool m_Full_nameIsSet;
    bool m_Is_mirror_dummy;
    bool m_Is_mirror_dummyIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EmojiReactionBase_user_H_ */
