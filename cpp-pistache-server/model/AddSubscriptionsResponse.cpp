/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "AddSubscriptionsResponse.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

AddSubscriptionsResponse::AddSubscriptionsResponse()
{
    m_SubscribedIsSet = false;
    m_Already_subscribedIsSet = false;
    m_UnauthorizedIsSet = false;
    
}

void AddSubscriptionsResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool AddSubscriptionsResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool AddSubscriptionsResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "AddSubscriptionsResponse" : pathPrefix;

                         
    if (unauthorizedIsSet())
    {
        const std::vector<std::string>& value = m_Unauthorized;
        const std::string currentValuePath = _pathPrefix + ".unauthorized";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool AddSubscriptionsResponse::operator==(const AddSubscriptionsResponse& rhs) const
{
    return
    
    
    (getResult() == rhs.getResult())
     &&
    
    (getMsg() == rhs.getMsg())
     &&
    
    
    ((!subscribedIsSet() && !rhs.subscribedIsSet()) || (subscribedIsSet() && rhs.subscribedIsSet() && getSubscribed() == rhs.getSubscribed())) &&
    
    
    ((!alreadySubscribedIsSet() && !rhs.alreadySubscribedIsSet()) || (alreadySubscribedIsSet() && rhs.alreadySubscribedIsSet() && getAlreadySubscribed() == rhs.getAlreadySubscribed())) &&
    
    
    ((!unauthorizedIsSet() && !rhs.unauthorizedIsSet()) || (unauthorizedIsSet() && rhs.unauthorizedIsSet() && getUnauthorized() == rhs.getUnauthorized()))
    
    ;
}

bool AddSubscriptionsResponse::operator!=(const AddSubscriptionsResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AddSubscriptionsResponse& o)
{
    j = nlohmann::json();
    j["result"] = o.m_Result;
    j["msg"] = o.m_Msg;
    if(o.subscribedIsSet() || !o.m_Subscribed.empty())
        j["subscribed"] = o.m_Subscribed;
    if(o.alreadySubscribedIsSet() || !o.m_Already_subscribed.empty())
        j["already_subscribed"] = o.m_Already_subscribed;
    if(o.unauthorizedIsSet() || !o.m_Unauthorized.empty())
        j["unauthorized"] = o.m_Unauthorized;
    
}

void from_json(const nlohmann::json& j, AddSubscriptionsResponse& o)
{
    j.at("result").get_to(o.m_Result);
    j.at("msg").get_to(o.m_Msg);
    if(j.find("subscribed") != j.end())
    {
        j.at("subscribed").get_to(o.m_Subscribed);
        o.m_SubscribedIsSet = true;
    } 
    if(j.find("already_subscribed") != j.end())
    {
        j.at("already_subscribed").get_to(o.m_Already_subscribed);
        o.m_Already_subscribedIsSet = true;
    } 
    if(j.find("unauthorized") != j.end())
    {
        j.at("unauthorized").get_to(o.m_Unauthorized);
        o.m_UnauthorizedIsSet = true;
    } 
    
}

AnyType AddSubscriptionsResponse::getResult() const
{
    return m_Result;
}
void AddSubscriptionsResponse::setResult(AnyType const& value)
{
    m_Result = value;
}
AnyType AddSubscriptionsResponse::getMsg() const
{
    return m_Msg;
}
void AddSubscriptionsResponse::setMsg(AnyType const& value)
{
    m_Msg = value;
}
std::map<std::string, std::vector<std::string>> AddSubscriptionsResponse::getSubscribed() const
{
    return m_Subscribed;
}
void AddSubscriptionsResponse::setSubscribed(std::map<std::string, std::vector<std::string>> const& value)
{
    m_Subscribed = value;
    m_SubscribedIsSet = true;
}
bool AddSubscriptionsResponse::subscribedIsSet() const
{
    return m_SubscribedIsSet;
}
void AddSubscriptionsResponse::unsetSubscribed()
{
    m_SubscribedIsSet = false;
}
std::map<std::string, std::vector<std::string>> AddSubscriptionsResponse::getAlreadySubscribed() const
{
    return m_Already_subscribed;
}
void AddSubscriptionsResponse::setAlreadySubscribed(std::map<std::string, std::vector<std::string>> const& value)
{
    m_Already_subscribed = value;
    m_Already_subscribedIsSet = true;
}
bool AddSubscriptionsResponse::alreadySubscribedIsSet() const
{
    return m_Already_subscribedIsSet;
}
void AddSubscriptionsResponse::unsetAlready_subscribed()
{
    m_Already_subscribedIsSet = false;
}
std::vector<std::string> AddSubscriptionsResponse::getUnauthorized() const
{
    return m_Unauthorized;
}
void AddSubscriptionsResponse::setUnauthorized(std::vector<std::string> const& value)
{
    m_Unauthorized = value;
    m_UnauthorizedIsSet = true;
}
bool AddSubscriptionsResponse::unauthorizedIsSet() const
{
    return m_UnauthorizedIsSet;
}
void AddSubscriptionsResponse::unsetUnauthorized()
{
    m_UnauthorizedIsSet = false;
}


} // namespace org::openapitools::server::model

