/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RealmExport.h
 *
 * Object containing details about a realm export. 
 */

#ifndef RealmExport_H_
#define RealmExport_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object containing details about a realm export. 
/// </summary>
class  RealmExport
{
public:
    RealmExport();
    virtual ~RealmExport() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RealmExport& rhs) const;
    bool operator!=(const RealmExport& rhs) const;

    /////////////////////////////////////////////
    /// RealmExport members

    /// <summary>
    /// The id of the export. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The id of the user who did the export. 
    /// </summary>
    int32_t getActingUserId() const;
    void setActingUserId(int32_t const value);
    bool actingUserIdIsSet() const;
    void unsetActing_user_id();
    /// <summary>
    /// The UNIX timestamp of when the export was made. 
    /// </summary>
    double getExportTime() const;
    void setExportTime(double const value);
    bool exportTimeIsSet() const;
    void unsetExport_time();
    /// <summary>
    /// The timestamp of when the export was deleted. Null if it wasn&#39;t. 
    /// </summary>
    double getDeletedTimestamp() const;
    void setDeletedTimestamp(double const value);
    bool deletedTimestampIsSet() const;
    void unsetDeleted_timestamp();
    /// <summary>
    /// The timestamp of when the export failed. Null if it didn&#39;t. 
    /// </summary>
    double getFailedTimestamp() const;
    void setFailedTimestamp(double const value);
    bool failedTimestampIsSet() const;
    void unsetFailed_timestamp();
    /// <summary>
    /// The URL of the export. &#x60;null&#x60; if there&#39;s no URL. 
    /// </summary>
    std::string getExportUrl() const;
    void setExportUrl(std::string const& value);
    bool exportUrlIsSet() const;
    void unsetExport_url();
    /// <summary>
    /// Whether the export is pending or not. 
    /// </summary>
    bool isPending() const;
    void setPending(bool const value);
    bool pendingIsSet() const;
    void unsetPending();

    friend void to_json(nlohmann::json& j, const RealmExport& o);
    friend void from_json(const nlohmann::json& j, RealmExport& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Acting_user_id;
    bool m_Acting_user_idIsSet;
    double m_Export_time;
    bool m_Export_timeIsSet;
    double m_Deleted_timestamp;
    bool m_Deleted_timestampIsSet;
    double m_Failed_timestamp;
    bool m_Failed_timestampIsSet;
    std::string m_Export_url;
    bool m_Export_urlIsSet;
    bool m_Pending;
    bool m_PendingIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* RealmExport_H_ */
