/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BasicStreamBase.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BasicStreamBase::BasicStreamBase()
{
    m_Stream_id = 0;
    m_Stream_idIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Invite_only = false;
    m_Invite_onlyIsSet = false;
    m_Rendered_description = "";
    m_Rendered_descriptionIsSet = false;
    m_Is_web_public = false;
    m_Is_web_publicIsSet = false;
    m_Stream_post_policy = 0;
    m_Stream_post_policyIsSet = false;
    m_Message_retention_days = 0;
    m_Message_retention_daysIsSet = false;
    m_History_public_to_subscribers = false;
    m_History_public_to_subscribersIsSet = false;
    m_First_message_id = 0;
    m_First_message_idIsSet = false;
    m_Is_announcement_only = false;
    m_Is_announcement_onlyIsSet = false;
    
}

void BasicStreamBase::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BasicStreamBase::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BasicStreamBase::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BasicStreamBase" : pathPrefix;

                                                    
    return success;
}

bool BasicStreamBase::operator==(const BasicStreamBase& rhs) const
{
    return
    
    
    
    ((!streamIdIsSet() && !rhs.streamIdIsSet()) || (streamIdIsSet() && rhs.streamIdIsSet() && getStreamId() == rhs.getStreamId())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!dateCreatedIsSet() && !rhs.dateCreatedIsSet()) || (dateCreatedIsSet() && rhs.dateCreatedIsSet() && getDateCreated() == rhs.getDateCreated())) &&
    
    
    ((!inviteOnlyIsSet() && !rhs.inviteOnlyIsSet()) || (inviteOnlyIsSet() && rhs.inviteOnlyIsSet() && isInviteOnly() == rhs.isInviteOnly())) &&
    
    
    ((!renderedDescriptionIsSet() && !rhs.renderedDescriptionIsSet()) || (renderedDescriptionIsSet() && rhs.renderedDescriptionIsSet() && getRenderedDescription() == rhs.getRenderedDescription())) &&
    
    
    ((!isWebPublicIsSet() && !rhs.isWebPublicIsSet()) || (isWebPublicIsSet() && rhs.isWebPublicIsSet() && isIsWebPublic() == rhs.isIsWebPublic())) &&
    
    
    ((!streamPostPolicyIsSet() && !rhs.streamPostPolicyIsSet()) || (streamPostPolicyIsSet() && rhs.streamPostPolicyIsSet() && getStreamPostPolicy() == rhs.getStreamPostPolicy())) &&
    
    
    ((!messageRetentionDaysIsSet() && !rhs.messageRetentionDaysIsSet()) || (messageRetentionDaysIsSet() && rhs.messageRetentionDaysIsSet() && getMessageRetentionDays() == rhs.getMessageRetentionDays())) &&
    
    
    ((!historyPublicToSubscribersIsSet() && !rhs.historyPublicToSubscribersIsSet()) || (historyPublicToSubscribersIsSet() && rhs.historyPublicToSubscribersIsSet() && isHistoryPublicToSubscribers() == rhs.isHistoryPublicToSubscribers())) &&
    
    
    ((!firstMessageIdIsSet() && !rhs.firstMessageIdIsSet()) || (firstMessageIdIsSet() && rhs.firstMessageIdIsSet() && getFirstMessageId() == rhs.getFirstMessageId())) &&
    
    
    ((!isAnnouncementOnlyIsSet() && !rhs.isAnnouncementOnlyIsSet()) || (isAnnouncementOnlyIsSet() && rhs.isAnnouncementOnlyIsSet() && isIsAnnouncementOnly() == rhs.isIsAnnouncementOnly()))
    
    ;
}

bool BasicStreamBase::operator!=(const BasicStreamBase& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BasicStreamBase& o)
{
    j = nlohmann::json();
    if(o.streamIdIsSet())
        j["stream_id"] = o.m_Stream_id;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.dateCreatedIsSet())
        j["date_created"] = o.m_Date_created;
    if(o.inviteOnlyIsSet())
        j["invite_only"] = o.m_Invite_only;
    if(o.renderedDescriptionIsSet())
        j["rendered_description"] = o.m_Rendered_description;
    if(o.isWebPublicIsSet())
        j["is_web_public"] = o.m_Is_web_public;
    if(o.streamPostPolicyIsSet())
        j["stream_post_policy"] = o.m_Stream_post_policy;
    if(o.messageRetentionDaysIsSet())
        j["message_retention_days"] = o.m_Message_retention_days;
    if(o.historyPublicToSubscribersIsSet())
        j["history_public_to_subscribers"] = o.m_History_public_to_subscribers;
    if(o.firstMessageIdIsSet())
        j["first_message_id"] = o.m_First_message_id;
    if(o.isAnnouncementOnlyIsSet())
        j["is_announcement_only"] = o.m_Is_announcement_only;
    
}

void from_json(const nlohmann::json& j, BasicStreamBase& o)
{
    if(j.find("stream_id") != j.end())
    {
        j.at("stream_id").get_to(o.m_Stream_id);
        o.m_Stream_idIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("date_created") != j.end())
    {
        j.at("date_created").get_to(o.m_Date_created);
        o.m_Date_createdIsSet = true;
    } 
    if(j.find("invite_only") != j.end())
    {
        j.at("invite_only").get_to(o.m_Invite_only);
        o.m_Invite_onlyIsSet = true;
    } 
    if(j.find("rendered_description") != j.end())
    {
        j.at("rendered_description").get_to(o.m_Rendered_description);
        o.m_Rendered_descriptionIsSet = true;
    } 
    if(j.find("is_web_public") != j.end())
    {
        j.at("is_web_public").get_to(o.m_Is_web_public);
        o.m_Is_web_publicIsSet = true;
    } 
    if(j.find("stream_post_policy") != j.end())
    {
        j.at("stream_post_policy").get_to(o.m_Stream_post_policy);
        o.m_Stream_post_policyIsSet = true;
    } 
    if(j.find("message_retention_days") != j.end())
    {
        j.at("message_retention_days").get_to(o.m_Message_retention_days);
        o.m_Message_retention_daysIsSet = true;
    } 
    if(j.find("history_public_to_subscribers") != j.end())
    {
        j.at("history_public_to_subscribers").get_to(o.m_History_public_to_subscribers);
        o.m_History_public_to_subscribersIsSet = true;
    } 
    if(j.find("first_message_id") != j.end())
    {
        j.at("first_message_id").get_to(o.m_First_message_id);
        o.m_First_message_idIsSet = true;
    } 
    if(j.find("is_announcement_only") != j.end())
    {
        j.at("is_announcement_only").get_to(o.m_Is_announcement_only);
        o.m_Is_announcement_onlyIsSet = true;
    } 
    
}

int32_t BasicStreamBase::getStreamId() const
{
    return m_Stream_id;
}
void BasicStreamBase::setStreamId(int32_t const value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}
bool BasicStreamBase::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}
void BasicStreamBase::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
std::string BasicStreamBase::getName() const
{
    return m_Name;
}
void BasicStreamBase::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BasicStreamBase::nameIsSet() const
{
    return m_NameIsSet;
}
void BasicStreamBase::unsetName()
{
    m_NameIsSet = false;
}
std::string BasicStreamBase::getDescription() const
{
    return m_Description;
}
void BasicStreamBase::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool BasicStreamBase::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void BasicStreamBase::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t BasicStreamBase::getDateCreated() const
{
    return m_Date_created;
}
void BasicStreamBase::setDateCreated(int32_t const value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}
bool BasicStreamBase::dateCreatedIsSet() const
{
    return m_Date_createdIsSet;
}
void BasicStreamBase::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
bool BasicStreamBase::isInviteOnly() const
{
    return m_Invite_only;
}
void BasicStreamBase::setInviteOnly(bool const value)
{
    m_Invite_only = value;
    m_Invite_onlyIsSet = true;
}
bool BasicStreamBase::inviteOnlyIsSet() const
{
    return m_Invite_onlyIsSet;
}
void BasicStreamBase::unsetInvite_only()
{
    m_Invite_onlyIsSet = false;
}
std::string BasicStreamBase::getRenderedDescription() const
{
    return m_Rendered_description;
}
void BasicStreamBase::setRenderedDescription(std::string const& value)
{
    m_Rendered_description = value;
    m_Rendered_descriptionIsSet = true;
}
bool BasicStreamBase::renderedDescriptionIsSet() const
{
    return m_Rendered_descriptionIsSet;
}
void BasicStreamBase::unsetRendered_description()
{
    m_Rendered_descriptionIsSet = false;
}
bool BasicStreamBase::isIsWebPublic() const
{
    return m_Is_web_public;
}
void BasicStreamBase::setIsWebPublic(bool const value)
{
    m_Is_web_public = value;
    m_Is_web_publicIsSet = true;
}
bool BasicStreamBase::isWebPublicIsSet() const
{
    return m_Is_web_publicIsSet;
}
void BasicStreamBase::unsetIs_web_public()
{
    m_Is_web_publicIsSet = false;
}
int32_t BasicStreamBase::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}
void BasicStreamBase::setStreamPostPolicy(int32_t const value)
{
    m_Stream_post_policy = value;
    m_Stream_post_policyIsSet = true;
}
bool BasicStreamBase::streamPostPolicyIsSet() const
{
    return m_Stream_post_policyIsSet;
}
void BasicStreamBase::unsetStream_post_policy()
{
    m_Stream_post_policyIsSet = false;
}
int32_t BasicStreamBase::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}
void BasicStreamBase::setMessageRetentionDays(int32_t const value)
{
    m_Message_retention_days = value;
    m_Message_retention_daysIsSet = true;
}
bool BasicStreamBase::messageRetentionDaysIsSet() const
{
    return m_Message_retention_daysIsSet;
}
void BasicStreamBase::unsetMessage_retention_days()
{
    m_Message_retention_daysIsSet = false;
}
bool BasicStreamBase::isHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}
void BasicStreamBase::setHistoryPublicToSubscribers(bool const value)
{
    m_History_public_to_subscribers = value;
    m_History_public_to_subscribersIsSet = true;
}
bool BasicStreamBase::historyPublicToSubscribersIsSet() const
{
    return m_History_public_to_subscribersIsSet;
}
void BasicStreamBase::unsetHistory_public_to_subscribers()
{
    m_History_public_to_subscribersIsSet = false;
}
int32_t BasicStreamBase::getFirstMessageId() const
{
    return m_First_message_id;
}
void BasicStreamBase::setFirstMessageId(int32_t const value)
{
    m_First_message_id = value;
    m_First_message_idIsSet = true;
}
bool BasicStreamBase::firstMessageIdIsSet() const
{
    return m_First_message_idIsSet;
}
void BasicStreamBase::unsetFirst_message_id()
{
    m_First_message_idIsSet = false;
}
bool BasicStreamBase::isIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}
void BasicStreamBase::setIsAnnouncementOnly(bool const value)
{
    m_Is_announcement_only = value;
    m_Is_announcement_onlyIsSet = true;
}
bool BasicStreamBase::isAnnouncementOnlyIsSet() const
{
    return m_Is_announcement_onlyIsSet;
}
void BasicStreamBase::unsetIs_announcement_only()
{
    m_Is_announcement_onlyIsSet = false;
}


} // namespace org::openapitools::server::model

