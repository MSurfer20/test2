/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EmojiReactionBase.h
 *
 * 
 */

#ifndef EmojiReactionBase_H_
#define EmojiReactionBase_H_


#include "EmojiReactionBase_allOf.h"
#include "EmojiBase.h"
#include "EmojiReactionBase_allOf_user.h"
#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  EmojiReactionBase
{
public:
    EmojiReactionBase();
    virtual ~EmojiReactionBase() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const EmojiReactionBase& rhs) const;
    bool operator!=(const EmojiReactionBase& rhs) const;

    /////////////////////////////////////////////
    /// EmojiReactionBase members

    /// <summary>
    /// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. 
    /// </summary>
    std::string getEmojiCode() const;
    void setEmojiCode(std::string const& value);
    bool emojiCodeIsSet() const;
    void unsetEmoji_code();
    /// <summary>
    /// Name of the emoji. 
    /// </summary>
    std::string getEmojiName() const;
    void setEmojiName(std::string const& value);
    bool emojiNameIsSet() const;
    void unsetEmoji_name();
    /// <summary>
    /// One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji. 
    /// </summary>
    std::string getReactionType() const;
    void setReactionType(std::string const& value);
    bool reactionTypeIsSet() const;
    void unsetReaction_type();
    /// <summary>
    /// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The &#x60;user&#x60; object is deprecated and will be removed in the future. 
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t const value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// 
    /// </summary>
    EmojiReactionBase_allOf_user getUser() const;
    void setUser(EmojiReactionBase_allOf_user const& value);
    bool userIsSet() const;
    void unsetUser();

    friend void to_json(nlohmann::json& j, const EmojiReactionBase& o);
    friend void from_json(const nlohmann::json& j, EmojiReactionBase& o);
protected:
    std::string m_Emoji_code;
    bool m_Emoji_codeIsSet;
    std::string m_Emoji_name;
    bool m_Emoji_nameIsSet;
    std::string m_Reaction_type;
    bool m_Reaction_typeIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
    EmojiReactionBase_allOf_user m_User;
    bool m_UserIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* EmojiReactionBase_H_ */
