/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GetMessages_allOf.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GetMessages_allOf::GetMessages_allOf()
{
    m_Avatar_urlIsSet = false;
    m_ClientIsSet = false;
    m_ContentIsSet = false;
    m_Content_typeIsSet = false;
    m_Display_recipientIsSet = false;
    m_IdIsSet = false;
    m_Is_me_messageIsSet = false;
    m_ReactionsIsSet = false;
    m_Recipient_idIsSet = false;
    m_Sender_emailIsSet = false;
    m_Sender_full_nameIsSet = false;
    m_Sender_idIsSet = false;
    m_Sender_realm_strIsSet = false;
    m_Stream_idIsSet = false;
    m_SubjectIsSet = false;
    m_Topic_linksIsSet = false;
    m_SubmessagesIsSet = false;
    m_TimestampIsSet = false;
    m_TypeIsSet = false;
    m_FlagsIsSet = false;
    m_Last_edit_timestamp = 0;
    m_Last_edit_timestampIsSet = false;
    m_Match_content = "";
    m_Match_contentIsSet = false;
    m_Match_subject = "";
    m_Match_subjectIsSet = false;
    
}

void GetMessages_allOf::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GetMessages_allOf::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GetMessages_allOf::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GetMessages_allOf" : pathPrefix;

                                                                                     
    if (flagsIsSet())
    {
        const std::vector<std::string>& value = m_Flags;
        const std::string currentValuePath = _pathPrefix + ".flags";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
                
    return success;
}

bool GetMessages_allOf::operator==(const GetMessages_allOf& rhs) const
{
    return
    
    
    
    ((!avatarUrlIsSet() && !rhs.avatarUrlIsSet()) || (avatarUrlIsSet() && rhs.avatarUrlIsSet() && getAvatarUrl() == rhs.getAvatarUrl())) &&
    
    
    ((!clientIsSet() && !rhs.clientIsSet()) || (clientIsSet() && rhs.clientIsSet() && getClient() == rhs.getClient())) &&
    
    
    ((!contentIsSet() && !rhs.contentIsSet()) || (contentIsSet() && rhs.contentIsSet() && getContent() == rhs.getContent())) &&
    
    
    ((!contentTypeIsSet() && !rhs.contentTypeIsSet()) || (contentTypeIsSet() && rhs.contentTypeIsSet() && getContentType() == rhs.getContentType())) &&
    
    
    ((!displayRecipientIsSet() && !rhs.displayRecipientIsSet()) || (displayRecipientIsSet() && rhs.displayRecipientIsSet() && getDisplayRecipient() == rhs.getDisplayRecipient())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!isMeMessageIsSet() && !rhs.isMeMessageIsSet()) || (isMeMessageIsSet() && rhs.isMeMessageIsSet() && getIsMeMessage() == rhs.getIsMeMessage())) &&
    
    
    ((!reactionsIsSet() && !rhs.reactionsIsSet()) || (reactionsIsSet() && rhs.reactionsIsSet() && getReactions() == rhs.getReactions())) &&
    
    
    ((!recipientIdIsSet() && !rhs.recipientIdIsSet()) || (recipientIdIsSet() && rhs.recipientIdIsSet() && getRecipientId() == rhs.getRecipientId())) &&
    
    
    ((!senderEmailIsSet() && !rhs.senderEmailIsSet()) || (senderEmailIsSet() && rhs.senderEmailIsSet() && getSenderEmail() == rhs.getSenderEmail())) &&
    
    
    ((!senderFullNameIsSet() && !rhs.senderFullNameIsSet()) || (senderFullNameIsSet() && rhs.senderFullNameIsSet() && getSenderFullName() == rhs.getSenderFullName())) &&
    
    
    ((!senderIdIsSet() && !rhs.senderIdIsSet()) || (senderIdIsSet() && rhs.senderIdIsSet() && getSenderId() == rhs.getSenderId())) &&
    
    
    ((!senderRealmStrIsSet() && !rhs.senderRealmStrIsSet()) || (senderRealmStrIsSet() && rhs.senderRealmStrIsSet() && getSenderRealmStr() == rhs.getSenderRealmStr())) &&
    
    
    ((!streamIdIsSet() && !rhs.streamIdIsSet()) || (streamIdIsSet() && rhs.streamIdIsSet() && getStreamId() == rhs.getStreamId())) &&
    
    
    ((!subjectIsSet() && !rhs.subjectIsSet()) || (subjectIsSet() && rhs.subjectIsSet() && getSubject() == rhs.getSubject())) &&
    
    
    ((!topicLinksIsSet() && !rhs.topicLinksIsSet()) || (topicLinksIsSet() && rhs.topicLinksIsSet() && getTopicLinks() == rhs.getTopicLinks())) &&
    
    
    ((!submessagesIsSet() && !rhs.submessagesIsSet()) || (submessagesIsSet() && rhs.submessagesIsSet() && getSubmessages() == rhs.getSubmessages())) &&
    
    
    ((!timestampIsSet() && !rhs.timestampIsSet()) || (timestampIsSet() && rhs.timestampIsSet() && getTimestamp() == rhs.getTimestamp())) &&
    
    
    ((!typeIsSet() && !rhs.typeIsSet()) || (typeIsSet() && rhs.typeIsSet() && getType() == rhs.getType())) &&
    
    
    ((!flagsIsSet() && !rhs.flagsIsSet()) || (flagsIsSet() && rhs.flagsIsSet() && getFlags() == rhs.getFlags())) &&
    
    
    ((!lastEditTimestampIsSet() && !rhs.lastEditTimestampIsSet()) || (lastEditTimestampIsSet() && rhs.lastEditTimestampIsSet() && getLastEditTimestamp() == rhs.getLastEditTimestamp())) &&
    
    
    ((!matchContentIsSet() && !rhs.matchContentIsSet()) || (matchContentIsSet() && rhs.matchContentIsSet() && getMatchContent() == rhs.getMatchContent())) &&
    
    
    ((!matchSubjectIsSet() && !rhs.matchSubjectIsSet()) || (matchSubjectIsSet() && rhs.matchSubjectIsSet() && getMatchSubject() == rhs.getMatchSubject()))
    
    ;
}

bool GetMessages_allOf::operator!=(const GetMessages_allOf& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GetMessages_allOf& o)
{
    j = nlohmann::json();
    if(o.avatarUrlIsSet())
        j["avatar_url"] = o.m_Avatar_url;
    if(o.clientIsSet())
        j["client"] = o.m_Client;
    if(o.contentIsSet())
        j["content"] = o.m_Content;
    if(o.contentTypeIsSet())
        j["content_type"] = o.m_Content_type;
    if(o.displayRecipientIsSet())
        j["display_recipient"] = o.m_Display_recipient;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.isMeMessageIsSet())
        j["is_me_message"] = o.m_Is_me_message;
    if(o.reactionsIsSet())
        j["reactions"] = o.m_Reactions;
    if(o.recipientIdIsSet())
        j["recipient_id"] = o.m_Recipient_id;
    if(o.senderEmailIsSet())
        j["sender_email"] = o.m_Sender_email;
    if(o.senderFullNameIsSet())
        j["sender_full_name"] = o.m_Sender_full_name;
    if(o.senderIdIsSet())
        j["sender_id"] = o.m_Sender_id;
    if(o.senderRealmStrIsSet())
        j["sender_realm_str"] = o.m_Sender_realm_str;
    if(o.streamIdIsSet())
        j["stream_id"] = o.m_Stream_id;
    if(o.subjectIsSet())
        j["subject"] = o.m_Subject;
    if(o.topicLinksIsSet())
        j["topic_links"] = o.m_Topic_links;
    if(o.submessagesIsSet())
        j["submessages"] = o.m_Submessages;
    if(o.timestampIsSet())
        j["timestamp"] = o.m_Timestamp;
    if(o.typeIsSet())
        j["type"] = o.m_Type;
    if(o.flagsIsSet() || !o.m_Flags.empty())
        j["flags"] = o.m_Flags;
    if(o.lastEditTimestampIsSet())
        j["last_edit_timestamp"] = o.m_Last_edit_timestamp;
    if(o.matchContentIsSet())
        j["match_content"] = o.m_Match_content;
    if(o.matchSubjectIsSet())
        j["match_subject"] = o.m_Match_subject;
    
}

void from_json(const nlohmann::json& j, GetMessages_allOf& o)
{
    if(j.find("avatar_url") != j.end())
    {
        j.at("avatar_url").get_to(o.m_Avatar_url);
        o.m_Avatar_urlIsSet = true;
    } 
    if(j.find("client") != j.end())
    {
        j.at("client").get_to(o.m_Client);
        o.m_ClientIsSet = true;
    } 
    if(j.find("content") != j.end())
    {
        j.at("content").get_to(o.m_Content);
        o.m_ContentIsSet = true;
    } 
    if(j.find("content_type") != j.end())
    {
        j.at("content_type").get_to(o.m_Content_type);
        o.m_Content_typeIsSet = true;
    } 
    if(j.find("display_recipient") != j.end())
    {
        j.at("display_recipient").get_to(o.m_Display_recipient);
        o.m_Display_recipientIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("is_me_message") != j.end())
    {
        j.at("is_me_message").get_to(o.m_Is_me_message);
        o.m_Is_me_messageIsSet = true;
    } 
    if(j.find("reactions") != j.end())
    {
        j.at("reactions").get_to(o.m_Reactions);
        o.m_ReactionsIsSet = true;
    } 
    if(j.find("recipient_id") != j.end())
    {
        j.at("recipient_id").get_to(o.m_Recipient_id);
        o.m_Recipient_idIsSet = true;
    } 
    if(j.find("sender_email") != j.end())
    {
        j.at("sender_email").get_to(o.m_Sender_email);
        o.m_Sender_emailIsSet = true;
    } 
    if(j.find("sender_full_name") != j.end())
    {
        j.at("sender_full_name").get_to(o.m_Sender_full_name);
        o.m_Sender_full_nameIsSet = true;
    } 
    if(j.find("sender_id") != j.end())
    {
        j.at("sender_id").get_to(o.m_Sender_id);
        o.m_Sender_idIsSet = true;
    } 
    if(j.find("sender_realm_str") != j.end())
    {
        j.at("sender_realm_str").get_to(o.m_Sender_realm_str);
        o.m_Sender_realm_strIsSet = true;
    } 
    if(j.find("stream_id") != j.end())
    {
        j.at("stream_id").get_to(o.m_Stream_id);
        o.m_Stream_idIsSet = true;
    } 
    if(j.find("subject") != j.end())
    {
        j.at("subject").get_to(o.m_Subject);
        o.m_SubjectIsSet = true;
    } 
    if(j.find("topic_links") != j.end())
    {
        j.at("topic_links").get_to(o.m_Topic_links);
        o.m_Topic_linksIsSet = true;
    } 
    if(j.find("submessages") != j.end())
    {
        j.at("submessages").get_to(o.m_Submessages);
        o.m_SubmessagesIsSet = true;
    } 
    if(j.find("timestamp") != j.end())
    {
        j.at("timestamp").get_to(o.m_Timestamp);
        o.m_TimestampIsSet = true;
    } 
    if(j.find("type") != j.end())
    {
        j.at("type").get_to(o.m_Type);
        o.m_TypeIsSet = true;
    } 
    if(j.find("flags") != j.end())
    {
        j.at("flags").get_to(o.m_Flags);
        o.m_FlagsIsSet = true;
    } 
    if(j.find("last_edit_timestamp") != j.end())
    {
        j.at("last_edit_timestamp").get_to(o.m_Last_edit_timestamp);
        o.m_Last_edit_timestampIsSet = true;
    } 
    if(j.find("match_content") != j.end())
    {
        j.at("match_content").get_to(o.m_Match_content);
        o.m_Match_contentIsSet = true;
    } 
    if(j.find("match_subject") != j.end())
    {
        j.at("match_subject").get_to(o.m_Match_subject);
        o.m_Match_subjectIsSet = true;
    } 
    
}

AnyType GetMessages_allOf::getAvatarUrl() const
{
    return m_Avatar_url;
}
void GetMessages_allOf::setAvatarUrl(AnyType const& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}
bool GetMessages_allOf::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}
void GetMessages_allOf::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
AnyType GetMessages_allOf::getClient() const
{
    return m_Client;
}
void GetMessages_allOf::setClient(AnyType const& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}
bool GetMessages_allOf::clientIsSet() const
{
    return m_ClientIsSet;
}
void GetMessages_allOf::unsetClient()
{
    m_ClientIsSet = false;
}
AnyType GetMessages_allOf::getContent() const
{
    return m_Content;
}
void GetMessages_allOf::setContent(AnyType const& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}
bool GetMessages_allOf::contentIsSet() const
{
    return m_ContentIsSet;
}
void GetMessages_allOf::unsetContent()
{
    m_ContentIsSet = false;
}
AnyType GetMessages_allOf::getContentType() const
{
    return m_Content_type;
}
void GetMessages_allOf::setContentType(AnyType const& value)
{
    m_Content_type = value;
    m_Content_typeIsSet = true;
}
bool GetMessages_allOf::contentTypeIsSet() const
{
    return m_Content_typeIsSet;
}
void GetMessages_allOf::unsetContent_type()
{
    m_Content_typeIsSet = false;
}
AnyType GetMessages_allOf::getDisplayRecipient() const
{
    return m_Display_recipient;
}
void GetMessages_allOf::setDisplayRecipient(AnyType const& value)
{
    m_Display_recipient = value;
    m_Display_recipientIsSet = true;
}
bool GetMessages_allOf::displayRecipientIsSet() const
{
    return m_Display_recipientIsSet;
}
void GetMessages_allOf::unsetDisplay_recipient()
{
    m_Display_recipientIsSet = false;
}
AnyType GetMessages_allOf::getId() const
{
    return m_Id;
}
void GetMessages_allOf::setId(AnyType const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool GetMessages_allOf::idIsSet() const
{
    return m_IdIsSet;
}
void GetMessages_allOf::unsetId()
{
    m_IdIsSet = false;
}
AnyType GetMessages_allOf::getIsMeMessage() const
{
    return m_Is_me_message;
}
void GetMessages_allOf::setIsMeMessage(AnyType const& value)
{
    m_Is_me_message = value;
    m_Is_me_messageIsSet = true;
}
bool GetMessages_allOf::isMeMessageIsSet() const
{
    return m_Is_me_messageIsSet;
}
void GetMessages_allOf::unsetIs_me_message()
{
    m_Is_me_messageIsSet = false;
}
AnyType GetMessages_allOf::getReactions() const
{
    return m_Reactions;
}
void GetMessages_allOf::setReactions(AnyType const& value)
{
    m_Reactions = value;
    m_ReactionsIsSet = true;
}
bool GetMessages_allOf::reactionsIsSet() const
{
    return m_ReactionsIsSet;
}
void GetMessages_allOf::unsetReactions()
{
    m_ReactionsIsSet = false;
}
AnyType GetMessages_allOf::getRecipientId() const
{
    return m_Recipient_id;
}
void GetMessages_allOf::setRecipientId(AnyType const& value)
{
    m_Recipient_id = value;
    m_Recipient_idIsSet = true;
}
bool GetMessages_allOf::recipientIdIsSet() const
{
    return m_Recipient_idIsSet;
}
void GetMessages_allOf::unsetRecipient_id()
{
    m_Recipient_idIsSet = false;
}
AnyType GetMessages_allOf::getSenderEmail() const
{
    return m_Sender_email;
}
void GetMessages_allOf::setSenderEmail(AnyType const& value)
{
    m_Sender_email = value;
    m_Sender_emailIsSet = true;
}
bool GetMessages_allOf::senderEmailIsSet() const
{
    return m_Sender_emailIsSet;
}
void GetMessages_allOf::unsetSender_email()
{
    m_Sender_emailIsSet = false;
}
AnyType GetMessages_allOf::getSenderFullName() const
{
    return m_Sender_full_name;
}
void GetMessages_allOf::setSenderFullName(AnyType const& value)
{
    m_Sender_full_name = value;
    m_Sender_full_nameIsSet = true;
}
bool GetMessages_allOf::senderFullNameIsSet() const
{
    return m_Sender_full_nameIsSet;
}
void GetMessages_allOf::unsetSender_full_name()
{
    m_Sender_full_nameIsSet = false;
}
AnyType GetMessages_allOf::getSenderId() const
{
    return m_Sender_id;
}
void GetMessages_allOf::setSenderId(AnyType const& value)
{
    m_Sender_id = value;
    m_Sender_idIsSet = true;
}
bool GetMessages_allOf::senderIdIsSet() const
{
    return m_Sender_idIsSet;
}
void GetMessages_allOf::unsetSender_id()
{
    m_Sender_idIsSet = false;
}
AnyType GetMessages_allOf::getSenderRealmStr() const
{
    return m_Sender_realm_str;
}
void GetMessages_allOf::setSenderRealmStr(AnyType const& value)
{
    m_Sender_realm_str = value;
    m_Sender_realm_strIsSet = true;
}
bool GetMessages_allOf::senderRealmStrIsSet() const
{
    return m_Sender_realm_strIsSet;
}
void GetMessages_allOf::unsetSender_realm_str()
{
    m_Sender_realm_strIsSet = false;
}
AnyType GetMessages_allOf::getStreamId() const
{
    return m_Stream_id;
}
void GetMessages_allOf::setStreamId(AnyType const& value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}
bool GetMessages_allOf::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}
void GetMessages_allOf::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
AnyType GetMessages_allOf::getSubject() const
{
    return m_Subject;
}
void GetMessages_allOf::setSubject(AnyType const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool GetMessages_allOf::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void GetMessages_allOf::unsetSubject()
{
    m_SubjectIsSet = false;
}
AnyType GetMessages_allOf::getTopicLinks() const
{
    return m_Topic_links;
}
void GetMessages_allOf::setTopicLinks(AnyType const& value)
{
    m_Topic_links = value;
    m_Topic_linksIsSet = true;
}
bool GetMessages_allOf::topicLinksIsSet() const
{
    return m_Topic_linksIsSet;
}
void GetMessages_allOf::unsetTopic_links()
{
    m_Topic_linksIsSet = false;
}
AnyType GetMessages_allOf::getSubmessages() const
{
    return m_Submessages;
}
void GetMessages_allOf::setSubmessages(AnyType const& value)
{
    m_Submessages = value;
    m_SubmessagesIsSet = true;
}
bool GetMessages_allOf::submessagesIsSet() const
{
    return m_SubmessagesIsSet;
}
void GetMessages_allOf::unsetSubmessages()
{
    m_SubmessagesIsSet = false;
}
AnyType GetMessages_allOf::getTimestamp() const
{
    return m_Timestamp;
}
void GetMessages_allOf::setTimestamp(AnyType const& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool GetMessages_allOf::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void GetMessages_allOf::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
AnyType GetMessages_allOf::getType() const
{
    return m_Type;
}
void GetMessages_allOf::setType(AnyType const& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool GetMessages_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}
void GetMessages_allOf::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<std::string> GetMessages_allOf::getFlags() const
{
    return m_Flags;
}
void GetMessages_allOf::setFlags(std::vector<std::string> const& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}
bool GetMessages_allOf::flagsIsSet() const
{
    return m_FlagsIsSet;
}
void GetMessages_allOf::unsetFlags()
{
    m_FlagsIsSet = false;
}
int32_t GetMessages_allOf::getLastEditTimestamp() const
{
    return m_Last_edit_timestamp;
}
void GetMessages_allOf::setLastEditTimestamp(int32_t const value)
{
    m_Last_edit_timestamp = value;
    m_Last_edit_timestampIsSet = true;
}
bool GetMessages_allOf::lastEditTimestampIsSet() const
{
    return m_Last_edit_timestampIsSet;
}
void GetMessages_allOf::unsetLast_edit_timestamp()
{
    m_Last_edit_timestampIsSet = false;
}
std::string GetMessages_allOf::getMatchContent() const
{
    return m_Match_content;
}
void GetMessages_allOf::setMatchContent(std::string const& value)
{
    m_Match_content = value;
    m_Match_contentIsSet = true;
}
bool GetMessages_allOf::matchContentIsSet() const
{
    return m_Match_contentIsSet;
}
void GetMessages_allOf::unsetMatch_content()
{
    m_Match_contentIsSet = false;
}
std::string GetMessages_allOf::getMatchSubject() const
{
    return m_Match_subject;
}
void GetMessages_allOf::setMatchSubject(std::string const& value)
{
    m_Match_subject = value;
    m_Match_subjectIsSet = true;
}
bool GetMessages_allOf::matchSubjectIsSet() const
{
    return m_Match_subjectIsSet;
}
void GetMessages_allOf::unsetMatch_subject()
{
    m_Match_subjectIsSet = false;
}


} // namespace org::openapitools::server::model

