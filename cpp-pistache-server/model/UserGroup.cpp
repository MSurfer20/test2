/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "UserGroup.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

UserGroup::UserGroup()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_MembersIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    
}

void UserGroup::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool UserGroup::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool UserGroup::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "UserGroup" : pathPrefix;

                 
    if (membersIsSet())
    {
        const std::vector<int32_t>& value = m_Members;
        const std::string currentValuePath = _pathPrefix + ".members";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const int32_t& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool UserGroup::operator==(const UserGroup& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!membersIsSet() && !rhs.membersIsSet()) || (membersIsSet() && rhs.membersIsSet() && getMembers() == rhs.getMembers())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId()))
    
    ;
}

bool UserGroup::operator!=(const UserGroup& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const UserGroup& o)
{
    j = nlohmann::json();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.membersIsSet() || !o.m_Members.empty())
        j["members"] = o.m_Members;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    
}

void from_json(const nlohmann::json& j, UserGroup& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("members") != j.end())
    {
        j.at("members").get_to(o.m_Members);
        o.m_MembersIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    
}

std::string UserGroup::getName() const
{
    return m_Name;
}
void UserGroup::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool UserGroup::nameIsSet() const
{
    return m_NameIsSet;
}
void UserGroup::unsetName()
{
    m_NameIsSet = false;
}
std::string UserGroup::getDescription() const
{
    return m_Description;
}
void UserGroup::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UserGroup::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void UserGroup::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<int32_t> UserGroup::getMembers() const
{
    return m_Members;
}
void UserGroup::setMembers(std::vector<int32_t> const value)
{
    m_Members = value;
    m_MembersIsSet = true;
}
bool UserGroup::membersIsSet() const
{
    return m_MembersIsSet;
}
void UserGroup::unsetMembers()
{
    m_MembersIsSet = false;
}
int32_t UserGroup::getId() const
{
    return m_Id;
}
void UserGroup::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserGroup::idIsSet() const
{
    return m_IdIsSet;
}
void UserGroup::unsetId()
{
    m_IdIsSet = false;
}


} // namespace org::openapitools::server::model

