/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Hotspot.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Hotspot::Hotspot()
{
    m_Delay = 0.0;
    m_DelayIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Title = "";
    m_TitleIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    
}

void Hotspot::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Hotspot::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Hotspot::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Hotspot" : pathPrefix;

                    
    return success;
}

bool Hotspot::operator==(const Hotspot& rhs) const
{
    return
    
    
    
    ((!delayIsSet() && !rhs.delayIsSet()) || (delayIsSet() && rhs.delayIsSet() && getDelay() == rhs.getDelay())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!titleIsSet() && !rhs.titleIsSet()) || (titleIsSet() && rhs.titleIsSet() && getTitle() == rhs.getTitle())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription()))
    
    ;
}

bool Hotspot::operator!=(const Hotspot& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Hotspot& o)
{
    j = nlohmann::json();
    if(o.delayIsSet())
        j["delay"] = o.m_Delay;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.titleIsSet())
        j["title"] = o.m_Title;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    
}

void from_json(const nlohmann::json& j, Hotspot& o)
{
    if(j.find("delay") != j.end())
    {
        j.at("delay").get_to(o.m_Delay);
        o.m_DelayIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("title") != j.end())
    {
        j.at("title").get_to(o.m_Title);
        o.m_TitleIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    
}

double Hotspot::getDelay() const
{
    return m_Delay;
}
void Hotspot::setDelay(double const value)
{
    m_Delay = value;
    m_DelayIsSet = true;
}
bool Hotspot::delayIsSet() const
{
    return m_DelayIsSet;
}
void Hotspot::unsetDelay()
{
    m_DelayIsSet = false;
}
std::string Hotspot::getName() const
{
    return m_Name;
}
void Hotspot::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Hotspot::nameIsSet() const
{
    return m_NameIsSet;
}
void Hotspot::unsetName()
{
    m_NameIsSet = false;
}
std::string Hotspot::getTitle() const
{
    return m_Title;
}
void Hotspot::setTitle(std::string const& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Hotspot::titleIsSet() const
{
    return m_TitleIsSet;
}
void Hotspot::unsetTitle()
{
    m_TitleIsSet = false;
}
std::string Hotspot::getDescription() const
{
    return m_Description;
}
void Hotspot::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Hotspot::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Hotspot::unsetDescription()
{
    m_DescriptionIsSet = false;
}


} // namespace org::openapitools::server::model

