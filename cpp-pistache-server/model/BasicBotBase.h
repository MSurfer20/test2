/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * BasicBotBase.h
 *
 * 
 */

#ifndef BasicBotBase_H_
#define BasicBotBase_H_


#include "OneOfobjectobject.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  BasicBotBase
{
public:
    BasicBotBase();
    virtual ~BasicBotBase() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const BasicBotBase& rhs) const;
    bool operator!=(const BasicBotBase& rhs) const;

    /////////////////////////////////////////////
    /// BasicBotBase members

    /// <summary>
    /// The user id of the bot. 
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t const value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// The full name of the bot. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string const& value);
    bool fullNameIsSet() const;
    void unsetFull_name();
    /// <summary>
    /// The API key of the bot which it uses to make API requests. 
    /// </summary>
    std::string getApiKey() const;
    void setApiKey(std::string const& value);
    bool apiKeyIsSet() const;
    void unsetApi_key();
    /// <summary>
    /// The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. 
    /// </summary>
    std::string getDefaultSendingStream() const;
    void setDefaultSendingStream(std::string const& value);
    bool defaultSendingStreamIsSet() const;
    void unsetDefault_sending_stream();
    /// <summary>
    /// The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. 
    /// </summary>
    std::string getDefaultEventsRegisterStream() const;
    void setDefaultEventsRegisterStream(std::string const& value);
    bool defaultEventsRegisterStreamIsSet() const;
    void unsetDefault_events_register_stream();
    /// <summary>
    /// Whether the bot can send messages to all streams by default. 
    /// </summary>
    bool isDefaultAllPublicStreams() const;
    void setDefaultAllPublicStreams(bool const value);
    bool defaultAllPublicStreamsIsSet() const;
    void unsetDefault_all_public_streams();
    /// <summary>
    /// The URL of the bot&#39;s avatar. 
    /// </summary>
    std::string getAvatarUrl() const;
    void setAvatarUrl(std::string const& value);
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();
    /// <summary>
    /// The user id of the bot&#39;s owner.  Null if the bot has no owner. 
    /// </summary>
    int32_t getOwnerId() const;
    void setOwnerId(int32_t const value);
    bool ownerIdIsSet() const;
    void unsetOwner_id();
    /// <summary>
    /// The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
    /// </summary>
    std::vector<OneOfobjectobject> getServices() const;
    void setServices(std::vector<OneOfobjectobject> const& value);
    bool servicesIsSet() const;
    void unsetServices();

    friend void to_json(nlohmann::json& j, const BasicBotBase& o);
    friend void from_json(const nlohmann::json& j, BasicBotBase& o);
protected:
    int32_t m_User_id;
    bool m_User_idIsSet;
    std::string m_Full_name;
    bool m_Full_nameIsSet;
    std::string m_Api_key;
    bool m_Api_keyIsSet;
    std::string m_Default_sending_stream;
    bool m_Default_sending_streamIsSet;
    std::string m_Default_events_register_stream;
    bool m_Default_events_register_streamIsSet;
    bool m_Default_all_public_streams;
    bool m_Default_all_public_streamsIsSet;
    std::string m_Avatar_url;
    bool m_Avatar_urlIsSet;
    int32_t m_Owner_id;
    bool m_Owner_idIsSet;
    std::vector<OneOfobjectobject> m_Services;
    bool m_ServicesIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* BasicBotBase_H_ */
