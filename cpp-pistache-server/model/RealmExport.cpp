/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RealmExport.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RealmExport::RealmExport()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Acting_user_id = 0;
    m_Acting_user_idIsSet = false;
    m_Export_time = 0.0;
    m_Export_timeIsSet = false;
    m_Deleted_timestamp = 0.0;
    m_Deleted_timestampIsSet = false;
    m_Failed_timestamp = 0.0;
    m_Failed_timestampIsSet = false;
    m_Export_url = "";
    m_Export_urlIsSet = false;
    m_Pending = false;
    m_PendingIsSet = false;
    
}

void RealmExport::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RealmExport::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RealmExport::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RealmExport" : pathPrefix;

                                
    return success;
}

bool RealmExport::operator==(const RealmExport& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!actingUserIdIsSet() && !rhs.actingUserIdIsSet()) || (actingUserIdIsSet() && rhs.actingUserIdIsSet() && getActingUserId() == rhs.getActingUserId())) &&
    
    
    ((!exportTimeIsSet() && !rhs.exportTimeIsSet()) || (exportTimeIsSet() && rhs.exportTimeIsSet() && getExportTime() == rhs.getExportTime())) &&
    
    
    ((!deletedTimestampIsSet() && !rhs.deletedTimestampIsSet()) || (deletedTimestampIsSet() && rhs.deletedTimestampIsSet() && getDeletedTimestamp() == rhs.getDeletedTimestamp())) &&
    
    
    ((!failedTimestampIsSet() && !rhs.failedTimestampIsSet()) || (failedTimestampIsSet() && rhs.failedTimestampIsSet() && getFailedTimestamp() == rhs.getFailedTimestamp())) &&
    
    
    ((!exportUrlIsSet() && !rhs.exportUrlIsSet()) || (exportUrlIsSet() && rhs.exportUrlIsSet() && getExportUrl() == rhs.getExportUrl())) &&
    
    
    ((!pendingIsSet() && !rhs.pendingIsSet()) || (pendingIsSet() && rhs.pendingIsSet() && isPending() == rhs.isPending()))
    
    ;
}

bool RealmExport::operator!=(const RealmExport& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RealmExport& o)
{
    j = nlohmann::json();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.actingUserIdIsSet())
        j["acting_user_id"] = o.m_Acting_user_id;
    if(o.exportTimeIsSet())
        j["export_time"] = o.m_Export_time;
    if(o.deletedTimestampIsSet())
        j["deleted_timestamp"] = o.m_Deleted_timestamp;
    if(o.failedTimestampIsSet())
        j["failed_timestamp"] = o.m_Failed_timestamp;
    if(o.exportUrlIsSet())
        j["export_url"] = o.m_Export_url;
    if(o.pendingIsSet())
        j["pending"] = o.m_Pending;
    
}

void from_json(const nlohmann::json& j, RealmExport& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("acting_user_id") != j.end())
    {
        j.at("acting_user_id").get_to(o.m_Acting_user_id);
        o.m_Acting_user_idIsSet = true;
    } 
    if(j.find("export_time") != j.end())
    {
        j.at("export_time").get_to(o.m_Export_time);
        o.m_Export_timeIsSet = true;
    } 
    if(j.find("deleted_timestamp") != j.end())
    {
        j.at("deleted_timestamp").get_to(o.m_Deleted_timestamp);
        o.m_Deleted_timestampIsSet = true;
    } 
    if(j.find("failed_timestamp") != j.end())
    {
        j.at("failed_timestamp").get_to(o.m_Failed_timestamp);
        o.m_Failed_timestampIsSet = true;
    } 
    if(j.find("export_url") != j.end())
    {
        j.at("export_url").get_to(o.m_Export_url);
        o.m_Export_urlIsSet = true;
    } 
    if(j.find("pending") != j.end())
    {
        j.at("pending").get_to(o.m_Pending);
        o.m_PendingIsSet = true;
    } 
    
}

int32_t RealmExport::getId() const
{
    return m_Id;
}
void RealmExport::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool RealmExport::idIsSet() const
{
    return m_IdIsSet;
}
void RealmExport::unsetId()
{
    m_IdIsSet = false;
}
int32_t RealmExport::getActingUserId() const
{
    return m_Acting_user_id;
}
void RealmExport::setActingUserId(int32_t const value)
{
    m_Acting_user_id = value;
    m_Acting_user_idIsSet = true;
}
bool RealmExport::actingUserIdIsSet() const
{
    return m_Acting_user_idIsSet;
}
void RealmExport::unsetActing_user_id()
{
    m_Acting_user_idIsSet = false;
}
double RealmExport::getExportTime() const
{
    return m_Export_time;
}
void RealmExport::setExportTime(double const value)
{
    m_Export_time = value;
    m_Export_timeIsSet = true;
}
bool RealmExport::exportTimeIsSet() const
{
    return m_Export_timeIsSet;
}
void RealmExport::unsetExport_time()
{
    m_Export_timeIsSet = false;
}
double RealmExport::getDeletedTimestamp() const
{
    return m_Deleted_timestamp;
}
void RealmExport::setDeletedTimestamp(double const value)
{
    m_Deleted_timestamp = value;
    m_Deleted_timestampIsSet = true;
}
bool RealmExport::deletedTimestampIsSet() const
{
    return m_Deleted_timestampIsSet;
}
void RealmExport::unsetDeleted_timestamp()
{
    m_Deleted_timestampIsSet = false;
}
double RealmExport::getFailedTimestamp() const
{
    return m_Failed_timestamp;
}
void RealmExport::setFailedTimestamp(double const value)
{
    m_Failed_timestamp = value;
    m_Failed_timestampIsSet = true;
}
bool RealmExport::failedTimestampIsSet() const
{
    return m_Failed_timestampIsSet;
}
void RealmExport::unsetFailed_timestamp()
{
    m_Failed_timestampIsSet = false;
}
std::string RealmExport::getExportUrl() const
{
    return m_Export_url;
}
void RealmExport::setExportUrl(std::string const& value)
{
    m_Export_url = value;
    m_Export_urlIsSet = true;
}
bool RealmExport::exportUrlIsSet() const
{
    return m_Export_urlIsSet;
}
void RealmExport::unsetExport_url()
{
    m_Export_urlIsSet = false;
}
bool RealmExport::isPending() const
{
    return m_Pending;
}
void RealmExport::setPending(bool const value)
{
    m_Pending = value;
    m_PendingIsSet = true;
}
bool RealmExport::pendingIsSet() const
{
    return m_PendingIsSet;
}
void RealmExport::unsetPending()
{
    m_PendingIsSet = false;
}


} // namespace org::openapitools::server::model

