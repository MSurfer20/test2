/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Bot_allOf.h
 *
 * Object containing details of a bot. 
 */

#ifndef Bot_allOf_H_
#define Bot_allOf_H_


#include <string>
#include "AnyType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Object containing details of a bot. 
/// </summary>
class  Bot_allOf
{
public:
    Bot_allOf();
    virtual ~Bot_allOf() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Bot_allOf& rhs) const;
    bool operator!=(const Bot_allOf& rhs) const;

    /////////////////////////////////////////////
    /// Bot_allOf members

    /// <summary>
    /// 
    /// </summary>
    AnyType getUserId() const;
    void setUserId(AnyType const& value);
    bool userIdIsSet() const;
    void unsetUser_id();
    /// <summary>
    /// 
    /// </summary>
    AnyType getFullName() const;
    void setFullName(AnyType const& value);
    bool fullNameIsSet() const;
    void unsetFull_name();
    /// <summary>
    /// 
    /// </summary>
    AnyType getApiKey() const;
    void setApiKey(AnyType const& value);
    bool apiKeyIsSet() const;
    void unsetApi_key();
    /// <summary>
    /// 
    /// </summary>
    AnyType getDefaultSendingStream() const;
    void setDefaultSendingStream(AnyType const& value);
    bool defaultSendingStreamIsSet() const;
    void unsetDefault_sending_stream();
    /// <summary>
    /// 
    /// </summary>
    AnyType getDefaultEventsRegisterStream() const;
    void setDefaultEventsRegisterStream(AnyType const& value);
    bool defaultEventsRegisterStreamIsSet() const;
    void unsetDefault_events_register_stream();
    /// <summary>
    /// 
    /// </summary>
    AnyType getDefaultAllPublicStreams() const;
    void setDefaultAllPublicStreams(AnyType const& value);
    bool defaultAllPublicStreamsIsSet() const;
    void unsetDefault_all_public_streams();
    /// <summary>
    /// 
    /// </summary>
    AnyType getAvatarUrl() const;
    void setAvatarUrl(AnyType const& value);
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();
    /// <summary>
    /// 
    /// </summary>
    AnyType getOwnerId() const;
    void setOwnerId(AnyType const& value);
    bool ownerIdIsSet() const;
    void unsetOwner_id();
    /// <summary>
    /// 
    /// </summary>
    AnyType getServices() const;
    void setServices(AnyType const& value);
    bool servicesIsSet() const;
    void unsetServices();
    /// <summary>
    /// The email of the bot. 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string const& value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
    /// </summary>
    int32_t getBotType() const;
    void setBotType(int32_t const value);
    bool botTypeIsSet() const;
    void unsetBot_type();
    /// <summary>
    /// A boolean describing whether the user account has been deactivated. 
    /// </summary>
    bool isIsActive() const;
    void setIsActive(bool const value);
    bool isActiveIsSet() const;
    void unsetIs_active();

    friend void to_json(nlohmann::json& j, const Bot_allOf& o);
    friend void from_json(const nlohmann::json& j, Bot_allOf& o);
protected:
    AnyType m_User_id;
    bool m_User_idIsSet;
    AnyType m_Full_name;
    bool m_Full_nameIsSet;
    AnyType m_Api_key;
    bool m_Api_keyIsSet;
    AnyType m_Default_sending_stream;
    bool m_Default_sending_streamIsSet;
    AnyType m_Default_events_register_stream;
    bool m_Default_events_register_streamIsSet;
    AnyType m_Default_all_public_streams;
    bool m_Default_all_public_streamsIsSet;
    AnyType m_Avatar_url;
    bool m_Avatar_urlIsSet;
    AnyType m_Owner_id;
    bool m_Owner_idIsSet;
    AnyType m_Services;
    bool m_ServicesIsSet;
    std::string m_Email;
    bool m_EmailIsSet;
    int32_t m_Bot_type;
    bool m_Bot_typeIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Bot_allOf_H_ */
