/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Draft.h
 *
 * A dictionary for representing a message draft. 
 */

#ifndef Draft_H_
#define Draft_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// A dictionary for representing a message draft. 
/// </summary>
class  Draft
{
public:
    Draft();
    virtual ~Draft() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Draft& rhs) const;
    bool operator!=(const Draft& rhs) const;

    /////////////////////////////////////////////
    /// Draft members

    /// <summary>
    /// The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The type of the draft. Either unaddressed (empty string), \&quot;stream\&quot;, or \&quot;private\&quot; (for PMs and private group messages). 
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// An array of the tentative target audience IDs. For \&quot;stream\&quot; messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array. 
    /// </summary>
    std::vector<int32_t> getTo() const;
    void setTo(std::vector<int32_t> const value);
    /// <summary>
    /// For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes. 
    /// </summary>
    std::string getTopic() const;
    void setTopic(std::string const& value);
    /// <summary>
    /// The body of the draft. Should not contain null bytes. 
    /// </summary>
    std::string getContent() const;
    void setContent(std::string const& value);
    /// <summary>
    /// A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server. 
    /// </summary>
    double getTimestamp() const;
    void setTimestamp(double const value);
    bool timestampIsSet() const;
    void unsetTimestamp();

    friend void to_json(nlohmann::json& j, const Draft& o);
    friend void from_json(const nlohmann::json& j, Draft& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    std::string m_Type;

    std::vector<int32_t> m_To;

    std::string m_Topic;

    std::string m_Content;

    double m_Timestamp;
    bool m_TimestampIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Draft_H_ */
