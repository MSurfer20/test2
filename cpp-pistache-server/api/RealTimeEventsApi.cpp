/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "RealTimeEventsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string RealTimeEventsApi::base = "/api/v1";

RealTimeEventsApi::RealTimeEventsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void RealTimeEventsApi::init() {
    setupRoutes();
}

void RealTimeEventsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/events", Routes::bind(&RealTimeEventsApi::delete_queue_handler, this));
    Routes::Get(*router, base + "/events", Routes::bind(&RealTimeEventsApi::get_events_handler, this));
    Routes::Post(*router, base + "/real-time", Routes::bind(&RealTimeEventsApi::real_time_post_handler, this));
    Routes::Post(*router, base + "/register", Routes::bind(&RealTimeEventsApi::register_queue_handler, this));
    Routes::Post(*router, base + "/rest-error-handling", Routes::bind(&RealTimeEventsApi::rest_error_handling_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&RealTimeEventsApi::real_time_events_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> RealTimeEventsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what())
    }
}

std::pair<Pistache::Http::Code, std::string> RealTimeEventsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void RealTimeEventsApi::delete_queue_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto queueIdQuery = request.query().get("queue_id");
    Pistache::Optional<std::string> queueId;
    if(!queueIdQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(queueIdQuery.get(), valueQuery_instance)){
            queueId = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->delete_queue(queueId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RealTimeEventsApi::get_events_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto queueIdQuery = request.query().get("queue_id");
    Pistache::Optional<std::string> queueId;
    if(!queueIdQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(queueIdQuery.get(), valueQuery_instance)){
            queueId = Pistache::Some(valueQuery_instance);
        }
    }
    auto lastEventIdQuery = request.query().get("last_event_id");
    Pistache::Optional<int32_t> lastEventId;
    if(!lastEventIdQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(lastEventIdQuery.get(), valueQuery_instance)){
            lastEventId = Pistache::Some(valueQuery_instance);
        }
    }
    auto dontBlockQuery = request.query().get("dont_block");
    Pistache::Optional<bool> dontBlock;
    if(!dontBlockQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(dontBlockQuery.get(), valueQuery_instance)){
            dontBlock = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->get_events(queueId, lastEventId, dontBlock, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RealTimeEventsApi::real_time_post_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto eventTypesQuery = request.query().get("event_types");
    Pistache::Optional<std::vector<std::string>> eventTypes;
    if(!eventTypesQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(eventTypesQuery.get(), valueQuery_instance)){
            eventTypes = Pistache::Some(valueQuery_instance);
        }
    }
    auto narrowQuery = request.query().get("narrow");
    Pistache::Optional<std::vector<std::vector>> narrow;
    if(!narrowQuery.isEmpty()){
        std::vector<std::vector> valueQuery_instance;
        if(fromStringValue(narrowQuery.get(), valueQuery_instance)){
            narrow = Pistache::Some(valueQuery_instance);
        }
    }
    auto allPublicStreamsQuery = request.query().get("all_public_streams");
    Pistache::Optional<bool> allPublicStreams;
    if(!allPublicStreamsQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(allPublicStreamsQuery.get(), valueQuery_instance)){
            allPublicStreams = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->real_time_post(eventTypes, narrow, allPublicStreams, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RealTimeEventsApi::register_queue_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto applyMarkdownQuery = request.query().get("apply_markdown");
    Pistache::Optional<bool> applyMarkdown;
    if(!applyMarkdownQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(applyMarkdownQuery.get(), valueQuery_instance)){
            applyMarkdown = Pistache::Some(valueQuery_instance);
        }
    }
    auto clientGravatarQuery = request.query().get("client_gravatar");
    Pistache::Optional<bool> clientGravatar;
    if(!clientGravatarQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(clientGravatarQuery.get(), valueQuery_instance)){
            clientGravatar = Pistache::Some(valueQuery_instance);
        }
    }
    auto slimPresenceQuery = request.query().get("slim_presence");
    Pistache::Optional<bool> slimPresence;
    if(!slimPresenceQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(slimPresenceQuery.get(), valueQuery_instance)){
            slimPresence = Pistache::Some(valueQuery_instance);
        }
    }
    auto eventTypesQuery = request.query().get("event_types");
    Pistache::Optional<std::vector<std::string>> eventTypes;
    if(!eventTypesQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(eventTypesQuery.get(), valueQuery_instance)){
            eventTypes = Pistache::Some(valueQuery_instance);
        }
    }
    auto allPublicStreamsQuery = request.query().get("all_public_streams");
    Pistache::Optional<bool> allPublicStreams;
    if(!allPublicStreamsQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(allPublicStreamsQuery.get(), valueQuery_instance)){
            allPublicStreams = Pistache::Some(valueQuery_instance);
        }
    }
    auto includeSubscribersQuery = request.query().get("include_subscribers");
    Pistache::Optional<bool> includeSubscribers;
    if(!includeSubscribersQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(includeSubscribersQuery.get(), valueQuery_instance)){
            includeSubscribers = Pistache::Some(valueQuery_instance);
        }
    }
    auto clientCapabilitiesQuery = request.query().get("client_capabilities");
    Pistache::Optional<Object> clientCapabilities;
    if(!clientCapabilitiesQuery.isEmpty()){
        Object valueQuery_instance;
        if(fromStringValue(clientCapabilitiesQuery.get(), valueQuery_instance)){
            clientCapabilities = Pistache::Some(valueQuery_instance);
        }
    }
    auto fetchEventTypesQuery = request.query().get("fetch_event_types");
    Pistache::Optional<std::vector<std::string>> fetchEventTypes;
    if(!fetchEventTypesQuery.isEmpty()){
        std::vector<std::string> valueQuery_instance;
        if(fromStringValue(fetchEventTypesQuery.get(), valueQuery_instance)){
            fetchEventTypes = Pistache::Some(valueQuery_instance);
        }
    }
    auto narrowQuery = request.query().get("narrow");
    Pistache::Optional<std::vector<std::vector>> narrow;
    if(!narrowQuery.isEmpty()){
        std::vector<std::vector> valueQuery_instance;
        if(fromStringValue(narrowQuery.get(), valueQuery_instance)){
            narrow = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->register_queue(applyMarkdown, clientGravatar, slimPresence, eventTypes, allPublicStreams, includeSubscribers, clientCapabilities, fetchEventTypes, narrow, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RealTimeEventsApi::rest_error_handling_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->rest_error_handling(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void RealTimeEventsApi::real_time_events_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

