/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "MessagesApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string MessagesApi::base = "/api/v1";

MessagesApi::MessagesApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void MessagesApi::init() {
    setupRoutes();
}

void MessagesApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/messages/:message_id/reactions", Routes::bind(&MessagesApi::add_reaction_handler, this));
    Routes::Get(*router, base + "/messages/matches_narrow", Routes::bind(&MessagesApi::check_messages_match_narrow_handler, this));
    Routes::Delete(*router, base + "/messages/:message_id", Routes::bind(&MessagesApi::delete_message_handler, this));
    Routes::Get(*router, base + "/user_uploads/:realm_id_str/:filename", Routes::bind(&MessagesApi::get_file_temporary_url_handler, this));
    Routes::Get(*router, base + "/messages/:message_id/history", Routes::bind(&MessagesApi::get_message_history_handler, this));
    Routes::Get(*router, base + "/messages", Routes::bind(&MessagesApi::get_messages_handler, this));
    Routes::Get(*router, base + "/messages/:message_id", Routes::bind(&MessagesApi::get_raw_message_handler, this));
    Routes::Post(*router, base + "/mark_all_as_read", Routes::bind(&MessagesApi::mark_all_as_read_handler, this));
    Routes::Post(*router, base + "/mark_stream_as_read", Routes::bind(&MessagesApi::mark_stream_as_read_handler, this));
    Routes::Post(*router, base + "/mark_topic_as_read", Routes::bind(&MessagesApi::mark_topic_as_read_handler, this));
    Routes::Delete(*router, base + "/messages/:message_id/reactions", Routes::bind(&MessagesApi::remove_reaction_handler, this));
    Routes::Post(*router, base + "/messages/render", Routes::bind(&MessagesApi::render_message_handler, this));
    Routes::Post(*router, base + "/messages", Routes::bind(&MessagesApi::send_message_handler, this));
    Routes::Patch(*router, base + "/messages/:message_id", Routes::bind(&MessagesApi::update_message_handler, this));
    Routes::Post(*router, base + "/messages/flags", Routes::bind(&MessagesApi::update_message_flags_handler, this));
    Routes::Post(*router, base + "/user_uploads", Routes::bind(&MessagesApi::upload_file_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&MessagesApi::messages_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> MessagesApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what())
    }
}

std::pair<Pistache::Http::Code, std::string> MessagesApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void MessagesApi::add_reaction_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    // Getting the query params
    auto emojiNameQuery = request.query().get("emoji_name");
    Pistache::Optional<std::string> emojiName;
    if(!emojiNameQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(emojiNameQuery.get(), valueQuery_instance)){
            emojiName = Pistache::Some(valueQuery_instance);
        }
    }
    auto emojiCodeQuery = request.query().get("emoji_code");
    Pistache::Optional<std::string> emojiCode;
    if(!emojiCodeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(emojiCodeQuery.get(), valueQuery_instance)){
            emojiCode = Pistache::Some(valueQuery_instance);
        }
    }
    auto reactionTypeQuery = request.query().get("reaction_type");
    Pistache::Optional<std::string> reactionType;
    if(!reactionTypeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(reactionTypeQuery.get(), valueQuery_instance)){
            reactionType = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->add_reaction(messageId, emojiName, emojiCode, reactionType, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::check_messages_match_narrow_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto msgIdsQuery = request.query().get("msg_ids");
    Pistache::Optional<std::vector<int32_t>> msgIds;
    if(!msgIdsQuery.isEmpty()){
        std::vector<int32_t> valueQuery_instance;
        if(fromStringValue(msgIdsQuery.get(), valueQuery_instance)){
            msgIds = Pistache::Some(valueQuery_instance);
        }
    }
    auto narrowQuery = request.query().get("narrow");
    Pistache::Optional<std::vector<Object>> narrow;
    if(!narrowQuery.isEmpty()){
        std::vector<Object> valueQuery_instance;
        if(fromStringValue(narrowQuery.get(), valueQuery_instance)){
            narrow = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->check_messages_match_narrow(msgIds, narrow, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::delete_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    try {
        this->delete_message(messageId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::get_file_temporary_url_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto realmIdStr = request.param(":realmIdStr").as<int32_t>();
    auto filename = request.param(":filename").as<std::string>();
    
    try {
        this->get_file_temporary_url(realmIdStr, filename, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::get_message_history_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    try {
        this->get_message_history(messageId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::get_messages_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto anchorQuery = request.query().get("anchor");
    Pistache::Optional<OneOfstringinteger> anchor;
    if(!anchorQuery.isEmpty()){
        OneOfstringinteger valueQuery_instance;
        if(fromStringValue(anchorQuery.get(), valueQuery_instance)){
            anchor = Pistache::Some(valueQuery_instance);
        }
    }
    auto numBeforeQuery = request.query().get("num_before");
    Pistache::Optional<int32_t> numBefore;
    if(!numBeforeQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(numBeforeQuery.get(), valueQuery_instance)){
            numBefore = Pistache::Some(valueQuery_instance);
        }
    }
    auto numAfterQuery = request.query().get("num_after");
    Pistache::Optional<int32_t> numAfter;
    if(!numAfterQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(numAfterQuery.get(), valueQuery_instance)){
            numAfter = Pistache::Some(valueQuery_instance);
        }
    }
    auto narrowQuery = request.query().get("narrow");
    Pistache::Optional<std::vector<Object>> narrow;
    if(!narrowQuery.isEmpty()){
        std::vector<Object> valueQuery_instance;
        if(fromStringValue(narrowQuery.get(), valueQuery_instance)){
            narrow = Pistache::Some(valueQuery_instance);
        }
    }
    auto clientGravatarQuery = request.query().get("client_gravatar");
    Pistache::Optional<bool> clientGravatar;
    if(!clientGravatarQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(clientGravatarQuery.get(), valueQuery_instance)){
            clientGravatar = Pistache::Some(valueQuery_instance);
        }
    }
    auto applyMarkdownQuery = request.query().get("apply_markdown");
    Pistache::Optional<bool> applyMarkdown;
    if(!applyMarkdownQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(applyMarkdownQuery.get(), valueQuery_instance)){
            applyMarkdown = Pistache::Some(valueQuery_instance);
        }
    }
    auto useFirstUnreadAnchorQuery = request.query().get("use_first_unread_anchor");
    Pistache::Optional<bool> useFirstUnreadAnchor;
    if(!useFirstUnreadAnchorQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(useFirstUnreadAnchorQuery.get(), valueQuery_instance)){
            useFirstUnreadAnchor = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->get_messages(numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::get_raw_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    try {
        this->get_raw_message(messageId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::mark_all_as_read_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->mark_all_as_read(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::mark_stream_as_read_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto streamIdQuery = request.query().get("stream_id");
    Pistache::Optional<int32_t> streamId;
    if(!streamIdQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(streamIdQuery.get(), valueQuery_instance)){
            streamId = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->mark_stream_as_read(streamId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::mark_topic_as_read_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto streamIdQuery = request.query().get("stream_id");
    Pistache::Optional<int32_t> streamId;
    if(!streamIdQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(streamIdQuery.get(), valueQuery_instance)){
            streamId = Pistache::Some(valueQuery_instance);
        }
    }
    auto topicNameQuery = request.query().get("topic_name");
    Pistache::Optional<std::string> topicName;
    if(!topicNameQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(topicNameQuery.get(), valueQuery_instance)){
            topicName = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->mark_topic_as_read(streamId, topicName, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::remove_reaction_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    // Getting the query params
    auto emojiNameQuery = request.query().get("emoji_name");
    Pistache::Optional<std::string> emojiName;
    if(!emojiNameQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(emojiNameQuery.get(), valueQuery_instance)){
            emojiName = Pistache::Some(valueQuery_instance);
        }
    }
    auto emojiCodeQuery = request.query().get("emoji_code");
    Pistache::Optional<std::string> emojiCode;
    if(!emojiCodeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(emojiCodeQuery.get(), valueQuery_instance)){
            emojiCode = Pistache::Some(valueQuery_instance);
        }
    }
    auto reactionTypeQuery = request.query().get("reaction_type");
    Pistache::Optional<std::string> reactionType;
    if(!reactionTypeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(reactionTypeQuery.get(), valueQuery_instance)){
            reactionType = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->remove_reaction(messageId, emojiName, emojiCode, reactionType, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::render_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto contentQuery = request.query().get("content");
    Pistache::Optional<std::string> content;
    if(!contentQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(contentQuery.get(), valueQuery_instance)){
            content = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->render_message(content, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::send_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto typeQuery = request.query().get("type");
    Pistache::Optional<std::string> type;
    if(!typeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(typeQuery.get(), valueQuery_instance)){
            type = Pistache::Some(valueQuery_instance);
        }
    }
    auto toQuery = request.query().get("to");
    Pistache::Optional<std::vector<int32_t>> to;
    if(!toQuery.isEmpty()){
        std::vector<int32_t> valueQuery_instance;
        if(fromStringValue(toQuery.get(), valueQuery_instance)){
            to = Pistache::Some(valueQuery_instance);
        }
    }
    auto contentQuery = request.query().get("content");
    Pistache::Optional<std::string> content;
    if(!contentQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(contentQuery.get(), valueQuery_instance)){
            content = Pistache::Some(valueQuery_instance);
        }
    }
    auto topicQuery = request.query().get("topic");
    Pistache::Optional<std::string> topic;
    if(!topicQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(topicQuery.get(), valueQuery_instance)){
            topic = Pistache::Some(valueQuery_instance);
        }
    }
    auto queueIdQuery = request.query().get("queue_id");
    Pistache::Optional<std::string> queueId;
    if(!queueIdQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(queueIdQuery.get(), valueQuery_instance)){
            queueId = Pistache::Some(valueQuery_instance);
        }
    }
    auto localIdQuery = request.query().get("local_id");
    Pistache::Optional<std::string> localId;
    if(!localIdQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(localIdQuery.get(), valueQuery_instance)){
            localId = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->send_message(type, to, content, topic, queueId, localId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::update_message_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto messageId = request.param(":messageId").as<int32_t>();
    
    // Getting the query params
    auto topicQuery = request.query().get("topic");
    Pistache::Optional<std::string> topic;
    if(!topicQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(topicQuery.get(), valueQuery_instance)){
            topic = Pistache::Some(valueQuery_instance);
        }
    }
    auto propagateModeQuery = request.query().get("propagate_mode");
    Pistache::Optional<std::string> propagateMode;
    if(!propagateModeQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(propagateModeQuery.get(), valueQuery_instance)){
            propagateMode = Pistache::Some(valueQuery_instance);
        }
    }
    auto sendNotificationToOldThreadQuery = request.query().get("send_notification_to_old_thread");
    Pistache::Optional<bool> sendNotificationToOldThread;
    if(!sendNotificationToOldThreadQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(sendNotificationToOldThreadQuery.get(), valueQuery_instance)){
            sendNotificationToOldThread = Pistache::Some(valueQuery_instance);
        }
    }
    auto sendNotificationToNewThreadQuery = request.query().get("send_notification_to_new_thread");
    Pistache::Optional<bool> sendNotificationToNewThread;
    if(!sendNotificationToNewThreadQuery.isEmpty()){
        bool valueQuery_instance;
        if(fromStringValue(sendNotificationToNewThreadQuery.get(), valueQuery_instance)){
            sendNotificationToNewThread = Pistache::Some(valueQuery_instance);
        }
    }
    auto contentQuery = request.query().get("content");
    Pistache::Optional<std::string> content;
    if(!contentQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(contentQuery.get(), valueQuery_instance)){
            content = Pistache::Some(valueQuery_instance);
        }
    }
    auto streamIdQuery = request.query().get("stream_id");
    Pistache::Optional<int32_t> streamId;
    if(!streamIdQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(streamIdQuery.get(), valueQuery_instance)){
            streamId = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->update_message(messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::update_message_flags_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto messagesQuery = request.query().get("messages");
    Pistache::Optional<std::vector<int32_t>> messages;
    if(!messagesQuery.isEmpty()){
        std::vector<int32_t> valueQuery_instance;
        if(fromStringValue(messagesQuery.get(), valueQuery_instance)){
            messages = Pistache::Some(valueQuery_instance);
        }
    }
    auto opQuery = request.query().get("op");
    Pistache::Optional<std::string> op;
    if(!opQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(opQuery.get(), valueQuery_instance)){
            op = Pistache::Some(valueQuery_instance);
        }
    }
    auto flagQuery = request.query().get("flag");
    Pistache::Optional<std::string> flag;
    if(!flagQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(flagQuery.get(), valueQuery_instance)){
            flag = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->update_message_flags(messages, op, flag, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void MessagesApi::upload_file_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    try {
      this->upload_file(request, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void MessagesApi::messages_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

