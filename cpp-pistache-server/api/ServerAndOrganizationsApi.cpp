/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ServerAndOrganizationsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string ServerAndOrganizationsApi::base = "/api/v1";

ServerAndOrganizationsApi::ServerAndOrganizationsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void ServerAndOrganizationsApi::init() {
    setupRoutes();
}

void ServerAndOrganizationsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/realm/playgrounds", Routes::bind(&ServerAndOrganizationsApi::add_code_playground_handler, this));
    Routes::Post(*router, base + "/realm/filters", Routes::bind(&ServerAndOrganizationsApi::add_linkifier_handler, this));
    Routes::Post(*router, base + "/realm/profile_fields", Routes::bind(&ServerAndOrganizationsApi::create_custom_profile_field_handler, this));
    Routes::Get(*router, base + "/realm/emoji", Routes::bind(&ServerAndOrganizationsApi::get_custom_emoji_handler, this));
    Routes::Get(*router, base + "/realm/profile_fields", Routes::bind(&ServerAndOrganizationsApi::get_custom_profile_fields_handler, this));
    Routes::Get(*router, base + "/realm/linkifiers", Routes::bind(&ServerAndOrganizationsApi::get_linkifiers_handler, this));
    Routes::Get(*router, base + "/server_settings", Routes::bind(&ServerAndOrganizationsApi::get_server_settings_handler, this));
    Routes::Delete(*router, base + "/realm/playgrounds/:playground_id", Routes::bind(&ServerAndOrganizationsApi::remove_code_playground_handler, this));
    Routes::Delete(*router, base + "/realm/filters/:filter_id", Routes::bind(&ServerAndOrganizationsApi::remove_linkifier_handler, this));
    Routes::Patch(*router, base + "/realm/profile_fields", Routes::bind(&ServerAndOrganizationsApi::reorder_custom_profile_fields_handler, this));
    Routes::Patch(*router, base + "/realm/filters/:filter_id", Routes::bind(&ServerAndOrganizationsApi::update_linkifier_handler, this));
    Routes::Post(*router, base + "/realm/emoji/:emoji_name", Routes::bind(&ServerAndOrganizationsApi::upload_custom_emoji_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&ServerAndOrganizationsApi::server_and_organizations_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> ServerAndOrganizationsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what())
    }
}

std::pair<Pistache::Http::Code, std::string> ServerAndOrganizationsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void ServerAndOrganizationsApi::add_code_playground_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto nameQuery = request.query().get("name");
    Pistache::Optional<std::string> name;
    if(!nameQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(nameQuery.get(), valueQuery_instance)){
            name = Pistache::Some(valueQuery_instance);
        }
    }
    auto pygmentsLanguageQuery = request.query().get("pygments_language");
    Pistache::Optional<std::string> pygmentsLanguage;
    if(!pygmentsLanguageQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(pygmentsLanguageQuery.get(), valueQuery_instance)){
            pygmentsLanguage = Pistache::Some(valueQuery_instance);
        }
    }
    auto urlPrefixQuery = request.query().get("url_prefix");
    Pistache::Optional<std::string> urlPrefix;
    if(!urlPrefixQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(urlPrefixQuery.get(), valueQuery_instance)){
            urlPrefix = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->add_code_playground(name, pygmentsLanguage, urlPrefix, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::add_linkifier_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto patternQuery = request.query().get("pattern");
    Pistache::Optional<std::string> pattern;
    if(!patternQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(patternQuery.get(), valueQuery_instance)){
            pattern = Pistache::Some(valueQuery_instance);
        }
    }
    auto urlFormatStringQuery = request.query().get("url_format_string");
    Pistache::Optional<std::string> urlFormatString;
    if(!urlFormatStringQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(urlFormatStringQuery.get(), valueQuery_instance)){
            urlFormatString = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->add_linkifier(pattern, urlFormatString, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::create_custom_profile_field_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto nameQuery = request.query().get("name");
    Pistache::Optional<std::string> name;
    if(!nameQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(nameQuery.get(), valueQuery_instance)){
            name = Pistache::Some(valueQuery_instance);
        }
    }
    auto hintQuery = request.query().get("hint");
    Pistache::Optional<std::string> hint;
    if(!hintQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(hintQuery.get(), valueQuery_instance)){
            hint = Pistache::Some(valueQuery_instance);
        }
    }
    auto fieldTypeQuery = request.query().get("field_type");
    Pistache::Optional<int32_t> fieldType;
    if(!fieldTypeQuery.isEmpty()){
        int32_t valueQuery_instance;
        if(fromStringValue(fieldTypeQuery.get(), valueQuery_instance)){
            fieldType = Pistache::Some(valueQuery_instance);
        }
    }
    auto fieldDataQuery = request.query().get("field_data");
    Pistache::Optional<Object> fieldData;
    if(!fieldDataQuery.isEmpty()){
        Object valueQuery_instance;
        if(fromStringValue(fieldDataQuery.get(), valueQuery_instance)){
            fieldData = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->create_custom_profile_field(fieldType, name, hint, fieldData, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::get_custom_emoji_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_custom_emoji(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::get_custom_profile_fields_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_custom_profile_fields(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::get_linkifiers_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_linkifiers(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::get_server_settings_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_server_settings(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::remove_code_playground_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto playgroundId = request.param(":playgroundId").as<int32_t>();
    
    try {
        this->remove_code_playground(playgroundId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::remove_linkifier_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto filterId = request.param(":filterId").as<int32_t>();
    
    try {
        this->remove_linkifier(filterId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::reorder_custom_profile_fields_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto orderQuery = request.query().get("order");
    Pistache::Optional<std::vector<int32_t>> order;
    if(!orderQuery.isEmpty()){
        std::vector<int32_t> valueQuery_instance;
        if(fromStringValue(orderQuery.get(), valueQuery_instance)){
            order = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->reorder_custom_profile_fields(order, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::update_linkifier_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto filterId = request.param(":filterId").as<int32_t>();
    
    // Getting the query params
    auto patternQuery = request.query().get("pattern");
    Pistache::Optional<std::string> pattern;
    if(!patternQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(patternQuery.get(), valueQuery_instance)){
            pattern = Pistache::Some(valueQuery_instance);
        }
    }
    auto urlFormatStringQuery = request.query().get("url_format_string");
    Pistache::Optional<std::string> urlFormatString;
    if(!urlFormatStringQuery.isEmpty()){
        std::string valueQuery_instance;
        if(fromStringValue(urlFormatStringQuery.get(), valueQuery_instance)){
            urlFormatString = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->update_linkifier(filterId, pattern, urlFormatString, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void ServerAndOrganizationsApi::upload_custom_emoji_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    try {
      this->upload_custom_emoji(request, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void ServerAndOrganizationsApi::server_and_organizations_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

