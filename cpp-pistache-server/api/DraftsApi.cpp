/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DraftsApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string DraftsApi::base = "/api/v1";

DraftsApi::DraftsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr)
{
}

void DraftsApi::init() {
    setupRoutes();
}

void DraftsApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/drafts", Routes::bind(&DraftsApi::create_drafts_handler, this));
    Routes::Delete(*router, base + "/drafts/:draft_id", Routes::bind(&DraftsApi::delete_draft_handler, this));
    Routes::Patch(*router, base + "/drafts/:draft_id", Routes::bind(&DraftsApi::edit_draft_handler, this));
    Routes::Get(*router, base + "/drafts", Routes::bind(&DraftsApi::get_drafts_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&DraftsApi::drafts_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> DraftsApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what())
    }
}

std::pair<Pistache::Http::Code, std::string> DraftsApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void DraftsApi::create_drafts_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto draftsQuery = request.query().get("drafts");
    Pistache::Optional<std::vector<Draft>> drafts;
    if(!draftsQuery.isEmpty()){
        std::vector<Draft> valueQuery_instance;
        if(fromStringValue(draftsQuery.get(), valueQuery_instance)){
            drafts = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->create_drafts(drafts, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DraftsApi::delete_draft_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto draftId = request.param(":draftId").as<int32_t>();
    
    try {
        this->delete_draft(draftId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DraftsApi::edit_draft_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto draftId = request.param(":draftId").as<int32_t>();
    
    // Getting the query params
    auto draftQuery = request.query().get("draft");
    Pistache::Optional<Draft> draft;
    if(!draftQuery.isEmpty()){
        Draft valueQuery_instance;
        if(fromStringValue(draftQuery.get(), valueQuery_instance)){
            draft = Pistache::Some(valueQuery_instance);
        }
    }
    
    try {
        this->edit_draft(draftId, draft, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void DraftsApi::get_drafts_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_drafts(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void DraftsApi::drafts_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

