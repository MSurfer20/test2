/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * DraftsApi.h
 *
 * 
 */

#ifndef DraftsApi_H_
#define DraftsApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>

#include <utility>

#include "CodedError.h"
#include "Draft.h"
#include "JsonError.h"
#include "JsonSuccess.h"

namespace org::openapitools::server::api
{

class  DraftsApi {
public:
    explicit DraftsApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    virtual ~DraftsApi() = default;
    void init();

    static const std::string base;

private:
    void setupRoutes();

    void create_drafts_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_draft_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void edit_draft_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_drafts_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void drafts_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    const std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overriden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overriden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Create drafts
    /// </summary>
    /// <remarks>
    /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
    /// </remarks>
    /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional, default to std::vector&lt;Draft&gt;())</param>
    virtual void create_drafts(const Pistache::Optional<std::vector<Draft>> &drafts, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Delete a draft
    /// </summary>
    /// <remarks>
    /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    /// </remarks>
    /// <param name="draftId">The ID of the draft you want to delete. </param>
    virtual void delete_draft(const int32_t &draftId, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Edit a draft
    /// </summary>
    /// <remarks>
    /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    /// </remarks>
    /// <param name="draftId">The ID of the draft to be edited. </param>
    /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
    virtual void edit_draft(const int32_t &draftId, const org::openapitools::server::model::Pistache::Optional<Draft> &draft, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Get drafts
    /// </summary>
    /// <remarks>
    /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
    /// </remarks>
    virtual void get_drafts(Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* DraftsApi_H_ */

