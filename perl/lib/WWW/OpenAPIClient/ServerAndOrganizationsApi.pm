=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ServerAndOrganizationsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_code_playground
#
# Add a code playground
# 
# @param string $name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language.  (required)
# @param string $pygments_language The name of the Pygments language lexer for that programming language.  (required)
# @param string $url_prefix The url prefix for the playground.  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. ',
        required => '1',
    },
    'pygments_language' => {
        data_type => 'string',
        description => 'The name of the Pygments language lexer for that programming language. ',
        required => '1',
    },
    'url_prefix' => {
        data_type => 'string',
        description => 'The url prefix for the playground. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_code_playground' } = { 
        summary => 'Add a code playground',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub add_code_playground {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling add_code_playground");
    }

    # verify the required parameter 'pygments_language' is set
    unless (exists $args{'pygments_language'}) {
      croak("Missing the required parameter 'pygments_language' when calling add_code_playground");
    }

    # verify the required parameter 'url_prefix' is set
    unless (exists $args{'url_prefix'}) {
      croak("Missing the required parameter 'url_prefix' when calling add_code_playground");
    }

    # parse inputs
    my $_resource_path = '/realm/playgrounds';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'pygments_language'}) {
        $query_params->{'pygments_language'} = $self->{api_client}->to_query_value($args{'pygments_language'});
    }

    # query params
    if ( exists $args{'url_prefix'}) {
        $query_params->{'url_prefix'} = $self->{api_client}->to_query_value($args{'url_prefix'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# add_linkifier
#
# Add a linkifier
# 
# @param string $pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  (required)
# @param string $url_format_string The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  (required)
{
    my $params = {
    'pattern' => {
        data_type => 'string',
        description => 'The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. ',
        required => '1',
    },
    'url_format_string' => {
        data_type => 'string',
        description => 'The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_linkifier' } = { 
        summary => 'Add a linkifier',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub add_linkifier {
    my ($self, %args) = @_;

    # verify the required parameter 'pattern' is set
    unless (exists $args{'pattern'}) {
      croak("Missing the required parameter 'pattern' when calling add_linkifier");
    }

    # verify the required parameter 'url_format_string' is set
    unless (exists $args{'url_format_string'}) {
      croak("Missing the required parameter 'url_format_string' when calling add_linkifier");
    }

    # parse inputs
    my $_resource_path = '/realm/filters';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pattern'}) {
        $query_params->{'pattern'} = $self->{api_client}->to_query_value($args{'pattern'});
    }

    # query params
    if ( exists $args{'url_format_string'}) {
        $query_params->{'url_format_string'} = $self->{api_client}->to_query_value($args{'url_format_string'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# create_custom_profile_field
#
# Create a custom profile field
# 
# @param int $field_type The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  (required)
# @param string $name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional)
# @param string $hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional)
# @param object $field_data Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional)
{
    my $params = {
    'field_type' => {
        data_type => 'int',
        description => 'The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account ',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile. ',
        required => '0',
    },
    'hint' => {
        data_type => 'string',
        description => 'The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. ',
        required => '0',
    },
    'field_data' => {
        data_type => 'object',
        description => 'Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_custom_profile_field' } = { 
        summary => 'Create a custom profile field',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub create_custom_profile_field {
    my ($self, %args) = @_;

    # verify the required parameter 'field_type' is set
    unless (exists $args{'field_type'}) {
      croak("Missing the required parameter 'field_type' when calling create_custom_profile_field");
    }

    # parse inputs
    my $_resource_path = '/realm/profile_fields';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'hint'}) {
        $query_params->{'hint'} = $self->{api_client}->to_query_value($args{'hint'});
    }

    # query params
    if ( exists $args{'field_type'}) {
        $query_params->{'field_type'} = $self->{api_client}->to_query_value($args{'field_type'});
    }

    # query params
    if ( exists $args{'field_data'}) {
        $query_params->{'field_data'} = $self->{api_client}->to_query_value($args{'field_data'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_custom_emoji
#
# Get all custom emoji
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_custom_emoji' } = { 
        summary => 'Get all custom emoji',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_custom_emoji {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/realm/emoji';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_custom_profile_fields
#
# Get all custom profile fields
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_custom_profile_fields' } = { 
        summary => 'Get all custom profile fields',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_custom_profile_fields {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/realm/profile_fields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_linkifiers
#
# Get linkifiers
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_linkifiers' } = { 
        summary => 'Get linkifiers',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_linkifiers {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/realm/linkifiers';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_server_settings
#
# Get server settings
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_server_settings' } = { 
        summary => 'Get server settings',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_server_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/server_settings';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# remove_code_playground
#
# Remove a code playground
# 
# @param int $playground_id The ID of the playground that you want to remove.  (required)
{
    my $params = {
    'playground_id' => {
        data_type => 'int',
        description => 'The ID of the playground that you want to remove. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_code_playground' } = { 
        summary => 'Remove a code playground',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub remove_code_playground {
    my ($self, %args) = @_;

    # verify the required parameter 'playground_id' is set
    unless (exists $args{'playground_id'}) {
      croak("Missing the required parameter 'playground_id' when calling remove_code_playground");
    }

    # parse inputs
    my $_resource_path = '/realm/playgrounds/{playground_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'playground_id'}) {
        my $_base_variable = "{" . "playground_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'playground_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# remove_linkifier
#
# Remove a linkifier
# 
# @param int $filter_id The ID of the linkifier that you want to remove.  (required)
{
    my $params = {
    'filter_id' => {
        data_type => 'int',
        description => 'The ID of the linkifier that you want to remove. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_linkifier' } = { 
        summary => 'Remove a linkifier',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub remove_linkifier {
    my ($self, %args) = @_;

    # verify the required parameter 'filter_id' is set
    unless (exists $args{'filter_id'}) {
      croak("Missing the required parameter 'filter_id' when calling remove_linkifier");
    }

    # parse inputs
    my $_resource_path = '/realm/filters/{filter_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'filter_id'}) {
        my $_base_variable = "{" . "filter_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'filter_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# reorder_custom_profile_fields
#
# Reorder custom profile fields
# 
# @param ARRAY[int] $order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order.  (required)
{
    my $params = {
    'order' => {
        data_type => 'ARRAY[int]',
        description => 'A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reorder_custom_profile_fields' } = { 
        summary => 'Reorder custom profile fields',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub reorder_custom_profile_fields {
    my ($self, %args) = @_;

    # verify the required parameter 'order' is set
    unless (exists $args{'order'}) {
      croak("Missing the required parameter 'order' when calling reorder_custom_profile_fields");
    }

    # parse inputs
    my $_resource_path = '/realm/profile_fields';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'order'}) {
        $query_params->{'order'} = $self->{api_client}->to_query_value($args{'order'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_linkifier
#
# Update a linkifier
# 
# @param int $filter_id The ID of the linkifier that you want to update.  (required)
# @param string $pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  (required)
# @param string $url_format_string The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  (required)
{
    my $params = {
    'filter_id' => {
        data_type => 'int',
        description => 'The ID of the linkifier that you want to update. ',
        required => '1',
    },
    'pattern' => {
        data_type => 'string',
        description => 'The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. ',
        required => '1',
    },
    'url_format_string' => {
        data_type => 'string',
        description => 'The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_linkifier' } = { 
        summary => 'Update a linkifier',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_linkifier {
    my ($self, %args) = @_;

    # verify the required parameter 'filter_id' is set
    unless (exists $args{'filter_id'}) {
      croak("Missing the required parameter 'filter_id' when calling update_linkifier");
    }

    # verify the required parameter 'pattern' is set
    unless (exists $args{'pattern'}) {
      croak("Missing the required parameter 'pattern' when calling update_linkifier");
    }

    # verify the required parameter 'url_format_string' is set
    unless (exists $args{'url_format_string'}) {
      croak("Missing the required parameter 'url_format_string' when calling update_linkifier");
    }

    # parse inputs
    my $_resource_path = '/realm/filters/{filter_id}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pattern'}) {
        $query_params->{'pattern'} = $self->{api_client}->to_query_value($args{'pattern'});
    }

    # query params
    if ( exists $args{'url_format_string'}) {
        $query_params->{'url_format_string'} = $self->{api_client}->to_query_value($args{'url_format_string'});
    }

    # path params
    if ( exists $args{'filter_id'}) {
        my $_base_variable = "{" . "filter_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'filter_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# upload_custom_emoji
#
# Upload custom emoji
# 
# @param string $emoji_name The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji).  (required)
# @param string $filename  (optional)
{
    my $params = {
    'emoji_name' => {
        data_type => 'string',
        description => 'The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). ',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_custom_emoji' } = { 
        summary => 'Upload custom emoji',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub upload_custom_emoji {
    my ($self, %args) = @_;

    # verify the required parameter 'emoji_name' is set
    unless (exists $args{'emoji_name'}) {
      croak("Missing the required parameter 'emoji_name' when calling upload_custom_emoji");
    }

    # parse inputs
    my $_resource_path = '/realm/emoji/{emoji_name}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # path params
    if ( exists $args{'emoji_name'}) {
        my $_base_variable = "{" . "emoji_name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'emoji_name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # form params
    if ( exists $args{'filename'} ) {
        $form_params->{'filename'} = [] unless defined $form_params->{'filename'};
        push @{$form_params->{'filename'}}, $args{'filename'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

1;
