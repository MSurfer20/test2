=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UsersApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# create_user
#
# Create a user
# 
# @param string $email The email address of the new user.  (required)
# @param string $password The password of the new user.  (required)
# @param string $full_name The full name of the new user.  (required)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'The email address of the new user. ',
        required => '1',
    },
    'password' => {
        data_type => 'string',
        description => 'The password of the new user. ',
        required => '1',
    },
    'full_name' => {
        data_type => 'string',
        description => 'The full name of the new user. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_user' } = { 
        summary => 'Create a user',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub create_user {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling create_user");
    }

    # verify the required parameter 'password' is set
    unless (exists $args{'password'}) {
      croak("Missing the required parameter 'password' when calling create_user");
    }

    # verify the required parameter 'full_name' is set
    unless (exists $args{'full_name'}) {
      croak("Missing the required parameter 'full_name' when calling create_user");
    }

    # parse inputs
    my $_resource_path = '/users';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'email'}) {
        $query_params->{'email'} = $self->{api_client}->to_query_value($args{'email'});
    }

    # query params
    if ( exists $args{'password'}) {
        $query_params->{'password'} = $self->{api_client}->to_query_value($args{'password'});
    }

    # query params
    if ( exists $args{'full_name'}) {
        $query_params->{'full_name'} = $self->{api_client}->to_query_value($args{'full_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# create_user_group
#
# Create a user group
# 
# @param string $name The name of the user group.  (required)
# @param string $description The description of the user group.  (required)
# @param ARRAY[int] $members An array containing the user IDs of the initial members for the new user group.  (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the user group. ',
        required => '1',
    },
    'description' => {
        data_type => 'string',
        description => 'The description of the user group. ',
        required => '1',
    },
    'members' => {
        data_type => 'ARRAY[int]',
        description => 'An array containing the user IDs of the initial members for the new user group. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_user_group' } = { 
        summary => 'Create a user group',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub create_user_group {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling create_user_group");
    }

    # verify the required parameter 'description' is set
    unless (exists $args{'description'}) {
      croak("Missing the required parameter 'description' when calling create_user_group");
    }

    # verify the required parameter 'members' is set
    unless (exists $args{'members'}) {
      croak("Missing the required parameter 'members' when calling create_user_group");
    }

    # parse inputs
    my $_resource_path = '/user_groups/create';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'members'}) {
        $query_params->{'members'} = $self->{api_client}->to_query_value($args{'members'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# deactivate_own_user
#
# Deactivate own user
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'deactivate_own_user' } = { 
        summary => 'Deactivate own user',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub deactivate_own_user {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/me';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# deactivate_user
#
# Deactivate a user
# 
# @param int $user_id The target user&#39;s ID.  (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The target user&#39;s ID. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deactivate_user' } = { 
        summary => 'Deactivate a user',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub deactivate_user {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling deactivate_user");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# get_attachments
#
# Get attachments
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_attachments' } = { 
        summary => 'Get attachments',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_attachments {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attachments';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_own_user
#
# Get own user
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_own_user' } = { 
        summary => 'Get own user',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_own_user {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/me';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_user
#
# Get a user
# 
# @param int $user_id The target user&#39;s ID.  (required)
# @param boolean $client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
# @param boolean $include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The target user&#39;s ID. ',
        required => '1',
    },
    'client_gravatar' => {
        data_type => 'boolean',
        description => 'Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. ',
        required => '0',
    },
    'include_custom_profile_fields' => {
        data_type => 'boolean',
        description => 'Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user' } = { 
        summary => 'Get a user',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_user {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_user");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'client_gravatar'}) {
        $query_params->{'client_gravatar'} = $self->{api_client}->to_query_value($args{'client_gravatar'});
    }

    # query params
    if ( exists $args{'include_custom_profile_fields'}) {
        $query_params->{'include_custom_profile_fields'} = $self->{api_client}->to_query_value($args{'include_custom_profile_fields'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_user_by_email
#
# Get a user by email
# 
# @param string $email The email address of the user whose details you want to fetch.  (required)
# @param boolean $client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
# @param boolean $include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
{
    my $params = {
    'email' => {
        data_type => 'string',
        description => 'The email address of the user whose details you want to fetch. ',
        required => '1',
    },
    'client_gravatar' => {
        data_type => 'boolean',
        description => 'Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. ',
        required => '0',
    },
    'include_custom_profile_fields' => {
        data_type => 'boolean',
        description => 'Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_by_email' } = { 
        summary => 'Get a user by email',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_user_by_email {
    my ($self, %args) = @_;

    # verify the required parameter 'email' is set
    unless (exists $args{'email'}) {
      croak("Missing the required parameter 'email' when calling get_user_by_email");
    }

    # parse inputs
    my $_resource_path = '/users/{email}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'client_gravatar'}) {
        $query_params->{'client_gravatar'} = $self->{api_client}->to_query_value($args{'client_gravatar'});
    }

    # query params
    if ( exists $args{'include_custom_profile_fields'}) {
        $query_params->{'include_custom_profile_fields'} = $self->{api_client}->to_query_value($args{'include_custom_profile_fields'});
    }

    # path params
    if ( exists $args{'email'}) {
        my $_base_variable = "{" . "email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_user_groups
#
# Get user groups
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_user_groups' } = { 
        summary => 'Get user groups',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_user_groups {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user_groups';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_user_presence
#
# Get user presence
# 
# @param string $user_id_or_email The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  (required)
{
    my $params = {
    'user_id_or_email' => {
        data_type => 'string',
        description => 'The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_presence' } = { 
        summary => 'Get user presence',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_user_presence {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id_or_email' is set
    unless (exists $args{'user_id_or_email'}) {
      croak("Missing the required parameter 'user_id_or_email' when calling get_user_presence");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id_or_email}/presence';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user_id_or_email'}) {
        my $_base_variable = "{" . "user_id_or_email" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id_or_email'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_users
#
# Get all users
# 
# @param boolean $client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
# @param boolean $include_custom_profile_fields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
{
    my $params = {
    'client_gravatar' => {
        data_type => 'boolean',
        description => 'Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. ',
        required => '0',
    },
    'include_custom_profile_fields' => {
        data_type => 'boolean',
        description => 'Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_users' } = { 
        summary => 'Get all users',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_users {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'client_gravatar'}) {
        $query_params->{'client_gravatar'} = $self->{api_client}->to_query_value($args{'client_gravatar'});
    }

    # query params
    if ( exists $args{'include_custom_profile_fields'}) {
        $query_params->{'include_custom_profile_fields'} = $self->{api_client}->to_query_value($args{'include_custom_profile_fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# mute_user
#
# Mute a user
# 
# @param int $muted_user_id The ID of the user to mute/un-mute.  (required)
{
    my $params = {
    'muted_user_id' => {
        data_type => 'int',
        description => 'The ID of the user to mute/un-mute. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_user' } = { 
        summary => 'Mute a user',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub mute_user {
    my ($self, %args) = @_;

    # verify the required parameter 'muted_user_id' is set
    unless (exists $args{'muted_user_id'}) {
      croak("Missing the required parameter 'muted_user_id' when calling mute_user");
    }

    # parse inputs
    my $_resource_path = '/users/me/muted_users/{muted_user_id}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'muted_user_id'}) {
        my $_base_variable = "{" . "muted_user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'muted_user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# reactivate_user
#
# Reactivate a user
# 
# @param int $user_id The target user&#39;s ID.  (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The target user&#39;s ID. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'reactivate_user' } = { 
        summary => 'Reactivate a user',
        params => $params,
        returns => 'AnyType',
        };
}
# @return AnyType
#
sub reactivate_user {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling reactivate_user");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/reactivate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnyType', $response);
    return $_response_object;
}

#
# remove_user_group
#
# Delete a user group
# 
# @param int $user_group_id The ID of the target user group.  (required)
{
    my $params = {
    'user_group_id' => {
        data_type => 'int',
        description => 'The ID of the target user group. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_user_group' } = { 
        summary => 'Delete a user group',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub remove_user_group {
    my ($self, %args) = @_;

    # verify the required parameter 'user_group_id' is set
    unless (exists $args{'user_group_id'}) {
      croak("Missing the required parameter 'user_group_id' when calling remove_user_group");
    }

    # parse inputs
    my $_resource_path = '/user_groups/{user_group_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user_group_id'}) {
        my $_base_variable = "{" . "user_group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# set_typing_status
#
# Set \"typing\" status
# 
# @param string $op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  (required)
# @param ARRAY[int] $to For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  (required)
# @param string $type Type of the message being composed.  (optional, default to 'private')
# @param string $topic Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
{
    my $params = {
    'op' => {
        data_type => 'string',
        description => 'Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. ',
        required => '1',
    },
    'to' => {
        data_type => 'ARRAY[int]',
        description => 'For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). ',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Type of the message being composed. ',
        required => '0',
    },
    'topic' => {
        data_type => 'string',
        description => 'Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'set_typing_status' } = { 
        summary => 'Set \&quot;typing\&quot; status',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub set_typing_status {
    my ($self, %args) = @_;

    # verify the required parameter 'op' is set
    unless (exists $args{'op'}) {
      croak("Missing the required parameter 'op' when calling set_typing_status");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling set_typing_status");
    }

    # parse inputs
    my $_resource_path = '/typing';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'op'}) {
        $query_params->{'op'} = $self->{api_client}->to_query_value($args{'op'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'topic'}) {
        $query_params->{'topic'} = $self->{api_client}->to_query_value($args{'topic'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# unmute_user
#
# Unmute a user
# 
# @param int $muted_user_id The ID of the user to mute/un-mute.  (required)
{
    my $params = {
    'muted_user_id' => {
        data_type => 'int',
        description => 'The ID of the user to mute/un-mute. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'unmute_user' } = { 
        summary => 'Unmute a user',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub unmute_user {
    my ($self, %args) = @_;

    # verify the required parameter 'muted_user_id' is set
    unless (exists $args{'muted_user_id'}) {
      croak("Missing the required parameter 'muted_user_id' when calling unmute_user");
    }

    # parse inputs
    my $_resource_path = '/users/me/muted_users/{muted_user_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'muted_user_id'}) {
        my $_base_variable = "{" . "muted_user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'muted_user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_display_settings
#
# Update display settings
# 
# @param boolean $twenty_four_hour_time Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
# @param boolean $dense_mode This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
# @param boolean $starred_message_counts Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
# @param boolean $fluid_layout_width Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
# @param boolean $high_contrast_mode This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
# @param int $color_scheme Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
# @param boolean $translate_emoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
# @param string $default_language What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
# @param string $default_view The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
# @param boolean $left_side_userlist Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
# @param string $emojiset The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
# @param int $demote_inactive_streams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
# @param string $timezone The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
{
    my $params = {
    'twenty_four_hour_time' => {
        data_type => 'boolean',
        description => 'Whether time should be [displayed in 24-hour notation](/help/change-the-time-format). ',
        required => '0',
    },
    'dense_mode' => {
        data_type => 'boolean',
        description => 'This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip. ',
        required => '0',
    },
    'starred_message_counts' => {
        data_type => 'boolean',
        description => 'Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages). ',
        required => '0',
    },
    'fluid_layout_width' => {
        data_type => 'boolean',
        description => 'Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens. ',
        required => '0',
    },
    'high_contrast_mode' => {
        data_type => 'boolean',
        description => 'This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users. ',
        required => '0',
    },
    'color_scheme' => {
        data_type => 'int',
        description => 'Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query. ',
        required => '0',
    },
    'translate_emoticons' => {
        data_type => 'boolean',
        description => 'Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends. ',
        required => '0',
    },
    'default_language' => {
        data_type => 'string',
        description => 'What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). ',
        required => '0',
    },
    'default_view' => {
        data_type => 'string',
        description => 'The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). ',
        required => '0',
    },
    'left_side_userlist' => {
        data_type => 'boolean',
        description => 'Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked. ',
        required => '0',
    },
    'emojiset' => {
        data_type => 'string',
        description => 'The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). ',
        required => '0',
    },
    'demote_inactive_streams' => {
        data_type => 'int',
        description => 'Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never ',
        required => '0',
    },
    'timezone' => {
        data_type => 'string',
        description => 'The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_display_settings' } = { 
        summary => 'Update display settings',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub update_display_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/settings/display';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'twenty_four_hour_time'}) {
        $query_params->{'twenty_four_hour_time'} = $self->{api_client}->to_query_value($args{'twenty_four_hour_time'});
    }

    # query params
    if ( exists $args{'dense_mode'}) {
        $query_params->{'dense_mode'} = $self->{api_client}->to_query_value($args{'dense_mode'});
    }

    # query params
    if ( exists $args{'starred_message_counts'}) {
        $query_params->{'starred_message_counts'} = $self->{api_client}->to_query_value($args{'starred_message_counts'});
    }

    # query params
    if ( exists $args{'fluid_layout_width'}) {
        $query_params->{'fluid_layout_width'} = $self->{api_client}->to_query_value($args{'fluid_layout_width'});
    }

    # query params
    if ( exists $args{'high_contrast_mode'}) {
        $query_params->{'high_contrast_mode'} = $self->{api_client}->to_query_value($args{'high_contrast_mode'});
    }

    # query params
    if ( exists $args{'color_scheme'}) {
        $query_params->{'color_scheme'} = $self->{api_client}->to_query_value($args{'color_scheme'});
    }

    # query params
    if ( exists $args{'translate_emoticons'}) {
        $query_params->{'translate_emoticons'} = $self->{api_client}->to_query_value($args{'translate_emoticons'});
    }

    # query params
    if ( exists $args{'default_language'}) {
        $query_params->{'default_language'} = $self->{api_client}->to_query_value($args{'default_language'});
    }

    # query params
    if ( exists $args{'default_view'}) {
        $query_params->{'default_view'} = $self->{api_client}->to_query_value($args{'default_view'});
    }

    # query params
    if ( exists $args{'left_side_userlist'}) {
        $query_params->{'left_side_userlist'} = $self->{api_client}->to_query_value($args{'left_side_userlist'});
    }

    # query params
    if ( exists $args{'emojiset'}) {
        $query_params->{'emojiset'} = $self->{api_client}->to_query_value($args{'emojiset'});
    }

    # query params
    if ( exists $args{'demote_inactive_streams'}) {
        $query_params->{'demote_inactive_streams'} = $self->{api_client}->to_query_value($args{'demote_inactive_streams'});
    }

    # query params
    if ( exists $args{'timezone'}) {
        $query_params->{'timezone'} = $self->{api_client}->to_query_value($args{'timezone'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# update_notification_settings
#
# Update notification settings
# 
# @param boolean $enable_stream_desktop_notifications Enable visual desktop notifications for stream messages.  (optional)
# @param boolean $enable_stream_email_notifications Enable email notifications for stream messages.  (optional)
# @param boolean $enable_stream_push_notifications Enable mobile notifications for stream messages.  (optional)
# @param boolean $enable_stream_audible_notifications Enable audible desktop notifications for stream messages.  (optional)
# @param string $notification_sound Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
# @param boolean $enable_desktop_notifications Enable visual desktop notifications for private messages and @-mentions.  (optional)
# @param boolean $enable_sounds Enable audible desktop notifications for private messages and @-mentions.  (optional)
# @param boolean $enable_offline_email_notifications Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
# @param boolean $enable_offline_push_notifications Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
# @param boolean $enable_online_push_notifications Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
# @param boolean $enable_digest_emails Enable digest emails when the user is away.  (optional)
# @param boolean $enable_marketing_emails Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
# @param boolean $enable_login_emails Enable email notifications for new logins to account.  (optional)
# @param boolean $message_content_in_email_notifications Include the message&#39;s content in email notifications for new messages.  (optional)
# @param boolean $pm_content_in_desktop_notifications Include content of private messages in desktop notifications.  (optional)
# @param boolean $wildcard_mentions_notify Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
# @param int $desktop_icon_count_display Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
# @param boolean $realm_name_in_notifications Include organization name in subject of message notification emails.  (optional)
# @param boolean $presence_enabled Display the presence status to other users when online.  (optional)
{
    my $params = {
    'enable_stream_desktop_notifications' => {
        data_type => 'boolean',
        description => 'Enable visual desktop notifications for stream messages. ',
        required => '0',
    },
    'enable_stream_email_notifications' => {
        data_type => 'boolean',
        description => 'Enable email notifications for stream messages. ',
        required => '0',
    },
    'enable_stream_push_notifications' => {
        data_type => 'boolean',
        description => 'Enable mobile notifications for stream messages. ',
        required => '0',
    },
    'enable_stream_audible_notifications' => {
        data_type => 'boolean',
        description => 'Enable audible desktop notifications for stream messages. ',
        required => '0',
    },
    'notification_sound' => {
        data_type => 'string',
        description => 'Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). ',
        required => '0',
    },
    'enable_desktop_notifications' => {
        data_type => 'boolean',
        description => 'Enable visual desktop notifications for private messages and @-mentions. ',
        required => '0',
    },
    'enable_sounds' => {
        data_type => 'boolean',
        description => 'Enable audible desktop notifications for private messages and @-mentions. ',
        required => '0',
    },
    'enable_offline_email_notifications' => {
        data_type => 'boolean',
        description => 'Enable email notifications for private messages and @-mentions received when the user is offline. ',
        required => '0',
    },
    'enable_offline_push_notifications' => {
        data_type => 'boolean',
        description => 'Enable mobile notification for private messages and @-mentions received when the user is offline. ',
        required => '0',
    },
    'enable_online_push_notifications' => {
        data_type => 'boolean',
        description => 'Enable mobile notification for private messages and @-mentions received when the user is online. ',
        required => '0',
    },
    'enable_digest_emails' => {
        data_type => 'boolean',
        description => 'Enable digest emails when the user is away. ',
        required => '0',
    },
    'enable_marketing_emails' => {
        data_type => 'boolean',
        description => 'Enable marketing emails. Has no function outside Zulip Cloud. ',
        required => '0',
    },
    'enable_login_emails' => {
        data_type => 'boolean',
        description => 'Enable email notifications for new logins to account. ',
        required => '0',
    },
    'message_content_in_email_notifications' => {
        data_type => 'boolean',
        description => 'Include the message&#39;s content in email notifications for new messages. ',
        required => '0',
    },
    'pm_content_in_desktop_notifications' => {
        data_type => 'boolean',
        description => 'Include content of private messages in desktop notifications. ',
        required => '0',
    },
    'wildcard_mentions_notify' => {
        data_type => 'boolean',
        description => 'Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention. ',
        required => '0',
    },
    'desktop_icon_count_display' => {
        data_type => 'int',
        description => 'Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None ',
        required => '0',
    },
    'realm_name_in_notifications' => {
        data_type => 'boolean',
        description => 'Include organization name in subject of message notification emails. ',
        required => '0',
    },
    'presence_enabled' => {
        data_type => 'boolean',
        description => 'Display the presence status to other users when online. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_notification_settings' } = { 
        summary => 'Update notification settings',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub update_notification_settings {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/settings/notifications';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'enable_stream_desktop_notifications'}) {
        $query_params->{'enable_stream_desktop_notifications'} = $self->{api_client}->to_query_value($args{'enable_stream_desktop_notifications'});
    }

    # query params
    if ( exists $args{'enable_stream_email_notifications'}) {
        $query_params->{'enable_stream_email_notifications'} = $self->{api_client}->to_query_value($args{'enable_stream_email_notifications'});
    }

    # query params
    if ( exists $args{'enable_stream_push_notifications'}) {
        $query_params->{'enable_stream_push_notifications'} = $self->{api_client}->to_query_value($args{'enable_stream_push_notifications'});
    }

    # query params
    if ( exists $args{'enable_stream_audible_notifications'}) {
        $query_params->{'enable_stream_audible_notifications'} = $self->{api_client}->to_query_value($args{'enable_stream_audible_notifications'});
    }

    # query params
    if ( exists $args{'notification_sound'}) {
        $query_params->{'notification_sound'} = $self->{api_client}->to_query_value($args{'notification_sound'});
    }

    # query params
    if ( exists $args{'enable_desktop_notifications'}) {
        $query_params->{'enable_desktop_notifications'} = $self->{api_client}->to_query_value($args{'enable_desktop_notifications'});
    }

    # query params
    if ( exists $args{'enable_sounds'}) {
        $query_params->{'enable_sounds'} = $self->{api_client}->to_query_value($args{'enable_sounds'});
    }

    # query params
    if ( exists $args{'enable_offline_email_notifications'}) {
        $query_params->{'enable_offline_email_notifications'} = $self->{api_client}->to_query_value($args{'enable_offline_email_notifications'});
    }

    # query params
    if ( exists $args{'enable_offline_push_notifications'}) {
        $query_params->{'enable_offline_push_notifications'} = $self->{api_client}->to_query_value($args{'enable_offline_push_notifications'});
    }

    # query params
    if ( exists $args{'enable_online_push_notifications'}) {
        $query_params->{'enable_online_push_notifications'} = $self->{api_client}->to_query_value($args{'enable_online_push_notifications'});
    }

    # query params
    if ( exists $args{'enable_digest_emails'}) {
        $query_params->{'enable_digest_emails'} = $self->{api_client}->to_query_value($args{'enable_digest_emails'});
    }

    # query params
    if ( exists $args{'enable_marketing_emails'}) {
        $query_params->{'enable_marketing_emails'} = $self->{api_client}->to_query_value($args{'enable_marketing_emails'});
    }

    # query params
    if ( exists $args{'enable_login_emails'}) {
        $query_params->{'enable_login_emails'} = $self->{api_client}->to_query_value($args{'enable_login_emails'});
    }

    # query params
    if ( exists $args{'message_content_in_email_notifications'}) {
        $query_params->{'message_content_in_email_notifications'} = $self->{api_client}->to_query_value($args{'message_content_in_email_notifications'});
    }

    # query params
    if ( exists $args{'pm_content_in_desktop_notifications'}) {
        $query_params->{'pm_content_in_desktop_notifications'} = $self->{api_client}->to_query_value($args{'pm_content_in_desktop_notifications'});
    }

    # query params
    if ( exists $args{'wildcard_mentions_notify'}) {
        $query_params->{'wildcard_mentions_notify'} = $self->{api_client}->to_query_value($args{'wildcard_mentions_notify'});
    }

    # query params
    if ( exists $args{'desktop_icon_count_display'}) {
        $query_params->{'desktop_icon_count_display'} = $self->{api_client}->to_query_value($args{'desktop_icon_count_display'});
    }

    # query params
    if ( exists $args{'realm_name_in_notifications'}) {
        $query_params->{'realm_name_in_notifications'} = $self->{api_client}->to_query_value($args{'realm_name_in_notifications'});
    }

    # query params
    if ( exists $args{'presence_enabled'}) {
        $query_params->{'presence_enabled'} = $self->{api_client}->to_query_value($args{'presence_enabled'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# update_user
#
# Update a user
# 
# @param int $user_id The target user&#39;s ID.  (required)
# @param string $full_name The user&#39;s full name.  (optional)
# @param int $role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
# @param ARRAY[object] $profile_data A dictionary containing the to be updated custom profile field data for the user.  (optional)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The target user&#39;s ID. ',
        required => '1',
    },
    'full_name' => {
        data_type => 'string',
        description => 'The user&#39;s full name. ',
        required => '0',
    },
    'role' => {
        data_type => 'int',
        description => 'New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). ',
        required => '0',
    },
    'profile_data' => {
        data_type => 'ARRAY[object]',
        description => 'A dictionary containing the to be updated custom profile field data for the user. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user' } = { 
        summary => 'Update a user',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_user {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling update_user");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'full_name'}) {
        $query_params->{'full_name'} = $self->{api_client}->to_query_value($args{'full_name'});
    }

    # query params
    if ( exists $args{'role'}) {
        $query_params->{'role'} = $self->{api_client}->to_query_value($args{'role'});
    }

    # query params
    if ( exists $args{'profile_data'}) {
        $query_params->{'profile_data'} = $self->{api_client}->to_query_value($args{'profile_data'});
    }

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_user_group
#
# Update a user group
# 
# @param int $user_group_id The ID of the target user group.  (required)
# @param string $name The new name of the group.  (required)
# @param string $description The new description of the group.  (required)
{
    my $params = {
    'user_group_id' => {
        data_type => 'int',
        description => 'The ID of the target user group. ',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'The new name of the group. ',
        required => '1',
    },
    'description' => {
        data_type => 'string',
        description => 'The new description of the group. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_group' } = { 
        summary => 'Update a user group',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_user_group {
    my ($self, %args) = @_;

    # verify the required parameter 'user_group_id' is set
    unless (exists $args{'user_group_id'}) {
      croak("Missing the required parameter 'user_group_id' when calling update_user_group");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling update_user_group");
    }

    # verify the required parameter 'description' is set
    unless (exists $args{'description'}) {
      croak("Missing the required parameter 'description' when calling update_user_group");
    }

    # parse inputs
    my $_resource_path = '/user_groups/{user_group_id}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # path params
    if ( exists $args{'user_group_id'}) {
        my $_base_variable = "{" . "user_group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_user_group_members
#
# Update user group members
# 
# @param int $user_group_id The ID of the target user group.  (required)
# @param ARRAY[int] $delete The list of user ids to be removed from the user group.  (optional)
# @param ARRAY[int] $add The list of user ids to be added to the user group.  (optional)
{
    my $params = {
    'user_group_id' => {
        data_type => 'int',
        description => 'The ID of the target user group. ',
        required => '1',
    },
    'delete' => {
        data_type => 'ARRAY[int]',
        description => 'The list of user ids to be removed from the user group. ',
        required => '0',
    },
    'add' => {
        data_type => 'ARRAY[int]',
        description => 'The list of user ids to be added to the user group. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_user_group_members' } = { 
        summary => 'Update user group members',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_user_group_members {
    my ($self, %args) = @_;

    # verify the required parameter 'user_group_id' is set
    unless (exists $args{'user_group_id'}) {
      croak("Missing the required parameter 'user_group_id' when calling update_user_group_members");
    }

    # parse inputs
    my $_resource_path = '/user_groups/{user_group_id}/members';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'add'}) {
        $query_params->{'add'} = $self->{api_client}->to_query_value($args{'add'});
    }

    # path params
    if ( exists $args{'user_group_id'}) {
        my $_base_variable = "{" . "user_group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

1;
