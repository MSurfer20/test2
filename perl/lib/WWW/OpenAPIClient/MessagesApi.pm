=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MessagesApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# add_reaction
#
# Add an emoji reaction
# 
# @param int $message_id The target message&#39;s ID.  (required)
# @param string $emoji_name The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (required)
# @param string $emoji_code A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
# @param string $reaction_type If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    'emoji_name' => {
        data_type => 'string',
        description => 'The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. ',
        required => '1',
    },
    'emoji_code' => {
        data_type => 'string',
        description => 'A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. ',
        required => '0',
    },
    'reaction_type' => {
        data_type => 'string',
        description => 'If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'add_reaction' } = { 
        summary => 'Add an emoji reaction',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub add_reaction {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling add_reaction");
    }

    # verify the required parameter 'emoji_name' is set
    unless (exists $args{'emoji_name'}) {
      croak("Missing the required parameter 'emoji_name' when calling add_reaction");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}/reactions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'emoji_name'}) {
        $query_params->{'emoji_name'} = $self->{api_client}->to_query_value($args{'emoji_name'});
    }

    # query params
    if ( exists $args{'emoji_code'}) {
        $query_params->{'emoji_code'} = $self->{api_client}->to_query_value($args{'emoji_code'});
    }

    # query params
    if ( exists $args{'reaction_type'}) {
        $query_params->{'reaction_type'} = $self->{api_client}->to_query_value($args{'reaction_type'});
    }

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# check_messages_match_narrow
#
# Check if messages match a narrow
# 
# @param ARRAY[int] $msg_ids List of IDs for the messages to check. (required)
# @param ARRAY[object] $narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). (required)
{
    my $params = {
    'msg_ids' => {
        data_type => 'ARRAY[int]',
        description => 'List of IDs for the messages to check.',
        required => '1',
    },
    'narrow' => {
        data_type => 'ARRAY[object]',
        description => 'A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'check_messages_match_narrow' } = { 
        summary => 'Check if messages match a narrow',
        params => $params,
        returns => 'AnyType',
        };
}
# @return AnyType
#
sub check_messages_match_narrow {
    my ($self, %args) = @_;

    # verify the required parameter 'msg_ids' is set
    unless (exists $args{'msg_ids'}) {
      croak("Missing the required parameter 'msg_ids' when calling check_messages_match_narrow");
    }

    # verify the required parameter 'narrow' is set
    unless (exists $args{'narrow'}) {
      croak("Missing the required parameter 'narrow' when calling check_messages_match_narrow");
    }

    # parse inputs
    my $_resource_path = '/messages/matches_narrow';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'msg_ids'}) {
        $query_params->{'msg_ids'} = $self->{api_client}->to_query_value($args{'msg_ids'});
    }

    # query params
    if ( exists $args{'narrow'}) {
        $query_params->{'narrow'} = $self->{api_client}->to_query_value($args{'narrow'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AnyType', $response);
    return $_response_object;
}

#
# delete_message
#
# Delete a message
# 
# @param int $message_id The target message&#39;s ID.  (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message' } = { 
        summary => 'Delete a message',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub delete_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling delete_message");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# get_file_temporary_url
#
# Get public temporary URL
# 
# @param int $realm_id_str The realm id.  (required)
# @param string $filename Path to the URL.  (required)
{
    my $params = {
    'realm_id_str' => {
        data_type => 'int',
        description => 'The realm id. ',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'Path to the URL. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_file_temporary_url' } = { 
        summary => 'Get public temporary URL',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_file_temporary_url {
    my ($self, %args) = @_;

    # verify the required parameter 'realm_id_str' is set
    unless (exists $args{'realm_id_str'}) {
      croak("Missing the required parameter 'realm_id_str' when calling get_file_temporary_url");
    }

    # verify the required parameter 'filename' is set
    unless (exists $args{'filename'}) {
      croak("Missing the required parameter 'filename' when calling get_file_temporary_url");
    }

    # parse inputs
    my $_resource_path = '/user_uploads/{realm_id_str}/{filename}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'realm_id_str'}) {
        my $_base_variable = "{" . "realm_id_str" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'realm_id_str'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'filename'}) {
        my $_base_variable = "{" . "filename" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'filename'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_message_history
#
# Get a message's edit history
# 
# @param int $message_id The target message&#39;s ID.  (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message_history' } = { 
        summary => 'Get a message&#39;s edit history',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_message_history {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling get_message_history");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}/history';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_messages
#
# Get messages
# 
# @param int $num_before The number of messages with IDs less than the anchor to retrieve.  (required)
# @param int $num_after The number of messages with IDs greater than the anchor to retrieve.  (required)
# @param OneOfstringinteger $anchor Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value).  (optional)
# @param ARRAY[object] $narrow The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow).  (optional)
# @param boolean $client_gravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
# @param boolean $apply_markdown If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered.  (optional, default to true)
# @param boolean $use_first_unread_anchor Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead.  (optional, default to false)
{
    my $params = {
    'num_before' => {
        data_type => 'int',
        description => 'The number of messages with IDs less than the anchor to retrieve. ',
        required => '1',
    },
    'num_after' => {
        data_type => 'int',
        description => 'The number of messages with IDs greater than the anchor to retrieve. ',
        required => '1',
    },
    'anchor' => {
        data_type => 'OneOfstringinteger',
        description => 'Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value). ',
        required => '0',
    },
    'narrow' => {
        data_type => 'ARRAY[object]',
        description => 'The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow). ',
        required => '0',
    },
    'client_gravatar' => {
        data_type => 'boolean',
        description => 'Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. ',
        required => '0',
    },
    'apply_markdown' => {
        data_type => 'boolean',
        description => 'If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered. ',
        required => '0',
    },
    'use_first_unread_anchor' => {
        data_type => 'boolean',
        description => 'Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_messages' } = { 
        summary => 'Get messages',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_messages {
    my ($self, %args) = @_;

    # verify the required parameter 'num_before' is set
    unless (exists $args{'num_before'}) {
      croak("Missing the required parameter 'num_before' when calling get_messages");
    }

    # verify the required parameter 'num_after' is set
    unless (exists $args{'num_after'}) {
      croak("Missing the required parameter 'num_after' when calling get_messages");
    }

    # parse inputs
    my $_resource_path = '/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'anchor'}) {
        $query_params->{'anchor'} = $self->{api_client}->to_query_value($args{'anchor'});
    }

    # query params
    if ( exists $args{'num_before'}) {
        $query_params->{'num_before'} = $self->{api_client}->to_query_value($args{'num_before'});
    }

    # query params
    if ( exists $args{'num_after'}) {
        $query_params->{'num_after'} = $self->{api_client}->to_query_value($args{'num_after'});
    }

    # query params
    if ( exists $args{'narrow'}) {
        $query_params->{'narrow'} = $self->{api_client}->to_query_value($args{'narrow'});
    }

    # query params
    if ( exists $args{'client_gravatar'}) {
        $query_params->{'client_gravatar'} = $self->{api_client}->to_query_value($args{'client_gravatar'});
    }

    # query params
    if ( exists $args{'apply_markdown'}) {
        $query_params->{'apply_markdown'} = $self->{api_client}->to_query_value($args{'apply_markdown'});
    }

    # query params
    if ( exists $args{'use_first_unread_anchor'}) {
        $query_params->{'use_first_unread_anchor'} = $self->{api_client}->to_query_value($args{'use_first_unread_anchor'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_raw_message
#
# Get a message's raw Markdown
# 
# @param int $message_id The target message&#39;s ID.  (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_raw_message' } = { 
        summary => 'Get a message&#39;s raw Markdown',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_raw_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling get_raw_message");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# mark_all_as_read
#
# Mark all messages as read
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'mark_all_as_read' } = { 
        summary => 'Mark all messages as read',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub mark_all_as_read {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mark_all_as_read';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# mark_stream_as_read
#
# Mark messages in a stream as read
# 
# @param int $stream_id The ID of the stream to access.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_stream_as_read' } = { 
        summary => 'Mark messages in a stream as read',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub mark_stream_as_read {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling mark_stream_as_read");
    }

    # parse inputs
    my $_resource_path = '/mark_stream_as_read';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'stream_id'}) {
        $query_params->{'stream_id'} = $self->{api_client}->to_query_value($args{'stream_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# mark_topic_as_read
#
# Mark messages in a topic as read
# 
# @param int $stream_id The ID of the stream to access.  (required)
# @param string $topic_name The name of the topic whose messages should be marked as read.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    'topic_name' => {
        data_type => 'string',
        description => 'The name of the topic whose messages should be marked as read. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mark_topic_as_read' } = { 
        summary => 'Mark messages in a topic as read',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub mark_topic_as_read {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling mark_topic_as_read");
    }

    # verify the required parameter 'topic_name' is set
    unless (exists $args{'topic_name'}) {
      croak("Missing the required parameter 'topic_name' when calling mark_topic_as_read");
    }

    # parse inputs
    my $_resource_path = '/mark_topic_as_read';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'stream_id'}) {
        $query_params->{'stream_id'} = $self->{api_client}->to_query_value($args{'stream_id'});
    }

    # query params
    if ( exists $args{'topic_name'}) {
        $query_params->{'topic_name'} = $self->{api_client}->to_query_value($args{'topic_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# remove_reaction
#
# Remove an emoji reaction
# 
# @param int $message_id The target message&#39;s ID.  (required)
# @param string $emoji_name The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (optional)
# @param string $emoji_code A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
# @param string $reaction_type If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    'emoji_name' => {
        data_type => 'string',
        description => 'The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. ',
        required => '0',
    },
    'emoji_code' => {
        data_type => 'string',
        description => 'A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. ',
        required => '0',
    },
    'reaction_type' => {
        data_type => 'string',
        description => 'If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'remove_reaction' } = { 
        summary => 'Remove an emoji reaction',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub remove_reaction {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling remove_reaction");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}/reactions';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'emoji_name'}) {
        $query_params->{'emoji_name'} = $self->{api_client}->to_query_value($args{'emoji_name'});
    }

    # query params
    if ( exists $args{'emoji_code'}) {
        $query_params->{'emoji_code'} = $self->{api_client}->to_query_value($args{'emoji_code'});
    }

    # query params
    if ( exists $args{'reaction_type'}) {
        $query_params->{'reaction_type'} = $self->{api_client}->to_query_value($args{'reaction_type'});
    }

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# render_message
#
# Render message
# 
# @param string $content The content of the message. Maximum message size of 10000 bytes.  (required)
{
    my $params = {
    'content' => {
        data_type => 'string',
        description => 'The content of the message. Maximum message size of 10000 bytes. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'render_message' } = { 
        summary => 'Render message',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub render_message {
    my ($self, %args) = @_;

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling render_message");
    }

    # parse inputs
    my $_resource_path = '/messages/render';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# send_message
#
# Send a message
# 
# @param string $type The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message.  (required)
# @param ARRAY[int] $to For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.  (required)
# @param string $content The content of the message. Maximum message size of 10000 bytes.  (required)
# @param string $topic The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
# @param string $queue_id For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device).  (optional)
# @param string $local_id For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description.  (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message. ',
        required => '1',
    },
    'to' => {
        data_type => 'ARRAY[int]',
        description => 'For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0. ',
        required => '1',
    },
    'content' => {
        data_type => 'string',
        description => 'The content of the message. Maximum message size of 10000 bytes. ',
        required => '1',
    },
    'topic' => {
        data_type => 'string',
        description => 'The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. ',
        required => '0',
    },
    'queue_id' => {
        data_type => 'string',
        description => 'For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device). ',
        required => '0',
    },
    'local_id' => {
        data_type => 'string',
        description => 'For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message' } = { 
        summary => 'Send a message',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub send_message {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling send_message");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling send_message");
    }

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling send_message");
    }

    # parse inputs
    my $_resource_path = '/messages';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    # query params
    if ( exists $args{'topic'}) {
        $query_params->{'topic'} = $self->{api_client}->to_query_value($args{'topic'});
    }

    # query params
    if ( exists $args{'queue_id'}) {
        $query_params->{'queue_id'} = $self->{api_client}->to_query_value($args{'queue_id'});
    }

    # query params
    if ( exists $args{'local_id'}) {
        $query_params->{'local_id'} = $self->{api_client}->to_query_value($args{'local_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# update_message
#
# Edit a message
# 
# @param int $message_id The target message&#39;s ID.  (required)
# @param string $topic The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias.  (optional)
# @param string $propagate_mode Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic.  (optional, default to 'change_one')
# @param boolean $send_notification_to_old_thread Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
# @param boolean $send_notification_to_new_thread Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9).  (optional, default to true)
# @param string $content The content of the message. Maximum message size of 10000 bytes.  (optional)
# @param int $stream_id The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message.  (optional)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'The target message&#39;s ID. ',
        required => '1',
    },
    'topic' => {
        data_type => 'string',
        description => 'The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. ',
        required => '0',
    },
    'propagate_mode' => {
        data_type => 'string',
        description => 'Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic. ',
        required => '0',
    },
    'send_notification_to_old_thread' => {
        data_type => 'boolean',
        description => 'Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9). ',
        required => '0',
    },
    'send_notification_to_new_thread' => {
        data_type => 'boolean',
        description => 'Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9). ',
        required => '0',
    },
    'content' => {
        data_type => 'string',
        description => 'The content of the message. Maximum message size of 10000 bytes. ',
        required => '0',
    },
    'stream_id' => {
        data_type => 'int',
        description => 'The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_message' } = { 
        summary => 'Edit a message',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling update_message");
    }

    # parse inputs
    my $_resource_path = '/messages/{message_id}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'topic'}) {
        $query_params->{'topic'} = $self->{api_client}->to_query_value($args{'topic'});
    }

    # query params
    if ( exists $args{'propagate_mode'}) {
        $query_params->{'propagate_mode'} = $self->{api_client}->to_query_value($args{'propagate_mode'});
    }

    # query params
    if ( exists $args{'send_notification_to_old_thread'}) {
        $query_params->{'send_notification_to_old_thread'} = $self->{api_client}->to_query_value($args{'send_notification_to_old_thread'});
    }

    # query params
    if ( exists $args{'send_notification_to_new_thread'}) {
        $query_params->{'send_notification_to_new_thread'} = $self->{api_client}->to_query_value($args{'send_notification_to_new_thread'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    # query params
    if ( exists $args{'stream_id'}) {
        $query_params->{'stream_id'} = $self->{api_client}->to_query_value($args{'stream_id'});
    }

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "message_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_message_flags
#
# Update personal message flags
# 
# @param ARRAY[int] $messages An array containing the IDs of the target messages.  (required)
# @param string $op Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it.  (required)
# @param string $flag The flag that should be added/removed.  (required)
{
    my $params = {
    'messages' => {
        data_type => 'ARRAY[int]',
        description => 'An array containing the IDs of the target messages. ',
        required => '1',
    },
    'op' => {
        data_type => 'string',
        description => 'Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it. ',
        required => '1',
    },
    'flag' => {
        data_type => 'string',
        description => 'The flag that should be added/removed. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_message_flags' } = { 
        summary => 'Update personal message flags',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub update_message_flags {
    my ($self, %args) = @_;

    # verify the required parameter 'messages' is set
    unless (exists $args{'messages'}) {
      croak("Missing the required parameter 'messages' when calling update_message_flags");
    }

    # verify the required parameter 'op' is set
    unless (exists $args{'op'}) {
      croak("Missing the required parameter 'op' when calling update_message_flags");
    }

    # verify the required parameter 'flag' is set
    unless (exists $args{'flag'}) {
      croak("Missing the required parameter 'flag' when calling update_message_flags");
    }

    # parse inputs
    my $_resource_path = '/messages/flags';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'messages'}) {
        $query_params->{'messages'} = $self->{api_client}->to_query_value($args{'messages'});
    }

    # query params
    if ( exists $args{'op'}) {
        $query_params->{'op'} = $self->{api_client}->to_query_value($args{'op'});
    }

    # query params
    if ( exists $args{'flag'}) {
        $query_params->{'flag'} = $self->{api_client}->to_query_value($args{'flag'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# upload_file
#
# Upload a file
# 
# @param string $filename  (optional)
{
    my $params = {
    'filename' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'upload_file' } = { 
        summary => 'Upload a file',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub upload_file {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/user_uploads';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # form params
    if ( exists $args{'filename'} ) {
        $form_params->{'filename'} = [] unless defined $form_params->{'filename'};
        push @{$form_params->{'filename'}}, $args{'filename'};
            }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

1;
