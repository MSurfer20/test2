=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::StreamsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# archive_stream
#
# Archive a stream
# 
# @param int $stream_id The ID of the stream to access.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'archive_stream' } = { 
        summary => 'Archive a stream',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub archive_stream {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling archive_stream");
    }

    # parse inputs
    my $_resource_path = '/streams/{stream_id}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# create_big_blue_button_video_call
#
# Create BigBlueButton video call
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'create_big_blue_button_video_call' } = { 
        summary => 'Create BigBlueButton video call',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub create_big_blue_button_video_call {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/calls/bigbluebutton/create';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# delete_topic
#
# Delete a topic
# 
# @param int $stream_id The ID of the stream to access.  (required)
# @param string $topic_name The name of the topic to delete.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    'topic_name' => {
        data_type => 'string',
        description => 'The name of the topic to delete. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_topic' } = { 
        summary => 'Delete a topic',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub delete_topic {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling delete_topic");
    }

    # verify the required parameter 'topic_name' is set
    unless (exists $args{'topic_name'}) {
      croak("Missing the required parameter 'topic_name' when calling delete_topic");
    }

    # parse inputs
    my $_resource_path = '/streams/{stream_id}/delete_topic';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'topic_name'}) {
        $query_params->{'topic_name'} = $self->{api_client}->to_query_value($args{'topic_name'});
    }

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# get_stream_id
#
# Get stream ID
# 
# @param string $stream The name of the stream to access.  (required)
{
    my $params = {
    'stream' => {
        data_type => 'string',
        description => 'The name of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_stream_id' } = { 
        summary => 'Get stream ID',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_stream_id {
    my ($self, %args) = @_;

    # verify the required parameter 'stream' is set
    unless (exists $args{'stream'}) {
      croak("Missing the required parameter 'stream' when calling get_stream_id");
    }

    # parse inputs
    my $_resource_path = '/get_stream_id';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'stream'}) {
        $query_params->{'stream'} = $self->{api_client}->to_query_value($args{'stream'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_stream_topics
#
# Get topics in a stream
# 
# @param int $stream_id The ID of the stream to access.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_stream_topics' } = { 
        summary => 'Get topics in a stream',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_stream_topics {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling get_stream_topics");
    }

    # parse inputs
    my $_resource_path = '/users/me/{stream_id}/topics';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_streams
#
# Get all streams
# 
# @param boolean $include_public Include all public streams.  (optional, default to true)
# @param boolean $include_web_public Include all web public streams.  (optional, default to false)
# @param boolean $include_subscribed Include all streams that the user is subscribed to.  (optional, default to true)
# @param boolean $include_all_active Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
# @param boolean $include_default Include all default streams for the user&#39;s realm.  (optional, default to false)
# @param boolean $include_owner_subscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
{
    my $params = {
    'include_public' => {
        data_type => 'boolean',
        description => 'Include all public streams. ',
        required => '0',
    },
    'include_web_public' => {
        data_type => 'boolean',
        description => 'Include all web public streams. ',
        required => '0',
    },
    'include_subscribed' => {
        data_type => 'boolean',
        description => 'Include all streams that the user is subscribed to. ',
        required => '0',
    },
    'include_all_active' => {
        data_type => 'boolean',
        description => 'Include all active streams. The user must have administrative privileges to use this parameter. ',
        required => '0',
    },
    'include_default' => {
        data_type => 'boolean',
        description => 'Include all default streams for the user&#39;s realm. ',
        required => '0',
    },
    'include_owner_subscribed' => {
        data_type => 'boolean',
        description => 'If the user is a bot, include all streams that the bot&#39;s owner is subscribed to. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_streams' } = { 
        summary => 'Get all streams',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_streams {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/streams';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_public'}) {
        $query_params->{'include_public'} = $self->{api_client}->to_query_value($args{'include_public'});
    }

    # query params
    if ( exists $args{'include_web_public'}) {
        $query_params->{'include_web_public'} = $self->{api_client}->to_query_value($args{'include_web_public'});
    }

    # query params
    if ( exists $args{'include_subscribed'}) {
        $query_params->{'include_subscribed'} = $self->{api_client}->to_query_value($args{'include_subscribed'});
    }

    # query params
    if ( exists $args{'include_all_active'}) {
        $query_params->{'include_all_active'} = $self->{api_client}->to_query_value($args{'include_all_active'});
    }

    # query params
    if ( exists $args{'include_default'}) {
        $query_params->{'include_default'} = $self->{api_client}->to_query_value($args{'include_default'});
    }

    # query params
    if ( exists $args{'include_owner_subscribed'}) {
        $query_params->{'include_owner_subscribed'} = $self->{api_client}->to_query_value($args{'include_owner_subscribed'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_subscribers
#
# Get the subscribers of a stream
# 
# @param int $stream_id The ID of the stream to access.  (required)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subscribers' } = { 
        summary => 'Get the subscribers of a stream',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_subscribers {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling get_subscribers");
    }

    # parse inputs
    my $_resource_path = '/streams/{stream_id}/members';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_subscription_status
#
# Get subscription status
# 
# @param int $user_id The target user&#39;s ID.  (required)
# @param int $stream_id The ID of the stream to access.  (required)
{
    my $params = {
    'user_id' => {
        data_type => 'int',
        description => 'The target user&#39;s ID. ',
        required => '1',
    },
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subscription_status' } = { 
        summary => 'Get subscription status',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_subscription_status {
    my ($self, %args) = @_;

    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling get_subscription_status");
    }

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling get_subscription_status");
    }

    # parse inputs
    my $_resource_path = '/users/{user_id}/subscriptions/{stream_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user_id'}) {
        my $_base_variable = "{" . "user_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# get_subscriptions
#
# Get subscribed streams
# 
# @param boolean $include_subscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
{
    my $params = {
    'include_subscribers' => {
        data_type => 'boolean',
        description => 'Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_subscriptions' } = { 
        summary => 'Get subscribed streams',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub get_subscriptions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/me/subscriptions';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_subscribers'}) {
        $query_params->{'include_subscribers'} = $self->{api_client}->to_query_value($args{'include_subscribers'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# mute_topic
#
# Topic muting
# 
# @param string $topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  (required)
# @param string $op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  (required)
# @param string $stream The name of the stream to access.  (optional)
# @param int $stream_id The ID of the stream to access.  (optional)
{
    my $params = {
    'topic' => {
        data_type => 'string',
        description => 'The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. ',
        required => '1',
    },
    'op' => {
        data_type => 'string',
        description => 'Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. ',
        required => '1',
    },
    'stream' => {
        data_type => 'string',
        description => 'The name of the stream to access. ',
        required => '0',
    },
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mute_topic' } = { 
        summary => 'Topic muting',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub mute_topic {
    my ($self, %args) = @_;

    # verify the required parameter 'topic' is set
    unless (exists $args{'topic'}) {
      croak("Missing the required parameter 'topic' when calling mute_topic");
    }

    # verify the required parameter 'op' is set
    unless (exists $args{'op'}) {
      croak("Missing the required parameter 'op' when calling mute_topic");
    }

    # parse inputs
    my $_resource_path = '/users/me/subscriptions/muted_topics';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'stream'}) {
        $query_params->{'stream'} = $self->{api_client}->to_query_value($args{'stream'});
    }

    # query params
    if ( exists $args{'stream_id'}) {
        $query_params->{'stream_id'} = $self->{api_client}->to_query_value($args{'stream_id'});
    }

    # query params
    if ( exists $args{'topic'}) {
        $query_params->{'topic'} = $self->{api_client}->to_query_value($args{'topic'});
    }

    # query params
    if ( exists $args{'op'}) {
        $query_params->{'op'} = $self->{api_client}->to_query_value($args{'op'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# subscribe
#
# Subscribe to a stream
# 
# @param ARRAY[object] $subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  (required)
# @param ARRAY[OneOfstringinteger] $principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
# @param boolean $authorization_errors_fatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
# @param boolean $announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
# @param boolean $invite_only As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
# @param boolean $history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
# @param int $stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
# @param OneOfstringinteger $message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
{
    my $params = {
    'subscriptions' => {
        data_type => 'ARRAY[object]',
        description => 'A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. ',
        required => '1',
    },
    'principals' => {
        data_type => 'ARRAY[OneOfstringinteger]',
        description => 'A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). ',
        required => '0',
    },
    'authorization_errors_fatal' => {
        data_type => 'boolean',
        description => 'A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. ',
        required => '0',
    },
    'announce' => {
        data_type => 'boolean',
        description => 'If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation. ',
        required => '0',
    },
    'invite_only' => {
        data_type => 'boolean',
        description => 'As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. ',
        required => '0',
    },
    'history_public_to_subscribers' => {
        data_type => 'boolean',
        description => 'Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. ',
        required => '0',
    },
    'stream_post_policy' => {
        data_type => 'int',
        description => 'Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. ',
        required => '0',
    },
    'message_retention_days' => {
        data_type => 'OneOfstringinteger',
        description => 'Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'subscribe' } = { 
        summary => 'Subscribe to a stream',
        params => $params,
        returns => 'OneOfobjectobject',
        };
}
# @return OneOfobjectobject
#
sub subscribe {
    my ($self, %args) = @_;

    # verify the required parameter 'subscriptions' is set
    unless (exists $args{'subscriptions'}) {
      croak("Missing the required parameter 'subscriptions' when calling subscribe");
    }

    # parse inputs
    my $_resource_path = '/users/me/subscriptions';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subscriptions'}) {
        $query_params->{'subscriptions'} = $self->{api_client}->to_query_value($args{'subscriptions'});
    }

    # query params
    if ( exists $args{'principals'}) {
        $query_params->{'principals'} = $self->{api_client}->to_query_value($args{'principals'});
    }

    # query params
    if ( exists $args{'authorization_errors_fatal'}) {
        $query_params->{'authorization_errors_fatal'} = $self->{api_client}->to_query_value($args{'authorization_errors_fatal'});
    }

    # query params
    if ( exists $args{'announce'}) {
        $query_params->{'announce'} = $self->{api_client}->to_query_value($args{'announce'});
    }

    # query params
    if ( exists $args{'invite_only'}) {
        $query_params->{'invite_only'} = $self->{api_client}->to_query_value($args{'invite_only'});
    }

    # query params
    if ( exists $args{'history_public_to_subscribers'}) {
        $query_params->{'history_public_to_subscribers'} = $self->{api_client}->to_query_value($args{'history_public_to_subscribers'});
    }

    # query params
    if ( exists $args{'stream_post_policy'}) {
        $query_params->{'stream_post_policy'} = $self->{api_client}->to_query_value($args{'stream_post_policy'});
    }

    # query params
    if ( exists $args{'message_retention_days'}) {
        $query_params->{'message_retention_days'} = $self->{api_client}->to_query_value($args{'message_retention_days'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OneOfobjectobject', $response);
    return $_response_object;
}

#
# unsubscribe
#
# Unsubscribe from a stream
# 
# @param ARRAY[string] $subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  (required)
# @param ARRAY[OneOfstringinteger] $principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
{
    my $params = {
    'subscriptions' => {
        data_type => 'ARRAY[string]',
        description => 'A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. ',
        required => '1',
    },
    'principals' => {
        data_type => 'ARRAY[OneOfstringinteger]',
        description => 'A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'unsubscribe' } = { 
        summary => 'Unsubscribe from a stream',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub unsubscribe {
    my ($self, %args) = @_;

    # verify the required parameter 'subscriptions' is set
    unless (exists $args{'subscriptions'}) {
      croak("Missing the required parameter 'subscriptions' when calling unsubscribe");
    }

    # parse inputs
    my $_resource_path = '/users/me/subscriptions';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subscriptions'}) {
        $query_params->{'subscriptions'} = $self->{api_client}->to_query_value($args{'subscriptions'});
    }

    # query params
    if ( exists $args{'principals'}) {
        $query_params->{'principals'} = $self->{api_client}->to_query_value($args{'principals'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# update_stream
#
# Update a stream
# 
# @param int $stream_id The ID of the stream to access.  (required)
# @param string $description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
# @param string $new_name The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
# @param boolean $is_private Change whether the stream is a private stream.  (optional)
# @param boolean $is_announcement_only Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
# @param int $stream_post_policy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
# @param boolean $history_public_to_subscribers Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
# @param OneOfstringinteger $message_retention_days Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
{
    my $params = {
    'stream_id' => {
        data_type => 'int',
        description => 'The ID of the stream to access. ',
        required => '1',
    },
    'description' => {
        data_type => 'string',
        description => 'The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). ',
        required => '0',
    },
    'new_name' => {
        data_type => 'string',
        description => 'The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). ',
        required => '0',
    },
    'is_private' => {
        data_type => 'boolean',
        description => 'Change whether the stream is a private stream. ',
        required => '0',
    },
    'is_announcement_only' => {
        data_type => 'boolean',
        description => 'Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. ',
        required => '0',
    },
    'stream_post_policy' => {
        data_type => 'int',
        description => 'Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. ',
        required => '0',
    },
    'history_public_to_subscribers' => {
        data_type => 'boolean',
        description => 'Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. ',
        required => '0',
    },
    'message_retention_days' => {
        data_type => 'OneOfstringinteger',
        description => 'Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_stream' } = { 
        summary => 'Update a stream',
        params => $params,
        returns => 'JsonSuccess',
        };
}
# @return JsonSuccess
#
sub update_stream {
    my ($self, %args) = @_;

    # verify the required parameter 'stream_id' is set
    unless (exists $args{'stream_id'}) {
      croak("Missing the required parameter 'stream_id' when calling update_stream");
    }

    # parse inputs
    my $_resource_path = '/streams/{stream_id}';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'new_name'}) {
        $query_params->{'new_name'} = $self->{api_client}->to_query_value($args{'new_name'});
    }

    # query params
    if ( exists $args{'is_private'}) {
        $query_params->{'is_private'} = $self->{api_client}->to_query_value($args{'is_private'});
    }

    # query params
    if ( exists $args{'is_announcement_only'}) {
        $query_params->{'is_announcement_only'} = $self->{api_client}->to_query_value($args{'is_announcement_only'});
    }

    # query params
    if ( exists $args{'stream_post_policy'}) {
        $query_params->{'stream_post_policy'} = $self->{api_client}->to_query_value($args{'stream_post_policy'});
    }

    # query params
    if ( exists $args{'history_public_to_subscribers'}) {
        $query_params->{'history_public_to_subscribers'} = $self->{api_client}->to_query_value($args{'history_public_to_subscribers'});
    }

    # query params
    if ( exists $args{'message_retention_days'}) {
        $query_params->{'message_retention_days'} = $self->{api_client}->to_query_value($args{'message_retention_days'});
    }

    # path params
    if ( exists $args{'stream_id'}) {
        my $_base_variable = "{" . "stream_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'stream_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccess', $response);
    return $_response_object;
}

#
# update_subscription_settings
#
# Update subscription settings
# 
# @param ARRAY[object] $subscription_data A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  (required)
{
    my $params = {
    'subscription_data' => {
        data_type => 'ARRAY[object]',
        description => 'A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. ',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_subscription_settings' } = { 
        summary => 'Update subscription settings',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub update_subscription_settings {
    my ($self, %args) = @_;

    # verify the required parameter 'subscription_data' is set
    unless (exists $args{'subscription_data'}) {
      croak("Missing the required parameter 'subscription_data' when calling update_subscription_settings");
    }

    # parse inputs
    my $_resource_path = '/users/me/subscriptions/properties';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'subscription_data'}) {
        $query_params->{'subscription_data'} = $self->{api_client}->to_query_value($args{'subscription_data'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

#
# update_subscriptions
#
# Update subscriptions
# 
# @param ARRAY[string] $delete A list of stream names to unsubscribe from.  (optional)
# @param ARRAY[object] $add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional)
{
    my $params = {
    'delete' => {
        data_type => 'ARRAY[string]',
        description => 'A list of stream names to unsubscribe from. ',
        required => '0',
    },
    'add' => {
        data_type => 'ARRAY[object]',
        description => 'A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. ',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'update_subscriptions' } = { 
        summary => 'Update subscriptions',
        params => $params,
        returns => 'JsonSuccessBase',
        };
}
# @return JsonSuccessBase
#
sub update_subscriptions {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/users/me/subscriptions';

    my $_method = 'PATCH';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'delete'}) {
        $query_params->{'delete'} = $self->{api_client}->to_query_value($args{'delete'});
    }

    # query params
    if ( exists $args{'add'}) {
        $query_params->{'add'} = $self->{api_client}->to_query_value($args{'add'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('JsonSuccessBase', $response);
    return $_response_object;
}

1;
