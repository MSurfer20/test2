=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::MessagesBase;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::EmojiReaction;
use WWW::OpenAPIClient::Object::MessagesBaseTopicLinks;
use WWW::OpenAPIClient::Object::OneOfstringarray;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Object containing details of the message. 
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'Object containing details of the message. ',
                                  class => 'MessagesBase',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'avatar_url' => {
        datatype => 'string',
        base_name => 'avatar_url',
        description => 'The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user&#39;s email address itself for this user. ',
        format => '',
        read_only => '',
            },
    'client' => {
        datatype => 'string',
        base_name => 'client',
        description => 'A Zulip \&quot;client\&quot; string, describing what Zulip client sent the message. ',
        format => '',
        read_only => '',
            },
    'content' => {
        datatype => 'string',
        base_name => 'content',
        description => 'The content/body of the message. ',
        format => '',
        read_only => '',
            },
    'content_type' => {
        datatype => 'string',
        base_name => 'content_type',
        description => 'The HTTP &#x60;content_type&#x60; for the message content.  This will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on whether &#x60;apply_markdown&#x60; was set. ',
        format => '',
        read_only => '',
            },
    'display_recipient' => {
        datatype => 'OneOfstringarray',
        base_name => 'display_recipient',
        description => 'Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. ',
        format => '',
        read_only => '',
            },
    'id' => {
        datatype => 'int',
        base_name => 'id',
        description => 'The unique message ID.  Messages should always be displayed sorted by ID. ',
        format => '',
        read_only => '',
            },
    'is_me_message' => {
        datatype => 'boolean',
        base_name => 'is_me_message',
        description => 'Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages ',
        format => '',
        read_only => '',
            },
    'reactions' => {
        datatype => 'ARRAY[EmojiReaction]',
        base_name => 'reactions',
        description => 'Data on any reactions to the message. ',
        format => '',
        read_only => '',
            },
    'recipient_id' => {
        datatype => 'int',
        base_name => 'recipient_id',
        description => 'A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. ',
        format => '',
        read_only => '',
            },
    'sender_email' => {
        datatype => 'string',
        base_name => 'sender_email',
        description => 'The Zulip display email address of the message&#39;s sender. ',
        format => '',
        read_only => '',
            },
    'sender_full_name' => {
        datatype => 'string',
        base_name => 'sender_full_name',
        description => 'The full name of the message&#39;s sender. ',
        format => '',
        read_only => '',
            },
    'sender_id' => {
        datatype => 'int',
        base_name => 'sender_id',
        description => 'The user ID of the message&#39;s sender. ',
        format => '',
        read_only => '',
            },
    'sender_realm_str' => {
        datatype => 'string',
        base_name => 'sender_realm_str',
        description => 'A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;. ',
        format => '',
        read_only => '',
            },
    'stream_id' => {
        datatype => 'int',
        base_name => 'stream_id',
        description => 'Only present for stream messages; the ID of the stream. ',
        format => '',
        read_only => '',
            },
    'subject' => {
        datatype => 'string',
        base_name => 'subject',
        description => 'The &#x60;topic&#x60; of the message.  Currently always &#x60;\&quot;\&quot;&#x60; for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \&quot;subjects\&quot; and will eventually change. ',
        format => '',
        read_only => '',
            },
    'topic_links' => {
        datatype => 'ARRAY[MessagesBaseTopicLinks]',
        base_name => 'topic_links',
        description => 'Data on any links to be included in the &#x60;topic&#x60; line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message&#39;s topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called &#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60; if present for compatibility with older Zulip servers. ',
        format => '',
        read_only => '',
            },
    'submessages' => {
        datatype => 'ARRAY[string]',
        base_name => 'submessages',
        description => 'Data used for certain experimental Zulip integrations. ',
        format => '',
        read_only => '',
            },
    'timestamp' => {
        datatype => 'int',
        base_name => 'timestamp',
        description => 'The UNIX timestamp for when the message was sent, in UTC seconds. ',
        format => '',
        read_only => '',
            },
    'type' => {
        datatype => 'string',
        base_name => 'type',
        description => 'The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;. ',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'avatar_url' => 'string',
    'client' => 'string',
    'content' => 'string',
    'content_type' => 'string',
    'display_recipient' => 'OneOfstringarray',
    'id' => 'int',
    'is_me_message' => 'boolean',
    'reactions' => 'ARRAY[EmojiReaction]',
    'recipient_id' => 'int',
    'sender_email' => 'string',
    'sender_full_name' => 'string',
    'sender_id' => 'int',
    'sender_realm_str' => 'string',
    'stream_id' => 'int',
    'subject' => 'string',
    'topic_links' => 'ARRAY[MessagesBaseTopicLinks]',
    'submessages' => 'ARRAY[string]',
    'timestamp' => 'int',
    'type' => 'string'
} );

__PACKAGE__->attribute_map( {
    'avatar_url' => 'avatar_url',
    'client' => 'client',
    'content' => 'content',
    'content_type' => 'content_type',
    'display_recipient' => 'display_recipient',
    'id' => 'id',
    'is_me_message' => 'is_me_message',
    'reactions' => 'reactions',
    'recipient_id' => 'recipient_id',
    'sender_email' => 'sender_email',
    'sender_full_name' => 'sender_full_name',
    'sender_id' => 'sender_id',
    'sender_realm_str' => 'sender_realm_str',
    'stream_id' => 'stream_id',
    'subject' => 'subject',
    'topic_links' => 'topic_links',
    'submessages' => 'submessages',
    'timestamp' => 'timestamp',
    'type' => 'type'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
