=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::UserBase;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#A dictionary containing basic data on a given Zulip user. 
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Zulip REST API

Powerful open source group chat 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {}); 
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new { 
    my ($class, %args) = @_; 

    my $self = bless {}, $class;

    $self->init(%args);
    
    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON { 
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            $_data->{$self->attribute_map->{$_key}} = $self->{$_key};
        }
    }

    return $_data;
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key}; 
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }
  
    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if ($type eq 'DateTime') {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double', 'string', 'boolean'))) {
        return $data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}



__PACKAGE__->class_documentation({description => 'A dictionary containing basic data on a given Zulip user. ',
                                  class => 'UserBase',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'email' => {
        datatype => 'string',
        base_name => 'email',
        description => 'The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. ',
        format => '',
        read_only => '',
            },
    'is_bot' => {
        datatype => 'boolean',
        base_name => 'is_bot',
        description => 'A boolean specifying whether the user is a bot or full account. ',
        format => '',
        read_only => '',
            },
    'avatar_url' => {
        datatype => 'string',
        base_name => 'avatar_url',
        description => 'URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. ',
        format => '',
        read_only => '',
            },
    'avatar_version' => {
        datatype => 'int',
        base_name => 'avatar_version',
        description => 'Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. ',
        format => '',
        read_only => '',
            },
    'full_name' => {
        datatype => 'string',
        base_name => 'full_name',
        description => 'Full name of the user or bot, used for all display purposes. ',
        format => '',
        read_only => '',
            },
    'is_admin' => {
        datatype => 'boolean',
        base_name => 'is_admin',
        description => 'A boolean specifying whether the user is an organization administrator. ',
        format => '',
        read_only => '',
            },
    'is_owner' => {
        datatype => 'boolean',
        base_name => 'is_owner',
        description => 'A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). ',
        format => '',
        read_only => '',
            },
    'is_billing_admin' => {
        datatype => 'boolean',
        base_name => 'is_billing_admin',
        description => 'A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). ',
        format => '',
        read_only => '',
            },
    'role' => {
        datatype => 'int',
        base_name => 'role',
        description => '[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). ',
        format => '',
        read_only => '',
            },
    'bot_type' => {
        datatype => 'int',
        base_name => 'bot_type',
        description => 'An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. ',
        format => '',
        read_only => '',
            },
    'user_id' => {
        datatype => 'int',
        base_name => 'user_id',
        description => 'The unique ID of the user. ',
        format => '',
        read_only => '',
            },
    'bot_owner_id' => {
        datatype => 'int',
        base_name => 'bot_owner_id',
        description => 'If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. ',
        format => '',
        read_only => '',
            },
    'is_active' => {
        datatype => 'boolean',
        base_name => 'is_active',
        description => 'A boolean specifying whether the user account has been deactivated. ',
        format => '',
        read_only => '',
            },
    'is_guest' => {
        datatype => 'boolean',
        base_name => 'is_guest',
        description => 'A boolean specifying whether the user is a guest user. ',
        format => '',
        read_only => '',
            },
    'timezone' => {
        datatype => 'string',
        base_name => 'timezone',
        description => 'The time zone of the user. ',
        format => '',
        read_only => '',
            },
    'date_joined' => {
        datatype => 'string',
        base_name => 'date_joined',
        description => 'The time the user account was created. ',
        format => '',
        read_only => '',
            },
    'delivery_email' => {
        datatype => 'string',
        base_name => 'delivery_email',
        description => 'The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. ',
        format => '',
        read_only => '',
            },
    'profile_data' => {
        datatype => 'HASH[string,object]',
        base_name => 'profile_data',
        description => 'A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. ',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'email' => 'string',
    'is_bot' => 'boolean',
    'avatar_url' => 'string',
    'avatar_version' => 'int',
    'full_name' => 'string',
    'is_admin' => 'boolean',
    'is_owner' => 'boolean',
    'is_billing_admin' => 'boolean',
    'role' => 'int',
    'bot_type' => 'int',
    'user_id' => 'int',
    'bot_owner_id' => 'int',
    'is_active' => 'boolean',
    'is_guest' => 'boolean',
    'timezone' => 'string',
    'date_joined' => 'string',
    'delivery_email' => 'string',
    'profile_data' => 'HASH[string,object]'
} );

__PACKAGE__->attribute_map( {
    'email' => 'email',
    'is_bot' => 'is_bot',
    'avatar_url' => 'avatar_url',
    'avatar_version' => 'avatar_version',
    'full_name' => 'full_name',
    'is_admin' => 'is_admin',
    'is_owner' => 'is_owner',
    'is_billing_admin' => 'is_billing_admin',
    'role' => 'role',
    'bot_type' => 'bot_type',
    'user_id' => 'user_id',
    'bot_owner_id' => 'bot_owner_id',
    'is_active' => 'is_active',
    'is_guest' => 'is_guest',
    'timezone' => 'timezone',
    'date_joined' => 'date_joined',
    'delivery_email' => 'delivery_email',
    'profile_data' => 'profile_data'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
