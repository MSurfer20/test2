# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RealmDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain=None, allow_subdomains=None):  # noqa: E501
        """RealmDomain - a model defined in OpenAPI

        :param domain: The domain of this RealmDomain.  # noqa: E501
        :type domain: str
        :param allow_subdomains: The allow_subdomains of this RealmDomain.  # noqa: E501
        :type allow_subdomains: bool
        """
        self.openapi_types = {
            'domain': str,
            'allow_subdomains': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'allow_subdomains': 'allow_subdomains'
        }

        self._domain = domain
        self._allow_subdomains = allow_subdomains

    @classmethod
    def from_dict(cls, dikt) -> 'RealmDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RealmDomain of this RealmDomain.  # noqa: E501
        :rtype: RealmDomain
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this RealmDomain.

        The new allowed domain.   # noqa: E501

        :return: The domain of this RealmDomain.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RealmDomain.

        The new allowed domain.   # noqa: E501

        :param domain: The domain of this RealmDomain.
        :type domain: str
        """

        self._domain = domain

    @property
    def allow_subdomains(self):
        """Gets the allow_subdomains of this RealmDomain.

        Whether subdomains are allowed for this domain.   # noqa: E501

        :return: The allow_subdomains of this RealmDomain.
        :rtype: bool
        """
        return self._allow_subdomains

    @allow_subdomains.setter
    def allow_subdomains(self, allow_subdomains):
        """Sets the allow_subdomains of this RealmDomain.

        Whether subdomains are allowed for this domain.   # noqa: E501

        :param allow_subdomains: The allow_subdomains of this RealmDomain.
        :type allow_subdomains: bool
        """

        self._allow_subdomains = allow_subdomains
