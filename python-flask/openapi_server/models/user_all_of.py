# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email=None, is_bot=None, avatar_url=None, avatar_version=None, full_name=None, is_admin=None, is_owner=None, is_billing_admin=None, role=None, bot_type=None, user_id=None, bot_owner_id=None, is_active=None, is_guest=None, timezone=None, date_joined=None, delivery_email=None, profile_data=None):  # noqa: E501
        """UserAllOf - a model defined in OpenAPI

        :param email: The email of this UserAllOf.  # noqa: E501
        :type email: object
        :param is_bot: The is_bot of this UserAllOf.  # noqa: E501
        :type is_bot: object
        :param avatar_url: The avatar_url of this UserAllOf.  # noqa: E501
        :type avatar_url: object
        :param avatar_version: The avatar_version of this UserAllOf.  # noqa: E501
        :type avatar_version: object
        :param full_name: The full_name of this UserAllOf.  # noqa: E501
        :type full_name: object
        :param is_admin: The is_admin of this UserAllOf.  # noqa: E501
        :type is_admin: object
        :param is_owner: The is_owner of this UserAllOf.  # noqa: E501
        :type is_owner: object
        :param is_billing_admin: The is_billing_admin of this UserAllOf.  # noqa: E501
        :type is_billing_admin: object
        :param role: The role of this UserAllOf.  # noqa: E501
        :type role: object
        :param bot_type: The bot_type of this UserAllOf.  # noqa: E501
        :type bot_type: object
        :param user_id: The user_id of this UserAllOf.  # noqa: E501
        :type user_id: object
        :param bot_owner_id: The bot_owner_id of this UserAllOf.  # noqa: E501
        :type bot_owner_id: object
        :param is_active: The is_active of this UserAllOf.  # noqa: E501
        :type is_active: object
        :param is_guest: The is_guest of this UserAllOf.  # noqa: E501
        :type is_guest: object
        :param timezone: The timezone of this UserAllOf.  # noqa: E501
        :type timezone: object
        :param date_joined: The date_joined of this UserAllOf.  # noqa: E501
        :type date_joined: object
        :param delivery_email: The delivery_email of this UserAllOf.  # noqa: E501
        :type delivery_email: object
        :param profile_data: The profile_data of this UserAllOf.  # noqa: E501
        :type profile_data: object
        """
        self.openapi_types = {
            'email': object,
            'is_bot': object,
            'avatar_url': object,
            'avatar_version': object,
            'full_name': object,
            'is_admin': object,
            'is_owner': object,
            'is_billing_admin': object,
            'role': object,
            'bot_type': object,
            'user_id': object,
            'bot_owner_id': object,
            'is_active': object,
            'is_guest': object,
            'timezone': object,
            'date_joined': object,
            'delivery_email': object,
            'profile_data': object
        }

        self.attribute_map = {
            'email': 'email',
            'is_bot': 'is_bot',
            'avatar_url': 'avatar_url',
            'avatar_version': 'avatar_version',
            'full_name': 'full_name',
            'is_admin': 'is_admin',
            'is_owner': 'is_owner',
            'is_billing_admin': 'is_billing_admin',
            'role': 'role',
            'bot_type': 'bot_type',
            'user_id': 'user_id',
            'bot_owner_id': 'bot_owner_id',
            'is_active': 'is_active',
            'is_guest': 'is_guest',
            'timezone': 'timezone',
            'date_joined': 'date_joined',
            'delivery_email': 'delivery_email',
            'profile_data': 'profile_data'
        }

        self._email = email
        self._is_bot = is_bot
        self._avatar_url = avatar_url
        self._avatar_version = avatar_version
        self._full_name = full_name
        self._is_admin = is_admin
        self._is_owner = is_owner
        self._is_billing_admin = is_billing_admin
        self._role = role
        self._bot_type = bot_type
        self._user_id = user_id
        self._bot_owner_id = bot_owner_id
        self._is_active = is_active
        self._is_guest = is_guest
        self._timezone = timezone
        self._date_joined = date_joined
        self._delivery_email = delivery_email
        self._profile_data = profile_data

    @classmethod
    def from_dict(cls, dikt) -> 'UserAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User_allOf of this UserAllOf.  # noqa: E501
        :rtype: UserAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserAllOf.


        :return: The email of this UserAllOf.
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserAllOf.


        :param email: The email of this UserAllOf.
        :type email: object
        """

        self._email = email

    @property
    def is_bot(self):
        """Gets the is_bot of this UserAllOf.


        :return: The is_bot of this UserAllOf.
        :rtype: object
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this UserAllOf.


        :param is_bot: The is_bot of this UserAllOf.
        :type is_bot: object
        """

        self._is_bot = is_bot

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserAllOf.


        :return: The avatar_url of this UserAllOf.
        :rtype: object
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserAllOf.


        :param avatar_url: The avatar_url of this UserAllOf.
        :type avatar_url: object
        """

        self._avatar_url = avatar_url

    @property
    def avatar_version(self):
        """Gets the avatar_version of this UserAllOf.


        :return: The avatar_version of this UserAllOf.
        :rtype: object
        """
        return self._avatar_version

    @avatar_version.setter
    def avatar_version(self, avatar_version):
        """Sets the avatar_version of this UserAllOf.


        :param avatar_version: The avatar_version of this UserAllOf.
        :type avatar_version: object
        """

        self._avatar_version = avatar_version

    @property
    def full_name(self):
        """Gets the full_name of this UserAllOf.


        :return: The full_name of this UserAllOf.
        :rtype: object
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserAllOf.


        :param full_name: The full_name of this UserAllOf.
        :type full_name: object
        """

        self._full_name = full_name

    @property
    def is_admin(self):
        """Gets the is_admin of this UserAllOf.


        :return: The is_admin of this UserAllOf.
        :rtype: object
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserAllOf.


        :param is_admin: The is_admin of this UserAllOf.
        :type is_admin: object
        """

        self._is_admin = is_admin

    @property
    def is_owner(self):
        """Gets the is_owner of this UserAllOf.


        :return: The is_owner of this UserAllOf.
        :rtype: object
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this UserAllOf.


        :param is_owner: The is_owner of this UserAllOf.
        :type is_owner: object
        """

        self._is_owner = is_owner

    @property
    def is_billing_admin(self):
        """Gets the is_billing_admin of this UserAllOf.


        :return: The is_billing_admin of this UserAllOf.
        :rtype: object
        """
        return self._is_billing_admin

    @is_billing_admin.setter
    def is_billing_admin(self, is_billing_admin):
        """Sets the is_billing_admin of this UserAllOf.


        :param is_billing_admin: The is_billing_admin of this UserAllOf.
        :type is_billing_admin: object
        """

        self._is_billing_admin = is_billing_admin

    @property
    def role(self):
        """Gets the role of this UserAllOf.


        :return: The role of this UserAllOf.
        :rtype: object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserAllOf.


        :param role: The role of this UserAllOf.
        :type role: object
        """

        self._role = role

    @property
    def bot_type(self):
        """Gets the bot_type of this UserAllOf.


        :return: The bot_type of this UserAllOf.
        :rtype: object
        """
        return self._bot_type

    @bot_type.setter
    def bot_type(self, bot_type):
        """Sets the bot_type of this UserAllOf.


        :param bot_type: The bot_type of this UserAllOf.
        :type bot_type: object
        """

        self._bot_type = bot_type

    @property
    def user_id(self):
        """Gets the user_id of this UserAllOf.


        :return: The user_id of this UserAllOf.
        :rtype: object
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserAllOf.


        :param user_id: The user_id of this UserAllOf.
        :type user_id: object
        """

        self._user_id = user_id

    @property
    def bot_owner_id(self):
        """Gets the bot_owner_id of this UserAllOf.


        :return: The bot_owner_id of this UserAllOf.
        :rtype: object
        """
        return self._bot_owner_id

    @bot_owner_id.setter
    def bot_owner_id(self, bot_owner_id):
        """Sets the bot_owner_id of this UserAllOf.


        :param bot_owner_id: The bot_owner_id of this UserAllOf.
        :type bot_owner_id: object
        """

        self._bot_owner_id = bot_owner_id

    @property
    def is_active(self):
        """Gets the is_active of this UserAllOf.


        :return: The is_active of this UserAllOf.
        :rtype: object
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserAllOf.


        :param is_active: The is_active of this UserAllOf.
        :type is_active: object
        """

        self._is_active = is_active

    @property
    def is_guest(self):
        """Gets the is_guest of this UserAllOf.


        :return: The is_guest of this UserAllOf.
        :rtype: object
        """
        return self._is_guest

    @is_guest.setter
    def is_guest(self, is_guest):
        """Sets the is_guest of this UserAllOf.


        :param is_guest: The is_guest of this UserAllOf.
        :type is_guest: object
        """

        self._is_guest = is_guest

    @property
    def timezone(self):
        """Gets the timezone of this UserAllOf.


        :return: The timezone of this UserAllOf.
        :rtype: object
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserAllOf.


        :param timezone: The timezone of this UserAllOf.
        :type timezone: object
        """

        self._timezone = timezone

    @property
    def date_joined(self):
        """Gets the date_joined of this UserAllOf.


        :return: The date_joined of this UserAllOf.
        :rtype: object
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this UserAllOf.


        :param date_joined: The date_joined of this UserAllOf.
        :type date_joined: object
        """

        self._date_joined = date_joined

    @property
    def delivery_email(self):
        """Gets the delivery_email of this UserAllOf.


        :return: The delivery_email of this UserAllOf.
        :rtype: object
        """
        return self._delivery_email

    @delivery_email.setter
    def delivery_email(self, delivery_email):
        """Sets the delivery_email of this UserAllOf.


        :param delivery_email: The delivery_email of this UserAllOf.
        :type delivery_email: object
        """

        self._delivery_email = delivery_email

    @property
    def profile_data(self):
        """Gets the profile_data of this UserAllOf.


        :return: The profile_data of this UserAllOf.
        :rtype: object
        """
        return self._profile_data

    @profile_data.setter
    def profile_data(self, profile_data):
        """Sets the profile_data of this UserAllOf.


        :param profile_data: The profile_data of this UserAllOf.
        :type profile_data: object
        """

        self._profile_data = profile_data
