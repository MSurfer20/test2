# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class CustomProfileField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, order=None, name=None, hint=None, field_data=None):  # noqa: E501
        """CustomProfileField - a model defined in OpenAPI

        :param id: The id of this CustomProfileField.  # noqa: E501
        :type id: int
        :param type: The type of this CustomProfileField.  # noqa: E501
        :type type: int
        :param order: The order of this CustomProfileField.  # noqa: E501
        :type order: int
        :param name: The name of this CustomProfileField.  # noqa: E501
        :type name: str
        :param hint: The hint of this CustomProfileField.  # noqa: E501
        :type hint: str
        :param field_data: The field_data of this CustomProfileField.  # noqa: E501
        :type field_data: str
        """
        self.openapi_types = {
            'id': int,
            'type': int,
            'order': int,
            'name': str,
            'hint': str,
            'field_data': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'order': 'order',
            'name': 'name',
            'hint': 'hint',
            'field_data': 'field_data'
        }

        self._id = id
        self._type = type
        self._order = order
        self._name = name
        self._hint = hint
        self._field_data = field_data

    @classmethod
    def from_dict(cls, dikt) -> 'CustomProfileField':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomProfileField of this CustomProfileField.  # noqa: E501
        :rtype: CustomProfileField
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CustomProfileField.

        The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.   # noqa: E501

        :return: The id of this CustomProfileField.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomProfileField.

        The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.   # noqa: E501

        :param id: The id of this CustomProfileField.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CustomProfileField.

        An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account   # noqa: E501

        :return: The type of this CustomProfileField.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomProfileField.

        An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account   # noqa: E501

        :param type: The type of this CustomProfileField.
        :type type: int
        """

        self._type = type

    @property
    def order(self):
        """Gets the order of this CustomProfileField.

        Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.   # noqa: E501

        :return: The order of this CustomProfileField.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CustomProfileField.

        Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.   # noqa: E501

        :param order: The order of this CustomProfileField.
        :type order: int
        """

        self._order = order

    @property
    def name(self):
        """Gets the name of this CustomProfileField.

        The name of the custom profile field.   # noqa: E501

        :return: The name of this CustomProfileField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomProfileField.

        The name of the custom profile field.   # noqa: E501

        :param name: The name of this CustomProfileField.
        :type name: str
        """

        self._name = name

    @property
    def hint(self):
        """Gets the hint of this CustomProfileField.

        The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.   # noqa: E501

        :return: The hint of this CustomProfileField.
        :rtype: str
        """
        return self._hint

    @hint.setter
    def hint(self, hint):
        """Sets the hint of this CustomProfileField.

        The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.   # noqa: E501

        :param hint: The hint of this CustomProfileField.
        :type hint: str
        """

        self._hint = hint

    @property
    def field_data(self):
        """Gets the field_data of this CustomProfileField.

        Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.   # noqa: E501

        :return: The field_data of this CustomProfileField.
        :rtype: str
        """
        return self._field_data

    @field_data.setter
    def field_data(self, field_data):
        """Sets the field_data of this CustomProfileField.

        Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.   # noqa: E501

        :param field_data: The field_data of this CustomProfileField.
        :type field_data: str
        """

        self._field_data = field_data
