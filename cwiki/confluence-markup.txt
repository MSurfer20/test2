h1. Zulip REST API

Powerful open source group chat

*Version:* 1.0.0

----

{expand:Table of Contents - Click to expand}
{toc:printable=true|style=square|minLevel=2|maxLevel=3|type=list|outline=false|include=.*}
{expand}

h2. Endpoints


h3. devFetchApiKey
{panel:title=devFetchApiKey|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Fetch an API key (development only)
    *Description:* For easy testing of mobile apps and other clients and against Zulip
development servers, we support fetching a Zulip API key for any user
on the development server without authentication (so that they can
implement analogues of the one-click login process available for Zulip
development servers on the web).

**Note:** This endpoint is only available on Zulip development
servers; for obvious security reasons it will always return an error
in a Zulip production server.

&#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/dev_fetch_api_key{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |username |The email address for the user that owns the API key. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | ApiKeyResponse |
    	|| Response Model | [ApiKeyResponse Model|#ApiKeyResponseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ApiKeyResponse"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. fetchApiKey
{panel:title=fetchApiKey|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Fetch an API key (production)
    *Description:* This API endpoint is used by clients such as the Zulip mobile and
terminal apps to implement password-based authentication.  Given the
user&#39;s Zulip login credentials, it returns a Zulip API key that the client
can use to make requests requests as the user.

This endpoint is only useful for Zulip servers/organizations with
EmailAuthBackend or LDAPAuthBackend enabled.

The Zulip mobile apps also support SSO/social authentication (GitHub
auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead,
the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in
a webview, and the credentials are returned to the app (encrypted) via a redirect
to a &#x60;zulip://&#x60; URL.

!!! warn &quot;&quot;
    **Note:** If you signed up using passwordless authentication and
    never had a password, you can [reset your password](/help/change-your-password).

    See the [API keys](/api/api-keys) documentation for
    more details on how to download API key manually.

In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html),
see also [the unauthenticated variant](/api/dev-fetch-api-key).

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/fetch_api_key{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |username |The username to be used for authentication (typically, the email
address, but depending on configuration, it could be an LDAP username).

See the &#x60;require_email_format_usernames&#x60; parameter documented in
[GET /server_settings](/api/get-server-settings) for details. | String | (/) |null |  |  ||password |The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Valid credentials the client can use to access the Zulip API. |
    	|| Response Type | ApiKeyResponse |
    	|| Response Model | [ApiKeyResponse Model|#ApiKeyResponseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Valid credentials the client can use to access the Zulip API.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ApiKeyResponse"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. createDrafts
{panel:title=createDrafts|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Create drafts
    *Description:* Create one or more drafts on the server. These drafts will be automatically
synchronized to other clients via &#x60;drafts&#x60; events.

&#x60;POST {{ api_url }}/v1/drafts&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/drafts{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |drafts |A JSON-encoded list of containing new draft objects. | array[Draft] | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "type" : "object",
          "properties" : {
            "ids" : {
              "type" : "array",
              "description" : "An array of the IDs for the drafts that were just created in the same\norder as they were submitted.\n",
              "items" : {
                "type" : "integer"
              }
            }
          },
          "additionalProperties" : false,
          "description" : "When all of the drafts in the request are valid, this endpoint will return\nan array of the IDs for the drafts that were just created in the same\norder as they were requested. If any of the drafts failed the validation\nstep, then none of the drafts will be created and we would not get this\nstatus code.\n",
          "example" : {
            "result" : "success",
            "msg" : "",
            "ids" : [ 1, 2, 3 ]
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "JSON response for when a draft targeted towards a stream does not specify\nexactly one stream ID.\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Must specify exactly 1 stream ID for stream messages",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deleteDraft
{panel:title=deleteDraft|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Delete a draft
    *Description:* Delete a single draft from the server. The deletion will be automatically
synchronized to other clients via a &#x60;drafts&#x60; event.

&#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/drafts/{draft_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |draft_id |The ID of the draft you want to delete. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=404|subtle=false} |
    	|| Message | Not Found. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Not Found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "JSON response for when no draft exists with the provided ID.\n",
          "example" : {
            "result" : "error",
            "msg" : "Draft does not exist"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. editDraft
{panel:title=editDraft|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Edit a draft
    *Description:* Edit a draft on the server. The edit will be automatically
synchronized to other clients via &#x60;drafts&#x60; events.

&#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/drafts/{draft_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |draft_id |The ID of the draft to be edited. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |draft |A JSON-encoded object containing a replacement draft object for this ID. | Draft | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=404|subtle=false} |
    	|| Message | Not Found. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Not Found.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "JSON response for when no draft exists with the provided ID.\n",
          "example" : {
            "result" : "error",
            "msg" : "Draft does not exist"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getDrafts
{panel:title=getDrafts|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get drafts
    *Description:* Fetch all drafts for the current user.

&#x60;GET {{ api_url }}/v1/drafts&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/drafts{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "count" : {
              "type" : "integer",
              "description" : "The number of drafts the user currently has. Also the\nnumber of drafts returned under \"drafts\".\n",
              "example" : 3
            },
            "drafts" : {
              "type" : "array",
              "description" : "Returns all of the current user's drafts, in order of last edit time\n(with the most recently edited draft appearing first).\n",
              "items" : {
                "$ref" : "#/components/schemas/Draft"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "count" : 3,
            "drafts" : [ {
              "id" : 1,
              "type" : "stream",
              "to" : [ 3 ],
              "topic" : "sync drafts",
              "content" : "Let's add backend support for syncing drafts.",
              "timestamp" : 1.59547901943915E9
            }, {
              "id" : 2,
              "type" : "private",
              "to" : [ 4 ],
              "topic" : "",
              "content" : "What if we made it possible to sync drafts in Zulip?",
              "timestamp" : 1.59547902043916E9
            }, {
              "id" : 3,
              "type" : "private",
              "to" : [ 4, 10 ],
              "topic" : "",
              "content" : "What if we made it possible to sync drafts in Zulip?",
              "timestamp" : 1.59547902143916E9
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. addReaction
{panel:title=addReaction|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Add an emoji reaction
    *Description:* Add an [emoji reaction](/help/emoji-reactions) to a message.

&#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}/reactions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |emoji_name |The target emoji&#39;s human-readable name.

To find an emoji&#39;s name, hover over a message to reveal
three icons on the right, then click the smiley face icon.
Images of available reaction emojis appear. Hover over the
emoji you want, and note that emoji&#39;s text name. | String | (/) |null |  |  ||emoji_code |A unique identifier, defining the specific emoji codepoint requested,
within the namespace of the &#x60;reaction_type&#x60;.

For most API clients, you won&#39;t need this, but it&#39;s important
for Zulip apps to handle rare corner cases when
adding/removing votes on an emoji reaction added previously by
another user.

If the existing reaction was added when the Zulip server was
using a previous version of the emoji data mapping between
Unicode codepoints and human-readable names, sending the
&#x60;emoji_code&#x60; in the data for the original reaction allows the
Zulip server to correctly interpret your upvote as an upvote
rather than a reaction with a &quot;diffenent&quot; emoji. | String | (x) |null |  |  ||reaction_type |If an app is adding/removing a vote on an existing reaction,
it should pass this parameter using the value the server provided
for the existing reaction for specificity.  Supported values:

* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint).
* &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID).
* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to
   namespace the &#x60;zulip&#x60; emoji.

**Changes**: In Zulip 3.0 (feature level 2), this become
optional for [custom emoji](/help/add-custom-emoji);
previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this
parameter was not specified. | String | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON error response for when the emoji code is invalid",
          "example" : {
            "result" : "error",
            "msg" : "Invalid emoji code",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. checkMessagesMatchNarrow
{panel:title=checkMessagesMatchNarrow|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Check if messages match a narrow
    *Description:* Check whether a set of messages match a [narrow](/api/construct-narrow).

&#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;

For many common narrows (E.g. a topic), clients can write an
efficient client-side check to determine whether a
newly arrived message belongs in the view.

This endpoint is designed to allow clients to handle more complex narrows
for which the client does not (or in the case of full-text search,
cannot) implement this check.

The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match
those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a
&#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message
object identical to how a &#x60;GET /messages&#x60; for the current narrow would have
returned the message.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/matches_narrow{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |msg_ids |List of IDs for the messages to check. | array[Integer] | (/) |null |  |  ||narrow |A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). | array[Object] | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | oas_any_type_not_mapped |
    	|| Response Model | [oas_any_type_not_mapped Model|#oas_any_type_not_mappedModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "messages" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "match_content" : {
                    "type" : "string",
                    "description" : "HTML content of a queried message that matches the narrow.  If the\nnarrow is a search narrow, `<span class=\"highlight\">` elements\nwill be included, wrapping the matches for the search keywords.\n"
                  },
                  "match_subject" : {
                    "type" : "string",
                    "description" : "HTML-escaped topic of a queried message that matches the narrow.  If the\nnarrow is a search narrow, `<span class=\"highlight\">` elements\nwill be included wrapping the matches for the search keywords.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`message_id`: The ID of the message that matches the narrow.  No record will be returned\nfor queried messages that do not match the narrow.\n"
              },
              "description" : "A dictionary with a key for each queried message that matches the narrow,\nwith message IDs as keys and search rendering data as values.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "messages" : {
              "31" : {
                "match_content" : "<p><a href=\"http://foo.com\" target=\"_blank\" title=\"http://foo.com\">http://foo.com</a></p>",
                "match_subject" : "test_topic"
              }
            }
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deleteMessage
{panel:title=deleteMessage|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Delete a message
    *Description:* Permanently delete a message.

&#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;

This API corresponds to the
[delete a message completely][delete-completely] feature documented in
the Zulip Help Center.

[delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/InvalidMessageError"
          }, {
            "description" : "An example JSON response for when the specified message does not exist"
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON response for when the user making the query does not\nhave permission to delete the message\n",
            "example" : {
              "code" : "BAD_REQUEST",
              "msg" : "You don't have permission to delete this message",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getFileTemporaryUrl
{panel:title=getFileTemporaryUrl|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get public temporary URL
    *Description:* Get a temporary URL for access to the file that doesn&#39;t require authentication.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_uploads/{realm_id_str}/{filename}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |realm_id_str |The realm id. | Integer | (/) |null |  |  ||filename |Path to the URL. | String | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "url" : {
              "type" : "string",
              "description" : "A temporary URL that can be used to access the uploaded file\nwithout Zulip's normal API authentication.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "url" : "/user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getMessageHistory
{panel:title=getMessageHistory|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get a message&#39;s edit history
    *Description:* Fetch the message edit history of a previously edited message.

&#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;

Note that edit history may be disabled in some organizations; see the
[Zulip Help Center documentation on editing messages][edit-settings].

[edit-settings]: /help/view-a-messages-edit-history

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}/history{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "message_history" : {
              "type" : "array",
              "description" : "A chronologically sorted array of `snapshot`\nobjects, each one with the values of the\nmessage after the edit.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "description" : "the topic for the message.\n"
                  },
                  "prev_topic" : {
                    "type" : "string",
                    "description" : "the topic for the message before being edited.\n"
                  },
                  "content" : {
                    "type" : "string",
                    "description" : "the body of the message.\n"
                  },
                  "rendered_content" : {
                    "type" : "string",
                    "description" : "the already rendered, HTML version of `content`.\n"
                  },
                  "prev_content" : {
                    "type" : "string",
                    "description" : "the body of the message before being edited.\n"
                  },
                  "prev_rendered_content" : {
                    "type" : "string",
                    "description" : "the already rendered, HTML version of\n`prev_content`.\n"
                  },
                  "user_id" : {
                    "type" : "integer",
                    "description" : "the ID of the user that made the edit.\n"
                  },
                  "content_html_diff" : {
                    "type" : "string",
                    "description" : "an HTML diff between this version of the message\nand the previous one.\n"
                  },
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "the UNIX timestamp for this edit.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "message_history" : [ {
              "content" : "Hello!",
              "topic" : "party at my houz",
              "rendered_content" : "<p>Hello!</p>",
              "timestamp" : 1530129122,
              "user_id" : 5
            }, {
              "topic" : "party at my house",
              "content" : "Howdy!",
              "prev_content" : "Hello!",
              "rendered_content" : "<p>Howdy!</p>",
              "user_id" : 5,
              "prev_rendered_content" : "<p>Hello!</p>",
              "content_html_diff" : "<div><p><span class=\"highlight_text_inserted\">Howdy!</span></p> <p><span class=\"highlight_text_deleted\">Hello!</span></p></div>",
              "prev_topic" : "party at my houz",
              "timestamp" : 1530129134
            } ],
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | InvalidMessageError |
    	|| Response Model | [InvalidMessageError Model|#InvalidMessageErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InvalidMessageError"
        }, {
          "description" : "An example JSON response for when the specified message does not exist"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getMessages
{panel:title=getMessages|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get messages
    *Description:* Fetch message history from a Zulip server.

&#x60;GET {{ api_url }}/v1/messages&#x60;

This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch
message history from a Zulip server.  It is useful both for Zulip
clients (e.g. the web, desktop, mobile, and terminal clients) as well
as bots, API clients, backup scripts, etc.

By specifying a [narrow filter](/api/construct-narrow), you can use
this endpoint to fetch the messages matching any search query that is
supported by Zulip&#39;s powerful full-text search backend.

When a narrow is not specified, it can be used to fetch a user&#39;s
message history. (We recommend paginating to 1000 messages at a time.)

In either case, you specify an &#x60;anchor&#x60; message (or ask the server to
calculate the first unread message for you and use that as the
anchor), as well as a number of messages before and after the anchor
message.  The server returns those messages, sorted by message ID, as
well as some metadata that makes it easy for a client to determine
whether there are more messages matching the query that were not
returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.

We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to
avoid generating very large HTTP responses. A maximum of 5000 messages
can be obtained per request; attempting to exceed this will result in an
error.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |anchor |Integer message ID to anchor fetching of new messages. Supports special
string values for when the client wants the server to compute the anchor
to use:

* &#x60;newest&#x60;: The most recent message.
* &#x60;oldest&#x60;: The oldest message.
* &#x60;first_unread&#x60;: The oldest unread message matching the
  query, if any; otherwise, the most recent message.

The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported
for anchoring the query at the most recent or oldest messages.

**Changes**: String values are new in Zulip 3.0 (feature level 1).  The
  &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x
  and older by not sending anchor and using use_first_unread_anchor.

  In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with
  &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;
  (that specific large value works around a bug in Zulip
  2.1.x and older in the &#x60;found_newest&#x60; return value). | oneOf&lt;string,integer&gt; | (x) |null |  |  ||num_before |The number of messages with IDs less than the anchor to retrieve. | Integer | (/) |null |  |  ||num_after |The number of messages with IDs greater than the anchor to retrieve. | Integer | (/) |null |  |  ||narrow |The narrow where you want to fetch the messages from. See how to
[construct a narrow](/api/construct-narrow). | array[Object] | (x) |[] |  |  ||client_gravatar |Whether the client supports computing gravatars URLs.  If
enabled, &#x60;avatar_url&#x60; will be included in the response only
if there is a Zulip avatar, and will be &#x60;null&#x60; for users who
are using gravatar as their avatar.  This option
significantly reduces the compressed size of user data,
since gravatar URLs are long, random strings and thus do not
compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if
clients can compute their own gravatars. | Boolean | (x) |false |  |  ||apply_markdown |If &#x60;true&#x60;, message content is returned in the rendered HTML
format. If &#x60;false&#x60;, message content is returned in the raw
Markdown-format text that user entered. | Boolean | (x) |true |  |  ||use_first_unread_anchor |Legacy way to specify &#x60;anchor&#x3D;&quot;first_unread&quot;&#x60; in Zulip 2.1.x and older.

Whether to use the (computed by the server) first unread message
matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.

**Changes**: Deprecated in Zulip 3.0, replaced by
&#x60;anchor&#x3D;&quot;first_unread&quot;&#x60; instead. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "anchor" : {
              "type" : "integer",
              "description" : "The same `anchor` specified in the request (or the computed one, if\n`use_first_unread_anchor` is `true`).\n"
            },
            "found_newest" : {
              "type" : "boolean",
              "description" : "Whether the `messages` list includes the very newest messages matching\nthe narrow (used by clients that paginate their requests to decide\nwhether there are more messages to fetch).\n"
            },
            "found_oldest" : {
              "type" : "boolean",
              "description" : "Whether the `messages` list includes the very oldest messages matching\nthe narrow (used by clients that paginate their requests to decide\nwhether there are more messages to fetch).\n"
            },
            "found_anchor" : {
              "type" : "boolean",
              "description" : "Whether the anchor message is included in the\nresponse. If the message with the ID specified\nin the request does not exist or did not match\nthe narrow, this will be false.\n"
            },
            "history_limited" : {
              "type" : "boolean",
              "description" : "Whether the message history was limited due to\nplan restrictions. This flag is set to `true`\nonly when the oldest messages(`found_oldest`)\nmatching the narrow is fetched.\n"
            },
            "messages" : {
              "type" : "array",
              "description" : "an array of `message` objects, each containing the following\nfields:\n",
              "items" : {
                "$ref" : "#/components/schemas/GetMessages"
              }
            }
          },
          "additionalProperties" : false,
          "description" : "When a request is successful, this endpoint returns a dictionary\ncontaining the following (in addition to the `msg` and `result` keys\npresent in all Zulip API responses).\nA typical successful JSON response may look like\n",
          "example" : {
            "anchor" : 21,
            "found_newest" : true,
            "found_anchor" : true,
            "result" : "success",
            "msg" : "",
            "messages" : [ {
              "subject" : "",
              "sender_realm_str" : "zulip",
              "type" : "private",
              "content" : "<p>Security experts agree that relational algorithms are an interesting new topic in the field of networking, and scholars concur.</p>",
              "flags" : [ "read" ],
              "id" : 16,
              "display_recipient" : [ {
                "id" : 4,
                "is_mirror_dummy" : false,
                "email" : "hamlet@zulip.com",
                "full_name" : "King Hamlet"
              }, {
                "id" : 5,
                "is_mirror_dummy" : false,
                "email" : "iago@zulip.com",
                "full_name" : "Iago"
              }, {
                "id" : 8,
                "is_mirror_dummy" : false,
                "email" : "prospero@zulip.com",
                "full_name" : "Prospero from The Tempest"
              } ],
              "content_type" : "text/html",
              "is_me_message" : false,
              "timestamp" : 1527921326,
              "sender_id" : 4,
              "sender_full_name" : "King Hamlet",
              "recipient_id" : 27,
              "topic_links" : [ ],
              "client" : "populate_db",
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "submessages" : [ ],
              "sender_email" : "hamlet@zulip.com",
              "reactions" : [ ]
            }, {
              "subject" : "Verona3",
              "stream_id" : 5,
              "sender_realm_str" : "zulip",
              "type" : "stream",
              "content" : "<p>Wait, is this from the frontend js code or backend python code</p>",
              "flags" : [ "read" ],
              "id" : 21,
              "display_recipient" : "Verona",
              "content_type" : "text/html",
              "is_me_message" : false,
              "timestamp" : 1527939746,
              "sender_id" : 4,
              "sender_full_name" : "King Hamlet",
              "recipient_id" : 20,
              "topic_links" : [ ],
              "client" : "populate_db",
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "submessages" : [ ],
              "sender_email" : "hamlet@zulip.com",
              "reactions" : [ ]
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getRawMessage
{panel:title=getRawMessage|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get a message&#39;s raw Markdown
    *Description:* Get the raw content of a message.

&#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;

This is a rarely-used endpoint relevant for clients that primarily
work with HTML-rendered messages but might need to occasionally fetch
the message&#39;s raw Markdown (e.g. for pre-filling a message-editing
UI).

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "raw_content" : {
              "type" : "string",
              "description" : "The raw content of the message.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "raw_content" : "**Don't** forget your towel!",
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | InvalidMessageError |
    	|| Response Model | [InvalidMessageError Model|#InvalidMessageErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InvalidMessageError"
        }, {
          "description" : "An example JSON response for when the specified message does not exist or it\nis not visible to the user making the query (e.g. it was a PM between other\ntwo users)\n"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. markAllAsRead
{panel:title=markAllAsRead|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Mark all messages as read
    *Description:* Marks all of the current user&#39;s unread messages as read.

&#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/mark_all_as_read{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. markStreamAsRead
{panel:title=markStreamAsRead|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Mark messages in a stream as read
    *Description:* Mark all the unread messages in a stream as read.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/mark_stream_as_read{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. markTopicAsRead
{panel:title=markTopicAsRead|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Mark messages in a topic as read
    *Description:* Mark all the unread messages in a topic as read.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/mark_topic_as_read{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  ||topic_name |The name of the topic whose messages should be marked as read. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. removeReaction
{panel:title=removeReaction|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Remove an emoji reaction
    *Description:* Remove an [emoji reaction](/help/emoji-reactions) from a message.

&#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}/reactions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |emoji_name |The target emoji&#39;s human-readable name.

To find an emoji&#39;s name, hover over a message to reveal
three icons on the right, then click the smiley face icon.
Images of available reaction emojis appear. Hover over the
emoji you want, and note that emoji&#39;s text name. | String | (x) |null |  |  ||emoji_code |A unique identifier, defining the specific emoji codepoint requested,
within the namespace of the &#x60;reaction_type&#x60;.

For most API clients, you won&#39;t need this, but it&#39;s important
for Zulip apps to handle rare corner cases when
adding/removing votes on an emoji reaction added previously by
another user.

If the existing reaction was added when the Zulip server was
using a previous version of the emoji data mapping between
Unicode codepoints and human-readable names, sending the
&#x60;emoji_code&#x60; in the data for the original reaction allows the
Zulip server to correctly interpret your upvote as an upvote
rather than a reaction with a &quot;diffenent&quot; emoji. | String | (x) |null |  |  ||reaction_type |If an app is adding/removing a vote on an existing reaction,
it should pass this parameter using the value the server provided
for the existing reaction for specificity.  Supported values:

* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint).
* &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID).
* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to
   namespace the &#x60;zulip&#x60; emoji.

**Changes**: In Zulip 3.0 (feature level 2), this become
optional for [custom emoji](/help/add-custom-emoji);
previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this
parameter was not specified. | String | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON error response for when the emoji code is invalid",
          "example" : {
            "result" : "error",
            "msg" : "Invalid message(s)",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. renderMessage
{panel:title=renderMessage|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Render message
    *Description:* Render a message to HTML.

&#x60;POST {{ api_url }}/v1/messages/render&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/render{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |content |The content of the message. Maximum message size of 10000 bytes. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "rendered" : {
              "type" : "string",
              "description" : "The rendered HTML.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "rendered" : "<p><strong>foo</strong></p>",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. sendMessage
{panel:title=sendMessage|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Send a message
    *Description:* Send a stream or a private message.

&#x60;POST {{ api_url }}/v1/messages&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |type |The type of message to be sent. &#x60;private&#x60; for a private message and
&#x60;stream&#x60; for a stream message. | String | (/) |null |  | [private, stream] ||to |For stream messages, either the name or integer ID of the stream. For
private messages, either a list containing integer user IDs or a list
containing string email addresses.

**Changes**: Support for using user/stream IDs was added in Zulip 2.0.0. | array[Integer] | (/) |null |  |  ||content |The content of the message. Maximum message size of 10000 bytes. | String | (/) |null |  |  ||topic |The topic of the message. Only required for stream messages
(&#x60;type&#x3D;&quot;stream&quot;&#x60;), ignored otherwise.

Maximum length of 60 characters.

**Changes**: New in Zulip 2.0.  Previous Zulip releases encoded
this as &#x60;subject&#x60;, which is currently a deprecated alias. | String | (x) |null |  |  ||queue_id |For clients supporting
[local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo),
the [event queue](/api/register-queue)
ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is
successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event
that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message
via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously
that it should replace the locally echoed message, rather than adding this new
message (which would be correct if the user had sent the new message from another
device). | String | (x) |null |  |  ||local_id |For clients supporting local echo, a unique string-format identifier
chosen freely by the client; the server will pass it back to the client without
inspecting it, as described in the &#x60;queue_id&#x60; description. | String | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The unique ID assigned to the sent message.\n"
            },
            "deliver_at" : {
              "type" : "string",
              "description" : "Present for scheduled messages, encodes the time when the message will\nbe sent.  Note that scheduled messages (\"Send later\") is a beta API and\nmay change before it's a finished feature.\n",
              "example" : "2020-06-24 11:19:54.337533+00:00"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "id" : 42,
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/NonExistingStreamError"
          }, {
            "description" : "A typical failed JSON response for when a stream message is sent to a stream\nthat does not exist\n"
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "A typical failed JSON response for when a private message is sent to a user\nthat does not exist\n",
            "example" : {
              "code" : "BAD_REQUEST",
              "msg" : "Invalid email 'eeshan@zulip.com'",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateMessage
{panel:title=updateMessage|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Edit a message
    *Description:* Edit/update the content or topic of a message.

&#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;

&#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the
message you wish you update.

You can [resolve topics](/help/resolve-a-topic) by editing the
topic to &#x60;✔ {original_topic}&#x60;.

**Note**: See [configuring message
editing][config-message-editing] for detailed documentation on
when users are allowed to edit topics.

[config-message-editing]: /help/configure-message-editing-and-deletion

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/{message_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |message_id |The target message&#39;s ID. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |topic |The topic to move the message(s) to, to request changing the topic.
Should only be sent when changing the topic, and will throw an error
if the target message is not a stream message.

Maximum length of 60 characters.

**Changes**: New in Zulip 2.0.  Previous Zulip releases encoded
this as &#x60;subject&#x60;, which is currently a deprecated alias. | String | (x) |null |  |  ||propagate_mode |Which message(s) should be edited: just the one indicated in
&#x60;message_id&#x60;, messages in the same topic that had been sent after this
one, or all of them.

Only the default value of &#x60;change_one&#x60; is valid when
editing only the content of a message.

This parameter determines both which messages get moved and also whether
clients that are currently narrowed to the topic containing the message
should navigate or adjust their compose box recipient to point to the
post-edit stream/topic. | String | (x) |change_one |  | [change_one, change_later, change_all] ||send_notification_to_old_thread |Whether to send breadcrumb message to the old thread to
notify users where the messages were moved to.

**Changes**: New in Zulip 3.0 (feature level 9). | Boolean | (x) |true |  |  ||send_notification_to_new_thread |Whether to send a notification message to the new thread to
notify users where the messages came from.

**Changes**: New in Zulip 3.0 (feature level 9). | Boolean | (x) |true |  |  ||content |The content of the message. Maximum message size of 10000 bytes. | String | (x) |null |  |  ||stream_id |The stream ID to move the message(s) to, to request moving
messages to another stream.

Should only be sent when changing the stream, and will throw an error
if the target message is not a stream message. | Integer | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "properties" : {
            "msg" : {
              "type" : "string",
              "enum" : [ "Your organization has turned off message editing", "You don't have permission to edit this message", "The time limit for editing this message has past", "Nothing to change", "Topic can't be empty" ]
            }
          },
          "description" : "A typical JSON response for when one doesn't have the permission to\nedit a particular message\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "You don't have permission to edit this message",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateMessageFlags
{panel:title=updateMessageFlags|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update personal message flags
    *Description:* Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60;
on a collection of message IDs.

&#x60;POST {{ api_url }}/v1/messages/flags&#x60;

For updating the &#x60;read&#x60; flag on common collections of messages, see also
the
[special endpoints for marking message as read in bulk](/api/mark-all-as-read).

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/messages/flags{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |messages |An array containing the IDs of the target messages. | array[Integer] | (/) |null |  |  ||op |Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it. | String | (/) |null |  | [add, remove] ||flag |The flag that should be added/removed. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "messages" : {
              "type" : "array",
              "description" : "An array with the IDs of the modified messages.\n",
              "items" : {
                "type" : "integer"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "messages" : [ 4, 18, 15 ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. uploadFile
{panel:title=uploadFile|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Upload a file
    *Description:* Upload a single file and get the corresponding URI.

&#x60;POST {{ api_url }}/v1/user_uploads&#x60;

Initially, only you will be able to access the link.  To share the
uploaded file, you&#39;ll need to [send a message][send-message]
containing the resulting link.  Users who can already access the link
can reshare it with other users by sending additional Zulip messages
containing the link.

[uploaded-files]: /help/manage-your-uploaded-files
[send-message]: /api/send-message

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_uploads{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "uri" : {
              "type" : "string",
              "description" : "The URI of the uploaded file.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "uri" : "/user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deleteQueue
{panel:title=deleteQueue|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Delete an event queue
    *Description:* Delete a previously registered queue.

&#x60;DELETE {{ api_url }}/v1/events&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/events{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |queue_id |The ID of an event queue that was previously registered via &#x60;POST
/api/v1/register&#x60; (see [Register a queue](/api/register-queue)). | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | BadEventQueueIdError |
    	|| Response Model | [BadEventQueueIdError Model|#BadEventQueueIdErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BadEventQueueIdError"
        }, {
          "description" : "A typical JSON response for when the `queue_id` is non-existent or the\nassociated queue has already been deleted\n"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getEvents
{panel:title=getEvents|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get events from an event queue
    *Description:* &#x60;GET {{ api_url }}/v1/events&#x60;

This endpoint allows you to receive new events from
[a registered event queue](/api/register-queue).

Long-lived clients should use the
&#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by
&#x60;POST /register&#x60; as the client-side HTTP request timeout for
calls to this endpoint.  It is guaranteed to be higher than
heartbeat frequency and should be respected by clients to
avoid breaking when heartbeat frequency increases.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/events{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |queue_id |The ID of an event queue that was previously registered via &#x60;POST
/api/v1/register&#x60; (see [Register a queue](/api/register-queue)). | String | (/) |null |  |  ||last_event_id |The highest event ID in this queue that you&#39;ve received and
wish to acknowledge. See the [code for
&#x60;call_on_each_event&#x60;](https://github.com/zulip/python-zulip-api/blob/master/zulip/zulip/__init__.py)
in the [zulip Python
module](https://github.com/zulip/python-zulip-api) for an
example implementation of correctly processing each event
exactly once. | Integer | (x) |null |  |  ||dont_block |Set to &#x60;true&#x60; if the client is requesting a nonblocking reply. If not
specified, the request will block until either a new event is available
or a few minutes have passed, in which case the server will send the
client a heartbeat event. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "events" : {
              "type" : "array",
              "description" : "An array of `event` objects (possibly zero-length if `dont_block` is\nset) with IDs newer than `last_event_id`. Event IDs are\nguaranteed to be increasing, but they are not guaranteed to be\nconsecutive.\n",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "alert_words" ]
                      } ]
                    },
                    "alert_words" : {
                      "type" : "array",
                      "description" : "Array of strings, each a configured alert word.\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of configured\n[alert words](/help/add-an-alert-word) have changed.\n",
                  "example" : {
                    "type" : "alert_words",
                    "alert_words" : [ "alert_word" ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_display_settings" ]
                      } ]
                    },
                    "setting_name" : {
                      "type" : "string",
                      "description" : "Name of the changed display setting.\n"
                    },
                    "setting" : {
                      "description" : "New value of the changed setting.\n",
                      "oneOf" : [ {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      }, {
                        "type" : "string"
                      } ]
                    },
                    "language_name" : {
                      "type" : "string",
                      "description" : "Present only if the setting to be changed is\n`default_language`. Contains the name of the\nnew default language in English.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to clients that that have requested the\n`update_display_settings` event type and did not include\n`user_settings_object` in their `client_capabilities` when\nregistering the event queue.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and process the `user_settings` event type instead.\n",
                  "example" : {
                    "type" : "update_display_settings",
                    "setting_name" : "high_contrast_mode",
                    "setting" : false,
                    "id" : 0
                  },
                  "deprecated" : true
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_global_notifications" ]
                      } ]
                    },
                    "notification_name" : {
                      "type" : "string",
                      "description" : "Name of the changed notification setting.\n"
                    },
                    "setting" : {
                      "description" : "New value of the changed setting.\n",
                      "oneOf" : [ {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      }, {
                        "type" : "string"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's [notification\nsettings](/api/update-settings) have changed with an additional\nrule that it is only sent to clients that did not include\n`user_settings_object` in their `client_capabilities` when\nregistering the event queue.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and process the `user_settings` event type instead.\n",
                  "example" : {
                    "type" : "update_global_notifications",
                    "notification_name" : "enable_sounds",
                    "setting" : true,
                    "id" : 0
                  },
                  "deprecated" : true
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_settings" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "Name of the changed setting.\n"
                    },
                    "value" : {
                      "description" : "New value of the changed setting.\n",
                      "oneOf" : [ {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      }, {
                        "type" : "string"
                      } ]
                    },
                    "language_name" : {
                      "type" : "string",
                      "description" : "Present only if the setting to be changed is\n`default_language`. Contains the name of the\nnew default language in English.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's settings\nhave changed.\n\n**Changes**: New in Zulip 5.0 (feature level 89), replacing the\nprevious `update_display_settings` and `update_global_notifications`\nevent types, which are still present for backwards compatibility reasons.\n",
                  "example" : {
                    "type" : "user_settings",
                    "op" : "update",
                    "property" : "high_contrast_mode",
                    "value" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "person" : {
                      "description" : "Object containing the changed details of the user.\nIt has multiple forms depending on the value changed.\n",
                      "oneOf" : [ {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of modified user.\n"
                          },
                          "full_name" : {
                            "type" : "string",
                            "description" : "The new full name for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their full name.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user who is affected by this change.\n"
                          },
                          "avatar_url" : {
                            "type" : "string",
                            "description" : "The URL of the new avatar for the user.\n"
                          },
                          "avatar_source" : {
                            "type" : "string",
                            "description" : "The new avatar data source type for the user.\n\nValue values are `G` (gravatar) and `U` (uploaded by user).\n"
                          },
                          "avatar_url_medium" : {
                            "type" : "string",
                            "description" : "The new medium-size avatar URL for user.\n"
                          },
                          "avatar_version" : {
                            "type" : "integer",
                            "description" : "The version number for the user's avatar.  This is useful\nfor cache-busting.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their avatar.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of modified user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The email of the user.\n\n**Deprecated**: This field will be removed in a future\nrelease as it is redundant with the `user_id`.\n",
                            "deprecated" : true
                          },
                          "timezone" : {
                            "type" : "string",
                            "description" : "The new timezone of the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their timezone setting.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user/bot whose owner has changed.\n"
                          },
                          "bot_owner_id" : {
                            "type" : "integer",
                            "description" : "The user id of the new bot owner.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the owner of a bot changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "role" : {
                            "type" : "integer",
                            "description" : "The new role of the user in integer.\n",
                            "enum" : [ 100, 200, 300, 400, 600 ]
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the role of a user changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "is_billing_admin" : {
                            "type" : "boolean",
                            "description" : "A boolean specifying whether the user is now a billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When billing role of a user changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "delivery_email" : {
                            "type" : "string",
                            "description" : "The new delivery email of the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the delivery email of a user changes.\n\nNote: This event is only visible to admins.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "custom_profile_field" : {
                            "type" : "object",
                            "properties" : {
                              "id" : {
                                "type" : "integer",
                                "description" : "The ID of the custom profile field which user updated.\n"
                              },
                              "value" : {
                                "type" : "string",
                                "description" : "User's personal value for this custom profile field.\n"
                              },
                              "rendered_value" : {
                                "type" : "string",
                                "description" : "The `value` rendered in HTML.  Will only be present for\ncustom profile field types that support Markdown rendering.\n\nThis user-generated HTML content should be rendered\nusing the same CSS and client-side security protections\nas are used for message content.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "Object containing details about the custom\nprofile data change.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the user updates one of their custom profile\nfields.\n"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent generally to all users in an organization for changes\nin the set of users or those users metadata.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "update",
                    "person" : {
                      "avatar_source" : "G",
                      "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=3",
                      "avatar_url_medium" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&s=500&version=3",
                      "avatar_version" : 3,
                      "user_id" : 10
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "subscriptions" : {
                      "type" : "array",
                      "description" : "A list of dictionaries where each dictionary contains\ninformation about one of the subscribed streams.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/Subscriptions"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's stream subscriptions\nhave changed (either the set of subscriptions or their properties).\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "add",
                    "subscriptions" : [ {
                      "name" : "test_stream",
                      "stream_id" : 9,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : false,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : true,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false,
                      "color" : "#76ce90",
                      "is_muted" : false,
                      "pin_to_top" : false,
                      "audible_notifications" : null,
                      "desktop_notifications" : null,
                      "email_notifications" : null,
                      "push_notifications" : null,
                      "wildcard_mentions_notify" : null,
                      "in_home_view" : true,
                      "email_address" : "test_stream.af64447e9e39374841063747ade8e6b0.show-sender@testserver",
                      "stream_weekly_traffic" : null,
                      "subscribers" : [ 10 ]
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "subscriptions" : {
                      "type" : "array",
                      "description" : "A list of dictionaries, where each dictionary contains\ninformation about one of the newly unsubscribed streams.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "stream_id" : {
                            "type" : "integer",
                            "description" : "The ID of the stream.\n"
                          },
                          "name" : {
                            "type" : "string",
                            "description" : "The name of the stream.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Dictionary containing details about the unsubscribed stream.\n"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user has been unsubscribed\nfrom one or more streams.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "remove",
                    "subscriptions" : [ {
                      "name" : "test_stream",
                      "stream_id" : 9
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "The ID of the stream whose subscription details have changed.\n"
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The property of the subscription which has changed. See\n[/users/me/subscriptions/properties GET](/api/update-subscription-settings)\nfor details on the various properties of a stream.\n\nClients should generally handle an unknown property received here without\ncrashing, since that will naturally happen when connecting to a Zulip\nserver running a new version that adds a new subscription property.\n"
                    },
                    "value" : {
                      "description" : "The new value of the changed property.\n",
                      "oneOf" : [ {
                        "type" : "integer"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "string"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when a property of the user's\nsubscription to a stream has been updated.  This event is used\nonly for personal properties like `is_muted`; see the `stream` event\nfor global properties of a stream.\n",
                  "example" : {
                    "op" : "update",
                    "type" : "subscription",
                    "property" : "pin_to_top",
                    "value" : true,
                    "stream_id" : 11,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "peer_add" ]
                    },
                    "stream_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the streams to which the user has subscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the users who subscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to other users when users have been subscribed to\nstreams. Sent to all users if the stream is public or to only\nthe existing subscribers if the stream is private.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "peer_add",
                    "stream_id" : 9,
                    "user_id" : 12,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "peer_remove" ]
                    },
                    "stream_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the streams from which the users have been\nunsubscribed from.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the users who have been unsubscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to other users when users have been unsubscribed\nfrom streams. Sent to all users if the stream is public or to only\nthe existing subscribers if the stream is private.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "peer_remove",
                    "stream_id" : 9,
                    "user_id" : 12,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "message" ]
                      } ]
                    },
                    "message" : {
                      "$ref" : "#/components/schemas/Messages"
                    },
                    "flags" : {
                      "type" : "array",
                      "description" : "The user's [message flags][message-flags] for the message.\n\nClients should inspect the flags field rather than assuming that\nnew messages are unread; [muted users](/api/mute-user), messages\nsent by the current user, and more subtle scenarios can result\nin a new message that the server has already marked as read for\nthe user.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event type for messages.\n",
                  "example" : {
                    "type" : "message",
                    "message" : {
                      "id" : 31,
                      "sender_id" : 10,
                      "content" : "<p>First message ...<a href=\"user_uploads/2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt\">zulip.txt</a></p>",
                      "recipient_id" : 23,
                      "timestamp" : 1594825416,
                      "client" : "test suite",
                      "subject" : "test",
                      "topic_links" : [ ],
                      "is_me_message" : false,
                      "reactions" : [ ],
                      "submessages" : [ ],
                      "sender_full_name" : "King Hamlet",
                      "sender_short_name" : "hamlet",
                      "sender_email" : "user10@zulip.testserver",
                      "sender_realm_str" : "zulip",
                      "display_recipient" : "Denmark",
                      "type" : "stream",
                      "stream_id" : 1,
                      "avatar_url" : null,
                      "content_type" : "text/html"
                    },
                    "flags" : [ ],
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "has_zoom_token" ]
                      } ]
                    },
                    "value" : {
                      "type" : "boolean",
                      "description" : "A boolean specifying whether the user has zoom\ntoken or not.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user completes the\nOAuth flow for the [Zoom integration](/help/start-a-call).  Clients need\nto know whether initiating Zoom OAuth is required before creating a Zoom call.\n",
                  "example" : {
                    "type" : "has_zoom_token",
                    "value" : true,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "invites_changed" ]
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "A simple event sent to organization administrators when the\nset of invitations changes; this tells clients they need to refetch\ndata from `GET /invites` if they are displaying UI containing active\ninvitations.\n",
                  "example" : {
                    "type" : "invites_changed",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "person" : {
                      "$ref" : "#/components/schemas/User"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when a new\nuser joins.  Processing this event is important to being able\nto display basic details on other users given only their ID.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "add",
                    "person" : {
                      "email" : "foo@zulip.com",
                      "user_id" : 38,
                      "avatar_version" : 1,
                      "is_admin" : false,
                      "is_owner" : false,
                      "is_guest" : false,
                      "is_billing_admin" : false,
                      "role" : 400,
                      "is_bot" : false,
                      "full_name" : "full name",
                      "timezone" : "",
                      "is_active" : true,
                      "date_joined" : "2020-07-15T15:04:02.030833+00:00",
                      "avatar_url" : "https://secure.gravatar.com/avatar/c6b5578d4964bd9c5fae593c6868912a?d=identicon&version=1",
                      "profile_data" : { }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "person" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The ID of the deactivated user.\n"
                        },
                        "full_name" : {
                          "type" : "string",
                          "description" : "The full name of the user.\n\n**Deprecated**: We expect to remove this field in the future.\n",
                          "deprecated" : true
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details of the deactivated user.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when\na user is deactivated.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "remove",
                    "person" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "presence" ]
                      } ]
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of modified user.\n"
                    },
                    "email" : {
                      "type" : "string",
                      "description" : "The email of the user.\n\n**Deprecated**: This field will be removed in a future\nrelease as it is redundant with the `user_id`.\n",
                      "deprecated" : true
                    },
                    "server_timestamp" : {
                      "type" : "number",
                      "description" : "The timestamp of when the Zulip server received the user's\npresence as a UNIX timestamp.\n"
                    },
                    "presence" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "$ref" : "#/components/schemas/Presence"
                      },
                      "description" : "An object contatining a set of objects which describe the\nthe user's presence on various platforms.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in an organization when a user comes\nback online after being long offline.  While most presence updates happen\ndone via polling the main presence endpoint, this event is important\nto avoid confusing users when someone comes online and then immediately sends\na message (one wouldn't want them to still appear offline at that point!).\n",
                  "example" : {
                    "type" : "presence",
                    "user_id" : 10,
                    "email" : "user10@zulip.testserver",
                    "server_timestamp" : 1.5948254453200784E9,
                    "presence" : {
                      "ZulipAndroid/1.0" : {
                        "client" : "ZulipAndroid/1.0",
                        "status" : "idle",
                        "timestamp" : 1594825445,
                        "pushable" : false
                      }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "create" ]
                    },
                    "streams" : {
                      "type" : "array",
                      "description" : "Array of stream objects, each containing\ndetails about the newly added stream(s).\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a new stream is created to users who can see\nthe new stream exists (for private streams, only subscribers and\norganization administrators will receive this event).\n\nNote that organization administrators who are not subscribed will\nnot be able to see content on the stream; just that it exists.\n",
                  "example" : {
                    "type" : "stream",
                    "op" : "create",
                    "streams" : [ {
                      "name" : "private",
                      "stream_id" : 12,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : true,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : false,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "delete" ]
                    },
                    "streams" : {
                      "type" : "array",
                      "description" : "Array of stream objects, each contatining\ndetails about a stream that was deleted.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users who can see a stream when it is deactivated.\n",
                  "example" : {
                    "type" : "stream",
                    "op" : "delete",
                    "streams" : [ {
                      "name" : "private",
                      "stream_id" : 12,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : true,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : false,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "The ID of the stream whose details have changed.\n"
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "The name of the stream whose details have changed.\n"
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The property of the stream which has changed. See\n[/stream GET](/api/get-streams) for details on the various\nproperties of a stream.\n\nClients should handle an \"unknown\" property received here without\ncrashing, since that can happen when connecting to a server running a\nnewer version of Zulip with new features.\n"
                    },
                    "value" : {
                      "description" : "The new value of the changed property.\n",
                      "oneOf" : [ {
                        "type" : "integer"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "string"
                      } ]
                    },
                    "rendered_description" : {
                      "type" : "string",
                      "description" : "Note: Only present if the changed property was `description`.\n\nThe short description of the stream rendered as HTML, intended to\nbe used when displaying the stream description in a UI.\n\nOne should use the standard Zulip rendered_markdown CSS when\ndisplaying this content so that emoji, LaTeX, and other syntax\nwork correctly.  And any client-side security logic for\nuser-generated message content should be applied when displaying\nthis HTML as though it were the body of a Zulip message.\n"
                    },
                    "history_public_to_subscribers" : {
                      "type" : "boolean",
                      "description" : "Note: Only present if the changed property was `invite_only`.\n\nWhether the history of the stream is public to its subscribers.\n\nCurrently always true for public streams (i.e. invite_only=False implies\nhistory_public_to_subscribers=True), but clients should not make that\nassumption, as we may change that behavior in the future.\n"
                    },
                    "is_web_public" : {
                      "type" : "boolean",
                      "description" : "Note: Only present if the changed property was `invite_only`.\n\nWhether the stream's history is now readable by web-public spectators.\n\n**Changes**: New in Zulip 5.0 (feature level 71).\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users who can see that a stream exists\nwhen a property of that stream changes.\n",
                  "example" : {
                    "op" : "update",
                    "type" : "stream",
                    "property" : "invite_only",
                    "value" : true,
                    "history_public_to_subscribers" : true,
                    "is_web_public" : false,
                    "stream_id" : 11,
                    "name" : "test_stream",
                    "id" : 0
                  }
                }, {
                  "description" : "Event sent when a reaction is added to a message.\nSent to all users who were recipients of the message.\n",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/EmojiReactionBase"
                  }, {
                    "type" : "object",
                    "properties" : {
                      "emoji_code" : { },
                      "emoji_name" : { },
                      "reaction_type" : { },
                      "user_id" : { },
                      "user" : { },
                      "id" : {
                        "$ref" : "#/components/schemas/EventIdSchema"
                      },
                      "type" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventTypeSchema"
                        }, {
                          "type" : "string",
                          "enum" : [ "reaction" ]
                        } ]
                      },
                      "op" : {
                        "type" : "string",
                        "enum" : [ "add" ]
                      },
                      "message_id" : {
                        "type" : "integer",
                        "description" : "The ID of the message to which a reaction was\nadded.\n"
                      }
                    },
                    "additionalProperties" : false,
                    "example" : {
                      "type" : "reaction",
                      "op" : "add",
                      "user_id" : 10,
                      "user" : {
                        "user_id" : 10,
                        "email" : "user10@zulip.testserver",
                        "full_name" : "King Hamlet"
                      },
                      "message_id" : 32,
                      "emoji_name" : "tada",
                      "emoji_code" : "1f389",
                      "reaction_type" : "unicode_emoji",
                      "id" : 0
                    }
                  } ]
                }, {
                  "description" : "Event sent when a reaction is removed from a message.\nSent to all users who were recipients of the message.\n",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/EmojiReactionBase"
                  }, {
                    "type" : "object",
                    "properties" : {
                      "emoji_code" : { },
                      "emoji_name" : { },
                      "reaction_type" : { },
                      "user_id" : { },
                      "user" : { },
                      "id" : {
                        "$ref" : "#/components/schemas/EventIdSchema"
                      },
                      "type" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventTypeSchema"
                        }, {
                          "type" : "string",
                          "enum" : [ "reaction" ]
                        } ]
                      },
                      "op" : {
                        "type" : "string",
                        "enum" : [ "remove" ]
                      },
                      "message_id" : {
                        "type" : "integer",
                        "description" : "The ID of the message from which the reaction was\nremoved.\n"
                      }
                    },
                    "additionalProperties" : false,
                    "example" : {
                      "type" : "reaction",
                      "op" : "remove",
                      "user_id" : 10,
                      "user" : {
                        "user_id" : 10,
                        "email" : "user10@zulip.testserver",
                        "full_name" : "King Hamlet"
                      },
                      "message_id" : 52,
                      "emoji_name" : "tada",
                      "emoji_code" : "1f389",
                      "reaction_type" : "unicode_emoji",
                      "id" : 0
                    }
                  } ]
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "attachment" : {
                      "$ref" : "#/components/schemas/Attachments"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user uploads a new file\nin a Zulip message.  Useful to implement live update in UI showing all files\nthe current user has uploaded.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "add",
                    "attachment" : {
                      "id" : 1,
                      "name" : "zulip.txt",
                      "path_id" : "2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt",
                      "size" : 6,
                      "create_time" : 1594825414000,
                      "messages" : [ ]
                    },
                    "upload_space_used" : 6,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "attachment" : {
                      "$ref" : "#/components/schemas/Attachments"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent sent to a user's clients when details of a file that user\nuploaded are changed.  Most updates will be changes in the list of\nmessages that reference the uploaded file.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "update",
                    "attachment" : {
                      "id" : 1,
                      "name" : "zulip.txt",
                      "path_id" : "2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt",
                      "size" : 6,
                      "create_time" : 1594825414000,
                      "messages" : [ ]
                    },
                    "upload_space_used" : 6,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "attachment" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer",
                          "description" : "The ID of the deleted attachment.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Dictionary containing the id of the deleted attachment.\n"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user deletes a file\nthey had uploaded.  Useful primarily for UI showing all the files\nthe current user has uploaded.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "remove",
                    "attachment" : {
                      "id" : 1
                    },
                    "upload_space_used" : 0,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "submessage" ]
                      } ]
                    },
                    "msg_type" : {
                      "type" : "string",
                      "description" : "The type of the message.\n"
                    },
                    "content" : {
                      "type" : "string",
                      "description" : "The new content of the submessage.\n"
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The ID of the message to which the submessage has been added.\n"
                    },
                    "sender_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user who sent the message.\n"
                    },
                    "submessage_id" : {
                      "type" : "integer",
                      "description" : "The ID of the submessage.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a submessage is added to a message.\n\nSubmessages are an **experimental** API used for widgets such as the\n`/poll` widget in Zulip.\n",
                  "example" : {
                    "type" : "submessage",
                    "msg_type" : "widget",
                    "message_id" : 970461,
                    "submessage_id" : 4737,
                    "sender_id" : 58,
                    "content" : "{\"type\":\"vote\",\"key\":\"58,1\",\"vote\":1}",
                    "id" : 28
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_status" ]
                      } ]
                    },
                    "away" : {
                      "type" : "boolean",
                      "description" : "Whether the user has marked themself \"away\" with this status.\n"
                    },
                    "status_text" : {
                      "type" : "string",
                      "description" : "The text content of the status message.\n"
                    },
                    "emoji_name" : {
                      "type" : "string",
                      "description" : "The [emoji name](/api/add-reaction#parameters) for the emoji\nthe user selected for their new status.\n\nThis will be \"\" for users who set a status without selecting\nan emoji.\n\n**Changes**; New in Zulip 5.0 (feature level 86).\n"
                    },
                    "emoji_code" : {
                      "type" : "string",
                      "description" : "The [emoji code](/api/add-reaction#parameters) for the emoji\nthe user selected for their new status.\n\nThis will be \"\" for users who set a status without selecting\nan emoji.\n\n**Changes**; New in Zulip 5.0 (feature level 86).\n"
                    },
                    "reaction_type" : {
                      "type" : "string",
                      "description" : "The [emoji type](/api/add-reaction#parameters) for the emoji\nthe user selected for their new status.\n\nThis will be \"\" for users who set a status without selecting\nan emoji.\n\n**Changes**; New in Zulip 5.0 (feature level 86).\n"
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user whose status changed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nstatus of a user changes.\n",
                  "example" : {
                    "type" : "user_status",
                    "user_id" : 10,
                    "away" : true,
                    "status_text" : "out to lunch",
                    "emoji_name" : "car",
                    "emoji_code" : "1f697",
                    "reaction_type" : "unicode_emoji",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "custom_profile_fields" ]
                      } ]
                    },
                    "fields" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndetails of a single new custom profile field for the Zulip\norganization.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/CustomProfileField"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when new custom\nprofile field types are configured for that Zulip organization.\n",
                  "example" : {
                    "type" : "custom_profile_fields",
                    "fields" : [ {
                      "id" : 1,
                      "name" : "Phone number",
                      "type" : 1,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 1
                    }, {
                      "id" : 2,
                      "name" : "Biography",
                      "type" : 2,
                      "hint" : "What are you known for?",
                      "field_data" : "",
                      "order" : 2
                    }, {
                      "id" : 3,
                      "name" : "Favorite food",
                      "type" : 1,
                      "hint" : "Or drink, if you'd prefer",
                      "field_data" : "",
                      "order" : 3
                    }, {
                      "id" : 4,
                      "name" : "Favorite editor",
                      "type" : 3,
                      "hint" : "",
                      "field_data" : "{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}",
                      "order" : 4
                    }, {
                      "id" : 5,
                      "name" : "Birthday",
                      "type" : 4,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 5
                    }, {
                      "id" : 6,
                      "name" : "Favorite website",
                      "type" : 5,
                      "hint" : "Or your personal blog's URL",
                      "field_data" : "",
                      "order" : 6
                    }, {
                      "id" : 7,
                      "name" : "Mentor",
                      "type" : 6,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 7
                    }, {
                      "id" : 8,
                      "name" : "GitHub",
                      "type" : 7,
                      "hint" : "Enter your GitHub username",
                      "field_data" : "{\"subtype\":\"github\"}",
                      "order" : 8
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "default_stream_groups" ]
                      } ]
                    },
                    "default_stream_groups" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary\ncontains details about a single default stream group.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/DefaultStreamGroup"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when an organization\nadministrator changes the organization's configured default stream groups.\n\nDefault stream groups are an **experimental** feature that is not yet\nstabilized.\n",
                  "example" : {
                    "type" : "default_stream_groups",
                    "default_stream_groups" : [ {
                      "name" : "group1",
                      "id" : 2,
                      "description" : "New description",
                      "streams" : [ {
                        "name" : "Scotland",
                        "stream_id" : 3,
                        "description" : "Located in the United Kingdom",
                        "rendered_description" : "<p>Located in the United Kingdom</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 1,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      }, {
                        "name" : "Denmark",
                        "stream_id" : 1,
                        "description" : "A Scandinavian country",
                        "rendered_description" : "<p>A Scandinavian country</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 4,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      }, {
                        "name" : "Verona",
                        "stream_id" : 5,
                        "description" : "A city in Italy",
                        "rendered_description" : "<p>A city in Italy</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 6,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      } ]
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "default_streams" ]
                      } ]
                    },
                    "default_streams" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary\ncontains details about a single default stream.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\ndefault streams in the organization are changed by an\norganization administrator.\n",
                  "example" : {
                    "type" : "default_streams",
                    "default_streams" : [ {
                      "name" : "Scotland",
                      "stream_id" : 3,
                      "description" : "Located in the United Kingdom",
                      "rendered_description" : "<p>Located in the United Kingdom</p>",
                      "invite_only" : false,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : true,
                      "first_message_id" : 1,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "delete_message" ]
                      } ]
                    },
                    "message_ids" : {
                      "type" : "array",
                      "description" : "The `message_ids` property will be present for clients that support\nthe `bulk_message_deletion` client capability.\n\nAn containing the IDs of the newly deleted messages.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The `message_id` property will be present for clients that do not support\nthe `bulk_message_deletion` client capability.\n\nThe ID of the newly deleted message.\n"
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "The type of message. Either 'stream' or 'private'.  The other keys\npresent in the event, necessary to update various frontend data structures\nthat might be tracking the message, depend on the message type.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present for stream messages.\n\nThe ID of the stream to which the message was sent.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present for stream messages.\n\nThe topic to which the message was sent.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a message has been deleted.\nSent to all users who received the message.\n\n**Changes**: Before Zulip 5.0 (feature level 77), events\nfor private messages contained additional `sender_id` and\n`recipient_id` fields.\n",
                  "example" : {
                    "type" : "delete_message",
                    "message_type" : "private",
                    "message_id" : 37,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "muted_topics" ]
                      } ]
                    },
                    "muted_topics" : {
                      "type" : "array",
                      "description" : "Array of tuples, where each tuple describes a muted topic.\nThe first element of tuple is the stream name in which the topic\nhas to be muted, the second element is the topic name to be muted\nand the third element is an integer UNIX timestamp representing\nwhen the topic was muted.\n",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "oneOf" : [ {
                            "type" : "string"
                          }, {
                            "type" : "integer"
                          } ]
                        }
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of\nconfigured muted topics have changed.\n",
                  "example" : {
                    "type" : "muted_topics",
                    "muted_topics" : [ [ "Denmark", "topic", 1594825442 ] ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "muted_users" ]
                      } ]
                    },
                    "muted_users" : {
                      "type" : "array",
                      "description" : "A list of dictionaries where each dictionary describes\na muted user.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "id" : {
                            "type" : "integer",
                            "description" : "The ID of the muted user.\n"
                          },
                          "timestamp" : {
                            "type" : "integer",
                            "description" : "An integer UNIX timestamp representing when the user was muted.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and timestamp of a muted user.\n"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of\nconfigured [muted users](/api/mute-user) have changed.\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n",
                  "example" : {
                    "type" : "muted_users",
                    "muted_users" : [ {
                      "id" : 1,
                      "timestamp" : 1594825442
                    }, {
                      "id" : 22,
                      "timestamp" : 1654865392
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "heartbeat" ]
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Heartbeat events are sent by the server to avoid\nlongpolling connections being affected by networks that\nkill idle HTTP connections.\n\nClients do not need to do anything to process these\nevents, beyond the common `last_event_id` accounting.\n",
                  "example" : {
                    "type" : "heartbeat",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "hotspots" ]
                      } ]
                    },
                    "hotspots" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each\ndictionary contains details about a single hotspot.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/Hotspot"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when the set of onboarding \"hotspots\" to show for\nthe current user have changed (E.g. because the user dismissed one).\n\nClients that feature a similar tutorial experience to the Zulip\nweb app may want to handle these events.\n",
                  "example" : {
                    "type" : "hotspots",
                    "hotspots" : [ {
                      "name" : "intro_streams",
                      "title" : "Catch up on a stream",
                      "description" : "Messages sent to a stream are seen by everyone subscribed to that stream. Try clicking on one of the stream links below.",
                      "delay" : 0.5
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message" ]
                      } ]
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user who sent the message.\n"
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The ID of the message which was edited.\n\nThis field should be used to apply content edits to the client's\ncached message history.  If the stream or topic was changed, the\nset of moved messages is encoded in the separate `message_ids`\nfield, which is guaranteed to include `message_id`.\n"
                    },
                    "message_ids" : {
                      "type" : "array",
                      "description" : "The list of IDs of messages to which any stream or topic changes\nencoded in this event should be applied.\n\nThese messages are guaranteed to have all been previously sent\nto stream `stream_id` with topic `orig_subject`, and have been\nmoved to `new_stream_id` with topic `subject` (if those fields\nare present in the event).\n\nClients processing these events should update all cached message\nhistory associated with the moved messages (including adjusting\n`unread_msgs` data structures, where the client may not have the\nmessage itself in its history) to reflect the new stream and\ntopic.\n\nContent changes should be applied only to the single message\nindicated by `message_id`.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "edit_timestamp" : {
                      "type" : "integer",
                      "description" : "The time when this message edit operation was processed by the\nserver.\n"
                    },
                    "stream_name" : {
                      "type" : "string",
                      "description" : "Only present if the message was originally sent to a stream.\n\nThe name of the stream that the message was sent to.  Clients\nare recommended to use the `stream_id` field instead.\n"
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if the message was originally sent to a stream.\n\nThe pre-edit stream for all of the messages with IDs in\n`message_ids`.\n"
                    },
                    "new_stream_id" : {
                      "type" : "integer",
                      "description" : "Note: Only present if message(s) were moved to a different stream.\n\nThe post-edit stream for all of the messages with IDs in\n`message_ids`.\n"
                    },
                    "propagate_mode" : {
                      "type" : "string",
                      "description" : "The choice the editing user made about which messages should be\naffected by a stream/topic edit: just the one indicated in\n`message_id`, messages in the same topic that had been sent\nafter this one, or all messages in that topic.\n\nThis parameter should be used to decide whether to change\nnavigation and compose box state in response to the edit.  For\nexample, if the user was previously in topic narrow, and the\ntopic was edited with `change_later` or `change_all`, the Zulip\nweb app will automatically navigate to the new topic narrow.\nSimilarly, a message being composed to the old topic should\nhave its recipient changed to the new topic.\n\nThis navigation makes it much more convenient to move content\nbetween topics without disruption or messages continuing\nto be sent to the pre-edit topic by accident.\n",
                      "enum" : [ "change_one", "change_later", "change_all" ]
                    },
                    "orig_subject" : {
                      "type" : "string",
                      "description" : "The pre-edit topic for all of the messages with IDs in\n`message_ids`.\n\nOnly present if this event moved messages to a different\ntopic.\n"
                    },
                    "subject" : {
                      "type" : "string",
                      "description" : "The post-edit topic for all of the messages with IDs in\n`message_ids`.\n\nOnly present if this event moved messages to a different\ntopic.\n"
                    },
                    "topic_links" : {
                      "type" : "array",
                      "description" : "Data on any links to be included in the `topic`\nline (these are generated by\n[custom linkification filter](/help/add-a-custom-linkifier)\nthat match content in the message's topic.), corresponding\nto the post-edit topic.\n\nOnly present if this event moved messages to a different\ntopic.\n\n**Changes**: This field contained a list of urls before\n  Zulip 4.0 (feature level 46).\n\nNew in Zulip 3.0 (feature level 1).  Previously, this field\nwas called `subject_links`; clients are recommended to\nrename `subject_links` to `topic_links` if present for\ncompatibility with older Zulip servers.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "text" : {
                            "type" : "string",
                            "description" : "The original link text present in the topic.\n"
                          },
                          "url" : {
                            "type" : "string",
                            "description" : "The expanded target url which the link points to.\n"
                          }
                        },
                        "additionalProperties" : false
                      }
                    },
                    "orig_content" : {
                      "type" : "string",
                      "description" : "The original content of the message with ID `message_id`\nimmediately prior to this edit, in the original markdown.\n"
                    },
                    "orig_rendered_content" : {
                      "type" : "string",
                      "description" : "The original content of the message with ID `message_id`\nimmediately prior to this edit, rendered as HTML.\n"
                    },
                    "prev_rendered_content_version" : {
                      "type" : "integer",
                      "description" : "The Markdown processor version number for the pre-edit message.\n\nClients should ignore this field.\n"
                    },
                    "content" : {
                      "type" : "string",
                      "description" : "The new content of the message with ID `message_id`, in the\noriginal Markdown.\n"
                    },
                    "rendered_content" : {
                      "type" : "string",
                      "description" : "The new content of the message with ID `message_id`,\nrendered in HTML.\n"
                    },
                    "is_me_message" : {
                      "type" : "boolean",
                      "description" : "Whether the message with ID `message_id` is now a\n[/me status message][status-messages].\n\n[status-messages]: /help/format-your-message-using-markdown#status-messages\n"
                    },
                    "flags" : {
                      "type" : "array",
                      "description" : "The user's personal [message flags][message-flags] for the\nmessage with ID `message_id` following the edit.\n\nA client application should compare these to the original flags\nto identify cases where a mention or alert word was added by the\nedit.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a message has been edited.\nSent to all users who had received the original\nmessage.\n",
                  "example" : {
                    "type" : "update_message",
                    "user_id" : 10,
                    "edit_timestamp" : 1594825451,
                    "message_id" : 58,
                    "stream_name" : "Verona",
                    "orig_content" : "hello",
                    "orig_rendered_content" : "<p>hello</p>",
                    "content" : "new content",
                    "rendered_content" : "<p>new content</p>",
                    "prev_rendered_content_version" : 1,
                    "is_me_message" : false,
                    "propagate_mode" : "change_all",
                    "stream_id" : 5,
                    "orig_subject" : "test",
                    "subject" : "new_topic",
                    "topic_links" : [ ],
                    "message_ids" : [ 58, 57 ],
                    "flags" : [ ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "typing" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "start" ]
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "Type of message being composed.  Must be \"stream\" or \"private\",\nas with sending a message.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\nall typing notifications were implicitly private `private`.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "sender" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user's ID.\n"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "The Zulip display email address for the user.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object describing the \"sender\" (i.e. the user who is typing a message).\n"
                    },
                    "recipients" : {
                      "type" : "array",
                      "description" : "Only present if `message_type` is `private`.\n\nArray of dictionaries describing the set of users who would be recipients\nof the message being typed.  Each dictionary contains details on one\none of the recipients users; the sending user is guaranteed to appear\namong the recipients.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The Zulip display email address for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and email of a recipient.\n"
                      }
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if `message_type` is `stream`.\n\nThe unique ID of the stream to which message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present if `message_type` is `stream`.\n\nTopic within the stream where the message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a user starts typing a message.\n\nSent to all clients for users who would receive the\nmessage being typed, with the additional rule that typing\nnotifications for stream messages are only sent to clients\nthat included `stream_typing_notifications` in their\n`client_capabilities` when registering the event queue.\n\n**Changes**: Typing notifications for stream messages are new in\nZulip 4.0 (feature level 58).\n\nSee the [typing endpoint docs](/api/set-typing-status) for more details.\n",
                  "example" : {
                    "type" : "typing",
                    "op" : "start",
                    "sender" : {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    },
                    "recipients" : [ {
                      "user_id" : 8,
                      "email" : "user8@zulip.testserver"
                    }, {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "typing" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "stop" ]
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "Type of message being composed.  Must be \"stream\" or \"private\",\nas with sending a message.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\nall typing notifications were implicitly private `private`.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "sender" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user's ID.\n"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "The Zulip display email address for the user.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object describing the \"sender\" (i.e. the user who was previously\ntyping a message).\n"
                    },
                    "recipients" : {
                      "type" : "array",
                      "description" : "Only present for typing notifications for (group) private messages.\n\nArray of dictionaries describing the set of users who would be recipients\nof the message that stopped being typed.  Each dictionary contains\ndetails on one one of the recipients users; the sending user is\nguaranteed to appear among the recipients.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The Zulip display email address for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and email of a recipient.\n"
                      }
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if `message_type` is `stream`.\n\nThe unique ID of the stream to which message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present if `message_type` is `stream`.\n\nTopic within the stream where the message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a user stops typing a message.\n\nSent to all clients for users who would receive the message\nthat was previously being typed, with the additional rule\nthat typing notifications for stream messages are only sent to\nclients that included `stream_typing_notifications` in their\n`client_capabilities` when registering the event queue.\n\n**Changes**: Typing notifications for stream messages are new in\nZulip 4.0 (feature level 58).\n\nSee the [typing endpoint docs](/api/set-typing-status) for more details.\n",
                  "example" : {
                    "type" : "typing",
                    "op" : "stop",
                    "sender" : {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    },
                    "recipients" : [ {
                      "user_id" : 8,
                      "email" : "user8@zulip.testserver"
                    }, {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message_flags" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "operation" : {
                      "type" : "string",
                      "description" : "Old name for `op` for this event type.\n\n**Deprecated**: This is deprecated; please use `op` instead\nstarting with Zulip 4.0 (feature level 32).\n",
                      "deprecated" : true,
                      "enum" : [ "add" ]
                    },
                    "flag" : {
                      "type" : "string",
                      "description" : "The flag that was added.\n"
                    },
                    "messages" : {
                      "type" : "array",
                      "description" : "Array containing the ids of all messages to which\nthe flag was added.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "all" : {
                      "type" : "boolean",
                      "description" : "Whether the flag was added to all messages (E.g. all messages\nwere marked as read).\nIf this is true, then the `messages` array will be empty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user when [message flags][message-flags] are added\nto a message.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                  "example" : {
                    "type" : "update_message_flags",
                    "op" : "add",
                    "operation" : "add",
                    "flag" : "starred",
                    "messages" : [ 63 ],
                    "all" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message_flags" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "operation" : {
                      "type" : "string",
                      "description" : "Old name for `op` for this event type.\n\n**Deprecated**: This is deprecated; please use `op` instead\nstarting with Zulip 4.0 (feature level 32).\n",
                      "deprecated" : true,
                      "enum" : [ "remove" ]
                    },
                    "flag" : {
                      "type" : "string",
                      "description" : "The flag to be removed.\n"
                    },
                    "messages" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the messages from which the flag\nwas removed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "all" : {
                      "type" : "boolean",
                      "description" : "Whether the flag was removed from all messages.\nIf this is true then the `messages` array will be empty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user when [message flags][message-flags] are\nremoved from a message.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                  "example" : {
                    "type" : "update_message_flags",
                    "op" : "remove",
                    "operation" : "remove",
                    "flag" : "starred",
                    "messages" : [ 63 ],
                    "all" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "group" : {
                      "$ref" : "#/components/schemas/UserGroup"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users in an organization when a [user group](/help/user-groups) is created.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "add",
                    "group" : {
                      "name" : "backend",
                      "members" : [ 12 ],
                      "description" : "Backend team",
                      "id" : 2
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group whose details have changed.\n"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "type" : "string",
                          "description" : "The new name of the user group. Only present if the group's name changed.\n"
                        },
                        "description" : {
                          "type" : "string",
                          "description" : "The new description of the group. Only present if the description\nchanged.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Dictionary containing the changed details of the user group.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization\nwhen a property of a user group is changed.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "update",
                    "group_id" : 2,
                    "data" : {
                      "description" : "Mention this group to get the security team's attention."
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add_members" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group with new members.\n"
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the users who have been added\nto the user group.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when users have been added to a user group.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "add_members",
                    "group_id" : 2,
                    "user_ids" : [ 10 ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove_members" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group whose details have changed.\n"
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the users who have been removed\nfrom the user group.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when users have been removed from\na user group.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "remove_members",
                    "group_id" : 2,
                    "user_ids" : [ 10 ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the group which has been deleted.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a user group has been deleted.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "remove",
                    "group_id" : 2,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_linkifiers" ]
                      } ]
                    },
                    "realm_linkifiers" : {
                      "type" : "array",
                      "description" : "Array of dictionaries where each dictionary contains details about\na single realm linkifier.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "pattern" : {
                            "type" : "string",
                            "description" : "The string regex pattern which represents the pattern that\nshould be linkified by this linkifier.\n"
                          },
                          "url_format" : {
                            "type" : "string",
                            "description" : "The URL format string to be used for linkifying matches.\n"
                          },
                          "id" : {
                            "type" : "integer",
                            "description" : "The ID of the linkifier.\n"
                          }
                        },
                        "additionalProperties" : false
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nset of configured [linkifiers](/help/add-a-custom-linkifier)\nfor the organization has changed.\n\nProcessing this event is important to doing Markdown local echo\ncorrectly.\n\n**Changes**: New in Zulip 4.0 (feature level 54), replacing the\nprevious `realm_filters` event type, which is still sent for\nbackwards compatibility reasons.\n\nClients should migrate to requesting and processing the\n`realm_linkifiers` event type when possible, since we plan to remove\nthe legacy `realm_filters` logic entirely in a future release.\n",
                  "example" : {
                    "type" : "realm_linkifiers",
                    "realm_linkifiers" : [ {
                      "pattern" : "#(?P<id>[123])",
                      "url_format" : "https://realm.com/my_realm_filter/%(id)s",
                      "id" : 1
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_filters" ]
                      } ]
                    },
                    "realm_filters" : {
                      "type" : "array",
                      "description" : "An array of tuples, where each tuple describes a linkifier.\nThe first element of the tuple is a\nstring regex pattern which represents the pattern that should\nbe linkified on matching. The second element is the URL with which the\npattern matching string should be linkified with and the third element\nis the ID of the realm filter.\n",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "oneOf" : [ {
                            "type" : "integer"
                          }, {
                            "type" : "string"
                          } ]
                        }
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Legacy event type. Sent to all users in a Zulip organization\nwhen the set of configured [linkifiers](/help/add-a-custom-linkifier)\nfor the organization has changed.\n\n**Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\nthe `realm_linkifiers` event type, which has a clearer name and format,\ninstead.\n",
                  "example" : {
                    "type" : "realm_filters",
                    "realm_filters" : [ [ "#(?P<id>[123])", "https://realm.com/my_realm_filter/%(id)s", 1 ] ],
                    "id" : 0
                  },
                  "deprecated" : true
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_playgrounds" ]
                      } ]
                    },
                    "realm_playgrounds" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndata about a single playground entry.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/RealmPlayground"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nset of configured [code playgrounds](/help/code-blocks#code-playgrounds)\nfor the organization has changed.\n\n**Changes**: New in Zulip 4.0 (feature level 49).\n",
                  "example" : {
                    "type" : "realm_playgrounds",
                    "realm_playgrounds" : [ {
                      "id" : 1,
                      "name" : "Python playground",
                      "pygments_language" : "Python",
                      "url_prefix" : "https://python.example.com"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_emoji" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "realm_emoji" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "$ref" : "#/components/schemas/RealmEmoji"
                      },
                      "description" : "An object in which each key describes a realm emoji.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when\na [custom emoji](/help/add-custom-emoji) has been updated,\ntypically when a new emoji has been added or an old one\nhas been deactivated. The event contains all custom emoji\nconfigured for the organization, not just the updated\ncustom emoji.\n",
                  "example" : {
                    "type" : "realm_emoji",
                    "op" : "update",
                    "realm_emoji" : {
                      "2" : {
                        "id" : "2",
                        "name" : "my_emoji",
                        "source_url" : "/user_avatars/2/emoji/images/2.png",
                        "deactivated" : true,
                        "author_id" : 11
                      },
                      "1" : {
                        "id" : "1",
                        "name" : "green_tick",
                        "source_url" : "/user_avatars/2/emoji/images/1.png",
                        "deactivated" : false,
                        "author_id" : 11
                      }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "realm_domain" : {
                      "$ref" : "#/components/schemas/RealmDomain"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "add",
                    "realm_domain" : {
                      "domain" : "zulip.org",
                      "allow_subdomains" : false
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "change" ]
                    },
                    "realm_domain" : {
                      "type" : "object",
                      "properties" : {
                        "domain" : {
                          "type" : "string",
                          "description" : "The domain whose settings have changed.\n"
                        },
                        "allow_subdomains" : {
                          "type" : "boolean",
                          "description" : "Whether subdomains are allowed for this domain.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details of the edited domain.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "change",
                    "realm_domain" : {
                      "domain" : "zulip.org",
                      "allow_subdomains" : true
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "domain" : {
                      "type" : "string",
                      "description" : "The domain to be removed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "remove",
                    "domain" : "zulip.org",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_export" ]
                      } ]
                    },
                    "exports" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndata about a single organization export request.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/RealmExport"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to the user who requested a [data export](/help/export-your-organization)\nwhen the status of the export changes.\n",
                  "example" : {
                    "type" : "realm_export",
                    "exports" : [ {
                      "id" : 107,
                      "export_time" : 1.594825443656797E9,
                      "acting_user_id" : 10,
                      "export_url" : null,
                      "deleted_timestamp" : null,
                      "failed_timestamp" : 1.594825444436336E9,
                      "pending" : false
                    } ],
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "bot" : {
                      "$ref" : "#/components/schemas/Bot"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users who can administer a newly created bot\nuser.  Clients will also receive a `realm_user` event that\ncontains basic details (but not the API key).\n\nThe `realm_user` events are sufficient for clients that\nonly need to interact with the bot; this `realm_bot` event\ntype is relevant only for administering bots.\n\nOnly organization administrators and the user who owns the bot will\nreceive this event.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "add",
                    "bot" : {
                      "email" : "test-bot@zulip.testserver",
                      "user_id" : 36,
                      "full_name" : "Foo Bot",
                      "bot_type" : 1,
                      "is_active" : true,
                      "api_key" : "6hc6MC9mpNFvoo0gSOWnZEq4aJEn8UNK",
                      "default_sending_stream" : null,
                      "default_events_register_stream" : null,
                      "default_all_public_streams" : false,
                      "avatar_url" : "https://secure.gravatar.com/avatar/af8abc2537d283b212a6bd4d1289956d?d=identicon&version=1",
                      "services" : [ ],
                      "owner_id" : 10
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "bot" : {
                      "allOf" : [ {
                        "description" : "Object containing details about the changed bot.\nIt contains two properties: the user id of the bot and\nthe property to be changed. The changed property is one\nof the remaining properties listed below.\n"
                      }, {
                        "$ref" : "#/components/schemas/BasicBot"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users who can administer a bot user when the bot is\nconfigured.  Clients may also receive a `realm_user` event that\nfor changes in public data about the bot (name, etc.).\n\nThe `realm_user` events are sufficient for clients that\nonly need to interact with the bot; this `realm_bot` event\ntype is relevant only for administering bots.\n\nOnly organization administrators and the user who owns the bot will\nreceive this event.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "update",
                    "bot" : {
                      "user_id" : 37,
                      "services" : [ {
                        "base_url" : "http://hostname.domain2.com",
                        "interface" : 2,
                        "token" : "grr8I2APXRmVL0FRTMRYAE4DRPQ5Wlaw"
                      } ]
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "bot" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user ID of the deactivated bot.\n"
                        },
                        "full_name" : {
                          "type" : "string",
                          "description" : "The full name of the deactivated bot.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details about the deactivated bot.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a bot has been deactivated.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "remove",
                    "bot" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "delete" ]
                    },
                    "bot" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user ID of the deactivated bot.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details about the deactivated bot.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a bot has been deactivated.\nNote that this is very similar to the bot_remove event\nand one of them will be removed soon.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "delete",
                    "bot" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The name of the property that was changed.\n"
                    },
                    "value" : {
                      "description" : "The new value of the property.\n",
                      "oneOf" : [ {
                        "type" : "string"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      } ]
                    },
                    "extra_data" : {
                      "type" : "object",
                      "properties" : {
                        "upload_quota" : {
                          "type" : "integer",
                          "description" : "Note: Only present if changed property is `plan_type`.\n\nThe new upload quota for the Zulip organization.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing extra data related to the changed\nproperty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nconfiguration of the organization (realm) has changed.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "update",
                    "property" : "disallow_disposable_email_addresses",
                    "value" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "deactivated" ]
                    },
                    "realm_id" : {
                      "type" : "integer",
                      "description" : "The ID of the deactivated realm.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\norganization (realm) is deactivated.  Its main purpose is to\nflush active longpolling connections so clients can immediately\nshow the organization as deactivated.\n\nClients cannot rely on receiving this event, because they will\nno longer be able to authenticate to the Zulip API due to the\ndeactivation, and thus can miss it if they did not have an active\nlongpolling connection at the moment of deactivation.\n\nCorrect handling of realm deactivations requires that clients\nparse authentication errors from GET /events; if that is done\ncorrectly, the client can ignore this event type and rely on its\nhandling of the `GET /events` request it will do immediately\nafter processing this batch of events.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "deactivated",
                    "realm_id" : 2,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "restart" ]
                      } ]
                    },
                    "zulip_version" : {
                      "type" : "string",
                      "description" : "The Zulip version number, in the format where this appears\nin the [server_settings](/api/get-server-settings) and\n[register](/api/register-queue) responses.\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n"
                    },
                    "zulip_merge_base" : {
                      "type" : "string",
                      "description" : "The Zulip merge base number, in the format where this appears\nin the [server_settings](/api/get-server-settings) and\n[register](/api/register-queue) responses.\n\n**Changes**: New in Zulip 5.0 (feature level 88).\n"
                    },
                    "zulip_feature_level" : {
                      "type" : "integer",
                      "description" : "The [Zulip feature level](/api/changelog) of the server\nafter the restart.\n\nClients can safely avoid refetching their state and\ncreating a new event queue when the API feature level has not\nchanged, or when they know the specific feature level change\nis not relevant to the client (E.g. it just adds a new endpoint\nthat the client doesn't use).\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n"
                    },
                    "immediate" : {
                      "type" : "boolean",
                      "description" : "Whether the client should fetch a new event queue immediately,\nrather than using a backoff strategy to avoid thundering herds.\nA Zulip development server uses this parameter to reload\nclients immediately.\n"
                    },
                    "server_generation" : {
                      "type" : "integer",
                      "description" : "The timestamp at which the server started.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all the users whenever the Zulip server restarts.\n\nSpecifically, this event is sent whenever the Tornado process\nfor the user is restarted; in particular, this will always happen\nwhen the Zulip server is upgraded.\n\nClients can use this event to know when they should get a new\nevent queue after a server upgrade.  Clients doing so must implement\na random delay strategy to spread such restarts over 10 minutes or\nmore to avoid creating a synchronized thundering herd effect.\n",
                  "example" : {
                    "id" : 0,
                    "immediate" : true,
                    "server_generation" : 1619334181,
                    "type" : "restart",
                    "zulip_feature_level" : 57,
                    "zulip_version" : "5.0-dev-1650-gc3fd37755f",
                    "zulip_merge_base" : "5.0-dev-1646-gea6b21cd8c"
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update_dict" ]
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "Always `\"default\"`.  Present for backwards-compatibility with older\nclients that predate the `update_dict` event style.\n"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "allow_edit_history" : {
                          "type" : "boolean",
                          "description" : "Whether this organization is configured to allow users to access\n[message edit history](/help/view-a-messages-edit-history).\n"
                        },
                        "bot_creation_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can create bot users in this organization.\n"
                        },
                        "create_stream_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can create streams in this organization.\n"
                        },
                        "invite_to_stream_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can add other users to streams in this\norganization.\n"
                        },
                        "move_messages_between_streams_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can move messages from one stream to another.\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 56)\n"
                        },
                        "wildcard_mention_policy" : {
                          "type" : "integer",
                          "description" : "The policy for who can use wildcard mentions in large streams.\n\n* 1 => Any user can use wildcard mentions in large streams.\n* 2 => Only members can use wildcard mentions in large streams.\n* 3 => Only full members can use wildcard mentions in large streams.\n* 4 => Only stream and organization administrators can use wildcard mentions in large streams.\n* 5 => Only organization administrators can use wildcard mentions in large streams.\n* 6 => Nobody can use wildcard mentions in large streams.\n* 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.\n\nAll users will receive a warning/reminder when using\nmentions in large streams, even when permitted to do so.\n\n**Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\nZulip 4.0 (feature level 62).\n"
                        },
                        "description" : {
                          "type" : "string",
                          "description" : "The description of the organization, used on login and registration pages.\n"
                        },
                        "realm_giphy_rating" : {
                          "type" : "integer",
                          "description" : "Maximum rating of the GIFs that will be retrieved from GIPHY.\n\n**Changes**: New in Zulip 4.0 (feature level 55).\n"
                        },
                        "digest_emails_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization has enabled [weekly digest emails](/help/digest-emails).\n"
                        },
                        "disallow_disposable_email_addresses" : {
                          "type" : "boolean",
                          "description" : "Whether the organization disallows disposable email\naddresses.\n"
                        },
                        "email_address_visibility" : {
                          "type" : "integer",
                          "description" : "The policy for which users in this organization can see the\nreal email addresses of other users.\n\n* 1 = everyone\n* 2 = members only\n* 3 = administrators only\n* 4 = nobody (though note that administrators can change this setting).\n* 5 = moderators only\n"
                        },
                        "email_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether users are allowed to change their own email address in this\norganization.  This is typically disabled for organizations that\nsynchronize accounts from LDAP or a similar corporate database.\n"
                        },
                        "invite_required" : {
                          "type" : "boolean",
                          "description" : "Whether an invitation is required to join this organization.\n"
                        },
                        "inline_image_preview" : {
                          "type" : "boolean",
                          "description" : "Whether this organization has been configured to enable\n[previews of linked images](/help/allow-image-link-previews).\n"
                        },
                        "inline_url_embed_preview" : {
                          "type" : "boolean",
                          "description" : "Whether this organization has been configured to enable\n[previews of linked websites](/help/allow-image-link-previews).\n"
                        },
                        "mandatory_topics" : {
                          "type" : "boolean",
                          "description" : "Whether [topics are required](/help/require-topics) for messages in this organization.\n"
                        },
                        "message_retention_days" : {
                          "type" : "integer",
                          "description" : "The default [message retention policy](/help/message-retention-policy)\nfor this organization.  Pass `\"forever\"` to request that messages\nby retained forever (the default).\n"
                        },
                        "realm_name" : {
                          "type" : "string",
                          "description" : "The name of the organization, used in login pages etc.\n"
                        },
                        "name_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Indicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their name\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
                        },
                        "avatar_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Indicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their avatar\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
                        },
                        "emails_restricted_to_domains" : {
                          "type" : "boolean",
                          "description" : "Whether [new users joining](/help/allow-anyone-to-join-without-an-invitation)\nthis organization are required to have an email\naddress in one of the `realm_domains` configured for the organization.\n"
                        },
                        "send_welcome_emails" : {
                          "type" : "boolean",
                          "description" : "Whether or not this organization is configured to send the standard Zulip\n[welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n"
                        },
                        "message_content_allowed_in_email_notifications" : {
                          "type" : "boolean",
                          "description" : "Whether notification emails in this organization are allowed to\ncontain Zulip the message content, or simply indicate that a new\nmessage was sent.\n"
                        },
                        "video_chat_provider" : {
                          "type" : "integer",
                          "description" : "The configured video call provider for the organization.\n"
                        },
                        "waiting_period_threshold" : {
                          "type" : "integer",
                          "description" : "Members whose accounts have been created at least this many days ago\nwill be treated as [full members](/help/restrict-permissions-of-new-members)\nfor the purpose of settings that restrict access to new members.\n"
                        },
                        "digest_weekday" : {
                          "type" : "integer",
                          "description" : "The day of the week when the organization will send\nits weekly digest email to inactive users.\n"
                        },
                        "private_message_policy" : {
                          "type" : "integer",
                          "description" : "Policy for [who can send private messages](/help/restrict-private-messages)\nin this organization.\n\n* 1 = Everyone\n* 2 = Nobody\n"
                        },
                        "user_group_edit_policy" : {
                          "type" : "integer",
                          "description" : "The organization's policy for [who can manage user groups\n](/help/restrict-user-group-management).\n\n* 1 = All members can create and edit user groups\n* 2 = Only organization administrators can create and edit user groups\n* 3 = Only full members can create and edit user groups\n* 4 = Only organization administrators and moderators can create and edit user groups\n"
                        },
                        "default_code_block_language" : {
                          "type" : "string",
                          "description" : "The default pygments language code to be used for a code blocks\nin this organization.  Null if no default has been set.\n",
                          "nullable" : true
                        },
                        "message_content_delete_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot be deleted\nwith this organization's\n[message deletion policy](/help/configure-message-editing-and-deletion).\n"
                        },
                        "authentication_methods" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "boolean",
                            "description" : "Boolean describing whether the authentication method (i.e its key)\nis enabled in this organization.\n"
                          },
                          "description" : "Dictionary of 'authentication_method_name': 'boolean' with each\nentry describing whether the authentication name can be used for\nauthenticating into the organization.\n"
                        },
                        "allow_message_editing" : {
                          "type" : "boolean",
                          "description" : "Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\nallows editing the content of messages.\n"
                        },
                        "edit_topic_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can edit topics of any message.\n\n* 1 = members only\n* 2 = admins only\n* 3 = full members only\n* 4 = moderators only\n* 5 = everyone\n\n**Changes**: New in Zulip 5.0 (feature level 75), replacing the\nprevious `allow_community_topic_editing` boolean.\n"
                        },
                        "message_content_edit_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot be edited\nwith this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n"
                        },
                        "community_topic_editing_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot have\ntheir topics edited by other users with this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n\n**Changes**: New in Zulip 3.0 (feature level 11).  Previously this\nvalue was hardcoded to 86400 seconds (1 day).\n"
                        },
                        "icon_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's [profile icon](/help/create-your-organization-profile).\n"
                        },
                        "icon_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's\n[profile icon](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the organization's icon.\n\n* \"G\" means generated by Gravatar (the default).\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "icon_file_size" : {
                          "type" : "integer",
                          "description" : "The maximum file size allowed for the organization's\nicon.  Useful for UI allowing editing the organization's icon.\n"
                        },
                        "logo_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's wide logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
                        },
                        "logo_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "night_logo_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's night theme wide-format logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
                        },
                        "night_logo_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's night theme\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "bot_domain" : {
                          "type" : "string",
                          "description" : "The fake email domain that will be used for new bots created this\norganization.  Useful for UI for creating bots.\n"
                        },
                        "realm_uri" : {
                          "type" : "string",
                          "description" : "The URL for the organization.\n"
                        },
                        "available_video_chat_providers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "type" : "string",
                                "description" : "The name of the video call provider.\n"
                              },
                              "id" : {
                                "type" : "integer",
                                "description" : "The ID of the video call provider.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "`{provider_name}`: Dictionary containing the details of the\nvideo call provider with the name of the chat provider as\nthe key.\n"
                          },
                          "description" : "Dictionary where each entry describes a supported\n[video call provider](/help/start-a-call)\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nvideo call provider.\n"
                        },
                        "presence_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether online presence of other users is shown in this\norganization.\n"
                        },
                        "settings_send_digest_emails" : {
                          "type" : "boolean",
                          "description" : "Whether this Zulip server is configured to allow organizations to\nenable [digest emails](/help/digest-emails).\n\nRelevant for administrative settings UI that can change the digest\nemail settings.\n"
                        },
                        "is_zephyr_mirror_realm" : {
                          "type" : "boolean",
                          "description" : "Whether the organization is a Zephyr mirror realm.\n"
                        },
                        "email_auth_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization has enabled Zulip's default email and password\nauthentication feature.  Determines whether Zulip stores a password\nfor the user and clients should offer any UI for changing the user's\nZulip password.\n"
                        },
                        "password_auth_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization allows any sort of password-based\nauthentication (whether via EmailAuthBackend or LDAP passwords).\n\nDetermines whether a client might ever need to display a password prompt\n(clients will primarily look at this attribute in [server_settings](/api/get-server-settings)\nbefore presenting a login page).\n"
                        },
                        "push_notifications_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether push notifications are enabled for this organization.  Typically\n`false` for self-hosted servers that have not configured the\n[Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).\n"
                        },
                        "upload_quota" : {
                          "type" : "integer",
                          "description" : "The total quota for uploaded files in this organization.\n\nClients are not responsible for checking this quota; it is included\nin the API only for display purposes.\n\nNull if there is no limit.\n",
                          "nullable" : true
                        },
                        "plan_type" : {
                          "type" : "integer",
                          "description" : "The plan type of the organization.\n\n* 1 = Self-hosted organization (SELF_HOSTED)\n* 2 = Zulip Cloud free plan (LIMITED)\n* 3 = Zulip Cloud Standard plan (STANDARD)\n* 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n"
                        },
                        "zulip_plan_is_not_limited" : {
                          "type" : "boolean",
                          "description" : "Whether the organization is using a limited (Zulip Cloud Free) plan.\n"
                        },
                        "upgrade_text_for_wide_organization_logo" : {
                          "type" : "string",
                          "description" : "Text to use when displaying UI for wide organization logos, a feature\nthat is currently not available on the Zulip Cloud Free plan.\n\nUseful only for clients supporting administrative UI for uploading\na new wide organization logo to brand the organization.\n"
                        },
                        "default_external_accounts" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "type" : "string",
                                "description" : "The name of the external account provider\n"
                              },
                              "text" : {
                                "type" : "string",
                                "description" : "The text describing the external account.\n"
                              },
                              "hint" : {
                                "type" : "string",
                                "description" : "The help text to be displayed for the\ncustom profile field in user-facing\nsettings UI for configuring custom\nprofile fields for this account.\n"
                              },
                              "url_pattern" : {
                                "type" : "string",
                                "description" : "The regex pattern of the URL of a profile page\non the external site.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "`{site_name}`: Dictionary containing the details of the\ndefault external account provider with the name of the\nwebsite as the key.\n"
                          },
                          "description" : "Dictionary where each entry describes a default external\naccount type that can be configured with Zulip's custom\nprofile fields feature.\n"
                        },
                        "jitsi_server_url" : {
                          "type" : "string",
                          "description" : "The base URL the organization uses to create Jitsi video calls.\n"
                        },
                        "development_environment" : {
                          "type" : "boolean",
                          "description" : "Whether this Zulip server is a development environment.  Used\nto control certain features or UI (such as error popups)\nthat should only apply when connected to a Zulip development\nenvironment.\n"
                        },
                        "server_generation" : {
                          "type" : "integer",
                          "description" : "A timestamp indicating when the process hosting this\nevent queue was started.  Clients will likely only find\nthis value useful for inclusion in detailed error reports.\n"
                        },
                        "password_min_length" : {
                          "type" : "integer",
                          "description" : "This Zulip server's configured minimum required length for passwords.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
                        },
                        "password_min_guesses" : {
                          "type" : "integer",
                          "description" : "This Zulip server's configured minimum `zxcvbn` minimum guesses.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
                        },
                        "max_file_upload_size_mib" : {
                          "type" : "integer",
                          "description" : "The maximum file size that can be uploaded to this Zulip server.\n"
                        },
                        "max_avatar_file_size_mib" : {
                          "type" : "integer",
                          "description" : "The maximum avatar size that can be uploaded to this Zulip server.\n"
                        },
                        "server_inline_image_preview" : {
                          "type" : "boolean",
                          "description" : "Whether the server is configured with support for inline image previews.\nClients containing administrative UI for changing\n`realm_inline_image_preview` should consult this field before offering\nthat feature.\n"
                        },
                        "server_inline_url_embed_preview" : {
                          "type" : "boolean",
                          "description" : "Whether the server is configured with support for inline URL previews.\nClients containing administrative UI for changing\n`realm_inline_url_embed_preview` should consult this field before offering\nthat feature.\n"
                        },
                        "server_avatar_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether the server allows avatar changes.  Similar to\n`realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`\nZulip server level setting.\n"
                        },
                        "server_name_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether the server allows name changes.  Similar to\n`realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`\nZulip server level setting.\n"
                        },
                        "notifications_stream_id" : {
                          "type" : "integer",
                          "description" : "The ID of the stream to which notifications announcing the\ncreation of new streams are sent. -1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
                        },
                        "signup_notifications_stream_id" : {
                          "type" : "integer",
                          "description" : "The ID of the stream to which notifications announcing\nthat new users have joined the organization are sent.\n-1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "An object containing the properties that have changed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nconfiguration of the organization (realm) has changed.\n\nUnlike realm / update, supports multiple properties being changed\nin a single event.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "update_dict",
                    "property" : "default",
                    "data" : {
                      "allow_message_editing" : false,
                      "message_content_edit_limit_seconds" : 0,
                      "edit_topic_policy" : 2
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "drafts" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "drafts" : {
                      "type" : "array",
                      "description" : "An array containing objects for the newly created drafts.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/Draft"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event containing details of newly created drafts.\n",
                  "example" : {
                    "type" : "drafts",
                    "op" : "add",
                    "drafts" : [ {
                      "id" : 17,
                      "type" : "private",
                      "to" : [ 6 ],
                      "topic" : "",
                      "content" : "Hello there!",
                      "timestamp" : 15954790200
                    } ]
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "drafts" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "draft" : {
                      "$ref" : "#/components/schemas/Draft"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event containing details for an edited draft.\n",
                  "example" : {
                    "type" : "drafts",
                    "op" : "update",
                    "draft" : {
                      "id" : 17,
                      "type" : "private",
                      "to" : [ 6, 7, 8, 9, 10 ],
                      "topic" : "",
                      "content" : "Hello everyone!",
                      "timestamp" : 15954790200
                    }
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "drafts" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "draft_id" : {
                      "type" : "integer",
                      "description" : "The ID of the draft that was just deleted.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event containing the id of a deleted draft.\n",
                  "example" : {
                    "type" : "drafts",
                    "op" : "update",
                    "draft_id" : 17
                  }
                } ]
              }
            },
            "queue_id" : {
              "type" : "string",
              "description" : "The ID of the registered queue.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "queue_id" : "1375801870:2942",
            "events" : [ {
              "id" : 0,
              "message" : {
                "avatar_url" : "https://url/for/othello-bots/avatar",
                "client" : "website",
                "content" : "I come not, friends, to steal away your hearts.",
                "content_type" : "text/x-markdown",
                "display_recipient" : "Denmark",
                "id" : 12345678,
                "recipient_id" : 12314,
                "sender_email" : "othello-bot@example.com",
                "sender_full_name" : "Othello Bot",
                "sender_id" : 13215,
                "sender_realm_str" : "example",
                "topic_links" : [ ],
                "timestamp" : 1375978403,
                "type" : "stream"
              },
              "type" : "message"
            }, {
              "id" : 1,
              "message" : {
                "avatar_url" : "https://url/for/othello-bots/avatar",
                "client" : "website",
                "content" : "With mirth and laughter let old wrinkles come.",
                "content_type" : "text/x-markdown",
                "display_recipient" : [ {
                  "email" : "hamlet@example.com",
                  "full_name" : "Hamlet of Denmark",
                  "id" : 31572
                } ],
                "id" : 12345679,
                "recipient_id" : 18391,
                "sender_email" : "othello-bot@example.com",
                "sender_full_name" : "Othello Bot",
                "sender_id" : 13215,
                "sender_realm_str" : "example",
                "subject" : "",
                "topic_links" : [ ],
                "timestamp" : 1375978404,
                "type" : "private"
              },
              "type" : "message"
            } ],
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | BadEventQueueIdError |
    	|| Response Model | [BadEventQueueIdError Model|#BadEventQueueIdErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BadEventQueueIdError"
        }, {
          "description" : "#### BAD_EVENT_QUEUE_ID errors\n\nThis error occurs if the target event queue has been garbage collected.\nA compliant client will handle this error by re-initializing itself\n(e.g. a Zulip web app browser window will reload in this case).\n\nSee [the /register endpoint docs](/api/register-queue) for details on how to\nhandle these correctly.\n\nThe following is the error response in such case\n"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. realTimePost
{panel:title=realTimePost|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    
    *Description:* (Ignored)

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/real-time{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |event_types |A JSON-encoded array indicating which types of events you&#39;re interested
in. Values that you might find useful include:

  * **message** (messages)
  * **subscription** (changes in your subscriptions)
  * **realm_user** (changes to users in the organization and
    their properties, such as their name).

If you do not specify this parameter, you will receive all
events, and have to filter out the events not relevant to
your client in your client code.  For most applications, one
is only interested in messages, so one specifies:
&#x60;event_types&#x3D;[&#39;message&#39;]&#x60;

Event types not supported by the server are ignored, in order to simplify
the implementation of client apps that support multiple server versions. | array[String] | (x) |null |  |  ||narrow |A JSON-encoded array of arrays of length 2 indicating the
narrow for which you&#39;d like to receive events for. For
instance, to receive events for the stream &#x60;Denmark&#x60;, you
would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another
example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages.
Default is &#x60;[]&#x60;. | array[array[String]] | (x) |[] |  |  ||all_public_streams |Whether you would like to request message events from all public
streams.  Useful for workflow bots that you&#39;d like to see all new messages
sent to public streams.  (You can also subscribe the user to private streams). | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type |  |
    	|| Response Model | [ Model|#ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success"
}{code} |
       

{panel}



h3. registerQueue
{panel:title=registerQueue|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Register an event queue
    *Description:* &#x60;POST {{ api_url }}/v1/register&#x60;

This powerful endpoint can be used to register a Zulip &quot;event queue&quot;
(subscribed to certain types of &quot;events&quot;, or updates to the messages
and other Zulip data the current user has access to), as well as to
fetch the current state of that data.

(&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is
intended primarily for complex applications for which the more convenient
&#x60;call_on_each_event&#x60; API is insufficient).

This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be
used in subsequent calls to the
[&quot;events&quot; endpoint](/api/get-events) to request events from
the Zulip server using long-polling.

The server will queue events for up to 10 minutes of inactivity.
After 10 minutes, your event queue will be garbage-collected.  The
server will send &#x60;heartbeat&#x60; events every minute, which makes it easy
to implement a robust client that does not miss events unless the
client loses network connectivity with the Zulip server for 10 minutes
or longer.

Once the server garbage-collects your event queue, the server will
[return an error](/api/get-events#bad_event_queue_id-errors)
with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from
the event queue.  Your software will need to handle that error
condition by re-initializing itself (e.g. this is what triggers your
browser reloading the Zulip web app when your laptop comes back online
after being offline for more than 10 minutes).

When prototyping with this API, we recommend first calling &#x60;register&#x60;
with no &#x60;event_types&#x60; parameter to see all the available data from all
supported event types.  Before using your client in production, you
should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters
so that your client only requests the data it needs.  A few minutes
doing this often saves 90% of the total bandwidth and other resources
consumed by a client using this API.

See the
[events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html)
if you need deeper details about how the Zulip event queue system
works, avoids clients needing to worry about large classes of
potentially messy races, etc.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/register{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |apply_markdown |Set to &#x60;true&#x60; if you would like the content to be rendered in HTML
format (otherwise the API will return the raw text that the user
entered) | Boolean | (x) |false |  |  ||client_gravatar |Whether the client supports computing gravatars URLs.  If
enabled, &#x60;avatar_url&#x60; will be included in the response only
if there is a Zulip avatar, and will be &#x60;null&#x60; for users who
are using gravatar as their avatar.  This option
significantly reduces the compressed size of user data,
since gravatar URLs are long, random strings and thus do not
compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if
clients can compute their own gravatars. | Boolean | (x) |false |  |  ||slim_presence |Setting this to &#x60;true&#x60; will make presence dictionaries be keyed by
user_id instead of email.

**Changes**: New in Zulip 3.0 (Unstable with no feature level yet). | Boolean | (x) |false |  |  ||event_types |A JSON-encoded array indicating which types of events you&#39;re interested
in. Values that you might find useful include:

  * **message** (messages)
  * **subscription** (changes in your subscriptions)
  * **realm_user** (changes to users in the organization and
    their properties, such as their name).

If you do not specify this parameter, you will receive all
events, and have to filter out the events not relevant to
your client in your client code.  For most applications, one
is only interested in messages, so one specifies:
&#x60;event_types&#x3D;[&#39;message&#39;]&#x60;

Event types not supported by the server are ignored, in order to simplify
the implementation of client apps that support multiple server versions. | array[String] | (x) |null |  |  ||all_public_streams |Whether you would like to request message events from all public
streams.  Useful for workflow bots that you&#39;d like to see all new messages
sent to public streams.  (You can also subscribe the user to private streams). | Boolean | (x) |false |  |  ||include_subscribers |Whether each returned stream object should include a &#x60;subscribers&#x60;
field containing a list of the user IDs of its subscribers.

(This may be significantly slower in organizations with
thousands of users subscribed to many streams.)

**Changes**: New in Zulip 2.1.0. | Boolean | (x) |false |  |  ||client_capabilities |Dictionary containing details on features the client supports that are
relevant to the format of responses sent by the server.

* &#x60;notification_settings_null&#x60;: Boolean for whether the
  client can handle the current API with null values for
  stream-level notification settings (which means the stream
  is not customized and should inherit the user&#39;s global
  notification settings for stream messages).
  &lt;br /&gt;
  New in Zulip 2.1.0; in earlier Zulip releases, stream-level
  notification settings were simple booleans.

* &#x60;bulk_message_deletion&#x60;: Boolean for whether the client&#39;s
   handler for the &#x60;delete_message&#x60; event type has been
   updated to process the new bulk format (with a
   &#x60;message_ids&#x60;, rather than a singleton &#x60;message_id&#x60;).
   Otherwise, the server will send &#x60;delete_message&#x60; events
   in a loop.
   &lt;br /&gt;
   New in Zulip 3.0 (feature level 13).  This
   capability is for backwards-compatibility; it will be
   required in a future server release.

* &#x60;user_avatar_url_field_optional&#x60;: Boolean for whether the
   client required avatar URLs for all users, or supports
   using &#x60;GET /avatar/{user_id}&#x60; to access user avatars.  If the
   client has this capability, the server may skip sending a
   &#x60;avatar_url&#x60; field in the &#x60;realm_user&#x60; at its sole discretion
   to optimize network performance.  This is an important optimization
   in organizations with 10,000s of users.
   &lt;br /&gt;
   New in Zulip 3.0 (feature level 18).

* &#x60;stream_typing_notifications&#x60;: Boolean for whether the client
  supports stream typing notifications.
  &lt;br /&gt;
  New in Zulip 4.0 (feature level 58).  This capability is
  for backwards-compatibility; it will be required in a
  future server release.

* &#x60;user_settings_object&#x60;: Boolean for whether the client supports the modern
  &#x60;user_settings&#x60; event type. If False, the server will additionally send the
  legacy &#x60;update_display_settings&#x60; and &#x60;update_global_notifications&#x60; event
  types for backwards-compatibility with clients that predate this API migration.
  &lt;br /&gt;
  &lt;br /&gt;
  Because the feature level 89 API changes were merged together, clients can
  safely make a request with this client capability and requesting all of the
  &#x60;user_settings&#x60;, &#x60;update_display_settings&#x60;, and
  &#x60;update_global_notifications&#x60; event types, and get exactly one copy of
  settings data on any server version. (And then use the &#x60;zulip_feature_level&#x60;
  in the &#x60;/register&#x60; response or the presence/absence of a &#x60;user_settings&#x60; key
  to determine where to look).
  &lt;br /&gt;
  New in Zulip 5.0 (feature level 89).  This capability is for
  backwards-compatibility; it will be removed in a future server release. | Object | (x) |null |  |  ||fetch_event_types |Same as the &#x60;event_types&#x60; parameter except that the values in
&#x60;fetch_event_types&#x60; are used to fetch initial data. If
&#x60;fetch_event_types&#x60; is not provided, &#x60;event_types&#x60; is used and if
&#x60;event_types&#x60; is not provided, this parameter defaults to &#x60;None&#x60;.

Event types not supported by the server are ignored, in order to simplify
the implementation of client apps that support multiple server versions. | array[String] | (x) |null |  |  ||narrow |A JSON-encoded array of arrays of length 2 indicating the
narrow for which you&#39;d like to receive events for. For
instance, to receive events for the stream &#x60;Denmark&#x60;, you
would specify &#x60;narrow&#x3D;[[&#39;stream&#39;, &#39;Denmark&#39;]]&#x60;.  Another
example is &#x60;narrow&#x3D;[[&#39;is&#39;, &#39;private&#39;]]&#x60; for private messages.
Default is &#x60;[]&#x60;. | array[array[String]] | (x) |[] |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "queue_id" : {
              "type" : "string",
              "description" : "The ID of the queue that has been allocated for your client.\n"
            },
            "last_event_id" : {
              "type" : "integer",
              "description" : "The initial value of `last_event_id` to pass to `GET /api/v1/events`.\n"
            },
            "zulip_feature_level" : {
              "type" : "integer",
              "description" : "The server's current [Zulip feature level](/api/changelog).\n"
            },
            "zulip_version" : {
              "type" : "string",
              "description" : "The server's version number.  This is often a release version number,\nlike `2.1.7`. But for a server running a [version from Git][git-release],\nit will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.\n\n[git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions\n"
            },
            "zulip_merge_base" : {
              "type" : "string",
              "description" : "The `git merge-base` between `zulip_verson` and official branches\nin the public\n[Zulip server and web app repository](https://github.com/zulip/zulip),\nin the same format as `zulip_version`. This will equal\n`zulip_version` if the server is not running a fork of the Zulip server.\n\nThis will be `\"\"` if the server does not know its `merge-base`.\n\n**Changes**: New in Zulip 5.0 (feature level 88).\n"
            },
            "alert_words" : {
              "type" : "array",
              "description" : "Present if `alert_words` is present in `fetch_event_types`.\n\nAn array of strings, each an [alert word](/help/add-an-alert-word)\nthat the current user has configured.\n",
              "items" : {
                "type" : "string"
              }
            },
            "custom_profile_fields" : {
              "type" : "array",
              "description" : "Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n An array of dictionaries where each dictionary contains the\n details of a single custom profile field that is available to users\n in this Zulip organization.  This must be combined with the custom profile\n field values on individual user objects to display users' full profiles.\n",
              "items" : {
                "$ref" : "#/components/schemas/CustomProfileField"
              }
            },
            "custom_profile_field_types" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer",
                    "description" : "The id of the custom profile field type.\n"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the custom profile field type.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{FIELD_TYPE}`: Dictionary which contains the details\nof the field type with the field type as the name of the\nproperty itself. The current supported field types are as follows:\n* `SHORT_TEXT`\n* `LONG_TEXT`\n* `DATE` for date-based fields.\n* `CHOICE` for a list of options.\n* `URL` for links.\n* `EXTERNAL_ACCOUNT` for external accounts.\n* `USER` for selecting a user for the field.\n"
              },
              "description" : "Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n An array of objects; each object describes a type of custom profile field\n that could be configured on this Zulip server.  Each custom profile type\n has a id and the `type` property of a custom profile field is equal\n to one of these ids.\n\n This attribute is only useful for clients containing UI for changing\n the set of configured custom profile fields in a Zulip organization.\n"
            },
            "drafts" : {
              "type" : "array",
              "description" : "An array containing draft objects for the user. These drafts are being\nstored on the backend for the purpose of syncing across devices. This\narray will be empty if `enable_drafts_synchronization` is set to `false`.\n",
              "items" : {
                "$ref" : "#/components/schemas/Draft"
              }
            },
            "hotspots" : {
              "type" : "array",
              "description" : "Present if `hotspots` is present in `fetch_event_types`.\n\n An array of dictionaries, where each dictionary contains details about\n a single onboarding hotspot that should be shown to new users.\n\n We expect that only official Zulip clients will interact with these data.\n",
              "items" : {
                "$ref" : "#/components/schemas/Hotspot"
              }
            },
            "max_message_id" : {
              "type" : "integer",
              "description" : "Present if `message` is present in `fetch_event_types`.\n\nThe highest message ID among all messages the user has received as of the\nmoment of this request.\n\n**Deprecated**: This field may be removed in future versions as it no\nlonger has a clear purpose.  Clients wishing to fetch the latest messages\nshould pass `anchor=\"latest\"` to `GET /messages`.\n",
              "deprecated" : true
            },
            "max_stream_name_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a stream name.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis required `stream` in `fetch_event_types`, was called\n`stream_name_max_length`, and always had value 60.\n"
            },
            "max_stream_description_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a stream description.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis required `stream` in `fetch_event_types`, was called\n`stream_description_max_length`, and always had value 1024.\n"
            },
            "max_topic_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a topic.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis always had value 60.\n"
            },
            "max_message_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a message.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis always had value 10000.\n"
            },
            "muted_topics" : {
              "type" : "array",
              "description" : "Present if `muted_topics` is present in `fetch_event_types`.\n\nArray of tuples, where each tuple describes a muted topic.\nThe first element of tuple is the stream name in which the topic\nhas to be muted, the second element is the topic name to be muted\nand the third element is an integer UNIX timestamp representing\nwhen the topic was muted.\n",
              "items" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "type" : "string"
                  }, {
                    "type" : "integer"
                  } ]
                }
              }
            },
            "muted_users" : {
              "type" : "array",
              "description" : "Present if `muted_users` is present in `fetch_event_types`.\n\nA list of dictionaries where each dictionary describes\na [muted user](/api/mute-user).\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the muted user.\n"
                  },
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "An integer UNIX timestamp representing when the user was muted.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing the user id and timestamp of a muted user.\n"
              }
            },
            "presences" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/Presence"
                },
                "description" : "`{user_id} or {user_email}`: Depending on the value of `slim_presence`.\nEach entry contains the details of the presence of the user with the specific\nid or email.\n"
              },
              "description" : "Present if `presence` is present in `fetch_event_types`.\n\nA dictionary where each entry describes the presence details for another\nuser in the Zulip organization.\n\nUsers who have been offline for multiple weeks may not appear in this object.\n"
            },
            "server_timestamp" : {
              "type" : "number",
              "description" : "Present if `presence` is present in `fetch_event_types`.\n\nThe time when the server fetched the\n`presences` data included in the response.\nMatches the similar field in presence\nresponses.\n\n**Changes**: New in Zulip 5.0 (feature level 70).\n"
            },
            "realm_domains" : {
              "type" : "array",
              "description" : "Present if `realm_domains` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a domain within\nwhich users can join the organization without and invitation.\n",
              "items" : {
                "$ref" : "#/components/schemas/RealmDomain"
              }
            },
            "realm_emoji" : {
              "description" : "Present if `realm_emoji` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a custom\nemoji that has been uploaded in this Zulip organization.\n",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/RealmEmoji"
                }
              }, {
                "type" : "array",
                "items" : {
                  "type" : "integer"
                }
              } ]
            },
            "realm_linkifiers" : {
              "type" : "array",
              "description" : "Present if `realm_linkifiers` is present in `fetch_event_types`.\n\nArray of objects where each object describes a single\n[linkifier](/help/add-a-custom-linkifier).\n\n**Changes**: New in Zulip 4.0 (feature level 54). Clients can\naccess these data on older server versions via the previous\n`realm_filters` key.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "pattern" : {
                    "type" : "string",
                    "description" : "The string regex pattern which represents the pattern that\nshould be linkified on matching.\n"
                  },
                  "url_format" : {
                    "type" : "string",
                    "description" : "The URL with which the pattern matching string should be linkified.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the linkifier.\n"
                  }
                },
                "additionalProperties" : false
              }
            },
            "realm_filters" : {
              "type" : "array",
              "description" : "Legacy property for linkifiers. Present if `realm_filters` is\npresent in `fetch_event_types`.\n\nAn array of tuples (fixed-length arrays) where each tuple describes\na single [linkifier](/help/add-a-custom-linkifier).\nThe first element of the tuple is a string regex pattern which represents\nthe pattern that should be linkified on matching.\n\nThe second element is the URL with which the\npattern matching string should be linkified with and the third element\nis the id of the realm filter.\n\n**Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\nthe `realm_linkifiers` key instead.\n",
              "deprecated" : true,
              "items" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "type" : "integer"
                  }, {
                    "type" : "string"
                  } ]
                }
              }
            },
            "realm_playgrounds" : {
              "type" : "array",
              "description" : "Present if `realm_playgrounds` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a\n[code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.\n\n**Changes**: New in Zulip 4.0 (feature level 49).\n",
              "items" : {
                "$ref" : "#/components/schemas/RealmPlayground"
              }
            },
            "realm_user_groups" : {
              "type" : "array",
              "description" : "Present if `realm_user_groups` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a\n[user group](/help/user-groups) in the Zulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            },
            "realm_bots" : {
              "type" : "array",
              "description" : "Present if `realm_bot` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a bot that the\ncurrent user can administer.  If the current user is an organization\nadministrator, this will include all bots in the organization.  Otherwise,\nit will only include bots owned by the user (either because the user created\nthe bot or an administrator transferred the bot's ownership to the user).\n",
              "items" : {
                "$ref" : "#/components/schemas/Bot"
              }
            },
            "realm_embedded_bots" : {
              "type" : "array",
              "description" : "Present if `realm_embedded_bots` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes an type of embedded\nbot that is available to be configured on this Zulip server.\n\nClients only need these data if they contain UI for creating or administering bots.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the bot.\n"
                  },
                  "config" : {
                    "$ref" : "#/components/schemas/Config"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing details of an embedded bot.  Embedded bots are an experimental\nfeature not enabled in production yet.\n"
              }
            },
            "realm_incoming_webhook_bots" : {
              "type" : "array",
              "description" : "Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes an type of incoming webhook\nintegration that is available to be configured on this Zulip server.\n\nClients only need these data if they contain UI for creating or administering bots.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the bot.\n"
                  },
                  "config" : {
                    "$ref" : "#/components/schemas/Config"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing details of the bot.\n"
              }
            },
            "recent_private_conversations" : {
              "type" : "array",
              "description" : "Present if `recent_private_conversations` is present in `fetch_event_types`.\n\nAn array of dictionaries containing data on all private message and group private message\nconversations that the user has received (or sent) messages in, organized by\nconversation.  This data set is designed to support UI elements such as the\n\"Private messages\" widget in the web application showing recent private message\nconversations that the user has participated in.\n\n\"Recent\" is defined as the server's discretion; the original implementation\ninterpreted that as \"the 1000 most recent private messages the user received\".\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "max_message_id" : {
                    "type" : "integer",
                    "description" : "The highest message id of the conversation, intended to support sorting\nthe conversations by recency.\n"
                  },
                  "user_ids" : {
                    "type" : "array",
                    "description" : "The list of users other than the current user in the private message\nconversation.  This will be an empty list for private messages sent to\noneself.\n",
                    "items" : {
                      "type" : "integer"
                    }
                  }
                },
                "additionalProperties" : false,
                "description" : "Object describing a single recent private conversation in the user's history.\n"
              }
            },
            "subscriptions" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes the properties\nof a stream the user is subscribed to (as well as that user's\npersonal per-stream settings).\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            },
            "unsubscribed" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes one of the\nstreams the user has unsubscribed from but was previously subscribed to\nalong with the subscription details.\n\nUnlike `never_subscribed`, the user might have messages in their personal\nmessage history that were sent to these streams.\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            },
            "never_subscribed" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes one of the\nstreams that is visible to the user and the user has never been subscribed\nto.\n\nImportant for clients containing UI where one can browse streams to subscribe\nto.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/BasicStreamBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "stream_id" : { },
                    "name" : { },
                    "description" : { },
                    "date_created" : { },
                    "invite_only" : { },
                    "rendered_description" : { },
                    "is_web_public" : { },
                    "stream_post_policy" : { },
                    "message_retention_days" : { },
                    "history_public_to_subscribers" : { },
                    "first_message_id" : { },
                    "is_announcement_only" : { },
                    "stream_weekly_traffic" : {
                      "type" : "integer",
                      "description" : "The average number of messages sent to the stream in recent weeks,\nrounded to the nearest integer.\n\nNull means the stream was recently created and there is\ninsufficient data to estimate the average traffic.\n",
                      "nullable" : true
                    },
                    "subscribers" : {
                      "type" : "array",
                      "description" : "A list of user IDs of users who are subscribed\nto the stream. Included only if `include_subscribers` is `true`.\n\nIf a user is not allowed to know the subscribers for\na stream, we will send an empty array.  API authors\nshould use other data to determine whether users like\nguest users are forbidden to know the subscribers.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            },
            "unread_msgs" : {
              "type" : "array",
              "properties" : {
                "count" : {
                  "type" : "integer",
                  "description" : "The total number of unread messages to display; this includes private\nand group private messages, as well as all messages to unmuted topics\non unmuted streams.\n"
                },
                "pms" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each entry contains details\nof unread private messages with a specific user.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "sender_id" : {
                        "type" : "integer",
                        "description" : "The user id of the other participant in a PM conversation.\n"
                      },
                      "message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread PM messages sent by the other user.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "Object containing the details of a unread private\nmessage with a specific user.\n"
                  }
                },
                "streams" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each dictionary contains\ndetails of all unread messages of a single subscribed stream,\nincluding muted streams.\n\n**Changes**: Prior to Zulip 5.0 (feature level 90), the\ndictionaries included an additional `sender_ids` key listing\nthe set of IDs of users who had sent the unread messages.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "topic" : {
                        "type" : "string",
                        "description" : "The topic under which the message was sent.\n"
                      },
                      "stream_id" : {
                        "type" : "integer",
                        "description" : "The id of the stream to which the message was sent.\n"
                      },
                      "unread_message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread messages sent in this stream.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "`{message_id}`: Object containing the details of a unread stream\nmessage with the message_id as the key.\n"
                  }
                },
                "huddles" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each dictionary contains\ndetails of all unread group private messages of a single\ngroup.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "user_ids_string" : {
                        "type" : "string",
                        "description" : "A string containing the ids of all users in the huddle(group PMs)\nseparated by commas(,). Example: \"1,2,3\".\n"
                      },
                      "message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread messages which have been sent in\nthis group.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "Object containing the details of a unread group PM\nmessages of a single group.\n"
                  }
                },
                "mentions" : {
                  "type" : "array",
                  "description" : "Array containing the ids of all messages in which the user has been mentioned.\nFor muted streams, wildcard mentions will not be considered for this array.\n",
                  "items" : {
                    "type" : "integer"
                  }
                },
                "old_unreads_missing" : {
                  "type" : "boolean",
                  "description" : "True if this data set was truncated because the user has too many\nunread messages.  When truncation occurs, only the most recent\n`MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered\nwhen forming this response.  When true, we recommend that clients\ndisplay a warning, as they are likely to produce erroneous results\nuntil reloaded with the user having fewer than `MAX_UNREAD_MESSAGES`\nunread messages.\n\n**Changes**: New in Zulip 4.0 (feature level 44).\n"
                }
              },
              "additionalProperties" : false,
              "description" : "Present if `message` and `update_message_flags` are both present in\n`event_types`.\n\nA set of data structures describing the conversations containing\nthe 50000 most recent unread messages the user has received.  This will usually\ncontain every unread message the user has received, but clients should support\nusers with even more unread messages (and not hardcode the number 50000).\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "starred_messages" : {
              "type" : "array",
              "description" : "Present if `starred_messages` is present in `fetch_event_types`.\n\nArray containing the ids of all messages which have been\n[starred](/help/star-a-message) by the user.\n",
              "items" : {
                "type" : "integer"
              }
            },
            "streams" : {
              "type" : "array",
              "description" : "Present if `stream` is present in `fetch_event_types`.\n\nArray of dictionaries where each dictionary contains details about\na single stream in the organization that is visible to the user.\n\nFor organization administrators, this will include all private streams\nin the organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "realm_default_streams" : {
              "type" : "array",
              "description" : "Present if `default_streams` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary contains details\nabout a single [default stream](/help/set-default-streams-for-new-users)\nfor the Zulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "realm_default_stream_groups" : {
              "type" : "array",
              "description" : "Present if `default_stream_groups` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary contains details\nabout a single default stream group configured for this\nZulip organization.\n\nDefault stream groups are an experimental feature.\n",
              "items" : {
                "$ref" : "#/components/schemas/DefaultStreamGroup"
              }
            },
            "stop_words" : {
              "type" : "array",
              "description" : "Present if `stop_words` is present in `fetch_event_types`.\n\nAn array containing the stop words used by the Zulip server's\nfull-text search implementation.  Useful for showing helpful\nerror messages when a search returns limited results because\na stop word in the query was ignored.\n",
              "items" : {
                "type" : "string"
              }
            },
            "user_status" : {
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "away" : {
                    "type" : "boolean",
                    "description" : "Whether the user has marked themself \"away\".\n"
                  },
                  "status_text" : {
                    "type" : "string",
                    "description" : "The text content of the status message.\n"
                  },
                  "emoji_name" : {
                    "type" : "string",
                    "description" : "The [emoji name](/api/add-reaction#parameters) for the emoji associated with the new status.\n\n**Changes**: New in Zulip 5.0 (feature level 86).\n"
                  },
                  "emoji_code" : {
                    "type" : "string",
                    "description" : "The [emoji code](/api/add-reaction#parameters) for the emoji associated with the new status.\n\n**Changes**: New in Zulip 5.0 (feature level 86).\n"
                  },
                  "reaction_type" : {
                    "type" : "string",
                    "description" : "The [emoji type](/api/add-reaction#parameters) for the emoji associated with the new status.\n\n**Changes**: New in Zulip 5.0 (feature level 86).\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{user_id}`: Object containing the status details of a user\nwith the key of the object being the id of the user.\n"
              },
              "description" : "Present if `user_status` is present in `fetch_event_types`.\n\nA dictionary which contains the [status](/help/status-and-availability)\nof all users in the Zulip organization who have set a status.\n\n**Changes**: The emoji parameters are new in Zulip 5.0 (feature level 86).\nPreviously, Zulip did not support emoji associated with statuses.\n\nA status that does not have an emoji associated with it is encoded\nwith `emoji_name=\"\"`.\n",
              "allOf" : [ {
                "$ref" : "#/components/schemas/EmojiBase"
              } ]
            },
            "user_settings" : {
              "type" : "object",
              "properties" : {
                "twenty_four_hour_time" : {
                  "type" : "boolean",
                  "description" : "Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n"
                },
                "dense_mode" : {
                  "type" : "boolean",
                  "description" : "This setting has no effect at present.  It is reserved for use in controlling\nthe default font size in Zulip.\n"
                },
                "starred_message_counts" : {
                  "type" : "boolean",
                  "description" : "Whether clients should display the [number of starred\nmessages](/help/star-a-message#display-the-number-of-starred-messages).\n"
                },
                "fluid_layout_width" : {
                  "type" : "boolean",
                  "description" : "Whether to use the [maximum available screen width](/help/enable-full-width-display)\nfor the web app's center panel (message feed, recent topics) on wide screens.\n"
                },
                "high_contrast_mode" : {
                  "type" : "boolean",
                  "description" : "This setting is reserved for use to control variations in Zulip's design\nto help visually impaired users.\n"
                },
                "color_scheme" : {
                  "type" : "integer",
                  "description" : "Controls which [color theme](/help/night-mode) to use.\n\n* 1 - Automatic\n* 2 - Night mode\n* 3 - Day mode\n\nAutomatic detection is implementing using the standard `prefers-color-scheme`\nmedia query.\n"
                },
                "translate_emoticons" : {
                  "type" : "boolean",
                  "description" : "Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\nin messages the user sends.\n"
                },
                "default_language" : {
                  "type" : "string",
                  "description" : "What [default language](/help/change-your-language) to use for the account.\n\nThis controls both the Zulip UI as well as email notifications sent to the user.\n\nThe value needs to be a standard language code that the Zulip server has\ntranslation data for; for example, `\"en\"` for English or `\"de\"` for German.\n"
                },
                "default_view" : {
                  "type" : "string",
                  "description" : "The [default view](/help/change-default-view) used when opening a new\nZulip web app window or hitting the `Esc` keyboard shortcut repeatedly.\n\n* \"recent_topics\" - Recent topics view\n* \"all_messages\" - All messages view\n"
                },
                "left_side_userlist" : {
                  "type" : "boolean",
                  "description" : "Whether the users list on left sidebar in narrow windows.\n\nThis feature is not heavily used and is likely to be reworked.\n"
                },
                "emojiset" : {
                  "type" : "string",
                  "description" : "The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\nused to display emoji to the user everything they appear in the UI.\n\n* \"google\" - Google modern\n* \"google-blob\" - Google classic\n* \"twitter\" - Twitter\n* \"text\" - Plain text\n"
                },
                "demote_inactive_streams" : {
                  "type" : "integer",
                  "description" : "Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n* 1 - Automatic\n* 2 - Always\n* 3 - Never\n"
                },
                "timezone" : {
                  "type" : "string",
                  "description" : "The user's [configured timezone](/help/change-your-timezone).\n\nTimezone values supported by the server are served at\n[/static/generated/timezones.json](/static/generated/timezones.json).\n"
                },
                "enter_sends" : {
                  "type" : "boolean",
                  "description" : "Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\nin the compose box is enabled.\n"
                },
                "enable_drafts_synchronization" : {
                  "type" : "boolean",
                  "description" : "A boolean parameter to control whether synchronizing drafts is enabled for\nthe user. When synchronization is disabled, all drafts stored in the server\nwill be automatically deleted from the server.\n\nThis does not do anything (like sending events) to delete local copies of\ndrafts stored in clients.\n"
                },
                "enable_stream_desktop_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable visual desktop notifications for stream messages.\n"
                },
                "enable_stream_email_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable email notifications for stream messages.\n"
                },
                "enable_stream_push_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable mobile notifications for stream messages.\n"
                },
                "enable_stream_audible_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable audible desktop notifications for stream messages.\n"
                },
                "notification_sound" : {
                  "type" : "string",
                  "description" : "Notification sound name.\n"
                },
                "enable_desktop_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable visual desktop notifications for private messages and @-mentions.\n"
                },
                "enable_sounds" : {
                  "type" : "boolean",
                  "description" : "Enable audible desktop notifications for private messages and\n@-mentions.\n"
                },
                "email_notifications_batching_period_seconds" : {
                  "type" : "integer",
                  "description" : "The duration (in seconds) for which the server should wait to batch\nemail notifications before sending them.\n"
                },
                "enable_offline_email_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable email notifications for private messages and @-mentions received\nwhen the user is offline.\n"
                },
                "enable_offline_push_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable mobile notification for private messages and @-mentions received\nwhen the user is offline.\n"
                },
                "enable_online_push_notifications" : {
                  "type" : "boolean",
                  "description" : "Enable mobile notification for private messages and @-mentions received\nwhen the user is online.\n"
                },
                "enable_digest_emails" : {
                  "type" : "boolean",
                  "description" : "Enable digest emails when the user is away.\n"
                },
                "enable_marketing_emails" : {
                  "type" : "boolean",
                  "description" : "Enable marketing emails. Has no function outside Zulip Cloud.\n"
                },
                "enable_login_emails" : {
                  "type" : "boolean",
                  "description" : "Enable email notifications for new logins to account.\n"
                },
                "message_content_in_email_notifications" : {
                  "type" : "boolean",
                  "description" : "Include the message's content in email notifications for new messages.\n"
                },
                "pm_content_in_desktop_notifications" : {
                  "type" : "boolean",
                  "description" : "Include content of private messages in desktop notifications.\n"
                },
                "wildcard_mentions_notify" : {
                  "type" : "boolean",
                  "description" : "Whether wildcard mentions (E.g. @**all**) should send notifications\nlike a personal mention.\n"
                },
                "desktop_icon_count_display" : {
                  "type" : "integer",
                  "description" : "Unread count summary (appears in desktop sidebar and browser tab)\n\n* 1 - All unreads\n* 2 - Private messages and mentions\n* 3 - None\n"
                },
                "realm_name_in_notifications" : {
                  "type" : "boolean",
                  "description" : "Include organization name in subject of message notification emails.\n"
                },
                "presence_enabled" : {
                  "type" : "boolean",
                  "description" : "Display the presence status to other users when online.\n"
                },
                "available_notification_sounds" : {
                  "type" : "array",
                  "description" : "Array containing the names of the notification sound options\nsupported by this Zulip server.  Only relevant to support UI\nfor configuring notification sounds.\n",
                  "items" : {
                    "type" : "string"
                  }
                },
                "emojiset_choices" : {
                  "type" : "array",
                  "description" : "Array of dictionaries where each dictionary describes an emojiset\nsupported by this version of the Zulip server.\n\nOnly relevant to clients with configuration UI for choosing an emojiset;\nthe currently selected emojiset is available in the `emojiset` key.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "key" : {
                        "type" : "string",
                        "description" : "The key or the name of the emojiset which will be the value\nof `emojiset` if this emojiset is chosen.\n"
                      },
                      "text" : {
                        "type" : "string",
                        "description" : "The text describing the emojiset.\n"
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "Object describing a emojiset.\n"
                  }
                }
              },
              "additionalProperties" : false,
              "description" : "Present if `user_settings` is present in `fetch_event_types`.\n\nA dictionary containing the user's personal settings.\n\n**Changes**: New in Zulip 5.0 (feature level 89). Previously,\nthese settings appeared in the top-level object, where they are\navailable for clients without the `user_settings_object` client\ncapability for backwards-compatibility.\n"
            },
            "has_zoom_token" : {
              "type" : "boolean",
              "description" : "Present if `video_calls` is present in `fetch_event_types`.\n\nA boolean which signifies whether the user has a zoom token and has thus completed\nOAuth flow for the [Zoom integration](/help/start-a-call).  Clients need\nto know whether initiating Zoom OAuth is required before creating a Zoom call.\n"
            },
            "giphy_api_key" : {
              "type" : "string",
              "description" : "Present if `giphy` is present in `fetch_event_types`.\n\nGIPHY's client-side SDKs needs this API key to use the GIPHY API.\nGIPHY API keys are not secret (their main purpose appears to be\nallowing GIPHY to block a problematic app).  Please don't use our API\nkey for an app unrelated to Zulip.\n\nDevelopers of clients should also read the\n[GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-)\nbefore using this API key.\n\n**Changes**: Added in Zulip 4.0 (feature level 47).\n"
            },
            "enable_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_digest_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_login_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_marketing_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "email_notifications_batching_period_seconds" : {
              "type" : "integer",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_offline_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_offline_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_online_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_sounds" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_stream_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_stream_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_stream_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_stream_audible_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "wildcard_mentions_notify" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "message_content_in_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "notification_sound" : {
              "type" : "string",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "pm_content_in_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "desktop_icon_count_display" : {
              "type" : "integer",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "realm_name_in_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "presence_enabled" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nThe current value of this global notification setting for the user.\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "available_notification_sounds" : {
              "type" : "array",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in their\nclient_capabilities` when registering the event queue.\n\nArray containing the names of the notification sound options supported by\nthis Zulip server.  Only relevant to support UI for configuring notification\nsounds.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true,
              "items" : {
                "type" : "string"
              }
            },
            "color_scheme" : {
              "type" : "integer",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nThe color scheme selected by the user.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "default_language" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nThe default language chosen by the user.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "demote_inactive_streams" : {
              "type" : "integer",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen to demote inactive streams.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "dense_mode" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has switched on dense mode.  Dense mode is an experimental\nfeature that is only available in development environments.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "emojiset" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nThe name of the emojiset that the user has chosen.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "enable_drafts_synchronization" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether drafts synchronization is enabled for the user. If disabled,\nclients will receive an error when trying to use the `drafts` endpoints.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n\nNew in Zulip 5.0 (feature level 87).\n",
              "deprecated" : true
            },
            "fluid_layout_width" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen for the layout width to be fluid.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "default_view" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nThe [default view](/help/change-default-view) in Zulip, represented\nas the URL suffix after `#` to be rendered when Zulip loads.\n\nCurrently supported values are `all_messages` and `recent_topics`.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "high_contrast_mode" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether has switched on high contrast mode.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "left_side_userlist" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen for the userlist to be displayed\non the left side of the screen (for desktop app and web app) in narrow\nwindows.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "starred_message_counts" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen the number of starred messages to\nbe displayed similar to unread counts.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "timezone" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nThe timezone configured for the user.  This is used primarily to display\nthe user's timezone to other users.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "translate_emoticons" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen for emoticons to be translated into emoji\nin the Zulip compose box.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "twenty_four_hour_time" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user has chosen a twenty four hour time display (true)\nor a twelve hour one (false).\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true
            },
            "emojiset_choices" : {
              "type" : "array",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nArray of dictionaries where each dictionary describes an emojiset\nsupported by this version of the Zulip server.\n\nOnly relevant to clients with configuration UI for choosing an emojiset;\nthe currently selected emojiset is available in the `emojiset` key.\n\nSee [PATCH /settings](/api/update-settings) for details on\nthe meaning of this setting.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and access the `user_settings` object instead.\n",
              "deprecated" : true,
              "items" : {
                "type" : "object",
                "properties" : {
                  "key" : {
                    "type" : "string",
                    "description" : "The key or the name of the emojiset which will be the value\nof `emojiset` if this emojiset is chosen.\n"
                  },
                  "text" : {
                    "type" : "string",
                    "description" : "The text describing the emojiset.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object describing a emojiset.\n"
              }
            },
            "realm_add_custom_emoji_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can upload new custom emoji in this\norganization.\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 5.0 (feature level 85) replacing the\nprevious `realm_add_emoji_by_admins_only` boolean.\n"
            },
            "realm_allow_edit_history" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization is configured to allow users to access\n[message edit history](/help/view-a-messages-edit-history).\n"
            },
            "realm_allow_message_deleting" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether messages can be deleted in this Zulip organization.\n"
            },
            "realm_bot_creation_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can create bot users in this organization.\n"
            },
            "realm_create_stream_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can create streams in this organization.\n"
            },
            "realm_invite_to_stream_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can add other users to streams in this\norganization.\n"
            },
            "realm_wildcard_mention_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for who can use wildcard mentions in large streams.\n\n* 1 => Any user can use wildcard mentions in large streams.\n* 2 => Only members can use wildcard mentions in large streams.\n* 3 => Only full members can use wildcard mentions in large streams.\n* 4 => Only stream and organization administrators can use wildcard mentions in large streams.\n* 5 => Only organization administrators can use wildcard mentions in large streams.\n* 6 => Nobody can use wildcard mentions in large streams.\n* 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.\n\nAll users will receive a warning/reminder when using\nmentions in large streams, even when permitted to do so.\n\n**Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\nZulip 4.0 (feature level 62).\n"
            },
            "realm_default_language" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default UI language for new users joining this organization.\n"
            },
            "realm_default_twenty_four_hour_time" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether new members of this organization will see times displayed in\n24-hour time (true) or 12-hour time (false).\n"
            },
            "realm_description" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe description of the organization, used on login and registration pages.\n"
            },
            "realm_digest_emails_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization has enabled [weekly digest emails](/help/digest-emails).\n"
            },
            "realm_disallow_disposable_email_addresses" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization disallows disposable email\naddresses.\n"
            },
            "realm_email_address_visibility" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users in this organization can see the\nreal email addresses of other users.\n\n* 1 = everyone\n* 2 = members only\n* 3 = administrators only\n* 4 = nobody (though note that administrators can change this setting).\n* 5 = moderators only\n"
            },
            "realm_email_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether users are allowed to change their own email address in this\norganization.  This is typically disabled for organizations that\nsynchronize accounts from LDAP or a similar corporate database.\n"
            },
            "realm_invite_required" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether an invitation is required to join this organization.\n"
            },
            "realm_invite_to_realm_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nPolicy for [who can invite new users](/help/invite-new-users#change-who-can-send-invitations)\nto join the organization:\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n* 6 = Nobody\n\n**Changes**: New in Zulip 4.0 (feature level 50) replacing the\nprevious `realm_invite_by_admins_only` boolean.\n"
            },
            "realm_move_messages_between_streams_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can move messages from one stream to another.\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 56)\n"
            },
            "realm_inline_image_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization has been configured to enable\n[previews of linked images](/help/allow-image-link-previews).\n"
            },
            "realm_inline_url_embed_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization has been configured to enable\n[previews of linked websites](/help/allow-image-link-previews).\n"
            },
            "realm_mandatory_topics" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether [topics are required](/help/require-topics) for messages in this organization.\n"
            },
            "realm_message_retention_days" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default [message retention policy](/help/message-retention-policy)\nfor this organization.  Pass `\"forever\"` to request that messages\nby retained forever (the default).\n"
            },
            "realm_name" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe name of the organization, used in login pages etc.\n"
            },
            "realm_name_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nIndicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their name\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
            },
            "realm_avatar_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nIndicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their avatar\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
            },
            "realm_emails_restricted_to_domains" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether [new users joining](/help/allow-anyone-to-join-without-an-invitation)\nthis organization are required to have an email\naddress in one of the `realm_domains` configured for the organization.\n"
            },
            "realm_send_welcome_emails" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether or not this organization is configured to send the standard Zulip\n[welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n"
            },
            "realm_message_content_allowed_in_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether notification emails in this organization are allowed to\ncontain Zulip the message content, or simply indicate that a new\nmessage was sent.\n"
            },
            "realm_video_chat_provider" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe configured video call provider for the organization.\n"
            },
            "realm_giphy_rating" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe configured GIPHY rating for the organization.\n\n**Changes**: New in Zulip 4.0 (feature level 55).\n"
            },
            "realm_waiting_period_threshold" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMembers whose accounts have been created at least this many days ago\nwill be treated as [full members](/help/restrict-permissions-of-new-members)\nfor the purpose of settings that restrict access to new members.\n"
            },
            "realm_digest_weekday" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe day of the week when the organization will send\nits weekly digest email to inactive users.\n"
            },
            "realm_private_message_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nPolicy for [who can send private messages](/help/restrict-private-messages)\nin this organization.\n\n* 1 = Everyone\n* 2 = Nobody\n"
            },
            "realm_user_group_edit_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe organization's policy for [who can manage user groups\n](/help/restrict-user-group-management).\n\n* 1 = All members can create and edit user groups\n* 2 = Only organization administrators can create and edit user groups\n* 3 = Only full members can create and edit user groups.\n* 4 = Only organization administrators and moderators can create and edit user groups.\n"
            },
            "realm_default_code_block_language" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default pygments language code to be used for a code blocks\nin this organization.  Null if no default has been set.\n",
              "nullable" : true
            },
            "realm_message_content_delete_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot be deleted\nwith this organization's\n[message deletion policy](/help/configure-message-editing-and-deletion).\n"
            },
            "realm_authentication_methods" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "boolean",
                "description" : "Boolean describing whether the authentication method (i.e its key)\nis enabled in this organization.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary of 'authentication_method_name': 'boolean' with each\nentry describing whether the authentication name can be used for\nauthenticating into the organization.\n"
            },
            "realm_allow_message_editing" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\nallows editing the content of messages.\n"
            },
            "realm_edit_topic_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can edit topics of any message.\n\n* 1 = members only\n* 2 = admins only\n* 3 = full members only\n* 4 = moderators only\n* 5 = everyone\n\n**Changes**: New in Zulip 5.0 (feature level 75), replacing the\nprevious `allow_community_topic_editing` boolean.\n"
            },
            "realm_message_content_edit_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot be edited\nwith this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n"
            },
            "realm_community_topic_editing_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot have\ntheir topics edited by other users with this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n\n**Changes**: New in Zulip 3.0 (feature level 11).  Previously this\nvalue was hardcoded to 86400 seconds (1 day).\n"
            },
            "realm_icon_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's [profile icon](/help/create-your-organization-profile).\n"
            },
            "realm_icon_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's\n[profile icon](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the organization's icon.\n\n* \"G\" means generated by Gravatar (the default).\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "max_icon_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size allowed for the organization's\nicon.  Useful for UI allowing editing the organization's icon.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `max_icon_file_size`.\n"
            },
            "realm_logo_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's wide logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
            },
            "realm_logo_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "realm_night_logo_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's night theme wide-format logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
            },
            "realm_night_logo_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's night theme\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "max_logo_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size allowed for the uploaded organization logos.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `max_logo_file_size`.\n"
            },
            "realm_bot_domain" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe fake email domain that will be used for new bots created this\norganization.  Useful for UI for creating bots.\n"
            },
            "realm_uri" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL for the organization.\n"
            },
            "realm_available_video_chat_providers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the video call provider.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the video call provider.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{provider_name}`: Dictionary containing the details of the\nvideo call provider with the name of the chat provider as\nthe key.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary where each entry describes a supported\n[video call provider](/help/start-a-call)\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nvideo call provider.\n"
            },
            "realm_presence_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether online presence of other users is shown in this\norganization.\n"
            },
            "settings_send_digest_emails" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this Zulip server is configured to allow organizations to\nenable [digest emails](/help/digest-emails).\n\nRelevant for administrative settings UI that can change the digest\nemail settings.\n"
            },
            "realm_is_zephyr_mirror_realm" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization is a Zephyr mirror realm.\n"
            },
            "realm_email_auth_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization has enabled Zulip's default email and password\nauthentication feature.  Determines whether Zulip stores a password\nfor the user and clients should offer any UI for changing the user's\nZulip password.\n"
            },
            "realm_password_auth_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization allows any sort of password-based\nauthentication (whether via EmailAuthBackend or LDAP passwords).\n\nDetermines whether a client might ever need to display a password prompt\n(clients will primarily look at this attribute in [server_settings](/api/get-server-settings)\nbefore presenting a login page).\n"
            },
            "realm_push_notifications_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether push notifications are enabled for this organization.  Typically\n`false` for self-hosted servers that have not configured the\n[Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).\n"
            },
            "realm_upload_quota_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe total quota for uploaded files in this organization.\n\nClients are not responsible for checking this quota; it is included\nin the API only for display purposes.\n\nNull if there is no limit.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `realm_upload_quota`.\n",
              "nullable" : true
            },
            "realm_plan_type" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe plan type of the organization.\n\n* 1 = Self-hosted organization (SELF_HOSTED)\n* 2 = Zulip Cloud free plan (LIMITED)\n* 3 = Zulip Cloud Standard plan (STANDARD)\n* 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n"
            },
            "zulip_plan_is_not_limited" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization is using a limited (Zulip Cloud Free) plan.\n"
            },
            "upgrade_text_for_wide_organization_logo" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nText to use when displaying UI for wide organization logos, a feature\nthat is currently not available on the Zulip Cloud Free plan.\n\nUseful only for clients supporting administrative UI for uploading\na new wide organization logo to brand the organization.\n"
            },
            "realm_default_external_accounts" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the external account provider\n"
                  },
                  "text" : {
                    "type" : "string",
                    "description" : "The text describing the external account.\n"
                  },
                  "hint" : {
                    "type" : "string",
                    "description" : "The help text to be displayed for the\ncustom profile field in user-facing\nsettings UI for configuring custom\nprofile fields for this account.\n"
                  },
                  "url_pattern" : {
                    "type" : "string",
                    "description" : "The regex pattern of the URL of a profile page\non the external site.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{site_name}`: Dictionary containing the details of the\ndefault external account provider with the name of the\nwebsite as the key.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary where each entry describes a default external\naccount type that can be configured with Zulip's custom\nprofile fields feature.\n"
            },
            "jitsi_server_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe base URL the organization uses to create Jitsi video calls.\n"
            },
            "development_environment" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this Zulip server is a development environment.  Used\nto control certain features or UI (such as error popups)\nthat should only apply when connected to a Zulip development\nenvironment.\n"
            },
            "server_generation" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nA timestamp indicating when the process hosting this\nevent queue was started.  Clients will likely only find\nthis value useful for inclusion in detailed error reports.\n"
            },
            "password_min_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThis Zulip server's configured minimum required length for passwords.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
            },
            "password_min_guesses" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThis Zulip server's configured minimum `zxcvbn` minimum guesses.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
            },
            "giphy_rating_options" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The description of the rating option.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the rating option.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{rating_name}`: Dictionary containing the details of the\nrating with the name of the rating as\nthe key.\n"
              },
              "description" : "Dictionary where each entry describes a valid rating\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nallowed rating of GIFs.\n"
            },
            "max_file_upload_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size that can be uploaded to this Zulip server.\n"
            },
            "max_avatar_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum avatar size that can be uploaded to this Zulip server.\n"
            },
            "server_inline_image_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is configured with support for inline image previews.\nClients containing administrative UI for changing\n`realm_inline_image_preview` should consult this field before offering\nthat feature.\n"
            },
            "server_inline_url_embed_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is configured with support for inline URL previews.\nClients containing administrative UI for changing\n`realm_inline_url_embed_preview` should consult this field before offering\nthat feature.\n"
            },
            "server_avatar_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server allows avatar changes.  Similar to\n`realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`\nZulip server level setting.\n"
            },
            "server_name_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server allows name changes.  Similar to\n`realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`\nZulip server level setting.\n"
            },
            "server_needs_upgrade" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is running an old version based on the Zulip\n[server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag),\nsuch that the web app will display to the current user a prominent warning.\n\n**Changes**: New in Zulip 5.0 (feature level 74).\n"
            },
            "event_queue_longpoll_timeout_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nRecommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls.\nThis is guaranteed to be somewhat greater than the heartbeat frequency. It is important\nthat clients respect this parameter, so that increases in the heartbeat frequency do not\nbreak clients.\n\n**Changes**: New in Zulip 5.0 (feature level 74). Previously,\nthis was hardcoded to 90 seconds, and clients should use that as a fallback\nvalue when interacting with servers where this field is not present.\n"
            },
            "realm_notifications_stream_id" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe ID of the stream to which notifications announcing the\ncreation of new streams are sent. -1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
            },
            "realm_signup_notifications_stream_id" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe ID of the stream to which notifications announcing\nthat new users have joined the organization are sent.\n-1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
            },
            "realm_users" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nA array of dictionaries where each entry describes a user\nwhose account has not been deactivated. Note that unlike\nthe usual User dictionary, this does not contain the `is_active`\nkey, as all the users present in this array have active accounts.\n\nSee also `cross_realm_bots` and `realm_non_active_users`.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "realm_non_active_users" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nA array of dictionaries where each entry describes a user\nwhose account has been deactivated. Note that unlike\nthe usual User dictionary this does not contain the `is_active`\nkey as all the users present in this array have deactivated\naccounts.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "avatar_source" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe avatar data source type for the current user.\n\nValue values are `G` (gravatar) and `U` (uploaded by user).\n"
            },
            "avatar_url_medium" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe avatar URL for the current user at 500x500 resolution, appropriate\nfor use in settings UI showing the user's avatar.\n"
            },
            "avatar_url" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe URL of the avatar for the current user at 100x100\nresolution.  See also `avatar_url_medium`.\n"
            },
            "can_create_streams" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is allowed to create streams with\nthe organization's [stream creation policy](/help/configure-who-can-create-streams).\n"
            },
            "can_subscribe_other_users" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is allowed to subscribe other users to streams with\nthe organization's [streams policy](/help/configure-who-can-invite-to-streams).\n"
            },
            "can_invite_others_to_realm" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user [is allowed to invite others]\n(/help/invite-new-users#change-who-can-send-invitations) to the organization.\n\n**Changes**: New in Zulip 4.0 (feature level 51).\n"
            },
            "is_admin" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization administrator](/help/roles-and-permissions).\n"
            },
            "is_owner" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization owner](/help/roles-and-permissions).\n"
            },
            "is_billing_admin" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is a billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n"
            },
            "is_moderator" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization moderator](/help/roles-and-permissions).\n\n**Changes**: New in Zulip 4.0 (feature level 60).\n"
            },
            "is_guest" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is a [guest user](/help/roles-and-permissions).\n"
            },
            "enter_sends" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`\nand only for clients that did not include `user_settings_object` in\ntheir client_capabilities` when registering the event queue.\n\nWhether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\nin the compose box is enabled.\n\n**Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\nconnecting to newer servers should declare the `user_settings_object`\nclient capability and process the `user_settings` event type instead.\nPrior to Zulip 5.0 (feature level 84) this field was present\nin response if 'realm_user' was present in `fetch_event_types`, not\n`update_display_settings`.\n",
              "deprecated" : true
            },
            "user_id" : {
              "type" : "integer",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe unique ID for the current user.\n"
            },
            "email" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe Zulip display email address for the current user.  See also\n`delivery_email`; these may be the same or different depending\non the organization's `email_address_visibility` policy.\n"
            },
            "delivery_email" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe user's email address, appropriate for UI for changing\nthe user's email address.  See also `email`.\n"
            },
            "full_name" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe full name of the current user.\n"
            },
            "cross_realm_bots" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nArray of dictionaries where each dictionary contains details of\na single cross realm bot.  Cross-realm bots are special system bot accounts\nlike Notification Bot.\n\nMost clients will want to combine this with `realm_users` in many\ncontexts.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/UserBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "email" : { },
                    "is_bot" : { },
                    "avatar_url" : { },
                    "avatar_version" : { },
                    "full_name" : { },
                    "is_admin" : { },
                    "is_owner" : { },
                    "is_billing_admin" : { },
                    "role" : { },
                    "bot_type" : { },
                    "user_id" : { },
                    "bot_owner_id" : { },
                    "is_active" : { },
                    "is_guest" : { },
                    "timezone" : { },
                    "date_joined" : { },
                    "delivery_email" : { },
                    "profile_data" : { },
                    "is_system_bot" : {
                      "type" : "boolean",
                      "description" : "Whether the user is a system bot.  System bots are special\nbot user accounts that are managed by the system, rather than\nthe organization's administrators.\n\n**Changes**: This field was called `is_cross_realm_bot`\nbefore Zulip 5.0 (feature level 83).\n"
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "last_event_id" : -1,
            "msg" : "",
            "queue_id" : "1517975029:0",
            "realm_emoji" : {
              "1" : {
                "author_id" : 5,
                "deactivated" : false,
                "id" : "1",
                "name" : "green_tick",
                "source_url" : "/user_avatars/1/emoji/images/1.png"
              }
            },
            "result" : "success",
            "zulip_feature_level" : 2,
            "zulip_version" : "5.0-dev-1650-gc3fd37755f",
            "zulip_merge_base" : "5.0-dev-1646-gea6b21cd8c"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. restErrorHandling
{panel:title=restErrorHandling|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Error handling
    *Description:* Common error to many endpoints

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/rest-error-handling{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<InvalidApiKeyError,MissingArgumentError,UserNotAuthorizedError> |
    	|| Response Model | [oneOf&lt;InvalidApiKeyError,MissingArgumentError,UserNotAuthorizedError&gt; Model|#oneOf&lt;InvalidApiKeyError,MissingArgumentError,UserNotAuthorizedError&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/InvalidApiKeyError"
        }, {
          "$ref" : "#/components/schemas/MissingArgumentError"
        }, {
          "$ref" : "#/components/schemas/UserNotAuthorizedError"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=401|subtle=false} |
    	|| Message | Unauthorized. |
    	|| Response Type | oneOf<UserDeactivatedError,RealmDeactivatedError> |
    	|| Response Model | [oneOf&lt;UserDeactivatedError,RealmDeactivatedError&gt; Model|#oneOf&lt;UserDeactivatedError,RealmDeactivatedError&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Unauthorized.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UserDeactivatedError"
        }, {
          "$ref" : "#/components/schemas/RealmDeactivatedError"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=429|subtle=false} |
    	|| Message | Rate limit exceeded. |
    	|| Response Type | oneOf<RateLimitedError> |
    	|| Response Model | [oneOf&lt;RateLimitedError&gt; Model|#oneOf&lt;RateLimitedError&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Rate limit exceeded.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RateLimitedError"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. addCodePlayground
{panel:title=addCodePlayground|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Add a code playground
    *Description:* Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.

&#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;

**Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was
fixed in Zulip 4.0 (feature level 57).

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/playgrounds{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |name |The user-visible display name of the playground which can be
used to pick the target playground, especially when multiple
playground options exist for that programming language. | String | (/) |null |  |  ||pygments_language |The name of the Pygments language lexer for that
programming language. | String | (/) |null |  |  ||url_prefix |The url prefix for the playground. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The numeric ID assigned to this playground.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "id" : 1,
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. addLinkifier
{panel:title=addLinkifier|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Add a linkifier
    *Description:* Configure [linkifiers](/help/add-a-custom-linkifier),
regular expression patterns that are automatically linkified when they
appear in messages and topics.

&#x60;POST {{ api_url }}/v1/realm/filters&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/filters{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |pattern |The [Python regular
expression](https://docs.python.org/3/howto/regex.html) that should
trigger the linkifier. | String | (/) |null |  |  ||url_format_string |The URL used for the link. If you used named groups for the &#x60;pattern&#x60;,
you can insert their content here with
&#x60;%(name_of_the_capturing_group)s&#x60;. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The numeric ID assigned to this filter.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "id" : 42,
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. createCustomProfileField
{panel:title=createCustomProfileField|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Create a custom profile field
    *Description:* [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.

&#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/profile_fields{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |name |The name of the custom profile field, which will appear both in
user-facing settings UI for configuring custom profile fields and
in UI displaying a user&#39;s profile. | String | (x) |null |  |  ||hint |The help text to be displayed for the custom profile field in user-facing
settings UI for configuring custom profile fields. | String | (x) |null |  |  ||field_type |The field type can be any of the supported custom profile field types. See the
[custom profile fields documentation](/help/add-custom-profile-fields)
more details on what each type means.

* **1**: Short text
* **2**: Long text
* **3**: List of options
* **4**: Date picker
* **5**: Link
* **6**: Person picker
* **7**: External account | Integer | (/) |null |  |  ||field_data |Field types 3 (List of options) and 7 (External account) support storing
additional configuration for the field type in the &#x60;field_data&#x60; attribute.

For field type 3 (List of options), this attribute is a JSON dictionary
defining the choices and the order they will be displayed in the
dropdown UI for individual users to select an option.

The interface for field type 7 is not yet stabilized. | Object | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The ID for the custom profile field.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "id" : 9
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getCustomEmoji
{panel:title=getCustomEmoji|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get all custom emoji
    *Description:* Get all the custom emoji in the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/emoji&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/emoji{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "emoji" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/RealmEmoji"
              },
              "description" : "An object that contains `emoji` objects, each identified with their\nemoji ID as the key.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "emoji" : {
              "1" : {
                "id" : "1",
                "name" : "green_tick",
                "source_url" : "/user_avatars/1/emoji/images/1.png",
                "deactivated" : false,
                "author_id" : 5
              }
            }
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getCustomProfileFields
{panel:title=getCustomProfileFields|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get all custom profile fields
    *Description:* Get all the [custom profile fields](/help/add-custom-profile-fields)
configured for the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/profile_fields{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "custom_fields" : {
              "type" : "array",
              "description" : "An array containing all the custom profile fields defined in this\nZulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/CustomProfileField"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "custom_fields" : [ {
              "id" : 1,
              "name" : "Phone number",
              "type" : 1,
              "hint" : "",
              "field_data" : "",
              "order" : 1
            }, {
              "id" : 2,
              "name" : "Biography",
              "type" : 2,
              "hint" : "What are you known for?",
              "field_data" : "",
              "order" : 2
            }, {
              "id" : 3,
              "name" : "Favorite food",
              "type" : 1,
              "hint" : "Or drink, if you'd prefer",
              "field_data" : "",
              "order" : 3
            }, {
              "id" : 4,
              "name" : "Favorite editor",
              "type" : 3,
              "hint" : "",
              "field_data" : "{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}",
              "order" : 4
            }, {
              "id" : 5,
              "name" : "Birthday",
              "type" : 4,
              "hint" : "",
              "field_data" : "",
              "order" : 5
            }, {
              "id" : 6,
              "name" : "Favorite website",
              "type" : 5,
              "hint" : "Or your personal blog's URL",
              "field_data" : "",
              "order" : 6
            }, {
              "id" : 7,
              "name" : "Mentor",
              "type" : 6,
              "hint" : "",
              "field_data" : "",
              "order" : 7
            }, {
              "id" : 8,
              "name" : "GitHub",
              "type" : 7,
              "hint" : "Enter your GitHub username",
              "field_data" : "{\"subtype\":\"github\"}",
              "order" : 8
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getLinkifiers
{panel:title=getLinkifiers|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get linkifiers
    *Description:* List all of an organization&#39;s configured
[linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;

**Changes**: New in Zulip 4.0 (feature level 54). On older versions,
a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in
a &#x60;[pattern, url_format, id]&#x60; tuple format.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/linkifiers{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "linkifiers" : {
              "type" : "array",
              "description" : "An array of objects, where each object describes a linkifier.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "pattern" : {
                    "type" : "string",
                    "description" : "The string regex pattern which represents the pattern that\nshould be linkified by this linkifier.\n"
                  },
                  "url_format" : {
                    "type" : "string",
                    "description" : "The URL format string to be used for linkifying matches.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the linkifier.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "linkifiers" : [ {
              "pattern" : "#(?P<id>[0-9]+)",
              "url_format" : "https://github.com/zulip/zulip/issues/%(id)s",
              "id" : 1
            } ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getServerSettings
{panel:title=getServerSettings|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get server settings
    *Description:* Fetch global settings for a Zulip server.

&#x60;GET {{ api_url }}/v1/server_settings&#x60;

**Note:** this endpoint does not require any authentication at all, and you can use it to check:

* If this is a Zulip server, and if so, what version of Zulip it&#39;s running.
* What a Zulip client (e.g. a mobile app or
[zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to
know in order to display a login prompt for the server (e.g. what
authentication methods are available).

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/server_settings{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "authentication_methods" : {
              "type" : "object",
              "properties" : {
                "password" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using password.\n"
                },
                "dev" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using development API key.\n"
                },
                "email" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using email.\n"
                },
                "ldap" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using LDAP.\n"
                },
                "remoteuser" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using REMOTE_USER.\n"
                },
                "github" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their GitHub account.\n"
                },
                "azuread" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Azure Active Directory account.\n"
                },
                "gitlab" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their GitLab account.\n"
                },
                "apple" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Apple account.\n"
                },
                "google" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Google account.\n"
                },
                "saml" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using SAML.\n"
                },
                "openid connect" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using OpenID Connect.\n"
                }
              },
              "additionalProperties" : false,
              "description" : "Each key-value pair in the object indicates whether the authentication\nmethod is enabled on this server.\n\n**Changes**: Deprecated in Zulip 2.1, in favor of the more expressive\n`external_authentication_methods`.\n",
              "deprecated" : true
            },
            "external_authentication_methods" : {
              "type" : "array",
              "description" : "A list of dictionaries describing the available external\nauthentication methods (E.g. Google, GitHub, or SAML)\nenabled for this organization.\n\nThe list is sorted in the order in which these\nauthentication methods should be displayed.\n\n**Changes**: New in Zulip 2.1.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "A unique, table, machine-readable name for the authentication method,\nintended to be used by clients with special behavior for specific\nauthentication methods to correctly identify the method.\n"
                  },
                  "display_name" : {
                    "type" : "string",
                    "description" : "Display name of the authentication method, to be used in all buttons\nfor the authentication method.\n"
                  },
                  "display_icon" : {
                    "type" : "string",
                    "description" : "URL for an image to be displayed as an icon in all buttons for\nthe external authentication method.\n\nWhen null, no icon should be displayed.\n",
                    "nullable" : true
                  },
                  "login_url" : {
                    "type" : "string",
                    "description" : "URL to be used to initiate authentication using this method.\n"
                  },
                  "signup_url" : {
                    "type" : "string",
                    "description" : "URL to be used to initiate account registration using this method.\n"
                  }
                },
                "additionalProperties" : false
              }
            },
            "zulip_feature_level" : {
              "type" : "integer",
              "description" : "An integer indicating what features are\navailable on the server. The feature level increases monotonically;\na value of N means the server supports all API features introduced\nbefore feature level N.  This is designed to provide a simple way\nfor client apps to decide whether the server supports a given\nfeature or API change.  See the [changelog](/api/changelog) for\ndetails on what each feature level means.\n\n**Changes**.  New in Zulip 3.0.  We recommend using an implied value\nof 0 for Zulip servers that do not send this field.\n"
            },
            "zulip_version" : {
              "type" : "string",
              "description" : "The server's version number.  This is often a release version number,\nlike `2.1.7`. But for a server running a [version from Git][git-release],\nit will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.\n\n[git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions\n"
            },
            "zulip_merge_base" : {
              "type" : "string",
              "description" : "The `git merge-base` between `zulip_verson` and official branches\nin the public\n[Zulip server and web app repository](https://github.com/zulip/zulip),\nin the same format as `zulip_version`. This will equal\n`zulip_version` if the server is not running a fork of the Zulip server.\n\nThis will be `\"\"` if unavailable.\n\n**Changes**: New in Zulip 5.0 (feature level 88).\n"
            },
            "push_notifications_enabled" : {
              "type" : "boolean",
              "description" : "Whether mobile/push notifications are enabled.\n"
            },
            "is_incompatible" : {
              "type" : "boolean",
              "description" : "Whether the Zulip client that has sent a request to this endpoint is\ndeemed incompatible with the server.\n"
            },
            "email_auth_enabled" : {
              "type" : "boolean",
              "description" : "Setting for allowing users authenticate with an email-password\ncombination.\n"
            },
            "require_email_format_usernames" : {
              "type" : "boolean",
              "description" : "Whether all valid usernames for authentication to this\norganization will be email addresses. This is important\nfor clients to know whether to do client side validation\nof email address format in a login prompt.\n\nThis value will be false if the server has [LDAP\nauthentication][ldap-auth] enabled with a username and\npassword combination.\n\n[ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory\n"
            },
            "realm_uri" : {
              "type" : "string",
              "description" : "The organization's canonical URL.\n"
            },
            "realm_name" : {
              "type" : "string",
              "description" : "The organization's name (for display purposes).\n"
            },
            "realm_icon" : {
              "type" : "string",
              "description" : "The URL for the organization's logo formatted as a square image,\nused for identifying the organization in small locations in the\nmobile and desktop apps.\n"
            },
            "realm_description" : {
              "type" : "string",
              "description" : "HTML description of the organization, as configured by the [organization\nprofile](/help/create-your-organization-profile).\n"
            }
          },
          "additionalProperties" : false,
          "description" : "A typical successful JSON response for a single-organization server may look like",
          "example" : {
            "authentication_methods" : {
              "password" : true,
              "dev" : true,
              "email" : true,
              "ldap" : false,
              "remoteuser" : false,
              "github" : true,
              "azuread" : false,
              "google" : true,
              "saml" : true
            },
            "zulip_version" : "5.0-dev-1650-gc3fd37755f",
            "zulip_merge_base" : "5.0-dev-1646-gea6b21cd8c",
            "push_notifications_enabled" : false,
            "msg" : "",
            "is_incompatible" : false,
            "email_auth_enabled" : true,
            "require_email_format_usernames" : true,
            "realm_uri" : "http://localhost:9991",
            "realm_name" : "Zulip Dev",
            "realm_icon" : "https://secure.gravatar.com/avatar/62429d594b6ffc712f54aee976a18b44?d=identicon",
            "realm_description" : "<p>The Zulip development environment default organization.  It's great for testing!</p>",
            "result" : "success",
            "external_authentication_methods" : [ {
              "name" : "saml:idp_name",
              "display_name" : "SAML",
              "display_icon" : null,
              "login_url" : "/accounts/login/social/saml/idp_name",
              "signup_url" : "/accounts/register/social/saml/idp_name"
            }, {
              "name" : "google",
              "display_name" : "Google",
              "display_icon" : "/static/images/landing-page/logos/googl_e-icon.png",
              "login_url" : "/accounts/login/social/google",
              "signup_url" : "/accounts/register/social/google"
            }, {
              "name" : "github",
              "display_name" : "GitHub",
              "display_icon" : "/static/images/landing-page/logos/github-icon.png",
              "login_url" : "/accounts/login/social/github",
              "signup_url" : "/accounts/register/social/github"
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. removeCodePlayground
{panel:title=removeCodePlayground|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Remove a code playground
    *Description:* Remove a [code playground](/help/code-blocks#code-playgrounds) previously
configured for an organization.

&#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 49).

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/playgrounds/{playground_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |playground_id |The ID of the playground that you want to remove. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. removeLinkifier
{panel:title=removeLinkifier|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Remove a linkifier
    *Description:* Remove [linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/filters/{filter_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |filter_id |The ID of the linkifier that you want to remove. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. reorderCustomProfileFields
{panel:title=reorderCustomProfileFields|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Reorder custom profile fields
    *Description:* Reorder the custom profile fields in the user&#39;s organization.

&#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;

Custom profile fields are displayed in Zulip UI widgets in order; this
endpoint allows administrative settings UI to change the field ordering.

This endpoint is used to implement the dragging feature described in the
[custom profile fields documentation](/help/add-custom-profile-fields).

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/profile_fields{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |order |A list of the IDs of all the custom profile fields defined in this
organization, in the desired new order. | array[Integer] | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateLinkifier
{panel:title=updateLinkifier|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update a linkifier
    *Description:* Update a [linkifier](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 57).

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/filters/{filter_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |filter_id |The ID of the linkifier that you want to update. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |pattern |The [Python regular
expression](https://docs.python.org/3/howto/regex.html) that should
trigger the linkifier. | String | (/) |null |  |  ||url_format_string |The URL used for the link. If you used named groups for the &#x60;pattern&#x60;,
you can insert their content here with
&#x60;%(name_of_the_capturing_group)s&#x60;. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. uploadCustomEmoji
{panel:title=uploadCustomEmoji|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Upload custom emoji
    *Description:* This endpoint is used to upload a custom emoji for use in the user&#39;s
organization.  Access to this endpoint depends on the
[organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).

&#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/realm/emoji/{emoji_name}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |emoji_name |The name that should be associated with the uploaded emoji image/gif.
The emoji name can only contain letters, numbers, dashes, and spaces.
Upper and lower case letters are treated the same, and underscores (_)
are treated the same as spaces (consistent with how the Zulip UI
handles emoji). | String | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. archiveStream
{panel:title=archiveStream|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Archive a stream
    *Description:* [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.

&#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/streams/{stream_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. createBigBlueButtonVideoCall
{panel:title=createBigBlueButtonVideoCall|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Create BigBlueButton video call
    *Description:* Create a video call URL for a BigBlueButton video call.
Requires BigBlueButton to be configured on the Zulip server.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/calls/bigbluebutton/create{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "url" : {
              "type" : "string",
              "description" : "The URL for the BigBlueButton video call.\n",
              "example" : "/calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "url" : "/calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deleteTopic
{panel:title=deleteTopic|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Delete a topic
    *Description:* Delete all messages in a topic.

&#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;

Topics are a field on messages (not an independent
data structure), so deleting all the messages in the topic
deletes the topic from Zulip.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/streams/{stream_id}/delete_topic{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |topic_name |The name of the topic to delete. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Error. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Error.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "Error when the user does not have permission\nto delete topics in this organization.\n",
          "example" : {
            "result" : "error",
            "msg" : "Must be an organization administrator",
            "code" : "UNAUTHORIZED_PRINCIPAL"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getStreamId
{panel:title=getStreamId|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get stream ID
    *Description:* Get the unique ID of a given stream.

&#x60;GET {{ api_url }}/v1/get_stream_id&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/get_stream_id{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |stream |The name of the stream to access. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "stream_id" : {
              "type" : "integer",
              "description" : "The ID of the given stream.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "stream_id" : 15
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream name 'nonexistent'",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getStreamTopics
{panel:title=getStreamTopics|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get topics in a stream
    *Description:* Get all the topics in a specific stream

&#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/{stream_id}/topics{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "topics" : {
              "type" : "array",
              "description" : "An array of `topic` objects.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "max_id" : {
                    "type" : "integer",
                    "description" : "The message ID of the last message sent to this topic.\n"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the topic.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "topics" : [ {
              "max_id" : 26,
              "name" : "Denmark3"
            }, {
              "max_id" : 23,
              "name" : "Denmark1"
            }, {
              "max_id" : 6,
              "name" : "Denmark2"
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the user is attempting to fetch the topics\nof a non-existing stream (or also a private stream they don't have access to)\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getStreams
{panel:title=getStreams|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get all streams
    *Description:* Get all streams that the user has access to.

&#x60;GET {{ api_url }}/v1/streams&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/streams{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |include_public |Include all public streams. | Boolean | (x) |true |  |  ||include_web_public |Include all web public streams. | Boolean | (x) |false |  |  ||include_subscribed |Include all streams that the user is subscribed to. | Boolean | (x) |true |  |  ||include_all_active |Include all active streams. The user must have administrative privileges
to use this parameter. | Boolean | (x) |false |  |  ||include_default |Include all default streams for the user&#39;s realm. | Boolean | (x) |false |  |  ||include_owner_subscribed |If the user is a bot, include all streams that the bot&#39;s owner is
subscribed to. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "streams" : {
              "type" : "array",
              "description" : "A list of `stream` objects with details on the requested streams.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/BasicStreamBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "stream_id" : { },
                    "name" : { },
                    "description" : { },
                    "date_created" : { },
                    "invite_only" : { },
                    "rendered_description" : { },
                    "is_web_public" : { },
                    "stream_post_policy" : { },
                    "message_retention_days" : { },
                    "history_public_to_subscribers" : { },
                    "first_message_id" : { },
                    "is_announcement_only" : { },
                    "is_default" : {
                      "type" : "boolean",
                      "description" : "Whether the given stream is a\n[default stream](/help/set-default-streams-for-new-users).  Only\nreturned if the `include_default` parameter is `true`.\n"
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "streams" : [ {
              "description" : "A Scandinavian country",
              "invite_only" : false,
              "name" : "Denmark",
              "stream_id" : 1
            }, {
              "description" : "Yet another Italian city",
              "invite_only" : false,
              "name" : "Rome",
              "stream_id" : 2
            }, {
              "description" : "Located in the United Kingdom",
              "invite_only" : false,
              "name" : "Scotland",
              "stream_id" : 3
            }, {
              "description" : "A northeastern Italian city",
              "invite_only" : false,
              "name" : "Venice",
              "stream_id" : 4
            }, {
              "description" : "A city in Italy",
              "invite_only" : false,
              "name" : "Verona",
              "stream_id" : 5
            }, {
              "description" : "New stream for testing",
              "invite_only" : false,
              "name" : "new stream",
              "stream_id" : 6
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON response for when the user is not authorized to use the\n`include_all_active` parameter (i.e. because they are not an organization\nadministrator)\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "User not authorized for this query",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getSubscribers
{panel:title=getSubscribers|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get the subscribers of a stream
    *Description:* Get all users subscribed to a stream.

&#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/streams/{stream_id}/members{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "subscribers" : {
              "type" : "array",
              "description" : "A list containing the IDs of all active users who are subscribed\nto the stream.\n",
              "items" : {
                "type" : "integer"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "subscribers" : [ 11, 26 ]
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the requested stream does not exist,\nor where the user does not have permission to access the target stream:\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getSubscriptionStatus
{panel:title=getSubscriptionStatus|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get subscription status
    *Description:* Check whether a user is subscribed to a stream.

&#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;

**Changes**: New in Zulip 3.0 (feature level 11).

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id}/subscriptions/{stream_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id |The target user&#39;s ID. | Integer | (/) |null |  |  ||stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "is_subscribed" : {
              "type" : "boolean",
              "description" : "Whether the user is subscribed to the stream.\n"
            }
          },
          "additionalProperties" : false,
          "description" : "MANUALLY",
          "example" : {
            "msg" : "",
            "result" : "success",
            "is_subscribed" : false
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getSubscriptions
{panel:title=getSubscriptions|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get subscribed streams
    *Description:* Get all streams that the user is subscribed to.

&#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |include_subscribers |Whether each returned stream object should include a &#x60;subscribers&#x60;
field containing a list of the user IDs of its subscribers.

(This may be significantly slower in organizations with
thousands of users subscribed to many streams.)

**Changes**: New in Zulip 2.1.0. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "required" : [ "subscriptions" ],
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscriptions" : {
              "type" : "array",
              "description" : "A list of dictionaries where each dictionary contains\ninformation about one of the subscribed streams.\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "subscriptions" : [ {
              "audible_notifications" : true,
              "color" : "#e79ab5",
              "description" : "A Scandinavian country",
              "desktop_notifications" : true,
              "email_address" : "Denmark+187b4125ed36d6af8b5d03ef4f65c0cf@zulipdev.com:9981",
              "is_muted" : false,
              "invite_only" : false,
              "name" : "Denmark",
              "pin_to_top" : false,
              "push_notifications" : false,
              "role" : 20,
              "stream_id" : 1,
              "subscribers" : [ 7, 10, 11, 12, 14 ]
            }, {
              "audible_notifications" : true,
              "color" : "#e79ab5",
              "description" : "Located in the United Kingdom",
              "desktop_notifications" : true,
              "email_address" : "Scotland+f5786390183e60a1ccb18374f9d05649@zulipdev.com:9981",
              "is_muted" : false,
              "invite_only" : false,
              "name" : "Scotland",
              "pin_to_top" : false,
              "push_notifications" : false,
              "role" : 50,
              "stream_id" : 3,
              "subscribers" : [ 7, 11, 12, 14 ]
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. muteTopic
{panel:title=muteTopic|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Topic muting
    *Description:* This endpoint mutes/unmutes a topic within a stream that the current
user is subscribed to.  Muted topics are displayed faded in the Zulip
UI, and are not included in the user&#39;s unread count totals.

&#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60;

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions/muted_topics{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |stream |The name of the stream to access. | String | (x) |null |  |  ||stream_id |The ID of the stream to access. | Integer | (x) |null |  |  ||topic |The topic to (un)mute. Note that the request will succeed regardless of
whether any messages have been sent to the specified topic. | String | (/) |null |  |  ||op |Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. | String | (/) |null |  | [add, remove] |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when an `add` operation is requested for a topic\nthat has already been muted\n",
            "example" : {
              "msg" : "Topic already muted",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when a `remove` operation is requested for a\ntopic that had not been previously muted\n",
            "example" : {
              "msg" : "Topic is not muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. subscribe
{panel:title=subscribe|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Subscribe to a stream
    *Description:* Subscribe one or more users to one or more streams.

&#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;

If any of the specified streams do not exist, they are automatically
created.  The initial [stream settings](/api/update-stream) will be determined
by the optional parameters like &#x60;invite_only&#x60; detailed below.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |subscriptions |A list of dictionaries containing the key &#x60;name&#x60; and value
specifying the name of the stream to subscribe. If the stream does not
exist a new stream is created. The description of the stream created can
be specified by setting the dictionary key &#x60;description&#x60; with an
appropriate value. | array[Object] | (/) |null |  |  ||principals |A list of user ids (preferred) or Zulip display email
addresses of the users to be subscribed to or unsubscribed
from the streams specified in the &#x60;subscriptions&#x60; parameter. If
not provided, then the requesting user/bot is subscribed.

**Changes**: The integer format is new in Zulip 3.0 (feature level 9). | array[oneOf&lt;string,integer&gt;] | (x) |null |  |  ||authorization_errors_fatal |A boolean specifying whether authorization errors (such as when the
requesting user is not authorized to access a private stream) should be
considered fatal or not. When &#x60;True&#x60;, an authorization error is reported
as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams
where the request encountered an authorization error will be listed
in the &#x60;unauthorized&#x60; key. | Boolean | (x) |true |  |  ||announce |If one of the streams specified did not exist previously and is thus craeted
by this call, this determines whether [notification bot](/help/configure-notification-bot)
will send an announcement about the new stream&#39;s creation. | Boolean | (x) |false |  |  ||invite_only |As described above, this endpoint will create a new stream if passed
a stream name that doesn&#39;t already exist.  This parameters and the ones
that follow are used to request an initial configuration of a created
stream; they are ignored for streams that already exist.

This parameter determines whether any newly created streams will be
private streams. | Boolean | (x) |false |  |  ||history_public_to_subscribers |Whether the stream&#39;s message history should be available to
newly subscribed members, or users can only access messages
they actually received while subscribed to the stream.

Corresponds to the [shared history](/help/stream-permissions)
option in documentation. | Boolean | (x) |null |  |  ||stream_post_policy |Policy for which users can post messages to the stream.

* 1 &#x3D;&gt; Any user can post.
* 2 &#x3D;&gt; Only administrators can post.
* 3 &#x3D;&gt; Only full members can post.
* 4 &#x3D;&gt; Only moderators can post.

**Changes**: New in Zulip 3.0, replacing the previous
&#x60;is_announcement_only&#x60; boolean. | Integer | (x) |1 |  |  ||message_retention_days |Number of days that messages sent to this stream will be stored
before being automatically deleted by the [message retention
policy](/help/message-retention-policy).  Two special string format
values are supported:

* &quot;realm_default&quot; &#x3D;&gt; Return to the organization-level setting.
* &quot;forever&quot; &#x3D;&gt; Retain messages forever.

**Changes**: New in Zulip 3.0 (feature level 17). | oneOf&lt;string,integer&gt; | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "$ref" : "#/components/schemas/SuccessDescription"
          }, {
            "example" : {
              "already_subscribed" : { },
              "msg" : "",
              "result" : "success",
              "subscribed" : {
                "iago@zulip.com" : [ "new stream" ]
              }
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical successful JSON response when the user is already subscribed to\nthe streams specified\n",
            "example" : {
              "already_subscribed" : {
                "newbie@zulip.com" : [ "new stream" ]
              },
              "msg" : "",
              "result" : "success",
              "subscribed" : { }
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical response for when the requesting user does not have access to\na private stream and `authorization_errors_fatal` is `True`\n",
            "example" : {
              "msg" : "Unable to access stream (private_stream).",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical response for when the requesting user does not have access to\na private stream and `authorization_errors_fatal` is `False`\n",
            "example" : {
              "already_subscribed" : { },
              "msg" : "",
              "result" : "success",
              "subscribed" : { },
              "unauthorized" : [ "private_stream" ]
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. unsubscribe
{panel:title=unsubscribe|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Unsubscribe from a stream
    *Description:* Unsubscribe yourself or other users from one or more streams.

&#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |subscriptions |A list of stream names to unsubscribe from. This parameter is called
&#x60;streams&#x60; in our Python API. | array[String] | (/) |null |  |  ||principals |A list of user ids (preferred) or Zulip display email
addresses of the users to be subscribed to or unsubscribed
from the streams specified in the &#x60;subscriptions&#x60; parameter. If
not provided, then the requesting user/bot is subscribed.

**Changes**: The integer format is new in Zulip 3.0 (feature level 9). | array[oneOf&lt;string,integer&gt;] | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "not_removed" : {
              "type" : "array",
              "description" : "A list of the names of streams that the user is already unsubscribed\nfrom, and hence doesn't need to be unsubscribed.\n",
              "items" : {
                "type" : "string"
              }
            },
            "removed" : {
              "type" : "array",
              "description" : "A list of the names of streams which were unsubscribed from as a result\nof the query.\n",
              "items" : {
                "type" : "string"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "not_removed" : [ ],
            "removed" : [ "new stream" ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | NonExistingStreamError |
    	|| Response Model | [NonExistingStreamError Model|#NonExistingStreamErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NonExistingStreamError"
        }, {
          "description" : "A typical failed JSON response for when the target stream does not exist"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateStream
{panel:title=updateStream|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update a stream
    *Description:* Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports
an organization administrator editing any property of a stream,
including:

* Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description)
* Stream [permissions](/help/stream-permissions), including
[privacy](/help/change-the-privacy-of-a-stream) and [who can
send](/help/stream-sending-policy).

&#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/streams/{stream_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |stream_id |The ID of the stream to access. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |description |The new description for the stream. Limited Zulip markdown is allowed in this
field.

**Changes**: Removed unnecessary JSON-encoding of this parameter in
Zulip 4.0 (feature level 64). | String | (x) |null |  |  ||new_name |The new name for the stream.

**Changes**: Removed unnecessary JSON-encoding of this parameter in
Zulip 4.0 (feature level 64). | String | (x) |null |  |  ||is_private |Change whether the stream is a private stream. | Boolean | (x) |null |  |  ||is_announcement_only |Whether the stream is limited to announcements.

**Changes**: Deprecated in Zulip 3.0 (feature level 1), use
  &#x60;stream_post_policy&#x60; instead. | Boolean | (x) |null |  |  ||stream_post_policy |Policy for which users can post messages to the stream.

* 1 &#x3D;&gt; Any user can post.
* 2 &#x3D;&gt; Only administrators can post.
* 3 &#x3D;&gt; Only full members can post.
* 4 &#x3D;&gt; Only moderators can post.

**Changes**: New in Zulip 3.0, replacing the previous
&#x60;is_announcement_only&#x60; boolean. | Integer | (x) |1 |  |  ||history_public_to_subscribers |Whether the stream&#39;s message history should be available to
newly subscribed members, or users can only access messages
they actually received while subscribed to the stream.

Corresponds to the [shared history](/help/stream-permissions)
option in documentation. | Boolean | (x) |null |  |  ||message_retention_days |Number of days that messages sent to this stream will be stored
before being automatically deleted by the [message retention
policy](/help/message-retention-policy).  Two special string format
values are supported:

* &quot;realm_default&quot; &#x3D;&gt; Return to the organization-level setting.
* &quot;forever&quot; &#x3D;&gt; Retain messages forever.

**Changes**: New in Zulip 3.0 (feature level 17). | oneOf&lt;string,integer&gt; | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateSubscriptionSettings
{panel:title=updateSubscriptionSettings|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update subscription settings
    *Description:* This endpoint is used to update the user&#39;s personal settings for the
streams they are subscribed to, including muting, color, pinning, and
per-stream notification settings.

&#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions/properties{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |subscription_data |A list of objects that describe the changes that should be applied in
each subscription. Each object represents a subscription, and must have
a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60;
being modified and its new &#x60;value&#x60;.

The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:

* &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream.
* &#x60;is_muted&#x60; (boolean): whether the stream is
  [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was
  represented by the more confusingly named &#x60;in_home_view&#x60; (with the
  opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for
  backwards-compatibility, modern Zulip still accepts that value.
* &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list.
* &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications
    for all messages sent to the stream.
* &#x60;audible_notifications&#x60; (boolean): whether to play a sound
  notification for all messages sent to the stream.
* &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push
    notification for all messages sent to the stream.
* &#x60;email_notifications&#x60; (boolean): whether to trigger an email
    notification for all messages sent to the stream. | array[Object] | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscription_data" : {
              "type" : "array",
              "description" : "The same `subscription_data` array sent by the client for the request.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "property" : {
                    "type" : "string",
                    "description" : "The property to be changed. It is one of:\n\n* `color`: The hex value of the user's personal display color for the stream.<br>\n* `is_muted`: Whether the stream is [muted](/help/mute-a-stream).<br>\n**Changes**: Prior to Zulip 2.1, this feature was\nrepresented by the more confusingly named `in_home_view` (with the\nopposite value, `in_home_view=!is_muted`); for\nbackwards-compatibility, modern Zulip still accepts that value.<br>\n* `pin_to_top`: Whether to pin the stream at the top of the stream list.\n* `desktop_notifications`: Whether to show desktop notifications for all\nmessages sent to the stream.<br>\n* `audible_notifications`: Whether to play a sound notification for all\nmessages sent to the stream.<br>\n* `push_notifications`: Whether to trigger a mobile push notification for\nall messages sent to the stream.<br>\n* `email_notifications`: Whether to trigger an email notification for all\nmessages sent to the stream.<br>\n* `in_home_view`: Whether to mute the stream (legacy property)<br>\n* `wildcard_mentions_notify`: whether wildcard mentions trigger notifications\nas though they were personal mentions in this stream.<br>\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, wildcard_mentions_notify, for\nthis stream.\n",
                    "enum" : [ "color", "push_notifications", "is_muted", "pin_to_top", "desktop_notifications", "audible_notifications", "push_notifications", "email_notifications", "in_home_view", "wildcard_mentions_notify" ]
                  },
                  "value" : {
                    "description" : "The desired value of the property\n",
                    "oneOf" : [ {
                      "type" : "boolean"
                    }, {
                      "type" : "string"
                    } ]
                  },
                  "stream_id" : {
                    "type" : "integer",
                    "description" : "The desired value of the property\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "subscription_data" : [ {
              "property" : "pin_to_top",
              "value" : true,
              "stream_id" : 1
            }, {
              "property" : "color",
              "value" : "#f00f00",
              "stream_id" : 3
            } ],
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateSubscriptions
{panel:title=updateSubscriptions|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update subscriptions
    *Description:* Update which streams you are are subscribed to.

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/subscriptions{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |delete |A list of stream names to unsubscribe from. | array[String] | (x) |null |  |  ||add |A list of objects describing which streams to subscribe to, optionally
including per-user subscription parameters (e.g. color) and if the
stream is to be created, its description. | array[Object] | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "required" : [ "already_subscribed", "removed", "subscribed" ],
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscribed" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "description" : "`{email_id}`: A list of the names of streams that\nthe user was subscribed to as a result of the query.\n",
                "items" : {
                  "type" : "string"
                }
              },
              "description" : "A dictionary where the key is the email\naddress of the user/bot and the value is a\nlist of the names of the streams that were\nsubscribed to as a result of the query.\n"
            },
            "already_subscribed" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "description" : "`{email_id}`: A list of the names of streams that\nthe user was already subscribed to.\n",
                "items" : {
                  "type" : "string"
                }
              },
              "description" : "A dictionary where the key is the email\naddress of the user/bot and the value is a\nlist of the names of the streams that the\nuser/bot is already subscribed to.\n"
            },
            "not_removed" : {
              "type" : "array",
              "description" : "A list of the names of streams that the user\nis already unsubscribed from, and hence\ndoesn't need to be unsubscribed.\n",
              "items" : {
                "type" : "string"
              }
            },
            "removed" : {
              "type" : "array",
              "description" : "A list of the names of streams which were unsubscribed\nfrom as a result of the query.\n",
              "items" : {
                "type" : "string"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "subscribed" : { },
            "already_subscribed" : {
              "iago@zulip.com" : [ "Verona" ]
            },
            "not_removed" : [ ],
            "removed" : [ "new stream" ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. createUser
{panel:title=createUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Create a user
    *Description:* {!can-create-users-only.md!}

Create a new user account via the API.

&#x60;POST {{ api_url }}/v1/users&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |email |The email address of the new user. | String | (/) |null |  |  ||password |The password of the new user. | String | (/) |null |  |  ||full_name |The full name of the new user. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user_id" : {
              "type" : "integer",
              "description" : "The ID assigned to the newly created user.\n\n**Changes**: New in Zulip 4.0 (feature level 30).\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user_id" : 25
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "A typical JSON response for when another user with the same\nemail address already exists in the realm\n",
          "example" : {
            "msg" : "Email 'newbie@zulip.com' already in use",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. createUserGroup
{panel:title=createUserGroup|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Create a user group
    *Description:* Create a new [user group](/help/user-groups).

&#x60;POST {{ api_url }}/v1/user_groups/create&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_groups/create{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |name |The name of the user group. | String | (/) |null |  |  ||description |The description of the user group. | String | (/) |null |  |  ||members |An array containing the user IDs of the initial members for the
new user group. | array[Integer] | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for when the one of the users does not exist",
          "example" : {
            "result" : "error",
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user ID: 500"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deactivateOwnUser
{panel:title=deactivateOwnUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Deactivate own user
    *Description:* Deactivates the user&#39;s account.  See also the administrative endpoint for
[deactivating another user](/api/deactivate-user).

&#x60;DELETE {{ api_url }}/v1/users/me&#x60;

This endpoint is primarily useful to Zulip clients providing a user settings UI.

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response when attempting to deactivate the only\norganization owner in an organization\n",
          "example" : {
            "msg" : "Cannot deactivate the only organization owner",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. deactivateUser
{panel:title=deactivateUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Deactivate a user
    *Description:* [Deactivates a
user](https://zulip.com/help/deactivate-or-reactivate-a-user)
given their user ID.

&#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id |The target user&#39;s ID. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response when attempting to deactivate the only\norganization owner in an organization\n",
          "example" : {
            "msg" : "Cannot deactivate the only organization owner",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getAttachments
{panel:title=getAttachments|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get attachments
    *Description:* Fetch metadata on files uploaded by the requesting user.

&#x60;GET {{ api_url }}/v1/attachments&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/attachments{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "attachments" : {
              "type" : "array",
              "description" : "A list of `attachment` objects, each containing\ndetails about a file uploaded by the user.\n",
              "items" : {
                "$ref" : "#/components/schemas/Attachments"
              }
            },
            "upload_space_used" : {
              "type" : "integer",
              "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "attachments" : [ {
              "id" : 1,
              "name" : "166050.jpg",
              "path_id" : "2/ce/DfOkzwdg_IwlrN3myw3KGtiJ/166050.jpg",
              "size" : 571946,
              "create_time" : 1588145417000,
              "messages" : [ {
                "id" : 102,
                "date_sent" : 1588145424000
              }, {
                "id" : 103,
                "date_sent" : 1588145448000
              } ]
            } ],
            "upload_space_used" : 571946
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getOwnUser
{panel:title=getOwnUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get own user
    *Description:* Get basic data about the user/bot that requests this endpoint.

&#x60;GET {{ api_url }}/v1/users/me&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "avatar_url" : {
              "type" : "string",
              "description" : "URL for the user's avatar.\n\n**Changes**: New in Zulip 2.1.0.\n",
              "example" : "x"
            },
            "avatar_version" : {
              "type" : "integer",
              "description" : "Version for the user's avatar.  Used for cache-busting requests\nfor the user's avatar.  Clients generally shouldn't need to use this;\nmost avatar URLs sent by Zulip will already end with `?v={avatar_version}`.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : 1
            },
            "email" : {
              "type" : "string",
              "description" : "Email of the requesting user.\n",
              "example" : "iago@zulip.com"
            },
            "full_name" : {
              "type" : "string",
              "description" : "Full name of the requesting user.\n",
              "example" : "Iago"
            },
            "is_admin" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is an admin.\n",
              "example" : true
            },
            "is_owner" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is\nan organization owner.\n\n**Changes**: New in Zulip 3.0 (feature level 8).\n",
              "example" : false
            },
            "is_billing_admin" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is\na billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n",
              "example" : false
            },
            "role" : {
              "type" : "integer",
              "description" : "[Organization-level role](/help/roles-and-permissions)) of the user.\nPoosible values are:\n\n* Organization owner => 100\n* Organization administrator => 200\n* Organization moderator => 300\n* Member => 400\n* Guest => 600\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n",
              "enum" : [ 100, 200, 300, 400, 600 ]
            },
            "is_guest" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is a guest.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : false
            },
            "is_bot" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is a bot.\n",
              "example" : false
            },
            "is_active" : {
              "type" : "boolean",
              "description" : "A boolean specifying whether the user account has been deactivated.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : true
            },
            "timezone" : {
              "type" : "string",
              "description" : "The time zone of the user.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : ""
            },
            "date_joined" : {
              "type" : "string",
              "description" : "The time the user account was created.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : "2019-10-20T07:50:53.728864+00:00"
            },
            "max_message_id" : {
              "type" : "integer",
              "description" : "The integer ID of the last message received by your account.\n\n**Deprecated**.  We plan to remove this in favor of recommending\nusing `GET /messages` with `anchor=\"newest\"`.\n",
              "example" : 30,
              "deprecated" : true
            },
            "user_id" : {
              "type" : "integer",
              "description" : "The user's ID.\n",
              "example" : 1
            },
            "delivery_email" : {
              "type" : "string",
              "description" : "The user's real email address.  This field is present only if\n[email address visibility](/help/restrict-visibility-of-email-addresses) is\nlimited and you are an administrator with access to real email addresses\nunder the configured policy.\n"
            },
            "profile_data" : {
              "$ref" : "#/components/schemas/profile_data"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "avatar_url" : "https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon&version=1",
            "avatar_version" : 1,
            "email" : "iago@zulip.com",
            "full_name" : "Iago",
            "is_admin" : true,
            "is_owner" : false,
            "role" : 200,
            "is_guest" : false,
            "is_billing_admin" : false,
            "is_bot" : false,
            "is_active" : true,
            "timezone" : "",
            "date_joined" : "2019-10-20T07:50:53.728864+00:00",
            "max_message_id" : 30,
            "msg" : "",
            "result" : "success",
            "user_id" : 5,
            "profile_data" : {
              "5" : {
                "value" : "2000-01-01"
              },
              "4" : {
                "value" : "emacs"
              },
              "7" : {
                "value" : "[10]"
              },
              "1" : {
                "value" : "+1-234-567-8901",
                "rendered_value" : "<p>+1-234-567-8901</p>"
              },
              "2" : {
                "rendered_value" : "<p>Betrayer of Othello.</p>",
                "value" : "Betrayer of Othello."
              },
              "8" : {
                "value" : "zulip"
              },
              "3" : {
                "value" : "Apples",
                "rendered_value" : "<p>Apples</p>"
              },
              "6" : {
                "value" : "https://zulip.readthedocs.io/en/latest/"
              }
            }
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getUser
{panel:title=getUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get a user
    *Description:* Fetch details for a single user in the organization.

&#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;

You can also fetch details on [all users in the organization](/api/get-users)
or [by email](/api/get-user-by-email).

*This endpoint is new in Zulip Server 3.0 (feature level 1).*

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id |The target user&#39;s ID. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |client_gravatar |Whether the client supports computing gravatars URLs.  If
enabled, &#x60;avatar_url&#x60; will be included in the response only
if there is a Zulip avatar, and will be &#x60;null&#x60; for users who
are using gravatar as their avatar.  This option
significantly reduces the compressed size of user data,
since gravatar URLs are long, random strings and thus do not
compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if
clients can compute their own gravatars. | Boolean | (x) |false |  |  ||include_custom_profile_fields |Whether the client wants [custom profile field](/help/add-custom-profile-fields)
data to be included in the response.

**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
data via the API. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user" : {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getUserByEmail
{panel:title=getUserByEmail|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get a user by email
    *Description:* Fetch details for a single user in the organization given a Zulip display
email address.

&#x60;GET {{ api_url }}/v1/users/{email}&#x60;

Note that this endpoint uses Zulip display emails addresses
for organizations that have configured limited [email address
visibility](/help/restrict-visibility-of-email-addresses).

You can also fetch details on [all users in the organization](/api/get-users) or
[by user ID](/api/get-user).  Fetching by user ID is generally recommended
when possible, as users can
[change their email address](/help/change-your-email-address).

*This endpoint is new in Zulip Server 4.0 (feature level 39).*

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{email}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |email |The email address of the user whose details you want to fetch. | String | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |client_gravatar |Whether the client supports computing gravatars URLs.  If
enabled, &#x60;avatar_url&#x60; will be included in the response only
if there is a Zulip avatar, and will be &#x60;null&#x60; for users who
are using gravatar as their avatar.  This option
significantly reduces the compressed size of user data,
since gravatar URLs are long, random strings and thus do not
compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if
clients can compute their own gravatars. | Boolean | (x) |false |  |  ||include_custom_profile_fields |Whether the client wants [custom profile field](/help/add-custom-profile-fields)
data to be included in the response.

**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
data via the API. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user" : {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getUserGroups
{panel:title=getUserGroups|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get user groups
    *Description:* {!api-members-only.md!}

Fetches all of the user groups in the organization.

&#x60;GET {{ api_url }}/v1/user_groups&#x60;

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_groups{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user_groups" : {
              "type" : "array",
              "description" : "A list of `user_group` objects, which contain a `description`, a `name`,\ntheir `id` and the list of members of the user group.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string",
                    "description" : "The human-readable description of the user group.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The user group's integer id.\n"
                  },
                  "members" : {
                    "type" : "array",
                    "description" : "The integer user IDs of the user group members.\n",
                    "items" : {
                      "type" : "integer"
                    }
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "User group name.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user_groups" : [ {
              "description" : "Characters of Hamlet",
              "id" : 1,
              "name" : "hamletcharacters",
              "members" : [ 3, 4 ]
            }, {
              "description" : "Other users",
              "id" : 2,
              "name" : "other users",
              "members" : [ 1, 2 ]
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getUserPresence
{panel:title=getUserPresence|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get user presence
    *Description:* Get the presence status for a specific user.

This endpoint is most useful for embedding data about a user&#39;s
presence status in other sites (E.g. an employee directory).  Full
Zulip clients like mobile/desktop apps will want to use the main
presence endpoint, which returns data for all active users in the
organization, instead.

&#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;

See
[Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)
for details on the data model for presence in Zulip.

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id_or_email}/presence{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id_or_email |The user_id or Zulip display email address of the user whose presence you want to fetch.

**Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported
identifying the user by Zulip display email. | String | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "presence" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "when this update was received; if the timestamp\nis more than a few minutes in the past, the user is offline.\n"
                  },
                  "status" : {
                    "type" : "string",
                    "description" : "either `active` or `idle`: whether the user had\nrecently interacted with Zulip at the time in the timestamp\n(this distinguishes orange vs. green dots in the Zulip web\nUI; orange/idle means we don't know whether the user is\nactually at their computer or just left the Zulip app open\non their desktop).\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{client_name}` or `aggregated`: the keys for these objects are\nthe names of the different clients where this user is logged in,\nlike `website`, `ZulipDesktop`, `ZulipTerminal`, or\n`ZulipMobile`. There is also an `aggregated` key, which matches\nthe contents of the object that has been updated most\nrecently. For most applications, you'll just want to look at the\n`aggregated` key.\n"
              },
              "description" : "An object containing the presence details for every client the user has\nlogged into.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "presence" : {
              "website" : {
                "timestamp" : 1532697622,
                "status" : "active"
              },
              "ZulipMobile" : {
                "timestamp" : 1522687421,
                "status" : "active"
              },
              "aggregated" : {
                "timestamp" : 1532697622,
                "status" : "active"
              }
            },
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. getUsers
{panel:title=getUsers|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Get all users
    *Description:* Retrieve details on all users in the organization.  Optionally
includes values of [custom profile field](/help/add-custom-profile-fields).

&#x60;GET {{ api_url }}/v1/users&#x60;

You can also [fetch details on a single user](/api/get-user).

	|| HttpMethod | {status:colour=Yellow|title=get|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |client_gravatar |Whether the client supports computing gravatars URLs.  If
enabled, &#x60;avatar_url&#x60; will be included in the response only
if there is a Zulip avatar, and will be &#x60;null&#x60; for users who
are using gravatar as their avatar.  This option
significantly reduces the compressed size of user data,
since gravatar URLs are long, random strings and thus do not
compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if
clients can compute their own gravatars. | Boolean | (x) |false |  |  ||include_custom_profile_fields |Whether the client wants [custom profile field](/help/add-custom-profile-fields)
data to be included in the response.

**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
data via the API. | Boolean | (x) |false |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "members" : {
              "type" : "array",
              "description" : "A list of `user` objects, each containing details about a user in the\norganization.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "members" : [ {
              "is_active" : true,
              "email" : "AARON@zulip.com",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/818c212b9f8830dfef491b3f7da99a14?d=identicon&version=1",
              "bot_type" : null,
              "timezone" : "",
              "is_bot" : false,
              "user_id" : 7,
              "profile_data" : { },
              "is_guest" : false,
              "date_joined" : "2019-10-20T07:50:53.728864+00:00",
              "full_name" : "aaron"
            }, {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }, {
              "bot_owner_id" : 11,
              "is_guest" : false,
              "date_joined" : "2019-10-20T12:52:17.862053+00:00",
              "full_name" : "Iago's Bot",
              "email" : "iago-bot@zulipdev.com",
              "is_active" : true,
              "avatar_url" : "https://secure.gravatar.com/avatar/7328586831cdbb1627649bd857b1ee8c?d=identicon&version=1",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "user_id" : 23,
              "bot_type" : 1,
              "timezone" : "",
              "is_bot" : true
            } ]
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. muteUser
{panel:title=muteUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Mute a user
    *Description:* This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users
you&#39;ve muted will be automatically marked as read and hidden.

&#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;

Muted users should be implemented by clients as follows:

* The server will immediately mark all messages sent by the muted
  user as read.  This will automatically clear any existing mobile
  push notifications related to the muted user.
* The server will mark any new messages sent by the muted user as read
  for your account, which prevents all email and mobile push notifications.
* Clients should exclude muted users from presence lists or other UI
  for viewing or composing 1:1 private messages. 1:1 private messages sent by
  muted users should be hidden everywhere in the Zulip UI.
* Stream messages and group private messages sent by the muted
  user should avoid displaying the content and name/avatar,
  but should display that N messages by a muted user were
  hidden (so that it is possible to interpret the messages by
  other users who are talking with the muted user).
* Group private message conversations including the muted user
  should display muted users as &quot;Muted user&quot;, rather than
  showing their name, in lists of such conversations, along with using
  a blank grey avatar where avatars are displayed.
* Administrative/settings UI elements for showing &quot;All users that exist
  on this stream or realm&quot;, e.g. for organization
  administration or showing stream subscribers, should display
  the user&#39;s name as normal.

**Changes**: New in Zulip 4.0 (feature level 48).

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/muted_users/{muted_user_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |muted_user_id |The ID of the user to mute/un-mute. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<object,object,object> |
    	|| Response Model | [oneOf&lt;object,object,object&gt; Model|#oneOf&lt;object,object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is yourself",
            "example" : {
              "msg" : "Cannot mute self",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is nonexistent or inaccessible",
            "example" : {
              "msg" : "No such user",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is already muted",
            "example" : {
              "msg" : "User already muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. reactivateUser
{panel:title=reactivateUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Reactivate a user
    *Description:* [Reactivates a
user](https://zulip.com/help/deactivate-or-reactivate-a-user)
given their user ID.

&#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id}/reactivate{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id |The target user&#39;s ID. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | oas_any_type_not_mapped |
    	|| Response Model | [oas_any_type_not_mapped Model|#oas_any_type_not_mappedModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. removeUserGroup
{panel:title=removeUserGroup|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Delete a user group
    *Description:* Delete a [user group](/help/user-groups).

&#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_groups/{user_group_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_group_id |The ID of the target user group. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for an invalid user group id",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user group",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. setTypingStatus
{panel:title=setTypingStatus|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Set &quot;typing&quot; status
    *Description:* Notify other users whether the current user is typing a message.

&#x60;POST {{ api_url }}/v1/typing&#x60;

Clients implementing Zulip&#39;s typing notifications protocol should work as follows:

* Send a request to this endpoint with &#x60;op&#x3D;&quot;start&quot;&#x60; when a user starts typing a message,
  and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to
  actively type or otherwise interact with the compose UI (E.g. interacting with the
  compose box emoji picker).
* Send a request to this endpoint with &#x60;op&#x3D;&quot;stop&quot;&#x60; when a user pauses using the
  compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels
  the compose action (if it had previously sent a &quot;start&quot; operation for that
  compose action).
* Start displaying &quot;Sender is typing&quot; for a given conversation when the client
  receives an &#x60;op&#x3D;&quot;start&quot;&#x60; event from the [events API](/api/get-events).
* Continue displaying &quot;Sender is typing&quot; until they receive an &#x60;op&#x3D;&quot;stop&quot;&#x60; event
  from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;
  seconds have passed without a new &#x60;op&#x3D;&quot;start&quot;&#x60; event for that conversation.
* Clients that support displaying stream typing notifications (new in Zulip 4.0)
  should indicate they support processing stream typing events via the
  &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.

This protocol is designed to allow the server-side typing notifications implementation
to be stateless while being resilient; network failures cannot result in a user being
incorrectly displayed as perpetually typing.

See
[the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html)
for additional design details on Zulip&#39;s typing notifications protocol.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/typing{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |type |Type of the message being composed. | String | (x) |private |  | [private, stream] ||op |Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. | String | (/) |null |  | [start, stop] ||to |For &#39;private&#39; type it is the user_ids of the recipients of the message being typed.
Send a JSON-encoded list of user_ids. (Use a list even if there is only one
recipient.)

For &#39;stream&#39; type it is a single element list containing ID of stream in
which the message is being typed.

**Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded
list of email addresses.  Support for the email address-based format was
removed in Zulip 3.0 (feature level 11). | array[Integer] | (/) |null |  |  ||topic |Topic to which message is being typed. Required for the &#39;stream&#39; type.
Ignored in case of &#39;private&#39; type. | String | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for when user sends to multiple streams",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Cannot send to multiple streams",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. unmuteUser
{panel:title=unmuteUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Unmute a user
    *Description:* This endpoint unmutes a user.

&#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 48).

	|| HttpMethod | {status:colour=Yellow|title=delete|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/muted_users/{muted_user_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |muted_user_id |The ID of the user to mute/un-mute. | Integer | (/) |null |  |  |



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | oneOf<object,object> |
    	|| Response Model | [oneOf&lt;object,object&gt; Model|#oneOf&lt;object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is nonexistent or inaccessible",
            "example" : {
              "msg" : "No such user",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is not previously muted",
            "example" : {
              "msg" : "User is not muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateSettings
{panel:title=updateSettings|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update settings
    *Description:* This endpoint is used to edit the current user&#39;s settings.

&#x60;PATCH {{ api_url }}/v1/settings&#x60;

**Changes**: Prior to Zulip 5.0 (feature level 80), this
endpoint only supported the &#x60;full_name&#x60;, &#x60;email&#x60;,
&#x60;old_password&#x60;, and &#x60;new_password&#x60; parameters. Notification
settings were managed by &#x60;PATCH /settings/notifications&#x60;, and
all other settings by &#x60;PATCH /settings/display&#x60;. The feature level
80 migration to merge these endpoints did not change how request
parameters are encoded. Note, however, that it did change the
handling of any invalid parameters present in a request to change
notification or display settings, since the merged endpoint uses
the new response format that was introduced for &#x60;/settings&#x60; in
Zulip 5.0 (feature level 78).

The &#x60;/settings/display&#x60; and &#x60;/settings/notifications&#x60;
endpoints are now deprecated aliases for this endpoint for
backwards-compatibility, and will be removed once clients have
migrated to use this endpoint.

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/settings{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |full_name |A new display name for the user. | String | (x) |null |  |  ||email |Asks the server to initiate a confirmation sequence to change the user&#39;s email
address to the indicated value. The user will need to demonstrate control of the
new email address by clicking a confirmation link sent to that address. | String | (x) |null |  |  ||old_password |The user&#39;s old Zulip password (or LDAP password, if LDAP authentication is in use).

Required only when sending the &#x60;new_password&#x60; parameter. | String | (x) |null |  |  ||new_password |The user&#39;s new Zulip password (or LDAP password, if LDAP authentication is in use).

The &#x60;old_password&#x60; parameter must be included in the request. | String | (x) |null |  |  ||twenty_four_hour_time |Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||dense_mode |This setting has no effect at present.  It is reserved for use in controlling
the default font size in Zulip.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||starred_message_counts |Whether clients should display the [number of starred
messages](/help/star-a-message#display-the-number-of-starred-messages).

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||fluid_layout_width |Whether to use the [maximum available screen width](/help/enable-full-width-display)
for the web app&#39;s center panel (message feed, recent topics) on wide screens.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||high_contrast_mode |This setting is reserved for use to control variations in Zulip&#39;s design
to help visually impaired users.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||color_scheme |Controls which [color theme](/help/night-mode) to use.

* 1 - Automatic
* 2 - Night mode
* 3 - Day mode

Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60;
media query.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Integer | (x) |null |  | [1, 2, 3] ||enable_drafts_synchronization |A boolean parameter to control whether synchronizing drafts is enabled for
the user. When synchronization is disabled, all drafts stored in the server
will be automatically deleted from the server.

This does not do anything (like sending events) to delete local copies of
drafts stored in clients.

**Changes**: New in Zulip 5.0 (feature level 87). | Boolean | (x) |null |  |  ||translate_emoticons |Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)
in messages the user sends.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||default_language |What [default language](/help/change-your-language) to use for the account.

This controls both the Zulip UI as well as email notifications sent to the user.

The value needs to be a standard language code that the Zulip server has
translation data for; for example, &#x60;&quot;en&quot;&#x60; for English or &#x60;&quot;de&quot;&#x60; for German.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint.

Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). | String | (x) |null |  |  ||default_view |The [default view](/help/change-default-view) used when opening a new
Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.

* &quot;recent_topics&quot; - Recent topics view
* &quot;all_messages&quot; - All messages view

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint.

Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). | String | (x) |null |  |  ||left_side_userlist |Whether the users list on left sidebar in narrow windows.

This feature is not heavily used and is likely to be reworked.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Boolean | (x) |null |  |  ||emojiset |The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
used to display emoji to the user everything they appear in the UI.

* &quot;google&quot; - Google modern
* &quot;google-blob&quot; - Google classic
* &quot;twitter&quot; - Twitter
* &quot;text&quot; - Plain text

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint.

Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). | String | (x) |null |  |  ||demote_inactive_streams |Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.

* 1 - Automatic
* 2 - Always
* 3 - Never

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint. | Integer | (x) |null |  | [1, 2, 3] ||timezone |The user&#39;s [configured timezone](/help/change-your-timezone).

Timezone values supported by the server are served at
[/static/generated/timezones.json](/static/generated/timezones.json).

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/display&#x60; endpoint.

Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). | String | (x) |null |  |  ||enable_stream_desktop_notifications |Enable visual desktop notifications for stream messages.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_stream_email_notifications |Enable email notifications for stream messages.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_stream_push_notifications |Enable mobile notifications for stream messages.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_stream_audible_notifications |Enable audible desktop notifications for stream messages.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||notification_sound |Notification sound name.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint.

Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). | String | (x) |null |  |  ||enable_desktop_notifications |Enable visual desktop notifications for private messages and @-mentions.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_sounds |Enable audible desktop notifications for private messages and
@-mentions.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||email_notifications_batching_period_seconds |The duration (in seconds) for which the server should wait to batch
email notifications before sending them.

**Changes**: New in Zulip 5.0 (feature level 82) | Integer | (x) |null |  |  ||enable_offline_email_notifications |Enable email notifications for private messages and @-mentions received
when the user is offline.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_offline_push_notifications |Enable mobile notification for private messages and @-mentions received
when the user is offline.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_online_push_notifications |Enable mobile notification for private messages and @-mentions received
when the user is online.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_digest_emails |Enable digest emails when the user is away.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_marketing_emails |Enable marketing emails. Has no function outside Zulip Cloud.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enable_login_emails |Enable email notifications for new logins to account.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||message_content_in_email_notifications |Include the message&#39;s content in email notifications for new messages.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||pm_content_in_desktop_notifications |Include content of private messages in desktop notifications.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||wildcard_mentions_notify |Whether wildcard mentions (E.g. @**all**) should send notifications
like a personal mention.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||desktop_icon_count_display |Unread count summary (appears in desktop sidebar and browser tab)

* 1 - All unreads
* 2 - Private messages and mentions
* 3 - None

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Integer | (x) |null |  | [1, 2, 3] ||realm_name_in_notifications |Include organization name in subject of message notification emails.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||presence_enabled |Display the presence status to other users when online.

**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
the &#x60;PATCH /settings/notifications&#x60; endpoint. | Boolean | (x) |null |  |  ||enter_sends |Whether pressing Enter in the compose box sends a message
(or saves a message edit).

**Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by
the &#x60;POST /users/me/enter-sends&#x60; endpoint, with the same parameter format. | Boolean | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | JsonSuccessBase |
    	|| Response Model | [JsonSuccessBase Model|#JsonSuccessBaseModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "ignored_parameters_unsupported" : {
              "type" : "array",
              "description" : "This field lists any parameters sent in the request that are not\nsupported by the endpoint. While this can be expected, e.g. when sending\nboth current and legacy names for a parameter to a Zulip server of\nunknown version, this often indicates a bug in the client\nimplementation or an attempt to configure a new feature, while\nconnected to an older Zulip server that does not support the feature.\n\n**Changes**: New in Zulip 5.0 (feature level 78). Previously,\nthe `/settings` endpoint indicated which parameters it had\nprocessed by including in the response object `\"key\": value`\nentries for values successfully changed by the request.\n\nThe `/settings/notifications` and `/settings/display` endpoints\nalso had this behavior before they became aliases of `/settings`\nin Zulip 5.0 (feature level 80).\n\nBefore those changes, request parameters that were not supported\nor were unchanged were silently ignored.\n",
              "items" : {
                "type" : "string"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "ignored_parameters_unsupported" : [ "name", "password" ],
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateStatus
{panel:title=updateStatus|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update your status
    *Description:* Change your [status](/help/status-and-availability).

&#x60;POST {{ api_url }}/v1/users/me/status&#x60;

A request to this endpoint will only change the parameters passed.
For example, passing just &#x60;status_text&#x60; requests a change in the status
text, but will leave the status emoji unchanged.

Clients that wish to set the user&#39;s status to a specific value should
pass all supported parameters.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/me/status{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |status_text |The text content of the status message. Sending the empty string
will clear the user&#39;s status.

**Note**: The limit on the size of the message is 60 characters. | String | (x) |null |  |  ||away |Whether the user should be marked as &quot;away&quot;. | Boolean | (x) |null |  |  ||emoji_name |The name for the emoji to associate with this status. | String | (x) |null |  |  ||emoji_code |A unique identifier, defining the specific emoji codepoint requested,
within the namespace of the &#x60;reaction_type&#x60;.

For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the
Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. | String | (x) |null |  |  ||reaction_type |One of the following values:

* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode
  codepoint).
* &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).
  (&#x60;emoji_code&#x60; will be its ID).
* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to
  namespace the &#x60;zulip&#x60; emoji. | String | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | oneOf<object,object,object,object,object,object> |
    	|| Response Model | [oneOf&lt;object,object,object,object,object,object&gt; Model|#oneOf&lt;object,object,object,object,object,object&gt;ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when no changes were requested\n",
            "example" : {
              "result" : "error",
              "msg" : "Client did not pass any new values.",
              "code" : "BAD_REQUEST"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when the\n`status_text` message exceeds the limit of\n60 characters\n",
            "example" : {
              "result" : "error",
              "msg" : "status_text is too long (limit: 60 characters)",
              "code" : "BAD_REQUEST"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when `emoji_name` is not specified\nbut `emoji_code` or `reaction_type` is specified\n",
            "example" : {
              "result" : "error",
              "msg" : "Client must pass emoji_name if they pass either emoji_code or reaction_type.",
              "code" : "BAD_REQUEST"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when the emoji name does not exist\n",
            "example" : {
              "result" : "error",
              "msg" : "Emoji 'invalid' does not exist",
              "code" : "BAD_REQUEST"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when the emoji name is invalid\n",
            "example" : {
              "result" : "error",
              "msg" : "Invalid emoji name.",
              "code" : "BAD_REQUEST"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON error response when the custom emoji is invalid\n",
            "example" : {
              "result" : "error",
              "msg" : "Invalid custom emoji.",
              "code" : "BAD_REQUEST"
            }
          } ]
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateUser
{panel:title=updateUser|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update a user
    *Description:* Administrative endpoint to update the details of another user in the organization.

&#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;

Supports everything an administrator can do to edit details of another
user&#39;s account, including editing full name,
[role](/help/roles-and-permissions), and [custom profile
fields](/help/add-custom-profile-fields).

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/users/{user_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_id |The target user&#39;s ID. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |full_name |The user&#39;s full name. | String | (x) |null |  |  ||role |New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:

* Organization owner: 100
* Organization administrator: 200
* Organization moderator: 300
* Member: 400
* Guest: 600

Only organization owners can add or remove the owner role.

The owner role cannot be removed from the only organization owner.

**Changes**: New in Zulip 3.0 (feature level 8), replacing the previous
pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator
role added in Zulip 4.0 (feature level 60). | Integer | (x) |null |  |  ||profile_data |A dictionary containing the to be updated custom profile field data for the user. | array[Object] | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | CodedError |
    	|| Response Model | [CodedError Model|#CodedErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "A typical unsuccessful JSON response",
          "example" : {
            "result" : "error",
            "msg" : "Guests cannot be organization administrators",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateUserGroup
{panel:title=updateUserGroup|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update a user group
    *Description:* Update the name or description of a [user group](/help/user-groups).

&#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60;

	|| HttpMethod | {status:colour=Yellow|title=patch|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_groups/{user_group_id}{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_group_id |The ID of the target user group. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |name |The new name of the group. | String | (/) |null |  |  ||description |The new description of the group. | String | (/) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       


    	|| Status Code | {status:colour=Green|title=400|subtle=false} |
    	|| Message | Bad request. |
    	|| Response Type | JsonError |
    	|| Response Model | [JsonError Model|#JsonErrorModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response when the user group ID is invalid",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user group",
            "result" : "error"
          }
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. updateUserGroupMembers
{panel:title=updateUserGroupMembers|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Update user group members
    *Description:* Update the members of a [user group](/help/user-groups).

&#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60;

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/user_groups/{user_group_id}/members{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters
h5. Path Parameters
        ||Name||Description||Type||Required||Default||Pattern||Enum||
        |user_group_id |The ID of the target user group. | Integer | (/) |null |  |  |



h5. Query Parameters
        ||Name||Description||Required||Default||Pattern||
        |delete |The list of user ids to be removed from the user group. | array[Integer] | (x) |null |  |  ||add |The list of user ids to be added to the user group. | array[Integer] | (x) |null |  |  |
----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success. |
    	|| Response Type | JsonSuccess |
    	|| Response Model | [JsonSuccess Model|#JsonSuccessModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}{code} |
       

{panel}



h3. zulipOutgoingWebhooks
{panel:title=zulipOutgoingWebhooks|borderStyle=solid|borderColor=#003b6f|titleBGColor=#003b6f|titleColor=#a6b8c7|bgColor=#ffffff}
    *Summary:* Outgoing webhooks
    *Description:* Outgoing webhooks allows to build or set up Zulip integrations which are
notified when certain types of messages are sent in Zulip.

	|| HttpMethod | {status:colour=Yellow|title=post|subtle=false} |
    || Protocol | {noformat:nopanel=true}https{noformat} |
    || Path | {noformat:nopanel=true}/zulip-outgoing-webhook{noformat} |
    || Base Path | {noformat:nopanel=true}https://example.zulipchat.com/api/v1{noformat} |
    || Produces | {noformat:nopanel=true}application/json{noformat} |
----
h4. Parameters



----
h4. Responses

    	|| Status Code | {status:colour=Green|title=200|subtle=false} |
    	|| Message | Success |
    	|| Response Type | inline_response_200 |
    	|| Response Model | [inline_response_200 Model|#inline_response_200ModelAnchor|Jump to model] |
    	|| Response Schema | {code:collapse=true}{
  "description" : "Success\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_200"
      }
    }
  }
}{code} |
       

{panel}


{anchor:models}
h2. Models

        {anchor:AddSubscriptionsResponseModelAnchor}
        h3. AddSubscriptionsResponse

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subscribed |(x) |{noformat:nopanel=true}map[String, array[String]]{noformat} |A dictionary where the key is the email address of the user/bot and the
value is a list of the names of the streams that were subscribed to as a
result of the query. |  |
         |already_subscribed |(x) |{noformat:nopanel=true}map[String, array[String]]{noformat} |A dictionary where the key is the email address of the user/bot and the
value is a list of the names of the streams that the user/bot is already
subscribed to. |  |
         |unauthorized |(x) |{noformat:nopanel=true}array[String]{noformat} |A list of names of streams that the requesting user/bot was not
authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. |  |
         
        {anchor:AddSubscriptionsResponseAllOfModelAnchor}
        h3. AddSubscriptionsResponseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subscribed |(x) |{noformat:nopanel=true}map[String, array[String]]{noformat} |A dictionary where the key is the email address of the user/bot and the
value is a list of the names of the streams that were subscribed to as a
result of the query. |  |
         |already_subscribed |(x) |{noformat:nopanel=true}map[String, array[String]]{noformat} |A dictionary where the key is the email address of the user/bot and the
value is a list of the names of the streams that the user/bot is already
subscribed to. |  |
         |unauthorized |(x) |{noformat:nopanel=true}array[String]{noformat} |A list of names of streams that the requesting user/bot was not
authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. |  |
         
        {anchor:ApiKeyResponseModelAnchor}
        h3. ApiKeyResponse

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(/) |{noformat:nopanel=true}String{noformat} |The API key that can be used to authenticate as the requested user. |  |
         |email |(/) |{noformat:nopanel=true}String{noformat} |The email address of the user who owns the API key |  |
         
        {anchor:ApiKeyResponseAllOfModelAnchor}
        h3. ApiKeyResponseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(/) |{noformat:nopanel=true}String{noformat} |The API key that can be used to authenticate as the requested user. |  |
         |email |(/) |{noformat:nopanel=true}String{noformat} |The email address of the user who owns the API key |  |
         
        {anchor:AttachmentsModelAnchor}
        h3. Attachments

        Dictionary containing details of a file uploaded by a user.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID for the attachment. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |Name of the uploaded file. |  |
         |path_id |(x) |{noformat:nopanel=true}String{noformat} |A representation of the path of the file within the
repository of user-uploaded files.  If the &#x60;path_id&#x60; of a
file is &#x60;{realm_id}/ab/cdef/temp_file.py&#x60;, its URL will be:
&#x60;{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py&#x60;. |  |
         |size |(x) |{noformat:nopanel=true}Integer{noformat} |Size of the file in bytes. |  |
         |create_time |(x) |{noformat:nopanel=true}Integer{noformat} |Time when the attachment was uploaded as a UNIX timestamp
multiplied by 1000 (matching the format of getTime() in JavaScript).

**Changes**: Changed in Zulip 2.2 (feature level 22).  This field was
previously a floating point number. |  |
         |messages |(x) |{noformat:nopanel=true}array[Attachments_messages]{noformat} |Contains basic details on any Zulip messages that have been
sent referencing this [uploaded file](/api/upload-file).
This includes messages sent by any user in the Zulip
organization who sent a message containing a link to the
uploaded file. |  |
         
        {anchor:AttachmentsMessagesModelAnchor}
        h3. AttachmentsMessages

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |date_sent |(x) |{noformat:nopanel=true}Integer{noformat} |Time when the message was sent as a UNIX timestamp
multiplied by 1000 (matching the format of getTime() in JavaScript).

**Changes**: Changed in Zulip 2.2 (feature level 22).  This
field was previously strangely called &#x60;name&#x60; and was a floating
point number. |  |
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique message ID.  Messages should always be
displayed sorted by ID. |  |
         
        {anchor:BadEventQueueIdErrorModelAnchor}
        h3. BadEventQueueIdError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |queue_id |(x) |{noformat:nopanel=true}String{noformat} |The string that identifies the invalid event queue. |  |
         
        {anchor:BadEventQueueIdErrorAllOfModelAnchor}
        h3. BadEventQueueIdErrorAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |queue_id |(x) |{noformat:nopanel=true}String{noformat} |The string that identifies the invalid event queue. |  |
         
        {anchor:BasicBotModelAnchor}
        h3. BasicBot

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_sending_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_events_register_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_all_public_streams |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |services |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:BasicBotAllOfModelAnchor}
        h3. BasicBotAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_sending_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_events_register_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_all_public_streams |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |services |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:BasicBotBaseModelAnchor}
        h3. BasicBotBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}Integer{noformat} |The user id of the bot. |  |
         |full_name |(x) |{noformat:nopanel=true}String{noformat} |The full name of the bot. |  |
         |api_key |(x) |{noformat:nopanel=true}String{noformat} |The API key of the bot which it uses to make API requests. |  |
         |default_sending_stream |(x) |{noformat:nopanel=true}String{noformat} |The default sending stream of the bot. Null if the bot doesn&#39;t
have a default sending stream. |  |
         |default_events_register_stream |(x) |{noformat:nopanel=true}String{noformat} |The default stream for which the bot receives events/register data. Null if
the bot doesn&#39;t have such a default stream. |  |
         |default_all_public_streams |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the bot can send messages to all streams by default. |  |
         |avatar_url |(x) |{noformat:nopanel=true}String{noformat} |The URL of the bot&#39;s avatar. |  |
         |owner_id |(x) |{noformat:nopanel=true}Integer{noformat} |The user id of the bot&#39;s owner.

Null if the bot has no owner. |  |
         |services |(x) |{noformat:nopanel=true}array[oneOf<object,object>]{noformat} |The &quot;Services&quot; array contains extra configuration fields only relevant
for Outgoing webhook bots and Embedded bots.  It is always a single-element
array.

We consider this part of the Zulip API to be unstable; it is used only for
UI elements for administering bots and is likely to change. |  |
         
        {anchor:BasicStreamModelAnchor}
        h3. BasicStream

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |description |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |date_created |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |invite_only |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |rendered_description |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_web_public |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_post_policy |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |message_retention_days |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |history_public_to_subscribers |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |first_message_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_announcement_only |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:BasicStreamAllOfModelAnchor}
        h3. BasicStreamAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |description |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |date_created |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |invite_only |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |rendered_description |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_web_public |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_post_policy |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |message_retention_days |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |history_public_to_subscribers |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |first_message_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_announcement_only |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:BasicStreamBaseModelAnchor}
        h3. BasicStreamBase

        Object containing basic details about the stream.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |stream_id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID of the stream. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The name of the stream. |  |
         |description |(x) |{noformat:nopanel=true}String{noformat} |The short description of the stream in text/markdown format,
intended to be used to prepopulate UI for editing a stream&#39;s
description. |  |
         |date_created |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp for when the stream was created, in UTC seconds.

**Changes**: New in Zulip 4.0 (feature level 30). |  |
         |invite_only |(x) |{noformat:nopanel=true}Boolean{noformat} |Specifies whether the stream is private or not.
Only people who have been invited can access a private stream. |  |
         |rendered_description |(x) |{noformat:nopanel=true}String{noformat} |The short description of the stream rendered as HTML, intended to
be used when displaying the stream description in a UI.

One should use the standard Zulip rendered_markdown CSS when
displaying this content so that emoji, LaTeX, and other syntax
work correctly.  And any client-side security logic for
user-generated message content should be applied when displaying
this HTML as though it were the body of a Zulip message. |  |
         |is_web_public |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the stream has been configured to allow unauthenticated
access to its message history from the web. |  |
         |stream_post_policy |(x) |{noformat:nopanel=true}Integer{noformat} |Policy for which users can post messages to the stream.

* 1 &#x3D;&gt; Any user can post.
* 2 &#x3D;&gt; Only administrators can post.
* 3 &#x3D;&gt; Only full members can post.
* 4 &#x3D;&gt; Only moderators can post.

**Changes**: New in Zulip 3.0, replacing the previous
&#x60;is_announcement_only&#x60; boolean. |  |
         |message_retention_days |(x) |{noformat:nopanel=true}Integer{noformat} |Number of days that messages sent to this stream will be stored
before being automatically deleted by the [message retention
policy](/help/message-retention-policy).  There are two special values:

* &#x60;null&#x60;, the default, means the stream will inherit the organization
  level setting.
* &#x60;-1&#x60; encodes retaining messages in this stream forever.

**Changes**: New in Zulip 3.0 (feature level 17). |  |
         |history_public_to_subscribers |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the history of the stream is public to its subscribers.

Currently always true for public streams (i.e. invite_only&#x3D;False implies
history_public_to_subscribers&#x3D;True), but clients should not make that
assumption, as we may change that behavior in the future. |  |
         |first_message_id |(x) |{noformat:nopanel=true}Integer{noformat} |The id of the first message in the stream.

Intended to help clients determine whether they need to display
UI like the &quot;more topics&quot; widget that would suggest the stream
has older history that can be accessed.

Null is used for streams with no message history. |  |
         |is_announcement_only |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the given stream is announcement only or not.

**Changes**: Deprecated in Zulip 3.0 (feature level 1), use
&#x60;stream_post_policy&#x60; instead. |  |
         
        {anchor:BotModelAnchor}
        h3. Bot

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_sending_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_events_register_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_all_public_streams |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |services |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |email |(x) |{noformat:nopanel=true}String{noformat} |The email of the bot. |  |
         |bot_type |(x) |{noformat:nopanel=true}Integer{noformat} |An integer describing the type of bot:
* &#x60;1&#x60; for a &#x60;Generic&#x60; bot.
* &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot.
* &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot.
* &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. |  |
         |is_active |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean describing whether the user account has been deactivated. |  |
         
        {anchor:BotAllOfModelAnchor}
        h3. BotAllOf

        Object containing details of a bot.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |api_key |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_sending_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_events_register_stream |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |default_all_public_streams |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |services |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |email |(x) |{noformat:nopanel=true}String{noformat} |The email of the bot. |  |
         |bot_type |(x) |{noformat:nopanel=true}Integer{noformat} |An integer describing the type of bot:
* &#x60;1&#x60; for a &#x60;Generic&#x60; bot.
* &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot.
* &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot.
* &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. |  |
         |is_active |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean describing whether the user account has been deactivated. |  |
         
        {anchor:CodedErrorModelAnchor}
        h3. CodedError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:CodedErrorAllOfModelAnchor}
        h3. CodedErrorAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:CodedErrorBaseModelAnchor}
        h3. CodedErrorBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}String{noformat} |A string that identifies the error. |  |
         
        {anchor:CodedErrorBaseAllOfModelAnchor}
        h3. CodedErrorBaseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}String{noformat} |A string that identifies the error. |  |
         
        {anchor:CustomProfileFieldModelAnchor}
        h3. CustomProfileField

        Dictionary containing the details of a custom profile field configured
for this organization.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The ID of the custom profile field.  This will be referenced in custom
the profile fields section of user objects. |  |
         |type |(x) |{noformat:nopanel=true}Integer{noformat} |An integer indicating the type of the custom profile field, which determines
how it is configured and displayed to users.

See the [Add custom profile fields](/help/add-custom-profile-fields)
article for details on what each type means.

* **1**: Short text
* **2**: Long text
* **3**: List of options
* **4**: Date picker
* **5**: Link
* **6**: Person picker
* **7**: External account |  |
         |order |(x) |{noformat:nopanel=true}Integer{noformat} |Custom profile fields are displayed in both settings UI and
UI showing users&#39; profiles in increasing &#x60;order&#x60;. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The name of the custom profile field. |  |
         |hint |(x) |{noformat:nopanel=true}String{noformat} |The help text to be displayed for the custom profile field in user-facing
settings UI for configuring custom profile fields. |  |
         |field_data |(x) |{noformat:nopanel=true}String{noformat} |Field types 3 (List of options) and 7 (External account) support storing
additional configuration for the field type in the &#x60;field_data&#x60; attribute.

For field type 3 (List of options), this attribute is a JSON dictionary
defining the choices and the order they will be displayed in the
dropdown UI for individual users to select an option.

The interface for field type 7 is not yet stabilized. |  |
         
        {anchor:DefaultStreamGroupModelAnchor}
        h3. DefaultStreamGroup

        Dictionary containing details of a default stream
group.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |name |(x) |{noformat:nopanel=true}String{noformat} |Name of the default stream group. |  |
         |description |(x) |{noformat:nopanel=true}String{noformat} |Description of the default stream group. |  |
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |id of the default stream group. |  |
         |streams |(x) |{noformat:nopanel=true}array[BasicStream]{noformat} |Array containing details about the streams
in the default stream group. |  |
         
        {anchor:DraftModelAnchor}
        h3. Draft

        A dictionary for representing a message draft.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID of the draft. It will only used whenever the drafts are
fetched. This field should not be specified when the draft is being
created or edited. |  |
         |type |(/) |{noformat:nopanel=true}String{noformat} |The type of the draft. Either unaddressed (empty string), &quot;stream&quot;,
or &quot;private&quot; (for PMs and private group messages). |  [, stream, private]  |
         |to |(/) |{noformat:nopanel=true}array[Integer]{noformat} |An array of the tentative target audience IDs. For &quot;stream&quot;
messages, this should contain exactly 1 ID, the ID of the
target stream. For private messages, this should be an array
of target user IDs. For unaddressed drafts, this is ignored,
and clients should send an empty array. |  |
         |topic |(/) |{noformat:nopanel=true}String{noformat} |For stream message drafts, the tentative topic name. For private
or unaddressed messages, this will be ignored and should ideally
be the empty string. Should not contain null bytes. |  |
         |content |(/) |{noformat:nopanel=true}String{noformat} |The body of the draft. Should not contain null bytes. |  |
         |timestamp |(x) |{noformat:nopanel=true}BigDecimal{noformat} |A Unix timestamp (seconds only) representing when the draft was
last edited. When creating a draft, this key need not be present
and it will be filled in automatically by the server. |  |
         
        {anchor:EmojiBaseModelAnchor}
        h3. EmojiBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |emoji_code |(x) |{noformat:nopanel=true}String{noformat} |A unique identifier, defining the specific emoji codepoint requested,
within the namespace of the &#x60;reaction_type&#x60;.

For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the
Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. |  |
         |emoji_name |(x) |{noformat:nopanel=true}String{noformat} |Name of the emoji. |  |
         |reaction_type |(x) |{noformat:nopanel=true}String{noformat} |One of the following values:

* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode
  codepoint).
* &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).
  (&#x60;emoji_code&#x60; will be its ID).
* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to
  namespace the &#x60;zulip&#x60; emoji. |  |
         
        {anchor:EmojiReactionModelAnchor}
        h3. EmojiReaction

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |emoji_code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |emoji_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reaction_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:EmojiReactionAllOfModelAnchor}
        h3. EmojiReactionAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |emoji_code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |emoji_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reaction_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:EmojiReactionBaseModelAnchor}
        h3. EmojiReactionBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |emoji_code |(x) |{noformat:nopanel=true}String{noformat} |A unique identifier, defining the specific emoji codepoint requested,
within the namespace of the &#x60;reaction_type&#x60;.

For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the
Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. |  |
         |emoji_name |(x) |{noformat:nopanel=true}String{noformat} |Name of the emoji. |  |
         |reaction_type |(x) |{noformat:nopanel=true}String{noformat} |One of the following values:

* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode
  codepoint).
* &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).
  (&#x60;emoji_code&#x60; will be its ID).
* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to
  namespace the &#x60;zulip&#x60; emoji. |  |
         |user_id |(x) |{noformat:nopanel=true}Integer{noformat} |The ID of the user who added the reaction.

**Changes**: New in Zulip 3.0 (feature level 2). The &#x60;user&#x60;
object is deprecated and will be removed in the future. |  |
         |user |(x) |{noformat:nopanel=true}EmojiReactionBase_allOf_user{noformat} | |  |
         
        {anchor:EmojiReactionBaseAllOfModelAnchor}
        h3. EmojiReactionBaseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |user_id |(x) |{noformat:nopanel=true}Integer{noformat} |The ID of the user who added the reaction.

**Changes**: New in Zulip 3.0 (feature level 2). The &#x60;user&#x60;
object is deprecated and will be removed in the future. |  |
         |user |(x) |{noformat:nopanel=true}EmojiReactionBase_allOf_user{noformat} | |  |
         
        {anchor:EmojiReactionBaseAllOfUserModelAnchor}
        h3. EmojiReactionBaseAllOfUser

        Whether the user is a mirror dummy.
Dictionary with data on the user who added the reaction, including
the user ID as the `id` field.  **Note**: In the [events
API](/api/get-events), this `user` dictionary
confusing had the user ID in a field called `user_id`
instead.  We recommend ignoring fields other than the user
ID.  **Deprecated** and to be removed in a future release
once core clients have migrated to use the `user_id` field.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |ID of the user. |  |
         |email |(x) |{noformat:nopanel=true}String{noformat} |Email of the user. |  |
         |full_name |(x) |{noformat:nopanel=true}String{noformat} |Full name of the user. |  |
         |is_mirror_dummy |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the user is a mirror dummy. |  |
         
        {anchor:GetMessagesModelAnchor}
        h3. GetMessages

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |client |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |display_recipient |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_me_message |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reactions |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |recipient_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_realm_str |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subject |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |topic_links |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |submessages |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timestamp |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |flags |(x) |{noformat:nopanel=true}array[String]{noformat} |The user&#39;s [message flags][message-flags] for the message.

[message-flags]: /api/update-message-flags#available-flags |  |
         |last_edit_timestamp |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp for when the message was last edited,
in UTC seconds. |  |
         |match_content |(x) |{noformat:nopanel=true}String{noformat} |Only present if keyword search was included among the narrow parameters.
HTML content of a queried message that matches the narrow, with
&#x60;&lt;span class&#x3D;&quot;highlight&quot;&gt;&#x60; elements wrapping the matches for the
search keywords. |  |
         |match_subject |(x) |{noformat:nopanel=true}String{noformat} |Only present if keyword search was included among the narrow parameters.
HTML-escaped topic of a queried message that matches the narrow, with
&#x60;&lt;span class&#x3D;&quot;highlight&quot;&gt;&#x60; elements wrapping the matches for the
search keywords. |  |
         
        {anchor:GetMessagesAllOfModelAnchor}
        h3. GetMessagesAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |client |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |display_recipient |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_me_message |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reactions |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |recipient_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_realm_str |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subject |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |topic_links |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |submessages |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timestamp |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |flags |(x) |{noformat:nopanel=true}array[String]{noformat} |The user&#39;s [message flags][message-flags] for the message.

[message-flags]: /api/update-message-flags#available-flags |  |
         |last_edit_timestamp |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp for when the message was last edited,
in UTC seconds. |  |
         |match_content |(x) |{noformat:nopanel=true}String{noformat} |Only present if keyword search was included among the narrow parameters.
HTML content of a queried message that matches the narrow, with
&#x60;&lt;span class&#x3D;&quot;highlight&quot;&gt;&#x60; elements wrapping the matches for the
search keywords. |  |
         |match_subject |(x) |{noformat:nopanel=true}String{noformat} |Only present if keyword search was included among the narrow parameters.
HTML-escaped topic of a queried message that matches the narrow, with
&#x60;&lt;span class&#x3D;&quot;highlight&quot;&gt;&#x60; elements wrapping the matches for the
search keywords. |  |
         
        {anchor:HotspotModelAnchor}
        h3. Hotspot

        Dictionary containing details of a single hotspot.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |delay |(x) |{noformat:nopanel=true}BigDecimal{noformat} |The delay after which the user should be shown the hotspot. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The name of the hotspot. |  |
         |title |(x) |{noformat:nopanel=true}String{noformat} |The title of the hotspot, as will be displayed to the user. |  |
         |description |(x) |{noformat:nopanel=true}String{noformat} |The description of the hotspot, as will be displayed to the
user. |  |
         
        {anchor:InlineResponse200ModelAnchor}
        h3. InlineResponse200

        This is an example of the JSON payload that the Zulip server will `POST`
to your server
        
        
        ||Field Name||Required||Type||Description||Enum||
         |bot_email |(x) |{noformat:nopanel=true}String{noformat} |Email of the bot user. |  |
         |bot_full_name |(x) |{noformat:nopanel=true}String{noformat} |The full name of the bot user. |  |
         |data |(x) |{noformat:nopanel=true}String{noformat} |The message content, in raw Markdown format (not rendered to HTML). |  |
         |trigger |(x) |{noformat:nopanel=true}String{noformat} |What aspect of the message triggered the outgoing webhook notification.
Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. |  |
         |token |(x) |{noformat:nopanel=true}String{noformat} |A string of alphanumeric characters that can be used to authenticate the
webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot
in the &#x60;zuliprc&#x60; file downloaded when creating the bot. |  |
         |message |(x) |{noformat:nopanel=true}MessagesBase{noformat} |A dict containing details on the message that triggered the
outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). |  |
         
        {anchor:InvalidApiKeyErrorModelAnchor}
        h3. InvalidApiKeyError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:InvalidMessageErrorModelAnchor}
        h3. InvalidMessageError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |raw_content |(x) |{noformat:nopanel=true}String{noformat} |The raw content of the message. |  |
         
        {anchor:InvalidMessageErrorAllOfModelAnchor}
        h3. InvalidMessageErrorAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |raw_content |(x) |{noformat:nopanel=true}String{noformat} |The raw content of the message. |  |
         
        {anchor:JsonErrorModelAnchor}
        h3. JsonError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:JsonErrorBaseModelAnchor}
        h3. JsonErrorBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}String{noformat} | |  [error]  |
         |msg |(/) |{noformat:nopanel=true}String{noformat} | |  |
         
        {anchor:JsonErrorBaseAllOfModelAnchor}
        h3. JsonErrorBaseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}String{noformat} | |  [error]  |
         |msg |(/) |{noformat:nopanel=true}String{noformat} | |  |
         
        {anchor:JsonResponseBaseModelAnchor}
        h3. JsonResponseBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}String{noformat} | |  |
         
        {anchor:JsonSuccessModelAnchor}
        h3. JsonSuccess

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:JsonSuccessAllOfModelAnchor}
        h3. JsonSuccessAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:JsonSuccessBaseModelAnchor}
        h3. JsonSuccessBase

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}String{noformat} | |  [success]  |
         |msg |(/) |{noformat:nopanel=true}String{noformat} | |  |
         
        {anchor:JsonSuccessBaseAllOfModelAnchor}
        h3. JsonSuccessBaseAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}String{noformat} | |  [success]  |
         |msg |(/) |{noformat:nopanel=true}String{noformat} | |  |
         
        {anchor:MessagesModelAnchor}
        h3. Messages

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |client |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |display_recipient |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_me_message |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reactions |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |recipient_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_realm_str |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subject |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |topic_links |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |submessages |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timestamp |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:MessagesAllOfModelAnchor}
        h3. MessagesAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |client |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |content_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |display_recipient |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_me_message |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |reactions |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |recipient_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |sender_realm_str |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |subject |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |topic_links |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |submessages |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timestamp |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:MessagesBaseModelAnchor}
        h3. MessagesBase

        Object containing details of the message.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |avatar_url |(x) |{noformat:nopanel=true}String{noformat} |The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed,
which means that the user has not uploaded an avatar in Zulip, and the
client should compute the gravatar URL by hashing the
user&#39;s email address itself for this user. |  |
         |client |(x) |{noformat:nopanel=true}String{noformat} |A Zulip &quot;client&quot; string, describing what Zulip client
sent the message. |  |
         |content |(x) |{noformat:nopanel=true}String{noformat} |The content/body of the message. |  |
         |content_type |(x) |{noformat:nopanel=true}String{noformat} |The HTTP &#x60;content_type&#x60; for the message content.  This
will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on
whether &#x60;apply_markdown&#x60; was set. |  |
         |display_recipient |(x) |{noformat:nopanel=true}oneOf<string,array>{noformat} |Data on the recipient of the message;
either the name of a stream or a dictionary containing basic data on
the users who received the message. |  |
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique message ID.  Messages should always be
displayed sorted by ID. |  |
         |is_me_message |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the message is a [/me status message][status-messages]

[status-messages]: /help/format-your-message-using-markdown#status-messages |  |
         |reactions |(x) |{noformat:nopanel=true}array[EmojiReaction]{noformat} |Data on any reactions to the message. |  |
         |recipient_id |(x) |{noformat:nopanel=true}Integer{noformat} |A unique ID for the set of users receiving the
message (either a stream or group of users).  Useful primarily
for hashing. |  |
         |sender_email |(x) |{noformat:nopanel=true}String{noformat} |The Zulip display email address of the message&#39;s sender. |  |
         |sender_full_name |(x) |{noformat:nopanel=true}String{noformat} |The full name of the message&#39;s sender. |  |
         |sender_id |(x) |{noformat:nopanel=true}Integer{noformat} |The user ID of the message&#39;s sender. |  |
         |sender_realm_str |(x) |{noformat:nopanel=true}String{noformat} |A string identifier for the realm the sender is in.  Unique only within
the context of a given Zulip server.

E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;. |  |
         |stream_id |(x) |{noformat:nopanel=true}Integer{noformat} |Only present for stream messages; the ID of the stream. |  |
         |subject |(x) |{noformat:nopanel=true}String{noformat} |The &#x60;topic&#x60; of the message.  Currently always &#x60;&quot;&quot;&#x60; for private messages,
though this could change if Zulip adds support for topics in private
message conversations.

The field name is a legacy holdover from when topics were
called &quot;subjects&quot; and will eventually change. |  |
         |topic_links |(x) |{noformat:nopanel=true}array[MessagesBase_topic_links]{noformat} |Data on any links to be included in the &#x60;topic&#x60;
line (these are generated by [custom linkification
filters](/help/add-a-custom-linkifier) that match content in the
message&#39;s topic.)

**Changes**: This field contained a list of urls before
  Zulip 4.0 (feature level 46).

New in Zulip 3.0 (feature level 1): Previously, this field was called
&#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60;
if present for compatibility with older Zulip servers. |  |
         |submessages |(x) |{noformat:nopanel=true}array[String]{noformat} |Data used for certain experimental Zulip integrations. |  |
         |timestamp |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp for when the message was sent,
in UTC seconds. |  |
         |type |(x) |{noformat:nopanel=true}String{noformat} |The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;. |  |
         
        {anchor:MessagesBaseTopicLinksModelAnchor}
        h3. MessagesBaseTopicLinks

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |text |(x) |{noformat:nopanel=true}String{noformat} |The original link text present in the topic. |  |
         |url |(x) |{noformat:nopanel=true}String{noformat} |The expanded target url which the link points to. |  |
         
        {anchor:MissingArgumentErrorModelAnchor}
        h3. MissingArgumentError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |var_name |(x) |{noformat:nopanel=true}String{noformat} |It contains the information about the missing parameter. |  |
         
        {anchor:MissingArgumentErrorAllOfModelAnchor}
        h3. MissingArgumentErrorAllOf

        ## Missing request parameter(s)

A typical failed JSON response for when a required request parameter
is not supplied
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |var_name |(x) |{noformat:nopanel=true}String{noformat} |It contains the information about the missing parameter. |  |
         
        {anchor:NonExistingStreamErrorModelAnchor}
        h3. NonExistingStreamError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream |(x) |{noformat:nopanel=true}String{noformat} |The name of the stream that could not be found. |  |
         
        {anchor:NonExistingStreamErrorAllOfModelAnchor}
        h3. NonExistingStreamErrorAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |stream |(x) |{noformat:nopanel=true}String{noformat} |The name of the stream that could not be found. |  |
         
        {anchor:PresenceModelAnchor}
        h3. Presence

        `{client_name}`: Object containing the details of the user's
presence on a particular platform with the client's platform
name being the object key.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |client |(x) |{noformat:nopanel=true}String{noformat} |The client&#39;s platform name. |  |
         |status |(x) |{noformat:nopanel=true}String{noformat} |The status of the user on this client. It is either &#x60;idle&#x60;
or &#x60;active&#x60;. |  [idle, active]  |
         |timestamp |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp of when this client sent the user&#39;s presence
to the server with the precision of a second. |  |
         |pushable |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the client is capable of showing mobile/push notifications
to the user. |  |
         
        {anchor:RateLimitedErrorModelAnchor}
        h3. RateLimitedError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:RealmDeactivatedErrorModelAnchor}
        h3. RealmDeactivatedError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:RealmDomainModelAnchor}
        h3. RealmDomain

        Object containing details of the newly added domain.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |domain |(x) |{noformat:nopanel=true}String{noformat} |The new allowed domain. |  |
         |allow_subdomains |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether subdomains are allowed for this domain. |  |
         
        {anchor:RealmEmojiModelAnchor}
        h3. RealmEmoji

        `{emoji_id}`: Object containing details about the emoji with
 the specified ID. It has the following properties:
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}String{noformat} |The ID for this emoji, same as the object&#39;s key. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The user-friendly name for this emoji. Users in the organization
can use this emoji by writing this name between colons (&#x60;:name  :&#x60;). |  |
         |source_url |(x) |{noformat:nopanel=true}String{noformat} |The path relative to the organization&#39;s URL where the
emoji&#39;s image can be found. |  |
         |deactivated |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the emoji has been deactivated or not. |  |
         |author_id |(x) |{noformat:nopanel=true}Integer{noformat} |The user ID of the user who uploaded the custom emoji.
Will be null if the uploader is unknown.

**Changes**: New in Zulip 3.0 (feature level 7).  Previously
was accessible via and &#x60;author&#x60; object with an &#x60;id&#x60; field. |  |
         
        {anchor:RealmExportModelAnchor}
        h3. RealmExport

        Object containing details about a realm export.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The id of the export. |  |
         |acting_user_id |(x) |{noformat:nopanel=true}Integer{noformat} |The id of the user who did the export. |  |
         |export_time |(x) |{noformat:nopanel=true}BigDecimal{noformat} |The UNIX timestamp of when the export was made. |  |
         |deleted_timestamp |(x) |{noformat:nopanel=true}BigDecimal{noformat} |The timestamp of when the export was deleted.
Null if it wasn&#39;t. |  |
         |failed_timestamp |(x) |{noformat:nopanel=true}BigDecimal{noformat} |The timestamp of when the export failed.
Null if it didn&#39;t. |  |
         |export_url |(x) |{noformat:nopanel=true}String{noformat} |The URL of the export. &#x60;null&#x60; if there&#39;s no URL. |  |
         |pending |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the export is pending or not. |  |
         
        {anchor:RealmPlaygroundModelAnchor}
        h3. RealmPlayground

        Object containing details about a realm playground.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID for the realm playground. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The user-visible display name of the playground.  Clients
should display this in UI for picking which playground to
open a code block in, to differentiate between multiple
configured playground options for a given pygments
language.

**Changes**: New in Zulip 4.0 (feature level 49). |  |
         |pygments_language |(x) |{noformat:nopanel=true}String{noformat} |The name of the Pygments language lexer for that
programming language. |  |
         |url_prefix |(x) |{noformat:nopanel=true}String{noformat} |The url prefix for the playground. |  |
         
        {anchor:SubscriptionsModelAnchor}
        h3. Subscriptions

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |stream_id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID of a stream. |  |
         |name |(x) |{noformat:nopanel=true}String{noformat} |The name of a stream. |  |
         |description |(x) |{noformat:nopanel=true}String{noformat} |The short description of a stream in text/markdown format,
intended to be used to prepopulate UI for editing a stream&#39;s
description. |  |
         |rendered_description |(x) |{noformat:nopanel=true}String{noformat} |A short description of a stream rendered as HTML, intended to
be used when displaying the stream description in a UI.

One should use the standard Zulip rendered_markdown CSS when
displaying this content so that emoji, LaTeX, and other syntax
work correctly.  And any client-side security logic for
user-generated message content should be applied when displaying
this HTML as though it were the body of a Zulip message. |  |
         |date_created |(x) |{noformat:nopanel=true}Integer{noformat} |The UNIX timestamp for when the stream was created, in UTC seconds.

**Changes**: New in Zulip 4.0 (feature level 30). |  |
         |invite_only |(x) |{noformat:nopanel=true}Boolean{noformat} |Specifies whether the stream is private or not.
Only people who have been invited can access a private stream. |  |
         |subscribers |(x) |{noformat:nopanel=true}array[Integer]{noformat} |A list of user IDs of users who are also subscribed
to a given stream. Included only if &#x60;include_subscribers&#x60; is &#x60;true&#x60;. |  |
         |desktop_notifications |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether desktop notifications
are enabled for the given stream.

A null value means the value of this setting
should be inherited from the user-level default
setting, enable_stream_desktop_notifications, for
this stream. |  |
         |email_notifications |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether email notifications
are enabled for the given stream.

A null value means the value of this setting
should be inherited from the user-level default
setting, enable_stream_email_notifications, for
this stream. |  |
         |wildcard_mentions_notify |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether wildcard mentions
trigger notifications as though they were personal
mentions in this stream.

A null value means the value of this setting
should be inherited from the user-level default
setting, wildcard_mentions_notify, for
this stream. |  |
         |push_notifications |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether push notifications
are enabled for the given stream.

A null value means the value of this setting
should be inherited from the user-level default
setting, enable_stream_push_notifications, for
this stream. |  |
         |audible_notifications |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether audible notifications
are enabled for the given stream.

A null value means the value of this setting
should be inherited from the user-level default
setting, enable_stream_audible_notifications, for
this stream. |  |
         |pin_to_top |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the given stream has been pinned
to the top. |  |
         |email_address |(x) |{noformat:nopanel=true}String{noformat} |Email address of the given stream, used for
[sending emails to the stream](/help/message-a-stream-by-email). |  |
         |is_muted |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the user has muted the stream. Muted streams do
not count towards your total unread count and do not show up in
&#x60;All messages&#x60; view (previously known as &#x60;Home&#x60; view).

**Changes**: Prior to Zulip 2.1, this feature was
represented by the more confusingly named &#x60;in_home_view&#x60; (with the
opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;). |  |
         |in_home_view |(x) |{noformat:nopanel=true}Boolean{noformat} |Legacy property for if the given stream is muted, with inverted meeting.

**Deprecated**; clients should use is_muted where available. |  |
         |is_announcement_only |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether only organization administrators can post to the stream.

**Changes**: Deprecated in Zulip 3.0 (feature level 1), use
&#x60;stream_post_policy&#x60; instead. |  |
         |is_web_public |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the stream has been configured to allow unauthenticated
access to its message history from the web. |  |
         |role |(x) |{noformat:nopanel=true}Integer{noformat} |The user&#39;s role within the stream (distinct from the user&#39;s
[organization-level role](/help/roles-and-permissions)).
Valid values are:

* 20 &#x3D;&gt; Stream administrator.
* 50 &#x3D;&gt; Subscriber.

**Changes**: New in Zulip 4.0 (feature level 31). |  [20, 50]  |
         |color |(x) |{noformat:nopanel=true}String{noformat} |The user&#39;s personal color for the stream. |  |
         |stream_post_policy |(x) |{noformat:nopanel=true}Integer{noformat} |Policy for which users can post messages to the stream.

* 1 &#x3D;&gt; Any user can post.
* 2 &#x3D;&gt; Only administrators can post.
* 3 &#x3D;&gt; Only full members can post.
* 4 &#x3D;&gt; Only moderators can post.

**Changes**: New in Zulip 3.0, replacing the previous
&#x60;is_announcement_only&#x60; boolean. |  |
         |message_retention_days |(x) |{noformat:nopanel=true}Integer{noformat} |Number of days that messages sent to this stream will be stored
before being automatically deleted by the [message retention
policy](/help/message-retention-policy).  There are two special values:

* &#x60;null&#x60;, the default, means the stream will inherit the organization
  level setting.
* &#x60;-1&#x60; encodes retaining messages in this stream forever.

**Changes**: New in Zulip 3.0 (feature level 17). |  |
         |history_public_to_subscribers |(x) |{noformat:nopanel=true}Boolean{noformat} |Whether the history of the stream is public to its subscribers.

Currently always true for public streams (i.e. invite_only&#x3D;False implies
history_public_to_subscribers&#x3D;True), but clients should not make that
assumption, as we may change that behavior in the future. |  |
         |first_message_id |(x) |{noformat:nopanel=true}Integer{noformat} |The id of the first message in the stream.

Intended to help clients determine whether they need to display
UI like the &quot;more topics&quot; widget that would suggest the stream
has older history that can be accessed.

Null is used for streams with no message history. |  |
         |stream_weekly_traffic |(x) |{noformat:nopanel=true}Integer{noformat} |The average number of messages sent to the stream in recent weeks,
rounded to the nearest integer.

Null means the stream was recently created and there is
insufficient data to estimate the average traffic. |  |
         
        {anchor:UserModelAnchor}
        h3. User

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_bot |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_version |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_admin |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_owner |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_billing_admin |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |role |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |bot_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |bot_owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_active |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_guest |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timezone |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |date_joined |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |delivery_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |profile_data |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:UserAllOfModelAnchor}
        h3. UserAllOf

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_bot |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_url |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |avatar_version |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |full_name |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_admin |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_owner |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_billing_admin |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |role |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |bot_type |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |user_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |bot_owner_id |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_active |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |is_guest |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |timezone |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |date_joined |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |delivery_email |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |profile_data |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:UserBaseModelAnchor}
        h3. UserBase

        A dictionary containing basic data on a given Zulip user.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |email |(x) |{noformat:nopanel=true}String{noformat} |The Zulip API email address of the user or bot.

If you do not have permission to view the email address of the target user,
this will be a fake email address that is usable for the Zulip API but nothing else. |  |
         |is_bot |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user is a bot or full account. |  |
         |avatar_url |(x) |{noformat:nopanel=true}String{noformat} |URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60;
query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by
the Gravatar provider (i.e. the user has never uploaded an avatar).

**Changes**: In Zulip 3.0 (feature level 18), if the client has the
&#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at
the server&#39;s sole discretion. |  |
         |avatar_version |(x) |{noformat:nopanel=true}Integer{noformat} |Version for the user&#39;s avatar.  Used for cache-busting requests
for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this;
most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. |  |
         |full_name |(x) |{noformat:nopanel=true}String{noformat} |Full name of the user or bot, used for all display purposes. |  |
         |is_admin |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user is an organization administrator. |  |
         |is_owner |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user is an organization owner.
If true, is_admin will also be true.

**Changes**: New in Zulip 3.0 (feature level 8). |  |
         |is_billing_admin |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user is a billing administrator.

**Changes**: New in Zulip 5.0 (feature level 73). |  |
         |role |(x) |{noformat:nopanel=true}Integer{noformat} |[Organization-level role](/help/roles-and-permissions)) of the user.
Poosible values are:

* Organization owner &#x3D;&gt; 100
* Organization administrator &#x3D;&gt; 200
* Organization moderator &#x3D;&gt; 300
* Member &#x3D;&gt; 400
* Guest &#x3D;&gt; 600

**Changes**: New in Zulip 4.0 (feature level 59). |  [100, 200, 300, 400, 600]  |
         |bot_type |(x) |{noformat:nopanel=true}Integer{noformat} |An integer describing the type of bot:
* &#x60;null&#x60; if the user isn&#39;t a bot.
* &#x60;1&#x60; for a &#x60;Generic&#x60; bot.
* &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot.
* &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot.
* &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. |  |
         |user_id |(x) |{noformat:nopanel=true}Integer{noformat} |The unique ID of the user. |  |
         |bot_owner_id |(x) |{noformat:nopanel=true}Integer{noformat} |If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;),
&#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever
created the bot).

Will be null for legacy bots that do not have an owner.

**Changes**: New in Zulip 3.0 (feature level
1).  In previous versions, there was a &#x60;bot_owner&#x60; field
containing the email address of the bot&#39;s owner. |  |
         |is_active |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user account has been deactivated. |  |
         |is_guest |(x) |{noformat:nopanel=true}Boolean{noformat} |A boolean specifying whether the user is a guest user. |  |
         |timezone |(x) |{noformat:nopanel=true}String{noformat} |The time zone of the user. |  |
         |date_joined |(x) |{noformat:nopanel=true}String{noformat} |The time the user account was created. |  |
         |delivery_email |(x) |{noformat:nopanel=true}String{noformat} |The user&#39;s real email address.  This field is present only if
[email address visibility](/help/restrict-visibility-of-email-addresses) is
limited and you are an administrator with access to real email addresses
under the configured policy. |  |
         |profile_data |(x) |{noformat:nopanel=true}map[String, Object]{noformat} |A dictionary containing custom profile field data for the user. Each entry
maps the integer ID of a custom profile field in the organization to a
dictionary containing the user&#39;s data for that field.  Generally the data
includes just a single &#x60;value&#x60; key; for those custom profile fields
supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. |  |
         
        {anchor:UserDeactivatedErrorModelAnchor}
        h3. UserDeactivatedError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
        {anchor:UserGroupModelAnchor}
        h3. UserGroup

        Object containing the user group's attributes.
        
        
        ||Field Name||Required||Type||Description||Enum||
         |name |(x) |{noformat:nopanel=true}String{noformat} |The name of the user group. |  |
         |description |(x) |{noformat:nopanel=true}String{noformat} |The description of the user group. |  |
         |members |(x) |{noformat:nopanel=true}array[Integer]{noformat} |Array containing the id of the users who are
members of this user group. |  |
         |id |(x) |{noformat:nopanel=true}Integer{noformat} |The ID of the user group. |  |
         
        {anchor:UserNotAuthorizedErrorModelAnchor}
        h3. UserNotAuthorizedError

        
        
        
        ||Field Name||Required||Type||Description||Enum||
         |result |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |msg |(/) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         |code |(x) |{noformat:nopanel=true}oas_any_type_not_mapped{noformat} | |  |
         
