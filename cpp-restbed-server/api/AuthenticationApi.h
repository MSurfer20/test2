/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AuthenticationApi.h
 *
 * 
 */

#ifndef AuthenticationApi_H_
#define AuthenticationApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "ApiKeyResponse.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// Fetch an API key (development only)
/// </summary>
/// <remarks>
/// For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60; 
/// </remarks>
class  AuthenticationApiDev_fetch_api_keyResource: public restbed::Resource
{
public:
	AuthenticationApiDev_fetch_api_keyResource();
    virtual ~AuthenticationApiDev_fetch_api_keyResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler_POST_;


	std::string username{};
};

/// <summary>
/// Fetch an API key (production)
/// </summary>
/// <remarks>
/// This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 
/// </remarks>
class  AuthenticationApiFetch_api_keyResource: public restbed::Resource
{
public:
	AuthenticationApiFetch_api_keyResource();
    virtual ~AuthenticationApiFetch_api_keyResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_POST_;


	std::string username{};
	std::string password{};
};


//
// The restbed service to actually implement the REST server
//
class  AuthenticationApi: public restbed::Service
{
public:
	AuthenticationApi();
	~AuthenticationApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<AuthenticationApiDev_fetch_api_keyResource> m_spAuthenticationApiDev_fetch_api_keyResource;
	std::shared_ptr<AuthenticationApiFetch_api_keyResource> m_spAuthenticationApiFetch_api_keyResource;
};


}
}
}
}

#endif /* AuthenticationApi_H_ */

