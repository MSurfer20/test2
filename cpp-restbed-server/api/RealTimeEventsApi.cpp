/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "RealTimeEventsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

RealTimeEventsApi::RealTimeEventsApi() {
}

RealTimeEventsApi::~RealTimeEventsApi() {}

void RealTimeEventsApi::startService(int const& port) {
	// A typical pattern is to derive a class from RealTimeEventsApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spRealTimeEventsApiEventsResource)
		m_spRealTimeEventsApiEventsResource = std::make_shared<RealTimeEventsApiEventsResource>();
	this->publish(m_spRealTimeEventsApiEventsResource);
	if (!m_spRealTimeEventsApiReal-timeResource)
		m_spRealTimeEventsApiReal-timeResource = std::make_shared<RealTimeEventsApiReal-timeResource>();
	this->publish(m_spRealTimeEventsApiReal-timeResource);
	if (!m_spRealTimeEventsApiRegisterResource)
		m_spRealTimeEventsApiRegisterResource = std::make_shared<RealTimeEventsApiRegisterResource>();
	this->publish(m_spRealTimeEventsApiRegisterResource);
	if (!m_spRealTimeEventsApiRest-error-handlingResource)
		m_spRealTimeEventsApiRest-error-handlingResource = std::make_shared<RealTimeEventsApiRest-error-handlingResource>();
	this->publish(m_spRealTimeEventsApiRest-error-handlingResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void RealTimeEventsApi::stopService() {
	this->stop();
}

RealTimeEventsApiEventsResource::RealTimeEventsApiEventsResource()
{
	this->set_path("/events/");
	this->set_method_handler("DELETE",
		std::bind(&RealTimeEventsApiEventsResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&RealTimeEventsApiEventsResource::GET_method_handler, this,
			std::placeholders::_1));
}

RealTimeEventsApiEventsResource::~RealTimeEventsApiEventsResource()
{
}

void RealTimeEventsApiEventsResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void RealTimeEventsApiEventsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, int32_t const &, bool const &
	)> handler) {
	handler_GET_ = std::move(handler);
}

void RealTimeEventsApiEventsResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string queueId = request->get_query_parameter("queueId", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					queueId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void RealTimeEventsApiEventsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string queueId = request->get_query_parameter("queueId", "");
			const int32_t lastEventId = request->get_query_parameter("lastEventId", 0);
			const bool dontBlock = request->get_query_parameter("dontBlock", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					queueId, lastEventId, dontBlock
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccessBase> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<BadEventQueueIdError> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


RealTimeEventsApiReal-timeResource::RealTimeEventsApiReal-timeResource()
{
	this->set_path("/real-time/");
	this->set_method_handler("POST",
		std::bind(&RealTimeEventsApiReal-timeResource::POST_method_handler, this,
			std::placeholders::_1));
}

RealTimeEventsApiReal-timeResource::~RealTimeEventsApiReal-timeResource()
{
}

void RealTimeEventsApiReal-timeResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::vector<std::string> const &, std::vector<std::vector<std::string>> const &, bool const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void RealTimeEventsApiReal-timeResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool allPublicStreams = request->get_query_parameter("allPublicStreams", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					eventTypes, narrow, allPublicStreams
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



RealTimeEventsApiRegisterResource::RealTimeEventsApiRegisterResource()
{
	this->set_path("/register/");
	this->set_method_handler("POST",
		std::bind(&RealTimeEventsApiRegisterResource::POST_method_handler, this,
			std::placeholders::_1));
}

RealTimeEventsApiRegisterResource::~RealTimeEventsApiRegisterResource()
{
}

void RealTimeEventsApiRegisterResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		bool const &, bool const &, bool const &, std::vector<std::string> const &, bool const &, bool const &, std::shared_ptr<Object> const &, std::vector<std::string> const &, std::vector<std::vector<std::string>> const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void RealTimeEventsApiRegisterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool applyMarkdown = request->get_query_parameter("applyMarkdown", false);
			const bool clientGravatar = request->get_query_parameter("clientGravatar", false);
			const bool slimPresence = request->get_query_parameter("slimPresence", false);
			const bool allPublicStreams = request->get_query_parameter("allPublicStreams", false);
			const bool includeSubscribers = request->get_query_parameter("includeSubscribers", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					applyMarkdown, clientGravatar, slimPresence, eventTypes, allPublicStreams, includeSubscribers, clientCapabilities, fetchEventTypes, narrow
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



RealTimeEventsApiRest-error-handlingResource::RealTimeEventsApiRest-error-handlingResource()
{
	this->set_path("/rest-error-handling/");
	this->set_method_handler("POST",
		std::bind(&RealTimeEventsApiRest-error-handlingResource::POST_method_handler, this,
			std::placeholders::_1));
}

RealTimeEventsApiRest-error-handlingResource::~RealTimeEventsApiRest-error-handlingResource()
{
}

void RealTimeEventsApiRest-error-handlingResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_POST_ = std::move(handler);
}


void RealTimeEventsApiRest-error-handlingResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					
				);
			}

			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request. " : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 401) {
				session->close(401, result.empty() ? "Unauthorized. " : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 429) {
				session->close(429, result.empty() ? "Rate limit exceeded. " : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

