/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DraftsApi.h
 *
 * 
 */

#ifndef DraftsApi_H_
#define DraftsApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "CodedError.h"
#include "Draft.h"
#include "JsonError.h"
#include "JsonSuccess.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// Create drafts
/// </summary>
/// <remarks>
/// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
/// </remarks>
class  DraftsApiDraftsResource: public restbed::Resource
{
public:
	DraftsApiDraftsResource();
    virtual ~DraftsApiDraftsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::vector<std::shared_ptr<Draft>> const &
		)> handler
	);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		std::vector<std::shared_ptr<Draft>> const &
	)> handler_POST_;

	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;

	std::vector<std::shared_ptr<Draft>> drafts{};
};

/// <summary>
/// Delete a draft
/// </summary>
/// <remarks>
/// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
/// </remarks>
class  DraftsApiDraftsDraft_idResource: public restbed::Resource
{
public:
	DraftsApiDraftsDraft_idResource();
    virtual ~DraftsApiDraftsDraft_idResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			int32_t const &
		)> handler
	);

	void set_handler_PATCH(
		std::function<std::pair<int, std::string>(
			int32_t const &, std::shared_ptr<Draft> const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler_DELETE_;

	std::function<std::pair<int, std::string>(
		int32_t const &, std::shared_ptr<Draft> const &
	)> handler_PATCH_;

	int32_t draftId{};
};


//
// The restbed service to actually implement the REST server
//
class  DraftsApi: public restbed::Service
{
public:
	DraftsApi();
	~DraftsApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<DraftsApiDraftsResource> m_spDraftsApiDraftsResource;
	std::shared_ptr<DraftsApiDraftsDraft_idResource> m_spDraftsApiDraftsDraft_idResource;
};


}
}
}
}

#endif /* DraftsApi_H_ */

