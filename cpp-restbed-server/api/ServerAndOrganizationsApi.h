/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ServerAndOrganizationsApi.h
 *
 * 
 */

#ifndef ServerAndOrganizationsApi_H_
#define ServerAndOrganizationsApi_H_


#include <memory>
#include <utility>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "JsonSuccess.h"
#include "JsonSuccessBase.h"
#include "std::shared_ptr<Object>.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

/// <summary>
/// Add a code playground
/// </summary>
/// <remarks>
/// Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
/// </remarks>
class  ServerAndOrganizationsApiRealmPlaygroundsResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmPlaygroundsResource();
    virtual ~ServerAndOrganizationsApiRealmPlaygroundsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler_POST_;


	std::string name{};
	std::string pygmentsLanguage{};
	std::string urlPrefix{};
};

/// <summary>
/// Add a linkifier
/// </summary>
/// <remarks>
/// Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; 
/// </remarks>
class  ServerAndOrganizationsApiRealmFiltersResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmFiltersResource();
    virtual ~ServerAndOrganizationsApiRealmFiltersResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_POST_;


	std::string pattern{};
	std::string urlFormatString{};
};

/// <summary>
/// Create a custom profile field
/// </summary>
/// <remarks>
/// [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; 
/// </remarks>
class  ServerAndOrganizationsApiRealmProfile_fieldsResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmProfile_fieldsResource();
    virtual ~ServerAndOrganizationsApiRealmProfile_fieldsResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			int32_t const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
		)> handler
	);

	void set_handler_PATCH(
		std::function<std::pair<int, std::string>(
			std::vector<int32_t> const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler_POST_;

	std::function<std::pair<int, std::string>(
		std::vector<int32_t> const &
	)> handler_PATCH_;

	int32_t fieldType{};
	std::string name{};
	std::string hint{};
	std::shared_ptr<Object> fieldData{};
};

/// <summary>
/// Get all custom emoji
/// </summary>
/// <remarks>
/// Get all the custom emoji in the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; 
/// </remarks>
class  ServerAndOrganizationsApiRealmEmojiResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmEmojiResource();
    virtual ~ServerAndOrganizationsApiRealmEmojiResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// Get linkifiers
/// </summary>
/// <remarks>
/// List all of an organization&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. 
/// </remarks>
class  ServerAndOrganizationsApiRealmLinkifiersResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmLinkifiersResource();
    virtual ~ServerAndOrganizationsApiRealmLinkifiersResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// Get server settings
/// </summary>
/// <remarks>
/// Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
/// </remarks>
class  ServerAndOrganizationsApiServer_settingsResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiServer_settingsResource();
    virtual ~ServerAndOrganizationsApiServer_settingsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_GET(
		std::function<std::pair<int, std::string>(
			
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		
	)> handler_GET_;


};

/// <summary>
/// Remove a code playground
/// </summary>
/// <remarks>
/// Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). 
/// </remarks>
class  ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource();
    virtual ~ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			int32_t const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler_DELETE_;


	int32_t playgroundId{};
};

/// <summary>
/// Remove a linkifier
/// </summary>
/// <remarks>
/// Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; 
/// </remarks>
class  ServerAndOrganizationsApiRealmFiltersFilter_idResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmFiltersFilter_idResource();
    virtual ~ServerAndOrganizationsApiRealmFiltersFilter_idResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void PATCH_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_DELETE(
		std::function<std::pair<int, std::string>(
			int32_t const &
		)> handler
	);

	void set_handler_PATCH(
		std::function<std::pair<int, std::string>(
			int32_t const &, std::string const &, std::string const &
		)> handler
	);

private:
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler_DELETE_;

	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &
	)> handler_PATCH_;

	int32_t filterId{};
};

/// <summary>
/// Upload custom emoji
/// </summary>
/// <remarks>
/// This endpoint is used to upload a custom emoji for use in the user&#39;s organization.  Access to this endpoint depends on the [organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; 
/// </remarks>
class  ServerAndOrganizationsApiRealmEmojiEmoji_nameResource: public restbed::Resource
{
public:
	ServerAndOrganizationsApiRealmEmojiEmoji_nameResource();
    virtual ~ServerAndOrganizationsApiRealmEmojiEmoji_nameResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);

	void set_handler_POST(
		std::function<std::pair<int, std::string>(
			std::string const &, std::string const &
		)> handler
	);


private:
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler_POST_;


	std::string emojiName{};
	std::string filename{};
};


//
// The restbed service to actually implement the REST server
//
class  ServerAndOrganizationsApi: public restbed::Service
{
public:
	ServerAndOrganizationsApi();
	~ServerAndOrganizationsApi();
	void startService(int const& port);
	void stopService();
	
protected:
	std::shared_ptr<ServerAndOrganizationsApiRealmPlaygroundsResource> m_spServerAndOrganizationsApiRealmPlaygroundsResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmFiltersResource> m_spServerAndOrganizationsApiRealmFiltersResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmProfile_fieldsResource> m_spServerAndOrganizationsApiRealmProfile_fieldsResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmEmojiResource> m_spServerAndOrganizationsApiRealmEmojiResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmLinkifiersResource> m_spServerAndOrganizationsApiRealmLinkifiersResource;
	std::shared_ptr<ServerAndOrganizationsApiServer_settingsResource> m_spServerAndOrganizationsApiServer_settingsResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource> m_spServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmFiltersFilter_idResource> m_spServerAndOrganizationsApiRealmFiltersFilter_idResource;
	std::shared_ptr<ServerAndOrganizationsApiRealmEmojiEmoji_nameResource> m_spServerAndOrganizationsApiRealmEmojiEmoji_nameResource;
};


}
}
}
}

#endif /* ServerAndOrganizationsApi_H_ */

