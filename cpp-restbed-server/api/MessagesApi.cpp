/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "MessagesApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

MessagesApi::MessagesApi() {
}

MessagesApi::~MessagesApi() {}

void MessagesApi::startService(int const& port) {
	// A typical pattern is to derive a class from MessagesApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spMessagesApiMessagesMessage_idReactionsResource)
		m_spMessagesApiMessagesMessage_idReactionsResource = std::make_shared<MessagesApiMessagesMessage_idReactionsResource>();
	this->publish(m_spMessagesApiMessagesMessage_idReactionsResource);
	if (!m_spMessagesApiMessagesMatches_narrowResource)
		m_spMessagesApiMessagesMatches_narrowResource = std::make_shared<MessagesApiMessagesMatches_narrowResource>();
	this->publish(m_spMessagesApiMessagesMatches_narrowResource);
	if (!m_spMessagesApiMessagesMessage_idResource)
		m_spMessagesApiMessagesMessage_idResource = std::make_shared<MessagesApiMessagesMessage_idResource>();
	this->publish(m_spMessagesApiMessagesMessage_idResource);
	if (!m_spMessagesApiUser_uploadsRealm_id_strFilenameResource)
		m_spMessagesApiUser_uploadsRealm_id_strFilenameResource = std::make_shared<MessagesApiUser_uploadsRealm_id_strFilenameResource>();
	this->publish(m_spMessagesApiUser_uploadsRealm_id_strFilenameResource);
	if (!m_spMessagesApiMessagesMessage_idHistoryResource)
		m_spMessagesApiMessagesMessage_idHistoryResource = std::make_shared<MessagesApiMessagesMessage_idHistoryResource>();
	this->publish(m_spMessagesApiMessagesMessage_idHistoryResource);
	if (!m_spMessagesApiMessagesResource)
		m_spMessagesApiMessagesResource = std::make_shared<MessagesApiMessagesResource>();
	this->publish(m_spMessagesApiMessagesResource);
	if (!m_spMessagesApiMark_all_as_readResource)
		m_spMessagesApiMark_all_as_readResource = std::make_shared<MessagesApiMark_all_as_readResource>();
	this->publish(m_spMessagesApiMark_all_as_readResource);
	if (!m_spMessagesApiMark_stream_as_readResource)
		m_spMessagesApiMark_stream_as_readResource = std::make_shared<MessagesApiMark_stream_as_readResource>();
	this->publish(m_spMessagesApiMark_stream_as_readResource);
	if (!m_spMessagesApiMark_topic_as_readResource)
		m_spMessagesApiMark_topic_as_readResource = std::make_shared<MessagesApiMark_topic_as_readResource>();
	this->publish(m_spMessagesApiMark_topic_as_readResource);
	if (!m_spMessagesApiMessagesRenderResource)
		m_spMessagesApiMessagesRenderResource = std::make_shared<MessagesApiMessagesRenderResource>();
	this->publish(m_spMessagesApiMessagesRenderResource);
	if (!m_spMessagesApiMessagesFlagsResource)
		m_spMessagesApiMessagesFlagsResource = std::make_shared<MessagesApiMessagesFlagsResource>();
	this->publish(m_spMessagesApiMessagesFlagsResource);
	if (!m_spMessagesApiUser_uploadsResource)
		m_spMessagesApiUser_uploadsResource = std::make_shared<MessagesApiUser_uploadsResource>();
	this->publish(m_spMessagesApiUser_uploadsResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void MessagesApi::stopService() {
	this->stop();
}

MessagesApiMessagesMessage_idReactionsResource::MessagesApiMessagesMessage_idReactionsResource()
{
	this->set_path("/messages/{message_id: .*}/reactions/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMessagesMessage_idReactionsResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&MessagesApiMessagesMessage_idReactionsResource::DELETE_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesMessage_idReactionsResource::~MessagesApiMessagesMessage_idReactionsResource()
{
}

void MessagesApiMessagesMessage_idReactionsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void MessagesApiMessagesMessage_idReactionsResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void MessagesApiMessagesMessage_idReactionsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t messageId = request->get_path_parameter("messageId", 0);

			// Getting the query params
			const std::string emojiName = request->get_query_parameter("emojiName", "");
			const std::string emojiCode = request->get_query_parameter("emojiCode", "");
			const std::string reactionType = request->get_query_parameter("reactionType", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					messageId, emojiName, emojiCode, reactionType
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void MessagesApiMessagesMessage_idReactionsResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t messageId = request->get_path_parameter("messageId", 0);

			// Getting the query params
			const std::string emojiName = request->get_query_parameter("emojiName", "");
			const std::string emojiCode = request->get_query_parameter("emojiCode", "");
			const std::string reactionType = request->get_query_parameter("reactionType", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					messageId, emojiName, emojiCode, reactionType
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<CodedError> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


MessagesApiMessagesMatches_narrowResource::MessagesApiMessagesMatches_narrowResource()
{
	this->set_path("/messages/matches_narrow/");
	this->set_method_handler("GET",
		std::bind(&MessagesApiMessagesMatches_narrowResource::GET_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesMatches_narrowResource::~MessagesApiMessagesMatches_narrowResource()
{
}

void MessagesApiMessagesMatches_narrowResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::vector<int32_t> const &, std::vector<std::shared_ptr<Object>> const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void MessagesApiMessagesMatches_narrowResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					msgIds, narrow
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMessagesMessage_idResource::MessagesApiMessagesMessage_idResource()
{
	this->set_path("/messages/{message_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&MessagesApiMessagesMessage_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&MessagesApiMessagesMessage_idResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesMessage_idResource::~MessagesApiMessagesMessage_idResource()
{
}

void MessagesApiMessagesMessage_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void MessagesApiMessagesMessage_idResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &, bool const &, bool const &, std::string const &, int32_t const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void MessagesApiMessagesMessage_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t messageId = request->get_path_parameter("messageId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					messageId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void MessagesApiMessagesMessage_idResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t messageId = request->get_path_parameter("messageId", 0);

			// Getting the query params
			const std::string topic = request->get_query_parameter("topic", "");
			const std::string propagateMode = request->get_query_parameter("propagateMode", "change_one");
			const bool sendNotificationToOldThread = request->get_query_parameter("sendNotificationToOldThread", true);
			const bool sendNotificationToNewThread = request->get_query_parameter("sendNotificationToNewThread", true);
			const std::string content = request->get_query_parameter("content", "");
			const int32_t streamId = request->get_query_parameter("streamId", 0);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<CodedError> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


MessagesApiUser_uploadsRealm_id_strFilenameResource::MessagesApiUser_uploadsRealm_id_strFilenameResource()
{
	this->set_path("/user_uploads/{realm_id_str: .*}/{filename: .*}/");
	this->set_method_handler("GET",
		std::bind(&MessagesApiUser_uploadsRealm_id_strFilenameResource::GET_method_handler, this,
			std::placeholders::_1));
}

MessagesApiUser_uploadsRealm_id_strFilenameResource::~MessagesApiUser_uploadsRealm_id_strFilenameResource()
{
}

void MessagesApiUser_uploadsRealm_id_strFilenameResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void MessagesApiUser_uploadsRealm_id_strFilenameResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t realmIdStr = request->get_path_parameter("realmIdStr", 0);
			const std::string filename = request->get_path_parameter("filename", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					realmIdStr, filename
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMessagesMessage_idHistoryResource::MessagesApiMessagesMessage_idHistoryResource()
{
	this->set_path("/messages/{message_id: .*}/history/");
	this->set_method_handler("GET",
		std::bind(&MessagesApiMessagesMessage_idHistoryResource::GET_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesMessage_idHistoryResource::~MessagesApiMessagesMessage_idHistoryResource()
{
}

void MessagesApiMessagesMessage_idHistoryResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void MessagesApiMessagesMessage_idHistoryResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t messageId = request->get_path_parameter("messageId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					messageId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMessagesResource::MessagesApiMessagesResource()
{
	this->set_path("/messages/");
	this->set_method_handler("GET",
		std::bind(&MessagesApiMessagesResource::GET_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&MessagesApiMessagesResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesResource::~MessagesApiMessagesResource()
{
}

void MessagesApiMessagesResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		int32_t const &, int32_t const &, std::shared_ptr<OneOfstringinteger> const &, std::vector<std::shared_ptr<Object>> const &, bool const &, bool const &, bool const &
	)> handler) {
	handler_GET_ = std::move(handler);
}

void MessagesApiMessagesResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::vector<int32_t> const &, std::string const &, std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void MessagesApiMessagesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const int32_t numBefore = request->get_query_parameter("numBefore", 0);
			const int32_t numAfter = request->get_query_parameter("numAfter", 0);
			const bool clientGravatar = request->get_query_parameter("clientGravatar", false);
			const bool applyMarkdown = request->get_query_parameter("applyMarkdown", true);
			const bool useFirstUnreadAnchor = request->get_query_parameter("useFirstUnreadAnchor", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void MessagesApiMessagesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string type = request->get_query_parameter("type", "");
			const std::string content = request->get_query_parameter("content", "");
			const std::string topic = request->get_query_parameter("topic", "");
			const std::string queueId = request->get_query_parameter("queueId", "");
			const std::string localId = request->get_query_parameter("localId", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					type, to, content, topic, queueId, localId
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccessBase> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<OneOfobjectobject> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


MessagesApiMark_all_as_readResource::MessagesApiMark_all_as_readResource()
{
	this->set_path("/mark_all_as_read/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMark_all_as_readResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMark_all_as_readResource::~MessagesApiMark_all_as_readResource()
{
}

void MessagesApiMark_all_as_readResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiMark_all_as_readResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMark_stream_as_readResource::MessagesApiMark_stream_as_readResource()
{
	this->set_path("/mark_stream_as_read/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMark_stream_as_readResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMark_stream_as_readResource::~MessagesApiMark_stream_as_readResource()
{
}

void MessagesApiMark_stream_as_readResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiMark_stream_as_readResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const int32_t streamId = request->get_query_parameter("streamId", 0);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					streamId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMark_topic_as_readResource::MessagesApiMark_topic_as_readResource()
{
	this->set_path("/mark_topic_as_read/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMark_topic_as_readResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMark_topic_as_readResource::~MessagesApiMark_topic_as_readResource()
{
}

void MessagesApiMark_topic_as_readResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiMark_topic_as_readResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const int32_t streamId = request->get_query_parameter("streamId", 0);
			const std::string topicName = request->get_query_parameter("topicName", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					streamId, topicName
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMessagesRenderResource::MessagesApiMessagesRenderResource()
{
	this->set_path("/messages/render/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMessagesRenderResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesRenderResource::~MessagesApiMessagesRenderResource()
{
}

void MessagesApiMessagesRenderResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiMessagesRenderResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string content = request->get_query_parameter("content", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					content
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiMessagesFlagsResource::MessagesApiMessagesFlagsResource()
{
	this->set_path("/messages/flags/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiMessagesFlagsResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiMessagesFlagsResource::~MessagesApiMessagesFlagsResource()
{
}

void MessagesApiMessagesFlagsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::vector<int32_t> const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiMessagesFlagsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string op = request->get_query_parameter("op", "");
			const std::string flag = request->get_query_parameter("flag", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					messages, op, flag
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



MessagesApiUser_uploadsResource::MessagesApiUser_uploadsResource()
{
	this->set_path("/user_uploads/");
	this->set_method_handler("POST",
		std::bind(&MessagesApiUser_uploadsResource::POST_method_handler, this,
			std::placeholders::_1));
}

MessagesApiUser_uploadsResource::~MessagesApiUser_uploadsResource()
{
}

void MessagesApiUser_uploadsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void MessagesApiUser_uploadsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					filename
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

