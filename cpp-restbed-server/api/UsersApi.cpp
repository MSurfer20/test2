/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "UsersApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

UsersApi::UsersApi() {
}

UsersApi::~UsersApi() {}

void UsersApi::startService(int const& port) {
	// A typical pattern is to derive a class from UsersApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spUsersApiUsersResource)
		m_spUsersApiUsersResource = std::make_shared<UsersApiUsersResource>();
	this->publish(m_spUsersApiUsersResource);
	if (!m_spUsersApiUser_groupsCreateResource)
		m_spUsersApiUser_groupsCreateResource = std::make_shared<UsersApiUser_groupsCreateResource>();
	this->publish(m_spUsersApiUser_groupsCreateResource);
	if (!m_spUsersApiUsersMeResource)
		m_spUsersApiUsersMeResource = std::make_shared<UsersApiUsersMeResource>();
	this->publish(m_spUsersApiUsersMeResource);
	if (!m_spUsersApiUsersUser_idResource)
		m_spUsersApiUsersUser_idResource = std::make_shared<UsersApiUsersUser_idResource>();
	this->publish(m_spUsersApiUsersUser_idResource);
	if (!m_spUsersApiAttachmentsResource)
		m_spUsersApiAttachmentsResource = std::make_shared<UsersApiAttachmentsResource>();
	this->publish(m_spUsersApiAttachmentsResource);
	if (!m_spUsersApiUsersEmailResource)
		m_spUsersApiUsersEmailResource = std::make_shared<UsersApiUsersEmailResource>();
	this->publish(m_spUsersApiUsersEmailResource);
	if (!m_spUsersApiUser_groupsResource)
		m_spUsersApiUser_groupsResource = std::make_shared<UsersApiUser_groupsResource>();
	this->publish(m_spUsersApiUser_groupsResource);
	if (!m_spUsersApiUsersUser_id_or_emailPresenceResource)
		m_spUsersApiUsersUser_id_or_emailPresenceResource = std::make_shared<UsersApiUsersUser_id_or_emailPresenceResource>();
	this->publish(m_spUsersApiUsersUser_id_or_emailPresenceResource);
	if (!m_spUsersApiUsersMeMuted_usersMuted_user_idResource)
		m_spUsersApiUsersMeMuted_usersMuted_user_idResource = std::make_shared<UsersApiUsersMeMuted_usersMuted_user_idResource>();
	this->publish(m_spUsersApiUsersMeMuted_usersMuted_user_idResource);
	if (!m_spUsersApiUsersUser_idReactivateResource)
		m_spUsersApiUsersUser_idReactivateResource = std::make_shared<UsersApiUsersUser_idReactivateResource>();
	this->publish(m_spUsersApiUsersUser_idReactivateResource);
	if (!m_spUsersApiUser_groupsUser_group_idResource)
		m_spUsersApiUser_groupsUser_group_idResource = std::make_shared<UsersApiUser_groupsUser_group_idResource>();
	this->publish(m_spUsersApiUser_groupsUser_group_idResource);
	if (!m_spUsersApiTypingResource)
		m_spUsersApiTypingResource = std::make_shared<UsersApiTypingResource>();
	this->publish(m_spUsersApiTypingResource);
	if (!m_spUsersApiSettingsDisplayResource)
		m_spUsersApiSettingsDisplayResource = std::make_shared<UsersApiSettingsDisplayResource>();
	this->publish(m_spUsersApiSettingsDisplayResource);
	if (!m_spUsersApiSettingsNotificationsResource)
		m_spUsersApiSettingsNotificationsResource = std::make_shared<UsersApiSettingsNotificationsResource>();
	this->publish(m_spUsersApiSettingsNotificationsResource);
	if (!m_spUsersApiUser_groupsUser_group_idMembersResource)
		m_spUsersApiUser_groupsUser_group_idMembersResource = std::make_shared<UsersApiUser_groupsUser_group_idMembersResource>();
	this->publish(m_spUsersApiUser_groupsUser_group_idMembersResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void UsersApi::stopService() {
	this->stop();
}

UsersApiUsersResource::UsersApiUsersResource()
{
	this->set_path("/users/");
	this->set_method_handler("POST",
		std::bind(&UsersApiUsersResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&UsersApiUsersResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersResource::~UsersApiUsersResource()
{
}

void UsersApiUsersResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void UsersApiUsersResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		bool const &, bool const &
	)> handler) {
	handler_GET_ = std::move(handler);
}

void UsersApiUsersResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string email = request->get_query_parameter("email", "");
			const std::string password = request->get_query_parameter("password", "");
			const std::string fullName = request->get_query_parameter("fullName", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					email, password, fullName
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void UsersApiUsersResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool clientGravatar = request->get_query_parameter("clientGravatar", false);
			const bool includeCustomProfileFields = request->get_query_parameter("includeCustomProfileFields", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					clientGravatar, includeCustomProfileFields
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccessBase> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


UsersApiUser_groupsCreateResource::UsersApiUser_groupsCreateResource()
{
	this->set_path("/user_groups/create/");
	this->set_method_handler("POST",
		std::bind(&UsersApiUser_groupsCreateResource::POST_method_handler, this,
			std::placeholders::_1));
}

UsersApiUser_groupsCreateResource::~UsersApiUser_groupsCreateResource()
{
}

void UsersApiUser_groupsCreateResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::vector<int32_t> const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void UsersApiUser_groupsCreateResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string name = request->get_query_parameter("name", "");
			const std::string description = request->get_query_parameter("description", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					name, description, members
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUsersMeResource::UsersApiUsersMeResource()
{
	this->set_path("/users/me/");
	this->set_method_handler("DELETE",
		std::bind(&UsersApiUsersMeResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&UsersApiUsersMeResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersMeResource::~UsersApiUsersMeResource()
{
}

void UsersApiUsersMeResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void UsersApiUsersMeResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}

void UsersApiUsersMeResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void UsersApiUsersMeResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccessBase> response = NULL;
				session->close(200, result.empty() ? "Success" : std::move(result), { {"Connection", "close"} });
				return;
			}

}


UsersApiUsersUser_idResource::UsersApiUsersUser_idResource()
{
	this->set_path("/users/{user_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&UsersApiUsersUser_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&UsersApiUsersUser_idResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersUser_idResource::~UsersApiUsersUser_idResource()
{
}

void UsersApiUsersUser_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void UsersApiUsersUser_idResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, int32_t const &, std::vector<std::shared_ptr<Object>> const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void UsersApiUsersUser_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userId = request->get_path_parameter("userId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					userId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success" : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request" : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void UsersApiUsersUser_idResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userId = request->get_path_parameter("userId", 0);

			// Getting the query params
			const std::string fullName = request->get_query_parameter("fullName", "");
			const int32_t role = request->get_query_parameter("role", 0);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					userId, fullName, role, profileData
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<CodedError> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


UsersApiAttachmentsResource::UsersApiAttachmentsResource()
{
	this->set_path("/attachments/");
	this->set_method_handler("GET",
		std::bind(&UsersApiAttachmentsResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiAttachmentsResource::~UsersApiAttachmentsResource()
{
}

void UsersApiAttachmentsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void UsersApiAttachmentsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUsersEmailResource::UsersApiUsersEmailResource()
{
	this->set_path("/users/{email: .*}/");
	this->set_method_handler("GET",
		std::bind(&UsersApiUsersEmailResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersEmailResource::~UsersApiUsersEmailResource()
{
}

void UsersApiUsersEmailResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &, bool const &, bool const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void UsersApiUsersEmailResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string email = request->get_path_parameter("email", "");

			// Getting the query params
			const bool clientGravatar = request->get_query_parameter("clientGravatar", false);
			const bool includeCustomProfileFields = request->get_query_parameter("includeCustomProfileFields", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					email, clientGravatar, includeCustomProfileFields
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUser_groupsResource::UsersApiUser_groupsResource()
{
	this->set_path("/user_groups/");
	this->set_method_handler("GET",
		std::bind(&UsersApiUser_groupsResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiUser_groupsResource::~UsersApiUser_groupsResource()
{
}

void UsersApiUser_groupsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void UsersApiUser_groupsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUsersUser_id_or_emailPresenceResource::UsersApiUsersUser_id_or_emailPresenceResource()
{
	this->set_path("/users/{user_id_or_email: .*}/presence/");
	this->set_method_handler("GET",
		std::bind(&UsersApiUsersUser_id_or_emailPresenceResource::GET_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersUser_id_or_emailPresenceResource::~UsersApiUsersUser_id_or_emailPresenceResource()
{
}

void UsersApiUsersUser_id_or_emailPresenceResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		std::string const &
	)> handler) {
	handler_GET_ = std::move(handler);
}


void UsersApiUsersUser_id_or_emailPresenceResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string userIdOrEmail = request->get_path_parameter("userIdOrEmail", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					userIdOrEmail
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUsersMeMuted_usersMuted_user_idResource::UsersApiUsersMeMuted_usersMuted_user_idResource()
{
	this->set_path("/users/me/muted_users/{muted_user_id: .*}/");
	this->set_method_handler("POST",
		std::bind(&UsersApiUsersMeMuted_usersMuted_user_idResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&UsersApiUsersMeMuted_usersMuted_user_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersMeMuted_usersMuted_user_idResource::~UsersApiUsersMeMuted_usersMuted_user_idResource()
{
}

void UsersApiUsersMeMuted_usersMuted_user_idResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void UsersApiUsersMeMuted_usersMuted_user_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void UsersApiUsersMeMuted_usersMuted_user_idResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t mutedUserId = request->get_path_parameter("mutedUserId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					mutedUserId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void UsersApiUsersMeMuted_usersMuted_user_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t mutedUserId = request->get_path_parameter("mutedUserId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					mutedUserId
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<OneOfobjectobject> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


UsersApiUsersUser_idReactivateResource::UsersApiUsersUser_idReactivateResource()
{
	this->set_path("/users/{user_id: .*}/reactivate/");
	this->set_method_handler("POST",
		std::bind(&UsersApiUsersUser_idReactivateResource::POST_method_handler, this,
			std::placeholders::_1));
}

UsersApiUsersUser_idReactivateResource::~UsersApiUsersUser_idReactivateResource()
{
}

void UsersApiUsersUser_idReactivateResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void UsersApiUsersUser_idReactivateResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userId = request->get_path_parameter("userId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					userId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUser_groupsUser_group_idResource::UsersApiUser_groupsUser_group_idResource()
{
	this->set_path("/user_groups/{user_group_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&UsersApiUser_groupsUser_group_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&UsersApiUser_groupsUser_group_idResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

UsersApiUser_groupsUser_group_idResource::~UsersApiUser_groupsUser_group_idResource()
{
}

void UsersApiUser_groupsUser_group_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void UsersApiUser_groupsUser_group_idResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void UsersApiUser_groupsUser_group_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userGroupId = request->get_path_parameter("userGroupId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					userGroupId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void UsersApiUser_groupsUser_group_idResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userGroupId = request->get_path_parameter("userGroupId", 0);

			// Getting the query params
			const std::string name = request->get_query_parameter("name", "");
			const std::string description = request->get_query_parameter("description", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					userGroupId, name, description
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				std::shared_ptr<JsonError> response = NULL;
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


UsersApiTypingResource::UsersApiTypingResource()
{
	this->set_path("/typing/");
	this->set_method_handler("POST",
		std::bind(&UsersApiTypingResource::POST_method_handler, this,
			std::placeholders::_1));
}

UsersApiTypingResource::~UsersApiTypingResource()
{
}

void UsersApiTypingResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::vector<int32_t> const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void UsersApiTypingResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string type = request->get_query_parameter("type", "private");
			const std::string op = request->get_query_parameter("op", "");
			const std::string topic = request->get_query_parameter("topic", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					op, to, type, topic
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiSettingsDisplayResource::UsersApiSettingsDisplayResource()
{
	this->set_path("/settings/display/");
	this->set_method_handler("PATCH",
		std::bind(&UsersApiSettingsDisplayResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

UsersApiSettingsDisplayResource::~UsersApiSettingsDisplayResource()
{
}

void UsersApiSettingsDisplayResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		bool const &, bool const &, bool const &, bool const &, bool const &, int32_t const &, bool const &, std::string const &, std::string const &, bool const &, std::string const &, int32_t const &, std::string const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}


void UsersApiSettingsDisplayResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool twentyFourHourTime = request->get_query_parameter("twentyFourHourTime", false);
			const bool denseMode = request->get_query_parameter("denseMode", false);
			const bool starredMessageCounts = request->get_query_parameter("starredMessageCounts", false);
			const bool fluidLayoutWidth = request->get_query_parameter("fluidLayoutWidth", false);
			const bool highContrastMode = request->get_query_parameter("highContrastMode", false);
			const int32_t colorScheme = request->get_query_parameter("colorScheme", 0);
			const bool translateEmoticons = request->get_query_parameter("translateEmoticons", false);
			const std::string defaultLanguage = request->get_query_parameter("defaultLanguage", "");
			const std::string defaultView = request->get_query_parameter("defaultView", "");
			const bool leftSideUserlist = request->get_query_parameter("leftSideUserlist", false);
			const std::string emojiset = request->get_query_parameter("emojiset", "");
			const int32_t demoteInactiveStreams = request->get_query_parameter("demoteInactiveStreams", 0);
			const std::string timezone = request->get_query_parameter("timezone", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					twentyFourHourTime, denseMode, starredMessageCounts, fluidLayoutWidth, highContrastMode, colorScheme, translateEmoticons, defaultLanguage, defaultView, leftSideUserlist, emojiset, demoteInactiveStreams, timezone
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success" : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiSettingsNotificationsResource::UsersApiSettingsNotificationsResource()
{
	this->set_path("/settings/notifications/");
	this->set_method_handler("PATCH",
		std::bind(&UsersApiSettingsNotificationsResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

UsersApiSettingsNotificationsResource::~UsersApiSettingsNotificationsResource()
{
}

void UsersApiSettingsNotificationsResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		bool const &, bool const &, bool const &, bool const &, std::string const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, bool const &, int32_t const &, bool const &, bool const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}


void UsersApiSettingsNotificationsResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const bool enableStreamDesktopNotifications = request->get_query_parameter("enableStreamDesktopNotifications", false);
			const bool enableStreamEmailNotifications = request->get_query_parameter("enableStreamEmailNotifications", false);
			const bool enableStreamPushNotifications = request->get_query_parameter("enableStreamPushNotifications", false);
			const bool enableStreamAudibleNotifications = request->get_query_parameter("enableStreamAudibleNotifications", false);
			const std::string notificationSound = request->get_query_parameter("notificationSound", "");
			const bool enableDesktopNotifications = request->get_query_parameter("enableDesktopNotifications", false);
			const bool enableSounds = request->get_query_parameter("enableSounds", false);
			const bool enableOfflineEmailNotifications = request->get_query_parameter("enableOfflineEmailNotifications", false);
			const bool enableOfflinePushNotifications = request->get_query_parameter("enableOfflinePushNotifications", false);
			const bool enableOnlinePushNotifications = request->get_query_parameter("enableOnlinePushNotifications", false);
			const bool enableDigestEmails = request->get_query_parameter("enableDigestEmails", false);
			const bool enableMarketingEmails = request->get_query_parameter("enableMarketingEmails", false);
			const bool enableLoginEmails = request->get_query_parameter("enableLoginEmails", false);
			const bool messageContentInEmailNotifications = request->get_query_parameter("messageContentInEmailNotifications", false);
			const bool pmContentInDesktopNotifications = request->get_query_parameter("pmContentInDesktopNotifications", false);
			const bool wildcardMentionsNotify = request->get_query_parameter("wildcardMentionsNotify", false);
			const int32_t desktopIconCountDisplay = request->get_query_parameter("desktopIconCountDisplay", 0);
			const bool realmNameInNotifications = request->get_query_parameter("realmNameInNotifications", false);
			const bool presenceEnabled = request->get_query_parameter("presenceEnabled", false);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					enableStreamDesktopNotifications, enableStreamEmailNotifications, enableStreamPushNotifications, enableStreamAudibleNotifications, notificationSound, enableDesktopNotifications, enableSounds, enableOfflineEmailNotifications, enableOfflinePushNotifications, enableOnlinePushNotifications, enableDigestEmails, enableMarketingEmails, enableLoginEmails, messageContentInEmailNotifications, pmContentInDesktopNotifications, wildcardMentionsNotify, desktopIconCountDisplay, realmNameInNotifications, presenceEnabled
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



UsersApiUser_groupsUser_group_idMembersResource::UsersApiUser_groupsUser_group_idMembersResource()
{
	this->set_path("/user_groups/{user_group_id: .*}/members/");
	this->set_method_handler("POST",
		std::bind(&UsersApiUser_groupsUser_group_idMembersResource::POST_method_handler, this,
			std::placeholders::_1));
}

UsersApiUser_groupsUser_group_idMembersResource::~UsersApiUser_groupsUser_group_idMembersResource()
{
}

void UsersApiUser_groupsUser_group_idMembersResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::vector<int32_t> const &, std::vector<int32_t> const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void UsersApiUser_groupsUser_group_idMembersResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t userGroupId = request->get_path_parameter("userGroupId", 0);

			// Getting the query params


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					userGroupId, r_delete, add
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

