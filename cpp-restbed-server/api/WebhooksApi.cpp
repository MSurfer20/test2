/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "WebhooksApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

WebhooksApi::WebhooksApi() {
}

WebhooksApi::~WebhooksApi() {}

void WebhooksApi::startService(int const& port) {
	// A typical pattern is to derive a class from WebhooksApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spWebhooksApiZulip-outgoing-webhookResource)
		m_spWebhooksApiZulip-outgoing-webhookResource = std::make_shared<WebhooksApiZulip-outgoing-webhookResource>();
	this->publish(m_spWebhooksApiZulip-outgoing-webhookResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void WebhooksApi::stopService() {
	this->stop();
}

WebhooksApiZulip-outgoing-webhookResource::WebhooksApiZulip-outgoing-webhookResource()
{
	this->set_path("/zulip-outgoing-webhook/");
	this->set_method_handler("POST",
		std::bind(&WebhooksApiZulip-outgoing-webhookResource::POST_method_handler, this,
			std::placeholders::_1));
}

WebhooksApiZulip-outgoing-webhookResource::~WebhooksApiZulip-outgoing-webhookResource()
{
}

void WebhooksApiZulip-outgoing-webhookResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_POST_ = std::move(handler);
}


void WebhooksApiZulip-outgoing-webhookResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success " : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

