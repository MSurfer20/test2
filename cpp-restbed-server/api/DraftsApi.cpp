/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "DraftsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DraftsApi::DraftsApi() {
}

DraftsApi::~DraftsApi() {}

void DraftsApi::startService(int const& port) {
	// A typical pattern is to derive a class from DraftsApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spDraftsApiDraftsResource)
		m_spDraftsApiDraftsResource = std::make_shared<DraftsApiDraftsResource>();
	this->publish(m_spDraftsApiDraftsResource);
	if (!m_spDraftsApiDraftsDraft_idResource)
		m_spDraftsApiDraftsDraft_idResource = std::make_shared<DraftsApiDraftsDraft_idResource>();
	this->publish(m_spDraftsApiDraftsDraft_idResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void DraftsApi::stopService() {
	this->stop();
}

DraftsApiDraftsResource::DraftsApiDraftsResource()
{
	this->set_path("/drafts/");
	this->set_method_handler("POST",
		std::bind(&DraftsApiDraftsResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&DraftsApiDraftsResource::GET_method_handler, this,
			std::placeholders::_1));
}

DraftsApiDraftsResource::~DraftsApiDraftsResource()
{
}

void DraftsApiDraftsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::vector<std::shared_ptr<Draft>> const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void DraftsApiDraftsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}

void DraftsApiDraftsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					drafts
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 400) {
				session->close(400, result.empty() ? "Bad request." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void DraftsApiDraftsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


DraftsApiDraftsDraft_idResource::DraftsApiDraftsDraft_idResource()
{
	this->set_path("/drafts/{draft_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&DraftsApiDraftsDraft_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&DraftsApiDraftsDraft_idResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

DraftsApiDraftsDraft_idResource::~DraftsApiDraftsDraft_idResource()
{
}

void DraftsApiDraftsDraft_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void DraftsApiDraftsDraft_idResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::shared_ptr<Draft> const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void DraftsApiDraftsDraft_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t draftId = request->get_path_parameter("draftId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					draftId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				session->close(404, result.empty() ? "Not Found." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void DraftsApiDraftsDraft_idResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t draftId = request->get_path_parameter("draftId", 0);

			// Getting the query params


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					draftId, draft
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}
			if (status_code == 404) {
				std::shared_ptr<JsonError> response = NULL;
				session->close(404, result.empty() ? "Not Found." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



}
}
}
}

