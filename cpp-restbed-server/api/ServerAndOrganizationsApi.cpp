/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "ServerAndOrganizationsApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ServerAndOrganizationsApi::ServerAndOrganizationsApi() {
}

ServerAndOrganizationsApi::~ServerAndOrganizationsApi() {}

void ServerAndOrganizationsApi::startService(int const& port) {
	// A typical pattern is to derive a class from ServerAndOrganizationsApi and allocate the shared pointers for restbed::Resource objects
	// and manipulate them (e.g. binding GET/POST handler functions) before this startService() gets called.
	// In such a case we want to use our m_spXXX variables.
	// However in case these shared pointers are nullptr, then allocate the restbed::Resources now:
	if (!m_spServerAndOrganizationsApiRealmPlaygroundsResource)
		m_spServerAndOrganizationsApiRealmPlaygroundsResource = std::make_shared<ServerAndOrganizationsApiRealmPlaygroundsResource>();
	this->publish(m_spServerAndOrganizationsApiRealmPlaygroundsResource);
	if (!m_spServerAndOrganizationsApiRealmFiltersResource)
		m_spServerAndOrganizationsApiRealmFiltersResource = std::make_shared<ServerAndOrganizationsApiRealmFiltersResource>();
	this->publish(m_spServerAndOrganizationsApiRealmFiltersResource);
	if (!m_spServerAndOrganizationsApiRealmProfile_fieldsResource)
		m_spServerAndOrganizationsApiRealmProfile_fieldsResource = std::make_shared<ServerAndOrganizationsApiRealmProfile_fieldsResource>();
	this->publish(m_spServerAndOrganizationsApiRealmProfile_fieldsResource);
	if (!m_spServerAndOrganizationsApiRealmEmojiResource)
		m_spServerAndOrganizationsApiRealmEmojiResource = std::make_shared<ServerAndOrganizationsApiRealmEmojiResource>();
	this->publish(m_spServerAndOrganizationsApiRealmEmojiResource);
	if (!m_spServerAndOrganizationsApiRealmLinkifiersResource)
		m_spServerAndOrganizationsApiRealmLinkifiersResource = std::make_shared<ServerAndOrganizationsApiRealmLinkifiersResource>();
	this->publish(m_spServerAndOrganizationsApiRealmLinkifiersResource);
	if (!m_spServerAndOrganizationsApiServer_settingsResource)
		m_spServerAndOrganizationsApiServer_settingsResource = std::make_shared<ServerAndOrganizationsApiServer_settingsResource>();
	this->publish(m_spServerAndOrganizationsApiServer_settingsResource);
	if (!m_spServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource)
		m_spServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource = std::make_shared<ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource>();
	this->publish(m_spServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource);
	if (!m_spServerAndOrganizationsApiRealmFiltersFilter_idResource)
		m_spServerAndOrganizationsApiRealmFiltersFilter_idResource = std::make_shared<ServerAndOrganizationsApiRealmFiltersFilter_idResource>();
	this->publish(m_spServerAndOrganizationsApiRealmFiltersFilter_idResource);
	if (!m_spServerAndOrganizationsApiRealmEmojiEmoji_nameResource)
		m_spServerAndOrganizationsApiRealmEmojiEmoji_nameResource = std::make_shared<ServerAndOrganizationsApiRealmEmojiEmoji_nameResource>();
	this->publish(m_spServerAndOrganizationsApiRealmEmojiEmoji_nameResource);

	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("/api/v1");
	
	this->start(settings);
}

void ServerAndOrganizationsApi::stopService() {
	this->stop();
}

ServerAndOrganizationsApiRealmPlaygroundsResource::ServerAndOrganizationsApiRealmPlaygroundsResource()
{
	this->set_path("/realm/playgrounds/");
	this->set_method_handler("POST",
		std::bind(&ServerAndOrganizationsApiRealmPlaygroundsResource::POST_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmPlaygroundsResource::~ServerAndOrganizationsApiRealmPlaygroundsResource()
{
}

void ServerAndOrganizationsApiRealmPlaygroundsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmPlaygroundsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string name = request->get_query_parameter("name", "");
			const std::string pygmentsLanguage = request->get_query_parameter("pygmentsLanguage", "");
			const std::string urlPrefix = request->get_query_parameter("urlPrefix", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					name, pygmentsLanguage, urlPrefix
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiRealmFiltersResource::ServerAndOrganizationsApiRealmFiltersResource()
{
	this->set_path("/realm/filters/");
	this->set_method_handler("POST",
		std::bind(&ServerAndOrganizationsApiRealmFiltersResource::POST_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmFiltersResource::~ServerAndOrganizationsApiRealmFiltersResource()
{
}

void ServerAndOrganizationsApiRealmFiltersResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmFiltersResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string pattern = request->get_query_parameter("pattern", "");
			const std::string urlFormatString = request->get_query_parameter("urlFormatString", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					pattern, urlFormatString
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiRealmProfile_fieldsResource::ServerAndOrganizationsApiRealmProfile_fieldsResource()
{
	this->set_path("/realm/profile_fields/");
	this->set_method_handler("POST",
		std::bind(&ServerAndOrganizationsApiRealmProfile_fieldsResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&ServerAndOrganizationsApiRealmProfile_fieldsResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmProfile_fieldsResource::~ServerAndOrganizationsApiRealmProfile_fieldsResource()
{
}

void ServerAndOrganizationsApiRealmProfile_fieldsResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &, std::shared_ptr<Object> const &
	)> handler) {
	handler_POST_ = std::move(handler);
}

void ServerAndOrganizationsApiRealmProfile_fieldsResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		std::vector<int32_t> const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void ServerAndOrganizationsApiRealmProfile_fieldsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params
			const std::string name = request->get_query_parameter("name", "");
			const std::string hint = request->get_query_parameter("hint", "");
			const int32_t fieldType = request->get_query_parameter("fieldType", 0);


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					fieldType, name, hint, fieldData
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void ServerAndOrganizationsApiRealmProfile_fieldsResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();


			// Getting the query params


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					order
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


ServerAndOrganizationsApiRealmEmojiResource::ServerAndOrganizationsApiRealmEmojiResource()
{
	this->set_path("/realm/emoji/");
	this->set_method_handler("GET",
		std::bind(&ServerAndOrganizationsApiRealmEmojiResource::GET_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmEmojiResource::~ServerAndOrganizationsApiRealmEmojiResource()
{
}

void ServerAndOrganizationsApiRealmEmojiResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmEmojiResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiRealmLinkifiersResource::ServerAndOrganizationsApiRealmLinkifiersResource()
{
	this->set_path("/realm/linkifiers/");
	this->set_method_handler("GET",
		std::bind(&ServerAndOrganizationsApiRealmLinkifiersResource::GET_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmLinkifiersResource::~ServerAndOrganizationsApiRealmLinkifiersResource()
{
}

void ServerAndOrganizationsApiRealmLinkifiersResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmLinkifiersResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiServer_settingsResource::ServerAndOrganizationsApiServer_settingsResource()
{
	this->set_path("/server_settings/");
	this->set_method_handler("GET",
		std::bind(&ServerAndOrganizationsApiServer_settingsResource::GET_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiServer_settingsResource::~ServerAndOrganizationsApiServer_settingsResource()
{
}

void ServerAndOrganizationsApiServer_settingsResource::set_handler_GET(
	std::function<std::pair<int, std::string>(
		
	)> handler) {
	handler_GET_ = std::move(handler);
}


void ServerAndOrganizationsApiServer_settingsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();




			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_GET_)
			{
				std::tie(status_code, result) = handler_GET_(
					
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource::ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource()
{
	this->set_path("/realm/playgrounds/{playground_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource::~ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource()
{
}

void ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmPlaygroundsPlayground_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t playgroundId = request->get_path_parameter("playgroundId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					playgroundId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}



ServerAndOrganizationsApiRealmFiltersFilter_idResource::ServerAndOrganizationsApiRealmFiltersFilter_idResource()
{
	this->set_path("/realm/filters/{filter_id: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&ServerAndOrganizationsApiRealmFiltersFilter_idResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("PATCH",
		std::bind(&ServerAndOrganizationsApiRealmFiltersFilter_idResource::PATCH_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmFiltersFilter_idResource::~ServerAndOrganizationsApiRealmFiltersFilter_idResource()
{
}

void ServerAndOrganizationsApiRealmFiltersFilter_idResource::set_handler_DELETE(
	std::function<std::pair<int, std::string>(
		int32_t const &
	)> handler) {
	handler_DELETE_ = std::move(handler);
}

void ServerAndOrganizationsApiRealmFiltersFilter_idResource::set_handler_PATCH(
	std::function<std::pair<int, std::string>(
		int32_t const &, std::string const &, std::string const &
	)> handler) {
	handler_PATCH_ = std::move(handler);
}

void ServerAndOrganizationsApiRealmFiltersFilter_idResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t filterId = request->get_path_parameter("filterId", 0);



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_DELETE_)
			{
				std::tie(status_code, result) = handler_DELETE_(
					filterId
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}

void ServerAndOrganizationsApiRealmFiltersFilter_idResource::PATCH_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const int32_t filterId = request->get_path_parameter("filterId", 0);

			// Getting the query params
			const std::string pattern = request->get_query_parameter("pattern", "");
			const std::string urlFormatString = request->get_query_parameter("urlFormatString", "");


			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_PATCH_)
			{
				std::tie(status_code, result) = handler_PATCH_(
					filterId, pattern, urlFormatString
				);
			}

			if (status_code == 200) {
				std::shared_ptr<JsonSuccess> response = NULL;
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}


ServerAndOrganizationsApiRealmEmojiEmoji_nameResource::ServerAndOrganizationsApiRealmEmojiEmoji_nameResource()
{
	this->set_path("/realm/emoji/{emoji_name: .*}/");
	this->set_method_handler("POST",
		std::bind(&ServerAndOrganizationsApiRealmEmojiEmoji_nameResource::POST_method_handler, this,
			std::placeholders::_1));
}

ServerAndOrganizationsApiRealmEmojiEmoji_nameResource::~ServerAndOrganizationsApiRealmEmojiEmoji_nameResource()
{
}

void ServerAndOrganizationsApiRealmEmojiEmoji_nameResource::set_handler_POST(
	std::function<std::pair<int, std::string>(
		std::string const &, std::string const &
	)> handler) {
	handler_POST_ = std::move(handler);
}


void ServerAndOrganizationsApiRealmEmojiEmoji_nameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string emojiName = request->get_path_parameter("emojiName", "");



			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			std::string result = "successful operation";

			if (handler_POST_)
			{
				std::tie(status_code, result) = handler_POST_(
					emojiName, filename
				);
			}

			if (status_code == 200) {
				session->close(200, result.empty() ? "Success." : std::move(result), { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

