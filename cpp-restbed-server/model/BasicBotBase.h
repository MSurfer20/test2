/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BasicBotBase.h
 *
 * 
 */

#ifndef BasicBotBase_H_
#define BasicBotBase_H_



#include "OneOfobjectobject.h"
#include <string>
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BasicBotBase 
{
public:
    BasicBotBase();
    virtual ~BasicBotBase();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// BasicBotBase members

    /// <summary>
    /// The user id of the bot. 
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t value);

    /// <summary>
    /// The full name of the bot. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);

    /// <summary>
    /// The API key of the bot which it uses to make API requests. 
    /// </summary>
    std::string getApiKey() const;
    void setApiKey(std::string value);

    /// <summary>
    /// The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. 
    /// </summary>
    std::string getDefaultSendingStream() const;
    void setDefaultSendingStream(std::string value);

    /// <summary>
    /// The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. 
    /// </summary>
    std::string getDefaultEventsRegisterStream() const;
    void setDefaultEventsRegisterStream(std::string value);

    /// <summary>
    /// Whether the bot can send messages to all streams by default. 
    /// </summary>
    bool isDefaultAllPublicStreams() const;
    void setDefaultAllPublicStreams(bool value);

    /// <summary>
    /// The URL of the bot&#39;s avatar. 
    /// </summary>
    std::string getAvatarUrl() const;
    void setAvatarUrl(std::string value);

    /// <summary>
    /// The user id of the bot&#39;s owner.  Null if the bot has no owner. 
    /// </summary>
    int32_t getOwnerId() const;
    void setOwnerId(int32_t value);

    /// <summary>
    /// The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
    /// </summary>
    std::vector<std::shared_ptr<OneOfobjectobject>> getServices() const;
    void setServices(std::vector<std::shared_ptr<OneOfobjectobject>> value);
protected:
    int32_t m_User_id;
    std::string m_Full_name;
    std::string m_Api_key;
    std::string m_Default_sending_stream;
    std::string m_Default_events_register_stream;
    bool m_Default_all_public_streams;
    std::string m_Avatar_url;
    int32_t m_Owner_id;
    std::vector<std::shared_ptr<OneOfobjectobject>> m_Services;
};

}
}
}
}

#endif /* BasicBotBase_H_ */
