/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * 
 */

#ifndef User_H_
#define User_H_



#include "UserBase.h"
#include "User_allOf.h"
#include "AnyType.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  User : public UserBase, public User_allOf
{
public:
    User();
    virtual ~User();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getEmail() const;
    void setEmail(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsBot() const;
    void setIsBot(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    void setAvatarUrl(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarVersion() const;
    void setAvatarVersion(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getFullName() const;
    void setFullName(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsAdmin() const;
    void setIsAdmin(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsOwner() const;
    void setIsOwner(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsBillingAdmin() const;
    void setIsBillingAdmin(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRole() const;
    void setRole(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getBotType() const;
    void setBotType(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUserId() const;
    void setUserId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getBotOwnerId() const;
    void setBotOwnerId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsActive() const;
    void setIsActive(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsGuest() const;
    void setIsGuest(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTimezone() const;
    void setTimezone(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDateJoined() const;
    void setDateJoined(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDeliveryEmail() const;
    void setDeliveryEmail(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getProfileData() const;
    void setProfileData(std::shared_ptr<AnyType> value);
protected:
    std::shared_ptr<AnyType> m_Email;
    std::shared_ptr<AnyType> m_Is_bot;
    std::shared_ptr<AnyType> m_Avatar_url;
    std::shared_ptr<AnyType> m_Avatar_version;
    std::shared_ptr<AnyType> m_Full_name;
    std::shared_ptr<AnyType> m_Is_admin;
    std::shared_ptr<AnyType> m_Is_owner;
    std::shared_ptr<AnyType> m_Is_billing_admin;
    std::shared_ptr<AnyType> m_Role;
    std::shared_ptr<AnyType> m_Bot_type;
    std::shared_ptr<AnyType> m_User_id;
    std::shared_ptr<AnyType> m_Bot_owner_id;
    std::shared_ptr<AnyType> m_Is_active;
    std::shared_ptr<AnyType> m_Is_guest;
    std::shared_ptr<AnyType> m_Timezone;
    std::shared_ptr<AnyType> m_Date_joined;
    std::shared_ptr<AnyType> m_Delivery_email;
    std::shared_ptr<AnyType> m_Profile_data;
};

}
}
}
}

#endif /* User_H_ */
