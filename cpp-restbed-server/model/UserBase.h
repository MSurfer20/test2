/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserBase.h
 *
 * A dictionary containing basic data on a given Zulip user. 
 */

#ifndef UserBase_H_
#define UserBase_H_



#include <string>
#include "Object.h"
#include <map>
#include <vector>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// A dictionary containing basic data on a given Zulip user. 
/// </summary>
class  UserBase 
{
public:
    UserBase();
    virtual ~UserBase();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// UserBase members

    /// <summary>
    /// The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string value);

    /// <summary>
    /// A boolean specifying whether the user is a bot or full account. 
    /// </summary>
    bool isIsBot() const;
    void setIsBot(bool value);

    /// <summary>
    /// URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. 
    /// </summary>
    std::string getAvatarUrl() const;
    void setAvatarUrl(std::string value);

    /// <summary>
    /// Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. 
    /// </summary>
    int32_t getAvatarVersion() const;
    void setAvatarVersion(int32_t value);

    /// <summary>
    /// Full name of the user or bot, used for all display purposes. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);

    /// <summary>
    /// A boolean specifying whether the user is an organization administrator. 
    /// </summary>
    bool isIsAdmin() const;
    void setIsAdmin(bool value);

    /// <summary>
    /// A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
    /// </summary>
    bool isIsOwner() const;
    void setIsOwner(bool value);

    /// <summary>
    /// A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
    /// </summary>
    bool isIsBillingAdmin() const;
    void setIsBillingAdmin(bool value);

    /// <summary>
    /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
    /// </summary>
    int32_t getRole() const;
    void setRole(int32_t value);

    /// <summary>
    /// An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
    /// </summary>
    int32_t getBotType() const;
    void setBotType(int32_t value);

    /// <summary>
    /// The unique ID of the user. 
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t value);

    /// <summary>
    /// If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. 
    /// </summary>
    int32_t getBotOwnerId() const;
    void setBotOwnerId(int32_t value);

    /// <summary>
    /// A boolean specifying whether the user account has been deactivated. 
    /// </summary>
    bool isIsActive() const;
    void setIsActive(bool value);

    /// <summary>
    /// A boolean specifying whether the user is a guest user. 
    /// </summary>
    bool isIsGuest() const;
    void setIsGuest(bool value);

    /// <summary>
    /// The time zone of the user. 
    /// </summary>
    std::string getTimezone() const;
    void setTimezone(std::string value);

    /// <summary>
    /// The time the user account was created. 
    /// </summary>
    std::string getDateJoined() const;
    void setDateJoined(std::string value);

    /// <summary>
    /// The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
    /// </summary>
    std::string getDeliveryEmail() const;
    void setDeliveryEmail(std::string value);

    /// <summary>
    /// A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. 
    /// </summary>
    std::map<std::string, std::shared_ptr<Object>> getProfileData() const;
    void setProfileData(std::map<std::string, std::shared_ptr<Object>> value);
protected:
    std::string m_Email;
    bool m_Is_bot;
    std::string m_Avatar_url;
    int32_t m_Avatar_version;
    std::string m_Full_name;
    bool m_Is_admin;
    bool m_Is_owner;
    bool m_Is_billing_admin;
    int32_t m_Role;
    int32_t m_Bot_type;
    int32_t m_User_id;
    int32_t m_Bot_owner_id;
    bool m_Is_active;
    bool m_Is_guest;
    std::string m_Timezone;
    std::string m_Date_joined;
    std::string m_Delivery_email;
    std::map<std::string, std::shared_ptr<Object>> m_Profile_data;
    std::vector<int32_t> m_RoleEnum;
};

}
}
}
}

#endif /* UserBase_H_ */
