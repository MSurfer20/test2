/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AddSubscriptionsResponse.h
 *
 * 
 */

#ifndef AddSubscriptionsResponse_H_
#define AddSubscriptionsResponse_H_



#include <string>
#include "AddSubscriptionsResponse_allOf.h"
#include "JsonSuccessBase.h"
#include <map>
#include <vector>
#include "AnyType.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  AddSubscriptionsResponse : public JsonSuccessBase, public AddSubscriptionsResponse_allOf
{
public:
    AddSubscriptionsResponse();
    virtual ~AddSubscriptionsResponse();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// AddSubscriptionsResponse members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getResult() const;
    void setResult(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getMsg() const;
    void setMsg(std::shared_ptr<AnyType> value);

    /// <summary>
    /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
    /// </summary>
    std::map<std::string, std::vector<std::string>> getSubscribed() const;
    void setSubscribed(std::map<std::string, std::vector<std::string>> value);

    /// <summary>
    /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
    /// </summary>
    std::map<std::string, std::vector<std::string>> getAlreadySubscribed() const;
    void setAlreadySubscribed(std::map<std::string, std::vector<std::string>> value);

    /// <summary>
    /// A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. 
    /// </summary>
    std::vector<std::string> getUnauthorized() const;
    void setUnauthorized(std::vector<std::string> value);
protected:
    std::shared_ptr<AnyType> m_Result;
    std::shared_ptr<AnyType> m_Msg;
    std::map<std::string, std::vector<std::string>> m_Subscribed;
    std::map<std::string, std::vector<std::string>> m_Already_subscribed;
    std::vector<std::string> m_Unauthorized;
};

}
}
}
}

#endif /* AddSubscriptionsResponse_H_ */
