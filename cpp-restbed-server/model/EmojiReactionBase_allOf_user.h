/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmojiReactionBase_allOf_user.h
 *
 * Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
 */

#ifndef EmojiReactionBase_allOf_user_H_
#define EmojiReactionBase_allOf_user_H_



#include <string>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
/// </summary>
class  EmojiReactionBase_allOf_user 
{
public:
    EmojiReactionBase_allOf_user();
    virtual ~EmojiReactionBase_allOf_user();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// EmojiReactionBase_allOf_user members

    /// <summary>
    /// ID of the user. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// Email of the user. 
    /// </summary>
    std::string getEmail() const;
    void setEmail(std::string value);

    /// <summary>
    /// Full name of the user. 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);

    /// <summary>
    /// Whether the user is a mirror dummy. 
    /// </summary>
    bool isIsMirrorDummy() const;
    void setIsMirrorDummy(bool value);
protected:
    int32_t m_Id;
    std::string m_Email;
    std::string m_Full_name;
    bool m_Is_mirror_dummy;
};

}
}
}
}

#endif /* EmojiReactionBase_allOf_user_H_ */
