/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BasicStream_allOf.h
 *
 * 
 */

#ifndef BasicStream_allOf_H_
#define BasicStream_allOf_H_



#include "AnyType.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BasicStream_allOf 
{
public:
    BasicStream_allOf();
    virtual ~BasicStream_allOf();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// BasicStream_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getStreamId() const;
    void setStreamId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getName() const;
    void setName(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDescription() const;
    void setDescription(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDateCreated() const;
    void setDateCreated(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getInviteOnly() const;
    void setInviteOnly(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRenderedDescription() const;
    void setRenderedDescription(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsWebPublic() const;
    void setIsWebPublic(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getStreamPostPolicy() const;
    void setStreamPostPolicy(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getMessageRetentionDays() const;
    void setMessageRetentionDays(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getHistoryPublicToSubscribers() const;
    void setHistoryPublicToSubscribers(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getFirstMessageId() const;
    void setFirstMessageId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsAnnouncementOnly() const;
    void setIsAnnouncementOnly(std::shared_ptr<AnyType> value);
protected:
    std::shared_ptr<AnyType> m_Stream_id;
    std::shared_ptr<AnyType> m_Name;
    std::shared_ptr<AnyType> m_Description;
    std::shared_ptr<AnyType> m_Date_created;
    std::shared_ptr<AnyType> m_Invite_only;
    std::shared_ptr<AnyType> m_Rendered_description;
    std::shared_ptr<AnyType> m_Is_web_public;
    std::shared_ptr<AnyType> m_Stream_post_policy;
    std::shared_ptr<AnyType> m_Message_retention_days;
    std::shared_ptr<AnyType> m_History_public_to_subscribers;
    std::shared_ptr<AnyType> m_First_message_id;
    std::shared_ptr<AnyType> m_Is_announcement_only;
};

}
}
}
}

#endif /* BasicStream_allOf_H_ */
