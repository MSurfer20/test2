/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "JsonSuccessBase.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

JsonSuccessBase::JsonSuccessBase()
{
	m_Result = "";
	m_ResultEnum = { success };
	m_Msg = "";
}

JsonSuccessBase::~JsonSuccessBase()
{
}

std::string JsonSuccessBase::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void JsonSuccessBase::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree JsonSuccessBase::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("result", m_Result);
	pt.put("msg", m_Msg);
	return pt;
}

void JsonSuccessBase::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	setResult(pt.get("result", ""));
	m_Msg = pt.get("msg", "");
}

std::string JsonSuccessBase::getResult() const
{
    return m_Result;
}
void JsonSuccessBase::setResult(std::string value)
{
	if (std::find(m_ResultEnum.begin(), m_ResultEnum.end(), value) != m_ResultEnum.end()) {
		m_Result = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string JsonSuccessBase::getMsg() const
{
    return m_Msg;
}
void JsonSuccessBase::setMsg(std::string value)
{
	m_Msg = value;
}

}
}
}
}

