/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicStreamBase.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BasicStreamBase::BasicStreamBase()
{
	m_Stream_id = 0;
	m_Name = "";
	m_Description = "";
	m_Date_created = 0;
	m_Invite_only = false;
	m_Rendered_description = "";
	m_Is_web_public = false;
	m_Stream_post_policy = 0;
	m_Message_retention_days = 0;
	m_History_public_to_subscribers = false;
	m_First_message_id = 0;
	m_Is_announcement_only = false;
}

BasicStreamBase::~BasicStreamBase()
{
}

std::string BasicStreamBase::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BasicStreamBase::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BasicStreamBase::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("stream_id", m_Stream_id);
	pt.put("name", m_Name);
	pt.put("description", m_Description);
	pt.put("date_created", m_Date_created);
	pt.put("invite_only", m_Invite_only);
	pt.put("rendered_description", m_Rendered_description);
	pt.put("is_web_public", m_Is_web_public);
	pt.put("stream_post_policy", m_Stream_post_policy);
	pt.put("message_retention_days", m_Message_retention_days);
	pt.put("history_public_to_subscribers", m_History_public_to_subscribers);
	pt.put("first_message_id", m_First_message_id);
	pt.put("is_announcement_only", m_Is_announcement_only);
	return pt;
}

void BasicStreamBase::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Stream_id = pt.get("stream_id", 0);
	m_Name = pt.get("name", "");
	m_Description = pt.get("description", "");
	m_Date_created = pt.get("date_created", 0);
	m_Invite_only = pt.get("invite_only", false);
	m_Rendered_description = pt.get("rendered_description", "");
	m_Is_web_public = pt.get("is_web_public", false);
	m_Stream_post_policy = pt.get("stream_post_policy", 0);
	m_Message_retention_days = pt.get("message_retention_days", 0);
	m_History_public_to_subscribers = pt.get("history_public_to_subscribers", false);
	m_First_message_id = pt.get("first_message_id", 0);
	m_Is_announcement_only = pt.get("is_announcement_only", false);
}

int32_t BasicStreamBase::getStreamId() const
{
    return m_Stream_id;
}
void BasicStreamBase::setStreamId(int32_t value)
{
	m_Stream_id = value;
}
std::string BasicStreamBase::getName() const
{
    return m_Name;
}
void BasicStreamBase::setName(std::string value)
{
	m_Name = value;
}
std::string BasicStreamBase::getDescription() const
{
    return m_Description;
}
void BasicStreamBase::setDescription(std::string value)
{
	m_Description = value;
}
int32_t BasicStreamBase::getDateCreated() const
{
    return m_Date_created;
}
void BasicStreamBase::setDateCreated(int32_t value)
{
	m_Date_created = value;
}
bool BasicStreamBase::isInviteOnly() const
{
    return m_Invite_only;
}
void BasicStreamBase::setInviteOnly(bool value)
{
	m_Invite_only = value;
}
std::string BasicStreamBase::getRenderedDescription() const
{
    return m_Rendered_description;
}
void BasicStreamBase::setRenderedDescription(std::string value)
{
	m_Rendered_description = value;
}
bool BasicStreamBase::isIsWebPublic() const
{
    return m_Is_web_public;
}
void BasicStreamBase::setIsWebPublic(bool value)
{
	m_Is_web_public = value;
}
int32_t BasicStreamBase::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}
void BasicStreamBase::setStreamPostPolicy(int32_t value)
{
	m_Stream_post_policy = value;
}
int32_t BasicStreamBase::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}
void BasicStreamBase::setMessageRetentionDays(int32_t value)
{
	m_Message_retention_days = value;
}
bool BasicStreamBase::isHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}
void BasicStreamBase::setHistoryPublicToSubscribers(bool value)
{
	m_History_public_to_subscribers = value;
}
int32_t BasicStreamBase::getFirstMessageId() const
{
    return m_First_message_id;
}
void BasicStreamBase::setFirstMessageId(int32_t value)
{
	m_First_message_id = value;
}
bool BasicStreamBase::isIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}
void BasicStreamBase::setIsAnnouncementOnly(bool value)
{
	m_Is_announcement_only = value;
}

}
}
}
}

