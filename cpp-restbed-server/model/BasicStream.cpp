/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicStream.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BasicStream::BasicStream()
{
}

BasicStream::~BasicStream()
{
}

std::string BasicStream::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BasicStream::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BasicStream::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	return pt;
}

void BasicStream::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
}

std::shared_ptr<AnyType> BasicStream::getStreamId() const
{
    return m_Stream_id;
}
void BasicStream::setStreamId(std::shared_ptr<AnyType> value)
{
	m_Stream_id = value;
}
std::shared_ptr<AnyType> BasicStream::getName() const
{
    return m_Name;
}
void BasicStream::setName(std::shared_ptr<AnyType> value)
{
	m_Name = value;
}
std::shared_ptr<AnyType> BasicStream::getDescription() const
{
    return m_Description;
}
void BasicStream::setDescription(std::shared_ptr<AnyType> value)
{
	m_Description = value;
}
std::shared_ptr<AnyType> BasicStream::getDateCreated() const
{
    return m_Date_created;
}
void BasicStream::setDateCreated(std::shared_ptr<AnyType> value)
{
	m_Date_created = value;
}
std::shared_ptr<AnyType> BasicStream::getInviteOnly() const
{
    return m_Invite_only;
}
void BasicStream::setInviteOnly(std::shared_ptr<AnyType> value)
{
	m_Invite_only = value;
}
std::shared_ptr<AnyType> BasicStream::getRenderedDescription() const
{
    return m_Rendered_description;
}
void BasicStream::setRenderedDescription(std::shared_ptr<AnyType> value)
{
	m_Rendered_description = value;
}
std::shared_ptr<AnyType> BasicStream::getIsWebPublic() const
{
    return m_Is_web_public;
}
void BasicStream::setIsWebPublic(std::shared_ptr<AnyType> value)
{
	m_Is_web_public = value;
}
std::shared_ptr<AnyType> BasicStream::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}
void BasicStream::setStreamPostPolicy(std::shared_ptr<AnyType> value)
{
	m_Stream_post_policy = value;
}
std::shared_ptr<AnyType> BasicStream::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}
void BasicStream::setMessageRetentionDays(std::shared_ptr<AnyType> value)
{
	m_Message_retention_days = value;
}
std::shared_ptr<AnyType> BasicStream::getHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}
void BasicStream::setHistoryPublicToSubscribers(std::shared_ptr<AnyType> value)
{
	m_History_public_to_subscribers = value;
}
std::shared_ptr<AnyType> BasicStream::getFirstMessageId() const
{
    return m_First_message_id;
}
void BasicStream::setFirstMessageId(std::shared_ptr<AnyType> value)
{
	m_First_message_id = value;
}
std::shared_ptr<AnyType> BasicStream::getIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}
void BasicStream::setIsAnnouncementOnly(std::shared_ptr<AnyType> value)
{
	m_Is_announcement_only = value;
}

}
}
}
}

