/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetMessages.h
 *
 * 
 */

#ifndef GetMessages_H_
#define GetMessages_H_



#include "GetMessages_allOf.h"
#include "MessagesBase.h"
#include <string>
#include <vector>
#include "AnyType.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  GetMessages : public MessagesBase, public GetMessages_allOf
{
public:
    GetMessages();
    virtual ~GetMessages();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// GetMessages members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    void setAvatarUrl(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getClient() const;
    void setClient(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContent() const;
    void setContent(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContentType() const;
    void setContentType(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDisplayRecipient() const;
    void setDisplayRecipient(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getId() const;
    void setId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsMeMessage() const;
    void setIsMeMessage(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getReactions() const;
    void setReactions(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRecipientId() const;
    void setRecipientId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderEmail() const;
    void setSenderEmail(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderFullName() const;
    void setSenderFullName(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderId() const;
    void setSenderId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderRealmStr() const;
    void setSenderRealmStr(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getStreamId() const;
    void setStreamId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubject() const;
    void setSubject(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTopicLinks() const;
    void setTopicLinks(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubmessages() const;
    void setSubmessages(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTimestamp() const;
    void setTimestamp(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getType() const;
    void setType(std::shared_ptr<AnyType> value);

    /// <summary>
    /// The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags 
    /// </summary>
    std::vector<std::string> getFlags() const;
    void setFlags(std::vector<std::string> value);

    /// <summary>
    /// The UNIX timestamp for when the message was last edited, in UTC seconds. 
    /// </summary>
    int32_t getLastEditTimestamp() const;
    void setLastEditTimestamp(int32_t value);

    /// <summary>
    /// Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
    /// </summary>
    std::string getMatchContent() const;
    void setMatchContent(std::string value);

    /// <summary>
    /// Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
    /// </summary>
    std::string getMatchSubject() const;
    void setMatchSubject(std::string value);
protected:
    std::shared_ptr<AnyType> m_Avatar_url;
    std::shared_ptr<AnyType> m_Client;
    std::shared_ptr<AnyType> m_Content;
    std::shared_ptr<AnyType> m_Content_type;
    std::shared_ptr<AnyType> m_Display_recipient;
    std::shared_ptr<AnyType> m_Id;
    std::shared_ptr<AnyType> m_Is_me_message;
    std::shared_ptr<AnyType> m_Reactions;
    std::shared_ptr<AnyType> m_Recipient_id;
    std::shared_ptr<AnyType> m_Sender_email;
    std::shared_ptr<AnyType> m_Sender_full_name;
    std::shared_ptr<AnyType> m_Sender_id;
    std::shared_ptr<AnyType> m_Sender_realm_str;
    std::shared_ptr<AnyType> m_Stream_id;
    std::shared_ptr<AnyType> m_Subject;
    std::shared_ptr<AnyType> m_Topic_links;
    std::shared_ptr<AnyType> m_Submessages;
    std::shared_ptr<AnyType> m_Timestamp;
    std::shared_ptr<AnyType> m_Type;
    std::vector<std::string> m_Flags;
    int32_t m_Last_edit_timestamp;
    std::string m_Match_content;
    std::string m_Match_subject;
};

}
}
}
}

#endif /* GetMessages_H_ */
