/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicBot_allOf.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BasicBot_allOf::BasicBot_allOf()
{
}

BasicBot_allOf::~BasicBot_allOf()
{
}

std::string BasicBot_allOf::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BasicBot_allOf::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BasicBot_allOf::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	return pt;
}

void BasicBot_allOf::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
}

std::shared_ptr<AnyType> BasicBot_allOf::getUserId() const
{
    return m_User_id;
}
void BasicBot_allOf::setUserId(std::shared_ptr<AnyType> value)
{
	m_User_id = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getFullName() const
{
    return m_Full_name;
}
void BasicBot_allOf::setFullName(std::shared_ptr<AnyType> value)
{
	m_Full_name = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getApiKey() const
{
    return m_Api_key;
}
void BasicBot_allOf::setApiKey(std::shared_ptr<AnyType> value)
{
	m_Api_key = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultSendingStream() const
{
    return m_Default_sending_stream;
}
void BasicBot_allOf::setDefaultSendingStream(std::shared_ptr<AnyType> value)
{
	m_Default_sending_stream = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultEventsRegisterStream() const
{
    return m_Default_events_register_stream;
}
void BasicBot_allOf::setDefaultEventsRegisterStream(std::shared_ptr<AnyType> value)
{
	m_Default_events_register_stream = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultAllPublicStreams() const
{
    return m_Default_all_public_streams;
}
void BasicBot_allOf::setDefaultAllPublicStreams(std::shared_ptr<AnyType> value)
{
	m_Default_all_public_streams = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getAvatarUrl() const
{
    return m_Avatar_url;
}
void BasicBot_allOf::setAvatarUrl(std::shared_ptr<AnyType> value)
{
	m_Avatar_url = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getOwnerId() const
{
    return m_Owner_id;
}
void BasicBot_allOf::setOwnerId(std::shared_ptr<AnyType> value)
{
	m_Owner_id = value;
}
std::shared_ptr<AnyType> BasicBot_allOf::getServices() const
{
    return m_Services;
}
void BasicBot_allOf::setServices(std::shared_ptr<AnyType> value)
{
	m_Services = value;
}

}
}
}
}

