/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_response_200.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Inline_response_200::Inline_response_200()
{
	m_Bot_email = "";
	m_Bot_full_name = "";
	m_Data = "";
	m_Trigger = "";
	m_Token = "";
}

Inline_response_200::~Inline_response_200()
{
}

std::string Inline_response_200::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Inline_response_200::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Inline_response_200::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("bot_email", m_Bot_email);
	pt.put("bot_full_name", m_Bot_full_name);
	pt.put("data", m_Data);
	pt.put("trigger", m_Trigger);
	pt.put("token", m_Token);
	if (m_Message != nullptr) {
		pt.add_child("message", m_Message->toPropertyTree());
	}
	return pt;
}

void Inline_response_200::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Bot_email = pt.get("bot_email", "");
	m_Bot_full_name = pt.get("bot_full_name", "");
	m_Data = pt.get("data", "");
	m_Trigger = pt.get("trigger", "");
	m_Token = pt.get("token", "");
	if (pt.get_child_optional("message")) {
		m_Message = nullptr;
		m_Message->fromPropertyTree(pt.get_child("message"));
	}
}

std::string Inline_response_200::getBotEmail() const
{
    return m_Bot_email;
}
void Inline_response_200::setBotEmail(std::string value)
{
	m_Bot_email = value;
}
std::string Inline_response_200::getBotFullName() const
{
    return m_Bot_full_name;
}
void Inline_response_200::setBotFullName(std::string value)
{
	m_Bot_full_name = value;
}
std::string Inline_response_200::getData() const
{
    return m_Data;
}
void Inline_response_200::setData(std::string value)
{
	m_Data = value;
}
std::string Inline_response_200::getTrigger() const
{
    return m_Trigger;
}
void Inline_response_200::setTrigger(std::string value)
{
	m_Trigger = value;
}
std::string Inline_response_200::getToken() const
{
    return m_Token;
}
void Inline_response_200::setToken(std::string value)
{
	m_Token = value;
}
std::shared_ptr<MessagesBase> Inline_response_200::getMessage() const
{
    return m_Message;
}
void Inline_response_200::setMessage(std::shared_ptr<MessagesBase> value)
{
	m_Message = value;
}

}
}
}
}

