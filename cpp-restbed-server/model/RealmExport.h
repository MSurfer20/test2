/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RealmExport.h
 *
 * Object containing details about a realm export. 
 */

#ifndef RealmExport_H_
#define RealmExport_H_



#include <string>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object containing details about a realm export. 
/// </summary>
class  RealmExport 
{
public:
    RealmExport();
    virtual ~RealmExport();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// RealmExport members

    /// <summary>
    /// The id of the export. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// The id of the user who did the export. 
    /// </summary>
    int32_t getActingUserId() const;
    void setActingUserId(int32_t value);

    /// <summary>
    /// The UNIX timestamp of when the export was made. 
    /// </summary>
    double getExportTime() const;
    void setExportTime(double value);

    /// <summary>
    /// The timestamp of when the export was deleted. Null if it wasn&#39;t. 
    /// </summary>
    double getDeletedTimestamp() const;
    void setDeletedTimestamp(double value);

    /// <summary>
    /// The timestamp of when the export failed. Null if it didn&#39;t. 
    /// </summary>
    double getFailedTimestamp() const;
    void setFailedTimestamp(double value);

    /// <summary>
    /// The URL of the export. &#x60;null&#x60; if there&#39;s no URL. 
    /// </summary>
    std::string getExportUrl() const;
    void setExportUrl(std::string value);

    /// <summary>
    /// Whether the export is pending or not. 
    /// </summary>
    bool isPending() const;
    void setPending(bool value);
protected:
    int32_t m_Id;
    int32_t m_Acting_user_id;
    double m_Export_time;
    double m_Deleted_timestamp;
    double m_Failed_timestamp;
    std::string m_Export_url;
    bool m_Pending;
};

}
}
}
}

#endif /* RealmExport_H_ */
