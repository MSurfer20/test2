/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicBotBase.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

BasicBotBase::BasicBotBase()
{
	m_User_id = 0;
	m_Full_name = "";
	m_Api_key = "";
	m_Default_sending_stream = "";
	m_Default_events_register_stream = "";
	m_Default_all_public_streams = false;
	m_Avatar_url = "";
	m_Owner_id = 0;
}

BasicBotBase::~BasicBotBase()
{
}

std::string BasicBotBase::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void BasicBotBase::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree BasicBotBase::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("user_id", m_User_id);
	pt.put("full_name", m_Full_name);
	pt.put("api_key", m_Api_key);
	pt.put("default_sending_stream", m_Default_sending_stream);
	pt.put("default_events_register_stream", m_Default_events_register_stream);
	pt.put("default_all_public_streams", m_Default_all_public_streams);
	pt.put("avatar_url", m_Avatar_url);
	pt.put("owner_id", m_Owner_id);
	// generate tree for Services
	if (!m_Services.empty()) {
		for (const auto &childEntry : m_Services) {
			ptree Services_node;
			Services_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Services_node));
		}
		pt.add_child("services", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void BasicBotBase::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_User_id = pt.get("user_id", 0);
	m_Full_name = pt.get("full_name", "");
	m_Api_key = pt.get("api_key", "");
	m_Default_sending_stream = pt.get("default_sending_stream", "");
	m_Default_events_register_stream = pt.get("default_events_register_stream", "");
	m_Default_all_public_streams = pt.get("default_all_public_streams", false);
	m_Avatar_url = pt.get("avatar_url", "");
	m_Owner_id = pt.get("owner_id", 0);
	// push all items of Services into member vector
	if (pt.get_child_optional("services")) {
		for (const auto &childTree : pt.get_child("services")) {
			m_Services.emplace_back(childTree.second.data());
		}
	}
}

int32_t BasicBotBase::getUserId() const
{
    return m_User_id;
}
void BasicBotBase::setUserId(int32_t value)
{
	m_User_id = value;
}
std::string BasicBotBase::getFullName() const
{
    return m_Full_name;
}
void BasicBotBase::setFullName(std::string value)
{
	m_Full_name = value;
}
std::string BasicBotBase::getApiKey() const
{
    return m_Api_key;
}
void BasicBotBase::setApiKey(std::string value)
{
	m_Api_key = value;
}
std::string BasicBotBase::getDefaultSendingStream() const
{
    return m_Default_sending_stream;
}
void BasicBotBase::setDefaultSendingStream(std::string value)
{
	m_Default_sending_stream = value;
}
std::string BasicBotBase::getDefaultEventsRegisterStream() const
{
    return m_Default_events_register_stream;
}
void BasicBotBase::setDefaultEventsRegisterStream(std::string value)
{
	m_Default_events_register_stream = value;
}
bool BasicBotBase::isDefaultAllPublicStreams() const
{
    return m_Default_all_public_streams;
}
void BasicBotBase::setDefaultAllPublicStreams(bool value)
{
	m_Default_all_public_streams = value;
}
std::string BasicBotBase::getAvatarUrl() const
{
    return m_Avatar_url;
}
void BasicBotBase::setAvatarUrl(std::string value)
{
	m_Avatar_url = value;
}
int32_t BasicBotBase::getOwnerId() const
{
    return m_Owner_id;
}
void BasicBotBase::setOwnerId(int32_t value)
{
	m_Owner_id = value;
}
std::vector<std::shared_ptr<OneOfobjectobject>> BasicBotBase::getServices() const
{
    return m_Services;
}
void BasicBotBase::setServices(std::vector<std::shared_ptr<OneOfobjectobject>> value)
{
	m_Services = value;
}

}
}
}
}

