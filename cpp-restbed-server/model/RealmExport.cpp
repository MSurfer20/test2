/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RealmExport.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RealmExport::RealmExport()
{
	m_Id = 0;
	m_Acting_user_id = 0;
	m_Export_time = 0.0;
	m_Deleted_timestamp = 0.0;
	m_Failed_timestamp = 0.0;
	m_Export_url = "";
	m_Pending = false;
}

RealmExport::~RealmExport()
{
}

std::string RealmExport::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void RealmExport::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree RealmExport::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("id", m_Id);
	pt.put("acting_user_id", m_Acting_user_id);
	pt.put("export_time", m_Export_time);
	pt.put("deleted_timestamp", m_Deleted_timestamp);
	pt.put("failed_timestamp", m_Failed_timestamp);
	pt.put("export_url", m_Export_url);
	pt.put("pending", m_Pending);
	return pt;
}

void RealmExport::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Id = pt.get("id", 0);
	m_Acting_user_id = pt.get("acting_user_id", 0);
	m_Export_time = pt.get("export_time", 0.0);
	m_Deleted_timestamp = pt.get("deleted_timestamp", 0.0);
	m_Failed_timestamp = pt.get("failed_timestamp", 0.0);
	m_Export_url = pt.get("export_url", "");
	m_Pending = pt.get("pending", false);
}

int32_t RealmExport::getId() const
{
    return m_Id;
}
void RealmExport::setId(int32_t value)
{
	m_Id = value;
}
int32_t RealmExport::getActingUserId() const
{
    return m_Acting_user_id;
}
void RealmExport::setActingUserId(int32_t value)
{
	m_Acting_user_id = value;
}
double RealmExport::getExportTime() const
{
    return m_Export_time;
}
void RealmExport::setExportTime(double value)
{
	m_Export_time = value;
}
double RealmExport::getDeletedTimestamp() const
{
    return m_Deleted_timestamp;
}
void RealmExport::setDeletedTimestamp(double value)
{
	m_Deleted_timestamp = value;
}
double RealmExport::getFailedTimestamp() const
{
    return m_Failed_timestamp;
}
void RealmExport::setFailedTimestamp(double value)
{
	m_Failed_timestamp = value;
}
std::string RealmExport::getExportUrl() const
{
    return m_Export_url;
}
void RealmExport::setExportUrl(std::string value)
{
	m_Export_url = value;
}
bool RealmExport::isPending() const
{
    return m_Pending;
}
void RealmExport::setPending(bool value)
{
	m_Pending = value;
}

}
}
}
}

