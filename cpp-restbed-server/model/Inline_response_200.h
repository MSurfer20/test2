/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Inline_response_200.h
 *
 * This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
 */

#ifndef Inline_response_200_H_
#define Inline_response_200_H_



#include "MessagesBase.h"
#include <string>
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
/// </summary>
class  Inline_response_200 
{
public:
    Inline_response_200();
    virtual ~Inline_response_200();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Inline_response_200 members

    /// <summary>
    /// Email of the bot user. 
    /// </summary>
    std::string getBotEmail() const;
    void setBotEmail(std::string value);

    /// <summary>
    /// The full name of the bot user. 
    /// </summary>
    std::string getBotFullName() const;
    void setBotFullName(std::string value);

    /// <summary>
    /// The message content, in raw Markdown format (not rendered to HTML). 
    /// </summary>
    std::string getData() const;
    void setData(std::string value);

    /// <summary>
    /// What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. 
    /// </summary>
    std::string getTrigger() const;
    void setTrigger(std::string value);

    /// <summary>
    /// A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. 
    /// </summary>
    std::string getToken() const;
    void setToken(std::string value);

    /// <summary>
    /// A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). 
    /// </summary>
    std::shared_ptr<MessagesBase> getMessage() const;
    void setMessage(std::shared_ptr<MessagesBase> value);
protected:
    std::string m_Bot_email;
    std::string m_Bot_full_name;
    std::string m_Data;
    std::string m_Trigger;
    std::string m_Token;
    std::shared_ptr<MessagesBase> m_Message;
};

}
}
}
}

#endif /* Inline_response_200_H_ */
