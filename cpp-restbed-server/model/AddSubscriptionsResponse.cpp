/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AddSubscriptionsResponse.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

AddSubscriptionsResponse::AddSubscriptionsResponse()
{
}

AddSubscriptionsResponse::~AddSubscriptionsResponse()
{
}

std::string AddSubscriptionsResponse::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void AddSubscriptionsResponse::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree AddSubscriptionsResponse::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	// generate tree for Subscribed
	if (!m_Subscribed.empty()) {
		for (const auto &childEntry : m_Subscribed) {
			ptree Subscribed_node;
			Subscribed_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Subscribed_node));
		}
		pt.add_child("subscribed", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Already_subscribed
	if (!m_Already_subscribed.empty()) {
		for (const auto &childEntry : m_Already_subscribed) {
			ptree Already_subscribed_node;
			Already_subscribed_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Already_subscribed_node));
		}
		pt.add_child("already_subscribed", tmp_node);
		tmp_node.clear();
	}
	// generate tree for Unauthorized
	if (!m_Unauthorized.empty()) {
		for (const auto &childEntry : m_Unauthorized) {
			ptree Unauthorized_node;
			Unauthorized_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Unauthorized_node));
		}
		pt.add_child("unauthorized", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void AddSubscriptionsResponse::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	// push all items of Subscribed into member vector
	if (pt.get_child_optional("subscribed")) {
		for (const auto &childTree : pt.get_child("subscribed")) {
			m_Inner.emplace_back(childTree.second.data());
		}
	}
	// push all items of Already_subscribed into member vector
	if (pt.get_child_optional("already_subscribed")) {
		for (const auto &childTree : pt.get_child("already_subscribed")) {
			m_Inner.emplace_back(childTree.second.data());
		}
	}
	// push all items of Unauthorized into member vector
	if (pt.get_child_optional("unauthorized")) {
		for (const auto &childTree : pt.get_child("unauthorized")) {
			m_Unauthorized.emplace_back(childTree.second.data());
		}
	}
}

std::shared_ptr<AnyType> AddSubscriptionsResponse::getResult() const
{
    return m_Result;
}
void AddSubscriptionsResponse::setResult(std::shared_ptr<AnyType> value)
{
	m_Result = value;
}
std::shared_ptr<AnyType> AddSubscriptionsResponse::getMsg() const
{
    return m_Msg;
}
void AddSubscriptionsResponse::setMsg(std::shared_ptr<AnyType> value)
{
	m_Msg = value;
}
std::map<std::string, std::vector<std::string>> AddSubscriptionsResponse::getSubscribed() const
{
    return m_Subscribed;
}
void AddSubscriptionsResponse::setSubscribed(std::map<std::string, std::vector<std::string>> value)
{
	m_Subscribed = value;
}
std::map<std::string, std::vector<std::string>> AddSubscriptionsResponse::getAlreadySubscribed() const
{
    return m_Already_subscribed;
}
void AddSubscriptionsResponse::setAlreadySubscribed(std::map<std::string, std::vector<std::string>> value)
{
	m_Already_subscribed = value;
}
std::vector<std::string> AddSubscriptionsResponse::getUnauthorized() const
{
    return m_Unauthorized;
}
void AddSubscriptionsResponse::setUnauthorized(std::vector<std::string> value)
{
	m_Unauthorized = value;
}

}
}
}
}

