/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BasicBot.h
 *
 * 
 */

#ifndef BasicBot_H_
#define BasicBot_H_



#include "BasicBot_allOf.h"
#include "AnyType.h"
#include "BasicBotBase.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  BasicBot : public BasicBotBase, public BasicBot_allOf
{
public:
    BasicBot();
    virtual ~BasicBot();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// BasicBot members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUserId() const;
    void setUserId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getFullName() const;
    void setFullName(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getApiKey() const;
    void setApiKey(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultSendingStream() const;
    void setDefaultSendingStream(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultEventsRegisterStream() const;
    void setDefaultEventsRegisterStream(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultAllPublicStreams() const;
    void setDefaultAllPublicStreams(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    void setAvatarUrl(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getOwnerId() const;
    void setOwnerId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getServices() const;
    void setServices(std::shared_ptr<AnyType> value);
protected:
    std::shared_ptr<AnyType> m_User_id;
    std::shared_ptr<AnyType> m_Full_name;
    std::shared_ptr<AnyType> m_Api_key;
    std::shared_ptr<AnyType> m_Default_sending_stream;
    std::shared_ptr<AnyType> m_Default_events_register_stream;
    std::shared_ptr<AnyType> m_Default_all_public_streams;
    std::shared_ptr<AnyType> m_Avatar_url;
    std::shared_ptr<AnyType> m_Owner_id;
    std::shared_ptr<AnyType> m_Services;
};

}
}
}
}

#endif /* BasicBot_H_ */
