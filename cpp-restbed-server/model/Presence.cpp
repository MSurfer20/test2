/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Presence.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Presence::Presence()
{
	m_Client = "";
	m_Status = "";
	m_StatusEnum = { idle, active };
	m_Timestamp = 0;
	m_Pushable = false;
}

Presence::~Presence()
{
}

std::string Presence::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Presence::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Presence::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("client", m_Client);
	pt.put("status", m_Status);
	pt.put("timestamp", m_Timestamp);
	pt.put("pushable", m_Pushable);
	return pt;
}

void Presence::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Client = pt.get("client", "");
	setStatus(pt.get("status", ""));
	m_Timestamp = pt.get("timestamp", 0);
	m_Pushable = pt.get("pushable", false);
}

std::string Presence::getClient() const
{
    return m_Client;
}
void Presence::setClient(std::string value)
{
	m_Client = value;
}
std::string Presence::getStatus() const
{
    return m_Status;
}
void Presence::setStatus(std::string value)
{
	if (std::find(m_StatusEnum.begin(), m_StatusEnum.end(), value) != m_StatusEnum.end()) {
		m_Status = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
int32_t Presence::getTimestamp() const
{
    return m_Timestamp;
}
void Presence::setTimestamp(int32_t value)
{
	m_Timestamp = value;
}
bool Presence::isPushable() const
{
    return m_Pushable;
}
void Presence::setPushable(bool value)
{
	m_Pushable = value;
}

}
}
}
}

