/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Subscriptions.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <algorithm>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Subscriptions::Subscriptions()
{
	m_Stream_id = 0;
	m_Name = "";
	m_Description = "";
	m_Rendered_description = "";
	m_Date_created = 0;
	m_Invite_only = false;
	m_Desktop_notifications = false;
	m_Email_notifications = false;
	m_Wildcard_mentions_notify = false;
	m_Push_notifications = false;
	m_Audible_notifications = false;
	m_Pin_to_top = false;
	m_Email_address = "";
	m_Is_muted = false;
	m_In_home_view = false;
	m_Is_announcement_only = false;
	m_Is_web_public = false;
	m_Role = 0;
	m_Color = "";
	m_Stream_post_policy = 0;
	m_Message_retention_days = 0;
	m_History_public_to_subscribers = false;
	m_First_message_id = 0;
	m_Stream_weekly_traffic = 0;
}

Subscriptions::~Subscriptions()
{
}

std::string Subscriptions::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Subscriptions::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Subscriptions::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	pt.put("stream_id", m_Stream_id);
	pt.put("name", m_Name);
	pt.put("description", m_Description);
	pt.put("rendered_description", m_Rendered_description);
	pt.put("date_created", m_Date_created);
	pt.put("invite_only", m_Invite_only);
	// generate tree for Subscribers
	if (!m_Subscribers.empty()) {
		for (const auto &childEntry : m_Subscribers) {
			ptree Subscribers_node;
			Subscribers_node.put("", childEntry);
			tmp_node.push_back(std::make_pair("", Subscribers_node));
		}
		pt.add_child("subscribers", tmp_node);
		tmp_node.clear();
	}
	pt.put("desktop_notifications", m_Desktop_notifications);
	pt.put("email_notifications", m_Email_notifications);
	pt.put("wildcard_mentions_notify", m_Wildcard_mentions_notify);
	pt.put("push_notifications", m_Push_notifications);
	pt.put("audible_notifications", m_Audible_notifications);
	pt.put("pin_to_top", m_Pin_to_top);
	pt.put("email_address", m_Email_address);
	pt.put("is_muted", m_Is_muted);
	pt.put("in_home_view", m_In_home_view);
	pt.put("is_announcement_only", m_Is_announcement_only);
	pt.put("is_web_public", m_Is_web_public);
	pt.put("role", m_Role);
	pt.put("color", m_Color);
	pt.put("stream_post_policy", m_Stream_post_policy);
	pt.put("message_retention_days", m_Message_retention_days);
	pt.put("history_public_to_subscribers", m_History_public_to_subscribers);
	pt.put("first_message_id", m_First_message_id);
	pt.put("stream_weekly_traffic", m_Stream_weekly_traffic);
	return pt;
}

void Subscriptions::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_Stream_id = pt.get("stream_id", 0);
	m_Name = pt.get("name", "");
	m_Description = pt.get("description", "");
	m_Rendered_description = pt.get("rendered_description", "");
	m_Date_created = pt.get("date_created", 0);
	m_Invite_only = pt.get("invite_only", false);
	// push all items of Subscribers into member vector
	if (pt.get_child_optional("subscribers")) {
		for (const auto &childTree : pt.get_child("subscribers")) {
			m_Subscribers.emplace_back(std::stoi(childTree.second.data()));
		}
	}
	m_Desktop_notifications = pt.get("desktop_notifications", false);
	m_Email_notifications = pt.get("email_notifications", false);
	m_Wildcard_mentions_notify = pt.get("wildcard_mentions_notify", false);
	m_Push_notifications = pt.get("push_notifications", false);
	m_Audible_notifications = pt.get("audible_notifications", false);
	m_Pin_to_top = pt.get("pin_to_top", false);
	m_Email_address = pt.get("email_address", "");
	m_Is_muted = pt.get("is_muted", false);
	m_In_home_view = pt.get("in_home_view", false);
	m_Is_announcement_only = pt.get("is_announcement_only", false);
	m_Is_web_public = pt.get("is_web_public", false);
	setRole(pt.get("role", 0));
	m_Color = pt.get("color", "");
	m_Stream_post_policy = pt.get("stream_post_policy", 0);
	m_Message_retention_days = pt.get("message_retention_days", 0);
	m_History_public_to_subscribers = pt.get("history_public_to_subscribers", false);
	m_First_message_id = pt.get("first_message_id", 0);
	m_Stream_weekly_traffic = pt.get("stream_weekly_traffic", 0);
}

int32_t Subscriptions::getStreamId() const
{
    return m_Stream_id;
}
void Subscriptions::setStreamId(int32_t value)
{
	m_Stream_id = value;
}
std::string Subscriptions::getName() const
{
    return m_Name;
}
void Subscriptions::setName(std::string value)
{
	m_Name = value;
}
std::string Subscriptions::getDescription() const
{
    return m_Description;
}
void Subscriptions::setDescription(std::string value)
{
	m_Description = value;
}
std::string Subscriptions::getRenderedDescription() const
{
    return m_Rendered_description;
}
void Subscriptions::setRenderedDescription(std::string value)
{
	m_Rendered_description = value;
}
int32_t Subscriptions::getDateCreated() const
{
    return m_Date_created;
}
void Subscriptions::setDateCreated(int32_t value)
{
	m_Date_created = value;
}
bool Subscriptions::isInviteOnly() const
{
    return m_Invite_only;
}
void Subscriptions::setInviteOnly(bool value)
{
	m_Invite_only = value;
}
std::vector<int32_t> Subscriptions::getSubscribers() const
{
    return m_Subscribers;
}
void Subscriptions::setSubscribers(std::vector<int32_t> value)
{
	m_Subscribers = value;
}
bool Subscriptions::isDesktopNotifications() const
{
    return m_Desktop_notifications;
}
void Subscriptions::setDesktopNotifications(bool value)
{
	m_Desktop_notifications = value;
}
bool Subscriptions::isEmailNotifications() const
{
    return m_Email_notifications;
}
void Subscriptions::setEmailNotifications(bool value)
{
	m_Email_notifications = value;
}
bool Subscriptions::isWildcardMentionsNotify() const
{
    return m_Wildcard_mentions_notify;
}
void Subscriptions::setWildcardMentionsNotify(bool value)
{
	m_Wildcard_mentions_notify = value;
}
bool Subscriptions::isPushNotifications() const
{
    return m_Push_notifications;
}
void Subscriptions::setPushNotifications(bool value)
{
	m_Push_notifications = value;
}
bool Subscriptions::isAudibleNotifications() const
{
    return m_Audible_notifications;
}
void Subscriptions::setAudibleNotifications(bool value)
{
	m_Audible_notifications = value;
}
bool Subscriptions::isPinToTop() const
{
    return m_Pin_to_top;
}
void Subscriptions::setPinToTop(bool value)
{
	m_Pin_to_top = value;
}
std::string Subscriptions::getEmailAddress() const
{
    return m_Email_address;
}
void Subscriptions::setEmailAddress(std::string value)
{
	m_Email_address = value;
}
bool Subscriptions::isIsMuted() const
{
    return m_Is_muted;
}
void Subscriptions::setIsMuted(bool value)
{
	m_Is_muted = value;
}
bool Subscriptions::isInHomeView() const
{
    return m_In_home_view;
}
void Subscriptions::setInHomeView(bool value)
{
	m_In_home_view = value;
}
bool Subscriptions::isIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}
void Subscriptions::setIsAnnouncementOnly(bool value)
{
	m_Is_announcement_only = value;
}
bool Subscriptions::isIsWebPublic() const
{
    return m_Is_web_public;
}
void Subscriptions::setIsWebPublic(bool value)
{
	m_Is_web_public = value;
}
int32_t Subscriptions::getRole() const
{
    return m_Role;
}
void Subscriptions::setRole(int32_t value)
{
	if (std::find(m_RoleEnum.begin(), m_RoleEnum.end(), value) != m_RoleEnum.end()) {
		m_Role = value;
	} else {
		throw std::runtime_error("Value " + value + " not allowed");
	}
}
std::string Subscriptions::getColor() const
{
    return m_Color;
}
void Subscriptions::setColor(std::string value)
{
	m_Color = value;
}
int32_t Subscriptions::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}
void Subscriptions::setStreamPostPolicy(int32_t value)
{
	m_Stream_post_policy = value;
}
int32_t Subscriptions::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}
void Subscriptions::setMessageRetentionDays(int32_t value)
{
	m_Message_retention_days = value;
}
bool Subscriptions::isHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}
void Subscriptions::setHistoryPublicToSubscribers(bool value)
{
	m_History_public_to_subscribers = value;
}
int32_t Subscriptions::getFirstMessageId() const
{
    return m_First_message_id;
}
void Subscriptions::setFirstMessageId(int32_t value)
{
	m_First_message_id = value;
}
int32_t Subscriptions::getStreamWeeklyTraffic() const
{
    return m_Stream_weekly_traffic;
}
void Subscriptions::setStreamWeeklyTraffic(int32_t value)
{
	m_Stream_weekly_traffic = value;
}

}
}
}
}

