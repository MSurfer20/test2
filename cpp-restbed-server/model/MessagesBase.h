/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MessagesBase.h
 *
 * Object containing details of the message. 
 */

#ifndef MessagesBase_H_
#define MessagesBase_H_



#include "OneOfstringarray.h"
#include "MessagesBase_topic_links.h"
#include <string>
#include <vector>
#include "EmojiReaction.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// Object containing details of the message. 
/// </summary>
class  MessagesBase 
{
public:
    MessagesBase();
    virtual ~MessagesBase();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// MessagesBase members

    /// <summary>
    /// The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user&#39;s email address itself for this user. 
    /// </summary>
    std::string getAvatarUrl() const;
    void setAvatarUrl(std::string value);

    /// <summary>
    /// A Zulip \&quot;client\&quot; string, describing what Zulip client sent the message. 
    /// </summary>
    std::string getClient() const;
    void setClient(std::string value);

    /// <summary>
    /// The content/body of the message. 
    /// </summary>
    std::string getContent() const;
    void setContent(std::string value);

    /// <summary>
    /// The HTTP &#x60;content_type&#x60; for the message content.  This will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on whether &#x60;apply_markdown&#x60; was set. 
    /// </summary>
    std::string getContentType() const;
    void setContentType(std::string value);

    /// <summary>
    /// Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
    /// </summary>
    std::shared_ptr<OneOfstringarray> getDisplayRecipient() const;
    void setDisplayRecipient(std::shared_ptr<OneOfstringarray> value);

    /// <summary>
    /// The unique message ID.  Messages should always be displayed sorted by ID. 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);

    /// <summary>
    /// Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
    /// </summary>
    bool isIsMeMessage() const;
    void setIsMeMessage(bool value);

    /// <summary>
    /// Data on any reactions to the message. 
    /// </summary>
    std::vector<std::shared_ptr<EmojiReaction>> getReactions() const;
    void setReactions(std::vector<std::shared_ptr<EmojiReaction>> value);

    /// <summary>
    /// A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
    /// </summary>
    int32_t getRecipientId() const;
    void setRecipientId(int32_t value);

    /// <summary>
    /// The Zulip display email address of the message&#39;s sender. 
    /// </summary>
    std::string getSenderEmail() const;
    void setSenderEmail(std::string value);

    /// <summary>
    /// The full name of the message&#39;s sender. 
    /// </summary>
    std::string getSenderFullName() const;
    void setSenderFullName(std::string value);

    /// <summary>
    /// The user ID of the message&#39;s sender. 
    /// </summary>
    int32_t getSenderId() const;
    void setSenderId(int32_t value);

    /// <summary>
    /// A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;. 
    /// </summary>
    std::string getSenderRealmStr() const;
    void setSenderRealmStr(std::string value);

    /// <summary>
    /// Only present for stream messages; the ID of the stream. 
    /// </summary>
    int32_t getStreamId() const;
    void setStreamId(int32_t value);

    /// <summary>
    /// The &#x60;topic&#x60; of the message.  Currently always &#x60;\&quot;\&quot;&#x60; for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \&quot;subjects\&quot; and will eventually change. 
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string value);

    /// <summary>
    /// Data on any links to be included in the &#x60;topic&#x60; line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message&#39;s topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called &#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60; if present for compatibility with older Zulip servers. 
    /// </summary>
    std::vector<std::shared_ptr<MessagesBase_topic_links>> getTopicLinks() const;
    void setTopicLinks(std::vector<std::shared_ptr<MessagesBase_topic_links>> value);

    /// <summary>
    /// Data used for certain experimental Zulip integrations. 
    /// </summary>
    std::vector<std::string> getSubmessages() const;
    void setSubmessages(std::vector<std::string> value);

    /// <summary>
    /// The UNIX timestamp for when the message was sent, in UTC seconds. 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t value);

    /// <summary>
    /// The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;. 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);
protected:
    std::string m_Avatar_url;
    std::string m_Client;
    std::string m_Content;
    std::string m_Content_type;
    std::shared_ptr<OneOfstringarray> m_Display_recipient;
    int32_t m_Id;
    bool m_Is_me_message;
    std::vector<std::shared_ptr<EmojiReaction>> m_Reactions;
    int32_t m_Recipient_id;
    std::string m_Sender_email;
    std::string m_Sender_full_name;
    int32_t m_Sender_id;
    std::string m_Sender_realm_str;
    int32_t m_Stream_id;
    std::string m_Subject;
    std::vector<std::shared_ptr<MessagesBase_topic_links>> m_Topic_links;
    std::vector<std::string> m_Submessages;
    int32_t m_Timestamp;
    std::string m_Type;
};

}
}
}
}

#endif /* MessagesBase_H_ */
