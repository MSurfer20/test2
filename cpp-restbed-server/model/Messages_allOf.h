/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Messages_allOf.h
 *
 * 
 */

#ifndef Messages_allOf_H_
#define Messages_allOf_H_



#include "AnyType.h"
#include <memory>
#include <boost/property_tree/ptree.hpp>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  Messages_allOf 
{
public:
    Messages_allOf();
    virtual ~Messages_allOf();
    
    std::string toJsonString(bool prettyJson = false);
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree();
    void fromPropertyTree(boost::property_tree::ptree const& pt);

    /////////////////////////////////////////////
    /// Messages_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    void setAvatarUrl(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getClient() const;
    void setClient(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContent() const;
    void setContent(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContentType() const;
    void setContentType(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDisplayRecipient() const;
    void setDisplayRecipient(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getId() const;
    void setId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsMeMessage() const;
    void setIsMeMessage(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getReactions() const;
    void setReactions(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRecipientId() const;
    void setRecipientId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderEmail() const;
    void setSenderEmail(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderFullName() const;
    void setSenderFullName(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderId() const;
    void setSenderId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderRealmStr() const;
    void setSenderRealmStr(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getStreamId() const;
    void setStreamId(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubject() const;
    void setSubject(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTopicLinks() const;
    void setTopicLinks(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubmessages() const;
    void setSubmessages(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTimestamp() const;
    void setTimestamp(std::shared_ptr<AnyType> value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getType() const;
    void setType(std::shared_ptr<AnyType> value);
protected:
    std::shared_ptr<AnyType> m_Avatar_url;
    std::shared_ptr<AnyType> m_Client;
    std::shared_ptr<AnyType> m_Content;
    std::shared_ptr<AnyType> m_Content_type;
    std::shared_ptr<AnyType> m_Display_recipient;
    std::shared_ptr<AnyType> m_Id;
    std::shared_ptr<AnyType> m_Is_me_message;
    std::shared_ptr<AnyType> m_Reactions;
    std::shared_ptr<AnyType> m_Recipient_id;
    std::shared_ptr<AnyType> m_Sender_email;
    std::shared_ptr<AnyType> m_Sender_full_name;
    std::shared_ptr<AnyType> m_Sender_id;
    std::shared_ptr<AnyType> m_Sender_realm_str;
    std::shared_ptr<AnyType> m_Stream_id;
    std::shared_ptr<AnyType> m_Subject;
    std::shared_ptr<AnyType> m_Topic_links;
    std::shared_ptr<AnyType> m_Submessages;
    std::shared_ptr<AnyType> m_Timestamp;
    std::shared_ptr<AnyType> m_Type;
};

}
}
}
}

#endif /* Messages_allOf_H_ */
