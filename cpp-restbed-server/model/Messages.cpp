/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Messages.h"

#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Messages::Messages()
{
}

Messages::~Messages()
{
}

std::string Messages::toJsonString(bool prettyJson)
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
	return ss.str();
}

void Messages::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Messages::toPropertyTree()
{
	ptree pt;
	ptree tmp_node;
	return pt;
}

void Messages::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
}

std::shared_ptr<AnyType> Messages::getAvatarUrl() const
{
    return m_Avatar_url;
}
void Messages::setAvatarUrl(std::shared_ptr<AnyType> value)
{
	m_Avatar_url = value;
}
std::shared_ptr<AnyType> Messages::getClient() const
{
    return m_Client;
}
void Messages::setClient(std::shared_ptr<AnyType> value)
{
	m_Client = value;
}
std::shared_ptr<AnyType> Messages::getContent() const
{
    return m_Content;
}
void Messages::setContent(std::shared_ptr<AnyType> value)
{
	m_Content = value;
}
std::shared_ptr<AnyType> Messages::getContentType() const
{
    return m_Content_type;
}
void Messages::setContentType(std::shared_ptr<AnyType> value)
{
	m_Content_type = value;
}
std::shared_ptr<AnyType> Messages::getDisplayRecipient() const
{
    return m_Display_recipient;
}
void Messages::setDisplayRecipient(std::shared_ptr<AnyType> value)
{
	m_Display_recipient = value;
}
std::shared_ptr<AnyType> Messages::getId() const
{
    return m_Id;
}
void Messages::setId(std::shared_ptr<AnyType> value)
{
	m_Id = value;
}
std::shared_ptr<AnyType> Messages::getIsMeMessage() const
{
    return m_Is_me_message;
}
void Messages::setIsMeMessage(std::shared_ptr<AnyType> value)
{
	m_Is_me_message = value;
}
std::shared_ptr<AnyType> Messages::getReactions() const
{
    return m_Reactions;
}
void Messages::setReactions(std::shared_ptr<AnyType> value)
{
	m_Reactions = value;
}
std::shared_ptr<AnyType> Messages::getRecipientId() const
{
    return m_Recipient_id;
}
void Messages::setRecipientId(std::shared_ptr<AnyType> value)
{
	m_Recipient_id = value;
}
std::shared_ptr<AnyType> Messages::getSenderEmail() const
{
    return m_Sender_email;
}
void Messages::setSenderEmail(std::shared_ptr<AnyType> value)
{
	m_Sender_email = value;
}
std::shared_ptr<AnyType> Messages::getSenderFullName() const
{
    return m_Sender_full_name;
}
void Messages::setSenderFullName(std::shared_ptr<AnyType> value)
{
	m_Sender_full_name = value;
}
std::shared_ptr<AnyType> Messages::getSenderId() const
{
    return m_Sender_id;
}
void Messages::setSenderId(std::shared_ptr<AnyType> value)
{
	m_Sender_id = value;
}
std::shared_ptr<AnyType> Messages::getSenderRealmStr() const
{
    return m_Sender_realm_str;
}
void Messages::setSenderRealmStr(std::shared_ptr<AnyType> value)
{
	m_Sender_realm_str = value;
}
std::shared_ptr<AnyType> Messages::getStreamId() const
{
    return m_Stream_id;
}
void Messages::setStreamId(std::shared_ptr<AnyType> value)
{
	m_Stream_id = value;
}
std::shared_ptr<AnyType> Messages::getSubject() const
{
    return m_Subject;
}
void Messages::setSubject(std::shared_ptr<AnyType> value)
{
	m_Subject = value;
}
std::shared_ptr<AnyType> Messages::getTopicLinks() const
{
    return m_Topic_links;
}
void Messages::setTopicLinks(std::shared_ptr<AnyType> value)
{
	m_Topic_links = value;
}
std::shared_ptr<AnyType> Messages::getSubmessages() const
{
    return m_Submessages;
}
void Messages::setSubmessages(std::shared_ptr<AnyType> value)
{
	m_Submessages = value;
}
std::shared_ptr<AnyType> Messages::getTimestamp() const
{
    return m_Timestamp;
}
void Messages::setTimestamp(std::shared_ptr<AnyType> value)
{
	m_Timestamp = value;
}
std::shared_ptr<AnyType> Messages::getType() const
{
    return m_Type;
}
void Messages::setType(std::shared_ptr<AnyType> value)
{
	m_Type = value;
}

}
}
}
}

