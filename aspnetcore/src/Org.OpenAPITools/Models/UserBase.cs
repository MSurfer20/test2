/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A dictionary containing basic data on a given Zulip user. 
    /// </summary>
    [DataContract]
    public partial class UserBase : IEquatable<UserBase>
    {
        /// <summary>
        /// The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
        /// </summary>
        /// <value>The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a bot or full account. 
        /// </summary>
        /// <value>A boolean specifying whether the user is a bot or full account. </value>
        [DataMember(Name="is_bot", EmitDefaultValue=false)]
        public bool IsBot { get; set; }

        /// <summary>
        /// URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. 
        /// </summary>
        /// <value>URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. </value>
        [DataMember(Name="avatar_url", EmitDefaultValue=true)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. 
        /// </summary>
        /// <value>Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. </value>
        [DataMember(Name="avatar_version", EmitDefaultValue=false)]
        public int AvatarVersion { get; set; }

        /// <summary>
        /// Full name of the user or bot, used for all display purposes. 
        /// </summary>
        /// <value>Full name of the user or bot, used for all display purposes. </value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is an organization administrator. 
        /// </summary>
        /// <value>A boolean specifying whether the user is an organization administrator. </value>
        [DataMember(Name="is_admin", EmitDefaultValue=false)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
        /// </summary>
        /// <value>A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). </value>
        [DataMember(Name="is_owner", EmitDefaultValue=false)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
        /// </summary>
        /// <value>A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). </value>
        [DataMember(Name="is_billing_admin", EmitDefaultValue=false)]
        public bool IsBillingAdmin { get; set; }


        /// <summary>
        /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 
        /// </summary>
        /// <value>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). </value>
        
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum _100Enum for 100
            /// </summary>
            
            _100Enum = 100,
            
            /// <summary>
            /// Enum _200Enum for 200
            /// </summary>
            
            _200Enum = 200,
            
            /// <summary>
            /// Enum _300Enum for 300
            /// </summary>
            
            _300Enum = 300,
            
            /// <summary>
            /// Enum _400Enum for 400
            /// </summary>
            
            _400Enum = 400,
            
            /// <summary>
            /// Enum _600Enum for 600
            /// </summary>
            
            _600Enum = 600
        }

        /// <summary>
        /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
        /// </summary>
        /// <value>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). </value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum Role { get; set; }

        /// <summary>
        /// An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
        /// </summary>
        /// <value>An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </value>
        [DataMember(Name="bot_type", EmitDefaultValue=true)]
        public int? BotType { get; set; }

        /// <summary>
        /// The unique ID of the user. 
        /// </summary>
        /// <value>The unique ID of the user. </value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. 
        /// </summary>
        /// <value>If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. </value>
        [DataMember(Name="bot_owner_id", EmitDefaultValue=true)]
        public int? BotOwnerId { get; set; }

        /// <summary>
        /// A boolean specifying whether the user account has been deactivated. 
        /// </summary>
        /// <value>A boolean specifying whether the user account has been deactivated. </value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a guest user. 
        /// </summary>
        /// <value>A boolean specifying whether the user is a guest user. </value>
        [DataMember(Name="is_guest", EmitDefaultValue=false)]
        public bool IsGuest { get; set; }

        /// <summary>
        /// The time zone of the user. 
        /// </summary>
        /// <value>The time zone of the user. </value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// The time the user account was created. 
        /// </summary>
        /// <value>The time the user account was created. </value>
        [DataMember(Name="date_joined", EmitDefaultValue=false)]
        public string DateJoined { get; set; }

        /// <summary>
        /// The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
        /// </summary>
        /// <value>The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. </value>
        [DataMember(Name="delivery_email", EmitDefaultValue=false)]
        public string DeliveryEmail { get; set; }

        /// <summary>
        /// A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. 
        /// </summary>
        /// <value>A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. </value>
        [DataMember(Name="profile_data", EmitDefaultValue=false)]
        public Dictionary<string, Object> ProfileData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserBase {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsBot: ").Append(IsBot).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  AvatarVersion: ").Append(AvatarVersion).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  IsBillingAdmin: ").Append(IsBillingAdmin).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  BotOwnerId: ").Append(BotOwnerId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsGuest: ").Append(IsGuest).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  DateJoined: ").Append(DateJoined).Append("\n");
            sb.Append("  DeliveryEmail: ").Append(DeliveryEmail).Append("\n");
            sb.Append("  ProfileData: ").Append(ProfileData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserBase)obj);
        }

        /// <summary>
        /// Returns true if UserBase instances are equal
        /// </summary>
        /// <param name="other">Instance of UserBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    IsBot == other.IsBot ||
                    
                    IsBot.Equals(other.IsBot)
                ) && 
                (
                    AvatarUrl == other.AvatarUrl ||
                    AvatarUrl != null &&
                    AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    AvatarVersion == other.AvatarVersion ||
                    
                    AvatarVersion.Equals(other.AvatarVersion)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    IsAdmin == other.IsAdmin ||
                    
                    IsAdmin.Equals(other.IsAdmin)
                ) && 
                (
                    IsOwner == other.IsOwner ||
                    
                    IsOwner.Equals(other.IsOwner)
                ) && 
                (
                    IsBillingAdmin == other.IsBillingAdmin ||
                    
                    IsBillingAdmin.Equals(other.IsBillingAdmin)
                ) && 
                (
                    Role == other.Role ||
                    
                    Role.Equals(other.Role)
                ) && 
                (
                    BotType == other.BotType ||
                    BotType != null &&
                    BotType.Equals(other.BotType)
                ) && 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    BotOwnerId == other.BotOwnerId ||
                    BotOwnerId != null &&
                    BotOwnerId.Equals(other.BotOwnerId)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsGuest == other.IsGuest ||
                    
                    IsGuest.Equals(other.IsGuest)
                ) && 
                (
                    Timezone == other.Timezone ||
                    Timezone != null &&
                    Timezone.Equals(other.Timezone)
                ) && 
                (
                    DateJoined == other.DateJoined ||
                    DateJoined != null &&
                    DateJoined.Equals(other.DateJoined)
                ) && 
                (
                    DeliveryEmail == other.DeliveryEmail ||
                    DeliveryEmail != null &&
                    DeliveryEmail.Equals(other.DeliveryEmail)
                ) && 
                (
                    ProfileData == other.ProfileData ||
                    ProfileData != null &&
                    other.ProfileData != null &&
                    ProfileData.SequenceEqual(other.ProfileData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsBot.GetHashCode();
                    if (AvatarUrl != null)
                    hashCode = hashCode * 59 + AvatarUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + AvatarVersion.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAdmin.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsOwner.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsBillingAdmin.GetHashCode();
                    
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (BotType != null)
                    hashCode = hashCode * 59 + BotType.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (BotOwnerId != null)
                    hashCode = hashCode * 59 + BotOwnerId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsGuest.GetHashCode();
                    if (Timezone != null)
                    hashCode = hashCode * 59 + Timezone.GetHashCode();
                    if (DateJoined != null)
                    hashCode = hashCode * 59 + DateJoined.GetHashCode();
                    if (DeliveryEmail != null)
                    hashCode = hashCode * 59 + DeliveryEmail.GetHashCode();
                    if (ProfileData != null)
                    hashCode = hashCode * 59 + ProfileData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserBase left, UserBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserBase left, UserBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
