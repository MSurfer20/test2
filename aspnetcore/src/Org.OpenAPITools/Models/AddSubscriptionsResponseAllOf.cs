/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddSubscriptionsResponseAllOf : IEquatable<AddSubscriptionsResponseAllOf>
    {
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=true)]
        public Object Result { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name="msg", EmitDefaultValue=true)]
        public Object Msg { get; set; }

        /// <summary>
        /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
        /// </summary>
        /// <value>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. </value>
        [DataMember(Name="subscribed", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> Subscribed { get; set; }

        /// <summary>
        /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
        /// </summary>
        /// <value>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. </value>
        [DataMember(Name="already_subscribed", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> AlreadySubscribed { get; set; }

        /// <summary>
        /// A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. 
        /// </summary>
        /// <value>A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. </value>
        [DataMember(Name="unauthorized", EmitDefaultValue=false)]
        public List<string> Unauthorized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddSubscriptionsResponseAllOf {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Subscribed: ").Append(Subscribed).Append("\n");
            sb.Append("  AlreadySubscribed: ").Append(AlreadySubscribed).Append("\n");
            sb.Append("  Unauthorized: ").Append(Unauthorized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddSubscriptionsResponseAllOf)obj);
        }

        /// <summary>
        /// Returns true if AddSubscriptionsResponseAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of AddSubscriptionsResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddSubscriptionsResponseAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) && 
                (
                    Msg == other.Msg ||
                    Msg != null &&
                    Msg.Equals(other.Msg)
                ) && 
                (
                    Subscribed == other.Subscribed ||
                    Subscribed != null &&
                    other.Subscribed != null &&
                    Subscribed.SequenceEqual(other.Subscribed)
                ) && 
                (
                    AlreadySubscribed == other.AlreadySubscribed ||
                    AlreadySubscribed != null &&
                    other.AlreadySubscribed != null &&
                    AlreadySubscribed.SequenceEqual(other.AlreadySubscribed)
                ) && 
                (
                    Unauthorized == other.Unauthorized ||
                    Unauthorized != null &&
                    other.Unauthorized != null &&
                    Unauthorized.SequenceEqual(other.Unauthorized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (Msg != null)
                    hashCode = hashCode * 59 + Msg.GetHashCode();
                    if (Subscribed != null)
                    hashCode = hashCode * 59 + Subscribed.GetHashCode();
                    if (AlreadySubscribed != null)
                    hashCode = hashCode * 59 + AlreadySubscribed.GetHashCode();
                    if (Unauthorized != null)
                    hashCode = hashCode * 59 + Unauthorized.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddSubscriptionsResponseAllOf left, AddSubscriptionsResponseAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddSubscriptionsResponseAllOf left, AddSubscriptionsResponseAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
