/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetMessagesAllOf : IEquatable<GetMessagesAllOf>
    {
        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name="avatar_url", EmitDefaultValue=true)]
        public Object AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name="client", EmitDefaultValue=true)]
        public Object _Client { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=true)]
        public Object Content { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="content_type", EmitDefaultValue=true)]
        public Object ContentType { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRecipient
        /// </summary>
        [DataMember(Name="display_recipient", EmitDefaultValue=true)]
        public Object DisplayRecipient { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public Object Id { get; set; }

        /// <summary>
        /// Gets or Sets IsMeMessage
        /// </summary>
        [DataMember(Name="is_me_message", EmitDefaultValue=true)]
        public Object IsMeMessage { get; set; }

        /// <summary>
        /// Gets or Sets Reactions
        /// </summary>
        [DataMember(Name="reactions", EmitDefaultValue=true)]
        public Object Reactions { get; set; }

        /// <summary>
        /// Gets or Sets RecipientId
        /// </summary>
        [DataMember(Name="recipient_id", EmitDefaultValue=true)]
        public Object RecipientId { get; set; }

        /// <summary>
        /// Gets or Sets SenderEmail
        /// </summary>
        [DataMember(Name="sender_email", EmitDefaultValue=true)]
        public Object SenderEmail { get; set; }

        /// <summary>
        /// Gets or Sets SenderFullName
        /// </summary>
        [DataMember(Name="sender_full_name", EmitDefaultValue=true)]
        public Object SenderFullName { get; set; }

        /// <summary>
        /// Gets or Sets SenderId
        /// </summary>
        [DataMember(Name="sender_id", EmitDefaultValue=true)]
        public Object SenderId { get; set; }

        /// <summary>
        /// Gets or Sets SenderRealmStr
        /// </summary>
        [DataMember(Name="sender_realm_str", EmitDefaultValue=true)]
        public Object SenderRealmStr { get; set; }

        /// <summary>
        /// Gets or Sets StreamId
        /// </summary>
        [DataMember(Name="stream_id", EmitDefaultValue=true)]
        public Object StreamId { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name="subject", EmitDefaultValue=true)]
        public Object Subject { get; set; }

        /// <summary>
        /// Gets or Sets TopicLinks
        /// </summary>
        [DataMember(Name="topic_links", EmitDefaultValue=true)]
        public Object TopicLinks { get; set; }

        /// <summary>
        /// Gets or Sets Submessages
        /// </summary>
        [DataMember(Name="submessages", EmitDefaultValue=true)]
        public Object Submessages { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public Object Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public Object Type { get; set; }

        /// <summary>
        /// The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags 
        /// </summary>
        /// <value>The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags </value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// The UNIX timestamp for when the message was last edited, in UTC seconds. 
        /// </summary>
        /// <value>The UNIX timestamp for when the message was last edited, in UTC seconds. </value>
        [DataMember(Name="last_edit_timestamp", EmitDefaultValue=false)]
        public int LastEditTimestamp { get; set; }

        /// <summary>
        /// Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
        /// </summary>
        /// <value>Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </value>
        [DataMember(Name="match_content", EmitDefaultValue=false)]
        public string MatchContent { get; set; }

        /// <summary>
        /// Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
        /// </summary>
        /// <value>Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </value>
        [DataMember(Name="match_subject", EmitDefaultValue=false)]
        public string MatchSubject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMessagesAllOf {\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DisplayRecipient: ").Append(DisplayRecipient).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMeMessage: ").Append(IsMeMessage).Append("\n");
            sb.Append("  Reactions: ").Append(Reactions).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  SenderFullName: ").Append(SenderFullName).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderRealmStr: ").Append(SenderRealmStr).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TopicLinks: ").Append(TopicLinks).Append("\n");
            sb.Append("  Submessages: ").Append(Submessages).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  LastEditTimestamp: ").Append(LastEditTimestamp).Append("\n");
            sb.Append("  MatchContent: ").Append(MatchContent).Append("\n");
            sb.Append("  MatchSubject: ").Append(MatchSubject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetMessagesAllOf)obj);
        }

        /// <summary>
        /// Returns true if GetMessagesAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of GetMessagesAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMessagesAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AvatarUrl == other.AvatarUrl ||
                    AvatarUrl != null &&
                    AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    _Client == other._Client ||
                    _Client != null &&
                    _Client.Equals(other._Client)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    DisplayRecipient == other.DisplayRecipient ||
                    DisplayRecipient != null &&
                    DisplayRecipient.Equals(other.DisplayRecipient)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsMeMessage == other.IsMeMessage ||
                    IsMeMessage != null &&
                    IsMeMessage.Equals(other.IsMeMessage)
                ) && 
                (
                    Reactions == other.Reactions ||
                    Reactions != null &&
                    Reactions.Equals(other.Reactions)
                ) && 
                (
                    RecipientId == other.RecipientId ||
                    RecipientId != null &&
                    RecipientId.Equals(other.RecipientId)
                ) && 
                (
                    SenderEmail == other.SenderEmail ||
                    SenderEmail != null &&
                    SenderEmail.Equals(other.SenderEmail)
                ) && 
                (
                    SenderFullName == other.SenderFullName ||
                    SenderFullName != null &&
                    SenderFullName.Equals(other.SenderFullName)
                ) && 
                (
                    SenderId == other.SenderId ||
                    SenderId != null &&
                    SenderId.Equals(other.SenderId)
                ) && 
                (
                    SenderRealmStr == other.SenderRealmStr ||
                    SenderRealmStr != null &&
                    SenderRealmStr.Equals(other.SenderRealmStr)
                ) && 
                (
                    StreamId == other.StreamId ||
                    StreamId != null &&
                    StreamId.Equals(other.StreamId)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    TopicLinks == other.TopicLinks ||
                    TopicLinks != null &&
                    TopicLinks.Equals(other.TopicLinks)
                ) && 
                (
                    Submessages == other.Submessages ||
                    Submessages != null &&
                    Submessages.Equals(other.Submessages)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Flags == other.Flags ||
                    Flags != null &&
                    other.Flags != null &&
                    Flags.SequenceEqual(other.Flags)
                ) && 
                (
                    LastEditTimestamp == other.LastEditTimestamp ||
                    
                    LastEditTimestamp.Equals(other.LastEditTimestamp)
                ) && 
                (
                    MatchContent == other.MatchContent ||
                    MatchContent != null &&
                    MatchContent.Equals(other.MatchContent)
                ) && 
                (
                    MatchSubject == other.MatchSubject ||
                    MatchSubject != null &&
                    MatchSubject.Equals(other.MatchSubject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AvatarUrl != null)
                    hashCode = hashCode * 59 + AvatarUrl.GetHashCode();
                    if (_Client != null)
                    hashCode = hashCode * 59 + _Client.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (DisplayRecipient != null)
                    hashCode = hashCode * 59 + DisplayRecipient.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IsMeMessage != null)
                    hashCode = hashCode * 59 + IsMeMessage.GetHashCode();
                    if (Reactions != null)
                    hashCode = hashCode * 59 + Reactions.GetHashCode();
                    if (RecipientId != null)
                    hashCode = hashCode * 59 + RecipientId.GetHashCode();
                    if (SenderEmail != null)
                    hashCode = hashCode * 59 + SenderEmail.GetHashCode();
                    if (SenderFullName != null)
                    hashCode = hashCode * 59 + SenderFullName.GetHashCode();
                    if (SenderId != null)
                    hashCode = hashCode * 59 + SenderId.GetHashCode();
                    if (SenderRealmStr != null)
                    hashCode = hashCode * 59 + SenderRealmStr.GetHashCode();
                    if (StreamId != null)
                    hashCode = hashCode * 59 + StreamId.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (TopicLinks != null)
                    hashCode = hashCode * 59 + TopicLinks.GetHashCode();
                    if (Submessages != null)
                    hashCode = hashCode * 59 + Submessages.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Flags != null)
                    hashCode = hashCode * 59 + Flags.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastEditTimestamp.GetHashCode();
                    if (MatchContent != null)
                    hashCode = hashCode * 59 + MatchContent.GetHashCode();
                    if (MatchSubject != null)
                    hashCode = hashCode * 59 + MatchSubject.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetMessagesAllOf left, GetMessagesAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetMessagesAllOf left, GetMessagesAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
