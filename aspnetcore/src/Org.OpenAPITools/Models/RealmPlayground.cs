/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Object containing details about a realm playground. 
    /// </summary>
    [DataContract]
    public partial class RealmPlayground : IEquatable<RealmPlayground>
    {
        /// <summary>
        /// The unique ID for the realm playground. 
        /// </summary>
        /// <value>The unique ID for the realm playground. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). 
        /// </summary>
        /// <value>The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the Pygments language lexer for that programming language. 
        /// </summary>
        /// <value>The name of the Pygments language lexer for that programming language. </value>
        [DataMember(Name="pygments_language", EmitDefaultValue=false)]
        public string PygmentsLanguage { get; set; }

        /// <summary>
        /// The url prefix for the playground. 
        /// </summary>
        /// <value>The url prefix for the playground. </value>
        [DataMember(Name="url_prefix", EmitDefaultValue=false)]
        public string UrlPrefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealmPlayground {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PygmentsLanguage: ").Append(PygmentsLanguage).Append("\n");
            sb.Append("  UrlPrefix: ").Append(UrlPrefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RealmPlayground)obj);
        }

        /// <summary>
        /// Returns true if RealmPlayground instances are equal
        /// </summary>
        /// <param name="other">Instance of RealmPlayground to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmPlayground other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PygmentsLanguage == other.PygmentsLanguage ||
                    PygmentsLanguage != null &&
                    PygmentsLanguage.Equals(other.PygmentsLanguage)
                ) && 
                (
                    UrlPrefix == other.UrlPrefix ||
                    UrlPrefix != null &&
                    UrlPrefix.Equals(other.UrlPrefix)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PygmentsLanguage != null)
                    hashCode = hashCode * 59 + PygmentsLanguage.GetHashCode();
                    if (UrlPrefix != null)
                    hashCode = hashCode * 59 + UrlPrefix.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RealmPlayground left, RealmPlayground right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RealmPlayground left, RealmPlayground right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
