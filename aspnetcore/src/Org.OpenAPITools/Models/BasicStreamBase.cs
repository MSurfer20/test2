/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Object containing basic details about the stream. 
    /// </summary>
    [DataContract]
    public partial class BasicStreamBase : IEquatable<BasicStreamBase>
    {
        /// <summary>
        /// The unique ID of the stream. 
        /// </summary>
        /// <value>The unique ID of the stream. </value>
        [DataMember(Name="stream_id", EmitDefaultValue=false)]
        public int StreamId { get; set; }

        /// <summary>
        /// The name of the stream. 
        /// </summary>
        /// <value>The name of the stream. </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. 
        /// </summary>
        /// <value>The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. </value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
        /// </summary>
        /// <value>The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). </value>
        [DataMember(Name="date_created", EmitDefaultValue=false)]
        public int DateCreated { get; set; }

        /// <summary>
        /// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
        /// </summary>
        /// <value>Specifies whether the stream is private or not. Only people who have been invited can access a private stream. </value>
        [DataMember(Name="invite_only", EmitDefaultValue=false)]
        public bool InviteOnly { get; set; }

        /// <summary>
        /// The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
        /// </summary>
        /// <value>The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. </value>
        [DataMember(Name="rendered_description", EmitDefaultValue=false)]
        public string RenderedDescription { get; set; }

        /// <summary>
        /// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
        /// </summary>
        /// <value>Whether the stream has been configured to allow unauthenticated access to its message history from the web. </value>
        [DataMember(Name="is_web_public", EmitDefaultValue=false)]
        public bool IsWebPublic { get; set; }

        /// <summary>
        /// Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
        /// </summary>
        /// <value>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </value>
        [DataMember(Name="stream_post_policy", EmitDefaultValue=false)]
        public int StreamPostPolicy { get; set; }

        /// <summary>
        /// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
        /// </summary>
        /// <value>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). </value>
        [DataMember(Name="message_retention_days", EmitDefaultValue=true)]
        public int? MessageRetentionDays { get; set; }

        /// <summary>
        /// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. 
        /// </summary>
        /// <value>Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. </value>
        [DataMember(Name="history_public_to_subscribers", EmitDefaultValue=false)]
        public bool HistoryPublicToSubscribers { get; set; }

        /// <summary>
        /// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
        /// </summary>
        /// <value>The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. </value>
        [DataMember(Name="first_message_id", EmitDefaultValue=true)]
        public int? FirstMessageId { get; set; }

        /// <summary>
        /// Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. 
        /// </summary>
        /// <value>Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. </value>
        [DataMember(Name="is_announcement_only", EmitDefaultValue=false)]
        public bool IsAnnouncementOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicStreamBase {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  InviteOnly: ").Append(InviteOnly).Append("\n");
            sb.Append("  RenderedDescription: ").Append(RenderedDescription).Append("\n");
            sb.Append("  IsWebPublic: ").Append(IsWebPublic).Append("\n");
            sb.Append("  StreamPostPolicy: ").Append(StreamPostPolicy).Append("\n");
            sb.Append("  MessageRetentionDays: ").Append(MessageRetentionDays).Append("\n");
            sb.Append("  HistoryPublicToSubscribers: ").Append(HistoryPublicToSubscribers).Append("\n");
            sb.Append("  FirstMessageId: ").Append(FirstMessageId).Append("\n");
            sb.Append("  IsAnnouncementOnly: ").Append(IsAnnouncementOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasicStreamBase)obj);
        }

        /// <summary>
        /// Returns true if BasicStreamBase instances are equal
        /// </summary>
        /// <param name="other">Instance of BasicStreamBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicStreamBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StreamId == other.StreamId ||
                    
                    StreamId.Equals(other.StreamId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    InviteOnly == other.InviteOnly ||
                    
                    InviteOnly.Equals(other.InviteOnly)
                ) && 
                (
                    RenderedDescription == other.RenderedDescription ||
                    RenderedDescription != null &&
                    RenderedDescription.Equals(other.RenderedDescription)
                ) && 
                (
                    IsWebPublic == other.IsWebPublic ||
                    
                    IsWebPublic.Equals(other.IsWebPublic)
                ) && 
                (
                    StreamPostPolicy == other.StreamPostPolicy ||
                    
                    StreamPostPolicy.Equals(other.StreamPostPolicy)
                ) && 
                (
                    MessageRetentionDays == other.MessageRetentionDays ||
                    MessageRetentionDays != null &&
                    MessageRetentionDays.Equals(other.MessageRetentionDays)
                ) && 
                (
                    HistoryPublicToSubscribers == other.HistoryPublicToSubscribers ||
                    
                    HistoryPublicToSubscribers.Equals(other.HistoryPublicToSubscribers)
                ) && 
                (
                    FirstMessageId == other.FirstMessageId ||
                    FirstMessageId != null &&
                    FirstMessageId.Equals(other.FirstMessageId)
                ) && 
                (
                    IsAnnouncementOnly == other.IsAnnouncementOnly ||
                    
                    IsAnnouncementOnly.Equals(other.IsAnnouncementOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + StreamId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    
                    hashCode = hashCode * 59 + InviteOnly.GetHashCode();
                    if (RenderedDescription != null)
                    hashCode = hashCode * 59 + RenderedDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsWebPublic.GetHashCode();
                    
                    hashCode = hashCode * 59 + StreamPostPolicy.GetHashCode();
                    if (MessageRetentionDays != null)
                    hashCode = hashCode * 59 + MessageRetentionDays.GetHashCode();
                    
                    hashCode = hashCode * 59 + HistoryPublicToSubscribers.GetHashCode();
                    if (FirstMessageId != null)
                    hashCode = hashCode * 59 + FirstMessageId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAnnouncementOnly.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasicStreamBase left, BasicStreamBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasicStreamBase left, BasicStreamBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
