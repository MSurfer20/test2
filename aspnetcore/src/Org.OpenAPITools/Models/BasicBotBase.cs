/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BasicBotBase : IEquatable<BasicBotBase>
    {
        /// <summary>
        /// The user id of the bot. 
        /// </summary>
        /// <value>The user id of the bot. </value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// The full name of the bot. 
        /// </summary>
        /// <value>The full name of the bot. </value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// The API key of the bot which it uses to make API requests. 
        /// </summary>
        /// <value>The API key of the bot which it uses to make API requests. </value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. 
        /// </summary>
        /// <value>The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. </value>
        [DataMember(Name="default_sending_stream", EmitDefaultValue=true)]
        public string DefaultSendingStream { get; set; }

        /// <summary>
        /// The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. 
        /// </summary>
        /// <value>The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. </value>
        [DataMember(Name="default_events_register_stream", EmitDefaultValue=true)]
        public string DefaultEventsRegisterStream { get; set; }

        /// <summary>
        /// Whether the bot can send messages to all streams by default. 
        /// </summary>
        /// <value>Whether the bot can send messages to all streams by default. </value>
        [DataMember(Name="default_all_public_streams", EmitDefaultValue=false)]
        public bool DefaultAllPublicStreams { get; set; }

        /// <summary>
        /// The URL of the bot&#39;s avatar. 
        /// </summary>
        /// <value>The URL of the bot&#39;s avatar. </value>
        [DataMember(Name="avatar_url", EmitDefaultValue=false)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The user id of the bot&#39;s owner.  Null if the bot has no owner. 
        /// </summary>
        /// <value>The user id of the bot&#39;s owner.  Null if the bot has no owner. </value>
        [DataMember(Name="owner_id", EmitDefaultValue=true)]
        public int? OwnerId { get; set; }

        /// <summary>
        /// The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
        /// </summary>
        /// <value>The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. </value>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<OneOfobjectobject> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicBotBase {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  DefaultSendingStream: ").Append(DefaultSendingStream).Append("\n");
            sb.Append("  DefaultEventsRegisterStream: ").Append(DefaultEventsRegisterStream).Append("\n");
            sb.Append("  DefaultAllPublicStreams: ").Append(DefaultAllPublicStreams).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasicBotBase)obj);
        }

        /// <summary>
        /// Returns true if BasicBotBase instances are equal
        /// </summary>
        /// <param name="other">Instance of BasicBotBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicBotBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    
                    UserId.Equals(other.UserId)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    ApiKey == other.ApiKey ||
                    ApiKey != null &&
                    ApiKey.Equals(other.ApiKey)
                ) && 
                (
                    DefaultSendingStream == other.DefaultSendingStream ||
                    DefaultSendingStream != null &&
                    DefaultSendingStream.Equals(other.DefaultSendingStream)
                ) && 
                (
                    DefaultEventsRegisterStream == other.DefaultEventsRegisterStream ||
                    DefaultEventsRegisterStream != null &&
                    DefaultEventsRegisterStream.Equals(other.DefaultEventsRegisterStream)
                ) && 
                (
                    DefaultAllPublicStreams == other.DefaultAllPublicStreams ||
                    
                    DefaultAllPublicStreams.Equals(other.DefaultAllPublicStreams)
                ) && 
                (
                    AvatarUrl == other.AvatarUrl ||
                    AvatarUrl != null &&
                    AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    other.Services != null &&
                    Services.SequenceEqual(other.Services)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (ApiKey != null)
                    hashCode = hashCode * 59 + ApiKey.GetHashCode();
                    if (DefaultSendingStream != null)
                    hashCode = hashCode * 59 + DefaultSendingStream.GetHashCode();
                    if (DefaultEventsRegisterStream != null)
                    hashCode = hashCode * 59 + DefaultEventsRegisterStream.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefaultAllPublicStreams.GetHashCode();
                    if (AvatarUrl != null)
                    hashCode = hashCode * 59 + AvatarUrl.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasicBotBase left, BasicBotBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasicBotBase left, BasicBotBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
