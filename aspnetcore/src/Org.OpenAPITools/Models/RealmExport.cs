/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Object containing details about a realm export. 
    /// </summary>
    [DataContract]
    public partial class RealmExport : IEquatable<RealmExport>
    {
        /// <summary>
        /// The id of the export. 
        /// </summary>
        /// <value>The id of the export. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The id of the user who did the export. 
        /// </summary>
        /// <value>The id of the user who did the export. </value>
        [DataMember(Name="acting_user_id", EmitDefaultValue=false)]
        public int ActingUserId { get; set; }

        /// <summary>
        /// The UNIX timestamp of when the export was made. 
        /// </summary>
        /// <value>The UNIX timestamp of when the export was made. </value>
        [DataMember(Name="export_time", EmitDefaultValue=false)]
        public decimal ExportTime { get; set; }

        /// <summary>
        /// The timestamp of when the export was deleted. Null if it wasn&#39;t. 
        /// </summary>
        /// <value>The timestamp of when the export was deleted. Null if it wasn&#39;t. </value>
        [DataMember(Name="deleted_timestamp", EmitDefaultValue=true)]
        public decimal? DeletedTimestamp { get; set; }

        /// <summary>
        /// The timestamp of when the export failed. Null if it didn&#39;t. 
        /// </summary>
        /// <value>The timestamp of when the export failed. Null if it didn&#39;t. </value>
        [DataMember(Name="failed_timestamp", EmitDefaultValue=true)]
        public decimal? FailedTimestamp { get; set; }

        /// <summary>
        /// The URL of the export. &#x60;null&#x60; if there&#39;s no URL. 
        /// </summary>
        /// <value>The URL of the export. &#x60;null&#x60; if there&#39;s no URL. </value>
        [DataMember(Name="export_url", EmitDefaultValue=true)]
        public string ExportUrl { get; set; }

        /// <summary>
        /// Whether the export is pending or not. 
        /// </summary>
        /// <value>Whether the export is pending or not. </value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public bool Pending { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealmExport {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActingUserId: ").Append(ActingUserId).Append("\n");
            sb.Append("  ExportTime: ").Append(ExportTime).Append("\n");
            sb.Append("  DeletedTimestamp: ").Append(DeletedTimestamp).Append("\n");
            sb.Append("  FailedTimestamp: ").Append(FailedTimestamp).Append("\n");
            sb.Append("  ExportUrl: ").Append(ExportUrl).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RealmExport)obj);
        }

        /// <summary>
        /// Returns true if RealmExport instances are equal
        /// </summary>
        /// <param name="other">Instance of RealmExport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmExport other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    ActingUserId == other.ActingUserId ||
                    
                    ActingUserId.Equals(other.ActingUserId)
                ) && 
                (
                    ExportTime == other.ExportTime ||
                    
                    ExportTime.Equals(other.ExportTime)
                ) && 
                (
                    DeletedTimestamp == other.DeletedTimestamp ||
                    DeletedTimestamp != null &&
                    DeletedTimestamp.Equals(other.DeletedTimestamp)
                ) && 
                (
                    FailedTimestamp == other.FailedTimestamp ||
                    FailedTimestamp != null &&
                    FailedTimestamp.Equals(other.FailedTimestamp)
                ) && 
                (
                    ExportUrl == other.ExportUrl ||
                    ExportUrl != null &&
                    ExportUrl.Equals(other.ExportUrl)
                ) && 
                (
                    Pending == other.Pending ||
                    
                    Pending.Equals(other.Pending)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + ActingUserId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExportTime.GetHashCode();
                    if (DeletedTimestamp != null)
                    hashCode = hashCode * 59 + DeletedTimestamp.GetHashCode();
                    if (FailedTimestamp != null)
                    hashCode = hashCode * 59 + FailedTimestamp.GetHashCode();
                    if (ExportUrl != null)
                    hashCode = hashCode * 59 + ExportUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Pending.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RealmExport left, RealmExport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RealmExport left, RealmExport right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
