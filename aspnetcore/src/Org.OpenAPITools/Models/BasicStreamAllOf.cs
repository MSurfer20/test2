/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BasicStreamAllOf : IEquatable<BasicStreamAllOf>
    {
        /// <summary>
        /// Gets or Sets StreamId
        /// </summary>
        [DataMember(Name="stream_id", EmitDefaultValue=true)]
        public Object StreamId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public Object Description { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="date_created", EmitDefaultValue=true)]
        public Object DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets InviteOnly
        /// </summary>
        [DataMember(Name="invite_only", EmitDefaultValue=true)]
        public Object InviteOnly { get; set; }

        /// <summary>
        /// Gets or Sets RenderedDescription
        /// </summary>
        [DataMember(Name="rendered_description", EmitDefaultValue=true)]
        public Object RenderedDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsWebPublic
        /// </summary>
        [DataMember(Name="is_web_public", EmitDefaultValue=true)]
        public Object IsWebPublic { get; set; }

        /// <summary>
        /// Gets or Sets StreamPostPolicy
        /// </summary>
        [DataMember(Name="stream_post_policy", EmitDefaultValue=true)]
        public Object StreamPostPolicy { get; set; }

        /// <summary>
        /// Gets or Sets MessageRetentionDays
        /// </summary>
        [DataMember(Name="message_retention_days", EmitDefaultValue=true)]
        public Object MessageRetentionDays { get; set; }

        /// <summary>
        /// Gets or Sets HistoryPublicToSubscribers
        /// </summary>
        [DataMember(Name="history_public_to_subscribers", EmitDefaultValue=true)]
        public Object HistoryPublicToSubscribers { get; set; }

        /// <summary>
        /// Gets or Sets FirstMessageId
        /// </summary>
        [DataMember(Name="first_message_id", EmitDefaultValue=true)]
        public Object FirstMessageId { get; set; }

        /// <summary>
        /// Gets or Sets IsAnnouncementOnly
        /// </summary>
        [DataMember(Name="is_announcement_only", EmitDefaultValue=true)]
        public Object IsAnnouncementOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicStreamAllOf {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  InviteOnly: ").Append(InviteOnly).Append("\n");
            sb.Append("  RenderedDescription: ").Append(RenderedDescription).Append("\n");
            sb.Append("  IsWebPublic: ").Append(IsWebPublic).Append("\n");
            sb.Append("  StreamPostPolicy: ").Append(StreamPostPolicy).Append("\n");
            sb.Append("  MessageRetentionDays: ").Append(MessageRetentionDays).Append("\n");
            sb.Append("  HistoryPublicToSubscribers: ").Append(HistoryPublicToSubscribers).Append("\n");
            sb.Append("  FirstMessageId: ").Append(FirstMessageId).Append("\n");
            sb.Append("  IsAnnouncementOnly: ").Append(IsAnnouncementOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BasicStreamAllOf)obj);
        }

        /// <summary>
        /// Returns true if BasicStreamAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of BasicStreamAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicStreamAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StreamId == other.StreamId ||
                    StreamId != null &&
                    StreamId.Equals(other.StreamId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    InviteOnly == other.InviteOnly ||
                    InviteOnly != null &&
                    InviteOnly.Equals(other.InviteOnly)
                ) && 
                (
                    RenderedDescription == other.RenderedDescription ||
                    RenderedDescription != null &&
                    RenderedDescription.Equals(other.RenderedDescription)
                ) && 
                (
                    IsWebPublic == other.IsWebPublic ||
                    IsWebPublic != null &&
                    IsWebPublic.Equals(other.IsWebPublic)
                ) && 
                (
                    StreamPostPolicy == other.StreamPostPolicy ||
                    StreamPostPolicy != null &&
                    StreamPostPolicy.Equals(other.StreamPostPolicy)
                ) && 
                (
                    MessageRetentionDays == other.MessageRetentionDays ||
                    MessageRetentionDays != null &&
                    MessageRetentionDays.Equals(other.MessageRetentionDays)
                ) && 
                (
                    HistoryPublicToSubscribers == other.HistoryPublicToSubscribers ||
                    HistoryPublicToSubscribers != null &&
                    HistoryPublicToSubscribers.Equals(other.HistoryPublicToSubscribers)
                ) && 
                (
                    FirstMessageId == other.FirstMessageId ||
                    FirstMessageId != null &&
                    FirstMessageId.Equals(other.FirstMessageId)
                ) && 
                (
                    IsAnnouncementOnly == other.IsAnnouncementOnly ||
                    IsAnnouncementOnly != null &&
                    IsAnnouncementOnly.Equals(other.IsAnnouncementOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StreamId != null)
                    hashCode = hashCode * 59 + StreamId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (InviteOnly != null)
                    hashCode = hashCode * 59 + InviteOnly.GetHashCode();
                    if (RenderedDescription != null)
                    hashCode = hashCode * 59 + RenderedDescription.GetHashCode();
                    if (IsWebPublic != null)
                    hashCode = hashCode * 59 + IsWebPublic.GetHashCode();
                    if (StreamPostPolicy != null)
                    hashCode = hashCode * 59 + StreamPostPolicy.GetHashCode();
                    if (MessageRetentionDays != null)
                    hashCode = hashCode * 59 + MessageRetentionDays.GetHashCode();
                    if (HistoryPublicToSubscribers != null)
                    hashCode = hashCode * 59 + HistoryPublicToSubscribers.GetHashCode();
                    if (FirstMessageId != null)
                    hashCode = hashCode * 59 + FirstMessageId.GetHashCode();
                    if (IsAnnouncementOnly != null)
                    hashCode = hashCode * 59 + IsAnnouncementOnly.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BasicStreamAllOf left, BasicStreamAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BasicStreamAllOf left, BasicStreamAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
