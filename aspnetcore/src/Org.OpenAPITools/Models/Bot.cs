/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Bot : IEquatable<Bot>
    {
        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public Object UserId { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=true)]
        public Object FullName { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api_key", EmitDefaultValue=true)]
        public Object ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSendingStream
        /// </summary>
        [DataMember(Name="default_sending_stream", EmitDefaultValue=true)]
        public Object DefaultSendingStream { get; set; }

        /// <summary>
        /// Gets or Sets DefaultEventsRegisterStream
        /// </summary>
        [DataMember(Name="default_events_register_stream", EmitDefaultValue=true)]
        public Object DefaultEventsRegisterStream { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAllPublicStreams
        /// </summary>
        [DataMember(Name="default_all_public_streams", EmitDefaultValue=true)]
        public Object DefaultAllPublicStreams { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name="avatar_url", EmitDefaultValue=true)]
        public Object AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="owner_id", EmitDefaultValue=true)]
        public Object OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public Object Services { get; set; }

        /// <summary>
        /// The email of the bot. 
        /// </summary>
        /// <value>The email of the bot. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
        /// </summary>
        /// <value>An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </value>
        [DataMember(Name="bot_type", EmitDefaultValue=true)]
        public int? BotType { get; set; }

        /// <summary>
        /// A boolean describing whether the user account has been deactivated. 
        /// </summary>
        /// <value>A boolean describing whether the user account has been deactivated. </value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bot {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  DefaultSendingStream: ").Append(DefaultSendingStream).Append("\n");
            sb.Append("  DefaultEventsRegisterStream: ").Append(DefaultEventsRegisterStream).Append("\n");
            sb.Append("  DefaultAllPublicStreams: ").Append(DefaultAllPublicStreams).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Bot)obj);
        }

        /// <summary>
        /// Returns true if Bot instances are equal
        /// </summary>
        /// <param name="other">Instance of Bot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bot other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    FullName == other.FullName ||
                    FullName != null &&
                    FullName.Equals(other.FullName)
                ) && 
                (
                    ApiKey == other.ApiKey ||
                    ApiKey != null &&
                    ApiKey.Equals(other.ApiKey)
                ) && 
                (
                    DefaultSendingStream == other.DefaultSendingStream ||
                    DefaultSendingStream != null &&
                    DefaultSendingStream.Equals(other.DefaultSendingStream)
                ) && 
                (
                    DefaultEventsRegisterStream == other.DefaultEventsRegisterStream ||
                    DefaultEventsRegisterStream != null &&
                    DefaultEventsRegisterStream.Equals(other.DefaultEventsRegisterStream)
                ) && 
                (
                    DefaultAllPublicStreams == other.DefaultAllPublicStreams ||
                    DefaultAllPublicStreams != null &&
                    DefaultAllPublicStreams.Equals(other.DefaultAllPublicStreams)
                ) && 
                (
                    AvatarUrl == other.AvatarUrl ||
                    AvatarUrl != null &&
                    AvatarUrl.Equals(other.AvatarUrl)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    Services.Equals(other.Services)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    BotType == other.BotType ||
                    BotType != null &&
                    BotType.Equals(other.BotType)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (FullName != null)
                    hashCode = hashCode * 59 + FullName.GetHashCode();
                    if (ApiKey != null)
                    hashCode = hashCode * 59 + ApiKey.GetHashCode();
                    if (DefaultSendingStream != null)
                    hashCode = hashCode * 59 + DefaultSendingStream.GetHashCode();
                    if (DefaultEventsRegisterStream != null)
                    hashCode = hashCode * 59 + DefaultEventsRegisterStream.GetHashCode();
                    if (DefaultAllPublicStreams != null)
                    hashCode = hashCode * 59 + DefaultAllPublicStreams.GetHashCode();
                    if (AvatarUrl != null)
                    hashCode = hashCode * 59 + AvatarUrl.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (BotType != null)
                    hashCode = hashCode * 59 + BotType.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Bot left, Bot right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Bot left, Bot right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
