/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EmojiReactionAllOf : IEquatable<EmojiReactionAllOf>
    {
        /// <summary>
        /// Gets or Sets EmojiCode
        /// </summary>
        [DataMember(Name="emoji_code", EmitDefaultValue=true)]
        public Object EmojiCode { get; set; }

        /// <summary>
        /// Gets or Sets EmojiName
        /// </summary>
        [DataMember(Name="emoji_name", EmitDefaultValue=true)]
        public Object EmojiName { get; set; }

        /// <summary>
        /// Gets or Sets ReactionType
        /// </summary>
        [DataMember(Name="reaction_type", EmitDefaultValue=true)]
        public Object ReactionType { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public Object UserId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=true)]
        public Object User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmojiReactionAllOf {\n");
            sb.Append("  EmojiCode: ").Append(EmojiCode).Append("\n");
            sb.Append("  EmojiName: ").Append(EmojiName).Append("\n");
            sb.Append("  ReactionType: ").Append(ReactionType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmojiReactionAllOf)obj);
        }

        /// <summary>
        /// Returns true if EmojiReactionAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of EmojiReactionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmojiReactionAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmojiCode == other.EmojiCode ||
                    EmojiCode != null &&
                    EmojiCode.Equals(other.EmojiCode)
                ) && 
                (
                    EmojiName == other.EmojiName ||
                    EmojiName != null &&
                    EmojiName.Equals(other.EmojiName)
                ) && 
                (
                    ReactionType == other.ReactionType ||
                    ReactionType != null &&
                    ReactionType.Equals(other.ReactionType)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmojiCode != null)
                    hashCode = hashCode * 59 + EmojiCode.GetHashCode();
                    if (EmojiName != null)
                    hashCode = hashCode * 59 + EmojiName.GetHashCode();
                    if (ReactionType != null)
                    hashCode = hashCode * 59 + ReactionType.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmojiReactionAllOf left, EmojiReactionAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmojiReactionAllOf left, EmojiReactionAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
