/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { AddSubscriptionsResponse } from '../model/addSubscriptionsResponse';
import { CodedError } from '../model/codedError';
import { JsonError } from '../model/jsonError';
import { JsonSuccess } from '../model/jsonSuccess';
import { JsonSuccessBase } from '../model/jsonSuccessBase';
import { NonExistingStreamError } from '../model/nonExistingStreamError';
import { Configuration } from '../configuration';


@Injectable()
export class StreamsService {

    protected basePath = 'https://example.zulipchat.com/api/v1';
    public defaultHeaders = new Map()
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Archive a stream
     * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
     * @param streamId The ID of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public archiveStream(streamId: number, ): Observable<AxiosResponse<JsonSuccess>>;
    public archiveStream(streamId: number, ): Observable<any> {

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling archiveStream.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.delete<JsonSuccess>(`${this.basePath}/streams/${encodeURIComponent(String(stream_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Create BigBlueButton video call
     * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBigBlueButtonVideoCall(): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public createBigBlueButtonVideoCall(): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/calls/bigbluebutton/create`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete a topic
     * Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
     * @param streamId The ID of the stream to access. 
     * @param topicName The name of the topic to delete. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTopic(streamId: number, topicName: string, ): Observable<AxiosResponse<JsonSuccess>>;
    public deleteTopic(streamId: number, topicName: string, ): Observable<any> {

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling deleteTopic.');
        }

        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling deleteTopic.');
        }

        let queryParameters = {};   
        if (topicName !== undefined && topicName !== null) {
            queryParameters['topic_name'] = <any>topicName;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<JsonSuccess>(`${this.basePath}/streams/${encodeURIComponent(String(stream_id))}/delete_topic`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get stream ID
     * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
     * @param stream The name of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStreamId(stream: string, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getStreamId(stream: string, ): Observable<any> {

        if (stream === null || stream === undefined) {
            throw new Error('Required parameter stream was null or undefined when calling getStreamId.');
        }

        let queryParameters = {};   
        if (stream !== undefined && stream !== null) {
            queryParameters['stream'] = <any>stream;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/get_stream_id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get topics in a stream
     * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
     * @param streamId The ID of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStreamTopics(streamId: number, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getStreamTopics(streamId: number, ): Observable<any> {

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling getStreamTopics.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/users/me/${encodeURIComponent(String(stream_id))}/topics`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get all streams
     * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
     * @param includePublic Include all public streams. 
     * @param includeWebPublic Include all web public streams. 
     * @param includeSubscribed Include all streams that the user is subscribed to. 
     * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter. 
     * @param includeDefault Include all default streams for the user\&#39;s realm. 
     * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot\&#39;s owner is subscribed to. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStreams(includePublic?: boolean, includeWebPublic?: boolean, includeSubscribed?: boolean, includeAllActive?: boolean, includeDefault?: boolean, includeOwnerSubscribed?: boolean, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getStreams(includePublic?: boolean, includeWebPublic?: boolean, includeSubscribed?: boolean, includeAllActive?: boolean, includeDefault?: boolean, includeOwnerSubscribed?: boolean, ): Observable<any> {







        let queryParameters = {};   
        if (includePublic !== undefined && includePublic !== null) {
            queryParameters['include_public'] = <any>includePublic;
        }
        if (includeWebPublic !== undefined && includeWebPublic !== null) {
            queryParameters['include_web_public'] = <any>includeWebPublic;
        }
        if (includeSubscribed !== undefined && includeSubscribed !== null) {
            queryParameters['include_subscribed'] = <any>includeSubscribed;
        }
        if (includeAllActive !== undefined && includeAllActive !== null) {
            queryParameters['include_all_active'] = <any>includeAllActive;
        }
        if (includeDefault !== undefined && includeDefault !== null) {
            queryParameters['include_default'] = <any>includeDefault;
        }
        if (includeOwnerSubscribed !== undefined && includeOwnerSubscribed !== null) {
            queryParameters['include_owner_subscribed'] = <any>includeOwnerSubscribed;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/streams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get the subscribers of a stream
     * Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
     * @param streamId The ID of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubscribers(streamId: number, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getSubscribers(streamId: number, ): Observable<any> {

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling getSubscribers.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/streams/${encodeURIComponent(String(stream_id))}/members`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get subscription status
     * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
     * @param userId The target user\&#39;s ID. 
     * @param streamId The ID of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubscriptionStatus(userId: number, streamId: number, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getSubscriptionStatus(userId: number, streamId: number, ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getSubscriptionStatus.');
        }

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling getSubscriptionStatus.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/users/${encodeURIComponent(String(user_id))}/subscriptions/${encodeURIComponent(String(stream_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get subscribed streams
     * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
     * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubscriptions(includeSubscribers?: boolean, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public getSubscriptions(includeSubscribers?: boolean, ): Observable<any> {


        let queryParameters = {};   
        if (includeSubscribers !== undefined && includeSubscribers !== null) {
            queryParameters['include_subscribers'] = <any>includeSubscribers;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccessBase & object>(`${this.basePath}/users/me/subscriptions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Topic muting
     * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user\&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
     * @param topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
     * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
     * @param stream The name of the stream to access. 
     * @param streamId The ID of the stream to access. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public muteTopic(topic: string, op: 'add' | 'remove', stream?: string, streamId?: number, ): Observable<AxiosResponse<JsonSuccess>>;
    public muteTopic(topic: string, op: 'add' | 'remove', stream?: string, streamId?: number, ): Observable<any> {

        if (topic === null || topic === undefined) {
            throw new Error('Required parameter topic was null or undefined when calling muteTopic.');
        }

        if (op === null || op === undefined) {
            throw new Error('Required parameter op was null or undefined when calling muteTopic.');
        }



        let queryParameters = {};   
        if (stream !== undefined && stream !== null) {
            queryParameters['stream'] = <any>stream;
        }
        if (streamId !== undefined && streamId !== null) {
            queryParameters['stream_id'] = <any>streamId;
        }
        if (topic !== undefined && topic !== null) {
            queryParameters['topic'] = <any>topic;
        }
        if (op !== undefined && op !== null) {
            queryParameters['op'] = <any>op;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.patch<JsonSuccess>(`${this.basePath}/users/me/subscriptions/muted_topics`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Subscribe to a stream
     * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
     * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
     * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
     * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. 
     * @param announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream\&#39;s creation. 
     * @param inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn\&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
     * @param historyPublicToSubscribers Whether the stream\&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
     * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public subscribe(subscriptions: Array<object>, principals?: Array<string | number>, authorizationErrorsFatal?: boolean, announce?: boolean, inviteOnly?: boolean, historyPublicToSubscribers?: boolean, streamPostPolicy?: number, messageRetentionDays?: string | number, ): Observable<AxiosResponse<AddSubscriptionsResponse>>;
    public subscribe(subscriptions: Array<object>, principals?: Array<string | number>, authorizationErrorsFatal?: boolean, announce?: boolean, inviteOnly?: boolean, historyPublicToSubscribers?: boolean, streamPostPolicy?: number, messageRetentionDays?: string | number, ): Observable<any> {

        if (subscriptions === null || subscriptions === undefined) {
            throw new Error('Required parameter subscriptions was null or undefined when calling subscribe.');
        }








        let queryParameters = {};   
        if (subscriptions !== undefined && subscriptions !== null) {
            queryParameters['subscriptions'] = <any>subscriptions;
        }
        if (principals !== undefined && principals !== null) {
            queryParameters['principals'] = <any>principals;
        }
        if (authorizationErrorsFatal !== undefined && authorizationErrorsFatal !== null) {
            queryParameters['authorization_errors_fatal'] = <any>authorizationErrorsFatal;
        }
        if (announce !== undefined && announce !== null) {
            queryParameters['announce'] = <any>announce;
        }
        if (inviteOnly !== undefined && inviteOnly !== null) {
            queryParameters['invite_only'] = <any>inviteOnly;
        }
        if (historyPublicToSubscribers !== undefined && historyPublicToSubscribers !== null) {
            queryParameters['history_public_to_subscribers'] = <any>historyPublicToSubscribers;
        }
        if (streamPostPolicy !== undefined && streamPostPolicy !== null) {
            queryParameters['stream_post_policy'] = <any>streamPostPolicy;
        }
        if (messageRetentionDays !== undefined && messageRetentionDays !== null) {
            queryParameters['message_retention_days'] = <any>messageRetentionDays;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<AddSubscriptionsResponse>(`${this.basePath}/users/me/subscriptions`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Unsubscribe from a stream
     * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
     * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
     * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unsubscribe(subscriptions: Array<string>, principals?: Array<string | number>, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public unsubscribe(subscriptions: Array<string>, principals?: Array<string | number>, ): Observable<any> {

        if (subscriptions === null || subscriptions === undefined) {
            throw new Error('Required parameter subscriptions was null or undefined when calling unsubscribe.');
        }


        let queryParameters = {};   
        if (subscriptions !== undefined && subscriptions !== null) {
            queryParameters['subscriptions'] = <any>subscriptions;
        }
        if (principals !== undefined && principals !== null) {
            queryParameters['principals'] = <any>principals;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.delete<JsonSuccessBase & object>(`${this.basePath}/users/me/subscriptions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update a stream
     * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
     * @param streamId The ID of the stream to access. 
     * @param description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
     * @param newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
     * @param isPrivate Change whether the stream is a private stream. 
     * @param isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. 
     * @param streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
     * @param historyPublicToSubscribers Whether the stream\&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateStream(streamId: number, description?: string, newName?: string, isPrivate?: boolean, isAnnouncementOnly?: boolean, streamPostPolicy?: number, historyPublicToSubscribers?: boolean, messageRetentionDays?: string | number, ): Observable<AxiosResponse<JsonSuccess>>;
    public updateStream(streamId: number, description?: string, newName?: string, isPrivate?: boolean, isAnnouncementOnly?: boolean, streamPostPolicy?: number, historyPublicToSubscribers?: boolean, messageRetentionDays?: string | number, ): Observable<any> {

        if (streamId === null || streamId === undefined) {
            throw new Error('Required parameter streamId was null or undefined when calling updateStream.');
        }








        let queryParameters = {};   
        if (description !== undefined && description !== null) {
            queryParameters['description'] = <any>description;
        }
        if (newName !== undefined && newName !== null) {
            queryParameters['new_name'] = <any>newName;
        }
        if (isPrivate !== undefined && isPrivate !== null) {
            queryParameters['is_private'] = <any>isPrivate;
        }
        if (isAnnouncementOnly !== undefined && isAnnouncementOnly !== null) {
            queryParameters['is_announcement_only'] = <any>isAnnouncementOnly;
        }
        if (streamPostPolicy !== undefined && streamPostPolicy !== null) {
            queryParameters['stream_post_policy'] = <any>streamPostPolicy;
        }
        if (historyPublicToSubscribers !== undefined && historyPublicToSubscribers !== null) {
            queryParameters['history_public_to_subscribers'] = <any>historyPublicToSubscribers;
        }
        if (messageRetentionDays !== undefined && messageRetentionDays !== null) {
            queryParameters['message_retention_days'] = <any>messageRetentionDays;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.patch<JsonSuccess>(`${this.basePath}/streams/${encodeURIComponent(String(stream_id))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update subscription settings
     * This endpoint is used to update the user\&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
     * @param subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user\&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSubscriptionSettings(subscriptionData: Array<object>, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public updateSubscriptionSettings(subscriptionData: Array<object>, ): Observable<any> {

        if (subscriptionData === null || subscriptionData === undefined) {
            throw new Error('Required parameter subscriptionData was null or undefined when calling updateSubscriptionSettings.');
        }

        let queryParameters = {};   
        if (subscriptionData !== undefined && subscriptionData !== null) {
            queryParameters['subscription_data'] = <any>subscriptionData;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<JsonSuccessBase & object>(`${this.basePath}/users/me/subscriptions/properties`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Update subscriptions
     * Update which streams you are are subscribed to. 
     * @param _delete A list of stream names to unsubscribe from. 
     * @param add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSubscriptions(_delete?: Array<string>, add?: Array<object>, ): Observable<AxiosResponse<JsonSuccessBase & object>>;
    public updateSubscriptions(_delete?: Array<string>, add?: Array<object>, ): Observable<any> {



        let queryParameters = {};   
        if (_delete !== undefined && _delete !== null) {
            queryParameters['delete'] = <any>_delete;
        }
        if (add !== undefined && add !== null) {
            queryParameters['add'] = <any>add;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.patch<JsonSuccessBase & object>(`${this.basePath}/users/me/subscriptions`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
