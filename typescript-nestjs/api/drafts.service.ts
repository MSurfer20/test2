/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { HttpService, Inject, Injectable, Optional } from '@nestjs/common';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { CodedError } from '../model/codedError';
import { Draft } from '../model/draft';
import { JsonError } from '../model/jsonError';
import { JsonSuccess } from '../model/jsonSuccess';
import { Configuration } from '../configuration';


@Injectable()
export class DraftsService {

    protected basePath = 'https://example.zulipchat.com/api/v1';
    public defaultHeaders = new Map()
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Create drafts
     * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
     * @param drafts A JSON-encoded list of containing new draft objects. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDrafts(drafts?: Array<Draft>, ): Observable<AxiosResponse<JsonSuccess & object>>;
    public createDrafts(drafts?: Array<Draft>, ): Observable<any> {


        let queryParameters = {};   
        if (drafts !== undefined && drafts !== null) {
            queryParameters['drafts'] = <any>drafts;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<JsonSuccess & object>(`${this.basePath}/drafts`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Delete a draft
     * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     * @param draftId The ID of the draft you want to delete. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDraft(draftId: number, ): Observable<AxiosResponse<JsonSuccess>>;
    public deleteDraft(draftId: number, ): Observable<any> {

        if (draftId === null || draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling deleteDraft.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.delete<JsonSuccess>(`${this.basePath}/drafts/${encodeURIComponent(String(draft_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Edit a draft
     * Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     * @param draftId The ID of the draft to be edited. 
     * @param draft A JSON-encoded object containing a replacement draft object for this ID. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editDraft(draftId: number, draft: Draft, ): Observable<AxiosResponse<JsonSuccess>>;
    public editDraft(draftId: number, draft: Draft, ): Observable<any> {

        if (draftId === null || draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling editDraft.');
        }

        if (draft === null || draft === undefined) {
            throw new Error('Required parameter draft was null or undefined when calling editDraft.');
        }

        let queryParameters = {};   
        if (draft !== undefined && draft !== null) {
            queryParameters['draft'] = <any>draft;
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.patch<JsonSuccess>(`${this.basePath}/drafts/${encodeURIComponent(String(draft_id))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * Get drafts
     * Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDrafts(): Observable<AxiosResponse<JsonSuccess & object>>;
    public getDrafts(): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<JsonSuccess & object>(`${this.basePath}/drafts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
