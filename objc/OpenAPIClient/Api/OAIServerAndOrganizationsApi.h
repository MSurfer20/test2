#import <Foundation/Foundation.h>
#import "NSObject*.h"
#import "OAIJsonSuccess.h"
#import "OAIJsonSuccessBase.h"
#import "OAIApi.h"

/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIServerAndOrganizationsApi: NSObject <OAIApi>

extern NSString* kOAIServerAndOrganizationsApiErrorDomain;
extern NSInteger kOAIServerAndOrganizationsApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add a code playground
/// Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
///
/// @param name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
/// @param pygmentsLanguage The name of the Pygments language lexer for that programming language. 
/// @param urlPrefix The url prefix for the playground. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) addCodePlaygroundWithName: (NSString*) name
    pygmentsLanguage: (NSString*) pygmentsLanguage
    urlPrefix: (NSString*) urlPrefix
    completionHandler: (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Add a linkifier
/// Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 
///
/// @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
/// @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) addLinkifierWithPattern: (NSString*) pattern
    urlFormatString: (NSString*) urlFormatString
    completionHandler: (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Create a custom profile field
/// [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.  `POST {{ api_url }}/v1/realm/profile_fields` 
///
/// @param fieldType The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
/// @param name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional)
/// @param hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional)
/// @param fieldData Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional)
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) createCustomProfileFieldWithFieldType: (NSNumber*) fieldType
    name: (NSString*) name
    hint: (NSString*) hint
    fieldData: (NSObject*) fieldData
    completionHandler: (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Get all custom emoji
/// Get all the custom emoji in the user's organization.  `GET {{ api_url }}/v1/realm/emoji` 
///
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) getCustomEmojiWithCompletionHandler: 
    (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Get all custom profile fields
/// Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user's organization.  `GET {{ api_url }}/v1/realm/profile_fields` 
///
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) getCustomProfileFieldsWithCompletionHandler: 
    (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Get linkifiers
/// List all of an organization's configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 
///
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) getLinkifiersWithCompletionHandler: 
    (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Get server settings
/// Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it's running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
///
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccessBase*
-(NSURLSessionTask*) getServerSettingsWithCompletionHandler: 
    (void (^)(OAIJsonSuccessBase* output, NSError* error)) handler;


/// Remove a code playground
/// Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 
///
/// @param playgroundId The ID of the playground that you want to remove. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccess*
-(NSURLSessionTask*) removeCodePlaygroundWithPlaygroundId: (NSNumber*) playgroundId
    completionHandler: (void (^)(OAIJsonSuccess* output, NSError* error)) handler;


/// Remove a linkifier
/// Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 
///
/// @param filterId The ID of the linkifier that you want to remove. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccess*
-(NSURLSessionTask*) removeLinkifierWithFilterId: (NSNumber*) filterId
    completionHandler: (void (^)(OAIJsonSuccess* output, NSError* error)) handler;


/// Reorder custom profile fields
/// Reorder the custom profile fields in the user's organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
///
/// @param order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccess*
-(NSURLSessionTask*) reorderCustomProfileFieldsWithOrder: (NSArray<NSNumber*>*) order
    completionHandler: (void (^)(OAIJsonSuccess* output, NSError* error)) handler;


/// Update a linkifier
/// Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 
///
/// @param filterId The ID of the linkifier that you want to update. 
/// @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
/// @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccess*
-(NSURLSessionTask*) updateLinkifierWithFilterId: (NSNumber*) filterId
    pattern: (NSString*) pattern
    urlFormatString: (NSString*) urlFormatString
    completionHandler: (void (^)(OAIJsonSuccess* output, NSError* error)) handler;


/// Upload custom emoji
/// This endpoint is used to upload a custom emoji for use in the user's organization.  Access to this endpoint depends on the [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 
///
/// @param emojiName The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
/// @param filename  (optional)
/// 
///  code:200 message:"Success."
///
/// @return OAIJsonSuccess*
-(NSURLSessionTask*) uploadCustomEmojiWithEmojiName: (NSString*) emojiName
    filename: (NSURL*) filename
    completionHandler: (void (^)(OAIJsonSuccess* output, NSError* error)) handler;



@end
