# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from app.openapi_server.models.json_response_base import JsonResponseBase  # noqa: F401,E501
from app.openapi_server.models.json_success_base_all_of import JsonSuccessBaseAllOf  # noqa: F401,E501
from openapi_server import util


class JsonSuccessBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, result: str=None, msg: str=None):  # noqa: E501
        """JsonSuccessBase - a model defined in Swagger

        :param result: The result of this JsonSuccessBase.  # noqa: E501
        :type result: str
        :param msg: The msg of this JsonSuccessBase.  # noqa: E501
        :type msg: str
        """
        self.swagger_types = {
            'result': str,
            'msg': str
        }

        self.attribute_map = {
            'result': 'result',
            'msg': 'msg'
        }

        self._result = result
        self._msg = msg

    @classmethod
    def from_dict(cls, dikt) -> 'JsonSuccessBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JsonSuccessBase of this JsonSuccessBase.  # noqa: E501
        :rtype: JsonSuccessBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> str:
        """Gets the result of this JsonSuccessBase.


        :return: The result of this JsonSuccessBase.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this JsonSuccessBase.


        :param result: The result of this JsonSuccessBase.
        :type result: str
        """
        allowed_values = ["success"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def msg(self) -> str:
        """Gets the msg of this JsonSuccessBase.


        :return: The msg of this JsonSuccessBase.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg: str):
        """Sets the msg of this JsonSuccessBase.


        :param msg: The msg of this JsonSuccessBase.
        :type msg: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")  # noqa: E501

        self._msg = msg
