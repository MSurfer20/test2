# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from openapi_server import util


class Presence(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, client: str=None, status: str=None, timestamp: int=None, pushable: bool=None):  # noqa: E501
        """Presence - a model defined in Swagger

        :param client: The client of this Presence.  # noqa: E501
        :type client: str
        :param status: The status of this Presence.  # noqa: E501
        :type status: str
        :param timestamp: The timestamp of this Presence.  # noqa: E501
        :type timestamp: int
        :param pushable: The pushable of this Presence.  # noqa: E501
        :type pushable: bool
        """
        self.swagger_types = {
            'client': str,
            'status': str,
            'timestamp': int,
            'pushable': bool
        }

        self.attribute_map = {
            'client': 'client',
            'status': 'status',
            'timestamp': 'timestamp',
            'pushable': 'pushable'
        }

        self._client = client
        self._status = status
        self._timestamp = timestamp
        self._pushable = pushable

    @classmethod
    def from_dict(cls, dikt) -> 'Presence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Presence of this Presence.  # noqa: E501
        :rtype: Presence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self) -> str:
        """Gets the client of this Presence.

        The client's platform name.   # noqa: E501

        :return: The client of this Presence.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client: str):
        """Sets the client of this Presence.

        The client's platform name.   # noqa: E501

        :param client: The client of this Presence.
        :type client: str
        """

        self._client = client

    @property
    def status(self) -> str:
        """Gets the status of this Presence.

        The status of the user on this client. It is either `idle` or `active`.   # noqa: E501

        :return: The status of this Presence.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Presence.

        The status of the user on this client. It is either `idle` or `active`.   # noqa: E501

        :param status: The status of this Presence.
        :type status: str
        """
        allowed_values = ["idle", "active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this Presence.

        The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.   # noqa: E501

        :return: The timestamp of this Presence.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this Presence.

        The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.   # noqa: E501

        :param timestamp: The timestamp of this Presence.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def pushable(self) -> bool:
        """Gets the pushable of this Presence.

        Whether the client is capable of showing mobile/push notifications to the user.   # noqa: E501

        :return: The pushable of this Presence.
        :rtype: bool
        """
        return self._pushable

    @pushable.setter
    def pushable(self, pushable: bool):
        """Sets the pushable of this Presence.

        Whether the client is capable of showing mobile/push notifications to the user.   # noqa: E501

        :param pushable: The pushable of this Presence.
        :type pushable: bool
        """

        self._pushable = pushable
