# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from openapi_server import util


class EmojiReactionAllOf(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, emoji_code: object=None, emoji_name: object=None, reaction_type: object=None, user_id: object=None, user: object=None):  # noqa: E501
        """EmojiReactionAllOf - a model defined in Swagger

        :param emoji_code: The emoji_code of this EmojiReactionAllOf.  # noqa: E501
        :type emoji_code: object
        :param emoji_name: The emoji_name of this EmojiReactionAllOf.  # noqa: E501
        :type emoji_name: object
        :param reaction_type: The reaction_type of this EmojiReactionAllOf.  # noqa: E501
        :type reaction_type: object
        :param user_id: The user_id of this EmojiReactionAllOf.  # noqa: E501
        :type user_id: object
        :param user: The user of this EmojiReactionAllOf.  # noqa: E501
        :type user: object
        """
        self.swagger_types = {
            'emoji_code': object,
            'emoji_name': object,
            'reaction_type': object,
            'user_id': object,
            'user': object
        }

        self.attribute_map = {
            'emoji_code': 'emoji_code',
            'emoji_name': 'emoji_name',
            'reaction_type': 'reaction_type',
            'user_id': 'user_id',
            'user': 'user'
        }

        self._emoji_code = emoji_code
        self._emoji_name = emoji_name
        self._reaction_type = reaction_type
        self._user_id = user_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'EmojiReactionAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmojiReaction_allOf of this EmojiReactionAllOf.  # noqa: E501
        :rtype: EmojiReactionAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji_code(self) -> object:
        """Gets the emoji_code of this EmojiReactionAllOf.


        :return: The emoji_code of this EmojiReactionAllOf.
        :rtype: object
        """
        return self._emoji_code

    @emoji_code.setter
    def emoji_code(self, emoji_code: object):
        """Sets the emoji_code of this EmojiReactionAllOf.


        :param emoji_code: The emoji_code of this EmojiReactionAllOf.
        :type emoji_code: object
        """

        self._emoji_code = emoji_code

    @property
    def emoji_name(self) -> object:
        """Gets the emoji_name of this EmojiReactionAllOf.


        :return: The emoji_name of this EmojiReactionAllOf.
        :rtype: object
        """
        return self._emoji_name

    @emoji_name.setter
    def emoji_name(self, emoji_name: object):
        """Sets the emoji_name of this EmojiReactionAllOf.


        :param emoji_name: The emoji_name of this EmojiReactionAllOf.
        :type emoji_name: object
        """

        self._emoji_name = emoji_name

    @property
    def reaction_type(self) -> object:
        """Gets the reaction_type of this EmojiReactionAllOf.


        :return: The reaction_type of this EmojiReactionAllOf.
        :rtype: object
        """
        return self._reaction_type

    @reaction_type.setter
    def reaction_type(self, reaction_type: object):
        """Sets the reaction_type of this EmojiReactionAllOf.


        :param reaction_type: The reaction_type of this EmojiReactionAllOf.
        :type reaction_type: object
        """

        self._reaction_type = reaction_type

    @property
    def user_id(self) -> object:
        """Gets the user_id of this EmojiReactionAllOf.


        :return: The user_id of this EmojiReactionAllOf.
        :rtype: object
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: object):
        """Sets the user_id of this EmojiReactionAllOf.


        :param user_id: The user_id of this EmojiReactionAllOf.
        :type user_id: object
        """

        self._user_id = user_id

    @property
    def user(self) -> object:
        """Gets the user of this EmojiReactionAllOf.


        :return: The user of this EmojiReactionAllOf.
        :rtype: object
        """
        return self._user

    @user.setter
    def user(self, user: object):
        """Sets the user of this EmojiReactionAllOf.


        :param user: The user of this EmojiReactionAllOf.
        :type user: object
        """

        self._user = user
