# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from openapi_server import util


class EmojiReactionBaseUser(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, email: str=None, full_name: str=None, is_mirror_dummy: bool=None):  # noqa: E501
        """EmojiReactionBaseUser - a model defined in Swagger

        :param id: The id of this EmojiReactionBaseUser.  # noqa: E501
        :type id: int
        :param email: The email of this EmojiReactionBaseUser.  # noqa: E501
        :type email: str
        :param full_name: The full_name of this EmojiReactionBaseUser.  # noqa: E501
        :type full_name: str
        :param is_mirror_dummy: The is_mirror_dummy of this EmojiReactionBaseUser.  # noqa: E501
        :type is_mirror_dummy: bool
        """
        self.swagger_types = {
            'id': int,
            'email': str,
            'full_name': str,
            'is_mirror_dummy': bool
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'full_name': 'full_name',
            'is_mirror_dummy': 'is_mirror_dummy'
        }

        self._id = id
        self._email = email
        self._full_name = full_name
        self._is_mirror_dummy = is_mirror_dummy

    @classmethod
    def from_dict(cls, dikt) -> 'EmojiReactionBaseUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmojiReactionBase_user of this EmojiReactionBaseUser.  # noqa: E501
        :rtype: EmojiReactionBaseUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this EmojiReactionBaseUser.

        ID of the user.   # noqa: E501

        :return: The id of this EmojiReactionBaseUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this EmojiReactionBaseUser.

        ID of the user.   # noqa: E501

        :param id: The id of this EmojiReactionBaseUser.
        :type id: int
        """

        self._id = id

    @property
    def email(self) -> str:
        """Gets the email of this EmojiReactionBaseUser.

        Email of the user.   # noqa: E501

        :return: The email of this EmojiReactionBaseUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this EmojiReactionBaseUser.

        Email of the user.   # noqa: E501

        :param email: The email of this EmojiReactionBaseUser.
        :type email: str
        """

        self._email = email

    @property
    def full_name(self) -> str:
        """Gets the full_name of this EmojiReactionBaseUser.

        Full name of the user.   # noqa: E501

        :return: The full_name of this EmojiReactionBaseUser.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this EmojiReactionBaseUser.

        Full name of the user.   # noqa: E501

        :param full_name: The full_name of this EmojiReactionBaseUser.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def is_mirror_dummy(self) -> bool:
        """Gets the is_mirror_dummy of this EmojiReactionBaseUser.

        Whether the user is a mirror dummy.   # noqa: E501

        :return: The is_mirror_dummy of this EmojiReactionBaseUser.
        :rtype: bool
        """
        return self._is_mirror_dummy

    @is_mirror_dummy.setter
    def is_mirror_dummy(self, is_mirror_dummy: bool):
        """Sets the is_mirror_dummy of this EmojiReactionBaseUser.

        Whether the user is a mirror dummy.   # noqa: E501

        :param is_mirror_dummy: The is_mirror_dummy of this EmojiReactionBaseUser.
        :type is_mirror_dummy: bool
        """

        self._is_mirror_dummy = is_mirror_dummy
