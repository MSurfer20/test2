{-
   Zulip REST API
   Powerful open source group chat 

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AddSubscriptionsResponse
    , ApiKeyResponse
    , Attachments
    , AttachmentsMessages
    , BadEventQueueIdError
    , BasicBot
    , BasicBotBase
    , BasicStream
    , BasicStreamBase
    , Bot
    , CodedError
    , CodedErrorBase
    , CustomProfileField
    , DefaultStreamGroup
    , Draft, DraftType(..), draftTypeVariants
    , EmojiBase
    , EmojiReaction
    , EmojiReactionBase
    , EmojiReactionBaseAllOfUser
    , EventIdSchema
    , EventTypeSchema
    , GetMessages
    , Hotspot
    , InlineResponse200
    , InvalidApiKeyError
    , InvalidMessageError
    , JsonError
    , JsonErrorBase, JsonErrorBaseResult(..), jsonErrorBaseResultVariants
    , JsonResponseBase
    , JsonSuccess
    , JsonSuccessBase, JsonSuccessBaseResult(..), jsonSuccessBaseResultVariants
    , Messages
    , MessagesBase
    , MessagesBaseTopicLinks
    , MissingArgumentError
    , NonExistingStreamError
    , Presence, PresenceStatus(..), presenceStatusVariants
    , RateLimitedError
    , RealmDeactivatedError
    , RealmDomain
    , RealmEmoji
    , RealmExport
    , RealmPlayground
    , Subscriptions, SubscriptionsRole(..), subscriptionsRoleVariants
    , SuccessDescription
    , User
    , UserBase, UserBaseRole(..), userBaseRoleVariants
    , UserDeactivatedError
    , UserGroup
    , UserNotAuthorizedError
    , encodeAddSubscriptionsResponse
    , encodeApiKeyResponse
    , encodeAttachments
    , encodeAttachmentsMessages
    , encodeBadEventQueueIdError
    , encodeBasicBot
    , encodeBasicBotBase
    , encodeBasicStream
    , encodeBasicStreamBase
    , encodeBot
    , encodeCodedError
    , encodeCodedErrorBase
    , encodeCustomProfileField
    , encodeDefaultStreamGroup
    , encodeDraft
    , encodeEmojiBase
    , encodeEmojiReaction
    , encodeEmojiReactionBase
    , encodeEmojiReactionBaseAllOfUser
    , encodeEventIdSchema
    , encodeEventTypeSchema
    , encodeGetMessages
    , encodeHotspot
    , encodeInlineResponse200
    , encodeInvalidApiKeyError
    , encodeInvalidMessageError
    , encodeJsonError
    , encodeJsonErrorBase
    , encodeJsonResponseBase
    , encodeJsonSuccess
    , encodeJsonSuccessBase
    , encodeMessages
    , encodeMessagesBase
    , encodeMessagesBaseTopicLinks
    , encodeMissingArgumentError
    , encodeNonExistingStreamError
    , encodePresence
    , encodeRateLimitedError
    , encodeRealmDeactivatedError
    , encodeRealmDomain
    , encodeRealmEmoji
    , encodeRealmExport
    , encodeRealmPlayground
    , encodeSubscriptions
    , encodeSuccessDescription
    , encodeUser
    , encodeUserBase
    , encodeUserDeactivatedError
    , encodeUserGroup
    , encodeUserNotAuthorizedError
    , addSubscriptionsResponseDecoder
    , apiKeyResponseDecoder
    , attachmentsDecoder
    , attachmentsMessagesDecoder
    , badEventQueueIdErrorDecoder
    , basicBotDecoder
    , basicBotBaseDecoder
    , basicStreamDecoder
    , basicStreamBaseDecoder
    , botDecoder
    , codedErrorDecoder
    , codedErrorBaseDecoder
    , customProfileFieldDecoder
    , defaultStreamGroupDecoder
    , draftDecoder
    , emojiBaseDecoder
    , emojiReactionDecoder
    , emojiReactionBaseDecoder
    , emojiReactionBaseAllOfUserDecoder
    , eventIdSchemaDecoder
    , eventTypeSchemaDecoder
    , getMessagesDecoder
    , hotspotDecoder
    , inlineResponse200Decoder
    , invalidApiKeyErrorDecoder
    , invalidMessageErrorDecoder
    , jsonErrorDecoder
    , jsonErrorBaseDecoder
    , jsonResponseBaseDecoder
    , jsonSuccessDecoder
    , jsonSuccessBaseDecoder
    , messagesDecoder
    , messagesBaseDecoder
    , messagesBaseTopicLinksDecoder
    , missingArgumentErrorDecoder
    , nonExistingStreamErrorDecoder
    , presenceDecoder
    , rateLimitedErrorDecoder
    , realmDeactivatedErrorDecoder
    , realmDomainDecoder
    , realmEmojiDecoder
    , realmExportDecoder
    , realmPlaygroundDecoder
    , subscriptionsDecoder
    , successDescriptionDecoder
    , userDecoder
    , userBaseDecoder
    , userDeactivatedErrorDecoder
    , userGroupDecoder
    , userNotAuthorizedErrorDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias AddSubscriptionsResponse =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , subscribed : Maybe (Dict.Dict String (List (String)))
    , alreadySubscribed : Maybe (Dict.Dict String (List (String)))
    , unauthorized : Maybe (List (String))
    }


type alias ApiKeyResponse =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , apiKey : String
    , email : String
    }


{-| Dictionary containing details of a file uploaded by a user. 
-}
type alias Attachments =
    { id : Maybe Int
    , name : Maybe String
    , pathId : Maybe String
    , size : Maybe Int
    , createTime : Maybe Int
    , messages : Maybe (List (AttachmentsMessages))
    }


type alias AttachmentsMessages =
    { dateSent : Maybe Int
    , id : Maybe Int
    }


type alias BadEventQueueIdError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    , queueId : Maybe String
    }


type alias BasicBot =
    { userId : Maybe AnyType
    , fullName : Maybe AnyType
    , apiKey : Maybe AnyType
    , defaultSendingStream : Maybe AnyType
    , defaultEventsRegisterStream : Maybe AnyType
    , defaultAllPublicStreams : Maybe AnyType
    , avatarUrl : Maybe AnyType
    , ownerId : Maybe AnyType
    , services : Maybe AnyType
    }


type alias BasicBotBase =
    { userId : Maybe Int
    , fullName : Maybe String
    , apiKey : Maybe String
    , defaultSendingStream : Maybe String
    , defaultEventsRegisterStream : Maybe String
    , defaultAllPublicStreams : Maybe Bool
    , avatarUrl : Maybe String
    , ownerId : Maybe Int
    , services : Maybe (List (OneOf&lt;object,object&gt;))
    }


type alias BasicStream =
    { streamId : Maybe AnyType
    , name : Maybe AnyType
    , description : Maybe AnyType
    , dateCreated : Maybe AnyType
    , inviteOnly : Maybe AnyType
    , renderedDescription : Maybe AnyType
    , isWebPublic : Maybe AnyType
    , streamPostPolicy : Maybe AnyType
    , messageRetentionDays : Maybe AnyType
    , historyPublicToSubscribers : Maybe AnyType
    , firstMessageId : Maybe AnyType
    , isAnnouncementOnly : Maybe AnyType
    }


{-| Object containing basic details about the stream. 
-}
type alias BasicStreamBase =
    { streamId : Maybe Int
    , name : Maybe String
    , description : Maybe String
    , dateCreated : Maybe Int
    , inviteOnly : Maybe Bool
    , renderedDescription : Maybe String
    , isWebPublic : Maybe Bool
    , streamPostPolicy : Maybe Int
    , messageRetentionDays : Maybe Int
    , historyPublicToSubscribers : Maybe Bool
    , firstMessageId : Maybe Int
    , isAnnouncementOnly : Maybe Bool
    }


type alias Bot =
    { userId : Maybe AnyType
    , fullName : Maybe AnyType
    , apiKey : Maybe AnyType
    , defaultSendingStream : Maybe AnyType
    , defaultEventsRegisterStream : Maybe AnyType
    , defaultAllPublicStreams : Maybe AnyType
    , avatarUrl : Maybe AnyType
    , ownerId : Maybe AnyType
    , services : Maybe AnyType
    , email : Maybe String
    , botType : Maybe Int
    , isActive : Maybe Bool
    }


type alias CodedError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    }


type alias CodedErrorBase =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe String
    }


{-| Dictionary containing the details of a custom profile field configured for this organization. 
-}
type alias CustomProfileField =
    { id : Maybe Int
    , type_ : Maybe Int
    , order : Maybe Int
    , name : Maybe String
    , hint : Maybe String
    , fieldData : Maybe String
    }


{-| Dictionary containing details of a default stream group. 
-}
type alias DefaultStreamGroup =
    { name : Maybe String
    , description : Maybe String
    , id : Maybe Int
    , streams : Maybe (List (BasicStream))
    }


{-| A dictionary for representing a message draft. 
-}
type alias Draft =
    { id : Maybe Int
    , type_ : DraftType
    , to : List (Int)
    , topic : String
    , content : String
    , timestamp : Maybe Float
    }


type DraftType
    = DraftTypeUnknownEnumVariableName
    | DraftTypeStream
    | DraftTypePrivate


draftTypeVariants : List DraftType
draftTypeVariants =
    [ DraftTypeUnknownEnumVariableName
    , DraftTypeStream
    , DraftTypePrivate
    ]


type alias EmojiBase =
    { emojiCode : Maybe String
    , emojiName : Maybe String
    , reactionType : Maybe String
    }


type alias EmojiReaction =
    { emojiCode : Maybe AnyType
    , emojiName : Maybe AnyType
    , reactionType : Maybe AnyType
    , userId : Maybe AnyType
    , user : Maybe AnyType
    }


type alias EmojiReactionBase =
    { emojiCode : Maybe String
    , emojiName : Maybe String
    , reactionType : Maybe String
    , userId : Maybe Int
    , user : Maybe EmojiReactionBaseAllOfUser
    }


{-| Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the `id` field.  **Note**: In the [events API](/api/get-events), this `user` dictionary confusing had the user ID in a field called `user_id` instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the `user_id` field. 
-}
type alias EmojiReactionBaseAllOfUser =
    { id : Maybe Int
    , email : Maybe String
    , fullName : Maybe String
    , isMirrorDummy : Maybe Bool
    }


{-| The ID of the event.  Events appear in increasing order but may not be consecutive. 
-}
type alias EventIdSchema =
    { }


{-| The event's type, relevant both for client-side dispatch and server-side filtering by event type in [POST /register](/api/register-queue). 
-}
type alias EventTypeSchema =
    { }


type alias GetMessages =
    { avatarUrl : Maybe AnyType
    , client : Maybe AnyType
    , content : Maybe AnyType
    , contentType : Maybe AnyType
    , displayRecipient : Maybe AnyType
    , id : Maybe AnyType
    , isMeMessage : Maybe AnyType
    , reactions : Maybe AnyType
    , recipientId : Maybe AnyType
    , senderEmail : Maybe AnyType
    , senderFullName : Maybe AnyType
    , senderId : Maybe AnyType
    , senderRealmStr : Maybe AnyType
    , streamId : Maybe AnyType
    , subject : Maybe AnyType
    , topicLinks : Maybe AnyType
    , submessages : Maybe AnyType
    , timestamp : Maybe AnyType
    , type_ : Maybe AnyType
    , flags : Maybe (List (String))
    , lastEditTimestamp : Maybe Int
    , matchContent : Maybe String
    , matchSubject : Maybe String
    }


{-| Dictionary containing details of a single hotspot. 
-}
type alias Hotspot =
    { delay : Maybe Float
    , name : Maybe String
    , title : Maybe String
    , description : Maybe String
    }


{-| This is an example of the JSON payload that the Zulip server will `POST` to your server 
-}
type alias InlineResponse200 =
    { botEmail : Maybe String
    , botFullName : Maybe String
    , data : Maybe String
    , trigger : Maybe String
    , token : Maybe String
    , message : Maybe MessagesBase
    }


type alias InvalidApiKeyError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    }


type alias InvalidMessageError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , rawContent : Maybe String
    }


type alias JsonError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    }


type alias JsonErrorBase =
    { result : JsonErrorBaseResult_
    , msg : String
    }


type JsonErrorBaseResult_
    = JsonErrorBaseResult_Error


jsonErrorBaseResultVariants : List JsonErrorBaseResult_
jsonErrorBaseResultVariants =
    [ JsonErrorBaseResult_Error
    ]


type alias JsonResponseBase =
    { result : Maybe String
    }


type alias JsonSuccess =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    }


type alias JsonSuccessBase =
    { result : JsonSuccessBaseResult_
    , msg : String
    }


type JsonSuccessBaseResult_
    = JsonSuccessBaseResult_Success


jsonSuccessBaseResultVariants : List JsonSuccessBaseResult_
jsonSuccessBaseResultVariants =
    [ JsonSuccessBaseResult_Success
    ]


type alias Messages =
    { avatarUrl : Maybe AnyType
    , client : Maybe AnyType
    , content : Maybe AnyType
    , contentType : Maybe AnyType
    , displayRecipient : Maybe AnyType
    , id : Maybe AnyType
    , isMeMessage : Maybe AnyType
    , reactions : Maybe AnyType
    , recipientId : Maybe AnyType
    , senderEmail : Maybe AnyType
    , senderFullName : Maybe AnyType
    , senderId : Maybe AnyType
    , senderRealmStr : Maybe AnyType
    , streamId : Maybe AnyType
    , subject : Maybe AnyType
    , topicLinks : Maybe AnyType
    , submessages : Maybe AnyType
    , timestamp : Maybe AnyType
    , type_ : Maybe AnyType
    }


{-| Object containing details of the message. 
-}
type alias MessagesBase =
    { avatarUrl : Maybe String
    , client : Maybe String
    , content : Maybe String
    , contentType : Maybe String
    , displayRecipient : Maybe OneOf&lt;string,array&gt;
    , id : Maybe Int
    , isMeMessage : Maybe Bool
    , reactions : Maybe (List (EmojiReaction))
    , recipientId : Maybe Int
    , senderEmail : Maybe String
    , senderFullName : Maybe String
    , senderId : Maybe Int
    , senderRealmStr : Maybe String
    , streamId : Maybe Int
    , subject : Maybe String
    , topicLinks : Maybe (List (MessagesBaseTopicLinks))
    , submessages : Maybe (List (String))
    , timestamp : Maybe Int
    , type_ : Maybe String
    }


type alias MessagesBaseTopicLinks =
    { text : Maybe String
    , url : Maybe String
    }


type alias MissingArgumentError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    , varName : Maybe String
    }


type alias NonExistingStreamError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    , stream : Maybe String
    }


{-| `{client_name}`: Object containing the details of the user's presence on a particular platform with the client's platform name being the object key. 
-}
type alias Presence =
    { client : Maybe String
    , status : Maybe PresenceStatus
    , timestamp : Maybe Int
    , pushable : Maybe Bool
    }


type PresenceStatus
    = PresenceStatusIdle
    | PresenceStatusActive


presenceStatusVariants : List PresenceStatus
presenceStatusVariants =
    [ PresenceStatusIdle
    , PresenceStatusActive
    ]


type alias RateLimitedError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    }


type alias RealmDeactivatedError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    }


{-| Object containing details of the newly added domain. 
-}
type alias RealmDomain =
    { domain : Maybe String
    , allowSubdomains : Maybe Bool
    }


{-| `{emoji_id}`: Object containing details about the emoji with  the specified ID. It has the following properties: 
-}
type alias RealmEmoji =
    { id : Maybe String
    , name : Maybe String
    , sourceUrl : Maybe String
    , deactivated : Maybe Bool
    , authorId : Maybe Int
    }


{-| Object containing details about a realm export. 
-}
type alias RealmExport =
    { id : Maybe Int
    , actingUserId : Maybe Int
    , exportTime : Maybe Float
    , deletedTimestamp : Maybe Float
    , failedTimestamp : Maybe Float
    , exportUrl : Maybe String
    , pending : Maybe Bool
    }


{-| Object containing details about a realm playground. 
-}
type alias RealmPlayground =
    { id : Maybe Int
    , name : Maybe String
    , pygmentsLanguage : Maybe String
    , urlPrefix : Maybe String
    }


type alias Subscriptions =
    { streamId : Maybe Int
    , name : Maybe String
    , description : Maybe String
    , renderedDescription : Maybe String
    , dateCreated : Maybe Int
    , inviteOnly : Maybe Bool
    , subscribers : Maybe (List (Int))
    , desktopNotifications : Maybe Bool
    , emailNotifications : Maybe Bool
    , wildcardMentionsNotify : Maybe Bool
    , pushNotifications : Maybe Bool
    , audibleNotifications : Maybe Bool
    , pinToTop : Maybe Bool
    , emailAddress : Maybe String
    , isMuted : Maybe Bool
    , inHomeView : Maybe Bool
    , isAnnouncementOnly : Maybe Bool
    , isWebPublic : Maybe Bool
    , role : Maybe SubscriptionsRole
    , color : Maybe String
    , streamPostPolicy : Maybe Int
    , messageRetentionDays : Maybe Int
    , historyPublicToSubscribers : Maybe Bool
    , firstMessageId : Maybe Int
    , streamWeeklyTraffic : Maybe Int
    }


type SubscriptionsRole
    = SubscriptionsRole20
    | SubscriptionsRole50


subscriptionsRoleVariants : List SubscriptionsRole
subscriptionsRoleVariants =
    [ SubscriptionsRole20
    , SubscriptionsRole50
    ]


{-| A typical successful JSON response may look like
-}
type alias SuccessDescription =
    { }


type alias User =
    { email : Maybe AnyType
    , isBot : Maybe AnyType
    , avatarUrl : Maybe AnyType
    , avatarVersion : Maybe AnyType
    , fullName : Maybe AnyType
    , isAdmin : Maybe AnyType
    , isOwner : Maybe AnyType
    , isBillingAdmin : Maybe AnyType
    , role : Maybe AnyType
    , botType : Maybe AnyType
    , userId : Maybe AnyType
    , botOwnerId : Maybe AnyType
    , isActive : Maybe AnyType
    , isGuest : Maybe AnyType
    , timezone : Maybe AnyType
    , dateJoined : Maybe AnyType
    , deliveryEmail : Maybe AnyType
    , profileData : Maybe AnyType
    }


{-| A dictionary containing basic data on a given Zulip user. 
-}
type alias UserBase =
    { email : Maybe String
    , isBot : Maybe Bool
    , avatarUrl : Maybe String
    , avatarVersion : Maybe Int
    , fullName : Maybe String
    , isAdmin : Maybe Bool
    , isOwner : Maybe Bool
    , isBillingAdmin : Maybe Bool
    , role : Maybe UserBaseRole
    , botType : Maybe Int
    , userId : Maybe Int
    , botOwnerId : Maybe Int
    , isActive : Maybe Bool
    , isGuest : Maybe Bool
    , timezone : Maybe String
    , dateJoined : Maybe String
    , deliveryEmail : Maybe String
    , profileData : Maybe (Dict.Dict String (Object))
    }


type UserBaseRole
    = UserBaseRole100
    | UserBaseRole200
    | UserBaseRole300
    | UserBaseRole400
    | UserBaseRole600


userBaseRoleVariants : List UserBaseRole
userBaseRoleVariants =
    [ UserBaseRole100
    , UserBaseRole200
    , UserBaseRole300
    , UserBaseRole400
    , UserBaseRole600
    ]


type alias UserDeactivatedError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    }


{-| Object containing the user group's attributes. 
-}
type alias UserGroup =
    { name : Maybe String
    , description : Maybe String
    , members : Maybe (List (Int))
    , id : Maybe Int
    }


type alias UserNotAuthorizedError =
    { result : Maybe AnyType
    , msg : Maybe AnyType
    , code : Maybe AnyType
    }


-- ENCODER


encodeAddSubscriptionsResponse : AddSubscriptionsResponse -> Json.Encode.Value
encodeAddSubscriptionsResponse =
    encodeObject << encodeAddSubscriptionsResponsePairs


encodeAddSubscriptionsResponseWithTag : ( String, String ) -> AddSubscriptionsResponse -> Json.Encode.Value
encodeAddSubscriptionsResponseWithTag (tagField, tag) model =
    encodeObject (encodeAddSubscriptionsResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAddSubscriptionsResponsePairs : AddSubscriptionsResponse -> List EncodedField
encodeAddSubscriptionsResponsePairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncode "subscribed" (Json.Encode.dict identity (Json.Encode.list Json.Encode.string)) model.subscribed
            , maybeEncode "already_subscribed" (Json.Encode.dict identity (Json.Encode.list Json.Encode.string)) model.alreadySubscribed
            , maybeEncode "unauthorized" (Json.Encode.list Json.Encode.string) model.unauthorized
            ]
    in
    pairs


encodeApiKeyResponse : ApiKeyResponse -> Json.Encode.Value
encodeApiKeyResponse =
    encodeObject << encodeApiKeyResponsePairs


encodeApiKeyResponseWithTag : ( String, String ) -> ApiKeyResponse -> Json.Encode.Value
encodeApiKeyResponseWithTag (tagField, tag) model =
    encodeObject (encodeApiKeyResponsePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeApiKeyResponsePairs : ApiKeyResponse -> List EncodedField
encodeApiKeyResponsePairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , encode "api_key" Json.Encode.string model.apiKey
            , encode "email" Json.Encode.string model.email
            ]
    in
    pairs


encodeAttachments : Attachments -> Json.Encode.Value
encodeAttachments =
    encodeObject << encodeAttachmentsPairs


encodeAttachmentsWithTag : ( String, String ) -> Attachments -> Json.Encode.Value
encodeAttachmentsWithTag (tagField, tag) model =
    encodeObject (encodeAttachmentsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAttachmentsPairs : Attachments -> List EncodedField
encodeAttachmentsPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "path_id" Json.Encode.string model.pathId
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "create_time" Json.Encode.int model.createTime
            , maybeEncode "messages" (Json.Encode.list encodeAttachmentsMessages) model.messages
            ]
    in
    pairs


encodeAttachmentsMessages : AttachmentsMessages -> Json.Encode.Value
encodeAttachmentsMessages =
    encodeObject << encodeAttachmentsMessagesPairs


encodeAttachmentsMessagesWithTag : ( String, String ) -> AttachmentsMessages -> Json.Encode.Value
encodeAttachmentsMessagesWithTag (tagField, tag) model =
    encodeObject (encodeAttachmentsMessagesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAttachmentsMessagesPairs : AttachmentsMessages -> List EncodedField
encodeAttachmentsMessagesPairs model =
    let
        pairs =
            [ maybeEncode "date_sent" Json.Encode.int model.dateSent
            , maybeEncode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeBadEventQueueIdError : BadEventQueueIdError -> Json.Encode.Value
encodeBadEventQueueIdError =
    encodeObject << encodeBadEventQueueIdErrorPairs


encodeBadEventQueueIdErrorWithTag : ( String, String ) -> BadEventQueueIdError -> Json.Encode.Value
encodeBadEventQueueIdErrorWithTag (tagField, tag) model =
    encodeObject (encodeBadEventQueueIdErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBadEventQueueIdErrorPairs : BadEventQueueIdError -> List EncodedField
encodeBadEventQueueIdErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            , maybeEncode "queue_id" Json.Encode.string model.queueId
            ]
    in
    pairs


encodeBasicBot : BasicBot -> Json.Encode.Value
encodeBasicBot =
    encodeObject << encodeBasicBotPairs


encodeBasicBotWithTag : ( String, String ) -> BasicBot -> Json.Encode.Value
encodeBasicBotWithTag (tagField, tag) model =
    encodeObject (encodeBasicBotPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBasicBotPairs : BasicBot -> List EncodedField
encodeBasicBotPairs model =
    let
        pairs =
            [ maybeEncodeNullable "user_id" encodeAnyType model.userId
            , maybeEncodeNullable "full_name" encodeAnyType model.fullName
            , maybeEncodeNullable "api_key" encodeAnyType model.apiKey
            , maybeEncodeNullable "default_sending_stream" encodeAnyType model.defaultSendingStream
            , maybeEncodeNullable "default_events_register_stream" encodeAnyType model.defaultEventsRegisterStream
            , maybeEncodeNullable "default_all_public_streams" encodeAnyType model.defaultAllPublicStreams
            , maybeEncodeNullable "avatar_url" encodeAnyType model.avatarUrl
            , maybeEncodeNullable "owner_id" encodeAnyType model.ownerId
            , maybeEncodeNullable "services" encodeAnyType model.services
            ]
    in
    pairs


encodeBasicBotBase : BasicBotBase -> Json.Encode.Value
encodeBasicBotBase =
    encodeObject << encodeBasicBotBasePairs


encodeBasicBotBaseWithTag : ( String, String ) -> BasicBotBase -> Json.Encode.Value
encodeBasicBotBaseWithTag (tagField, tag) model =
    encodeObject (encodeBasicBotBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBasicBotBasePairs : BasicBotBase -> List EncodedField
encodeBasicBotBasePairs model =
    let
        pairs =
            [ maybeEncode "user_id" Json.Encode.int model.userId
            , maybeEncode "full_name" Json.Encode.string model.fullName
            , maybeEncode "api_key" Json.Encode.string model.apiKey
            , maybeEncodeNullable "default_sending_stream" Json.Encode.string model.defaultSendingStream
            , maybeEncodeNullable "default_events_register_stream" Json.Encode.string model.defaultEventsRegisterStream
            , maybeEncode "default_all_public_streams" Json.Encode.bool model.defaultAllPublicStreams
            , maybeEncode "avatar_url" Json.Encode.string model.avatarUrl
            , maybeEncodeNullable "owner_id" Json.Encode.int model.ownerId
            , maybeEncode "services" (Json.Encode.list encodeOneOfltobjectobjectgt) model.services
            ]
    in
    pairs


encodeBasicStream : BasicStream -> Json.Encode.Value
encodeBasicStream =
    encodeObject << encodeBasicStreamPairs


encodeBasicStreamWithTag : ( String, String ) -> BasicStream -> Json.Encode.Value
encodeBasicStreamWithTag (tagField, tag) model =
    encodeObject (encodeBasicStreamPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBasicStreamPairs : BasicStream -> List EncodedField
encodeBasicStreamPairs model =
    let
        pairs =
            [ maybeEncodeNullable "stream_id" encodeAnyType model.streamId
            , maybeEncodeNullable "name" encodeAnyType model.name
            , maybeEncodeNullable "description" encodeAnyType model.description
            , maybeEncodeNullable "date_created" encodeAnyType model.dateCreated
            , maybeEncodeNullable "invite_only" encodeAnyType model.inviteOnly
            , maybeEncodeNullable "rendered_description" encodeAnyType model.renderedDescription
            , maybeEncodeNullable "is_web_public" encodeAnyType model.isWebPublic
            , maybeEncodeNullable "stream_post_policy" encodeAnyType model.streamPostPolicy
            , maybeEncodeNullable "message_retention_days" encodeAnyType model.messageRetentionDays
            , maybeEncodeNullable "history_public_to_subscribers" encodeAnyType model.historyPublicToSubscribers
            , maybeEncodeNullable "first_message_id" encodeAnyType model.firstMessageId
            , maybeEncodeNullable "is_announcement_only" encodeAnyType model.isAnnouncementOnly
            ]
    in
    pairs


encodeBasicStreamBase : BasicStreamBase -> Json.Encode.Value
encodeBasicStreamBase =
    encodeObject << encodeBasicStreamBasePairs


encodeBasicStreamBaseWithTag : ( String, String ) -> BasicStreamBase -> Json.Encode.Value
encodeBasicStreamBaseWithTag (tagField, tag) model =
    encodeObject (encodeBasicStreamBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBasicStreamBasePairs : BasicStreamBase -> List EncodedField
encodeBasicStreamBasePairs model =
    let
        pairs =
            [ maybeEncode "stream_id" Json.Encode.int model.streamId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "date_created" Json.Encode.int model.dateCreated
            , maybeEncode "invite_only" Json.Encode.bool model.inviteOnly
            , maybeEncode "rendered_description" Json.Encode.string model.renderedDescription
            , maybeEncode "is_web_public" Json.Encode.bool model.isWebPublic
            , maybeEncode "stream_post_policy" Json.Encode.int model.streamPostPolicy
            , maybeEncodeNullable "message_retention_days" Json.Encode.int model.messageRetentionDays
            , maybeEncode "history_public_to_subscribers" Json.Encode.bool model.historyPublicToSubscribers
            , maybeEncodeNullable "first_message_id" Json.Encode.int model.firstMessageId
            , maybeEncode "is_announcement_only" Json.Encode.bool model.isAnnouncementOnly
            ]
    in
    pairs


encodeBot : Bot -> Json.Encode.Value
encodeBot =
    encodeObject << encodeBotPairs


encodeBotWithTag : ( String, String ) -> Bot -> Json.Encode.Value
encodeBotWithTag (tagField, tag) model =
    encodeObject (encodeBotPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBotPairs : Bot -> List EncodedField
encodeBotPairs model =
    let
        pairs =
            [ maybeEncodeNullable "user_id" encodeAnyType model.userId
            , maybeEncodeNullable "full_name" encodeAnyType model.fullName
            , maybeEncodeNullable "api_key" encodeAnyType model.apiKey
            , maybeEncodeNullable "default_sending_stream" encodeAnyType model.defaultSendingStream
            , maybeEncodeNullable "default_events_register_stream" encodeAnyType model.defaultEventsRegisterStream
            , maybeEncodeNullable "default_all_public_streams" encodeAnyType model.defaultAllPublicStreams
            , maybeEncodeNullable "avatar_url" encodeAnyType model.avatarUrl
            , maybeEncodeNullable "owner_id" encodeAnyType model.ownerId
            , maybeEncodeNullable "services" encodeAnyType model.services
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncodeNullable "bot_type" Json.Encode.int model.botType
            , maybeEncode "is_active" Json.Encode.bool model.isActive
            ]
    in
    pairs


encodeCodedError : CodedError -> Json.Encode.Value
encodeCodedError =
    encodeObject << encodeCodedErrorPairs


encodeCodedErrorWithTag : ( String, String ) -> CodedError -> Json.Encode.Value
encodeCodedErrorWithTag (tagField, tag) model =
    encodeObject (encodeCodedErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCodedErrorPairs : CodedError -> List EncodedField
encodeCodedErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            ]
    in
    pairs


encodeCodedErrorBase : CodedErrorBase -> Json.Encode.Value
encodeCodedErrorBase =
    encodeObject << encodeCodedErrorBasePairs


encodeCodedErrorBaseWithTag : ( String, String ) -> CodedErrorBase -> Json.Encode.Value
encodeCodedErrorBaseWithTag (tagField, tag) model =
    encodeObject (encodeCodedErrorBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCodedErrorBasePairs : CodedErrorBase -> List EncodedField
encodeCodedErrorBasePairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncode "code" Json.Encode.string model.code
            ]
    in
    pairs


encodeCustomProfileField : CustomProfileField -> Json.Encode.Value
encodeCustomProfileField =
    encodeObject << encodeCustomProfileFieldPairs


encodeCustomProfileFieldWithTag : ( String, String ) -> CustomProfileField -> Json.Encode.Value
encodeCustomProfileFieldWithTag (tagField, tag) model =
    encodeObject (encodeCustomProfileFieldPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCustomProfileFieldPairs : CustomProfileField -> List EncodedField
encodeCustomProfileFieldPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "type" Json.Encode.int model.type_
            , maybeEncode "order" Json.Encode.int model.order
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "hint" Json.Encode.string model.hint
            , maybeEncode "field_data" Json.Encode.string model.fieldData
            ]
    in
    pairs


encodeDefaultStreamGroup : DefaultStreamGroup -> Json.Encode.Value
encodeDefaultStreamGroup =
    encodeObject << encodeDefaultStreamGroupPairs


encodeDefaultStreamGroupWithTag : ( String, String ) -> DefaultStreamGroup -> Json.Encode.Value
encodeDefaultStreamGroupWithTag (tagField, tag) model =
    encodeObject (encodeDefaultStreamGroupPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDefaultStreamGroupPairs : DefaultStreamGroup -> List EncodedField
encodeDefaultStreamGroupPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "streams" (Json.Encode.list encodeBasicStream) model.streams
            ]
    in
    pairs


encodeDraft : Draft -> Json.Encode.Value
encodeDraft =
    encodeObject << encodeDraftPairs


encodeDraftWithTag : ( String, String ) -> Draft -> Json.Encode.Value
encodeDraftWithTag (tagField, tag) model =
    encodeObject (encodeDraftPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDraftPairs : Draft -> List EncodedField
encodeDraftPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , encode "type"  model.type_
            , encode "to" (Json.Encode.list Json.Encode.int) model.to
            , encode "topic" Json.Encode.string model.topic
            , encode "content" Json.Encode.string model.content
            , maybeEncode "timestamp" Json.Encode.float model.timestamp
            ]
    in
    pairs

stringFromDraftType : DraftType -> String
stringFromDraftType model =
    case model of
        DraftTypeUnknownEnumVariableName ->
            ""

        DraftTypeStream ->
            "stream"

        DraftTypePrivate ->
            "private"


encodeDraftType : DraftType -> Json.Encode.Value
encodeDraftType =
    Json.Encode.string << stringFromDraftType



encodeEmojiBase : EmojiBase -> Json.Encode.Value
encodeEmojiBase =
    encodeObject << encodeEmojiBasePairs


encodeEmojiBaseWithTag : ( String, String ) -> EmojiBase -> Json.Encode.Value
encodeEmojiBaseWithTag (tagField, tag) model =
    encodeObject (encodeEmojiBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmojiBasePairs : EmojiBase -> List EncodedField
encodeEmojiBasePairs model =
    let
        pairs =
            [ maybeEncode "emoji_code" Json.Encode.string model.emojiCode
            , maybeEncode "emoji_name" Json.Encode.string model.emojiName
            , maybeEncode "reaction_type" Json.Encode.string model.reactionType
            ]
    in
    pairs


encodeEmojiReaction : EmojiReaction -> Json.Encode.Value
encodeEmojiReaction =
    encodeObject << encodeEmojiReactionPairs


encodeEmojiReactionWithTag : ( String, String ) -> EmojiReaction -> Json.Encode.Value
encodeEmojiReactionWithTag (tagField, tag) model =
    encodeObject (encodeEmojiReactionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmojiReactionPairs : EmojiReaction -> List EncodedField
encodeEmojiReactionPairs model =
    let
        pairs =
            [ maybeEncodeNullable "emoji_code" encodeAnyType model.emojiCode
            , maybeEncodeNullable "emoji_name" encodeAnyType model.emojiName
            , maybeEncodeNullable "reaction_type" encodeAnyType model.reactionType
            , maybeEncodeNullable "user_id" encodeAnyType model.userId
            , maybeEncodeNullable "user" encodeAnyType model.user
            ]
    in
    pairs


encodeEmojiReactionBase : EmojiReactionBase -> Json.Encode.Value
encodeEmojiReactionBase =
    encodeObject << encodeEmojiReactionBasePairs


encodeEmojiReactionBaseWithTag : ( String, String ) -> EmojiReactionBase -> Json.Encode.Value
encodeEmojiReactionBaseWithTag (tagField, tag) model =
    encodeObject (encodeEmojiReactionBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmojiReactionBasePairs : EmojiReactionBase -> List EncodedField
encodeEmojiReactionBasePairs model =
    let
        pairs =
            [ maybeEncode "emoji_code" Json.Encode.string model.emojiCode
            , maybeEncode "emoji_name" Json.Encode.string model.emojiName
            , maybeEncode "reaction_type" Json.Encode.string model.reactionType
            , maybeEncode "user_id" Json.Encode.int model.userId
            , maybeEncode "user" encodeEmojiReactionBaseAllOfUser model.user
            ]
    in
    pairs


encodeEmojiReactionBaseAllOfUser : EmojiReactionBaseAllOfUser -> Json.Encode.Value
encodeEmojiReactionBaseAllOfUser =
    encodeObject << encodeEmojiReactionBaseAllOfUserPairs


encodeEmojiReactionBaseAllOfUserWithTag : ( String, String ) -> EmojiReactionBaseAllOfUser -> Json.Encode.Value
encodeEmojiReactionBaseAllOfUserWithTag (tagField, tag) model =
    encodeObject (encodeEmojiReactionBaseAllOfUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmojiReactionBaseAllOfUserPairs : EmojiReactionBaseAllOfUser -> List EncodedField
encodeEmojiReactionBaseAllOfUserPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "full_name" Json.Encode.string model.fullName
            , maybeEncode "is_mirror_dummy" Json.Encode.bool model.isMirrorDummy
            ]
    in
    pairs


encodeEventIdSchema : EventIdSchema -> Json.Encode.Value
encodeEventIdSchema =
    encodeObject << encodeEventIdSchemaPairs


encodeEventIdSchemaWithTag : ( String, String ) -> EventIdSchema -> Json.Encode.Value
encodeEventIdSchemaWithTag (tagField, tag) model =
    encodeObject (encodeEventIdSchemaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEventIdSchemaPairs : EventIdSchema -> List EncodedField
encodeEventIdSchemaPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeEventTypeSchema : EventTypeSchema -> Json.Encode.Value
encodeEventTypeSchema =
    encodeObject << encodeEventTypeSchemaPairs


encodeEventTypeSchemaWithTag : ( String, String ) -> EventTypeSchema -> Json.Encode.Value
encodeEventTypeSchemaWithTag (tagField, tag) model =
    encodeObject (encodeEventTypeSchemaPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEventTypeSchemaPairs : EventTypeSchema -> List EncodedField
encodeEventTypeSchemaPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeGetMessages : GetMessages -> Json.Encode.Value
encodeGetMessages =
    encodeObject << encodeGetMessagesPairs


encodeGetMessagesWithTag : ( String, String ) -> GetMessages -> Json.Encode.Value
encodeGetMessagesWithTag (tagField, tag) model =
    encodeObject (encodeGetMessagesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGetMessagesPairs : GetMessages -> List EncodedField
encodeGetMessagesPairs model =
    let
        pairs =
            [ maybeEncodeNullable "avatar_url" encodeAnyType model.avatarUrl
            , maybeEncodeNullable "client" encodeAnyType model.client
            , maybeEncodeNullable "content" encodeAnyType model.content
            , maybeEncodeNullable "content_type" encodeAnyType model.contentType
            , maybeEncodeNullable "display_recipient" encodeAnyType model.displayRecipient
            , maybeEncodeNullable "id" encodeAnyType model.id
            , maybeEncodeNullable "is_me_message" encodeAnyType model.isMeMessage
            , maybeEncodeNullable "reactions" encodeAnyType model.reactions
            , maybeEncodeNullable "recipient_id" encodeAnyType model.recipientId
            , maybeEncodeNullable "sender_email" encodeAnyType model.senderEmail
            , maybeEncodeNullable "sender_full_name" encodeAnyType model.senderFullName
            , maybeEncodeNullable "sender_id" encodeAnyType model.senderId
            , maybeEncodeNullable "sender_realm_str" encodeAnyType model.senderRealmStr
            , maybeEncodeNullable "stream_id" encodeAnyType model.streamId
            , maybeEncodeNullable "subject" encodeAnyType model.subject
            , maybeEncodeNullable "topic_links" encodeAnyType model.topicLinks
            , maybeEncodeNullable "submessages" encodeAnyType model.submessages
            , maybeEncodeNullable "timestamp" encodeAnyType model.timestamp
            , maybeEncodeNullable "type" encodeAnyType model.type_
            , maybeEncode "flags" (Json.Encode.list Json.Encode.string) model.flags
            , maybeEncode "last_edit_timestamp" Json.Encode.int model.lastEditTimestamp
            , maybeEncode "match_content" Json.Encode.string model.matchContent
            , maybeEncode "match_subject" Json.Encode.string model.matchSubject
            ]
    in
    pairs


encodeHotspot : Hotspot -> Json.Encode.Value
encodeHotspot =
    encodeObject << encodeHotspotPairs


encodeHotspotWithTag : ( String, String ) -> Hotspot -> Json.Encode.Value
encodeHotspotWithTag (tagField, tag) model =
    encodeObject (encodeHotspotPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHotspotPairs : Hotspot -> List EncodedField
encodeHotspotPairs model =
    let
        pairs =
            [ maybeEncode "delay" Json.Encode.float model.delay
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "description" Json.Encode.string model.description
            ]
    in
    pairs


encodeInlineResponse200 : InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200 =
    encodeObject << encodeInlineResponse200Pairs


encodeInlineResponse200WithTag : ( String, String ) -> InlineResponse200 -> Json.Encode.Value
encodeInlineResponse200WithTag (tagField, tag) model =
    encodeObject (encodeInlineResponse200Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineResponse200Pairs : InlineResponse200 -> List EncodedField
encodeInlineResponse200Pairs model =
    let
        pairs =
            [ maybeEncode "bot_email" Json.Encode.string model.botEmail
            , maybeEncode "bot_full_name" Json.Encode.string model.botFullName
            , maybeEncode "data" Json.Encode.string model.data
            , maybeEncode "trigger" Json.Encode.string model.trigger
            , maybeEncode "token" Json.Encode.string model.token
            , maybeEncode "message" encodeMessagesBase model.message
            ]
    in
    pairs


encodeInvalidApiKeyError : InvalidApiKeyError -> Json.Encode.Value
encodeInvalidApiKeyError =
    encodeObject << encodeInvalidApiKeyErrorPairs


encodeInvalidApiKeyErrorWithTag : ( String, String ) -> InvalidApiKeyError -> Json.Encode.Value
encodeInvalidApiKeyErrorWithTag (tagField, tag) model =
    encodeObject (encodeInvalidApiKeyErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInvalidApiKeyErrorPairs : InvalidApiKeyError -> List EncodedField
encodeInvalidApiKeyErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            ]
    in
    pairs


encodeInvalidMessageError : InvalidMessageError -> Json.Encode.Value
encodeInvalidMessageError =
    encodeObject << encodeInvalidMessageErrorPairs


encodeInvalidMessageErrorWithTag : ( String, String ) -> InvalidMessageError -> Json.Encode.Value
encodeInvalidMessageErrorWithTag (tagField, tag) model =
    encodeObject (encodeInvalidMessageErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInvalidMessageErrorPairs : InvalidMessageError -> List EncodedField
encodeInvalidMessageErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncode "raw_content" Json.Encode.string model.rawContent
            ]
    in
    pairs


encodeJsonError : JsonError -> Json.Encode.Value
encodeJsonError =
    encodeObject << encodeJsonErrorPairs


encodeJsonErrorWithTag : ( String, String ) -> JsonError -> Json.Encode.Value
encodeJsonErrorWithTag (tagField, tag) model =
    encodeObject (encodeJsonErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonErrorPairs : JsonError -> List EncodedField
encodeJsonErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            ]
    in
    pairs


encodeJsonErrorBase : JsonErrorBase -> Json.Encode.Value
encodeJsonErrorBase =
    encodeObject << encodeJsonErrorBasePairs


encodeJsonErrorBaseWithTag : ( String, String ) -> JsonErrorBase -> Json.Encode.Value
encodeJsonErrorBaseWithTag (tagField, tag) model =
    encodeObject (encodeJsonErrorBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonErrorBasePairs : JsonErrorBase -> List EncodedField
encodeJsonErrorBasePairs model =
    let
        pairs =
            [ encode "result"  model.result
            , encode "msg" Json.Encode.string model.msg
            ]
    in
    pairs

stringFromJsonErrorBaseResult_ : JsonErrorBaseResult_ -> String
stringFromJsonErrorBaseResult_ model =
    case model of
        JsonErrorBaseResult_Error ->
            "error"


encodeJsonErrorBaseResult : JsonErrorBaseResult_ -> Json.Encode.Value
encodeJsonErrorBaseResult =
    Json.Encode.string << stringFromJsonErrorBaseResult_



encodeJsonResponseBase : JsonResponseBase -> Json.Encode.Value
encodeJsonResponseBase =
    encodeObject << encodeJsonResponseBasePairs


encodeJsonResponseBaseWithTag : ( String, String ) -> JsonResponseBase -> Json.Encode.Value
encodeJsonResponseBaseWithTag (tagField, tag) model =
    encodeObject (encodeJsonResponseBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonResponseBasePairs : JsonResponseBase -> List EncodedField
encodeJsonResponseBasePairs model =
    let
        pairs =
            [ maybeEncode "result" Json.Encode.string model.result
            ]
    in
    pairs


encodeJsonSuccess : JsonSuccess -> Json.Encode.Value
encodeJsonSuccess =
    encodeObject << encodeJsonSuccessPairs


encodeJsonSuccessWithTag : ( String, String ) -> JsonSuccess -> Json.Encode.Value
encodeJsonSuccessWithTag (tagField, tag) model =
    encodeObject (encodeJsonSuccessPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonSuccessPairs : JsonSuccess -> List EncodedField
encodeJsonSuccessPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            ]
    in
    pairs


encodeJsonSuccessBase : JsonSuccessBase -> Json.Encode.Value
encodeJsonSuccessBase =
    encodeObject << encodeJsonSuccessBasePairs


encodeJsonSuccessBaseWithTag : ( String, String ) -> JsonSuccessBase -> Json.Encode.Value
encodeJsonSuccessBaseWithTag (tagField, tag) model =
    encodeObject (encodeJsonSuccessBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJsonSuccessBasePairs : JsonSuccessBase -> List EncodedField
encodeJsonSuccessBasePairs model =
    let
        pairs =
            [ encode "result"  model.result
            , encode "msg" Json.Encode.string model.msg
            ]
    in
    pairs

stringFromJsonSuccessBaseResult_ : JsonSuccessBaseResult_ -> String
stringFromJsonSuccessBaseResult_ model =
    case model of
        JsonSuccessBaseResult_Success ->
            "success"


encodeJsonSuccessBaseResult : JsonSuccessBaseResult_ -> Json.Encode.Value
encodeJsonSuccessBaseResult =
    Json.Encode.string << stringFromJsonSuccessBaseResult_



encodeMessages : Messages -> Json.Encode.Value
encodeMessages =
    encodeObject << encodeMessagesPairs


encodeMessagesWithTag : ( String, String ) -> Messages -> Json.Encode.Value
encodeMessagesWithTag (tagField, tag) model =
    encodeObject (encodeMessagesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessagesPairs : Messages -> List EncodedField
encodeMessagesPairs model =
    let
        pairs =
            [ maybeEncodeNullable "avatar_url" encodeAnyType model.avatarUrl
            , maybeEncodeNullable "client" encodeAnyType model.client
            , maybeEncodeNullable "content" encodeAnyType model.content
            , maybeEncodeNullable "content_type" encodeAnyType model.contentType
            , maybeEncodeNullable "display_recipient" encodeAnyType model.displayRecipient
            , maybeEncodeNullable "id" encodeAnyType model.id
            , maybeEncodeNullable "is_me_message" encodeAnyType model.isMeMessage
            , maybeEncodeNullable "reactions" encodeAnyType model.reactions
            , maybeEncodeNullable "recipient_id" encodeAnyType model.recipientId
            , maybeEncodeNullable "sender_email" encodeAnyType model.senderEmail
            , maybeEncodeNullable "sender_full_name" encodeAnyType model.senderFullName
            , maybeEncodeNullable "sender_id" encodeAnyType model.senderId
            , maybeEncodeNullable "sender_realm_str" encodeAnyType model.senderRealmStr
            , maybeEncodeNullable "stream_id" encodeAnyType model.streamId
            , maybeEncodeNullable "subject" encodeAnyType model.subject
            , maybeEncodeNullable "topic_links" encodeAnyType model.topicLinks
            , maybeEncodeNullable "submessages" encodeAnyType model.submessages
            , maybeEncodeNullable "timestamp" encodeAnyType model.timestamp
            , maybeEncodeNullable "type" encodeAnyType model.type_
            ]
    in
    pairs


encodeMessagesBase : MessagesBase -> Json.Encode.Value
encodeMessagesBase =
    encodeObject << encodeMessagesBasePairs


encodeMessagesBaseWithTag : ( String, String ) -> MessagesBase -> Json.Encode.Value
encodeMessagesBaseWithTag (tagField, tag) model =
    encodeObject (encodeMessagesBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessagesBasePairs : MessagesBase -> List EncodedField
encodeMessagesBasePairs model =
    let
        pairs =
            [ maybeEncodeNullable "avatar_url" Json.Encode.string model.avatarUrl
            , maybeEncode "client" Json.Encode.string model.client
            , maybeEncode "content" Json.Encode.string model.content
            , maybeEncode "content_type" Json.Encode.string model.contentType
            , maybeEncode "display_recipient" encodeOneOfltstringarraygt model.displayRecipient
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "is_me_message" Json.Encode.bool model.isMeMessage
            , maybeEncode "reactions" (Json.Encode.list encodeEmojiReaction) model.reactions
            , maybeEncode "recipient_id" Json.Encode.int model.recipientId
            , maybeEncode "sender_email" Json.Encode.string model.senderEmail
            , maybeEncode "sender_full_name" Json.Encode.string model.senderFullName
            , maybeEncode "sender_id" Json.Encode.int model.senderId
            , maybeEncode "sender_realm_str" Json.Encode.string model.senderRealmStr
            , maybeEncode "stream_id" Json.Encode.int model.streamId
            , maybeEncode "subject" Json.Encode.string model.subject
            , maybeEncode "topic_links" (Json.Encode.list encodeMessagesBaseTopicLinks) model.topicLinks
            , maybeEncode "submessages" (Json.Encode.list Json.Encode.string) model.submessages
            , maybeEncode "timestamp" Json.Encode.int model.timestamp
            , maybeEncode "type" Json.Encode.string model.type_
            ]
    in
    pairs


encodeMessagesBaseTopicLinks : MessagesBaseTopicLinks -> Json.Encode.Value
encodeMessagesBaseTopicLinks =
    encodeObject << encodeMessagesBaseTopicLinksPairs


encodeMessagesBaseTopicLinksWithTag : ( String, String ) -> MessagesBaseTopicLinks -> Json.Encode.Value
encodeMessagesBaseTopicLinksWithTag (tagField, tag) model =
    encodeObject (encodeMessagesBaseTopicLinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMessagesBaseTopicLinksPairs : MessagesBaseTopicLinks -> List EncodedField
encodeMessagesBaseTopicLinksPairs model =
    let
        pairs =
            [ maybeEncode "text" Json.Encode.string model.text
            , maybeEncode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeMissingArgumentError : MissingArgumentError -> Json.Encode.Value
encodeMissingArgumentError =
    encodeObject << encodeMissingArgumentErrorPairs


encodeMissingArgumentErrorWithTag : ( String, String ) -> MissingArgumentError -> Json.Encode.Value
encodeMissingArgumentErrorWithTag (tagField, tag) model =
    encodeObject (encodeMissingArgumentErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMissingArgumentErrorPairs : MissingArgumentError -> List EncodedField
encodeMissingArgumentErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            , maybeEncode "var_name" Json.Encode.string model.varName
            ]
    in
    pairs


encodeNonExistingStreamError : NonExistingStreamError -> Json.Encode.Value
encodeNonExistingStreamError =
    encodeObject << encodeNonExistingStreamErrorPairs


encodeNonExistingStreamErrorWithTag : ( String, String ) -> NonExistingStreamError -> Json.Encode.Value
encodeNonExistingStreamErrorWithTag (tagField, tag) model =
    encodeObject (encodeNonExistingStreamErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNonExistingStreamErrorPairs : NonExistingStreamError -> List EncodedField
encodeNonExistingStreamErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            , maybeEncode "stream" Json.Encode.string model.stream
            ]
    in
    pairs


encodePresence : Presence -> Json.Encode.Value
encodePresence =
    encodeObject << encodePresencePairs


encodePresenceWithTag : ( String, String ) -> Presence -> Json.Encode.Value
encodePresenceWithTag (tagField, tag) model =
    encodeObject (encodePresencePairs model ++ [ encode tagField Json.Encode.string tag ])


encodePresencePairs : Presence -> List EncodedField
encodePresencePairs model =
    let
        pairs =
            [ maybeEncode "client" Json.Encode.string model.client
            , maybeEncode "status"  model.status
            , maybeEncode "timestamp" Json.Encode.int model.timestamp
            , maybeEncode "pushable" Json.Encode.bool model.pushable
            ]
    in
    pairs

stringFromPresenceStatus : PresenceStatus -> String
stringFromPresenceStatus model =
    case model of
        PresenceStatusIdle ->
            "idle"

        PresenceStatusActive ->
            "active"


encodePresenceStatus : PresenceStatus -> Json.Encode.Value
encodePresenceStatus =
    Json.Encode.string << stringFromPresenceStatus



encodeRateLimitedError : RateLimitedError -> Json.Encode.Value
encodeRateLimitedError =
    encodeObject << encodeRateLimitedErrorPairs


encodeRateLimitedErrorWithTag : ( String, String ) -> RateLimitedError -> Json.Encode.Value
encodeRateLimitedErrorWithTag (tagField, tag) model =
    encodeObject (encodeRateLimitedErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRateLimitedErrorPairs : RateLimitedError -> List EncodedField
encodeRateLimitedErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            ]
    in
    pairs


encodeRealmDeactivatedError : RealmDeactivatedError -> Json.Encode.Value
encodeRealmDeactivatedError =
    encodeObject << encodeRealmDeactivatedErrorPairs


encodeRealmDeactivatedErrorWithTag : ( String, String ) -> RealmDeactivatedError -> Json.Encode.Value
encodeRealmDeactivatedErrorWithTag (tagField, tag) model =
    encodeObject (encodeRealmDeactivatedErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRealmDeactivatedErrorPairs : RealmDeactivatedError -> List EncodedField
encodeRealmDeactivatedErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            ]
    in
    pairs


encodeRealmDomain : RealmDomain -> Json.Encode.Value
encodeRealmDomain =
    encodeObject << encodeRealmDomainPairs


encodeRealmDomainWithTag : ( String, String ) -> RealmDomain -> Json.Encode.Value
encodeRealmDomainWithTag (tagField, tag) model =
    encodeObject (encodeRealmDomainPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRealmDomainPairs : RealmDomain -> List EncodedField
encodeRealmDomainPairs model =
    let
        pairs =
            [ maybeEncode "domain" Json.Encode.string model.domain
            , maybeEncode "allow_subdomains" Json.Encode.bool model.allowSubdomains
            ]
    in
    pairs


encodeRealmEmoji : RealmEmoji -> Json.Encode.Value
encodeRealmEmoji =
    encodeObject << encodeRealmEmojiPairs


encodeRealmEmojiWithTag : ( String, String ) -> RealmEmoji -> Json.Encode.Value
encodeRealmEmojiWithTag (tagField, tag) model =
    encodeObject (encodeRealmEmojiPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRealmEmojiPairs : RealmEmoji -> List EncodedField
encodeRealmEmojiPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "source_url" Json.Encode.string model.sourceUrl
            , maybeEncode "deactivated" Json.Encode.bool model.deactivated
            , maybeEncodeNullable "author_id" Json.Encode.int model.authorId
            ]
    in
    pairs


encodeRealmExport : RealmExport -> Json.Encode.Value
encodeRealmExport =
    encodeObject << encodeRealmExportPairs


encodeRealmExportWithTag : ( String, String ) -> RealmExport -> Json.Encode.Value
encodeRealmExportWithTag (tagField, tag) model =
    encodeObject (encodeRealmExportPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRealmExportPairs : RealmExport -> List EncodedField
encodeRealmExportPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "acting_user_id" Json.Encode.int model.actingUserId
            , maybeEncode "export_time" Json.Encode.float model.exportTime
            , maybeEncodeNullable "deleted_timestamp" Json.Encode.float model.deletedTimestamp
            , maybeEncodeNullable "failed_timestamp" Json.Encode.float model.failedTimestamp
            , maybeEncodeNullable "export_url" Json.Encode.string model.exportUrl
            , maybeEncode "pending" Json.Encode.bool model.pending
            ]
    in
    pairs


encodeRealmPlayground : RealmPlayground -> Json.Encode.Value
encodeRealmPlayground =
    encodeObject << encodeRealmPlaygroundPairs


encodeRealmPlaygroundWithTag : ( String, String ) -> RealmPlayground -> Json.Encode.Value
encodeRealmPlaygroundWithTag (tagField, tag) model =
    encodeObject (encodeRealmPlaygroundPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRealmPlaygroundPairs : RealmPlayground -> List EncodedField
encodeRealmPlaygroundPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "pygments_language" Json.Encode.string model.pygmentsLanguage
            , maybeEncode "url_prefix" Json.Encode.string model.urlPrefix
            ]
    in
    pairs


encodeSubscriptions : Subscriptions -> Json.Encode.Value
encodeSubscriptions =
    encodeObject << encodeSubscriptionsPairs


encodeSubscriptionsWithTag : ( String, String ) -> Subscriptions -> Json.Encode.Value
encodeSubscriptionsWithTag (tagField, tag) model =
    encodeObject (encodeSubscriptionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSubscriptionsPairs : Subscriptions -> List EncodedField
encodeSubscriptionsPairs model =
    let
        pairs =
            [ maybeEncode "stream_id" Json.Encode.int model.streamId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "rendered_description" Json.Encode.string model.renderedDescription
            , maybeEncode "date_created" Json.Encode.int model.dateCreated
            , maybeEncode "invite_only" Json.Encode.bool model.inviteOnly
            , maybeEncode "subscribers" (Json.Encode.list Json.Encode.int) model.subscribers
            , maybeEncodeNullable "desktop_notifications" Json.Encode.bool model.desktopNotifications
            , maybeEncodeNullable "email_notifications" Json.Encode.bool model.emailNotifications
            , maybeEncodeNullable "wildcard_mentions_notify" Json.Encode.bool model.wildcardMentionsNotify
            , maybeEncodeNullable "push_notifications" Json.Encode.bool model.pushNotifications
            , maybeEncodeNullable "audible_notifications" Json.Encode.bool model.audibleNotifications
            , maybeEncode "pin_to_top" Json.Encode.bool model.pinToTop
            , maybeEncode "email_address" Json.Encode.string model.emailAddress
            , maybeEncode "is_muted" Json.Encode.bool model.isMuted
            , maybeEncode "in_home_view" Json.Encode.bool model.inHomeView
            , maybeEncode "is_announcement_only" Json.Encode.bool model.isAnnouncementOnly
            , maybeEncode "is_web_public" Json.Encode.bool model.isWebPublic
            , maybeEncode "role" Json.Encode.int model.role
            , maybeEncode "color" Json.Encode.string model.color
            , maybeEncode "stream_post_policy" Json.Encode.int model.streamPostPolicy
            , maybeEncodeNullable "message_retention_days" Json.Encode.int model.messageRetentionDays
            , maybeEncode "history_public_to_subscribers" Json.Encode.bool model.historyPublicToSubscribers
            , maybeEncodeNullable "first_message_id" Json.Encode.int model.firstMessageId
            , maybeEncodeNullable "stream_weekly_traffic" Json.Encode.int model.streamWeeklyTraffic
            ]
    in
    pairs

stringFromSubscriptionsRole : SubscriptionsRole -> String
stringFromSubscriptionsRole =
    String.fromInt << intFromSubscriptionsRole


intFromSubscriptionsRole : SubscriptionsRole -> Int
intFromSubscriptionsRole model =
    case model of
        SubscriptionsRole20 ->
            20

        SubscriptionsRole50 ->
            50


encodeSubscriptionsRole : SubscriptionsRole -> Json.Encode.Value
encodeSubscriptionsRole =
    Json.Encode.int << intFromSubscriptionsRole



encodeSuccessDescription : SuccessDescription -> Json.Encode.Value
encodeSuccessDescription =
    encodeObject << encodeSuccessDescriptionPairs


encodeSuccessDescriptionWithTag : ( String, String ) -> SuccessDescription -> Json.Encode.Value
encodeSuccessDescriptionWithTag (tagField, tag) model =
    encodeObject (encodeSuccessDescriptionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSuccessDescriptionPairs : SuccessDescription -> List EncodedField
encodeSuccessDescriptionPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeUser : User -> Json.Encode.Value
encodeUser =
    encodeObject << encodeUserPairs


encodeUserWithTag : ( String, String ) -> User -> Json.Encode.Value
encodeUserWithTag (tagField, tag) model =
    encodeObject (encodeUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserPairs : User -> List EncodedField
encodeUserPairs model =
    let
        pairs =
            [ maybeEncodeNullable "email" encodeAnyType model.email
            , maybeEncodeNullable "is_bot" encodeAnyType model.isBot
            , maybeEncodeNullable "avatar_url" encodeAnyType model.avatarUrl
            , maybeEncodeNullable "avatar_version" encodeAnyType model.avatarVersion
            , maybeEncodeNullable "full_name" encodeAnyType model.fullName
            , maybeEncodeNullable "is_admin" encodeAnyType model.isAdmin
            , maybeEncodeNullable "is_owner" encodeAnyType model.isOwner
            , maybeEncodeNullable "is_billing_admin" encodeAnyType model.isBillingAdmin
            , maybeEncodeNullable "role" encodeAnyType model.role
            , maybeEncodeNullable "bot_type" encodeAnyType model.botType
            , maybeEncodeNullable "user_id" encodeAnyType model.userId
            , maybeEncodeNullable "bot_owner_id" encodeAnyType model.botOwnerId
            , maybeEncodeNullable "is_active" encodeAnyType model.isActive
            , maybeEncodeNullable "is_guest" encodeAnyType model.isGuest
            , maybeEncodeNullable "timezone" encodeAnyType model.timezone
            , maybeEncodeNullable "date_joined" encodeAnyType model.dateJoined
            , maybeEncodeNullable "delivery_email" encodeAnyType model.deliveryEmail
            , maybeEncodeNullable "profile_data" encodeAnyType model.profileData
            ]
    in
    pairs


encodeUserBase : UserBase -> Json.Encode.Value
encodeUserBase =
    encodeObject << encodeUserBasePairs


encodeUserBaseWithTag : ( String, String ) -> UserBase -> Json.Encode.Value
encodeUserBaseWithTag (tagField, tag) model =
    encodeObject (encodeUserBasePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserBasePairs : UserBase -> List EncodedField
encodeUserBasePairs model =
    let
        pairs =
            [ maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "is_bot" Json.Encode.bool model.isBot
            , maybeEncodeNullable "avatar_url" Json.Encode.string model.avatarUrl
            , maybeEncode "avatar_version" Json.Encode.int model.avatarVersion
            , maybeEncode "full_name" Json.Encode.string model.fullName
            , maybeEncode "is_admin" Json.Encode.bool model.isAdmin
            , maybeEncode "is_owner" Json.Encode.bool model.isOwner
            , maybeEncode "is_billing_admin" Json.Encode.bool model.isBillingAdmin
            , maybeEncode "role" Json.Encode.int model.role
            , maybeEncodeNullable "bot_type" Json.Encode.int model.botType
            , maybeEncode "user_id" Json.Encode.int model.userId
            , maybeEncodeNullable "bot_owner_id" Json.Encode.int model.botOwnerId
            , maybeEncode "is_active" Json.Encode.bool model.isActive
            , maybeEncode "is_guest" Json.Encode.bool model.isGuest
            , maybeEncode "timezone" Json.Encode.string model.timezone
            , maybeEncode "date_joined" Json.Encode.string model.dateJoined
            , maybeEncode "delivery_email" Json.Encode.string model.deliveryEmail
            , maybeEncode "profile_data" (Json.Encode.dict identity encodeObject) model.profileData
            ]
    in
    pairs

stringFromUserBaseRole : UserBaseRole -> String
stringFromUserBaseRole =
    String.fromInt << intFromUserBaseRole


intFromUserBaseRole : UserBaseRole -> Int
intFromUserBaseRole model =
    case model of
        UserBaseRole100 ->
            100

        UserBaseRole200 ->
            200

        UserBaseRole300 ->
            300

        UserBaseRole400 ->
            400

        UserBaseRole600 ->
            600


encodeUserBaseRole : UserBaseRole -> Json.Encode.Value
encodeUserBaseRole =
    Json.Encode.int << intFromUserBaseRole



encodeUserDeactivatedError : UserDeactivatedError -> Json.Encode.Value
encodeUserDeactivatedError =
    encodeObject << encodeUserDeactivatedErrorPairs


encodeUserDeactivatedErrorWithTag : ( String, String ) -> UserDeactivatedError -> Json.Encode.Value
encodeUserDeactivatedErrorWithTag (tagField, tag) model =
    encodeObject (encodeUserDeactivatedErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserDeactivatedErrorPairs : UserDeactivatedError -> List EncodedField
encodeUserDeactivatedErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            ]
    in
    pairs


encodeUserGroup : UserGroup -> Json.Encode.Value
encodeUserGroup =
    encodeObject << encodeUserGroupPairs


encodeUserGroupWithTag : ( String, String ) -> UserGroup -> Json.Encode.Value
encodeUserGroupWithTag (tagField, tag) model =
    encodeObject (encodeUserGroupPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserGroupPairs : UserGroup -> List EncodedField
encodeUserGroupPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "members" (Json.Encode.list Json.Encode.int) model.members
            , maybeEncode "id" Json.Encode.int model.id
            ]
    in
    pairs


encodeUserNotAuthorizedError : UserNotAuthorizedError -> Json.Encode.Value
encodeUserNotAuthorizedError =
    encodeObject << encodeUserNotAuthorizedErrorPairs


encodeUserNotAuthorizedErrorWithTag : ( String, String ) -> UserNotAuthorizedError -> Json.Encode.Value
encodeUserNotAuthorizedErrorWithTag (tagField, tag) model =
    encodeObject (encodeUserNotAuthorizedErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserNotAuthorizedErrorPairs : UserNotAuthorizedError -> List EncodedField
encodeUserNotAuthorizedErrorPairs model =
    let
        pairs =
            [ encodeNullable "result" encodeAnyType model.result
            , encodeNullable "msg" encodeAnyType model.msg
            , maybeEncodeNullable "code" encodeAnyType model.code
            ]
    in
    pairs


-- DECODER


addSubscriptionsResponseDecoder : Json.Decode.Decoder AddSubscriptionsResponse
addSubscriptionsResponseDecoder =
    Json.Decode.succeed AddSubscriptionsResponse
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecode "subscribed" (Json.Decode.dict (Json.Decode.list Json.Decode.string)stringDecoder) Nothing
        |> maybeDecode "already_subscribed" (Json.Decode.dict (Json.Decode.list Json.Decode.string)stringDecoder) Nothing
        |> maybeDecode "unauthorized" (Json.Decode.list Json.Decode.string) Nothing


apiKeyResponseDecoder : Json.Decode.Decoder ApiKeyResponse
apiKeyResponseDecoder =
    Json.Decode.succeed ApiKeyResponse
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> decode "api_key" Json.Decode.string 
        |> decode "email" Json.Decode.string 


attachmentsDecoder : Json.Decode.Decoder Attachments
attachmentsDecoder =
    Json.Decode.succeed Attachments
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "path_id" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "create_time" Json.Decode.int Nothing
        |> maybeDecode "messages" (Json.Decode.list attachmentsMessagesDecoder) Nothing


attachmentsMessagesDecoder : Json.Decode.Decoder AttachmentsMessages
attachmentsMessagesDecoder =
    Json.Decode.succeed AttachmentsMessages
        |> maybeDecode "date_sent" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.int Nothing


badEventQueueIdErrorDecoder : Json.Decode.Decoder BadEventQueueIdError
badEventQueueIdErrorDecoder =
    Json.Decode.succeed BadEventQueueIdError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing
        |> maybeDecode "queue_id" Json.Decode.string Nothing


basicBotDecoder : Json.Decode.Decoder BasicBot
basicBotDecoder =
    Json.Decode.succeed BasicBot
        |> maybeDecodeNullable "user_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "full_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "api_key" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_sending_stream" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_events_register_stream" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_all_public_streams" anyTypeDecoder Nothing
        |> maybeDecodeNullable "avatar_url" anyTypeDecoder Nothing
        |> maybeDecodeNullable "owner_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "services" anyTypeDecoder Nothing


basicBotBaseDecoder : Json.Decode.Decoder BasicBotBase
basicBotBaseDecoder =
    Json.Decode.succeed BasicBotBase
        |> maybeDecode "user_id" Json.Decode.int Nothing
        |> maybeDecode "full_name" Json.Decode.string Nothing
        |> maybeDecode "api_key" Json.Decode.string Nothing
        |> maybeDecodeNullable "default_sending_stream" Json.Decode.string Nothing
        |> maybeDecodeNullable "default_events_register_stream" Json.Decode.string Nothing
        |> maybeDecode "default_all_public_streams" Json.Decode.bool Nothing
        |> maybeDecode "avatar_url" Json.Decode.string Nothing
        |> maybeDecodeNullable "owner_id" Json.Decode.int Nothing
        |> maybeDecode "services" (Json.Decode.list oneOfltobjectobjectgtDecoder) Nothing


basicStreamDecoder : Json.Decode.Decoder BasicStream
basicStreamDecoder =
    Json.Decode.succeed BasicStream
        |> maybeDecodeNullable "stream_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "description" anyTypeDecoder Nothing
        |> maybeDecodeNullable "date_created" anyTypeDecoder Nothing
        |> maybeDecodeNullable "invite_only" anyTypeDecoder Nothing
        |> maybeDecodeNullable "rendered_description" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_web_public" anyTypeDecoder Nothing
        |> maybeDecodeNullable "stream_post_policy" anyTypeDecoder Nothing
        |> maybeDecodeNullable "message_retention_days" anyTypeDecoder Nothing
        |> maybeDecodeNullable "history_public_to_subscribers" anyTypeDecoder Nothing
        |> maybeDecodeNullable "first_message_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_announcement_only" anyTypeDecoder Nothing


basicStreamBaseDecoder : Json.Decode.Decoder BasicStreamBase
basicStreamBaseDecoder =
    Json.Decode.succeed BasicStreamBase
        |> maybeDecode "stream_id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "date_created" Json.Decode.int Nothing
        |> maybeDecode "invite_only" Json.Decode.bool Nothing
        |> maybeDecode "rendered_description" Json.Decode.string Nothing
        |> maybeDecode "is_web_public" Json.Decode.bool Nothing
        |> maybeDecode "stream_post_policy" Json.Decode.int Nothing
        |> maybeDecodeNullable "message_retention_days" Json.Decode.int Nothing
        |> maybeDecode "history_public_to_subscribers" Json.Decode.bool Nothing
        |> maybeDecodeNullable "first_message_id" Json.Decode.int Nothing
        |> maybeDecode "is_announcement_only" Json.Decode.bool Nothing


botDecoder : Json.Decode.Decoder Bot
botDecoder =
    Json.Decode.succeed Bot
        |> maybeDecodeNullable "user_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "full_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "api_key" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_sending_stream" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_events_register_stream" anyTypeDecoder Nothing
        |> maybeDecodeNullable "default_all_public_streams" anyTypeDecoder Nothing
        |> maybeDecodeNullable "avatar_url" anyTypeDecoder Nothing
        |> maybeDecodeNullable "owner_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "services" anyTypeDecoder Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecodeNullable "bot_type" Json.Decode.int Nothing
        |> maybeDecode "is_active" Json.Decode.bool Nothing


codedErrorDecoder : Json.Decode.Decoder CodedError
codedErrorDecoder =
    Json.Decode.succeed CodedError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing


codedErrorBaseDecoder : Json.Decode.Decoder CodedErrorBase
codedErrorBaseDecoder =
    Json.Decode.succeed CodedErrorBase
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecode "code" Json.Decode.string Nothing


customProfileFieldDecoder : Json.Decode.Decoder CustomProfileField
customProfileFieldDecoder =
    Json.Decode.succeed CustomProfileField
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "type" Json.Decode.int Nothing
        |> maybeDecode "order" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "hint" Json.Decode.string Nothing
        |> maybeDecode "field_data" Json.Decode.string Nothing


defaultStreamGroupDecoder : Json.Decode.Decoder DefaultStreamGroup
defaultStreamGroupDecoder =
    Json.Decode.succeed DefaultStreamGroup
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "streams" (Json.Decode.list basicStreamDecoder) Nothing


draftDecoder : Json.Decode.Decoder Draft
draftDecoder =
    Json.Decode.succeed Draft
        |> maybeDecode "id" Json.Decode.int Nothing
        |> decode "type"  
        |> decode "to" (Json.Decode.list Json.Decode.int) 
        |> decode "topic" Json.Decode.string 
        |> decode "content" Json.Decode.string 
        |> maybeDecode "timestamp" Json.Decode.float Nothing


draftTypeDecoder : Json.Decode.Decoder DraftType
draftTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "" ->
                        Json.Decode.succeed DraftTypeUnknownEnumVariableName

                    "stream" ->
                        Json.Decode.succeed DraftTypeStream

                    "private" ->
                        Json.Decode.succeed DraftTypePrivate

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



emojiBaseDecoder : Json.Decode.Decoder EmojiBase
emojiBaseDecoder =
    Json.Decode.succeed EmojiBase
        |> maybeDecode "emoji_code" Json.Decode.string Nothing
        |> maybeDecode "emoji_name" Json.Decode.string Nothing
        |> maybeDecode "reaction_type" Json.Decode.string Nothing


emojiReactionDecoder : Json.Decode.Decoder EmojiReaction
emojiReactionDecoder =
    Json.Decode.succeed EmojiReaction
        |> maybeDecodeNullable "emoji_code" anyTypeDecoder Nothing
        |> maybeDecodeNullable "emoji_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "reaction_type" anyTypeDecoder Nothing
        |> maybeDecodeNullable "user_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "user" anyTypeDecoder Nothing


emojiReactionBaseDecoder : Json.Decode.Decoder EmojiReactionBase
emojiReactionBaseDecoder =
    Json.Decode.succeed EmojiReactionBase
        |> maybeDecode "emoji_code" Json.Decode.string Nothing
        |> maybeDecode "emoji_name" Json.Decode.string Nothing
        |> maybeDecode "reaction_type" Json.Decode.string Nothing
        |> maybeDecode "user_id" Json.Decode.int Nothing
        |> maybeDecode "user" emojiReactionBaseAllOfUserDecoder Nothing


emojiReactionBaseAllOfUserDecoder : Json.Decode.Decoder EmojiReactionBaseAllOfUser
emojiReactionBaseAllOfUserDecoder =
    Json.Decode.succeed EmojiReactionBaseAllOfUser
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "full_name" Json.Decode.string Nothing
        |> maybeDecode "is_mirror_dummy" Json.Decode.bool Nothing


eventIdSchemaDecoder : Json.Decode.Decoder EventIdSchema
eventIdSchemaDecoder =
    Json.Decode.succeed EventIdSchema


eventTypeSchemaDecoder : Json.Decode.Decoder EventTypeSchema
eventTypeSchemaDecoder =
    Json.Decode.succeed EventTypeSchema


getMessagesDecoder : Json.Decode.Decoder GetMessages
getMessagesDecoder =
    Json.Decode.succeed GetMessages
        |> maybeDecodeNullable "avatar_url" anyTypeDecoder Nothing
        |> maybeDecodeNullable "client" anyTypeDecoder Nothing
        |> maybeDecodeNullable "content" anyTypeDecoder Nothing
        |> maybeDecodeNullable "content_type" anyTypeDecoder Nothing
        |> maybeDecodeNullable "display_recipient" anyTypeDecoder Nothing
        |> maybeDecodeNullable "id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_me_message" anyTypeDecoder Nothing
        |> maybeDecodeNullable "reactions" anyTypeDecoder Nothing
        |> maybeDecodeNullable "recipient_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_email" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_full_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_realm_str" anyTypeDecoder Nothing
        |> maybeDecodeNullable "stream_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "subject" anyTypeDecoder Nothing
        |> maybeDecodeNullable "topic_links" anyTypeDecoder Nothing
        |> maybeDecodeNullable "submessages" anyTypeDecoder Nothing
        |> maybeDecodeNullable "timestamp" anyTypeDecoder Nothing
        |> maybeDecodeNullable "type" anyTypeDecoder Nothing
        |> maybeDecode "flags" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "last_edit_timestamp" Json.Decode.int Nothing
        |> maybeDecode "match_content" Json.Decode.string Nothing
        |> maybeDecode "match_subject" Json.Decode.string Nothing


hotspotDecoder : Json.Decode.Decoder Hotspot
hotspotDecoder =
    Json.Decode.succeed Hotspot
        |> maybeDecode "delay" Json.Decode.float Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing


inlineResponse200Decoder : Json.Decode.Decoder InlineResponse200
inlineResponse200Decoder =
    Json.Decode.succeed InlineResponse200
        |> maybeDecode "bot_email" Json.Decode.string Nothing
        |> maybeDecode "bot_full_name" Json.Decode.string Nothing
        |> maybeDecode "data" Json.Decode.string Nothing
        |> maybeDecode "trigger" Json.Decode.string Nothing
        |> maybeDecode "token" Json.Decode.string Nothing
        |> maybeDecode "message" messagesBaseDecoder Nothing


invalidApiKeyErrorDecoder : Json.Decode.Decoder InvalidApiKeyError
invalidApiKeyErrorDecoder =
    Json.Decode.succeed InvalidApiKeyError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 


invalidMessageErrorDecoder : Json.Decode.Decoder InvalidMessageError
invalidMessageErrorDecoder =
    Json.Decode.succeed InvalidMessageError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecode "raw_content" Json.Decode.string Nothing


jsonErrorDecoder : Json.Decode.Decoder JsonError
jsonErrorDecoder =
    Json.Decode.succeed JsonError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 


jsonErrorBaseDecoder : Json.Decode.Decoder JsonErrorBase
jsonErrorBaseDecoder =
    Json.Decode.succeed JsonErrorBase
        |> decode "result"  
        |> decode "msg" Json.Decode.string 


jsonErrorBaseResult_Decoder : Json.Decode.Decoder JsonErrorBaseResult
jsonErrorBaseResult_Decoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "error" ->
                        Json.Decode.succeed JsonErrorBaseResult_Error

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



jsonResponseBaseDecoder : Json.Decode.Decoder JsonResponseBase
jsonResponseBaseDecoder =
    Json.Decode.succeed JsonResponseBase
        |> maybeDecode "result" Json.Decode.string Nothing


jsonSuccessDecoder : Json.Decode.Decoder JsonSuccess
jsonSuccessDecoder =
    Json.Decode.succeed JsonSuccess
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 


jsonSuccessBaseDecoder : Json.Decode.Decoder JsonSuccessBase
jsonSuccessBaseDecoder =
    Json.Decode.succeed JsonSuccessBase
        |> decode "result"  
        |> decode "msg" Json.Decode.string 


jsonSuccessBaseResult_Decoder : Json.Decode.Decoder JsonSuccessBaseResult
jsonSuccessBaseResult_Decoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "success" ->
                        Json.Decode.succeed JsonSuccessBaseResult_Success

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



messagesDecoder : Json.Decode.Decoder Messages
messagesDecoder =
    Json.Decode.succeed Messages
        |> maybeDecodeNullable "avatar_url" anyTypeDecoder Nothing
        |> maybeDecodeNullable "client" anyTypeDecoder Nothing
        |> maybeDecodeNullable "content" anyTypeDecoder Nothing
        |> maybeDecodeNullable "content_type" anyTypeDecoder Nothing
        |> maybeDecodeNullable "display_recipient" anyTypeDecoder Nothing
        |> maybeDecodeNullable "id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_me_message" anyTypeDecoder Nothing
        |> maybeDecodeNullable "reactions" anyTypeDecoder Nothing
        |> maybeDecodeNullable "recipient_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_email" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_full_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "sender_realm_str" anyTypeDecoder Nothing
        |> maybeDecodeNullable "stream_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "subject" anyTypeDecoder Nothing
        |> maybeDecodeNullable "topic_links" anyTypeDecoder Nothing
        |> maybeDecodeNullable "submessages" anyTypeDecoder Nothing
        |> maybeDecodeNullable "timestamp" anyTypeDecoder Nothing
        |> maybeDecodeNullable "type" anyTypeDecoder Nothing


messagesBaseDecoder : Json.Decode.Decoder MessagesBase
messagesBaseDecoder =
    Json.Decode.succeed MessagesBase
        |> maybeDecodeNullable "avatar_url" Json.Decode.string Nothing
        |> maybeDecode "client" Json.Decode.string Nothing
        |> maybeDecode "content" Json.Decode.string Nothing
        |> maybeDecode "content_type" Json.Decode.string Nothing
        |> maybeDecode "display_recipient" oneOfltstringarraygtDecoder Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "is_me_message" Json.Decode.bool Nothing
        |> maybeDecode "reactions" (Json.Decode.list emojiReactionDecoder) Nothing
        |> maybeDecode "recipient_id" Json.Decode.int Nothing
        |> maybeDecode "sender_email" Json.Decode.string Nothing
        |> maybeDecode "sender_full_name" Json.Decode.string Nothing
        |> maybeDecode "sender_id" Json.Decode.int Nothing
        |> maybeDecode "sender_realm_str" Json.Decode.string Nothing
        |> maybeDecode "stream_id" Json.Decode.int Nothing
        |> maybeDecode "subject" Json.Decode.string Nothing
        |> maybeDecode "topic_links" (Json.Decode.list messagesBaseTopicLinksDecoder) Nothing
        |> maybeDecode "submessages" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "timestamp" Json.Decode.int Nothing
        |> maybeDecode "type" Json.Decode.string Nothing


messagesBaseTopicLinksDecoder : Json.Decode.Decoder MessagesBaseTopicLinks
messagesBaseTopicLinksDecoder =
    Json.Decode.succeed MessagesBaseTopicLinks
        |> maybeDecode "text" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing


missingArgumentErrorDecoder : Json.Decode.Decoder MissingArgumentError
missingArgumentErrorDecoder =
    Json.Decode.succeed MissingArgumentError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing
        |> maybeDecode "var_name" Json.Decode.string Nothing


nonExistingStreamErrorDecoder : Json.Decode.Decoder NonExistingStreamError
nonExistingStreamErrorDecoder =
    Json.Decode.succeed NonExistingStreamError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing
        |> maybeDecode "stream" Json.Decode.string Nothing


presenceDecoder : Json.Decode.Decoder Presence
presenceDecoder =
    Json.Decode.succeed Presence
        |> maybeDecode "client" Json.Decode.string Nothing
        |> maybeDecode "status"  Nothing
        |> maybeDecode "timestamp" Json.Decode.int Nothing
        |> maybeDecode "pushable" Json.Decode.bool Nothing


presenceStatusDecoder : Json.Decode.Decoder PresenceStatus
presenceStatusDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "idle" ->
                        Json.Decode.succeed PresenceStatusIdle

                    "active" ->
                        Json.Decode.succeed PresenceStatusActive

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



rateLimitedErrorDecoder : Json.Decode.Decoder RateLimitedError
rateLimitedErrorDecoder =
    Json.Decode.succeed RateLimitedError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing


realmDeactivatedErrorDecoder : Json.Decode.Decoder RealmDeactivatedError
realmDeactivatedErrorDecoder =
    Json.Decode.succeed RealmDeactivatedError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing


realmDomainDecoder : Json.Decode.Decoder RealmDomain
realmDomainDecoder =
    Json.Decode.succeed RealmDomain
        |> maybeDecode "domain" Json.Decode.string Nothing
        |> maybeDecode "allow_subdomains" Json.Decode.bool Nothing


realmEmojiDecoder : Json.Decode.Decoder RealmEmoji
realmEmojiDecoder =
    Json.Decode.succeed RealmEmoji
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "source_url" Json.Decode.string Nothing
        |> maybeDecode "deactivated" Json.Decode.bool Nothing
        |> maybeDecodeNullable "author_id" Json.Decode.int Nothing


realmExportDecoder : Json.Decode.Decoder RealmExport
realmExportDecoder =
    Json.Decode.succeed RealmExport
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "acting_user_id" Json.Decode.int Nothing
        |> maybeDecode "export_time" Json.Decode.float Nothing
        |> maybeDecodeNullable "deleted_timestamp" Json.Decode.float Nothing
        |> maybeDecodeNullable "failed_timestamp" Json.Decode.float Nothing
        |> maybeDecodeNullable "export_url" Json.Decode.string Nothing
        |> maybeDecode "pending" Json.Decode.bool Nothing


realmPlaygroundDecoder : Json.Decode.Decoder RealmPlayground
realmPlaygroundDecoder =
    Json.Decode.succeed RealmPlayground
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "pygments_language" Json.Decode.string Nothing
        |> maybeDecode "url_prefix" Json.Decode.string Nothing


subscriptionsDecoder : Json.Decode.Decoder Subscriptions
subscriptionsDecoder =
    Json.Decode.succeed Subscriptions
        |> maybeDecode "stream_id" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "rendered_description" Json.Decode.string Nothing
        |> maybeDecode "date_created" Json.Decode.int Nothing
        |> maybeDecode "invite_only" Json.Decode.bool Nothing
        |> maybeDecode "subscribers" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecodeNullable "desktop_notifications" Json.Decode.bool Nothing
        |> maybeDecodeNullable "email_notifications" Json.Decode.bool Nothing
        |> maybeDecodeNullable "wildcard_mentions_notify" Json.Decode.bool Nothing
        |> maybeDecodeNullable "push_notifications" Json.Decode.bool Nothing
        |> maybeDecodeNullable "audible_notifications" Json.Decode.bool Nothing
        |> maybeDecode "pin_to_top" Json.Decode.bool Nothing
        |> maybeDecode "email_address" Json.Decode.string Nothing
        |> maybeDecode "is_muted" Json.Decode.bool Nothing
        |> maybeDecode "in_home_view" Json.Decode.bool Nothing
        |> maybeDecode "is_announcement_only" Json.Decode.bool Nothing
        |> maybeDecode "is_web_public" Json.Decode.bool Nothing
        |> maybeDecode "role" Json.Decode.int Nothing
        |> maybeDecode "color" Json.Decode.string Nothing
        |> maybeDecode "stream_post_policy" Json.Decode.int Nothing
        |> maybeDecodeNullable "message_retention_days" Json.Decode.int Nothing
        |> maybeDecode "history_public_to_subscribers" Json.Decode.bool Nothing
        |> maybeDecodeNullable "first_message_id" Json.Decode.int Nothing
        |> maybeDecodeNullable "stream_weekly_traffic" Json.Decode.int Nothing


subscriptionsRoleDecoder : Json.Decode.Decoder SubscriptionsRole
subscriptionsRoleDecoder =
    Json.Decode.int
        |> Json.Decode.andThen
            (\value ->
                case value of
                    20 ->
                        Json.Decode.succeed SubscriptionsRole20

                    50 ->
                        Json.Decode.succeed SubscriptionsRole50

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ String.fromInt other
            )



successDescriptionDecoder : Json.Decode.Decoder SuccessDescription
successDescriptionDecoder =
    Json.Decode.succeed SuccessDescription


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> maybeDecodeNullable "email" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_bot" anyTypeDecoder Nothing
        |> maybeDecodeNullable "avatar_url" anyTypeDecoder Nothing
        |> maybeDecodeNullable "avatar_version" anyTypeDecoder Nothing
        |> maybeDecodeNullable "full_name" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_admin" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_owner" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_billing_admin" anyTypeDecoder Nothing
        |> maybeDecodeNullable "role" anyTypeDecoder Nothing
        |> maybeDecodeNullable "bot_type" anyTypeDecoder Nothing
        |> maybeDecodeNullable "user_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "bot_owner_id" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_active" anyTypeDecoder Nothing
        |> maybeDecodeNullable "is_guest" anyTypeDecoder Nothing
        |> maybeDecodeNullable "timezone" anyTypeDecoder Nothing
        |> maybeDecodeNullable "date_joined" anyTypeDecoder Nothing
        |> maybeDecodeNullable "delivery_email" anyTypeDecoder Nothing
        |> maybeDecodeNullable "profile_data" anyTypeDecoder Nothing


userBaseDecoder : Json.Decode.Decoder UserBase
userBaseDecoder =
    Json.Decode.succeed UserBase
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "is_bot" Json.Decode.bool Nothing
        |> maybeDecodeNullable "avatar_url" Json.Decode.string Nothing
        |> maybeDecode "avatar_version" Json.Decode.int Nothing
        |> maybeDecode "full_name" Json.Decode.string Nothing
        |> maybeDecode "is_admin" Json.Decode.bool Nothing
        |> maybeDecode "is_owner" Json.Decode.bool Nothing
        |> maybeDecode "is_billing_admin" Json.Decode.bool Nothing
        |> maybeDecode "role" Json.Decode.int Nothing
        |> maybeDecodeNullable "bot_type" Json.Decode.int Nothing
        |> maybeDecode "user_id" Json.Decode.int Nothing
        |> maybeDecodeNullable "bot_owner_id" Json.Decode.int Nothing
        |> maybeDecode "is_active" Json.Decode.bool Nothing
        |> maybeDecode "is_guest" Json.Decode.bool Nothing
        |> maybeDecode "timezone" Json.Decode.string Nothing
        |> maybeDecode "date_joined" Json.Decode.string Nothing
        |> maybeDecode "delivery_email" Json.Decode.string Nothing
        |> maybeDecode "profile_data" (Json.Decode.dict objectDecoderobjectDecoder) Nothing


userBaseRoleDecoder : Json.Decode.Decoder UserBaseRole
userBaseRoleDecoder =
    Json.Decode.int
        |> Json.Decode.andThen
            (\value ->
                case value of
                    100 ->
                        Json.Decode.succeed UserBaseRole100

                    200 ->
                        Json.Decode.succeed UserBaseRole200

                    300 ->
                        Json.Decode.succeed UserBaseRole300

                    400 ->
                        Json.Decode.succeed UserBaseRole400

                    600 ->
                        Json.Decode.succeed UserBaseRole600

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ String.fromInt other
            )



userDeactivatedErrorDecoder : Json.Decode.Decoder UserDeactivatedError
userDeactivatedErrorDecoder =
    Json.Decode.succeed UserDeactivatedError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing


userGroupDecoder : Json.Decode.Decoder UserGroup
userGroupDecoder =
    Json.Decode.succeed UserGroup
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "members" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "id" Json.Decode.int Nothing


userNotAuthorizedErrorDecoder : Json.Decode.Decoder UserNotAuthorizedError
userNotAuthorizedErrorDecoder =
    Json.Decode.succeed UserNotAuthorizedError
        |> decodeNullable "result" anyTypeDecoder 
        |> decodeNullable "msg" anyTypeDecoder 
        |> maybeDecodeNullable "code" anyTypeDecoder Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f