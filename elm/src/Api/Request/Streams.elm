{-
   Zulip REST API
   Powerful open source group chat 

   The version of the OpenAPI document: 1.0.0

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Request.Streams exposing
    ( archiveStream
    , createBigBlueButtonVideoCall
    , getStreamId
    , getStreamTopics
    , getStreams
    , getSubscriptionStatus
    , getSubscriptions
    , muteTopic, Op(..), opVariants
    , subscribe
    , unsubscribe
    , updateStream
    , updateSubscriptionSettings
    , updateSubscriptions
    )

import Api
import Api.Data
import Dict
import Http
import Json.Decode
import Json.Encode


type Op
    = OpAdd
    | OpRemove


opVariants : List Op
opVariants =
    [ OpAdd
    , OpRemove
    ]


stringFromOp : Op -> String
stringFromOp model =
    case model of
        OpAdd ->
            "add"

        OpRemove ->
            "remove"





{-| [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 
-}
archiveStream : Int -> Api.Request Api.Data.JsonSuccess
archiveStream streamId_path =
    Api.request
        "DELETE"
        "/streams/{stream_id}"
        [ ( "streamId", String.fromInt streamId_path ) ]
        []
        []
        Nothing
        Api.Data.jsonSuccessDecoder



{-| Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
-}
createBigBlueButtonVideoCall : Api.Request Api.Data.JsonSuccessBase
createBigBlueButtonVideoCall =
    Api.request
        "GET"
        "/calls/bigbluebutton/create"
        []
        []
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 
-}
getStreamId : String -> Api.Request Api.Data.JsonSuccessBase
getStreamId stream_query =
    Api.request
        "GET"
        "/get_stream_id"
        []
        [ ( "stream", Just <| identity stream_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 
-}
getStreamTopics : Int -> Api.Request Api.Data.JsonSuccessBase
getStreamTopics streamId_path =
    Api.request
        "GET"
        "/users/me/{stream_id}/topics"
        [ ( "streamId", String.fromInt streamId_path ) ]
        []
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 
-}
getStreams : Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Api.Request Api.Data.JsonSuccessBase
getStreams includePublic_query includeWebPublic_query includeSubscribed_query includeAllActive_query includeDefault_query includeOwnerSubscribed_query =
    Api.request
        "GET"
        "/streams"
        []
        [ ( "include_public", Maybe.map (\val -> if val then "true" else "false") includePublic_query ), ( "include_web_public", Maybe.map (\val -> if val then "true" else "false") includeWebPublic_query ), ( "include_subscribed", Maybe.map (\val -> if val then "true" else "false") includeSubscribed_query ), ( "include_all_active", Maybe.map (\val -> if val then "true" else "false") includeAllActive_query ), ( "include_default", Maybe.map (\val -> if val then "true" else "false") includeDefault_query ), ( "include_owner_subscribed", Maybe.map (\val -> if val then "true" else "false") includeOwnerSubscribed_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 
-}
getSubscriptionStatus : Int -> Int -> Api.Request Api.Data.JsonSuccessBase
getSubscriptionStatus userId_path streamId_path =
    Api.request
        "GET"
        "/users/{user_id}/subscriptions/{stream_id}"
        [ ( "userId", String.fromInt userId_path ), ( "streamId", String.fromInt streamId_path ) ]
        []
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 
-}
getSubscriptions : Maybe Bool -> Api.Request Api.Data.JsonSuccessBase
getSubscriptions includeSubscribers_query =
    Api.request
        "GET"
        "/users/me/subscriptions"
        []
        [ ( "include_subscribers", Maybe.map (\val -> if val then "true" else "false") includeSubscribers_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 
-}
muteTopic : String -> Op -> Maybe String -> Maybe Int -> Api.Request Api.Data.JsonSuccess
muteTopic topic_query op_query stream_query streamId_query =
    Api.request
        "PATCH"
        "/users/me/subscriptions/muted_topics"
        []
        [ ( "stream", Maybe.map identity stream_query ), ( "stream_id", Maybe.map String.fromInt streamId_query ), ( "topic", Just <| identity topic_query ), ( "op", Just <| stringFromOp op_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessDecoder



{-| Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 
-}
subscribe : List Object -> Maybe List OneOf&lt;string,integer&gt; -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Api.Data.OneOf&lt;string,integer&gt; -> Api.Request Api.Data.OneOf&lt;object,object&gt;
subscribe subscriptions_query principals_query authorizationErrorsFatal_query announce_query inviteOnly_query historyPublicToSubscribers_query streamPostPolicy_query messageRetentionDays_query =
    Api.request
        "POST"
        "/users/me/subscriptions"
        []
        [ ( "subscriptions", Just <| String.join "," << List.map  subscriptions_query ), ( "principals", Maybe.map String.join "," << List.map  principals_query ), ( "authorization_errors_fatal", Maybe.map (\val -> if val then "true" else "false") authorizationErrorsFatal_query ), ( "announce", Maybe.map (\val -> if val then "true" else "false") announce_query ), ( "invite_only", Maybe.map (\val -> if val then "true" else "false") inviteOnly_query ), ( "history_public_to_subscribers", Maybe.map (\val -> if val then "true" else "false") historyPublicToSubscribers_query ), ( "stream_post_policy", Maybe.map String.fromInt streamPostPolicy_query ), ( "message_retention_days", Maybe.map  messageRetentionDays_query ) ]
        []
        Nothing
        Api.Data.oneOfltobjectobjectgtDecoder



{-| Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 
-}
unsubscribe : List String -> Maybe List OneOf&lt;string,integer&gt; -> Api.Request Api.Data.JsonSuccessBase
unsubscribe subscriptions_query principals_query =
    Api.request
        "DELETE"
        "/users/me/subscriptions"
        []
        [ ( "subscriptions", Just <| String.join "," << List.map identity subscriptions_query ), ( "principals", Maybe.map String.join "," << List.map  principals_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 
-}
updateStream : Int -> Maybe String -> Maybe String -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Api.Data.OneOf&lt;string,integer&gt; -> Api.Request Api.Data.JsonSuccess
updateStream streamId_path description_query newName_query isPrivate_query isAnnouncementOnly_query streamPostPolicy_query historyPublicToSubscribers_query messageRetentionDays_query =
    Api.request
        "PATCH"
        "/streams/{stream_id}"
        [ ( "streamId", String.fromInt streamId_path ) ]
        [ ( "description", Maybe.map identity description_query ), ( "new_name", Maybe.map identity newName_query ), ( "is_private", Maybe.map (\val -> if val then "true" else "false") isPrivate_query ), ( "is_announcement_only", Maybe.map (\val -> if val then "true" else "false") isAnnouncementOnly_query ), ( "stream_post_policy", Maybe.map String.fromInt streamPostPolicy_query ), ( "history_public_to_subscribers", Maybe.map (\val -> if val then "true" else "false") historyPublicToSubscribers_query ), ( "message_retention_days", Maybe.map  messageRetentionDays_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessDecoder



{-| This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 
-}
updateSubscriptionSettings : List Object -> Api.Request Api.Data.JsonSuccessBase
updateSubscriptionSettings subscriptionData_query =
    Api.request
        "POST"
        "/users/me/subscriptions/properties"
        []
        [ ( "subscription_data", Just <| String.join "," << List.map  subscriptionData_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder



{-| Update which streams you are are subscribed to. 
-}
updateSubscriptions : Maybe List String -> Maybe List Object -> Api.Request Api.Data.JsonSuccessBase
updateSubscriptions delete_query add_query =
    Api.request
        "PATCH"
        "/users/me/subscriptions"
        []
        [ ( "delete", Maybe.map String.join "," << List.map identity delete_query ), ( "add", Maybe.map String.join "," << List.map  add_query ) ]
        []
        Nothing
        Api.Data.jsonSuccessBaseDecoder
