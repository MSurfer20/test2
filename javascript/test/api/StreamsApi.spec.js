/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ZulipRestApi);
  }
}(this, function(expect, ZulipRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ZulipRestApi.StreamsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StreamsApi', function() {
    describe('archiveStream', function() {
      it('should call archiveStream successfully', function(done) {
        //uncomment below and update the code to test archiveStream
        //instance.archiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBigBlueButtonVideoCall', function() {
      it('should call createBigBlueButtonVideoCall successfully', function(done) {
        //uncomment below and update the code to test createBigBlueButtonVideoCall
        //instance.createBigBlueButtonVideoCall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreamId', function() {
      it('should call getStreamId successfully', function(done) {
        //uncomment below and update the code to test getStreamId
        //instance.getStreamId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreamTopics', function() {
      it('should call getStreamTopics successfully', function(done) {
        //uncomment below and update the code to test getStreamTopics
        //instance.getStreamTopics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStreams', function() {
      it('should call getStreams successfully', function(done) {
        //uncomment below and update the code to test getStreams
        //instance.getStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubscriptionStatus', function() {
      it('should call getSubscriptionStatus successfully', function(done) {
        //uncomment below and update the code to test getSubscriptionStatus
        //instance.getSubscriptionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSubscriptions', function() {
      it('should call getSubscriptions successfully', function(done) {
        //uncomment below and update the code to test getSubscriptions
        //instance.getSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('muteTopic', function() {
      it('should call muteTopic successfully', function(done) {
        //uncomment below and update the code to test muteTopic
        //instance.muteTopic(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribe', function() {
      it('should call subscribe successfully', function(done) {
        //uncomment below and update the code to test subscribe
        //instance.subscribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribe', function() {
      it('should call unsubscribe successfully', function(done) {
        //uncomment below and update the code to test unsubscribe
        //instance.unsubscribe(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStream', function() {
      it('should call updateStream successfully', function(done) {
        //uncomment below and update the code to test updateStream
        //instance.updateStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscriptionSettings', function() {
      it('should call updateSubscriptionSettings successfully', function(done) {
        //uncomment below and update the code to test updateSubscriptionSettings
        //instance.updateSubscriptionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSubscriptions', function() {
      it('should call updateSubscriptions successfully', function(done) {
        //uncomment below and update the code to test updateSubscriptions
        //instance.updateSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
