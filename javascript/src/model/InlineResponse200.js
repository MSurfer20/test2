/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessagesBase from './MessagesBase';

/**
 * The InlineResponse200 model module.
 * @module model/InlineResponse200
 * @version 1.0.0
 */
class InlineResponse200 {
    /**
     * Constructs a new <code>InlineResponse200</code>.
     * This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
     * @alias module:model/InlineResponse200
     */
    constructor() { 
        
        InlineResponse200.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineResponse200</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineResponse200} obj Optional instance to populate.
     * @return {module:model/InlineResponse200} The populated <code>InlineResponse200</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineResponse200();

            if (data.hasOwnProperty('bot_email')) {
                obj['bot_email'] = ApiClient.convertToType(data['bot_email'], 'String');
            }
            if (data.hasOwnProperty('bot_full_name')) {
                obj['bot_full_name'] = ApiClient.convertToType(data['bot_full_name'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], MessagesBase);
            }
        }
        return obj;
    }


}

/**
 * Email of the bot user. 
 * @member {String} bot_email
 */
InlineResponse200.prototype['bot_email'] = undefined;

/**
 * The full name of the bot user. 
 * @member {String} bot_full_name
 */
InlineResponse200.prototype['bot_full_name'] = undefined;

/**
 * The message content, in raw Markdown format (not rendered to HTML). 
 * @member {String} data
 */
InlineResponse200.prototype['data'] = undefined;

/**
 * What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`. 
 * @member {String} trigger
 */
InlineResponse200.prototype['trigger'] = undefined;

/**
 * A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot. 
 * @member {String} token
 */
InlineResponse200.prototype['token'] = undefined;

/**
 * A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages). 
 * @member {module:model/MessagesBase} message
 */
InlineResponse200.prototype['message'] = undefined;






export default InlineResponse200;

