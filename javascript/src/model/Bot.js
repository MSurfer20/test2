/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicBotBase from './BasicBotBase';
import BotAllOf from './BotAllOf';

/**
 * The Bot model module.
 * @module model/Bot
 * @version 1.0.0
 */
class Bot {
    /**
     * Constructs a new <code>Bot</code>.
     * @alias module:model/Bot
     * @implements module:model/BasicBotBase
     * @implements module:model/BotAllOf
     */
    constructor() { 
        BasicBotBase.initialize(this);BotAllOf.initialize(this);
        Bot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bot} obj Optional instance to populate.
     * @return {module:model/Bot} The populated <code>Bot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bot();
            BasicBotBase.constructFromObject(data, obj);
            BotAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], Object);
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], Object);
            }
            if (data.hasOwnProperty('api_key')) {
                obj['api_key'] = ApiClient.convertToType(data['api_key'], Object);
            }
            if (data.hasOwnProperty('default_sending_stream')) {
                obj['default_sending_stream'] = ApiClient.convertToType(data['default_sending_stream'], Object);
            }
            if (data.hasOwnProperty('default_events_register_stream')) {
                obj['default_events_register_stream'] = ApiClient.convertToType(data['default_events_register_stream'], Object);
            }
            if (data.hasOwnProperty('default_all_public_streams')) {
                obj['default_all_public_streams'] = ApiClient.convertToType(data['default_all_public_streams'], Object);
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], Object);
            }
            if (data.hasOwnProperty('owner_id')) {
                obj['owner_id'] = ApiClient.convertToType(data['owner_id'], Object);
            }
            if (data.hasOwnProperty('services')) {
                obj['services'] = ApiClient.convertToType(data['services'], Object);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('bot_type')) {
                obj['bot_type'] = ApiClient.convertToType(data['bot_type'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Object} user_id
 */
Bot.prototype['user_id'] = undefined;

/**
 * @member {Object} full_name
 */
Bot.prototype['full_name'] = undefined;

/**
 * @member {Object} api_key
 */
Bot.prototype['api_key'] = undefined;

/**
 * @member {Object} default_sending_stream
 */
Bot.prototype['default_sending_stream'] = undefined;

/**
 * @member {Object} default_events_register_stream
 */
Bot.prototype['default_events_register_stream'] = undefined;

/**
 * @member {Object} default_all_public_streams
 */
Bot.prototype['default_all_public_streams'] = undefined;

/**
 * @member {Object} avatar_url
 */
Bot.prototype['avatar_url'] = undefined;

/**
 * @member {Object} owner_id
 */
Bot.prototype['owner_id'] = undefined;

/**
 * @member {Object} services
 */
Bot.prototype['services'] = undefined;

/**
 * The email of the bot. 
 * @member {String} email
 */
Bot.prototype['email'] = undefined;

/**
 * An integer describing the type of bot: * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
 * @member {Number} bot_type
 */
Bot.prototype['bot_type'] = undefined;

/**
 * A boolean describing whether the user account has been deactivated. 
 * @member {Boolean} is_active
 */
Bot.prototype['is_active'] = undefined;


// Implement BasicBotBase interface:
/**
 * The user id of the bot. 
 * @member {Number} user_id
 */
BasicBotBase.prototype['user_id'] = undefined;
/**
 * The full name of the bot. 
 * @member {String} full_name
 */
BasicBotBase.prototype['full_name'] = undefined;
/**
 * The API key of the bot which it uses to make API requests. 
 * @member {String} api_key
 */
BasicBotBase.prototype['api_key'] = undefined;
/**
 * The default sending stream of the bot. Null if the bot doesn't have a default sending stream. 
 * @member {String} default_sending_stream
 */
BasicBotBase.prototype['default_sending_stream'] = undefined;
/**
 * The default stream for which the bot receives events/register data. Null if the bot doesn't have such a default stream. 
 * @member {String} default_events_register_stream
 */
BasicBotBase.prototype['default_events_register_stream'] = undefined;
/**
 * Whether the bot can send messages to all streams by default. 
 * @member {Boolean} default_all_public_streams
 */
BasicBotBase.prototype['default_all_public_streams'] = undefined;
/**
 * The URL of the bot's avatar. 
 * @member {String} avatar_url
 */
BasicBotBase.prototype['avatar_url'] = undefined;
/**
 * The user id of the bot's owner.  Null if the bot has no owner. 
 * @member {Number} owner_id
 */
BasicBotBase.prototype['owner_id'] = undefined;
/**
 * The \"Services\" array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
 * @member {Array.<module:model/OneOfobjectobject>} services
 */
BasicBotBase.prototype['services'] = undefined;
// Implement BotAllOf interface:
/**
 * @member {Object} user_id
 */
BotAllOf.prototype['user_id'] = undefined;
/**
 * @member {Object} full_name
 */
BotAllOf.prototype['full_name'] = undefined;
/**
 * @member {Object} api_key
 */
BotAllOf.prototype['api_key'] = undefined;
/**
 * @member {Object} default_sending_stream
 */
BotAllOf.prototype['default_sending_stream'] = undefined;
/**
 * @member {Object} default_events_register_stream
 */
BotAllOf.prototype['default_events_register_stream'] = undefined;
/**
 * @member {Object} default_all_public_streams
 */
BotAllOf.prototype['default_all_public_streams'] = undefined;
/**
 * @member {Object} avatar_url
 */
BotAllOf.prototype['avatar_url'] = undefined;
/**
 * @member {Object} owner_id
 */
BotAllOf.prototype['owner_id'] = undefined;
/**
 * @member {Object} services
 */
BotAllOf.prototype['services'] = undefined;
/**
 * The email of the bot. 
 * @member {String} email
 */
BotAllOf.prototype['email'] = undefined;
/**
 * An integer describing the type of bot: * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
 * @member {Number} bot_type
 */
BotAllOf.prototype['bot_type'] = undefined;
/**
 * A boolean describing whether the user account has been deactivated. 
 * @member {Boolean} is_active
 */
BotAllOf.prototype['is_active'] = undefined;




export default Bot;

