/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserBase model module.
 * @module model/UserBase
 * @version 1.0.0
 */
class UserBase {
    /**
     * Constructs a new <code>UserBase</code>.
     * A dictionary containing basic data on a given Zulip user. 
     * @alias module:model/UserBase
     */
    constructor() { 
        
        UserBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserBase} obj Optional instance to populate.
     * @return {module:model/UserBase} The populated <code>UserBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserBase();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('is_bot')) {
                obj['is_bot'] = ApiClient.convertToType(data['is_bot'], 'Boolean');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('avatar_version')) {
                obj['avatar_version'] = ApiClient.convertToType(data['avatar_version'], 'Number');
            }
            if (data.hasOwnProperty('full_name')) {
                obj['full_name'] = ApiClient.convertToType(data['full_name'], 'String');
            }
            if (data.hasOwnProperty('is_admin')) {
                obj['is_admin'] = ApiClient.convertToType(data['is_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('is_owner')) {
                obj['is_owner'] = ApiClient.convertToType(data['is_owner'], 'Boolean');
            }
            if (data.hasOwnProperty('is_billing_admin')) {
                obj['is_billing_admin'] = ApiClient.convertToType(data['is_billing_admin'], 'Boolean');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'Number');
            }
            if (data.hasOwnProperty('bot_type')) {
                obj['bot_type'] = ApiClient.convertToType(data['bot_type'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('bot_owner_id')) {
                obj['bot_owner_id'] = ApiClient.convertToType(data['bot_owner_id'], 'Number');
            }
            if (data.hasOwnProperty('is_active')) {
                obj['is_active'] = ApiClient.convertToType(data['is_active'], 'Boolean');
            }
            if (data.hasOwnProperty('is_guest')) {
                obj['is_guest'] = ApiClient.convertToType(data['is_guest'], 'Boolean');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('date_joined')) {
                obj['date_joined'] = ApiClient.convertToType(data['date_joined'], 'String');
            }
            if (data.hasOwnProperty('delivery_email')) {
                obj['delivery_email'] = ApiClient.convertToType(data['delivery_email'], 'String');
            }
            if (data.hasOwnProperty('profile_data')) {
                obj['profile_data'] = ApiClient.convertToType(data['profile_data'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
 * @member {String} email
 */
UserBase.prototype['email'] = undefined;

/**
 * A boolean specifying whether the user is a bot or full account. 
 * @member {Boolean} is_bot
 */
UserBase.prototype['is_bot'] = undefined;

/**
 * URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 
 * @member {String} avatar_url
 */
UserBase.prototype['avatar_url'] = undefined;

/**
 * Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 
 * @member {Number} avatar_version
 */
UserBase.prototype['avatar_version'] = undefined;

/**
 * Full name of the user or bot, used for all display purposes. 
 * @member {String} full_name
 */
UserBase.prototype['full_name'] = undefined;

/**
 * A boolean specifying whether the user is an organization administrator. 
 * @member {Boolean} is_admin
 */
UserBase.prototype['is_admin'] = undefined;

/**
 * A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
 * @member {Boolean} is_owner
 */
UserBase.prototype['is_owner'] = undefined;

/**
 * A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
 * @member {Boolean} is_billing_admin
 */
UserBase.prototype['is_billing_admin'] = undefined;

/**
 * [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 
 * @member {module:model/UserBase.RoleEnum} role
 */
UserBase.prototype['role'] = undefined;

/**
 * An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
 * @member {Number} bot_type
 */
UserBase.prototype['bot_type'] = undefined;

/**
 * The unique ID of the user. 
 * @member {Number} user_id
 */
UserBase.prototype['user_id'] = undefined;

/**
 * If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 
 * @member {Number} bot_owner_id
 */
UserBase.prototype['bot_owner_id'] = undefined;

/**
 * A boolean specifying whether the user account has been deactivated. 
 * @member {Boolean} is_active
 */
UserBase.prototype['is_active'] = undefined;

/**
 * A boolean specifying whether the user is a guest user. 
 * @member {Boolean} is_guest
 */
UserBase.prototype['is_guest'] = undefined;

/**
 * The time zone of the user. 
 * @member {String} timezone
 */
UserBase.prototype['timezone'] = undefined;

/**
 * The time the user account was created. 
 * @member {String} date_joined
 */
UserBase.prototype['date_joined'] = undefined;

/**
 * The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
 * @member {String} delivery_email
 */
UserBase.prototype['delivery_email'] = undefined;

/**
 * A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 
 * @member {Object.<String, Object>} profile_data
 */
UserBase.prototype['profile_data'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {Number}
 * @readonly
 */
UserBase['RoleEnum'] = {

    /**
     * value: 100
     * @const
     */
    "100": 100,

    /**
     * value: 200
     * @const
     */
    "200": 200,

    /**
     * value: 300
     * @const
     */
    "300": 300,

    /**
     * value: 400
     * @const
     */
    "400": 400,

    /**
     * value: 600
     * @const
     */
    "600": 600
};



export default UserBase;

