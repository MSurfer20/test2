/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JsonSuccess from '../model/JsonSuccess';
import JsonSuccessBase from '../model/JsonSuccessBase';

/**
* ServerAndOrganizations service.
* @module api/ServerAndOrganizationsApi
* @version 1.0.0
*/
export default class ServerAndOrganizationsApi {

    /**
    * Constructs a new ServerAndOrganizationsApi. 
    * @alias module:api/ServerAndOrganizationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCodePlayground operation.
     * @callback module:api/ServerAndOrganizationsApi~addCodePlaygroundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a code playground
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
     * @param {String} name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
     * @param {String} pygmentsLanguage The name of the Pygments language lexer for that programming language. 
     * @param {String} urlPrefix The url prefix for the playground. 
     * @param {module:api/ServerAndOrganizationsApi~addCodePlaygroundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    addCodePlayground(name, pygmentsLanguage, urlPrefix, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addCodePlayground");
      }
      // verify the required parameter 'pygmentsLanguage' is set
      if (pygmentsLanguage === undefined || pygmentsLanguage === null) {
        throw new Error("Missing the required parameter 'pygmentsLanguage' when calling addCodePlayground");
      }
      // verify the required parameter 'urlPrefix' is set
      if (urlPrefix === undefined || urlPrefix === null) {
        throw new Error("Missing the required parameter 'urlPrefix' when calling addCodePlayground");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'pygments_language': pygmentsLanguage,
        'url_prefix': urlPrefix
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/playgrounds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addLinkifier operation.
     * @callback module:api/ServerAndOrganizationsApi~addLinkifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a linkifier
     * Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 
     * @param {String} pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
     * @param {String} urlFormatString The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
     * @param {module:api/ServerAndOrganizationsApi~addLinkifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    addLinkifier(pattern, urlFormatString, callback) {
      let postBody = null;
      // verify the required parameter 'pattern' is set
      if (pattern === undefined || pattern === null) {
        throw new Error("Missing the required parameter 'pattern' when calling addLinkifier");
      }
      // verify the required parameter 'urlFormatString' is set
      if (urlFormatString === undefined || urlFormatString === null) {
        throw new Error("Missing the required parameter 'urlFormatString' when calling addLinkifier");
      }

      let pathParams = {
      };
      let queryParams = {
        'pattern': pattern,
        'url_format_string': urlFormatString
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/filters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCustomProfileField operation.
     * @callback module:api/ServerAndOrganizationsApi~createCustomProfileFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom profile field
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.  `POST {{ api_url }}/v1/realm/profile_fields` 
     * @param {Number} fieldType The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user's profile. 
     * @param {String} opts.hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
     * @param {Object} opts.fieldData Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
     * @param {module:api/ServerAndOrganizationsApi~createCustomProfileFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    createCustomProfileField(fieldType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldType' is set
      if (fieldType === undefined || fieldType === null) {
        throw new Error("Missing the required parameter 'fieldType' when calling createCustomProfileField");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'hint': opts['hint'],
        'field_type': fieldType,
        'field_data': opts['fieldData']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/profile_fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomEmoji operation.
     * @callback module:api/ServerAndOrganizationsApi~getCustomEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all custom emoji
     * Get all the custom emoji in the user's organization.  `GET {{ api_url }}/v1/realm/emoji` 
     * @param {module:api/ServerAndOrganizationsApi~getCustomEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    getCustomEmoji(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomProfileFields operation.
     * @callback module:api/ServerAndOrganizationsApi~getCustomProfileFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all custom profile fields
     * Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user's organization.  `GET {{ api_url }}/v1/realm/profile_fields` 
     * @param {module:api/ServerAndOrganizationsApi~getCustomProfileFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    getCustomProfileFields(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/profile_fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLinkifiers operation.
     * @callback module:api/ServerAndOrganizationsApi~getLinkifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get linkifiers
     * List all of an organization's configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 
     * @param {module:api/ServerAndOrganizationsApi~getLinkifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    getLinkifiers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/realm/linkifiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerSettings operation.
     * @callback module:api/ServerAndOrganizationsApi~getServerSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccessBase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get server settings
     * Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it's running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
     * @param {module:api/ServerAndOrganizationsApi~getServerSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccessBase}
     */
    getServerSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccessBase;
      return this.apiClient.callApi(
        '/server_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCodePlayground operation.
     * @callback module:api/ServerAndOrganizationsApi~removeCodePlaygroundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a code playground
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 
     * @param {Number} playgroundId The ID of the playground that you want to remove. 
     * @param {module:api/ServerAndOrganizationsApi~removeCodePlaygroundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccess}
     */
    removeCodePlayground(playgroundId, callback) {
      let postBody = null;
      // verify the required parameter 'playgroundId' is set
      if (playgroundId === undefined || playgroundId === null) {
        throw new Error("Missing the required parameter 'playgroundId' when calling removeCodePlayground");
      }

      let pathParams = {
        'playground_id': playgroundId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccess;
      return this.apiClient.callApi(
        '/realm/playgrounds/{playground_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLinkifier operation.
     * @callback module:api/ServerAndOrganizationsApi~removeLinkifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a linkifier
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 
     * @param {Number} filterId The ID of the linkifier that you want to remove. 
     * @param {module:api/ServerAndOrganizationsApi~removeLinkifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccess}
     */
    removeLinkifier(filterId, callback) {
      let postBody = null;
      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling removeLinkifier");
      }

      let pathParams = {
        'filter_id': filterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccess;
      return this.apiClient.callApi(
        '/realm/filters/{filter_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reorderCustomProfileFields operation.
     * @callback module:api/ServerAndOrganizationsApi~reorderCustomProfileFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reorder custom profile fields
     * Reorder the custom profile fields in the user's organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
     * @param {Array.<Number>} order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
     * @param {module:api/ServerAndOrganizationsApi~reorderCustomProfileFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccess}
     */
    reorderCustomProfileFields(order, callback) {
      let postBody = null;
      // verify the required parameter 'order' is set
      if (order === undefined || order === null) {
        throw new Error("Missing the required parameter 'order' when calling reorderCustomProfileFields");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': this.apiClient.buildCollectionParam(order, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccess;
      return this.apiClient.callApi(
        '/realm/profile_fields', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLinkifier operation.
     * @callback module:api/ServerAndOrganizationsApi~updateLinkifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a linkifier
     * Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 
     * @param {Number} filterId The ID of the linkifier that you want to update. 
     * @param {String} pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
     * @param {String} urlFormatString The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
     * @param {module:api/ServerAndOrganizationsApi~updateLinkifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccess}
     */
    updateLinkifier(filterId, pattern, urlFormatString, callback) {
      let postBody = null;
      // verify the required parameter 'filterId' is set
      if (filterId === undefined || filterId === null) {
        throw new Error("Missing the required parameter 'filterId' when calling updateLinkifier");
      }
      // verify the required parameter 'pattern' is set
      if (pattern === undefined || pattern === null) {
        throw new Error("Missing the required parameter 'pattern' when calling updateLinkifier");
      }
      // verify the required parameter 'urlFormatString' is set
      if (urlFormatString === undefined || urlFormatString === null) {
        throw new Error("Missing the required parameter 'urlFormatString' when calling updateLinkifier");
      }

      let pathParams = {
        'filter_id': filterId
      };
      let queryParams = {
        'pattern': pattern,
        'url_format_string': urlFormatString
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonSuccess;
      return this.apiClient.callApi(
        '/realm/filters/{filter_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadCustomEmoji operation.
     * @callback module:api/ServerAndOrganizationsApi~uploadCustomEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonSuccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload custom emoji
     * This endpoint is used to upload a custom emoji for use in the user's organization.  Access to this endpoint depends on the [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 
     * @param {String} emojiName The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
     * @param {Object} opts Optional parameters
     * @param {File} opts.filename 
     * @param {module:api/ServerAndOrganizationsApi~uploadCustomEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonSuccess}
     */
    uploadCustomEmoji(emojiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emojiName' is set
      if (emojiName === undefined || emojiName === null) {
        throw new Error("Missing the required parameter 'emojiName' when calling uploadCustomEmoji");
      }

      let pathParams = {
        'emoji_name': emojiName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filename': opts['filename']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = JsonSuccess;
      return this.apiClient.callApi(
        '/realm/emoji/{emoji_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
