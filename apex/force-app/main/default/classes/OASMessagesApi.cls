/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASMessagesApi {
    OASClient client;

    public OASMessagesApi(OASClient client) {
        this.client = client;
    }

    public OASMessagesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Add an emoji reaction
     * Add an [emoji reaction](/help/emoji-reactions) to a message.\n\n&#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60;\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @param emojiName The target emoji\&#39;s human-readable name.\n\nTo find an emoji\&#39;s name, hover over a message to reveal\nthree icons on the right, then click the smiley face icon.\nImages of available reaction emojis appear. Hover over the\nemoji you want, and note that emoji\&#39;s text name.\n (required)
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested,\nwithin the namespace of the &#x60;reaction_type&#x60;.\n\nFor most API clients, you won\&#39;t need this, but it\&#39;s important\nfor Zulip apps to handle rare corner cases when\nadding/removing votes on an emoji reaction added previously by\nanother user.\n\nIf the existing reaction was added when the Zulip server was\nusing a previous version of the emoji data mapping between\nUnicode codepoints and human-readable names, sending the\n&#x60;emoji_code&#x60; in the data for the original reaction allows the\nZulip server to correctly interpret your upvote as an upvote\nrather than a reaction with a &quot;diffenent&quot; emoji.\n (optional)
     * @param reactionType If an app is adding/removing a vote on an existing reaction,\nit should pass this parameter using the value the server provided\nfor the existing reaction for specificity.  Supported values:\n\n* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint).\n* &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID).\n* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to\n   namespace the &#x60;zulip&#x60; emoji.\n\n**Changes**: In Zulip 3.0 (feature level 2), this become\noptional for [custom emoji](/help/add-custom-emoji);\npreviously, this endpoint assumed &#x60;unicode_emoji&#x60; if this\nparameter was not specified.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess addReaction(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        client.assertNotNull(params.get('emojiName'), 'emojiName');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('emoji_name', (String) params.get('emojiName')));
        query.addAll(client.makeParam('emoji_code', (String) params.get('emojiCode')));
        query.addAll(client.makeParam('reaction_type', (String) params.get('reactionType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/messages/{message_id}/reactions', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Check if messages match a narrow
     * Check whether a set of messages match a [narrow](/api/construct-narrow).\n\n&#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;\n\nFor many common narrows (E.g. a topic), clients can write an\nefficient client-side check to determine whether a\nnewly arrived message belongs in the view.\n\nThis endpoint is designed to allow clients to handle more complex narrows\nfor which the client does not (or in the case of full-text search,\ncannot) implement this check.\n\nThe format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match\nthose of &#x60;GET /messages&#x60;, so that a client can splice these fields into a\n&#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message\nobject identical to how a &#x60;GET /messages&#x60; for the current narrow would have\nreturned the message.\n
     * @param msgIds List of IDs for the messages to check. (required)
     * @param narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). (required)
     * @return oas_any_type_not_mapped
     * @throws OAS.ApiException if fails to make API call
     */
    public oas_any_type_not_mapped checkMessagesMatchNarrow(Map<String, Object> params) {
        client.assertNotNull(params.get('msgIds'), 'msgIds');
        client.assertNotNull(params.get('narrow'), 'narrow');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('msg_ids', (List<Integer>) params.get('msgIds')));
        query.addAll(client.makeParams('narrow', (List<Object>) params.get('narrow')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (oas_any_type_not_mapped) client.invoke(
            'GET', '/messages/matches_narrow', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            oas_any_type_not_mapped.class
        );
    }
    /**
     * Delete a message
     * Permanently delete a message.\n\n&#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;\n\nThis API corresponds to the\n[delete a message completely][delete-completely] feature documented in\nthe Zulip Help Center.\n\n[delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess deleteMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/messages/{message_id}', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Get public temporary URL
     * Get a temporary URL for access to the file that doesn\&#39;t require authentication.\n
     * @param realmIdStr The realm id.\n (required)
     * @param filename Path to the URL.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getFileTemporaryUrl(Map<String, Object> params) {
        client.assertNotNull(params.get('realmIdStr'), 'realmIdStr');
        client.assertNotNull(params.get('filename'), 'filename');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/user_uploads/{realm_id_str}/{filename}', '',
            query, form,
            new Map<String, Object>{
                'realm_id_str' => (Integer) params.get('realmIdStr'),
                'filename' => (String) params.get('filename')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get a message\&#39;s edit history
     * Fetch the message edit history of a previously edited message.\n\n&#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;\n\nNote that edit history may be disabled in some organizations; see the\n[Zulip Help Center documentation on editing messages][edit-settings].\n\n[edit-settings]: /help/view-a-messages-edit-history\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getMessageHistory(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/messages/{message_id}/history', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get messages
     * Fetch message history from a Zulip server.\n\n&#x60;GET {{ api_url }}/v1/messages&#x60;\n\nThis &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch\nmessage history from a Zulip server.  It is useful both for Zulip\nclients (e.g. the web, desktop, mobile, and terminal clients) as well\nas bots, API clients, backup scripts, etc.\n\nBy specifying a [narrow filter](/api/construct-narrow), you can use\nthis endpoint to fetch the messages matching any search query that is\nsupported by Zulip\&#39;s powerful full-text search backend.\n\nWhen a narrow is not specified, it can be used to fetch a user\&#39;s\nmessage history. (We recommend paginating to 1000 messages at a time.)\n\nIn either case, you specify an &#x60;anchor&#x60; message (or ask the server to\ncalculate the first unread message for you and use that as the\nanchor), as well as a number of messages before and after the anchor\nmessage.  The server returns those messages, sorted by message ID, as\nwell as some metadata that makes it easy for a client to determine\nwhether there are more messages matching the query that were not\nreturned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.\n\nWe recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to\navoid generating very large HTTP responses. A maximum of 5000 messages\ncan be obtained per request; attempting to exceed this will result in an\nerror.\n
     * @param numBefore The number of messages with IDs less than the anchor to retrieve.\n (required)
     * @param numAfter The number of messages with IDs greater than the anchor to retrieve.\n (required)
     * @param anchor Integer message ID to anchor fetching of new messages. Supports special\nstring values for when the client wants the server to compute the anchor\nto use:\n\n* &#x60;newest&#x60;: The most recent message.\n* &#x60;oldest&#x60;: The oldest message.\n* &#x60;first_unread&#x60;: The oldest unread message matching the\n  query, if any; otherwise, the most recent message.\n\nThe special values of &#x60;\&#39;newest\&#39;&#x60; and &#x60;\&#39;oldest\&#39;&#x60; are also supported\nfor anchoring the query at the most recent or oldest messages.\n\n**Changes**: String values are new in Zulip 3.0 (feature level 1).  The\n  &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x\n  and older by not sending anchor and using use_first_unread_anchor.\n\n  In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with\n  &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;\n  (that specific large value works around a bug in Zulip\n  2.1.x and older in the &#x60;found_newest&#x60; return value).\n (optional)
     * @param narrow The narrow where you want to fetch the messages from. See how to\n[construct a narrow](/api/construct-narrow).\n (optional, default to new List<Object>())
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If\nenabled, &#x60;avatar_url&#x60; will be included in the response only\nif there is a Zulip avatar, and will be &#x60;null&#x60; for users who\nare using gravatar as their avatar.  This option\nsignificantly reduces the compressed size of user data,\nsince gravatar URLs are long, random strings and thus do not\ncompress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if\nclients can compute their own gravatars.\n (optional, default to false)
     * @param applyMarkdown If &#x60;true&#x60;, message content is returned in the rendered HTML\nformat. If &#x60;false&#x60;, message content is returned in the raw\nMarkdown-format text that user entered.\n (optional, default to true)
     * @param useFirstUnreadAnchor Legacy way to specify &#x60;anchor&#x3D;&quot;first_unread&quot;&#x60; in Zulip 2.1.x and older.\n\nWhether to use the (computed by the server) first unread message\nmatching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.\n\n**Changes**: Deprecated in Zulip 3.0, replaced by\n&#x60;anchor&#x3D;&quot;first_unread&quot;&#x60; instead.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getMessages(Map<String, Object> params) {
        client.assertNotNull(params.get('numBefore'), 'numBefore');
        client.assertNotNull(params.get('numAfter'), 'numAfter');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('anchor', (OASOneOfstringinteger) params.get('anchor')));
        query.addAll(client.makeParam('num_before', (Integer) params.get('numBefore')));
        query.addAll(client.makeParam('num_after', (Integer) params.get('numAfter')));
        query.addAll(client.makeParams('narrow', (List<Object>) params.get('narrow')));
        query.addAll(client.makeParam('client_gravatar', (Boolean) params.get('clientGravatar')));
        query.addAll(client.makeParam('apply_markdown', (Boolean) params.get('applyMarkdown')));
        query.addAll(client.makeParam('use_first_unread_anchor', (Boolean) params.get('useFirstUnreadAnchor')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/messages', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get a message\&#39;s raw Markdown
     * Get the raw content of a message.\n\n&#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;\n\nThis is a rarely-used endpoint relevant for clients that primarily\nwork with HTML-rendered messages but might need to occasionally fetch\nthe message\&#39;s raw Markdown (e.g. for pre-filling a message-editing\nUI).\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getRawMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/messages/{message_id}', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Mark all messages as read
     * Marks all of the current user\&#39;s unread messages as read.\n\n&#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60;\n
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess markAllAsRead() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/mark_all_as_read', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Mark messages in a stream as read
     * Mark all the unread messages in a stream as read.\n
     * @param streamId The ID of the stream to access.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess markStreamAsRead(Map<String, Object> params) {
        client.assertNotNull(params.get('streamId'), 'streamId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('stream_id', (Integer) params.get('streamId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/mark_stream_as_read', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Mark messages in a topic as read
     * Mark all the unread messages in a topic as read.\n
     * @param streamId The ID of the stream to access.\n (required)
     * @param topicName The name of the topic whose messages should be marked as read.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess markTopicAsRead(Map<String, Object> params) {
        client.assertNotNull(params.get('streamId'), 'streamId');
        client.assertNotNull(params.get('topicName'), 'topicName');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('stream_id', (Integer) params.get('streamId')));
        query.addAll(client.makeParam('topic_name', (String) params.get('topicName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/mark_topic_as_read', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Remove an emoji reaction
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.\n\n&#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60;\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @param emojiName The target emoji\&#39;s human-readable name.\n\nTo find an emoji\&#39;s name, hover over a message to reveal\nthree icons on the right, then click the smiley face icon.\nImages of available reaction emojis appear. Hover over the\nemoji you want, and note that emoji\&#39;s text name.\n (optional)
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested,\nwithin the namespace of the &#x60;reaction_type&#x60;.\n\nFor most API clients, you won\&#39;t need this, but it\&#39;s important\nfor Zulip apps to handle rare corner cases when\nadding/removing votes on an emoji reaction added previously by\nanother user.\n\nIf the existing reaction was added when the Zulip server was\nusing a previous version of the emoji data mapping between\nUnicode codepoints and human-readable names, sending the\n&#x60;emoji_code&#x60; in the data for the original reaction allows the\nZulip server to correctly interpret your upvote as an upvote\nrather than a reaction with a &quot;diffenent&quot; emoji.\n (optional)
     * @param reactionType If an app is adding/removing a vote on an existing reaction,\nit should pass this parameter using the value the server provided\nfor the existing reaction for specificity.  Supported values:\n\n* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint).\n* &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID).\n* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to\n   namespace the &#x60;zulip&#x60; emoji.\n\n**Changes**: In Zulip 3.0 (feature level 2), this become\noptional for [custom emoji](/help/add-custom-emoji);\npreviously, this endpoint assumed &#x60;unicode_emoji&#x60; if this\nparameter was not specified.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess removeReaction(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('emoji_name', (String) params.get('emojiName')));
        query.addAll(client.makeParam('emoji_code', (String) params.get('emojiCode')));
        query.addAll(client.makeParam('reaction_type', (String) params.get('reactionType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/messages/{message_id}/reactions', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Render message
     * Render a message to HTML.\n\n&#x60;POST {{ api_url }}/v1/messages/render&#x60;\n
     * @param content The content of the message. Maximum message size of 10000 bytes.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase renderMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('content'), 'content');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('content', (String) params.get('content')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/messages/render', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Send a message
     * Send a stream or a private message.\n\n&#x60;POST {{ api_url }}/v1/messages&#x60;\n
     * @param type The type of message to be sent. &#x60;private&#x60; for a private message and\n&#x60;stream&#x60; for a stream message.\n (required)
     * @param to For stream messages, either the name or integer ID of the stream. For\nprivate messages, either a list containing integer user IDs or a list\ncontaining string email addresses.\n\n**Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.\n (required)
     * @param content The content of the message. Maximum message size of 10000 bytes.\n (required)
     * @param topic The topic of the message. Only required for stream messages\n(&#x60;type&#x3D;&quot;stream&quot;&#x60;), ignored otherwise.\n\nMaximum length of 60 characters.\n\n**Changes**: New in Zulip 2.0.  Previous Zulip releases encoded\nthis as &#x60;subject&#x60;, which is currently a deprecated alias.\n (optional)
     * @param queueId For clients supporting\n[local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo),\nthe [event queue](/api/register-queue)\nID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is\nsuccessfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event\nthat the client with this &#x60;queue_id&#x60; will receive notifying it of the new message\nvia [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously\nthat it should replace the locally echoed message, rather than adding this new\nmessage (which would be correct if the user had sent the new message from another\ndevice).\n (optional)
     * @param localId For clients supporting local echo, a unique string-format identifier\nchosen freely by the client; the server will pass it back to the client without\ninspecting it, as described in the &#x60;queue_id&#x60; description.\n (optional)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase sendMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('type'), 'type');
        client.assertNotNull(params.get('to'), 'to');
        client.assertNotNull(params.get('content'), 'content');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('type', (String) params.get('type')));
        query.addAll(client.makeParams('to', (List<Integer>) params.get('to')));
        query.addAll(client.makeParam('content', (String) params.get('content')));
        query.addAll(client.makeParam('topic', (String) params.get('topic')));
        query.addAll(client.makeParam('queue_id', (String) params.get('queueId')));
        query.addAll(client.makeParam('local_id', (String) params.get('localId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/messages', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Edit a message
     * Edit/update the content or topic of a message.\n\n&#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;\n\n&#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the\nmessage you wish you update.\n\nYou can [resolve topics](/help/resolve-a-topic) by editing the\ntopic to &#x60;✔ {original_topic}&#x60;.\n\n**Note**: See [configuring message\nediting][config-message-editing] for detailed documentation on\nwhen users are allowed to edit topics.\n\n[config-message-editing]: /help/configure-message-editing-and-deletion\n
     * @param messageId The target message\&#39;s ID.\n (required)
     * @param topic The topic to move the message(s) to, to request changing the topic.\nShould only be sent when changing the topic, and will throw an error\nif the target message is not a stream message.\n\nMaximum length of 60 characters.\n\n**Changes**: New in Zulip 2.0.  Previous Zulip releases encoded\nthis as &#x60;subject&#x60;, which is currently a deprecated alias.\n (optional)
     * @param propagateMode Which message(s) should be edited: just the one indicated in\n&#x60;message_id&#x60;, messages in the same topic that had been sent after this\none, or all of them.\n\nOnly the default value of &#x60;change_one&#x60; is valid when\nediting only the content of a message.\n\nThis parameter determines both which messages get moved and also whether\nclients that are currently narrowed to the topic containing the message\nshould navigate or adjust their compose box recipient to point to the\npost-edit stream/topic.\n (optional, default to change_one)
     * @param sendNotificationToOldThread Whether to send breadcrumb message to the old thread to\nnotify users where the messages were moved to.\n\n**Changes**: New in Zulip 3.0 (feature level 9).\n (optional, default to true)
     * @param sendNotificationToNewThread Whether to send a notification message to the new thread to\nnotify users where the messages came from.\n\n**Changes**: New in Zulip 3.0 (feature level 9).\n (optional, default to true)
     * @param content The content of the message. Maximum message size of 10000 bytes.\n (optional)
     * @param streamId The stream ID to move the message(s) to, to request moving\nmessages to another stream.\n\nShould only be sent when changing the stream, and will throw an error\nif the target message is not a stream message.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateMessage(Map<String, Object> params) {
        client.assertNotNull(params.get('messageId'), 'messageId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('topic', (String) params.get('topic')));
        query.addAll(client.makeParam('propagate_mode', (String) params.get('propagateMode')));
        query.addAll(client.makeParam('send_notification_to_old_thread', (Boolean) params.get('sendNotificationToOldThread')));
        query.addAll(client.makeParam('send_notification_to_new_thread', (Boolean) params.get('sendNotificationToNewThread')));
        query.addAll(client.makeParam('content', (String) params.get('content')));
        query.addAll(client.makeParam('stream_id', (Integer) params.get('streamId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/messages/{message_id}', '',
            query, form,
            new Map<String, Object>{
                'message_id' => (Integer) params.get('messageId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update personal message flags
     * Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60;\non a collection of message IDs.\n\n&#x60;POST {{ api_url }}/v1/messages/flags&#x60;\n\nFor updating the &#x60;read&#x60; flag on common collections of messages, see also\nthe\n[special endpoints for marking message as read in bulk](/api/mark-all-as-read).\n
     * @param messages An array containing the IDs of the target messages.\n (required)
     * @param op Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it.\n (required)
     * @param flag The flag that should be added/removed.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase updateMessageFlags(Map<String, Object> params) {
        client.assertNotNull(params.get('messages'), 'messages');
        client.assertNotNull(params.get('op'), 'op');
        client.assertNotNull(params.get('flag'), 'flag');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('messages', (List<Integer>) params.get('messages')));
        query.addAll(client.makeParam('op', (String) params.get('op')));
        query.addAll(client.makeParam('flag', (String) params.get('flag')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/messages/flags', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Upload a file
     * Upload a single file and get the corresponding URI.\n\n&#x60;POST {{ api_url }}/v1/user_uploads&#x60;\n\nInitially, only you will be able to access the link.  To share the\nuploaded file, you\&#39;ll need to [send a message][send-message]\ncontaining the resulting link.  Users who can already access the link\ncan reshare it with other users by sending additional Zulip messages\ncontaining the link.\n\n[uploaded-files]: /help/manage-your-uploaded-files\n[send-message]: /api/send-message\n
     * @param filename  (optional)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase uploadFile(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('filename', (Blob) params.get('filename')));

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/user_uploads', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
}
