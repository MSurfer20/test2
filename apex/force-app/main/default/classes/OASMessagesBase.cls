/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Object containing details of the message.\n
 */
public class OASMessagesBase implements OAS.MappedProperties {
    /**
     * The URL of the user\'s avatar.  Can be null only if client_gravatar was passed,\nwhich means that the user has not uploaded an avatar in Zulip, and the\nclient should compute the gravatar URL by hashing the\nuser\'s email address itself for this user.\n
     * @return avatarUrl
     */
    public String avatarUrl { get; set; }

    /**
     * A Zulip "client" string, describing what Zulip client\nsent the message.\n
     * @return client
     */
    public String client { get; set; }

    /**
     * The content/body of the message.\n
     * @return content
     */
    public String content { get; set; }

    /**
     * The HTTP `content_type` for the message content.  This\nwill be `text/html` or `text/x-markdown`, depending on\nwhether `apply_markdown` was set.\n
     * @return contentType
     */
    public String contentType { get; set; }

    /**
     * Data on the recipient of the message;\neither the name of a stream or a dictionary containing basic data on\nthe users who received the message.\n
     * @return displayRecipient
     */
    public OASOneOfstringarray displayRecipient { get; set; }

    /**
     * The unique message ID.  Messages should always be\ndisplayed sorted by ID.\n
     * @return id
     */
    public Integer id { get; set; }

    /**
     * Whether the message is a [/me status message][status-messages]\n\n[status-messages]: /help/format-your-message-using-markdown#status-messages\n
     * @return isMeMessage
     */
    public Boolean isMeMessage { get; set; }

    /**
     * Data on any reactions to the message.\n
     * @return reactions
     */
    public List<OASEmojiReaction> reactions { get; set; }

    /**
     * A unique ID for the set of users receiving the\nmessage (either a stream or group of users).  Useful primarily\nfor hashing.\n
     * @return recipientId
     */
    public Integer recipientId { get; set; }

    /**
     * The Zulip display email address of the message\'s sender.\n
     * @return senderEmail
     */
    public String senderEmail { get; set; }

    /**
     * The full name of the message\'s sender.\n
     * @return senderFullName
     */
    public String senderFullName { get; set; }

    /**
     * The user ID of the message\'s sender.\n
     * @return senderId
     */
    public Integer senderId { get; set; }

    /**
     * A string identifier for the realm the sender is in.  Unique only within\nthe context of a given Zulip server.\n\nE.g. on `example.zulip.com`, this will be `example`.\n
     * @return senderRealmStr
     */
    public String senderRealmStr { get; set; }

    /**
     * Only present for stream messages; the ID of the stream.\n
     * @return streamId
     */
    public Integer streamId { get; set; }

    /**
     * The `topic` of the message.  Currently always `""` for private messages,\nthough this could change if Zulip adds support for topics in private\nmessage conversations.\n\nThe field name is a legacy holdover from when topics were\ncalled "subjects" and will eventually change.\n
     * @return subject
     */
    public String subject { get; set; }

    /**
     * Data on any links to be included in the `topic`\nline (these are generated by [custom linkification\nfilters](/help/add-a-custom-linkifier) that match content in the\nmessage\'s topic.)\n\n**Changes**: This field contained a list of urls before\n  Zulip 4.0 (feature level 46).\n\nNew in Zulip 3.0 (feature level 1): Previously, this field was called\n`subject_links`; clients are recommended to rename `subject_links` to `topic_links`\nif present for compatibility with older Zulip servers.\n
     * @return topicLinks
     */
    public List<OASMessagesBaseTopicLinks> topicLinks { get; set; }

    /**
     * Data used for certain experimental Zulip integrations.\n
     * @return submessages
     */
    public List<String> submessages { get; set; }

    /**
     * The UNIX timestamp for when the message was sent,\nin UTC seconds.\n
     * @return timestamp
     */
    public Integer timestamp { get; set; }

    /**
     * The type of the message: `stream` or `private`.\n
     * @return type
     */
    public String type { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASMessagesBase() {
        reactions = new List<OASEmojiReaction>();
        topicLinks = new List<OASMessagesBaseTopicLinks>();
        submessages = new List<String>();
    }

    public static OASMessagesBase getExample() {
        OASMessagesBase messagesBase = new OASMessagesBase();
          messagesBase.avatarUrl = '';
          messagesBase.client = '';
          messagesBase.content = '';
          messagesBase.contentType = '';
          messagesBase.displayRecipient = OASOneOfstringarray.getExample();
          messagesBase.id = 0;
          messagesBase.isMeMessage = true;
          messagesBase.reactions = new List<OASEmojiReaction>{OASEmojiReaction.getExample()};
          messagesBase.recipientId = 0;
          messagesBase.senderEmail = '';
          messagesBase.senderFullName = '';
          messagesBase.senderId = 0;
          messagesBase.senderRealmStr = '';
          messagesBase.streamId = 0;
          messagesBase.subject = '';
          messagesBase.topicLinks = new List<OASMessagesBaseTopicLinks>{OASMessagesBaseTopicLinks.getExample()};
          messagesBase.submessages = new List<String>{''};
          messagesBase.timestamp = 0;
          messagesBase.type = '';
        return messagesBase;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASMessagesBase) {           
            OASMessagesBase messagesBase = (OASMessagesBase) obj;
            return this.avatarUrl == messagesBase.avatarUrl
                && this.client == messagesBase.client
                && this.content == messagesBase.content
                && this.contentType == messagesBase.contentType
                && this.displayRecipient == messagesBase.displayRecipient
                && this.id == messagesBase.id
                && this.isMeMessage == messagesBase.isMeMessage
                && this.reactions == messagesBase.reactions
                && this.recipientId == messagesBase.recipientId
                && this.senderEmail == messagesBase.senderEmail
                && this.senderFullName == messagesBase.senderFullName
                && this.senderId == messagesBase.senderId
                && this.senderRealmStr == messagesBase.senderRealmStr
                && this.streamId == messagesBase.streamId
                && this.subject == messagesBase.subject
                && this.topicLinks == messagesBase.topicLinks
                && this.submessages == messagesBase.submessages
                && this.timestamp == messagesBase.timestamp
                && this.type == messagesBase.type;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (avatarUrl == null ? 0 : System.hashCode(avatarUrl));
        hashCode = (17 * hashCode) + (client == null ? 0 : System.hashCode(client));
        hashCode = (17 * hashCode) + (content == null ? 0 : System.hashCode(content));
        hashCode = (17 * hashCode) + (contentType == null ? 0 : System.hashCode(contentType));
        hashCode = (17 * hashCode) + (displayRecipient == null ? 0 : System.hashCode(displayRecipient));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (isMeMessage == null ? 0 : System.hashCode(isMeMessage));
        hashCode = (17 * hashCode) + (reactions == null ? 0 : System.hashCode(reactions));
        hashCode = (17 * hashCode) + (recipientId == null ? 0 : System.hashCode(recipientId));
        hashCode = (17 * hashCode) + (senderEmail == null ? 0 : System.hashCode(senderEmail));
        hashCode = (17 * hashCode) + (senderFullName == null ? 0 : System.hashCode(senderFullName));
        hashCode = (17 * hashCode) + (senderId == null ? 0 : System.hashCode(senderId));
        hashCode = (17 * hashCode) + (senderRealmStr == null ? 0 : System.hashCode(senderRealmStr));
        hashCode = (17 * hashCode) + (streamId == null ? 0 : System.hashCode(streamId));
        hashCode = (17 * hashCode) + (subject == null ? 0 : System.hashCode(subject));
        hashCode = (17 * hashCode) + (topicLinks == null ? 0 : System.hashCode(topicLinks));
        hashCode = (17 * hashCode) + (submessages == null ? 0 : System.hashCode(submessages));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        return hashCode;
    }
}

