/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASServerAndOrganizationsApi {
    OASClient client;

    public OASServerAndOrganizationsApi(OASClient client) {
        this.client = client;
    }

    public OASServerAndOrganizationsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Add a code playground
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.\n\n&#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;\n\n**Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was\nfixed in Zulip 4.0 (feature level 57).\n
     * @param name The user-visible display name of the playground which can be\nused to pick the target playground, especially when multiple\nplayground options exist for that programming language.\n (required)
     * @param pygmentsLanguage The name of the Pygments language lexer for that\nprogramming language.\n (required)
     * @param urlPrefix The url prefix for the playground.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase addCodePlayground(Map<String, Object> params) {
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('pygmentsLanguage'), 'pygmentsLanguage');
        client.assertNotNull(params.get('urlPrefix'), 'urlPrefix');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('pygments_language', (String) params.get('pygmentsLanguage')));
        query.addAll(client.makeParam('url_prefix', (String) params.get('urlPrefix')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/realm/playgrounds', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Add a linkifier
     * Configure [linkifiers](/help/add-a-custom-linkifier),\nregular expression patterns that are automatically linkified when they\nappear in messages and topics.\n\n&#x60;POST {{ api_url }}/v1/realm/filters&#x60;\n
     * @param pattern The [Python regular\nexpression](https://docs.python.org/3/howto/regex.html) that should\ntrigger the linkifier.\n (required)
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;,\nyou can insert their content here with\n&#x60;%(name_of_the_capturing_group)s&#x60;.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase addLinkifier(Map<String, Object> params) {
        client.assertNotNull(params.get('pattern'), 'pattern');
        client.assertNotNull(params.get('urlFormatString'), 'urlFormatString');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('pattern', (String) params.get('pattern')));
        query.addAll(client.makeParam('url_format_string', (String) params.get('urlFormatString')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/realm/filters', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Create a custom profile field
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user\&#39;s organization.\n\n&#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60;\n
     * @param fieldType The field type can be any of the supported custom profile field types. See the\n[custom profile fields documentation](/help/add-custom-profile-fields)\nmore details on what each type means.\n\n* **1**: Short text\n* **2**: Long text\n* **3**: List of options\n* **4**: Date picker\n* **5**: Link\n* **6**: Person picker\n* **7**: External account\n (required)
     * @param name The name of the custom profile field, which will appear both in\nuser-facing settings UI for configuring custom profile fields and\nin UI displaying a user\&#39;s profile.\n (optional)
     * @param r_hint The help text to be displayed for the custom profile field in user-facing\nsettings UI for configuring custom profile fields.\n (optional)
     * @param fieldData Field types 3 (List of options) and 7 (External account) support storing\nadditional configuration for the field type in the &#x60;field_data&#x60; attribute.\n\nFor field type 3 (List of options), this attribute is a JSON dictionary\ndefining the choices and the order they will be displayed in the\ndropdown UI for individual users to select an option.\n\nThe interface for field type 7 is not yet stabilized.\n (optional)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase createCustomProfileField(Map<String, Object> params) {
        client.assertNotNull(params.get('fieldType'), 'fieldType');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('hint', (String) params.get('r_hint')));
        query.addAll(client.makeParam('field_type', (Integer) params.get('fieldType')));
        query.addAll(client.makeParam('field_data', (Object) params.get('fieldData')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/realm/profile_fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get all custom emoji
     * Get all the custom emoji in the user\&#39;s organization.\n\n&#x60;GET {{ api_url }}/v1/realm/emoji&#x60;\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getCustomEmoji() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/realm/emoji', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get all custom profile fields
     * Get all the [custom profile fields](/help/add-custom-profile-fields)\nconfigured for the user\&#39;s organization.\n\n&#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60;\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getCustomProfileFields() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/realm/profile_fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get linkifiers
     * List all of an organization\&#39;s configured\n[linkifiers](/help/add-a-custom-linkifier), regular\nexpression patterns that are automatically linkified when they appear\nin messages and topics.\n\n&#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;\n\n**Changes**: New in Zulip 4.0 (feature level 54). On older versions,\na similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in\na &#x60;[pattern, url_format, id]&#x60; tuple format.\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getLinkifiers() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/realm/linkifiers', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get server settings
     * Fetch global settings for a Zulip server.\n\n&#x60;GET {{ api_url }}/v1/server_settings&#x60;\n\n**Note:** this endpoint does not require any authentication at all, and you can use it to check:\n\n* If this is a Zulip server, and if so, what version of Zulip it\&#39;s running.\n* What a Zulip client (e.g. a mobile app or\n[zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to\nknow in order to display a login prompt for the server (e.g. what\nauthentication methods are available).\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getServerSettings() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/server_settings', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Remove a code playground
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously\nconfigured for an organization.\n\n&#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;\n\n**Changes**: New in Zulip 4.0 (feature level 49).\n
     * @param playgroundId The ID of the playground that you want to remove.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess removeCodePlayground(Map<String, Object> params) {
        client.assertNotNull(params.get('playgroundId'), 'playgroundId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/realm/playgrounds/{playground_id}', '',
            query, form,
            new Map<String, Object>{
                'playground_id' => (Integer) params.get('playgroundId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Remove a linkifier
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular\nexpression patterns that are automatically linkified when they appear\nin messages and topics.\n\n&#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60;\n
     * @param filterId The ID of the linkifier that you want to remove.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess removeLinkifier(Map<String, Object> params) {
        client.assertNotNull(params.get('filterId'), 'filterId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/realm/filters/{filter_id}', '',
            query, form,
            new Map<String, Object>{
                'filter_id' => (Integer) params.get('filterId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Reorder custom profile fields
     * Reorder the custom profile fields in the user\&#39;s organization.\n\n&#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;\n\nCustom profile fields are displayed in Zulip UI widgets in order; this\nendpoint allows administrative settings UI to change the field ordering.\n\nThis endpoint is used to implement the dragging feature described in the\n[custom profile fields documentation](/help/add-custom-profile-fields).\n
     * @param order A list of the IDs of all the custom profile fields defined in this\norganization, in the desired new order.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess reorderCustomProfileFields(Map<String, Object> params) {
        client.assertNotNull(params.get('order'), 'order');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('order', (List<Integer>) params.get('order')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/realm/profile_fields', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update a linkifier
     * Update a [linkifier](/help/add-a-custom-linkifier), regular\nexpression patterns that are automatically linkified when they appear\nin messages and topics.\n\n&#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;\n\n**Changes**: New in Zulip 4.0 (feature level 57).\n
     * @param filterId The ID of the linkifier that you want to update.\n (required)
     * @param pattern The [Python regular\nexpression](https://docs.python.org/3/howto/regex.html) that should\ntrigger the linkifier.\n (required)
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;,\nyou can insert their content here with\n&#x60;%(name_of_the_capturing_group)s&#x60;.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateLinkifier(Map<String, Object> params) {
        client.assertNotNull(params.get('filterId'), 'filterId');
        client.assertNotNull(params.get('pattern'), 'pattern');
        client.assertNotNull(params.get('urlFormatString'), 'urlFormatString');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('pattern', (String) params.get('pattern')));
        query.addAll(client.makeParam('url_format_string', (String) params.get('urlFormatString')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/realm/filters/{filter_id}', '',
            query, form,
            new Map<String, Object>{
                'filter_id' => (Integer) params.get('filterId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Upload custom emoji
     * This endpoint is used to upload a custom emoji for use in the user\&#39;s\norganization.  Access to this endpoint depends on the\n[organization\&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).\n\n&#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60;\n
     * @param emojiName The name that should be associated with the uploaded emoji image/gif.\nThe emoji name can only contain letters, numbers, dashes, and spaces.\nUpper and lower case letters are treated the same, and underscores (_)\nare treated the same as spaces (consistent with how the Zulip UI\nhandles emoji).\n (required)
     * @param filename  (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess uploadCustomEmoji(Map<String, Object> params) {
        client.assertNotNull(params.get('emojiName'), 'emojiName');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('filename', (Blob) params.get('filename')));

        return (OASJsonSuccess) client.invoke(
            'POST', '/realm/emoji/{emoji_name}', '',
            query, form,
            new Map<String, Object>{
                'emoji_name' => (String) params.get('emojiName')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'multipart/form-data' },
            new List<String>(),
            OASJsonSuccess.class
        );
    }
}
