/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASUsersApi {
    OASClient client;

    public OASUsersApi(OASClient client) {
        this.client = client;
    }

    public OASUsersApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create a user
     * {!can-create-users-only.md!}\n\nCreate a new user account via the API.\n\n&#x60;POST {{ api_url }}/v1/users&#x60;\n
     * @param email The email address of the new user.\n (required)
     * @param password The password of the new user.\n (required)
     * @param fullName The full name of the new user.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase createUser(Map<String, Object> params) {
        client.assertNotNull(params.get('email'), 'email');
        client.assertNotNull(params.get('password'), 'password');
        client.assertNotNull(params.get('fullName'), 'fullName');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('email', (String) params.get('email')));
        query.addAll(client.makeParam('password', (String) params.get('password')));
        query.addAll(client.makeParam('full_name', (String) params.get('fullName')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/users', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Create a user group
     * Create a new [user group](/help/user-groups).\n\n&#x60;POST {{ api_url }}/v1/user_groups/create&#x60;\n
     * @param name The name of the user group.\n (required)
     * @param description The description of the user group.\n (required)
     * @param members An array containing the user IDs of the initial members for the\nnew user group.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess createUserGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('description'), 'description');
        client.assertNotNull(params.get('members'), 'members');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParams('members', (List<Integer>) params.get('members')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/user_groups/create', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Deactivate own user
     * Deactivates the user\&#39;s account.  See also the administrative endpoint for\n[deactivating another user](/api/deactivate-user).\n\n&#x60;DELETE {{ api_url }}/v1/users/me&#x60;\n\nThis endpoint is primarily useful to Zulip clients providing a user settings UI.\n
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess deactivateOwnUser() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/users/me', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Deactivate a user
     * [Deactivates a\nuser](https://zulip.com/help/deactivate-or-reactivate-a-user)\ngiven their user ID.\n\n&#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60;\n
     * @param userId The target user\&#39;s ID.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess deactivateUser(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/users/{user_id}', '',
            query, form,
            new Map<String, Object>{
                'user_id' => (Integer) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Get attachments
     * Fetch metadata on files uploaded by the requesting user.\n\n&#x60;GET {{ api_url }}/v1/attachments&#x60;\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getAttachments() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/attachments', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get own user
     * Get basic data about the user/bot that requests this endpoint.\n\n&#x60;GET {{ api_url }}/v1/users/me&#x60;\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getOwnUser() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/me', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get a user
     * Fetch details for a single user in the organization.\n\n&#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;\n\nYou can also fetch details on [all users in the organization](/api/get-users)\nor [by email](/api/get-user-by-email).\n\n*This endpoint is new in Zulip Server 3.0 (feature level 1).*\n
     * @param userId The target user\&#39;s ID.\n (required)
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If\nenabled, &#x60;avatar_url&#x60; will be included in the response only\nif there is a Zulip avatar, and will be &#x60;null&#x60; for users who\nare using gravatar as their avatar.  This option\nsignificantly reduces the compressed size of user data,\nsince gravatar URLs are long, random strings and thus do not\ncompress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if\nclients can compute their own gravatars.\n (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields)\ndata to be included in the response.\n\n**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these\ndata via the API.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getUser(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('client_gravatar', (Boolean) params.get('clientGravatar')));
        query.addAll(client.makeParam('include_custom_profile_fields', (Boolean) params.get('includeCustomProfileFields')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/{user_id}', '',
            query, form,
            new Map<String, Object>{
                'user_id' => (Integer) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get a user by email
     * Fetch details for a single user in the organization given a Zulip display\nemail address.\n\n&#x60;GET {{ api_url }}/v1/users/{email}&#x60;\n\nNote that this endpoint uses Zulip display emails addresses\nfor organizations that have configured limited [email address\nvisibility](/help/restrict-visibility-of-email-addresses).\n\nYou can also fetch details on [all users in the organization](/api/get-users) or\n[by user ID](/api/get-user).  Fetching by user ID is generally recommended\nwhen possible, as users can\n[change their email address](/help/change-your-email-address).\n\n*This endpoint is new in Zulip Server 4.0 (feature level 39).*\n
     * @param email The email address of the user whose details you want to fetch.\n (required)
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If\nenabled, &#x60;avatar_url&#x60; will be included in the response only\nif there is a Zulip avatar, and will be &#x60;null&#x60; for users who\nare using gravatar as their avatar.  This option\nsignificantly reduces the compressed size of user data,\nsince gravatar URLs are long, random strings and thus do not\ncompress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if\nclients can compute their own gravatars.\n (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields)\ndata to be included in the response.\n\n**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these\ndata via the API.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getUserByEmail(Map<String, Object> params) {
        client.assertNotNull(params.get('email'), 'email');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('client_gravatar', (Boolean) params.get('clientGravatar')));
        query.addAll(client.makeParam('include_custom_profile_fields', (Boolean) params.get('includeCustomProfileFields')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/{email}', '',
            query, form,
            new Map<String, Object>{
                'email' => (String) params.get('email')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get user groups
     * {!api-members-only.md!}\n\nFetches all of the user groups in the organization.\n\n&#x60;GET {{ api_url }}/v1/user_groups&#x60;\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getUserGroups() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/user_groups', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get user presence
     * Get the presence status for a specific user.\n\nThis endpoint is most useful for embedding data about a user\&#39;s\npresence status in other sites (E.g. an employee directory).  Full\nZulip clients like mobile/desktop apps will want to use the main\npresence endpoint, which returns data for all active users in the\norganization, instead.\n\n&#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;\n\nSee\n[Zulip\&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)\nfor details on the data model for presence in Zulip.\n
     * @param userIdOrEmail The user_id or Zulip display email address of the user whose presence you want to fetch.\n\n**Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported\nidentifying the user by Zulip display email.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getUserPresence(Map<String, Object> params) {
        client.assertNotNull(params.get('userIdOrEmail'), 'userIdOrEmail');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/{user_id_or_email}/presence', '',
            query, form,
            new Map<String, Object>{
                'user_id_or_email' => (String) params.get('userIdOrEmail')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get all users
     * Retrieve details on all users in the organization.  Optionally\nincludes values of [custom profile field](/help/add-custom-profile-fields).\n\n&#x60;GET {{ api_url }}/v1/users&#x60;\n\nYou can also [fetch details on a single user](/api/get-user).\n
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If\nenabled, &#x60;avatar_url&#x60; will be included in the response only\nif there is a Zulip avatar, and will be &#x60;null&#x60; for users who\nare using gravatar as their avatar.  This option\nsignificantly reduces the compressed size of user data,\nsince gravatar URLs are long, random strings and thus do not\ncompress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if\nclients can compute their own gravatars.\n (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields)\ndata to be included in the response.\n\n**Changes**: New in Zulip 2.1.0.  Previous versions do no offer these\ndata via the API.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getUsers(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('client_gravatar', (Boolean) params.get('clientGravatar')));
        query.addAll(client.makeParam('include_custom_profile_fields', (Boolean) params.get('includeCustomProfileFields')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Mute a user
     * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users\nyou\&#39;ve muted will be automatically marked as read and hidden.\n\n&#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;\n\nMuted users should be implemented by clients as follows:\n\n* The server will immediately mark all messages sent by the muted\n  user as read.  This will automatically clear any existing mobile\n  push notifications related to the muted user.\n* The server will mark any new messages sent by the muted user as read\n  for your account, which prevents all email and mobile push notifications.\n* Clients should exclude muted users from presence lists or other UI\n  for viewing or composing 1:1 private messages. 1:1 private messages sent by\n  muted users should be hidden everywhere in the Zulip UI.\n* Stream messages and group private messages sent by the muted\n  user should avoid displaying the content and name/avatar,\n  but should display that N messages by a muted user were\n  hidden (so that it is possible to interpret the messages by\n  other users who are talking with the muted user).\n* Group private message conversations including the muted user\n  should display muted users as &quot;Muted user&quot;, rather than\n  showing their name, in lists of such conversations, along with using\n  a blank grey avatar where avatars are displayed.\n* Administrative/settings UI elements for showing &quot;All users that exist\n  on this stream or realm&quot;, e.g. for organization\n  administration or showing stream subscribers, should display\n  the user\&#39;s name as normal.\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n
     * @param mutedUserId The ID of the user to mute/un-mute.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess muteUser(Map<String, Object> params) {
        client.assertNotNull(params.get('mutedUserId'), 'mutedUserId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/users/me/muted_users/{muted_user_id}', '',
            query, form,
            new Map<String, Object>{
                'muted_user_id' => (Integer) params.get('mutedUserId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Reactivate a user
     * [Reactivates a\nuser](https://zulip.com/help/deactivate-or-reactivate-a-user)\ngiven their user ID.\n\n&#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60;\n
     * @param userId The target user\&#39;s ID.\n (required)
     * @return oas_any_type_not_mapped
     * @throws OAS.ApiException if fails to make API call
     */
    public oas_any_type_not_mapped reactivateUser(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (oas_any_type_not_mapped) client.invoke(
            'POST', '/users/{user_id}/reactivate', '',
            query, form,
            new Map<String, Object>{
                'user_id' => (Integer) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            oas_any_type_not_mapped.class
        );
    }
    /**
     * Delete a user group
     * Delete a [user group](/help/user-groups).\n\n&#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60;\n
     * @param userGroupId The ID of the target user group.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess removeUserGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('userGroupId'), 'userGroupId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/user_groups/{user_group_id}', '',
            query, form,
            new Map<String, Object>{
                'user_group_id' => (Integer) params.get('userGroupId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Set &quot;typing&quot; status
     * Notify other users whether the current user is typing a message.\n\n&#x60;POST {{ api_url }}/v1/typing&#x60;\n\nClients implementing Zulip\&#39;s typing notifications protocol should work as follows:\n\n* Send a request to this endpoint with &#x60;op&#x3D;&quot;start&quot;&#x60; when a user starts typing a message,\n  and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to\n  actively type or otherwise interact with the compose UI (E.g. interacting with the\n  compose box emoji picker).\n* Send a request to this endpoint with &#x60;op&#x3D;&quot;stop&quot;&#x60; when a user pauses using the\n  compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels\n  the compose action (if it had previously sent a &quot;start&quot; operation for that\n  compose action).\n* Start displaying &quot;Sender is typing&quot; for a given conversation when the client\n  receives an &#x60;op&#x3D;&quot;start&quot;&#x60; event from the [events API](/api/get-events).\n* Continue displaying &quot;Sender is typing&quot; until they receive an &#x60;op&#x3D;&quot;stop&quot;&#x60; event\n  from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;\n  seconds have passed without a new &#x60;op&#x3D;&quot;start&quot;&#x60; event for that conversation.\n* Clients that support displaying stream typing notifications (new in Zulip 4.0)\n  should indicate they support processing stream typing events via the\n  &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.\n\nThis protocol is designed to allow the server-side typing notifications implementation\nto be stateless while being resilient; network failures cannot result in a user being\nincorrectly displayed as perpetually typing.\n\nSee\n[the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html)\nfor additional design details on Zulip\&#39;s typing notifications protocol.\n
     * @param op Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.\n (required)
     * @param to For \&#39;private\&#39; type it is the user_ids of the recipients of the message being typed.\nSend a JSON-encoded list of user_ids. (Use a list even if there is only one\nrecipient.)\n\nFor \&#39;stream\&#39; type it is a single element list containing ID of stream in\nwhich the message is being typed.\n\n**Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded\nlist of email addresses.  Support for the email address-based format was\nremoved in Zulip 3.0 (feature level 11).\n (required)
     * @param type Type of the message being composed.\n (optional, default to private)
     * @param topic Topic to which message is being typed. Required for the \&#39;stream\&#39; type.\nIgnored in case of \&#39;private\&#39; type.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess setTypingStatus(Map<String, Object> params) {
        client.assertNotNull(params.get('op'), 'op');
        client.assertNotNull(params.get('to'), 'to');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('type', (String) params.get('type')));
        query.addAll(client.makeParam('op', (String) params.get('op')));
        query.addAll(client.makeParams('to', (List<Integer>) params.get('to')));
        query.addAll(client.makeParam('topic', (String) params.get('topic')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/typing', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Unmute a user
     * This endpoint unmutes a user.\n\n&#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n
     * @param mutedUserId The ID of the user to mute/un-mute.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess unmuteUser(Map<String, Object> params) {
        client.assertNotNull(params.get('mutedUserId'), 'mutedUserId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/users/me/muted_users/{muted_user_id}', '',
            query, form,
            new Map<String, Object>{
                'muted_user_id' => (Integer) params.get('mutedUserId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update settings
     * This endpoint is used to edit the current user\&#39;s settings.\n\n&#x60;PATCH {{ api_url }}/v1/settings&#x60;\n\n**Changes**: Prior to Zulip 5.0 (feature level 80), this\nendpoint only supported the &#x60;full_name&#x60;, &#x60;email&#x60;,\n&#x60;old_password&#x60;, and &#x60;new_password&#x60; parameters. Notification\nsettings were managed by &#x60;PATCH /settings/notifications&#x60;, and\nall other settings by &#x60;PATCH /settings/display&#x60;. The feature level\n80 migration to merge these endpoints did not change how request\nparameters are encoded. Note, however, that it did change the\nhandling of any invalid parameters present in a request to change\nnotification or display settings, since the merged endpoint uses\nthe new response format that was introduced for &#x60;/settings&#x60; in\nZulip 5.0 (feature level 78).\n\nThe &#x60;/settings/display&#x60; and &#x60;/settings/notifications&#x60;\nendpoints are now deprecated aliases for this endpoint for\nbackwards-compatibility, and will be removed once clients have\nmigrated to use this endpoint.\n
     * @param fullName A new display name for the user.\n (optional)
     * @param email Asks the server to initiate a confirmation sequence to change the user\&#39;s email\naddress to the indicated value. The user will need to demonstrate control of the\nnew email address by clicking a confirmation link sent to that address.\n (optional)
     * @param oldPassword The user\&#39;s old Zulip password (or LDAP password, if LDAP authentication is in use).\n\nRequired only when sending the &#x60;new_password&#x60; parameter.\n (optional)
     * @param newPassword The user\&#39;s new Zulip password (or LDAP password, if LDAP authentication is in use).\n\nThe &#x60;old_password&#x60; parameter must be included in the request.\n (optional)
     * @param twentyFourHourTime Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param denseMode This setting has no effect at present.  It is reserved for use in controlling\nthe default font size in Zulip.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param starredMessageCounts Whether clients should display the [number of starred\nmessages](/help/star-a-message#display-the-number-of-starred-messages).\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param fluidLayoutWidth Whether to use the [maximum available screen width](/help/enable-full-width-display)\nfor the web app\&#39;s center panel (message feed, recent topics) on wide screens.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param highContrastMode This setting is reserved for use to control variations in Zulip\&#39;s design\nto help visually impaired users.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param colorScheme Controls which [color theme](/help/night-mode) to use.\n\n* 1 - Automatic\n* 2 - Night mode\n* 3 - Day mode\n\nAutomatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60;\nmedia query.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param enableDraftsSynchronization A boolean parameter to control whether synchronizing drafts is enabled for\nthe user. When synchronization is disabled, all drafts stored in the server\nwill be automatically deleted from the server.\n\nThis does not do anything (like sending events) to delete local copies of\ndrafts stored in clients.\n\n**Changes**: New in Zulip 5.0 (feature level 87).\n (optional)
     * @param translateEmoticons Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\nin messages the user sends.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param defaultLanguage What [default language](/help/change-your-language) to use for the account.\n\nThis controls both the Zulip UI as well as email notifications sent to the user.\n\nThe value needs to be a standard language code that the Zulip server has\ntranslation data for; for example, &#x60;&quot;en&quot;&#x60; for English or &#x60;&quot;de&quot;&#x60; for German.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n\nUnnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).\n (optional)
     * @param defaultView The [default view](/help/change-default-view) used when opening a new\nZulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.\n\n* &quot;recent_topics&quot; - Recent topics view\n* &quot;all_messages&quot; - All messages view\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n\nUnnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n (optional)
     * @param leftSideUserlist Whether the users list on left sidebar in narrow windows.\n\nThis feature is not heavily used and is likely to be reworked.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param emojiset The user\&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\nused to display emoji to the user everything they appear in the UI.\n\n* &quot;google&quot; - Google modern\n* &quot;google-blob&quot; - Google classic\n* &quot;twitter&quot; - Twitter\n* &quot;text&quot; - Plain text\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n\nUnnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n (optional)
     * @param demoteInactiveStreams Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n* 1 - Automatic\n* 2 - Always\n* 3 - Never\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n (optional)
     * @param timezone The user\&#39;s [configured timezone](/help/change-your-timezone).\n\nTimezone values supported by the server are served at\n[/static/generated/timezones.json](/static/generated/timezones.json).\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/display&#x60; endpoint.\n\nUnnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n (optional)
     * @param enableStreamDesktopNotifications Enable visual desktop notifications for stream messages.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableStreamEmailNotifications Enable email notifications for stream messages.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableStreamPushNotifications Enable mobile notifications for stream messages.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableStreamAudibleNotifications Enable audible desktop notifications for stream messages.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param notificationSound Notification sound name.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n\nUnnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).\n (optional)
     * @param enableDesktopNotifications Enable visual desktop notifications for private messages and @-mentions.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableSounds Enable audible desktop notifications for private messages and\n@-mentions.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param emailNotificationsBatchingPeriodSeconds The duration (in seconds) for which the server should wait to batch\nemail notifications before sending them.\n\n**Changes**: New in Zulip 5.0 (feature level 82)\n (optional)
     * @param enableOfflineEmailNotifications Enable email notifications for private messages and @-mentions received\nwhen the user is offline.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableOfflinePushNotifications Enable mobile notification for private messages and @-mentions received\nwhen the user is offline.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableOnlinePushNotifications Enable mobile notification for private messages and @-mentions received\nwhen the user is online.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableDigestEmails Enable digest emails when the user is away.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableMarketingEmails Enable marketing emails. Has no function outside Zulip Cloud.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enableLoginEmails Enable email notifications for new logins to account.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param messageContentInEmailNotifications Include the message\&#39;s content in email notifications for new messages.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param pmContentInDesktopNotifications Include content of private messages in desktop notifications.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param wildcardMentionsNotify Whether wildcard mentions (E.g. @**all**) should send notifications\nlike a personal mention.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param desktopIconCountDisplay Unread count summary (appears in desktop sidebar and browser tab)\n\n* 1 - All unreads\n* 2 - Private messages and mentions\n* 3 - None\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param realmNameInNotifications Include organization name in subject of message notification emails.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param presenceEnabled Display the presence status to other users when online.\n\n**Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\nthe &#x60;PATCH /settings/notifications&#x60; endpoint.\n (optional)
     * @param enterSends Whether pressing Enter in the compose box sends a message\n(or saves a message edit).\n\n**Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by\nthe &#x60;POST /users/me/enter-sends&#x60; endpoint, with the same parameter format.\n (optional)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase updateSettings(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('full_name', (String) params.get('fullName')));
        query.addAll(client.makeParam('email', (String) params.get('email')));
        query.addAll(client.makeParam('old_password', (String) params.get('oldPassword')));
        query.addAll(client.makeParam('new_password', (String) params.get('newPassword')));
        query.addAll(client.makeParam('twenty_four_hour_time', (Boolean) params.get('twentyFourHourTime')));
        query.addAll(client.makeParam('dense_mode', (Boolean) params.get('denseMode')));
        query.addAll(client.makeParam('starred_message_counts', (Boolean) params.get('starredMessageCounts')));
        query.addAll(client.makeParam('fluid_layout_width', (Boolean) params.get('fluidLayoutWidth')));
        query.addAll(client.makeParam('high_contrast_mode', (Boolean) params.get('highContrastMode')));
        query.addAll(client.makeParam('color_scheme', (Integer) params.get('colorScheme')));
        query.addAll(client.makeParam('enable_drafts_synchronization', (Boolean) params.get('enableDraftsSynchronization')));
        query.addAll(client.makeParam('translate_emoticons', (Boolean) params.get('translateEmoticons')));
        query.addAll(client.makeParam('default_language', (String) params.get('defaultLanguage')));
        query.addAll(client.makeParam('default_view', (String) params.get('defaultView')));
        query.addAll(client.makeParam('left_side_userlist', (Boolean) params.get('leftSideUserlist')));
        query.addAll(client.makeParam('emojiset', (String) params.get('emojiset')));
        query.addAll(client.makeParam('demote_inactive_streams', (Integer) params.get('demoteInactiveStreams')));
        query.addAll(client.makeParam('timezone', (String) params.get('timezone')));
        query.addAll(client.makeParam('enable_stream_desktop_notifications', (Boolean) params.get('enableStreamDesktopNotifications')));
        query.addAll(client.makeParam('enable_stream_email_notifications', (Boolean) params.get('enableStreamEmailNotifications')));
        query.addAll(client.makeParam('enable_stream_push_notifications', (Boolean) params.get('enableStreamPushNotifications')));
        query.addAll(client.makeParam('enable_stream_audible_notifications', (Boolean) params.get('enableStreamAudibleNotifications')));
        query.addAll(client.makeParam('notification_sound', (String) params.get('notificationSound')));
        query.addAll(client.makeParam('enable_desktop_notifications', (Boolean) params.get('enableDesktopNotifications')));
        query.addAll(client.makeParam('enable_sounds', (Boolean) params.get('enableSounds')));
        query.addAll(client.makeParam('email_notifications_batching_period_seconds', (Integer) params.get('emailNotificationsBatchingPeriodSeconds')));
        query.addAll(client.makeParam('enable_offline_email_notifications', (Boolean) params.get('enableOfflineEmailNotifications')));
        query.addAll(client.makeParam('enable_offline_push_notifications', (Boolean) params.get('enableOfflinePushNotifications')));
        query.addAll(client.makeParam('enable_online_push_notifications', (Boolean) params.get('enableOnlinePushNotifications')));
        query.addAll(client.makeParam('enable_digest_emails', (Boolean) params.get('enableDigestEmails')));
        query.addAll(client.makeParam('enable_marketing_emails', (Boolean) params.get('enableMarketingEmails')));
        query.addAll(client.makeParam('enable_login_emails', (Boolean) params.get('enableLoginEmails')));
        query.addAll(client.makeParam('message_content_in_email_notifications', (Boolean) params.get('messageContentInEmailNotifications')));
        query.addAll(client.makeParam('pm_content_in_desktop_notifications', (Boolean) params.get('pmContentInDesktopNotifications')));
        query.addAll(client.makeParam('wildcard_mentions_notify', (Boolean) params.get('wildcardMentionsNotify')));
        query.addAll(client.makeParam('desktop_icon_count_display', (Integer) params.get('desktopIconCountDisplay')));
        query.addAll(client.makeParam('realm_name_in_notifications', (Boolean) params.get('realmNameInNotifications')));
        query.addAll(client.makeParam('presence_enabled', (Boolean) params.get('presenceEnabled')));
        query.addAll(client.makeParam('enter_sends', (Boolean) params.get('enterSends')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'PATCH', '/settings', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Update your status
     * Change your [status](/help/status-and-availability).\n\n&#x60;POST {{ api_url }}/v1/users/me/status&#x60;\n\nA request to this endpoint will only change the parameters passed.\nFor example, passing just &#x60;status_text&#x60; requests a change in the status\ntext, but will leave the status emoji unchanged.\n\nClients that wish to set the user\&#39;s status to a specific value should\npass all supported parameters.\n
     * @param statusText The text content of the status message. Sending the empty string\nwill clear the user\&#39;s status.\n\n**Note**: The limit on the size of the message is 60 characters.\n (optional)
     * @param away Whether the user should be marked as &quot;away&quot;.\n (optional)
     * @param emojiName The name for the emoji to associate with this status.\n (optional)
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested,\nwithin the namespace of the &#x60;reaction_type&#x60;.\n\nFor example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the\nUnicode codepoint; for &#x60;realm_emoji&#x60;, it\&#39;ll be the ID of the realm emoji.\n (optional)
     * @param reactionType One of the following values:\n\n* &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode\n  codepoint).\n* &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).\n  (&#x60;emoji_code&#x60; will be its ID).\n* &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to\n  namespace the &#x60;zulip&#x60; emoji.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateStatus(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('status_text', (String) params.get('statusText')));
        query.addAll(client.makeParam('away', (Boolean) params.get('away')));
        query.addAll(client.makeParam('emoji_name', (String) params.get('emojiName')));
        query.addAll(client.makeParam('emoji_code', (String) params.get('emojiCode')));
        query.addAll(client.makeParam('reaction_type', (String) params.get('reactionType')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/users/me/status', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update a user
     * Administrative endpoint to update the details of another user in the organization.\n\n&#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;\n\nSupports everything an administrator can do to edit details of another\nuser\&#39;s account, including editing full name,\n[role](/help/roles-and-permissions), and [custom profile\nfields](/help/add-custom-profile-fields).\n
     * @param userId The target user\&#39;s ID.\n (required)
     * @param fullName The user\&#39;s full name.\n (optional)
     * @param role New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:\n\n* Organization owner: 100\n* Organization administrator: 200\n* Organization moderator: 300\n* Member: 400\n* Guest: 600\n\nOnly organization owners can add or remove the owner role.\n\nThe owner role cannot be removed from the only organization owner.\n\n**Changes**: New in Zulip 3.0 (feature level 8), replacing the previous\npair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator\nrole added in Zulip 4.0 (feature level 60).\n (optional)
     * @param profileData A dictionary containing the to be updated custom profile field data for the user.\n (optional, default to new List<Object>())
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateUser(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('full_name', (String) params.get('fullName')));
        query.addAll(client.makeParam('role', (Integer) params.get('role')));
        query.addAll(client.makeParams('profile_data', (List<Object>) params.get('profileData')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/users/{user_id}', '',
            query, form,
            new Map<String, Object>{
                'user_id' => (Integer) params.get('userId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update a user group
     * Update the name or description of a [user group](/help/user-groups).\n\n&#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60;\n
     * @param userGroupId The ID of the target user group.\n (required)
     * @param name The new name of the group.\n (required)
     * @param description The new description of the group.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateUserGroup(Map<String, Object> params) {
        client.assertNotNull(params.get('userGroupId'), 'userGroupId');
        client.assertNotNull(params.get('name'), 'name');
        client.assertNotNull(params.get('description'), 'description');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('description', (String) params.get('description')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/user_groups/{user_group_id}', '',
            query, form,
            new Map<String, Object>{
                'user_group_id' => (Integer) params.get('userGroupId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update user group members
     * Update the members of a [user group](/help/user-groups).\n\n&#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60;\n
     * @param userGroupId The ID of the target user group.\n (required)
     * @param r_delete The list of user ids to be removed from the user group.\n (optional, default to new List<Integer>())
     * @param add The list of user ids to be added to the user group.\n (optional, default to new List<Integer>())
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateUserGroupMembers(Map<String, Object> params) {
        client.assertNotNull(params.get('userGroupId'), 'userGroupId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('delete', (List<Integer>) params.get('r_delete')));
        query.addAll(client.makeParams('add', (List<Integer>) params.get('add')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'POST', '/user_groups/{user_group_id}/members', '',
            query, form,
            new Map<String, Object>{
                'user_group_id' => (Integer) params.get('userGroupId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
}
