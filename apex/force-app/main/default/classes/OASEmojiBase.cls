/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASEmojiBase
 */
public class OASEmojiBase implements OAS.MappedProperties {
    /**
     * A unique identifier, defining the specific emoji codepoint requested,\nwithin the namespace of the `reaction_type`.\n\nFor example, for `unicode_emoji`, this will be an encoding of the\nUnicode codepoint; for `realm_emoji`, it\'ll be the ID of the realm emoji.\n
     * @return emojiCode
     */
    public String emojiCode { get; set; }

    /**
     * Name of the emoji.\n
     * @return emojiName
     */
    public String emojiName { get; set; }

    /**
     * One of the following values:\n\n* `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode\n  codepoint).\n* `realm_emoji`: [Custom emoji](/help/add-custom-emoji).\n  (`emoji_code` will be its ID).\n* `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to\n  namespace the `zulip` emoji.\n
     * @return reactionType
     */
    public String reactionType { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASEmojiBase getExample() {
        OASEmojiBase emojiBase = new OASEmojiBase();
          emojiBase.emojiCode = '';
          emojiBase.emojiName = '';
          emojiBase.reactionType = '';
        return emojiBase;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEmojiBase) {           
            OASEmojiBase emojiBase = (OASEmojiBase) obj;
            return this.emojiCode == emojiBase.emojiCode
                && this.emojiName == emojiBase.emojiName
                && this.reactionType == emojiBase.reactionType;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (emojiCode == null ? 0 : System.hashCode(emojiCode));
        hashCode = (17 * hashCode) + (emojiName == null ? 0 : System.hashCode(emojiName));
        hashCode = (17 * hashCode) + (reactionType == null ? 0 : System.hashCode(reactionType));
        return hashCode;
    }
}

