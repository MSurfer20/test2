/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASStreamsApi {
    OASClient client;

    public OASStreamsApi(OASClient client) {
        this.client = client;
    }

    public OASStreamsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Archive a stream
     * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.\n\n&#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;\n
     * @param streamId The ID of the stream to access.\n (required)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess archiveStream(Map<String, Object> params) {
        client.assertNotNull(params.get('streamId'), 'streamId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'DELETE', '/streams/{stream_id}', '',
            query, form,
            new Map<String, Object>{
                'stream_id' => (Integer) params.get('streamId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Create BigBlueButton video call
     * Create a video call URL for a BigBlueButton video call.\nRequires BigBlueButton to be configured on the Zulip server.\n
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase createBigBlueButtonVideoCall() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/calls/bigbluebutton/create', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get stream ID
     * Get the unique ID of a given stream.\n\n&#x60;GET {{ api_url }}/v1/get_stream_id&#x60;\n
     * @param stream The name of the stream to access.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getStreamId(Map<String, Object> params) {
        client.assertNotNull(params.get('stream'), 'stream');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('stream', (String) params.get('stream')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/get_stream_id', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get topics in a stream
     * Get all the topics in a specific stream\n\n&#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;\n
     * @param streamId The ID of the stream to access.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getStreamTopics(Map<String, Object> params) {
        client.assertNotNull(params.get('streamId'), 'streamId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/me/{stream_id}/topics', '',
            query, form,
            new Map<String, Object>{
                'stream_id' => (Integer) params.get('streamId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get all streams
     * Get all streams that the user has access to.\n\n&#x60;GET {{ api_url }}/v1/streams&#x60;\n
     * @param includePublic Include all public streams.\n (optional, default to true)
     * @param includeWebPublic Include all web public streams.\n (optional, default to false)
     * @param includeSubscribed Include all streams that the user is subscribed to.\n (optional, default to true)
     * @param includeAllActive Include all active streams. The user must have administrative privileges\nto use this parameter.\n (optional, default to false)
     * @param includeDefault Include all default streams for the user\&#39;s realm.\n (optional, default to false)
     * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot\&#39;s owner is\nsubscribed to.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getStreams(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('include_public', (Boolean) params.get('includePublic')));
        query.addAll(client.makeParam('include_web_public', (Boolean) params.get('includeWebPublic')));
        query.addAll(client.makeParam('include_subscribed', (Boolean) params.get('includeSubscribed')));
        query.addAll(client.makeParam('include_all_active', (Boolean) params.get('includeAllActive')));
        query.addAll(client.makeParam('include_default', (Boolean) params.get('includeDefault')));
        query.addAll(client.makeParam('include_owner_subscribed', (Boolean) params.get('includeOwnerSubscribed')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/streams', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get subscription status
     * Check whether a user is subscribed to a stream.\n\n&#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;\n\n**Changes**: New in Zulip 3.0 (feature level 11).\n
     * @param userId The target user\&#39;s ID.\n (required)
     * @param streamId The ID of the stream to access.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getSubscriptionStatus(Map<String, Object> params) {
        client.assertNotNull(params.get('userId'), 'userId');
        client.assertNotNull(params.get('streamId'), 'streamId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/{user_id}/subscriptions/{stream_id}', '',
            query, form,
            new Map<String, Object>{
                'user_id' => (Integer) params.get('userId'),
                'stream_id' => (Integer) params.get('streamId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Get subscribed streams
     * Get all streams that the user is subscribed to.\n\n&#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;\n
     * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60;\nfield containing a list of the user IDs of its subscribers.\n\n(This may be significantly slower in organizations with\nthousands of users subscribed to many streams.)\n\n**Changes**: New in Zulip 2.1.0.\n (optional, default to false)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase getSubscriptions(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('include_subscribers', (Boolean) params.get('includeSubscribers')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'GET', '/users/me/subscriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Topic muting
     * This endpoint mutes/unmutes a topic within a stream that the current\nuser is subscribed to.  Muted topics are displayed faded in the Zulip\nUI, and are not included in the user\&#39;s unread count totals.\n\n&#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60;\n
     * @param topic The topic to (un)mute. Note that the request will succeed regardless of\nwhether any messages have been sent to the specified topic.\n (required)
     * @param op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.\n (required)
     * @param stream The name of the stream to access.\n (optional)
     * @param streamId The ID of the stream to access.\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess muteTopic(Map<String, Object> params) {
        client.assertNotNull(params.get('topic'), 'topic');
        client.assertNotNull(params.get('op'), 'op');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('stream', (String) params.get('stream')));
        query.addAll(client.makeParam('stream_id', (Integer) params.get('streamId')));
        query.addAll(client.makeParam('topic', (String) params.get('topic')));
        query.addAll(client.makeParam('op', (String) params.get('op')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/users/me/subscriptions/muted_topics', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Subscribe to a stream
     * Subscribe one or more users to one or more streams.\n\n&#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;\n\nIf any of the specified streams do not exist, they are automatically\ncreated.  The initial [stream settings](/api/update-stream) will be determined\nby the optional parameters like &#x60;invite_only&#x60; detailed below.\n
     * @param subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value\nspecifying the name of the stream to subscribe. If the stream does not\nexist a new stream is created. The description of the stream created can\nbe specified by setting the dictionary key &#x60;description&#x60; with an\nappropriate value.\n (required)
     * @param principals A list of user ids (preferred) or Zulip display email\naddresses of the users to be subscribed to or unsubscribed\nfrom the streams specified in the &#x60;subscriptions&#x60; parameter. If\nnot provided, then the requesting user/bot is subscribed.\n\n**Changes**: The integer format is new in Zulip 3.0 (feature level 9).\n (optional, default to new List<OASOneOfstringinteger>())
     * @param authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the\nrequesting user is not authorized to access a private stream) should be\nconsidered fatal or not. When &#x60;True&#x60;, an authorization error is reported\nas such. When set to &#x60;False&#x60;, the response will be a 200 and any streams\nwhere the request encountered an authorization error will be listed\nin the &#x60;unauthorized&#x60; key.\n (optional, default to true)
     * @param announce If one of the streams specified did not exist previously and is thus craeted\nby this call, this determines whether [notification bot](/help/configure-notification-bot)\nwill send an announcement about the new stream\&#39;s creation.\n (optional, default to false)
     * @param inviteOnly As described above, this endpoint will create a new stream if passed\na stream name that doesn\&#39;t already exist.  This parameters and the ones\nthat follow are used to request an initial configuration of a created\nstream; they are ignored for streams that already exist.\n\nThis parameter determines whether any newly created streams will be\nprivate streams.\n (optional, default to false)
     * @param historyPublicToSubscribers Whether the stream\&#39;s message history should be available to\nnewly subscribed members, or users can only access messages\nthey actually received while subscribed to the stream.\n\nCorresponds to the [shared history](/help/stream-permissions)\noption in documentation.\n (optional)
     * @param streamPostPolicy Policy for which users can post messages to the stream.\n\n* 1 &#x3D;&gt; Any user can post.\n* 2 &#x3D;&gt; Only administrators can post.\n* 3 &#x3D;&gt; Only full members can post.\n* 4 &#x3D;&gt; Only moderators can post.\n\n**Changes**: New in Zulip 3.0, replacing the previous\n&#x60;is_announcement_only&#x60; boolean.\n (optional, default to 1)
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored\nbefore being automatically deleted by the [message retention\npolicy](/help/message-retention-policy).  Two special string format\nvalues are supported:\n\n* &quot;realm_default&quot; &#x3D;&gt; Return to the organization-level setting.\n* &quot;forever&quot; &#x3D;&gt; Retain messages forever.\n\n**Changes**: New in Zulip 3.0 (feature level 17).\n (optional)
     * @return OASOneOfobjectobject
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOneOfobjectobject subscribe(Map<String, Object> params) {
        client.assertNotNull(params.get('subscriptions'), 'subscriptions');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('subscriptions', (List<Object>) params.get('subscriptions')));
        query.addAll(client.makeParams('principals', (List<OASOneOfstringinteger>) params.get('principals')));
        query.addAll(client.makeParam('authorization_errors_fatal', (Boolean) params.get('authorizationErrorsFatal')));
        query.addAll(client.makeParam('announce', (Boolean) params.get('announce')));
        query.addAll(client.makeParam('invite_only', (Boolean) params.get('inviteOnly')));
        query.addAll(client.makeParam('history_public_to_subscribers', (Boolean) params.get('historyPublicToSubscribers')));
        query.addAll(client.makeParam('stream_post_policy', (Integer) params.get('streamPostPolicy')));
        query.addAll(client.makeParam('message_retention_days', (OASOneOfstringinteger) params.get('messageRetentionDays')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOneOfobjectobject) client.invoke(
            'POST', '/users/me/subscriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASOneOfobjectobject.class
        );
    }
    /**
     * Unsubscribe from a stream
     * Unsubscribe yourself or other users from one or more streams.\n\n&#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;\n
     * @param subscriptions A list of stream names to unsubscribe from. This parameter is called\n&#x60;streams&#x60; in our Python API.\n (required)
     * @param principals A list of user ids (preferred) or Zulip display email\naddresses of the users to be subscribed to or unsubscribed\nfrom the streams specified in the &#x60;subscriptions&#x60; parameter. If\nnot provided, then the requesting user/bot is subscribed.\n\n**Changes**: The integer format is new in Zulip 3.0 (feature level 9).\n (optional, default to new List<OASOneOfstringinteger>())
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase unsubscribe(Map<String, Object> params) {
        client.assertNotNull(params.get('subscriptions'), 'subscriptions');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('subscriptions', (List<String>) params.get('subscriptions')));
        query.addAll(client.makeParams('principals', (List<OASOneOfstringinteger>) params.get('principals')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'DELETE', '/users/me/subscriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Update a stream
     * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports\nan organization administrator editing any property of a stream,\nincluding:\n\n* Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description)\n* Stream [permissions](/help/stream-permissions), including\n[privacy](/help/change-the-privacy-of-a-stream) and [who can\nsend](/help/stream-sending-policy).\n\n&#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60;\n
     * @param streamId The ID of the stream to access.\n (required)
     * @param description The new description for the stream. Limited Zulip markdown is allowed in this\nfield.\n\n**Changes**: Removed unnecessary JSON-encoding of this parameter in\nZulip 4.0 (feature level 64).\n (optional)
     * @param newName The new name for the stream.\n\n**Changes**: Removed unnecessary JSON-encoding of this parameter in\nZulip 4.0 (feature level 64).\n (optional)
     * @param isPrivate Change whether the stream is a private stream.\n (optional)
     * @param isAnnouncementOnly Whether the stream is limited to announcements.\n\n**Changes**: Deprecated in Zulip 3.0 (feature level 1), use\n  &#x60;stream_post_policy&#x60; instead.\n (optional)
     * @param streamPostPolicy Policy for which users can post messages to the stream.\n\n* 1 &#x3D;&gt; Any user can post.\n* 2 &#x3D;&gt; Only administrators can post.\n* 3 &#x3D;&gt; Only full members can post.\n* 4 &#x3D;&gt; Only moderators can post.\n\n**Changes**: New in Zulip 3.0, replacing the previous\n&#x60;is_announcement_only&#x60; boolean.\n (optional, default to 1)
     * @param historyPublicToSubscribers Whether the stream\&#39;s message history should be available to\nnewly subscribed members, or users can only access messages\nthey actually received while subscribed to the stream.\n\nCorresponds to the [shared history](/help/stream-permissions)\noption in documentation.\n (optional)
     * @param messageRetentionDays Number of days that messages sent to this stream will be stored\nbefore being automatically deleted by the [message retention\npolicy](/help/message-retention-policy).  Two special string format\nvalues are supported:\n\n* &quot;realm_default&quot; &#x3D;&gt; Return to the organization-level setting.\n* &quot;forever&quot; &#x3D;&gt; Retain messages forever.\n\n**Changes**: New in Zulip 3.0 (feature level 17).\n (optional)
     * @return OASJsonSuccess
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccess updateStream(Map<String, Object> params) {
        client.assertNotNull(params.get('streamId'), 'streamId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParam('new_name', (String) params.get('newName')));
        query.addAll(client.makeParam('is_private', (Boolean) params.get('isPrivate')));
        query.addAll(client.makeParam('is_announcement_only', (Boolean) params.get('isAnnouncementOnly')));
        query.addAll(client.makeParam('stream_post_policy', (Integer) params.get('streamPostPolicy')));
        query.addAll(client.makeParam('history_public_to_subscribers', (Boolean) params.get('historyPublicToSubscribers')));
        query.addAll(client.makeParam('message_retention_days', (OASOneOfstringinteger) params.get('messageRetentionDays')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccess) client.invoke(
            'PATCH', '/streams/{stream_id}', '',
            query, form,
            new Map<String, Object>{
                'stream_id' => (Integer) params.get('streamId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccess.class
        );
    }
    /**
     * Update subscription settings
     * This endpoint is used to update the user\&#39;s personal settings for the\nstreams they are subscribed to, including muting, color, pinning, and\nper-stream notification settings.\n\n&#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60;\n
     * @param subscriptionData A list of objects that describe the changes that should be applied in\neach subscription. Each object represents a subscription, and must have\na &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60;\nbeing modified and its new &#x60;value&#x60;.\n\nThe possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:\n\n* &#x60;color&#x60; (string): the hex value of the user\&#39;s display color for the stream.\n* &#x60;is_muted&#x60; (boolean): whether the stream is\n  [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was\n  represented by the more confusingly named &#x60;in_home_view&#x60; (with the\n  opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for\n  backwards-compatibility, modern Zulip still accepts that value.\n* &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list.\n* &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications\n    for all messages sent to the stream.\n* &#x60;audible_notifications&#x60; (boolean): whether to play a sound\n  notification for all messages sent to the stream.\n* &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push\n    notification for all messages sent to the stream.\n* &#x60;email_notifications&#x60; (boolean): whether to trigger an email\n    notification for all messages sent to the stream.\n (required)
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase updateSubscriptionSettings(Map<String, Object> params) {
        client.assertNotNull(params.get('subscriptionData'), 'subscriptionData');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('subscription_data', (List<Object>) params.get('subscriptionData')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'POST', '/users/me/subscriptions/properties', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
    /**
     * Update subscriptions
     * Update which streams you are are subscribed to.\n
     * @param r_delete A list of stream names to unsubscribe from.\n (optional, default to new List<String>())
     * @param add A list of objects describing which streams to subscribe to, optionally\nincluding per-user subscription parameters (e.g. color) and if the\nstream is to be created, its description.\n (optional, default to new List<Object>())
     * @return OASJsonSuccessBase
     * @throws OAS.ApiException if fails to make API call
     */
    public OASJsonSuccessBase updateSubscriptions(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParams('delete', (List<String>) params.get('r_delete')));
        query.addAll(client.makeParams('add', (List<Object>) params.get('add')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASJsonSuccessBase) client.invoke(
            'PATCH', '/users/me/subscriptions', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            OASJsonSuccessBase.class
        );
    }
}
