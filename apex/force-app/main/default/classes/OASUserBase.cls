/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * A dictionary containing basic data on a given Zulip user.\n
 */
public class OASUserBase implements OAS.MappedProperties {
    /**
     * The Zulip API email address of the user or bot.\n\nIf you do not have permission to view the email address of the target user,\nthis will be a fake email address that is usable for the Zulip API but nothing else.\n
     * @return email
     */
    public String email { get; set; }

    /**
     * A boolean specifying whether the user is a bot or full account.\n
     * @return isBot
     */
    public Boolean isBot { get; set; }

    /**
     * URL for the user\'s avatar.  Will be `null` if the `client_gravatar`\nquery parameter was set to `True` and the user\'s avatar is hosted by\nthe Gravatar provider (i.e. the user has never uploaded an avatar).\n\n**Changes**: In Zulip 3.0 (feature level 18), if the client has the\n`user_avatar_url_field_optional` capability, this will be missing at\nthe server\'s sole discretion.\n
     * @return avatarUrl
     */
    public String avatarUrl { get; set; }

    /**
     * Version for the user\'s avatar.  Used for cache-busting requests\nfor the user\'s avatar.  Clients generally shouldn\'t need to use this;\nmost avatar URLs sent by Zulip will already end with `?v={avatar_version}`.\n
     * @return avatarVersion
     */
    public Integer avatarVersion { get; set; }

    /**
     * Full name of the user or bot, used for all display purposes.\n
     * @return fullName
     */
    public String fullName { get; set; }

    /**
     * A boolean specifying whether the user is an organization administrator.\n
     * @return isAdmin
     */
    public Boolean isAdmin { get; set; }

    /**
     * A boolean specifying whether the user is an organization owner.\nIf true, is_admin will also be true.\n\n**Changes**: New in Zulip 3.0 (feature level 8).\n
     * @return isOwner
     */
    public Boolean isOwner { get; set; }

    /**
     * A boolean specifying whether the user is a billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n
     * @return isBillingAdmin
     */
    public Boolean isBillingAdmin { get; set; }

    /**
     * [Organization-level role](/help/roles-and-permissions)) of the user.\nPoosible values are:\n\n* Organization owner => 100\n* Organization administrator => 200\n* Organization moderator => 300\n* Member => 400\n* Guest => 600\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n
     */
    public enum RoleEnum {
        NUMBER_100,
        NUMBER_200,
        NUMBER_300,
        NUMBER_400,
        NUMBER_600
    }

    /**
     * [Organization-level role](/help/roles-and-permissions)) of the user.\nPoosible values are:\n\n* Organization owner => 100\n* Organization administrator => 200\n* Organization moderator => 300\n* Member => 400\n* Guest => 600\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n
     * @return role
     */
    public RoleEnum role { get; set; }

    /**
     * An integer describing the type of bot:\n* `null` if the user isn\'t a bot.\n* `1` for a `Generic` bot.\n* `2` for an `Incoming webhook` bot.\n* `3` for an `Outgoing webhook` bot.\n* `4` for an `Embedded` bot.\n
     * @return botType
     */
    public Integer botType { get; set; }

    /**
     * The unique ID of the user.\n
     * @return userId
     */
    public Integer userId { get; set; }

    /**
     * If the user is a bot (i.e. `is_bot` is `True`),\n`bot_owner` is the user ID of the bot\'s owner (usually, whoever\ncreated the bot).\n\nWill be null for legacy bots that do not have an owner.\n\n**Changes**: New in Zulip 3.0 (feature level\n1).  In previous versions, there was a `bot_owner` field\ncontaining the email address of the bot\'s owner.\n
     * @return botOwnerId
     */
    public Integer botOwnerId { get; set; }

    /**
     * A boolean specifying whether the user account has been deactivated.\n
     * @return isActive
     */
    public Boolean isActive { get; set; }

    /**
     * A boolean specifying whether the user is a guest user.\n
     * @return isGuest
     */
    public Boolean isGuest { get; set; }

    /**
     * The time zone of the user.\n
     * @return timezone
     */
    public String timezone { get; set; }

    /**
     * The time the user account was created.\n
     * @return dateJoined
     */
    public String dateJoined { get; set; }

    /**
     * The user\'s real email address.  This field is present only if\n[email address visibility](/help/restrict-visibility-of-email-addresses) is\nlimited and you are an administrator with access to real email addresses\nunder the configured policy.\n
     * @return deliveryEmail
     */
    public String deliveryEmail { get; set; }

    /**
     * A dictionary containing custom profile field data for the user. Each entry\nmaps the integer ID of a custom profile field in the organization to a\ndictionary containing the user\'s data for that field.  Generally the data\nincludes just a single `value` key; for those custom profile fields\nsupporting Markdown, a `rendered_value` key will also be present.\n
     * @return profileData
     */
    public Map<String, Object> profileData { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'is_bot' => 'isBot',
        'avatar_url' => 'avatarUrl',
        'avatar_version' => 'avatarVersion',
        'full_name' => 'fullName',
        'is_admin' => 'isAdmin',
        'is_owner' => 'isOwner',
        'is_billing_admin' => 'isBillingAdmin',
        'bot_type' => 'botType',
        'user_id' => 'userId',
        'bot_owner_id' => 'botOwnerId',
        'is_active' => 'isActive',
        'is_guest' => 'isGuest',
        'date_joined' => 'dateJoined',
        'delivery_email' => 'deliveryEmail',
        'profile_data' => 'profileData'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASUserBase() {
        profileData = new Map<String, Object>();
    }

    public static OASUserBase getExample() {
        OASUserBase userBase = new OASUserBase();
          userBase.email = '';
          userBase.isBot = true;
          userBase.avatarUrl = '';
          userBase.avatarVersion = 0;
          userBase.fullName = '';
          userBase.isAdmin = true;
          userBase.isOwner = true;
          userBase.isBillingAdmin = true;
          userBase.role = RoleEnum.NUMBER_0;
          userBase.botType = 0;
          userBase.userId = 0;
          userBase.botOwnerId = 0;
          userBase.isActive = true;
          userBase.isGuest = true;
          userBase.timezone = '';
          userBase.dateJoined = '';
          userBase.deliveryEmail = '';
          userBase.profileData = new Map<String, Object>{'key'=>null};
        return userBase;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUserBase) {           
            OASUserBase userBase = (OASUserBase) obj;
            return this.email == userBase.email
                && this.isBot == userBase.isBot
                && this.avatarUrl == userBase.avatarUrl
                && this.avatarVersion == userBase.avatarVersion
                && this.fullName == userBase.fullName
                && this.isAdmin == userBase.isAdmin
                && this.isOwner == userBase.isOwner
                && this.isBillingAdmin == userBase.isBillingAdmin
                && this.role == userBase.role
                && this.botType == userBase.botType
                && this.userId == userBase.userId
                && this.botOwnerId == userBase.botOwnerId
                && this.isActive == userBase.isActive
                && this.isGuest == userBase.isGuest
                && this.timezone == userBase.timezone
                && this.dateJoined == userBase.dateJoined
                && this.deliveryEmail == userBase.deliveryEmail
                && this.profileData == userBase.profileData;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (email == null ? 0 : System.hashCode(email));
        hashCode = (17 * hashCode) + (isBot == null ? 0 : System.hashCode(isBot));
        hashCode = (17 * hashCode) + (avatarUrl == null ? 0 : System.hashCode(avatarUrl));
        hashCode = (17 * hashCode) + (avatarVersion == null ? 0 : System.hashCode(avatarVersion));
        hashCode = (17 * hashCode) + (fullName == null ? 0 : System.hashCode(fullName));
        hashCode = (17 * hashCode) + (isAdmin == null ? 0 : System.hashCode(isAdmin));
        hashCode = (17 * hashCode) + (isOwner == null ? 0 : System.hashCode(isOwner));
        hashCode = (17 * hashCode) + (isBillingAdmin == null ? 0 : System.hashCode(isBillingAdmin));
        hashCode = (17 * hashCode) + (role == null ? 0 : System.hashCode(role));
        hashCode = (17 * hashCode) + (botType == null ? 0 : System.hashCode(botType));
        hashCode = (17 * hashCode) + (userId == null ? 0 : System.hashCode(userId));
        hashCode = (17 * hashCode) + (botOwnerId == null ? 0 : System.hashCode(botOwnerId));
        hashCode = (17 * hashCode) + (isActive == null ? 0 : System.hashCode(isActive));
        hashCode = (17 * hashCode) + (isGuest == null ? 0 : System.hashCode(isGuest));
        hashCode = (17 * hashCode) + (timezone == null ? 0 : System.hashCode(timezone));
        hashCode = (17 * hashCode) + (dateJoined == null ? 0 : System.hashCode(dateJoined));
        hashCode = (17 * hashCode) + (deliveryEmail == null ? 0 : System.hashCode(deliveryEmail));
        hashCode = (17 * hashCode) + (profileData == null ? 0 : System.hashCode(profileData));
        return hashCode;
    }
}

