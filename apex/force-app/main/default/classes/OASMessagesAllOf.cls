/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASMessagesAllOf
 */
public class OASMessagesAllOf implements OAS.MappedProperties {
    /**
     * Get avatarUrl
     * @return avatarUrl
     */
    public oas_any_type_not_mapped avatarUrl { get; set; }

    /**
     * Get client
     * @return client
     */
    public oas_any_type_not_mapped client { get; set; }

    /**
     * Get content
     * @return content
     */
    public oas_any_type_not_mapped content { get; set; }

    /**
     * Get contentType
     * @return contentType
     */
    public oas_any_type_not_mapped contentType { get; set; }

    /**
     * Get displayRecipient
     * @return displayRecipient
     */
    public oas_any_type_not_mapped displayRecipient { get; set; }

    /**
     * Get id
     * @return id
     */
    public oas_any_type_not_mapped id { get; set; }

    /**
     * Get isMeMessage
     * @return isMeMessage
     */
    public oas_any_type_not_mapped isMeMessage { get; set; }

    /**
     * Get reactions
     * @return reactions
     */
    public oas_any_type_not_mapped reactions { get; set; }

    /**
     * Get recipientId
     * @return recipientId
     */
    public oas_any_type_not_mapped recipientId { get; set; }

    /**
     * Get senderEmail
     * @return senderEmail
     */
    public oas_any_type_not_mapped senderEmail { get; set; }

    /**
     * Get senderFullName
     * @return senderFullName
     */
    public oas_any_type_not_mapped senderFullName { get; set; }

    /**
     * Get senderId
     * @return senderId
     */
    public oas_any_type_not_mapped senderId { get; set; }

    /**
     * Get senderRealmStr
     * @return senderRealmStr
     */
    public oas_any_type_not_mapped senderRealmStr { get; set; }

    /**
     * Get streamId
     * @return streamId
     */
    public oas_any_type_not_mapped streamId { get; set; }

    /**
     * Get subject
     * @return subject
     */
    public oas_any_type_not_mapped subject { get; set; }

    /**
     * Get topicLinks
     * @return topicLinks
     */
    public oas_any_type_not_mapped topicLinks { get; set; }

    /**
     * Get submessages
     * @return submessages
     */
    public oas_any_type_not_mapped submessages { get; set; }

    /**
     * Get timestamp
     * @return timestamp
     */
    public oas_any_type_not_mapped timestamp { get; set; }

    /**
     * Get type
     * @return type
     */
    public oas_any_type_not_mapped type { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'avatar_url' => 'avatarUrl',
        'content_type' => 'contentType',
        'display_recipient' => 'displayRecipient',
        'is_me_message' => 'isMeMessage',
        'recipient_id' => 'recipientId',
        'sender_email' => 'senderEmail',
        'sender_full_name' => 'senderFullName',
        'sender_id' => 'senderId',
        'sender_realm_str' => 'senderRealmStr',
        'stream_id' => 'streamId',
        'topic_links' => 'topicLinks'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASMessagesAllOf getExample() {
        OASMessagesAllOf messagesAllOf = new OASMessagesAllOf();
          messagesAllOf.avatarUrl = oas_any_type_not_mapped.getExample();
          messagesAllOf.client = oas_any_type_not_mapped.getExample();
          messagesAllOf.content = oas_any_type_not_mapped.getExample();
          messagesAllOf.contentType = oas_any_type_not_mapped.getExample();
          messagesAllOf.displayRecipient = oas_any_type_not_mapped.getExample();
          messagesAllOf.id = oas_any_type_not_mapped.getExample();
          messagesAllOf.isMeMessage = oas_any_type_not_mapped.getExample();
          messagesAllOf.reactions = oas_any_type_not_mapped.getExample();
          messagesAllOf.recipientId = oas_any_type_not_mapped.getExample();
          messagesAllOf.senderEmail = oas_any_type_not_mapped.getExample();
          messagesAllOf.senderFullName = oas_any_type_not_mapped.getExample();
          messagesAllOf.senderId = oas_any_type_not_mapped.getExample();
          messagesAllOf.senderRealmStr = oas_any_type_not_mapped.getExample();
          messagesAllOf.streamId = oas_any_type_not_mapped.getExample();
          messagesAllOf.subject = oas_any_type_not_mapped.getExample();
          messagesAllOf.topicLinks = oas_any_type_not_mapped.getExample();
          messagesAllOf.submessages = oas_any_type_not_mapped.getExample();
          messagesAllOf.timestamp = oas_any_type_not_mapped.getExample();
          messagesAllOf.type = oas_any_type_not_mapped.getExample();
        return messagesAllOf;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASMessagesAllOf) {           
            OASMessagesAllOf messagesAllOf = (OASMessagesAllOf) obj;
            return this.avatarUrl == messagesAllOf.avatarUrl
                && this.client == messagesAllOf.client
                && this.content == messagesAllOf.content
                && this.contentType == messagesAllOf.contentType
                && this.displayRecipient == messagesAllOf.displayRecipient
                && this.id == messagesAllOf.id
                && this.isMeMessage == messagesAllOf.isMeMessage
                && this.reactions == messagesAllOf.reactions
                && this.recipientId == messagesAllOf.recipientId
                && this.senderEmail == messagesAllOf.senderEmail
                && this.senderFullName == messagesAllOf.senderFullName
                && this.senderId == messagesAllOf.senderId
                && this.senderRealmStr == messagesAllOf.senderRealmStr
                && this.streamId == messagesAllOf.streamId
                && this.subject == messagesAllOf.subject
                && this.topicLinks == messagesAllOf.topicLinks
                && this.submessages == messagesAllOf.submessages
                && this.timestamp == messagesAllOf.timestamp
                && this.type == messagesAllOf.type;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (avatarUrl == null ? 0 : System.hashCode(avatarUrl));
        hashCode = (17 * hashCode) + (client == null ? 0 : System.hashCode(client));
        hashCode = (17 * hashCode) + (content == null ? 0 : System.hashCode(content));
        hashCode = (17 * hashCode) + (contentType == null ? 0 : System.hashCode(contentType));
        hashCode = (17 * hashCode) + (displayRecipient == null ? 0 : System.hashCode(displayRecipient));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (isMeMessage == null ? 0 : System.hashCode(isMeMessage));
        hashCode = (17 * hashCode) + (reactions == null ? 0 : System.hashCode(reactions));
        hashCode = (17 * hashCode) + (recipientId == null ? 0 : System.hashCode(recipientId));
        hashCode = (17 * hashCode) + (senderEmail == null ? 0 : System.hashCode(senderEmail));
        hashCode = (17 * hashCode) + (senderFullName == null ? 0 : System.hashCode(senderFullName));
        hashCode = (17 * hashCode) + (senderId == null ? 0 : System.hashCode(senderId));
        hashCode = (17 * hashCode) + (senderRealmStr == null ? 0 : System.hashCode(senderRealmStr));
        hashCode = (17 * hashCode) + (streamId == null ? 0 : System.hashCode(streamId));
        hashCode = (17 * hashCode) + (subject == null ? 0 : System.hashCode(subject));
        hashCode = (17 * hashCode) + (topicLinks == null ? 0 : System.hashCode(topicLinks));
        hashCode = (17 * hashCode) + (submessages == null ? 0 : System.hashCode(submessages));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        return hashCode;
    }
}

