/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASBasicStream
 */
public class OASBasicStream implements OASBasicStreamBase, OASBasicStreamAllOf, OAS.MappedProperties {
    /**
     * Get streamId
     * @return streamId
     */
    public oas_any_type_not_mapped streamId { get; set; }

    /**
     * Get name
     * @return name
     */
    public oas_any_type_not_mapped name { get; set; }

    /**
     * Get description
     * @return description
     */
    public oas_any_type_not_mapped description { get; set; }

    /**
     * Get dateCreated
     * @return dateCreated
     */
    public oas_any_type_not_mapped dateCreated { get; set; }

    /**
     * Get inviteOnly
     * @return inviteOnly
     */
    public oas_any_type_not_mapped inviteOnly { get; set; }

    /**
     * Get renderedDescription
     * @return renderedDescription
     */
    public oas_any_type_not_mapped renderedDescription { get; set; }

    /**
     * Get isWebPublic
     * @return isWebPublic
     */
    public oas_any_type_not_mapped isWebPublic { get; set; }

    /**
     * Get streamPostPolicy
     * @return streamPostPolicy
     */
    public oas_any_type_not_mapped streamPostPolicy { get; set; }

    /**
     * Get messageRetentionDays
     * @return messageRetentionDays
     */
    public oas_any_type_not_mapped messageRetentionDays { get; set; }

    /**
     * Get historyPublicToSubscribers
     * @return historyPublicToSubscribers
     */
    public oas_any_type_not_mapped historyPublicToSubscribers { get; set; }

    /**
     * Get firstMessageId
     * @return firstMessageId
     */
    public oas_any_type_not_mapped firstMessageId { get; set; }

    /**
     * Get isAnnouncementOnly
     * @return isAnnouncementOnly
     */
    public oas_any_type_not_mapped isAnnouncementOnly { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'rendered_description' => 'renderedDescription',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'is_announcement_only' => 'isAnnouncementOnly'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASBasicStream getExample() {
        OASBasicStream basicStream = new OASBasicStream();
          basicStream.streamId = oas_any_type_not_mapped.getExample();
          basicStream.name = oas_any_type_not_mapped.getExample();
          basicStream.description = oas_any_type_not_mapped.getExample();
          basicStream.dateCreated = oas_any_type_not_mapped.getExample();
          basicStream.inviteOnly = oas_any_type_not_mapped.getExample();
          basicStream.renderedDescription = oas_any_type_not_mapped.getExample();
          basicStream.isWebPublic = oas_any_type_not_mapped.getExample();
          basicStream.streamPostPolicy = oas_any_type_not_mapped.getExample();
          basicStream.messageRetentionDays = oas_any_type_not_mapped.getExample();
          basicStream.historyPublicToSubscribers = oas_any_type_not_mapped.getExample();
          basicStream.firstMessageId = oas_any_type_not_mapped.getExample();
          basicStream.isAnnouncementOnly = oas_any_type_not_mapped.getExample();
        return basicStream;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASBasicStream) {           
            OASBasicStream basicStream = (OASBasicStream) obj;
            return this.streamId == basicStream.streamId
                && this.name == basicStream.name
                && this.description == basicStream.description
                && this.dateCreated == basicStream.dateCreated
                && this.inviteOnly == basicStream.inviteOnly
                && this.renderedDescription == basicStream.renderedDescription
                && this.isWebPublic == basicStream.isWebPublic
                && this.streamPostPolicy == basicStream.streamPostPolicy
                && this.messageRetentionDays == basicStream.messageRetentionDays
                && this.historyPublicToSubscribers == basicStream.historyPublicToSubscribers
                && this.firstMessageId == basicStream.firstMessageId
                && this.isAnnouncementOnly == basicStream.isAnnouncementOnly;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (streamId == null ? 0 : System.hashCode(streamId));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (inviteOnly == null ? 0 : System.hashCode(inviteOnly));
        hashCode = (17 * hashCode) + (renderedDescription == null ? 0 : System.hashCode(renderedDescription));
        hashCode = (17 * hashCode) + (isWebPublic == null ? 0 : System.hashCode(isWebPublic));
        hashCode = (17 * hashCode) + (streamPostPolicy == null ? 0 : System.hashCode(streamPostPolicy));
        hashCode = (17 * hashCode) + (messageRetentionDays == null ? 0 : System.hashCode(messageRetentionDays));
        hashCode = (17 * hashCode) + (historyPublicToSubscribers == null ? 0 : System.hashCode(historyPublicToSubscribers));
        hashCode = (17 * hashCode) + (firstMessageId == null ? 0 : System.hashCode(firstMessageId));
        hashCode = (17 * hashCode) + (isAnnouncementOnly == null ? 0 : System.hashCode(isAnnouncementOnly));
        return hashCode;
    }
}

