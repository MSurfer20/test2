/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASSubscriptions
 */
public class OASSubscriptions implements OAS.MappedProperties {
    /**
     * The unique ID of a stream.\n
     * @return streamId
     */
    public Integer streamId { get; set; }

    /**
     * The name of a stream.\n
     * @return name
     */
    public String name { get; set; }

    /**
     * The short description of a stream in text/markdown format,\nintended to be used to prepopulate UI for editing a stream\'s\ndescription.\n
     * @return description
     */
    public String description { get; set; }

    /**
     * A short description of a stream rendered as HTML, intended to\nbe used when displaying the stream description in a UI.\n\nOne should use the standard Zulip rendered_markdown CSS when\ndisplaying this content so that emoji, LaTeX, and other syntax\nwork correctly.  And any client-side security logic for\nuser-generated message content should be applied when displaying\nthis HTML as though it were the body of a Zulip message.\n
     * @return renderedDescription
     */
    public String renderedDescription { get; set; }

    /**
     * The UNIX timestamp for when the stream was created, in UTC seconds.\n\n**Changes**: New in Zulip 4.0 (feature level 30).\n
     * @return dateCreated
     */
    public Integer dateCreated { get; set; }

    /**
     * Specifies whether the stream is private or not.\nOnly people who have been invited can access a private stream.\n
     * @return inviteOnly
     */
    public Boolean inviteOnly { get; set; }

    /**
     * A list of user IDs of users who are also subscribed\nto a given stream. Included only if `include_subscribers` is `true`.\n
     * @return subscribers
     */
    public List<Integer> subscribers { get; set; }

    /**
     * A boolean specifying whether desktop notifications\nare enabled for the given stream.\n\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, enable_stream_desktop_notifications, for\nthis stream.\n
     * @return desktopNotifications
     */
    public Boolean desktopNotifications { get; set; }

    /**
     * A boolean specifying whether email notifications\nare enabled for the given stream.\n\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, enable_stream_email_notifications, for\nthis stream.\n
     * @return emailNotifications
     */
    public Boolean emailNotifications { get; set; }

    /**
     * A boolean specifying whether wildcard mentions\ntrigger notifications as though they were personal\nmentions in this stream.\n\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, wildcard_mentions_notify, for\nthis stream.\n
     * @return wildcardMentionsNotify
     */
    public Boolean wildcardMentionsNotify { get; set; }

    /**
     * A boolean specifying whether push notifications\nare enabled for the given stream.\n\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, enable_stream_push_notifications, for\nthis stream.\n
     * @return pushNotifications
     */
    public Boolean pushNotifications { get; set; }

    /**
     * A boolean specifying whether audible notifications\nare enabled for the given stream.\n\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, enable_stream_audible_notifications, for\nthis stream.\n
     * @return audibleNotifications
     */
    public Boolean audibleNotifications { get; set; }

    /**
     * A boolean specifying whether the given stream has been pinned\nto the top.\n
     * @return pinToTop
     */
    public Boolean pinToTop { get; set; }

    /**
     * Email address of the given stream, used for\n[sending emails to the stream](/help/message-a-stream-by-email).\n
     * @return emailAddress
     */
    public String emailAddress { get; set; }

    /**
     * Whether the user has muted the stream. Muted streams do\nnot count towards your total unread count and do not show up in\n`All messages` view (previously known as `Home` view).\n\n**Changes**: Prior to Zulip 2.1, this feature was\nrepresented by the more confusingly named `in_home_view` (with the\nopposite value, `in_home_view=!is_muted`).\n
     * @return isMuted
     */
    public Boolean isMuted { get; set; }

    /**
     * Legacy property for if the given stream is muted, with inverted meeting.\n\n**Deprecated**; clients should use is_muted where available.\n
     * @return inHomeView
     */
    public Boolean inHomeView { get; set; }

    /**
     * Whether only organization administrators can post to the stream.\n\n**Changes**: Deprecated in Zulip 3.0 (feature level 1), use\n`stream_post_policy` instead.\n
     * @return isAnnouncementOnly
     */
    public Boolean isAnnouncementOnly { get; set; }

    /**
     * Whether the stream has been configured to allow unauthenticated\naccess to its message history from the web.\n
     * @return isWebPublic
     */
    public Boolean isWebPublic { get; set; }

    /**
     * The user\'s role within the stream (distinct from the user\'s\n[organization-level role](/help/roles-and-permissions)).\nValid values are:\n\n* 20 => Stream administrator.\n* 50 => Subscriber.\n\n**Changes**: New in Zulip 4.0 (feature level 31).\n
     */
    public enum RoleEnum {
        NUMBER_20,
        NUMBER_50
    }

    /**
     * The user\'s role within the stream (distinct from the user\'s\n[organization-level role](/help/roles-and-permissions)).\nValid values are:\n\n* 20 => Stream administrator.\n* 50 => Subscriber.\n\n**Changes**: New in Zulip 4.0 (feature level 31).\n
     * @return role
     */
    public RoleEnum role { get; set; }

    /**
     * The user\'s personal color for the stream.\n
     * @return color
     */
    public String color { get; set; }

    /**
     * Policy for which users can post messages to the stream.\n\n* 1 => Any user can post.\n* 2 => Only administrators can post.\n* 3 => Only full members can post.\n* 4 => Only moderators can post.\n\n**Changes**: New in Zulip 3.0, replacing the previous\n`is_announcement_only` boolean.\n
     * @return streamPostPolicy
     */
    public Integer streamPostPolicy { get; set; }

    /**
     * Number of days that messages sent to this stream will be stored\nbefore being automatically deleted by the [message retention\npolicy](/help/message-retention-policy).  There are two special values:\n\n* `null`, the default, means the stream will inherit the organization\n  level setting.\n* `-1` encodes retaining messages in this stream forever.\n\n**Changes**: New in Zulip 3.0 (feature level 17).\n
     * @return messageRetentionDays
     */
    public Integer messageRetentionDays { get; set; }

    /**
     * Whether the history of the stream is public to its subscribers.\n\nCurrently always true for public streams (i.e. invite_only=False implies\nhistory_public_to_subscribers=True), but clients should not make that\nassumption, as we may change that behavior in the future.\n
     * @return historyPublicToSubscribers
     */
    public Boolean historyPublicToSubscribers { get; set; }

    /**
     * The id of the first message in the stream.\n\nIntended to help clients determine whether they need to display\nUI like the "more topics" widget that would suggest the stream\nhas older history that can be accessed.\n\nNull is used for streams with no message history.\n
     * @return firstMessageId
     */
    public Integer firstMessageId { get; set; }

    /**
     * The average number of messages sent to the stream in recent weeks,\nrounded to the nearest integer.\n\nNull means the stream was recently created and there is\ninsufficient data to estimate the average traffic.\n
     * @return streamWeeklyTraffic
     */
    public Integer streamWeeklyTraffic { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'stream_id' => 'streamId',
        'rendered_description' => 'renderedDescription',
        'date_created' => 'dateCreated',
        'invite_only' => 'inviteOnly',
        'desktop_notifications' => 'desktopNotifications',
        'email_notifications' => 'emailNotifications',
        'wildcard_mentions_notify' => 'wildcardMentionsNotify',
        'push_notifications' => 'pushNotifications',
        'audible_notifications' => 'audibleNotifications',
        'pin_to_top' => 'pinToTop',
        'email_address' => 'emailAddress',
        'is_muted' => 'isMuted',
        'in_home_view' => 'inHomeView',
        'is_announcement_only' => 'isAnnouncementOnly',
        'is_web_public' => 'isWebPublic',
        'stream_post_policy' => 'streamPostPolicy',
        'message_retention_days' => 'messageRetentionDays',
        'history_public_to_subscribers' => 'historyPublicToSubscribers',
        'first_message_id' => 'firstMessageId',
        'stream_weekly_traffic' => 'streamWeeklyTraffic'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASSubscriptions() {
        subscribers = new List<Integer>();
    }

    public static OASSubscriptions getExample() {
        OASSubscriptions subscriptions = new OASSubscriptions();
          subscriptions.streamId = 0;
          subscriptions.name = '';
          subscriptions.description = '';
          subscriptions.renderedDescription = '';
          subscriptions.dateCreated = 0;
          subscriptions.inviteOnly = true;
          subscriptions.subscribers = new List<Integer>{0};
          subscriptions.desktopNotifications = true;
          subscriptions.emailNotifications = true;
          subscriptions.wildcardMentionsNotify = true;
          subscriptions.pushNotifications = true;
          subscriptions.audibleNotifications = true;
          subscriptions.pinToTop = true;
          subscriptions.emailAddress = '';
          subscriptions.isMuted = true;
          subscriptions.inHomeView = true;
          subscriptions.isAnnouncementOnly = true;
          subscriptions.isWebPublic = true;
          subscriptions.role = RoleEnum.NUMBER_0;
          subscriptions.color = '';
          subscriptions.streamPostPolicy = 0;
          subscriptions.messageRetentionDays = 0;
          subscriptions.historyPublicToSubscribers = true;
          subscriptions.firstMessageId = 0;
          subscriptions.streamWeeklyTraffic = 0;
        return subscriptions;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSubscriptions) {           
            OASSubscriptions subscriptions = (OASSubscriptions) obj;
            return this.streamId == subscriptions.streamId
                && this.name == subscriptions.name
                && this.description == subscriptions.description
                && this.renderedDescription == subscriptions.renderedDescription
                && this.dateCreated == subscriptions.dateCreated
                && this.inviteOnly == subscriptions.inviteOnly
                && this.subscribers == subscriptions.subscribers
                && this.desktopNotifications == subscriptions.desktopNotifications
                && this.emailNotifications == subscriptions.emailNotifications
                && this.wildcardMentionsNotify == subscriptions.wildcardMentionsNotify
                && this.pushNotifications == subscriptions.pushNotifications
                && this.audibleNotifications == subscriptions.audibleNotifications
                && this.pinToTop == subscriptions.pinToTop
                && this.emailAddress == subscriptions.emailAddress
                && this.isMuted == subscriptions.isMuted
                && this.inHomeView == subscriptions.inHomeView
                && this.isAnnouncementOnly == subscriptions.isAnnouncementOnly
                && this.isWebPublic == subscriptions.isWebPublic
                && this.role == subscriptions.role
                && this.color == subscriptions.color
                && this.streamPostPolicy == subscriptions.streamPostPolicy
                && this.messageRetentionDays == subscriptions.messageRetentionDays
                && this.historyPublicToSubscribers == subscriptions.historyPublicToSubscribers
                && this.firstMessageId == subscriptions.firstMessageId
                && this.streamWeeklyTraffic == subscriptions.streamWeeklyTraffic;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (streamId == null ? 0 : System.hashCode(streamId));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (renderedDescription == null ? 0 : System.hashCode(renderedDescription));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (inviteOnly == null ? 0 : System.hashCode(inviteOnly));
        hashCode = (17 * hashCode) + (subscribers == null ? 0 : System.hashCode(subscribers));
        hashCode = (17 * hashCode) + (desktopNotifications == null ? 0 : System.hashCode(desktopNotifications));
        hashCode = (17 * hashCode) + (emailNotifications == null ? 0 : System.hashCode(emailNotifications));
        hashCode = (17 * hashCode) + (wildcardMentionsNotify == null ? 0 : System.hashCode(wildcardMentionsNotify));
        hashCode = (17 * hashCode) + (pushNotifications == null ? 0 : System.hashCode(pushNotifications));
        hashCode = (17 * hashCode) + (audibleNotifications == null ? 0 : System.hashCode(audibleNotifications));
        hashCode = (17 * hashCode) + (pinToTop == null ? 0 : System.hashCode(pinToTop));
        hashCode = (17 * hashCode) + (emailAddress == null ? 0 : System.hashCode(emailAddress));
        hashCode = (17 * hashCode) + (isMuted == null ? 0 : System.hashCode(isMuted));
        hashCode = (17 * hashCode) + (inHomeView == null ? 0 : System.hashCode(inHomeView));
        hashCode = (17 * hashCode) + (isAnnouncementOnly == null ? 0 : System.hashCode(isAnnouncementOnly));
        hashCode = (17 * hashCode) + (isWebPublic == null ? 0 : System.hashCode(isWebPublic));
        hashCode = (17 * hashCode) + (role == null ? 0 : System.hashCode(role));
        hashCode = (17 * hashCode) + (color == null ? 0 : System.hashCode(color));
        hashCode = (17 * hashCode) + (streamPostPolicy == null ? 0 : System.hashCode(streamPostPolicy));
        hashCode = (17 * hashCode) + (messageRetentionDays == null ? 0 : System.hashCode(messageRetentionDays));
        hashCode = (17 * hashCode) + (historyPublicToSubscribers == null ? 0 : System.hashCode(historyPublicToSubscribers));
        hashCode = (17 * hashCode) + (firstMessageId == null ? 0 : System.hashCode(firstMessageId));
        hashCode = (17 * hashCode) + (streamWeeklyTraffic == null ? 0 : System.hashCode(streamWeeklyTraffic));
        return hashCode;
    }
}

