/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASEmojiReactionBase
 */
public class OASEmojiReactionBase implements OASEmojiBase, OASEmojiReactionBaseAllOf, OAS.MappedProperties {
    /**
     * A unique identifier, defining the specific emoji codepoint requested,\nwithin the namespace of the `reaction_type`.\n\nFor example, for `unicode_emoji`, this will be an encoding of the\nUnicode codepoint; for `realm_emoji`, it\'ll be the ID of the realm emoji.\n
     * @return emojiCode
     */
    public String emojiCode { get; set; }

    /**
     * Name of the emoji.\n
     * @return emojiName
     */
    public String emojiName { get; set; }

    /**
     * One of the following values:\n\n* `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode\n  codepoint).\n* `realm_emoji`: [Custom emoji](/help/add-custom-emoji).\n  (`emoji_code` will be its ID).\n* `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to\n  namespace the `zulip` emoji.\n
     * @return reactionType
     */
    public String reactionType { get; set; }

    /**
     * The ID of the user who added the reaction.\n\n**Changes**: New in Zulip 3.0 (feature level 2). The `user`\nobject is deprecated and will be removed in the future.\n
     * @return userId
     */
    public Integer userId { get; set; }

    /**
     * Get user
     * @return user
     */
    public OASEmojiReactionBaseAllOfUser user { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType',
        'user_id' => 'userId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType',
        'user_id' => 'userId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType',
        'user_id' => 'userId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'emoji_code' => 'emojiCode',
        'emoji_name' => 'emojiName',
        'reaction_type' => 'reactionType',
        'user_id' => 'userId'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASEmojiReactionBase getExample() {
        OASEmojiReactionBase emojiReactionBase = new OASEmojiReactionBase();
          emojiReactionBase.emojiCode = '';
          emojiReactionBase.emojiName = '';
          emojiReactionBase.reactionType = '';
          emojiReactionBase.userId = 0;
          emojiReactionBase.user = OASEmojiReactionBaseAllOfUser.getExample();
        return emojiReactionBase;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASEmojiReactionBase) {           
            OASEmojiReactionBase emojiReactionBase = (OASEmojiReactionBase) obj;
            return this.emojiCode == emojiReactionBase.emojiCode
                && this.emojiName == emojiReactionBase.emojiName
                && this.reactionType == emojiReactionBase.reactionType
                && this.userId == emojiReactionBase.userId
                && this.user == emojiReactionBase.user;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (emojiCode == null ? 0 : System.hashCode(emojiCode));
        hashCode = (17 * hashCode) + (emojiName == null ? 0 : System.hashCode(emojiName));
        hashCode = (17 * hashCode) + (reactionType == null ? 0 : System.hashCode(reactionType));
        hashCode = (17 * hashCode) + (userId == null ? 0 : System.hashCode(userId));
        hashCode = (17 * hashCode) + (user == null ? 0 : System.hashCode(user));
        return hashCode;
    }
}

