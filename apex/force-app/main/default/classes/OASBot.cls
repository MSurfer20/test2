/*
 * Zulip REST API
 * Powerful open source group chat\n
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASBot
 */
public class OASBot implements OASBasicBotBase, OASBotAllOf, OAS.MappedProperties {
    /**
     * Get userId
     * @return userId
     */
    public oas_any_type_not_mapped userId { get; set; }

    /**
     * Get fullName
     * @return fullName
     */
    public oas_any_type_not_mapped fullName { get; set; }

    /**
     * Get apiKey
     * @return apiKey
     */
    public oas_any_type_not_mapped apiKey { get; set; }

    /**
     * Get defaultSendingStream
     * @return defaultSendingStream
     */
    public oas_any_type_not_mapped defaultSendingStream { get; set; }

    /**
     * Get defaultEventsRegisterStream
     * @return defaultEventsRegisterStream
     */
    public oas_any_type_not_mapped defaultEventsRegisterStream { get; set; }

    /**
     * Get defaultAllPublicStreams
     * @return defaultAllPublicStreams
     */
    public oas_any_type_not_mapped defaultAllPublicStreams { get; set; }

    /**
     * Get avatarUrl
     * @return avatarUrl
     */
    public oas_any_type_not_mapped avatarUrl { get; set; }

    /**
     * Get ownerId
     * @return ownerId
     */
    public oas_any_type_not_mapped ownerId { get; set; }

    /**
     * Get services
     * @return services
     */
    public oas_any_type_not_mapped services { get; set; }

    /**
     * The email of the bot.\n
     * @return email
     */
    public String email { get; set; }

    /**
     * An integer describing the type of bot:\n* `1` for a `Generic` bot.\n* `2` for an `Incoming webhook` bot.\n* `3` for an `Outgoing webhook` bot.\n* `4` for an `Embedded` bot.\n
     * @return botType
     */
    public Integer botType { get; set; }

    /**
     * A boolean describing whether the user account has been deactivated.\n
     * @return isActive
     */
    public Boolean isActive { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'user_id' => 'userId',
        'full_name' => 'fullName',
        'api_key' => 'apiKey',
        'default_sending_stream' => 'defaultSendingStream',
        'default_events_register_stream' => 'defaultEventsRegisterStream',
        'default_all_public_streams' => 'defaultAllPublicStreams',
        'avatar_url' => 'avatarUrl',
        'owner_id' => 'ownerId',
        'bot_type' => 'botType',
        'is_active' => 'isActive'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASBot getExample() {
        OASBot bot = new OASBot();
          bot.userId = oas_any_type_not_mapped.getExample();
          bot.fullName = oas_any_type_not_mapped.getExample();
          bot.apiKey = oas_any_type_not_mapped.getExample();
          bot.defaultSendingStream = oas_any_type_not_mapped.getExample();
          bot.defaultEventsRegisterStream = oas_any_type_not_mapped.getExample();
          bot.defaultAllPublicStreams = oas_any_type_not_mapped.getExample();
          bot.avatarUrl = oas_any_type_not_mapped.getExample();
          bot.ownerId = oas_any_type_not_mapped.getExample();
          bot.services = oas_any_type_not_mapped.getExample();
          bot.email = '';
          bot.botType = 0;
          bot.isActive = true;
        return bot;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASBot) {           
            OASBot bot = (OASBot) obj;
            return this.userId == bot.userId
                && this.fullName == bot.fullName
                && this.apiKey == bot.apiKey
                && this.defaultSendingStream == bot.defaultSendingStream
                && this.defaultEventsRegisterStream == bot.defaultEventsRegisterStream
                && this.defaultAllPublicStreams == bot.defaultAllPublicStreams
                && this.avatarUrl == bot.avatarUrl
                && this.ownerId == bot.ownerId
                && this.services == bot.services
                && this.email == bot.email
                && this.botType == bot.botType
                && this.isActive == bot.isActive;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (userId == null ? 0 : System.hashCode(userId));
        hashCode = (17 * hashCode) + (fullName == null ? 0 : System.hashCode(fullName));
        hashCode = (17 * hashCode) + (apiKey == null ? 0 : System.hashCode(apiKey));
        hashCode = (17 * hashCode) + (defaultSendingStream == null ? 0 : System.hashCode(defaultSendingStream));
        hashCode = (17 * hashCode) + (defaultEventsRegisterStream == null ? 0 : System.hashCode(defaultEventsRegisterStream));
        hashCode = (17 * hashCode) + (defaultAllPublicStreams == null ? 0 : System.hashCode(defaultAllPublicStreams));
        hashCode = (17 * hashCode) + (avatarUrl == null ? 0 : System.hashCode(avatarUrl));
        hashCode = (17 * hashCode) + (ownerId == null ? 0 : System.hashCode(ownerId));
        hashCode = (17 * hashCode) + (services == null ? 0 : System.hashCode(services));
        hashCode = (17 * hashCode) + (email == null ? 0 : System.hashCode(email));
        hashCode = (17 * hashCode) + (botType == null ? 0 : System.hashCode(botType));
        hashCode = (17 * hashCode) + (isActive == null ? 0 : System.hashCode(isActive));
        return hashCode;
    }
}

