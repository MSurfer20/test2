// tslint:disable
/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    JsonSuccess,
    JsonSuccessBase,
} from '../models';

export interface AddCodePlaygroundRequest {
    name: string;
    pygmentsLanguage: string;
    urlPrefix: string;
}

export interface AddLinkifierRequest {
    pattern: string;
    urlFormatString: string;
}

export interface CreateCustomProfileFieldRequest {
    fieldType: number;
    name?: string;
    hint?: string;
    fieldData?: object;
}

export interface RemoveCodePlaygroundRequest {
    playgroundId: number;
}

export interface RemoveLinkifierRequest {
    filterId: number;
}

export interface ReorderCustomProfileFieldsRequest {
    order: Array<number>;
}

export interface UpdateLinkifierRequest {
    filterId: number;
    pattern: string;
    urlFormatString: string;
}

export interface UploadCustomEmojiRequest {
    emojiName: string;
    filename?: Blob;
}

/**
 * no description
 */
export class ServerAndOrganizationsApi extends BaseAPI {

    /**
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
     * Add a code playground
     */
    addCodePlayground({ name, pygmentsLanguage, urlPrefix }: AddCodePlaygroundRequest): Observable<JsonSuccessBase & object>
    addCodePlayground({ name, pygmentsLanguage, urlPrefix }: AddCodePlaygroundRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    addCodePlayground({ name, pygmentsLanguage, urlPrefix }: AddCodePlaygroundRequest, opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        throwIfNullOrUndefined(name, 'name', 'addCodePlayground');
        throwIfNullOrUndefined(pygmentsLanguage, 'pygmentsLanguage', 'addCodePlayground');
        throwIfNullOrUndefined(urlPrefix, 'urlPrefix', 'addCodePlayground');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'name': name,
            'pygments_language': pygmentsLanguage,
            'url_prefix': urlPrefix,
        };

        return this.request<JsonSuccessBase & object>({
            url: '/realm/playgrounds',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 
     * Add a linkifier
     */
    addLinkifier({ pattern, urlFormatString }: AddLinkifierRequest): Observable<JsonSuccessBase & object>
    addLinkifier({ pattern, urlFormatString }: AddLinkifierRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    addLinkifier({ pattern, urlFormatString }: AddLinkifierRequest, opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        throwIfNullOrUndefined(pattern, 'pattern', 'addLinkifier');
        throwIfNullOrUndefined(urlFormatString, 'urlFormatString', 'addLinkifier');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'pattern': pattern,
            'url_format_string': urlFormatString,
        };

        return this.request<JsonSuccessBase & object>({
            url: '/realm/filters',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

    /**
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user\'s organization.  `POST {{ api_url }}/v1/realm/profile_fields` 
     * Create a custom profile field
     */
    createCustomProfileField({ fieldType, name, hint, fieldData }: CreateCustomProfileFieldRequest): Observable<JsonSuccessBase & object>
    createCustomProfileField({ fieldType, name, hint, fieldData }: CreateCustomProfileFieldRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    createCustomProfileField({ fieldType, name, hint, fieldData }: CreateCustomProfileFieldRequest, opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        throwIfNullOrUndefined(fieldType, 'fieldType', 'createCustomProfileField');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'field_type': fieldType,
        };

        if (name != null) { query['name'] = name; }
        if (hint != null) { query['hint'] = hint; }
        if (fieldData != null) { query['field_data'] = fieldData; }

        return this.request<JsonSuccessBase & object>({
            url: '/realm/profile_fields',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get all the custom emoji in the user\'s organization.  `GET {{ api_url }}/v1/realm/emoji` 
     * Get all custom emoji
     */
    getCustomEmoji(): Observable<JsonSuccessBase & object>
    getCustomEmoji(opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    getCustomEmoji(opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        return this.request<JsonSuccessBase & object>({
            url: '/realm/emoji',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user\'s organization.  `GET {{ api_url }}/v1/realm/profile_fields` 
     * Get all custom profile fields
     */
    getCustomProfileFields(): Observable<JsonSuccessBase & object>
    getCustomProfileFields(opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    getCustomProfileFields(opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        return this.request<JsonSuccessBase & object>({
            url: '/realm/profile_fields',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * List all of an organization\'s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 
     * Get linkifiers
     */
    getLinkifiers(): Observable<JsonSuccessBase & object>
    getLinkifiers(opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    getLinkifiers(opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        return this.request<JsonSuccessBase & object>({
            url: '/realm/linkifiers',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it\'s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
     * Get server settings
     */
    getServerSettings(): Observable<JsonSuccessBase & object>
    getServerSettings(opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccessBase & object>>
    getServerSettings(opts?: OperationOpts): Observable<JsonSuccessBase & object | RawAjaxResponse<JsonSuccessBase & object>> {
        return this.request<JsonSuccessBase & object>({
            url: '/server_settings',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 
     * Remove a code playground
     */
    removeCodePlayground({ playgroundId }: RemoveCodePlaygroundRequest): Observable<JsonSuccess>
    removeCodePlayground({ playgroundId }: RemoveCodePlaygroundRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    removeCodePlayground({ playgroundId }: RemoveCodePlaygroundRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(playgroundId, 'playgroundId', 'removeCodePlayground');

        return this.request<JsonSuccess>({
            url: '/realm/playgrounds/{playground_id}'.replace('{playground_id}', encodeURI(playgroundId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 
     * Remove a linkifier
     */
    removeLinkifier({ filterId }: RemoveLinkifierRequest): Observable<JsonSuccess>
    removeLinkifier({ filterId }: RemoveLinkifierRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    removeLinkifier({ filterId }: RemoveLinkifierRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(filterId, 'filterId', 'removeLinkifier');

        return this.request<JsonSuccess>({
            url: '/realm/filters/{filter_id}'.replace('{filter_id}', encodeURI(filterId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Reorder the custom profile fields in the user\'s organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
     * Reorder custom profile fields
     */
    reorderCustomProfileFields({ order }: ReorderCustomProfileFieldsRequest): Observable<JsonSuccess>
    reorderCustomProfileFields({ order }: ReorderCustomProfileFieldsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    reorderCustomProfileFields({ order }: ReorderCustomProfileFieldsRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(order, 'order', 'reorderCustomProfileFields');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'order': order,
        };

        return this.request<JsonSuccess>({
            url: '/realm/profile_fields',
            method: 'PATCH',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 
     * Update a linkifier
     */
    updateLinkifier({ filterId, pattern, urlFormatString }: UpdateLinkifierRequest): Observable<JsonSuccess>
    updateLinkifier({ filterId, pattern, urlFormatString }: UpdateLinkifierRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    updateLinkifier({ filterId, pattern, urlFormatString }: UpdateLinkifierRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(filterId, 'filterId', 'updateLinkifier');
        throwIfNullOrUndefined(pattern, 'pattern', 'updateLinkifier');
        throwIfNullOrUndefined(urlFormatString, 'urlFormatString', 'updateLinkifier');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'pattern': pattern,
            'url_format_string': urlFormatString,
        };

        return this.request<JsonSuccess>({
            url: '/realm/filters/{filter_id}'.replace('{filter_id}', encodeURI(filterId)),
            method: 'PATCH',
            query,
        }, opts?.responseOpts);
    };

    /**
     * This endpoint is used to upload a custom emoji for use in the user\'s organization.  Access to this endpoint depends on the [organization\'s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 
     * Upload custom emoji
     */
    uploadCustomEmoji({ emojiName, filename }: UploadCustomEmojiRequest): Observable<JsonSuccess>
    uploadCustomEmoji({ emojiName, filename }: UploadCustomEmojiRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    uploadCustomEmoji({ emojiName, filename }: UploadCustomEmojiRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(emojiName, 'emojiName', 'uploadCustomEmoji');

        const formData = new FormData();
        if (filename !== undefined) { formData.append('filename', filename as any); }

        return this.request<JsonSuccess>({
            url: '/realm/emoji/{emoji_name}'.replace('{emoji_name}', encodeURI(emojiName)),
            method: 'POST',
            body: formData,
        }, opts?.responseOpts);
    };

}
