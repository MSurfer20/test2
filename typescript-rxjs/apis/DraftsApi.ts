// tslint:disable
/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpQuery, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CodedError,
    Draft,
    JsonError,
    JsonSuccess,
} from '../models';

export interface CreateDraftsRequest {
    drafts?: Array<Draft>;
}

export interface DeleteDraftRequest {
    draftId: number;
}

export interface EditDraftRequest {
    draftId: number;
    draft: Draft;
}

/**
 * no description
 */
export class DraftsApi extends BaseAPI {

    /**
     * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via `drafts` events.  `POST {{ api_url }}/v1/drafts` 
     * Create drafts
     */
    createDrafts({ drafts }: CreateDraftsRequest): Observable<JsonSuccess & object>
    createDrafts({ drafts }: CreateDraftsRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess & object>>
    createDrafts({ drafts }: CreateDraftsRequest, opts?: OperationOpts): Observable<JsonSuccess & object | RawAjaxResponse<JsonSuccess & object>> {

        const query: HttpQuery = {};

        if (drafts != null) { query['drafts'] = drafts; }

        return this.request<JsonSuccess & object>({
            url: '/drafts',
            method: 'POST',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a `drafts` event.  `DELETE {{ api_url }}/v1/drafts/{draft_id}` 
     * Delete a draft
     */
    deleteDraft({ draftId }: DeleteDraftRequest): Observable<JsonSuccess>
    deleteDraft({ draftId }: DeleteDraftRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    deleteDraft({ draftId }: DeleteDraftRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(draftId, 'draftId', 'deleteDraft');

        return this.request<JsonSuccess>({
            url: '/drafts/{draft_id}'.replace('{draft_id}', encodeURI(draftId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * Edit a draft on the server. The edit will be automatically synchronized to other clients via `drafts` events.  `PATCH {{ api_url }}/v1/drafts/{draft_id}` 
     * Edit a draft
     */
    editDraft({ draftId, draft }: EditDraftRequest): Observable<JsonSuccess>
    editDraft({ draftId, draft }: EditDraftRequest, opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess>>
    editDraft({ draftId, draft }: EditDraftRequest, opts?: OperationOpts): Observable<JsonSuccess | RawAjaxResponse<JsonSuccess>> {
        throwIfNullOrUndefined(draftId, 'draftId', 'editDraft');
        throwIfNullOrUndefined(draft, 'draft', 'editDraft');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'draft': draft,
        };

        return this.request<JsonSuccess>({
            url: '/drafts/{draft_id}'.replace('{draft_id}', encodeURI(draftId)),
            method: 'PATCH',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Fetch all drafts for the current user.  `GET {{ api_url }}/v1/drafts` 
     * Get drafts
     */
    getDrafts(): Observable<JsonSuccess & object>
    getDrafts(opts?: OperationOpts): Observable<RawAjaxResponse<JsonSuccess & object>>
    getDrafts(opts?: OperationOpts): Observable<JsonSuccess & object | RawAjaxResponse<JsonSuccess & object>> {
        return this.request<JsonSuccess & object>({
            url: '/drafts',
            method: 'GET',
        }, opts?.responseOpts);
    };

}
