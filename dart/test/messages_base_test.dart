//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.0

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for MessagesBase
void main() {
  final instance = MessagesBase();

  group('test MessagesBase', () {
    // The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
    // String avatarUrl
    test('to test the property `avatarUrl`', () async {
      // TODO
    });

    // A Zulip \"client\" string, describing what Zulip client sent the message. 
    // String client
    test('to test the property `client`', () async {
      // TODO
    });

    // The content/body of the message. 
    // String content
    test('to test the property `content`', () async {
      // TODO
    });

    // The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
    // String contentType
    test('to test the property `contentType`', () async {
      // TODO
    });

    // Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
    // OneOfstringarray displayRecipient
    test('to test the property `displayRecipient`', () async {
      // TODO
    });

    // The unique message ID.  Messages should always be displayed sorted by ID. 
    // int id
    test('to test the property `id`', () async {
      // TODO
    });

    // Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
    // bool isMeMessage
    test('to test the property `isMeMessage`', () async {
      // TODO
    });

    // Data on any reactions to the message. 
    // List<EmojiReaction> reactions (default value: const [])
    test('to test the property `reactions`', () async {
      // TODO
    });

    // A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
    // int recipientId
    test('to test the property `recipientId`', () async {
      // TODO
    });

    // The Zulip display email address of the message's sender. 
    // String senderEmail
    test('to test the property `senderEmail`', () async {
      // TODO
    });

    // The full name of the message's sender. 
    // String senderFullName
    test('to test the property `senderFullName`', () async {
      // TODO
    });

    // The user ID of the message's sender. 
    // int senderId
    test('to test the property `senderId`', () async {
      // TODO
    });

    // A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
    // String senderRealmStr
    test('to test the property `senderRealmStr`', () async {
      // TODO
    });

    // Only present for stream messages; the ID of the stream. 
    // int streamId
    test('to test the property `streamId`', () async {
      // TODO
    });

    // The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
    // String subject
    test('to test the property `subject`', () async {
      // TODO
    });

    // Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
    // List<MessagesBaseTopicLinks> topicLinks (default value: const [])
    test('to test the property `topicLinks`', () async {
      // TODO
    });

    // Data used for certain experimental Zulip integrations. 
    // List<String> submessages (default value: const [])
    test('to test the property `submessages`', () async {
      // TODO
    });

    // The UNIX timestamp for when the message was sent, in UTC seconds. 
    // int timestamp
    test('to test the property `timestamp`', () async {
      // TODO
    });

    // The type of the message: `stream` or `private`. 
    // String type
    test('to test the property `type`', () async {
      // TODO
    });


  });

}
