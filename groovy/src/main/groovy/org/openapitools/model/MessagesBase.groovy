package org.openapitools.model;

import groovy.transform.Canonical
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.model.EmojiReaction;
import org.openapitools.model.MessagesBaseTopicLinks;
import org.openapitools.model.OneOfstringarray;

@Canonical
class MessagesBase {
    /* The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user.  */
    String avatarUrl
    /* A Zulip \"client\" string, describing what Zulip client sent the message.  */
    String client
    /* The content/body of the message.  */
    String content
    /* The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  */
    String contentType
    /* Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */
    OneOfstringarray displayRecipient
    /* The unique message ID.  Messages should always be displayed sorted by ID.  */
    Integer id
    /* Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */
    Boolean isMeMessage
    /* Data on any reactions to the message.  */
    List<EmojiReaction> reactions = new ArrayList<EmojiReaction>()
    /* A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */
    Integer recipientId
    /* The Zulip display email address of the message's sender.  */
    String senderEmail
    /* The full name of the message's sender.  */
    String senderFullName
    /* The user ID of the message's sender.  */
    Integer senderId
    /* A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.  */
    String senderRealmStr
    /* Only present for stream messages; the ID of the stream.  */
    Integer streamId
    /* The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  */
    String subject
    /* Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.  */
    List<MessagesBaseTopicLinks> topicLinks = new ArrayList<MessagesBaseTopicLinks>()
    /* Data used for certain experimental Zulip integrations.  */
    List<String> submessages = new ArrayList<String>()
    /* The UNIX timestamp for when the message was sent, in UTC seconds.  */
    Integer timestamp
    /* The type of the message: `stream` or `private`.  */
    String type
}
