/* tslint:disable */
/* eslint-disable */
/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CodedError,
    CodedErrorFromJSON,
    CodedErrorToJSON,
    InvalidMessageError,
    InvalidMessageErrorFromJSON,
    InvalidMessageErrorToJSON,
    JsonSuccess,
    JsonSuccessFromJSON,
    JsonSuccessToJSON,
    JsonSuccessBase,
    JsonSuccessBaseFromJSON,
    JsonSuccessBaseToJSON,
    NonExistingStreamError,
    NonExistingStreamErrorFromJSON,
    NonExistingStreamErrorToJSON,
} from '../models';

export interface AddReactionRequest {
    messageId: number;
    emojiName: string;
    emojiCode?: string;
    reactionType?: string;
}

export interface CheckMessagesMatchNarrowRequest {
    msgIds: Array<number>;
    narrow: Array<object>;
}

export interface DeleteMessageRequest {
    messageId: number;
}

export interface GetFileTemporaryUrlRequest {
    realmIdStr: number;
    filename: string;
}

export interface GetMessageHistoryRequest {
    messageId: number;
}

export interface GetMessagesRequest {
    numBefore: number;
    numAfter: number;
    anchor?: string | number;
    narrow?: Array<object>;
    clientGravatar?: boolean;
    applyMarkdown?: boolean;
    useFirstUnreadAnchor?: boolean;
}

export interface GetRawMessageRequest {
    messageId: number;
}

export interface MarkStreamAsReadRequest {
    streamId: number;
}

export interface MarkTopicAsReadRequest {
    streamId: number;
    topicName: string;
}

export interface RemoveReactionRequest {
    messageId: number;
    emojiName?: string;
    emojiCode?: string;
    reactionType?: string;
}

export interface RenderMessageRequest {
    content: string;
}

export interface SendMessageRequest {
    type: SendMessageTypeEnum;
    to: Array<number>;
    content: string;
    topic?: string;
    queueId?: string;
    localId?: string;
}

export interface UpdateMessageRequest {
    messageId: number;
    topic?: string;
    propagateMode?: UpdateMessagePropagateModeEnum;
    sendNotificationToOldThread?: boolean;
    sendNotificationToNewThread?: boolean;
    content?: string;
    streamId?: number;
}

export interface UpdateMessageFlagsRequest {
    messages: Array<number>;
    op: UpdateMessageFlagsOpEnum;
    flag: string;
}

export interface UploadFileRequest {
    filename?: Blob;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Add an [emoji reaction](/help/emoji-reactions) to a message.  `POST {{ api_url }}/v1/messages/{message_id}/reactions` 
     * Add an emoji reaction
     */
    async addReactionRaw(requestParameters: AddReactionRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling addReaction.');
        }

        if (requestParameters.emojiName === null || requestParameters.emojiName === undefined) {
            throw new runtime.RequiredError('emojiName','Required parameter requestParameters.emojiName was null or undefined when calling addReaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.emojiName !== undefined) {
            queryParameters['emoji_name'] = requestParameters.emojiName;
        }

        if (requestParameters.emojiCode !== undefined) {
            queryParameters['emoji_code'] = requestParameters.emojiCode;
        }

        if (requestParameters.reactionType !== undefined) {
            queryParameters['reaction_type'] = requestParameters.reactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}/reactions`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Add an [emoji reaction](/help/emoji-reactions) to a message.  `POST {{ api_url }}/v1/messages/{message_id}/reactions` 
     * Add an emoji reaction
     */
    async addReaction(requestParameters: AddReactionRequest): Promise<JsonSuccess> {
        const response = await this.addReactionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check whether a set of messages match a [narrow](/api/construct-narrow).  `GET {{ api_url }}/v1/messages/matches_narrow`  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the `match_subject` and `match_content` objects is designed to match those of `GET /messages`, so that a client can splice these fields into a `message` object received from `GET /events` and end up with an extended message object identical to how a `GET /messages` for the current narrow would have returned the message. 
     * Check if messages match a narrow
     */
    async checkMessagesMatchNarrowRaw(requestParameters: CheckMessagesMatchNarrowRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.msgIds === null || requestParameters.msgIds === undefined) {
            throw new runtime.RequiredError('msgIds','Required parameter requestParameters.msgIds was null or undefined when calling checkMessagesMatchNarrow.');
        }

        if (requestParameters.narrow === null || requestParameters.narrow === undefined) {
            throw new runtime.RequiredError('narrow','Required parameter requestParameters.narrow was null or undefined when calling checkMessagesMatchNarrow.');
        }

        const queryParameters: any = {};

        if (requestParameters.msgIds) {
            queryParameters['msg_ids'] = requestParameters.msgIds;
        }

        if (requestParameters.narrow) {
            queryParameters['narrow'] = requestParameters.narrow;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/matches_narrow`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Check whether a set of messages match a [narrow](/api/construct-narrow).  `GET {{ api_url }}/v1/messages/matches_narrow`  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the `match_subject` and `match_content` objects is designed to match those of `GET /messages`, so that a client can splice these fields into a `message` object received from `GET /events` and end up with an extended message object identical to how a `GET /messages` for the current narrow would have returned the message. 
     * Check if messages match a narrow
     */
    async checkMessagesMatchNarrow(requestParameters: CheckMessagesMatchNarrowRequest): Promise<JsonSuccessBase & object> {
        const response = await this.checkMessagesMatchNarrowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Permanently delete a message.  `DELETE {{ api_url }}/v1/messages/{msg_id}`  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
     * Delete a message
     */
    async deleteMessageRaw(requestParameters: DeleteMessageRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling deleteMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Permanently delete a message.  `DELETE {{ api_url }}/v1/messages/{msg_id}`  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
     * Delete a message
     */
    async deleteMessage(requestParameters: DeleteMessageRequest): Promise<JsonSuccess> {
        const response = await this.deleteMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a temporary URL for access to the file that doesn\'t require authentication. 
     * Get public temporary URL
     */
    async getFileTemporaryUrlRaw(requestParameters: GetFileTemporaryUrlRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.realmIdStr === null || requestParameters.realmIdStr === undefined) {
            throw new runtime.RequiredError('realmIdStr','Required parameter requestParameters.realmIdStr was null or undefined when calling getFileTemporaryUrl.');
        }

        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling getFileTemporaryUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_uploads/{realm_id_str}/{filename}`.replace(`{${"realm_id_str"}}`, encodeURIComponent(String(requestParameters.realmIdStr))).replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get a temporary URL for access to the file that doesn\'t require authentication. 
     * Get public temporary URL
     */
    async getFileTemporaryUrl(requestParameters: GetFileTemporaryUrlRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getFileTemporaryUrlRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch the message edit history of a previously edited message.  `GET {{ api_url }}/v1/messages/{message_id}/history`  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
     * Get a message\'s edit history
     */
    async getMessageHistoryRaw(requestParameters: GetMessageHistoryRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getMessageHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}/history`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Fetch the message edit history of a previously edited message.  `GET {{ api_url }}/v1/messages/{message_id}/history`  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
     * Get a message\'s edit history
     */
    async getMessageHistory(requestParameters: GetMessageHistoryRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getMessageHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch message history from a Zulip server.  `GET {{ api_url }}/v1/messages`  This `GET /api/v1/messages` endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip\'s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user\'s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an `anchor` message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the `num_before` and `num_after` limits.  We recommend using `num_before <= 1000` and `num_after <= 1000` to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
     * Get messages
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.numBefore === null || requestParameters.numBefore === undefined) {
            throw new runtime.RequiredError('numBefore','Required parameter requestParameters.numBefore was null or undefined when calling getMessages.');
        }

        if (requestParameters.numAfter === null || requestParameters.numAfter === undefined) {
            throw new runtime.RequiredError('numAfter','Required parameter requestParameters.numAfter was null or undefined when calling getMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.anchor !== undefined) {
            queryParameters['anchor'] = requestParameters.anchor;
        }

        if (requestParameters.numBefore !== undefined) {
            queryParameters['num_before'] = requestParameters.numBefore;
        }

        if (requestParameters.numAfter !== undefined) {
            queryParameters['num_after'] = requestParameters.numAfter;
        }

        if (requestParameters.narrow) {
            queryParameters['narrow'] = requestParameters.narrow;
        }

        if (requestParameters.clientGravatar !== undefined) {
            queryParameters['client_gravatar'] = requestParameters.clientGravatar;
        }

        if (requestParameters.applyMarkdown !== undefined) {
            queryParameters['apply_markdown'] = requestParameters.applyMarkdown;
        }

        if (requestParameters.useFirstUnreadAnchor !== undefined) {
            queryParameters['use_first_unread_anchor'] = requestParameters.useFirstUnreadAnchor;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Fetch message history from a Zulip server.  `GET {{ api_url }}/v1/messages`  This `GET /api/v1/messages` endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip\'s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user\'s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an `anchor` message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the `num_before` and `num_after` limits.  We recommend using `num_before <= 1000` and `num_after <= 1000` to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
     * Get messages
     */
    async getMessages(requestParameters: GetMessagesRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getMessagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the raw content of a message.  `GET {{ api_url }}/v1/messages/{msg_id}`  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message\'s raw Markdown (e.g. for pre-filling a message-editing UI). 
     * Get a message\'s raw Markdown
     */
    async getRawMessageRaw(requestParameters: GetRawMessageRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling getRawMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get the raw content of a message.  `GET {{ api_url }}/v1/messages/{msg_id}`  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message\'s raw Markdown (e.g. for pre-filling a message-editing UI). 
     * Get a message\'s raw Markdown
     */
    async getRawMessage(requestParameters: GetRawMessageRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getRawMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Marks all of the current user\'s unread messages as read.  `POST {{ api_url }}/v1/mark_all_as_read` 
     * Mark all messages as read
     */
    async markAllAsReadRaw(): Promise<runtime.ApiResponse<JsonSuccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mark_all_as_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Marks all of the current user\'s unread messages as read.  `POST {{ api_url }}/v1/mark_all_as_read` 
     * Mark all messages as read
     */
    async markAllAsRead(): Promise<JsonSuccess> {
        const response = await this.markAllAsReadRaw();
        return await response.value();
    }

    /**
     * Mark all the unread messages in a stream as read. 
     * Mark messages in a stream as read
     */
    async markStreamAsReadRaw(requestParameters: MarkStreamAsReadRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.streamId === null || requestParameters.streamId === undefined) {
            throw new runtime.RequiredError('streamId','Required parameter requestParameters.streamId was null or undefined when calling markStreamAsRead.');
        }

        const queryParameters: any = {};

        if (requestParameters.streamId !== undefined) {
            queryParameters['stream_id'] = requestParameters.streamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mark_stream_as_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Mark all the unread messages in a stream as read. 
     * Mark messages in a stream as read
     */
    async markStreamAsRead(requestParameters: MarkStreamAsReadRequest): Promise<JsonSuccess> {
        const response = await this.markStreamAsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark all the unread messages in a topic as read. 
     * Mark messages in a topic as read
     */
    async markTopicAsReadRaw(requestParameters: MarkTopicAsReadRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.streamId === null || requestParameters.streamId === undefined) {
            throw new runtime.RequiredError('streamId','Required parameter requestParameters.streamId was null or undefined when calling markTopicAsRead.');
        }

        if (requestParameters.topicName === null || requestParameters.topicName === undefined) {
            throw new runtime.RequiredError('topicName','Required parameter requestParameters.topicName was null or undefined when calling markTopicAsRead.');
        }

        const queryParameters: any = {};

        if (requestParameters.streamId !== undefined) {
            queryParameters['stream_id'] = requestParameters.streamId;
        }

        if (requestParameters.topicName !== undefined) {
            queryParameters['topic_name'] = requestParameters.topicName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mark_topic_as_read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Mark all the unread messages in a topic as read. 
     * Mark messages in a topic as read
     */
    async markTopicAsRead(requestParameters: MarkTopicAsReadRequest): Promise<JsonSuccess> {
        const response = await this.markTopicAsReadRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.  `DELETE {{ api_url }}/v1/messages/{message_id}/reactions` 
     * Remove an emoji reaction
     */
    async removeReactionRaw(requestParameters: RemoveReactionRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling removeReaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.emojiName !== undefined) {
            queryParameters['emoji_name'] = requestParameters.emojiName;
        }

        if (requestParameters.emojiCode !== undefined) {
            queryParameters['emoji_code'] = requestParameters.emojiCode;
        }

        if (requestParameters.reactionType !== undefined) {
            queryParameters['reaction_type'] = requestParameters.reactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}/reactions`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.  `DELETE {{ api_url }}/v1/messages/{message_id}/reactions` 
     * Remove an emoji reaction
     */
    async removeReaction(requestParameters: RemoveReactionRequest): Promise<JsonSuccess> {
        const response = await this.removeReactionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Render a message to HTML.  `POST {{ api_url }}/v1/messages/render` 
     * Render message
     */
    async renderMessageRaw(requestParameters: RenderMessageRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling renderMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/render`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Render a message to HTML.  `POST {{ api_url }}/v1/messages/render` 
     * Render message
     */
    async renderMessage(requestParameters: RenderMessageRequest): Promise<JsonSuccessBase & object> {
        const response = await this.renderMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send a stream or a private message.  `POST {{ api_url }}/v1/messages` 
     * Send a message
     */
    async sendMessageRaw(requestParameters: SendMessageRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling sendMessage.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling sendMessage.');
        }

        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling sendMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.to) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.topic !== undefined) {
            queryParameters['topic'] = requestParameters.topic;
        }

        if (requestParameters.queueId !== undefined) {
            queryParameters['queue_id'] = requestParameters.queueId;
        }

        if (requestParameters.localId !== undefined) {
            queryParameters['local_id'] = requestParameters.localId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Send a stream or a private message.  `POST {{ api_url }}/v1/messages` 
     * Send a message
     */
    async sendMessage(requestParameters: SendMessageRequest): Promise<JsonSuccessBase & object> {
        const response = await this.sendMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Edit/update the content or topic of a message.  `PATCH {{ api_url }}/v1/messages/{msg_id}`  `{msg_id}` in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to `✔ {original_topic}`.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
     * Edit a message
     */
    async updateMessageRaw(requestParameters: UpdateMessageRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling updateMessage.');
        }

        const queryParameters: any = {};

        if (requestParameters.topic !== undefined) {
            queryParameters['topic'] = requestParameters.topic;
        }

        if (requestParameters.propagateMode !== undefined) {
            queryParameters['propagate_mode'] = requestParameters.propagateMode;
        }

        if (requestParameters.sendNotificationToOldThread !== undefined) {
            queryParameters['send_notification_to_old_thread'] = requestParameters.sendNotificationToOldThread;
        }

        if (requestParameters.sendNotificationToNewThread !== undefined) {
            queryParameters['send_notification_to_new_thread'] = requestParameters.sendNotificationToNewThread;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.streamId !== undefined) {
            queryParameters['stream_id'] = requestParameters.streamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/{message_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Edit/update the content or topic of a message.  `PATCH {{ api_url }}/v1/messages/{msg_id}`  `{msg_id}` in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to `✔ {original_topic}`.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
     * Edit a message
     */
    async updateMessage(requestParameters: UpdateMessageRequest): Promise<JsonSuccess> {
        const response = await this.updateMessageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Add or remove personal message flags like `read` and `starred` on a collection of message IDs.  `POST {{ api_url }}/v1/messages/flags`  For updating the `read` flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
     * Update personal message flags
     */
    async updateMessageFlagsRaw(requestParameters: UpdateMessageFlagsRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.messages === null || requestParameters.messages === undefined) {
            throw new runtime.RequiredError('messages','Required parameter requestParameters.messages was null or undefined when calling updateMessageFlags.');
        }

        if (requestParameters.op === null || requestParameters.op === undefined) {
            throw new runtime.RequiredError('op','Required parameter requestParameters.op was null or undefined when calling updateMessageFlags.');
        }

        if (requestParameters.flag === null || requestParameters.flag === undefined) {
            throw new runtime.RequiredError('flag','Required parameter requestParameters.flag was null or undefined when calling updateMessageFlags.');
        }

        const queryParameters: any = {};

        if (requestParameters.messages) {
            queryParameters['messages'] = requestParameters.messages;
        }

        if (requestParameters.op !== undefined) {
            queryParameters['op'] = requestParameters.op;
        }

        if (requestParameters.flag !== undefined) {
            queryParameters['flag'] = requestParameters.flag;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/messages/flags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Add or remove personal message flags like `read` and `starred` on a collection of message IDs.  `POST {{ api_url }}/v1/messages/flags`  For updating the `read` flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
     * Update personal message flags
     */
    async updateMessageFlags(requestParameters: UpdateMessageFlagsRequest): Promise<JsonSuccessBase & object> {
        const response = await this.updateMessageFlagsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Upload a single file and get the corresponding URI.  `POST {{ api_url }}/v1/user_uploads`  Initially, only you will be able to access the link.  To share the uploaded file, you\'ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
     * Upload a file
     */
    async uploadFileRaw(requestParameters: UploadFileRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.filename !== undefined) {
            formParams.append('filename', requestParameters.filename as any);
        }

        const response = await this.request({
            path: `/user_uploads`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Upload a single file and get the corresponding URI.  `POST {{ api_url }}/v1/user_uploads`  Initially, only you will be able to access the link.  To share the uploaded file, you\'ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
     * Upload a file
     */
    async uploadFile(requestParameters: UploadFileRequest): Promise<JsonSuccessBase & object> {
        const response = await this.uploadFileRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SendMessageTypeEnum {
    Private = 'private',
    Stream = 'stream'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateMessagePropagateModeEnum {
    One = 'change_one',
    Later = 'change_later',
    All = 'change_all'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateMessageFlagsOpEnum {
    Add = 'add',
    Remove = 'remove'
}
