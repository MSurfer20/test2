/* tslint:disable */
/* eslint-disable */
/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CodedError,
    CodedErrorFromJSON,
    CodedErrorToJSON,
    JsonError,
    JsonErrorFromJSON,
    JsonErrorToJSON,
    JsonSuccess,
    JsonSuccessFromJSON,
    JsonSuccessToJSON,
    JsonSuccessBase,
    JsonSuccessBaseFromJSON,
    JsonSuccessBaseToJSON,
} from '../models';

export interface CreateUserRequest {
    email: string;
    password: string;
    fullName: string;
}

export interface CreateUserGroupRequest {
    name: string;
    description: string;
    members: Array<number>;
}

export interface DeactivateUserRequest {
    userId: number;
}

export interface GetUserRequest {
    userId: number;
    clientGravatar?: boolean;
    includeCustomProfileFields?: boolean;
}

export interface GetUserByEmailRequest {
    email: string;
    clientGravatar?: boolean;
    includeCustomProfileFields?: boolean;
}

export interface GetUserPresenceRequest {
    userIdOrEmail: string;
}

export interface GetUsersRequest {
    clientGravatar?: boolean;
    includeCustomProfileFields?: boolean;
}

export interface MuteUserRequest {
    mutedUserId: number;
}

export interface ReactivateUserRequest {
    userId: number;
}

export interface RemoveUserGroupRequest {
    userGroupId: number;
}

export interface SetTypingStatusRequest {
    op: SetTypingStatusOpEnum;
    to: Array<number>;
    type?: SetTypingStatusTypeEnum;
    topic?: string;
}

export interface UnmuteUserRequest {
    mutedUserId: number;
}

export interface UpdateSettingsRequest {
    fullName?: string;
    email?: string;
    oldPassword?: string;
    newPassword?: string;
    twentyFourHourTime?: boolean;
    denseMode?: boolean;
    starredMessageCounts?: boolean;
    fluidLayoutWidth?: boolean;
    highContrastMode?: boolean;
    colorScheme?: UpdateSettingsColorSchemeEnum;
    enableDraftsSynchronization?: boolean;
    translateEmoticons?: boolean;
    defaultLanguage?: string;
    defaultView?: string;
    leftSideUserlist?: boolean;
    emojiset?: string;
    demoteInactiveStreams?: UpdateSettingsDemoteInactiveStreamsEnum;
    timezone?: string;
    enableStreamDesktopNotifications?: boolean;
    enableStreamEmailNotifications?: boolean;
    enableStreamPushNotifications?: boolean;
    enableStreamAudibleNotifications?: boolean;
    notificationSound?: string;
    enableDesktopNotifications?: boolean;
    enableSounds?: boolean;
    emailNotificationsBatchingPeriodSeconds?: number;
    enableOfflineEmailNotifications?: boolean;
    enableOfflinePushNotifications?: boolean;
    enableOnlinePushNotifications?: boolean;
    enableDigestEmails?: boolean;
    enableMarketingEmails?: boolean;
    enableLoginEmails?: boolean;
    messageContentInEmailNotifications?: boolean;
    pmContentInDesktopNotifications?: boolean;
    wildcardMentionsNotify?: boolean;
    desktopIconCountDisplay?: UpdateSettingsDesktopIconCountDisplayEnum;
    realmNameInNotifications?: boolean;
    presenceEnabled?: boolean;
    enterSends?: boolean;
}

export interface UpdateStatusRequest {
    statusText?: string;
    away?: boolean;
    emojiName?: string;
    emojiCode?: string;
    reactionType?: string;
}

export interface UpdateUserRequest {
    userId: number;
    fullName?: string;
    role?: number;
    profileData?: Array<object>;
}

export interface UpdateUserGroupRequest {
    userGroupId: number;
    name: string;
    description: string;
}

export interface UpdateUserGroupMembersRequest {
    userGroupId: number;
    _delete?: Array<number>;
    add?: Array<number>;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * {!can-create-users-only.md!}  Create a new user account via the API.  `POST {{ api_url }}/v1/users` 
     * Create a user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling createUser.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling createUser.');
        }

        if (requestParameters.fullName === null || requestParameters.fullName === undefined) {
            throw new runtime.RequiredError('fullName','Required parameter requestParameters.fullName was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        if (requestParameters.fullName !== undefined) {
            queryParameters['full_name'] = requestParameters.fullName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * {!can-create-users-only.md!}  Create a new user account via the API.  `POST {{ api_url }}/v1/users` 
     * Create a user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<JsonSuccessBase & object> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/create` 
     * Create a user group
     */
    async createUserGroupRaw(requestParameters: CreateUserGroupRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createUserGroup.');
        }

        if (requestParameters.description === null || requestParameters.description === undefined) {
            throw new runtime.RequiredError('description','Required parameter requestParameters.description was null or undefined when calling createUserGroup.');
        }

        if (requestParameters.members === null || requestParameters.members === undefined) {
            throw new runtime.RequiredError('members','Required parameter requestParameters.members was null or undefined when calling createUserGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.members) {
            queryParameters['members'] = requestParameters.members;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_groups/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Create a new [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/create` 
     * Create a user group
     */
    async createUserGroup(requestParameters: CreateUserGroupRequest): Promise<JsonSuccess> {
        const response = await this.createUserGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deactivates the user\'s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  `DELETE {{ api_url }}/v1/users/me`  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
     * Deactivate own user
     */
    async deactivateOwnUserRaw(): Promise<runtime.ApiResponse<JsonSuccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Deactivates the user\'s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  `DELETE {{ api_url }}/v1/users/me`  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
     * Deactivate own user
     */
    async deactivateOwnUser(): Promise<JsonSuccess> {
        const response = await this.deactivateOwnUserRaw();
        return await response.value();
    }

    /**
     * [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `DELETE {{ api_url }}/v1/users/{user_id}` 
     * Deactivate a user
     */
    async deactivateUserRaw(requestParameters: DeactivateUserRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deactivateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `DELETE {{ api_url }}/v1/users/{user_id}` 
     * Deactivate a user
     */
    async deactivateUser(requestParameters: DeactivateUserRequest): Promise<JsonSuccess> {
        const response = await this.deactivateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch metadata on files uploaded by the requesting user.  `GET {{ api_url }}/v1/attachments` 
     * Get attachments
     */
    async getAttachmentsRaw(): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/attachments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Fetch metadata on files uploaded by the requesting user.  `GET {{ api_url }}/v1/attachments` 
     * Get attachments
     */
    async getAttachments(): Promise<JsonSuccessBase & object> {
        const response = await this.getAttachmentsRaw();
        return await response.value();
    }

    /**
     * Get basic data about the user/bot that requests this endpoint.  `GET {{ api_url }}/v1/users/me` 
     * Get own user
     */
    async getOwnUserRaw(): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get basic data about the user/bot that requests this endpoint.  `GET {{ api_url }}/v1/users/me` 
     * Get own user
     */
    async getOwnUser(): Promise<JsonSuccessBase & object> {
        const response = await this.getOwnUserRaw();
        return await response.value();
    }

    /**
     * Fetch details for a single user in the organization.  `GET {{ api_url }}/v1/users/{user_id}`  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
     * Get a user
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientGravatar !== undefined) {
            queryParameters['client_gravatar'] = requestParameters.clientGravatar;
        }

        if (requestParameters.includeCustomProfileFields !== undefined) {
            queryParameters['include_custom_profile_fields'] = requestParameters.includeCustomProfileFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Fetch details for a single user in the organization.  `GET {{ api_url }}/v1/users/{user_id}`  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
     * Get a user
     */
    async getUser(requestParameters: GetUserRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch details for a single user in the organization given a Zulip display email address.  `GET {{ api_url }}/v1/users/{email}`  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
     * Get a user by email
     */
    async getUserByEmailRaw(requestParameters: GetUserByEmailRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getUserByEmail.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientGravatar !== undefined) {
            queryParameters['client_gravatar'] = requestParameters.clientGravatar;
        }

        if (requestParameters.includeCustomProfileFields !== undefined) {
            queryParameters['include_custom_profile_fields'] = requestParameters.includeCustomProfileFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Fetch details for a single user in the organization given a Zulip display email address.  `GET {{ api_url }}/v1/users/{email}`  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
     * Get a user by email
     */
    async getUserByEmail(requestParameters: GetUserByEmailRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getUserByEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * {!api-members-only.md!}  Fetches all of the user groups in the organization.  `GET {{ api_url }}/v1/user_groups` 
     * Get user groups
     */
    async getUserGroupsRaw(): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * {!api-members-only.md!}  Fetches all of the user groups in the organization.  `GET {{ api_url }}/v1/user_groups` 
     * Get user groups
     */
    async getUserGroups(): Promise<JsonSuccessBase & object> {
        const response = await this.getUserGroupsRaw();
        return await response.value();
    }

    /**
     * Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user\'s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`  See [Zulip\'s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
     * Get user presence
     */
    async getUserPresenceRaw(requestParameters: GetUserPresenceRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        if (requestParameters.userIdOrEmail === null || requestParameters.userIdOrEmail === undefined) {
            throw new runtime.RequiredError('userIdOrEmail','Required parameter requestParameters.userIdOrEmail was null or undefined when calling getUserPresence.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id_or_email}/presence`.replace(`{${"user_id_or_email"}}`, encodeURIComponent(String(requestParameters.userIdOrEmail))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user\'s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`  See [Zulip\'s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
     * Get user presence
     */
    async getUserPresence(requestParameters: GetUserPresenceRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getUserPresenceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  `GET {{ api_url }}/v1/users`  You can also [fetch details on a single user](/api/get-user). 
     * Get all users
     */
    async getUsersRaw(requestParameters: GetUsersRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        if (requestParameters.clientGravatar !== undefined) {
            queryParameters['client_gravatar'] = requestParameters.clientGravatar;
        }

        if (requestParameters.includeCustomProfileFields !== undefined) {
            queryParameters['include_custom_profile_fields'] = requestParameters.includeCustomProfileFields;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  `GET {{ api_url }}/v1/users`  You can also [fetch details on a single user](/api/get-user). 
     * Get all users
     */
    async getUsers(requestParameters: GetUsersRequest): Promise<JsonSuccessBase & object> {
        const response = await this.getUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you\'ve muted will be automatically marked as read and hidden.  `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \"Muted user\", rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \"All users that exist   on this stream or realm\", e.g. for organization   administration or showing stream subscribers, should display   the user\'s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
     * Mute a user
     */
    async muteUserRaw(requestParameters: MuteUserRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.mutedUserId === null || requestParameters.mutedUserId === undefined) {
            throw new runtime.RequiredError('mutedUserId','Required parameter requestParameters.mutedUserId was null or undefined when calling muteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/muted_users/{muted_user_id}`.replace(`{${"muted_user_id"}}`, encodeURIComponent(String(requestParameters.mutedUserId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you\'ve muted will be automatically marked as read and hidden.  `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \"Muted user\", rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \"All users that exist   on this stream or realm\", e.g. for organization   administration or showing stream subscribers, should display   the user\'s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
     * Mute a user
     */
    async muteUser(requestParameters: MuteUserRequest): Promise<JsonSuccess> {
        const response = await this.muteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `POST {{ api_url }}/v1/users/{user_id}/reactivate` 
     * Reactivate a user
     */
    async reactivateUserRaw(requestParameters: ReactivateUserRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reactivateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}/reactivate`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `POST {{ api_url }}/v1/users/{user_id}/reactivate` 
     * Reactivate a user
     */
    async reactivateUser(requestParameters: ReactivateUserRequest): Promise<JsonSuccess> {
        const response = await this.reactivateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a [user group](/help/user-groups).  `DELETE {{ api_url }}/v1/user_groups/{user_group_id}` 
     * Delete a user group
     */
    async removeUserGroupRaw(requestParameters: RemoveUserGroupRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userGroupId === null || requestParameters.userGroupId === undefined) {
            throw new runtime.RequiredError('userGroupId','Required parameter requestParameters.userGroupId was null or undefined when calling removeUserGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_groups/{user_group_id}`.replace(`{${"user_group_id"}}`, encodeURIComponent(String(requestParameters.userGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Delete a [user group](/help/user-groups).  `DELETE {{ api_url }}/v1/user_groups/{user_group_id}` 
     * Delete a user group
     */
    async removeUserGroup(requestParameters: RemoveUserGroupRequest): Promise<JsonSuccess> {
        const response = await this.removeUserGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Notify other users whether the current user is typing a message.  `POST {{ api_url }}/v1/typing`  Clients implementing Zulip\'s typing notifications protocol should work as follows:  * Send a request to this endpoint with `op=\"start\"` when a user starts typing a message,   and also every `TYPING_STARTED_WAIT_PERIOD=10` seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with `op=\"stop\"` when a user pauses using the   compose UI for at least `TYPING_STOPPED_WAIT_PERIOD=5` seconds or cancels   the compose action (if it had previously sent a \"start\" operation for that   compose action). * Start displaying \"Sender is typing\" for a given conversation when the client   receives an `op=\"start\"` event from the [events API](/api/get-events). * Continue displaying \"Sender is typing\" until they receive an `op=\"stop\"` event   from the [events API](/api/get-events) or `TYPING_STARTED_EXPIRY_PERIOD=15`   seconds have passed without a new `op=\"start\"` event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   `stream_typing_notifications` in the `client_capabilities` parameter to `/register`.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip\'s typing notifications protocol. 
     * Set \"typing\" status
     */
    async setTypingStatusRaw(requestParameters: SetTypingStatusRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.op === null || requestParameters.op === undefined) {
            throw new runtime.RequiredError('op','Required parameter requestParameters.op was null or undefined when calling setTypingStatus.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling setTypingStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.op !== undefined) {
            queryParameters['op'] = requestParameters.op;
        }

        if (requestParameters.to) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.topic !== undefined) {
            queryParameters['topic'] = requestParameters.topic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/typing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Notify other users whether the current user is typing a message.  `POST {{ api_url }}/v1/typing`  Clients implementing Zulip\'s typing notifications protocol should work as follows:  * Send a request to this endpoint with `op=\"start\"` when a user starts typing a message,   and also every `TYPING_STARTED_WAIT_PERIOD=10` seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with `op=\"stop\"` when a user pauses using the   compose UI for at least `TYPING_STOPPED_WAIT_PERIOD=5` seconds or cancels   the compose action (if it had previously sent a \"start\" operation for that   compose action). * Start displaying \"Sender is typing\" for a given conversation when the client   receives an `op=\"start\"` event from the [events API](/api/get-events). * Continue displaying \"Sender is typing\" until they receive an `op=\"stop\"` event   from the [events API](/api/get-events) or `TYPING_STARTED_EXPIRY_PERIOD=15`   seconds have passed without a new `op=\"start\"` event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   `stream_typing_notifications` in the `client_capabilities` parameter to `/register`.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip\'s typing notifications protocol. 
     * Set \"typing\" status
     */
    async setTypingStatus(requestParameters: SetTypingStatusRequest): Promise<JsonSuccess> {
        const response = await this.setTypingStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint unmutes a user.  `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  **Changes**: New in Zulip 4.0 (feature level 48). 
     * Unmute a user
     */
    async unmuteUserRaw(requestParameters: UnmuteUserRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.mutedUserId === null || requestParameters.mutedUserId === undefined) {
            throw new runtime.RequiredError('mutedUserId','Required parameter requestParameters.mutedUserId was null or undefined when calling unmuteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/muted_users/{muted_user_id}`.replace(`{${"muted_user_id"}}`, encodeURIComponent(String(requestParameters.mutedUserId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * This endpoint unmutes a user.  `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  **Changes**: New in Zulip 4.0 (feature level 48). 
     * Unmute a user
     */
    async unmuteUser(requestParameters: UnmuteUserRequest): Promise<JsonSuccess> {
        const response = await this.unmuteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint is used to edit the current user\'s settings.  `PATCH {{ api_url }}/v1/settings`  **Changes**: Prior to Zulip 5.0 (feature level 80), this endpoint only supported the `full_name`, `email`, `old_password`, and `new_password` parameters. Notification settings were managed by `PATCH /settings/notifications`, and all other settings by `PATCH /settings/display`. The feature level 80 migration to merge these endpoints did not change how request parameters are encoded. Note, however, that it did change the handling of any invalid parameters present in a request to change notification or display settings, since the merged endpoint uses the new response format that was introduced for `/settings` in Zulip 5.0 (feature level 78).  The `/settings/display` and `/settings/notifications` endpoints are now deprecated aliases for this endpoint for backwards-compatibility, and will be removed once clients have migrated to use this endpoint. 
     * Update settings
     */
    async updateSettingsRaw(requestParameters: UpdateSettingsRequest): Promise<runtime.ApiResponse<JsonSuccessBase & object>> {
        const queryParameters: any = {};

        if (requestParameters.fullName !== undefined) {
            queryParameters['full_name'] = requestParameters.fullName;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.oldPassword !== undefined) {
            queryParameters['old_password'] = requestParameters.oldPassword;
        }

        if (requestParameters.newPassword !== undefined) {
            queryParameters['new_password'] = requestParameters.newPassword;
        }

        if (requestParameters.twentyFourHourTime !== undefined) {
            queryParameters['twenty_four_hour_time'] = requestParameters.twentyFourHourTime;
        }

        if (requestParameters.denseMode !== undefined) {
            queryParameters['dense_mode'] = requestParameters.denseMode;
        }

        if (requestParameters.starredMessageCounts !== undefined) {
            queryParameters['starred_message_counts'] = requestParameters.starredMessageCounts;
        }

        if (requestParameters.fluidLayoutWidth !== undefined) {
            queryParameters['fluid_layout_width'] = requestParameters.fluidLayoutWidth;
        }

        if (requestParameters.highContrastMode !== undefined) {
            queryParameters['high_contrast_mode'] = requestParameters.highContrastMode;
        }

        if (requestParameters.colorScheme !== undefined) {
            queryParameters['color_scheme'] = requestParameters.colorScheme;
        }

        if (requestParameters.enableDraftsSynchronization !== undefined) {
            queryParameters['enable_drafts_synchronization'] = requestParameters.enableDraftsSynchronization;
        }

        if (requestParameters.translateEmoticons !== undefined) {
            queryParameters['translate_emoticons'] = requestParameters.translateEmoticons;
        }

        if (requestParameters.defaultLanguage !== undefined) {
            queryParameters['default_language'] = requestParameters.defaultLanguage;
        }

        if (requestParameters.defaultView !== undefined) {
            queryParameters['default_view'] = requestParameters.defaultView;
        }

        if (requestParameters.leftSideUserlist !== undefined) {
            queryParameters['left_side_userlist'] = requestParameters.leftSideUserlist;
        }

        if (requestParameters.emojiset !== undefined) {
            queryParameters['emojiset'] = requestParameters.emojiset;
        }

        if (requestParameters.demoteInactiveStreams !== undefined) {
            queryParameters['demote_inactive_streams'] = requestParameters.demoteInactiveStreams;
        }

        if (requestParameters.timezone !== undefined) {
            queryParameters['timezone'] = requestParameters.timezone;
        }

        if (requestParameters.enableStreamDesktopNotifications !== undefined) {
            queryParameters['enable_stream_desktop_notifications'] = requestParameters.enableStreamDesktopNotifications;
        }

        if (requestParameters.enableStreamEmailNotifications !== undefined) {
            queryParameters['enable_stream_email_notifications'] = requestParameters.enableStreamEmailNotifications;
        }

        if (requestParameters.enableStreamPushNotifications !== undefined) {
            queryParameters['enable_stream_push_notifications'] = requestParameters.enableStreamPushNotifications;
        }

        if (requestParameters.enableStreamAudibleNotifications !== undefined) {
            queryParameters['enable_stream_audible_notifications'] = requestParameters.enableStreamAudibleNotifications;
        }

        if (requestParameters.notificationSound !== undefined) {
            queryParameters['notification_sound'] = requestParameters.notificationSound;
        }

        if (requestParameters.enableDesktopNotifications !== undefined) {
            queryParameters['enable_desktop_notifications'] = requestParameters.enableDesktopNotifications;
        }

        if (requestParameters.enableSounds !== undefined) {
            queryParameters['enable_sounds'] = requestParameters.enableSounds;
        }

        if (requestParameters.emailNotificationsBatchingPeriodSeconds !== undefined) {
            queryParameters['email_notifications_batching_period_seconds'] = requestParameters.emailNotificationsBatchingPeriodSeconds;
        }

        if (requestParameters.enableOfflineEmailNotifications !== undefined) {
            queryParameters['enable_offline_email_notifications'] = requestParameters.enableOfflineEmailNotifications;
        }

        if (requestParameters.enableOfflinePushNotifications !== undefined) {
            queryParameters['enable_offline_push_notifications'] = requestParameters.enableOfflinePushNotifications;
        }

        if (requestParameters.enableOnlinePushNotifications !== undefined) {
            queryParameters['enable_online_push_notifications'] = requestParameters.enableOnlinePushNotifications;
        }

        if (requestParameters.enableDigestEmails !== undefined) {
            queryParameters['enable_digest_emails'] = requestParameters.enableDigestEmails;
        }

        if (requestParameters.enableMarketingEmails !== undefined) {
            queryParameters['enable_marketing_emails'] = requestParameters.enableMarketingEmails;
        }

        if (requestParameters.enableLoginEmails !== undefined) {
            queryParameters['enable_login_emails'] = requestParameters.enableLoginEmails;
        }

        if (requestParameters.messageContentInEmailNotifications !== undefined) {
            queryParameters['message_content_in_email_notifications'] = requestParameters.messageContentInEmailNotifications;
        }

        if (requestParameters.pmContentInDesktopNotifications !== undefined) {
            queryParameters['pm_content_in_desktop_notifications'] = requestParameters.pmContentInDesktopNotifications;
        }

        if (requestParameters.wildcardMentionsNotify !== undefined) {
            queryParameters['wildcard_mentions_notify'] = requestParameters.wildcardMentionsNotify;
        }

        if (requestParameters.desktopIconCountDisplay !== undefined) {
            queryParameters['desktop_icon_count_display'] = requestParameters.desktopIconCountDisplay;
        }

        if (requestParameters.realmNameInNotifications !== undefined) {
            queryParameters['realm_name_in_notifications'] = requestParameters.realmNameInNotifications;
        }

        if (requestParameters.presenceEnabled !== undefined) {
            queryParameters['presence_enabled'] = requestParameters.presenceEnabled;
        }

        if (requestParameters.enterSends !== undefined) {
            queryParameters['enter_sends'] = requestParameters.enterSends;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessBase &amp; objectFromJSON(jsonValue));
    }

    /**
     * This endpoint is used to edit the current user\'s settings.  `PATCH {{ api_url }}/v1/settings`  **Changes**: Prior to Zulip 5.0 (feature level 80), this endpoint only supported the `full_name`, `email`, `old_password`, and `new_password` parameters. Notification settings were managed by `PATCH /settings/notifications`, and all other settings by `PATCH /settings/display`. The feature level 80 migration to merge these endpoints did not change how request parameters are encoded. Note, however, that it did change the handling of any invalid parameters present in a request to change notification or display settings, since the merged endpoint uses the new response format that was introduced for `/settings` in Zulip 5.0 (feature level 78).  The `/settings/display` and `/settings/notifications` endpoints are now deprecated aliases for this endpoint for backwards-compatibility, and will be removed once clients have migrated to use this endpoint. 
     * Update settings
     */
    async updateSettings(requestParameters: UpdateSettingsRequest): Promise<JsonSuccessBase & object> {
        const response = await this.updateSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Change your [status](/help/status-and-availability).  `POST {{ api_url }}/v1/users/me/status`  A request to this endpoint will only change the parameters passed. For example, passing just `status_text` requests a change in the status text, but will leave the status emoji unchanged.  Clients that wish to set the user\'s status to a specific value should pass all supported parameters. 
     * Update your status
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        const queryParameters: any = {};

        if (requestParameters.statusText !== undefined) {
            queryParameters['status_text'] = requestParameters.statusText;
        }

        if (requestParameters.away !== undefined) {
            queryParameters['away'] = requestParameters.away;
        }

        if (requestParameters.emojiName !== undefined) {
            queryParameters['emoji_name'] = requestParameters.emojiName;
        }

        if (requestParameters.emojiCode !== undefined) {
            queryParameters['emoji_code'] = requestParameters.emojiCode;
        }

        if (requestParameters.reactionType !== undefined) {
            queryParameters['reaction_type'] = requestParameters.reactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/me/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Change your [status](/help/status-and-availability).  `POST {{ api_url }}/v1/users/me/status`  A request to this endpoint will only change the parameters passed. For example, passing just `status_text` requests a change in the status text, but will leave the status emoji unchanged.  Clients that wish to set the user\'s status to a specific value should pass all supported parameters. 
     * Update your status
     */
    async updateStatus(requestParameters: UpdateStatusRequest): Promise<JsonSuccess> {
        const response = await this.updateStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Administrative endpoint to update the details of another user in the organization.  `PATCH {{ api_url }}/v1/users/{user_id}`  Supports everything an administrator can do to edit details of another user\'s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
     * Update a user
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.fullName !== undefined) {
            queryParameters['full_name'] = requestParameters.fullName;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        if (requestParameters.profileData) {
            queryParameters['profile_data'] = requestParameters.profileData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Administrative endpoint to update the details of another user in the organization.  `PATCH {{ api_url }}/v1/users/{user_id}`  Supports everything an administrator can do to edit details of another user\'s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
     * Update a user
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<JsonSuccess> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the name or description of a [user group](/help/user-groups).  `PATCH {{ api_url }}/v1/user_groups/{user_group_id}` 
     * Update a user group
     */
    async updateUserGroupRaw(requestParameters: UpdateUserGroupRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userGroupId === null || requestParameters.userGroupId === undefined) {
            throw new runtime.RequiredError('userGroupId','Required parameter requestParameters.userGroupId was null or undefined when calling updateUserGroup.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateUserGroup.');
        }

        if (requestParameters.description === null || requestParameters.description === undefined) {
            throw new runtime.RequiredError('description','Required parameter requestParameters.description was null or undefined when calling updateUserGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_groups/{user_group_id}`.replace(`{${"user_group_id"}}`, encodeURIComponent(String(requestParameters.userGroupId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Update the name or description of a [user group](/help/user-groups).  `PATCH {{ api_url }}/v1/user_groups/{user_group_id}` 
     * Update a user group
     */
    async updateUserGroup(requestParameters: UpdateUserGroupRequest): Promise<JsonSuccess> {
        const response = await this.updateUserGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the members of a [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/{user_group_id}/members` 
     * Update user group members
     */
    async updateUserGroupMembersRaw(requestParameters: UpdateUserGroupMembersRequest): Promise<runtime.ApiResponse<JsonSuccess>> {
        if (requestParameters.userGroupId === null || requestParameters.userGroupId === undefined) {
            throw new runtime.RequiredError('userGroupId','Required parameter requestParameters.userGroupId was null or undefined when calling updateUserGroupMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters._delete) {
            queryParameters['delete'] = requestParameters._delete;
        }

        if (requestParameters.add) {
            queryParameters['add'] = requestParameters.add;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user_groups/{user_group_id}/members`.replace(`{${"user_group_id"}}`, encodeURIComponent(String(requestParameters.userGroupId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JsonSuccessFromJSON(jsonValue));
    }

    /**
     * Update the members of a [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/{user_group_id}/members` 
     * Update user group members
     */
    async updateUserGroupMembers(requestParameters: UpdateUserGroupMembersRequest): Promise<JsonSuccess> {
        const response = await this.updateUserGroupMembersRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum SetTypingStatusOpEnum {
    Start = 'start',
    Stop = 'stop'
}
/**
    * @export
    * @enum {string}
    */
export enum SetTypingStatusTypeEnum {
    Private = 'private',
    Stream = 'stream'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateSettingsColorSchemeEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateSettingsDemoteInactiveStreamsEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateSettingsDesktopIconCountDisplayEnum {
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3
}
