/* tslint:disable */
/* eslint-disable */
/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BasicBotBase
 */
export interface BasicBotBase {
    /**
     * The user id of the bot.
     * @type {number}
     * @memberof BasicBotBase
     */
    userId?: number;
    /**
     * The full name of the bot.
     * @type {string}
     * @memberof BasicBotBase
     */
    fullName?: string;
    /**
     * The API key of the bot which it uses to make API requests.
     * @type {string}
     * @memberof BasicBotBase
     */
    apiKey?: string;
    /**
     * The default sending stream of the bot. Null if the bot doesn't
     * have a default sending stream.
     * @type {string}
     * @memberof BasicBotBase
     */
    defaultSendingStream?: string | null;
    /**
     * The default stream for which the bot receives events/register data. Null if
     * the bot doesn't have such a default stream.
     * @type {string}
     * @memberof BasicBotBase
     */
    defaultEventsRegisterStream?: string | null;
    /**
     * Whether the bot can send messages to all streams by default.
     * @type {boolean}
     * @memberof BasicBotBase
     */
    defaultAllPublicStreams?: boolean;
    /**
     * The URL of the bot's avatar.
     * @type {string}
     * @memberof BasicBotBase
     */
    avatarUrl?: string;
    /**
     * The user id of the bot's owner.
     * 
     * Null if the bot has no owner.
     * @type {number}
     * @memberof BasicBotBase
     */
    ownerId?: number | null;
    /**
     * The "Services" array contains extra configuration fields only relevant
     * for Outgoing webhook bots and Embedded bots.  It is always a single-element
     * array.
     * 
     * We consider this part of the Zulip API to be unstable; it is used only for
     * UI elements for administering bots and is likely to change.
     * @type {Array<object>}
     * @memberof BasicBotBase
     */
    services?: Array<object>;
}

export function BasicBotBaseFromJSON(json: any): BasicBotBase {
    return BasicBotBaseFromJSONTyped(json, false);
}

export function BasicBotBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasicBotBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userId': !exists(json, 'user_id') ? undefined : json['user_id'],
        'fullName': !exists(json, 'full_name') ? undefined : json['full_name'],
        'apiKey': !exists(json, 'api_key') ? undefined : json['api_key'],
        'defaultSendingStream': !exists(json, 'default_sending_stream') ? undefined : json['default_sending_stream'],
        'defaultEventsRegisterStream': !exists(json, 'default_events_register_stream') ? undefined : json['default_events_register_stream'],
        'defaultAllPublicStreams': !exists(json, 'default_all_public_streams') ? undefined : json['default_all_public_streams'],
        'avatarUrl': !exists(json, 'avatar_url') ? undefined : json['avatar_url'],
        'ownerId': !exists(json, 'owner_id') ? undefined : json['owner_id'],
        'services': !exists(json, 'services') ? undefined : json['services'],
    };
}

export function BasicBotBaseToJSON(value?: BasicBotBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'user_id': value.userId,
        'full_name': value.fullName,
        'api_key': value.apiKey,
        'default_sending_stream': value.defaultSendingStream,
        'default_events_register_stream': value.defaultEventsRegisterStream,
        'default_all_public_streams': value.defaultAllPublicStreams,
        'avatar_url': value.avatarUrl,
        'owner_id': value.ownerId,
        'services': value.services,
    };
}


