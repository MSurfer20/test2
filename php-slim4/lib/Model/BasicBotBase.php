<?php

/**
 * Zulip REST API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Powerful open source group chat
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 */
namespace OpenAPIServer\Model;

use OpenAPIServer\BaseModel;

/**
 * BasicBotBase
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class BasicBotBase extends BaseModel
{
    /**
     * @var string Models namespace.
     * Can be required for data deserialization when model contains referenced schemas.
     */
    protected const MODELS_NAMESPACE = '\OpenAPIServer\Model';

    /**
     * @var string Constant with OAS schema of current class.
     * Should be overwritten by inherited class.
     */
    protected const MODEL_SCHEMA = <<<'SCHEMA'
{
  "type" : "object",
  "properties" : {
    "user_id" : {
      "type" : "integer",
      "description" : "The user id of the bot.\n"
    },
    "full_name" : {
      "type" : "string",
      "description" : "The full name of the bot.\n"
    },
    "api_key" : {
      "type" : "string",
      "description" : "The API key of the bot which it uses to make API requests.\n"
    },
    "default_sending_stream" : {
      "type" : "string",
      "description" : "The default sending stream of the bot. Null if the bot doesn't\nhave a default sending stream.\n",
      "nullable" : true
    },
    "default_events_register_stream" : {
      "type" : "string",
      "description" : "The default stream for which the bot receives events/register data. Null if\nthe bot doesn't have such a default stream.\n",
      "nullable" : true
    },
    "default_all_public_streams" : {
      "type" : "boolean",
      "description" : "Whether the bot can send messages to all streams by default.\n"
    },
    "avatar_url" : {
      "type" : "string",
      "description" : "The URL of the bot's avatar.\n"
    },
    "owner_id" : {
      "type" : "integer",
      "description" : "The user id of the bot's owner.\n\nNull if the bot has no owner.\n",
      "nullable" : true
    },
    "services" : {
      "type" : "array",
      "description" : "The \"Services\" array contains extra configuration fields only relevant\nfor Outgoing webhook bots and Embedded bots.  It is always a single-element\narray.\n\nWe consider this part of the Zulip API to be unstable; it is used only for\nUI elements for administering bots and is likely to change.\n",
      "items" : {
        "description" : "Object containing details extra details.  Which fields appear depend\non the type of bot.\n",
        "oneOf" : [ {
          "type" : "object",
          "properties" : {
            "base_url" : {
              "type" : "string",
              "description" : "The URL the outgoing webhook is configured to post to.\n"
            },
            "token" : {
              "type" : "string",
              "description" : "A unique token that the third-party service can use to confirm\nthat the request is indeed coming from Zulip.\n"
            },
            "interface" : {
              "type" : "integer",
              "description" : "Integer indicating what format requests are posted in:\n\n* 1 = Zulip's native outgoing webhook format.\n* 2 = Emulate the Slack outgoing webhook format.\n"
            }
          },
          "additionalProperties" : false,
          "description" : "When the bot is an outgoing webhook bot.\n"
        }, {
          "type" : "object",
          "properties" : {
            "service_name" : {
              "type" : "string",
              "description" : "The name of the bot.\n"
            },
            "config_data" : {
              "$ref" : "#/components/schemas/Config"
            }
          },
          "additionalProperties" : false,
          "description" : "When the bot is an embedded bot.\n"
        } ]
      }
    }
  }
}
SCHEMA;
}
