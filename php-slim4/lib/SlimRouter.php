<?php

/**
 * Zulip REST API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Powerful open source group chat
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
use Slim\Exception\HttpNotImplementedException;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
use OpenAPIServer\Mock\OpenApiDataMockerRouteMiddleware;
use Slim\Psr7\Factory\ResponseFactory;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/dev_fetch_api_key',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'devFetchApiKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ApiKeyResponse"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/fetch_api_key',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'fetchApiKey',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Valid credentials the client can use to access the Zulip API.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/ApiKeyResponse"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/matches_narrow',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'checkMessagesMatchNarrow',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "messages" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "match_content" : {
                    "type" : "string",
                    "description" : "HTML content of a queried message that matches the narrow.  If the\nnarrow is a search narrow, `<span class=\"highlight\">` elements\nwill be included, wrapping the matches for the search keywords.\n"
                  },
                  "match_subject" : {
                    "type" : "string",
                    "description" : "HTML-escaped topic of a queried message that matches the narrow.  If the\nnarrow is a search narrow, `<span class=\"highlight\">` elements\nwill be included wrapping the matches for the search keywords.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`message_id`: The ID of the message that matches the narrow.  No record will be returned\nfor queried messages that do not match the narrow.\n"
              },
              "description" : "A dictionary with a key for each queried message that matches the narrow,\nwith message IDs as keys and search rendering data as values.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "messages" : {
              "31" : {
                "match_content" : "<p><a href=\"http://foo.com\" target=\"_blank\" title=\"http://foo.com\">http://foo.com</a></p>",
                "match_subject" : "test_topic"
              }
            }
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getMessages',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "anchor" : {
              "type" : "integer",
              "description" : "The same `anchor` specified in the request (or the computed one, if\n`use_first_unread_anchor` is `true`).\n"
            },
            "found_newest" : {
              "type" : "boolean",
              "description" : "Whether the `messages` list includes the very newest messages matching\nthe narrow (used by clients that paginate their requests to decide\nwhether there are more messages to fetch).\n"
            },
            "found_oldest" : {
              "type" : "boolean",
              "description" : "Whether the `messages` list includes the very oldest messages matching\nthe narrow (used by clients that paginate their requests to decide\nwhether there are more messages to fetch).\n"
            },
            "found_anchor" : {
              "type" : "boolean",
              "description" : "Whether the anchor message is included in the\nresponse. If the message with the ID specified\nin the request does not exist or did not match\nthe narrow, this will be false.\n"
            },
            "history_limited" : {
              "type" : "boolean",
              "description" : "Whether the message history was limited due to\nplan restrictions. This flag is set to `true`\nonly when the oldest messages(`found_oldest`)\nmatching the narrow is fetched.\n"
            },
            "messages" : {
              "type" : "array",
              "description" : "an array of `message` objects, each containing the following\nfields:\n",
              "items" : {
                "$ref" : "#/components/schemas/GetMessages"
              }
            }
          },
          "additionalProperties" : false,
          "description" : "When a request is successful, this endpoint returns a dictionary\ncontaining the following (in addition to the `msg` and `result` keys\npresent in all Zulip API responses).\nA typical successful JSON response may look like\n",
          "example" : {
            "anchor" : 21,
            "found_newest" : true,
            "found_anchor" : true,
            "result" : "success",
            "msg" : "",
            "messages" : [ {
              "subject" : "",
              "sender_realm_str" : "zulip",
              "type" : "private",
              "content" : "<p>Security experts agree that relational algorithms are an interesting new topic in the field of networking, and scholars concur.</p>",
              "flags" : [ "read" ],
              "id" : 16,
              "display_recipient" : [ {
                "id" : 4,
                "is_mirror_dummy" : false,
                "email" : "hamlet@zulip.com",
                "full_name" : "King Hamlet"
              }, {
                "id" : 5,
                "is_mirror_dummy" : false,
                "email" : "iago@zulip.com",
                "full_name" : "Iago"
              }, {
                "id" : 8,
                "is_mirror_dummy" : false,
                "email" : "prospero@zulip.com",
                "full_name" : "Prospero from The Tempest"
              } ],
              "content_type" : "text/html",
              "is_me_message" : false,
              "timestamp" : 1527921326,
              "sender_id" : 4,
              "sender_full_name" : "King Hamlet",
              "recipient_id" : 27,
              "topic_links" : [ ],
              "client" : "populate_db",
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "submessages" : [ ],
              "sender_email" : "hamlet@zulip.com",
              "reactions" : [ ]
            }, {
              "subject" : "Verona3",
              "stream_id" : 5,
              "sender_realm_str" : "zulip",
              "type" : "stream",
              "content" : "<p>Wait, is this from the frontend js code or backend python code</p>",
              "flags" : [ "read" ],
              "id" : 21,
              "display_recipient" : "Verona",
              "content_type" : "text/html",
              "is_me_message" : false,
              "timestamp" : 1527939746,
              "sender_id" : 4,
              "sender_full_name" : "King Hamlet",
              "recipient_id" : 20,
              "topic_links" : [ ],
              "client" : "populate_db",
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "submessages" : [ ],
              "sender_email" : "hamlet@zulip.com",
              "reactions" : [ ]
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_all_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markAllAsRead',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_stream_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markStreamAsRead',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_topic_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markTopicAsRead',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/render',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'renderMessage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "rendered" : {
              "type" : "string",
              "description" : "The rendered HTML.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "rendered" : "<p><strong>foo</strong></p>",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'sendMessage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The unique ID assigned to the sent message.\n"
            },
            "deliver_at" : {
              "type" : "string",
              "description" : "Present for scheduled messages, encodes the time when the message will\nbe sent.  Note that scheduled messages (\"Send later\") is a beta API and\nmay change before it's a finished feature.\n",
              "example" : "2020-06-24 11:19:54.337533+00:00"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "id" : 42,
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/NonExistingStreamError"
          }, {
            "description" : "A typical failed JSON response for when a stream message is sent to a stream\nthat does not exist\n"
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "A typical failed JSON response for when a private message is sent to a user\nthat does not exist\n",
            "example" : {
              "code" : "BAD_REQUEST",
              "msg" : "Invalid email 'eeshan@zulip.com'",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/flags',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'updateMessageFlags',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "messages" : {
              "type" : "array",
              "description" : "An array with the IDs of the modified messages.\n",
              "items" : {
                "type" : "integer"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "messages" : [ 4, 18, 15 ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_uploads',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'uploadFile',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "uri" : {
              "type" : "string",
              "description" : "The URI of the uploaded file.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "uri" : "/user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/reactions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'addReaction',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON error response for when the emoji code is invalid",
          "example" : {
            "result" : "error",
            "msg" : "Invalid emoji code",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'deleteMessage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/InvalidMessageError"
          }, {
            "description" : "An example JSON response for when the specified message does not exist"
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/CodedError"
          }, {
            "description" : "An example JSON response for when the user making the query does not\nhave permission to delete the message\n",
            "example" : {
              "code" : "BAD_REQUEST",
              "msg" : "You don't have permission to delete this message",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_uploads/{realm_id_str}/{filename}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getFileTemporaryUrl',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "url" : {
              "type" : "string",
              "description" : "A temporary URL that can be used to access the uploaded file\nwithout Zulip's normal API authentication.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "url" : "/user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/history',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getMessageHistory',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "message_history" : {
              "type" : "array",
              "description" : "A chronologically sorted array of `snapshot`\nobjects, each one with the values of the\nmessage after the edit.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "topic" : {
                    "type" : "string",
                    "description" : "the topic for the message.\n"
                  },
                  "prev_topic" : {
                    "type" : "string",
                    "description" : "the topic for the message before being edited.\n"
                  },
                  "content" : {
                    "type" : "string",
                    "description" : "the body of the message.\n"
                  },
                  "rendered_content" : {
                    "type" : "string",
                    "description" : "the already rendered, HTML version of `content`.\n"
                  },
                  "prev_content" : {
                    "type" : "string",
                    "description" : "the body of the message before being edited.\n"
                  },
                  "prev_rendered_content" : {
                    "type" : "string",
                    "description" : "the already rendered, HTML version of\n`prev_content`.\n"
                  },
                  "user_id" : {
                    "type" : "integer",
                    "description" : "the ID of the user that made the edit.\n"
                  },
                  "content_html_diff" : {
                    "type" : "string",
                    "description" : "an HTML diff between this version of the message\nand the previous one.\n"
                  },
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "the UNIX timestamp for this edit.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "message_history" : [ {
              "content" : "Hello!",
              "topic" : "party at my houz",
              "rendered_content" : "<p>Hello!</p>",
              "timestamp" : 1530129122,
              "user_id" : 5
            }, {
              "topic" : "party at my house",
              "content" : "Howdy!",
              "prev_content" : "Hello!",
              "rendered_content" : "<p>Howdy!</p>",
              "user_id" : 5,
              "prev_rendered_content" : "<p>Hello!</p>",
              "content_html_diff" : "<div><p><span class=\"highlight_text_inserted\">Howdy!</span></p> <p><span class=\"highlight_text_deleted\">Hello!</span></p></div>",
              "prev_topic" : "party at my houz",
              "timestamp" : 1530129134
            } ],
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InvalidMessageError"
        }, {
          "description" : "An example JSON response for when the specified message does not exist"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getRawMessage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "raw_content" : {
              "type" : "string",
              "description" : "The raw content of the message.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "raw_content" : "**Don't** forget your towel!",
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/InvalidMessageError"
        }, {
          "description" : "An example JSON response for when the specified message does not exist or it\nis not visible to the user making the query (e.g. it was a PM between other\ntwo users)\n"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/reactions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'removeReaction',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON error response for when the emoji code is invalid",
          "example" : {
            "result" : "error",
            "msg" : "Invalid message(s)",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'updateMessage',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "properties" : {
            "msg" : {
              "type" : "string",
              "enum" : [ "Your organization has turned off message editing", "You don't have permission to edit this message", "The time limit for editing this message has past", "Nothing to change", "Topic can't be empty" ]
            }
          },
          "description" : "A typical JSON response for when one doesn't have the permission to\nedit a particular message\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "You don't have permission to edit this message",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'deleteQueue',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BadEventQueueIdError"
        }, {
          "description" : "A typical JSON response for when the `queue_id` is non-existent or the\nassociated queue has already been deleted\n"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'getEvents',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "events" : {
              "type" : "array",
              "description" : "An array of `event` objects (possibly zero-length if `dont_block` is\nset) with IDs newer than `last_event_id`. Event IDs are\nguaranteed to be increasing, but they are not guaranteed to be\nconsecutive.\n",
              "items" : {
                "oneOf" : [ {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "alert_words" ]
                      } ]
                    },
                    "alert_words" : {
                      "type" : "array",
                      "description" : "Array of strings, each a configured alert word.\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of configured\n[alert words](/help/add-an-alert-word) have changed.\n",
                  "example" : {
                    "type" : "alert_words",
                    "alert_words" : [ "alert_word" ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_display_settings" ]
                      } ]
                    },
                    "setting_name" : {
                      "type" : "string",
                      "description" : "Name of the changed display setting.\n"
                    },
                    "setting" : {
                      "description" : "New value of the changed setting.\n",
                      "oneOf" : [ {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      }, {
                        "type" : "string"
                      } ]
                    },
                    "language_name" : {
                      "type" : "string",
                      "description" : "Present only if the setting to be changed is\n`default_language`. Contains the name of the\nnew default language in English.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's display settings\nhave changed.\n",
                  "example" : {
                    "type" : "update_display_settings",
                    "setting_name" : "high_contrast_mode",
                    "setting" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_global_notifications" ]
                      } ]
                    },
                    "notification_name" : {
                      "type" : "string",
                      "description" : "Name of the changed notification setting.\n"
                    },
                    "setting" : {
                      "description" : "New value of the changed setting.\n",
                      "oneOf" : [ {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      }, {
                        "type" : "string"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's [notification\nsettings](/api/update-notification-settings) have changed.\n",
                  "example" : {
                    "type" : "update_global_notifications",
                    "notification_name" : "enable_sounds",
                    "setting" : true,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "person" : {
                      "description" : "Object containing the changed details of the user.\nIt has multiple forms depending on the value changed.\n",
                      "oneOf" : [ {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of modified user.\n"
                          },
                          "full_name" : {
                            "type" : "string",
                            "description" : "The new full name for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their full name.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user who is affected by this change.\n"
                          },
                          "avatar_url" : {
                            "type" : "string",
                            "description" : "The URL of the new avatar for the user.\n"
                          },
                          "avatar_source" : {
                            "type" : "string",
                            "description" : "The new avatar data source type for the user.\n\nValue values are `G` (gravatar) and `U` (uploaded by user).\n"
                          },
                          "avatar_url_medium" : {
                            "type" : "string",
                            "description" : "The new medium-size avatar URL for user.\n"
                          },
                          "avatar_version" : {
                            "type" : "integer",
                            "description" : "The version number for the user's avatar.  This is useful\nfor cache-busting.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their avatar.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of modified user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The email of the user.\n\n**Deprecated**: This field will be removed in a future\nrelease as it is redundant with the `user_id`.\n",
                            "deprecated" : true
                          },
                          "timezone" : {
                            "type" : "string",
                            "description" : "The new timezone of the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When a user changes their timezone setting.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user/bot whose owner has changed.\n"
                          },
                          "bot_owner_id" : {
                            "type" : "integer",
                            "description" : "The user id of the new bot owner.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the owner of a bot changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "role" : {
                            "type" : "integer",
                            "description" : "The new role of the user in integer.\n",
                            "enum" : [ 100, 200, 300, 400, 600 ]
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the role of a user changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "is_billing_admin" : {
                            "type" : "boolean",
                            "description" : "A boolean specifying whether the user is now a billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When billing role of a user changes.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "delivery_email" : {
                            "type" : "string",
                            "description" : "The new delivery email of the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the delivery email of a user changes.\n\nNote: This event is only visible to admins.\n"
                      }, {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user affected by this change.\n"
                          },
                          "custom_profile_field" : {
                            "type" : "object",
                            "properties" : {
                              "id" : {
                                "type" : "integer",
                                "description" : "The ID of the custom profile field which user updated.\n"
                              },
                              "value" : {
                                "type" : "string",
                                "description" : "User's personal value for this custom profile field.\n"
                              },
                              "rendered_value" : {
                                "type" : "string",
                                "description" : "The `value` rendered in HTML.  Will only be present for\ncustom profile field types that support Markdown rendering.\n\nThis user-generated HTML content should be rendered\nusing the same CSS and client-side security protections\nas are used for message content.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "Object containing details about the custom\nprofile data change.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "When the user updates one of their custom profile\nfields.\n"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent generally to all users in an organization for changes\nin the set of users or those users metadata.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "update",
                    "person" : {
                      "avatar_source" : "G",
                      "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=3",
                      "avatar_url_medium" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&s=500&version=3",
                      "avatar_version" : 3,
                      "user_id" : 10
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "subscriptions" : {
                      "type" : "array",
                      "description" : "A list of dictionaries where each dictionary contains\ninformation about one of the subscribed streams.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/Subscriptions"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's stream subscriptions\nhave changed (either the set of subscriptions or their properties).\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "add",
                    "subscriptions" : [ {
                      "name" : "test_stream",
                      "stream_id" : 9,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : false,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : true,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false,
                      "color" : "#76ce90",
                      "is_muted" : false,
                      "pin_to_top" : false,
                      "audible_notifications" : null,
                      "desktop_notifications" : null,
                      "email_notifications" : null,
                      "push_notifications" : null,
                      "wildcard_mentions_notify" : null,
                      "in_home_view" : true,
                      "email_address" : "test_stream.af64447e9e39374841063747ade8e6b0.show-sender@testserver",
                      "stream_weekly_traffic" : null,
                      "subscribers" : [ 10 ]
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "subscriptions" : {
                      "type" : "array",
                      "description" : "A list of dictionaries, where each dictionary contains\ninformation about one of the newly unsubscribed streams.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "stream_id" : {
                            "type" : "integer",
                            "description" : "The ID of the stream.\n"
                          },
                          "name" : {
                            "type" : "string",
                            "description" : "The name of the stream.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Dictionary containing details about the unsubscribed stream.\n"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user has been unsubscribed\nfrom one or more streams.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "remove",
                    "subscriptions" : [ {
                      "name" : "test_stream",
                      "stream_id" : 9
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "The ID of the stream whose subscription details have changed.\n"
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The property of the subscription which has changed. See\n[/users/me/subscriptions/properties GET](/api/update-subscription-settings)\nfor details on the various properties of a stream.\n\nClients should generally handle an unknown property received here without\ncrashing, since that will naturally happen when connecting to a Zulip\nserver running a new version that adds a new subscription property.\n"
                    },
                    "value" : {
                      "description" : "The new value of the changed property.\n",
                      "oneOf" : [ {
                        "type" : "integer"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "string"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when a property of the user's\nsubscription to a stream has been updated.  This event is used\nonly for personal properties like `is_muted`; see the `stream` event\nfor global properties of a stream.\n",
                  "example" : {
                    "op" : "update",
                    "type" : "subscription",
                    "property" : "pin_to_top",
                    "value" : true,
                    "stream_id" : 11,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "peer_add" ]
                    },
                    "stream_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the streams to which the user has subscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the users who subscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to other users when users have been subscribed to\nstreams. Sent to all users if the stream is public or to only\nthe existing subscribers if the stream is private.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "peer_add",
                    "stream_id" : 9,
                    "user_id" : 12,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "subscription" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "peer_remove" ]
                    },
                    "stream_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the streams from which the users have been\nunsubscribed from.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "The IDs of the users who have been unsubscribed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to other users when users have been unsubscribed\nfrom streams. Sent to all users if the stream is public or to only\nthe existing subscribers if the stream is private.\n",
                  "example" : {
                    "type" : "subscription",
                    "op" : "peer_remove",
                    "stream_id" : 9,
                    "user_id" : 12,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "message" ]
                      } ]
                    },
                    "message" : {
                      "$ref" : "#/components/schemas/Messages"
                    },
                    "flags" : {
                      "type" : "array",
                      "description" : "The user's [message flags][message-flags] for the message.\n\nClients should inspect the flags field rather than assuming that\nnew messages are unread; [muted users](/api/mute-user), messages\nsent by the current user, and more subtle scenarios can result\nin a new message that the server has already marked as read for\nthe user.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event type for messages.\n",
                  "example" : {
                    "type" : "message",
                    "message" : {
                      "id" : 31,
                      "sender_id" : 10,
                      "content" : "<p>First message ...<a href=\"user_uploads/2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt\">zulip.txt</a></p>",
                      "recipient_id" : 23,
                      "timestamp" : 1594825416,
                      "client" : "test suite",
                      "subject" : "test",
                      "topic_links" : [ ],
                      "is_me_message" : false,
                      "reactions" : [ ],
                      "submessages" : [ ],
                      "sender_full_name" : "King Hamlet",
                      "sender_short_name" : "hamlet",
                      "sender_email" : "user10@zulip.testserver",
                      "sender_realm_str" : "zulip",
                      "display_recipient" : "Denmark",
                      "type" : "stream",
                      "stream_id" : 1,
                      "avatar_url" : null,
                      "content_type" : "text/html"
                    },
                    "flags" : [ ],
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "has_zoom_token" ]
                      } ]
                    },
                    "value" : {
                      "type" : "boolean",
                      "description" : "A boolean specifying whether the user has zoom\ntoken or not.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user completes the\nOAuth flow for the [Zoom integration](/help/start-a-call).  Clients need\nto know whether initiating Zoom OAuth is required before creating a Zoom call.\n",
                  "example" : {
                    "type" : "has_zoom_token",
                    "value" : true,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "invites_changed" ]
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "A simple event sent to organization administrators when the\nset of invitations changes; this tells clients they need to refetch\ndata from `GET /invites` if they are displaying UI containing active\ninvitations.\n",
                  "example" : {
                    "type" : "invites_changed",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "person" : {
                      "$ref" : "#/components/schemas/User"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when a new\nuser joins.  Processing this event is important to being able\nto display basic details on other users given only their ID.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "add",
                    "person" : {
                      "email" : "foo@zulip.com",
                      "user_id" : 38,
                      "avatar_version" : 1,
                      "is_admin" : false,
                      "is_owner" : false,
                      "is_guest" : false,
                      "is_billing_admin" : false,
                      "role" : 400,
                      "is_bot" : false,
                      "full_name" : "full name",
                      "timezone" : "",
                      "is_active" : true,
                      "date_joined" : "2020-07-15T15:04:02.030833+00:00",
                      "avatar_url" : "https://secure.gravatar.com/avatar/c6b5578d4964bd9c5fae593c6868912a?d=identicon&version=1",
                      "profile_data" : { }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_user" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "person" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The ID of the deactivated user.\n"
                        },
                        "full_name" : {
                          "type" : "string",
                          "description" : "The full name of the user.\n\n**Deprecated**: We expect to remove this field in the future.\n",
                          "deprecated" : true
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details of the deactivated user.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when\na user is deactivated.\n",
                  "example" : {
                    "type" : "realm_user",
                    "op" : "remove",
                    "person" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "presence" ]
                      } ]
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of modified user.\n"
                    },
                    "email" : {
                      "type" : "string",
                      "description" : "The email of the user.\n\n**Deprecated**: This field will be removed in a future\nrelease as it is redundant with the `user_id`.\n",
                      "deprecated" : true
                    },
                    "server_timestamp" : {
                      "type" : "number",
                      "description" : "The timestamp of when the Zulip server received the user's\npresence as a UNIX timestamp.\n"
                    },
                    "presence" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "$ref" : "#/components/schemas/Presence"
                      },
                      "description" : "An object contatining a set of objects which describe the\nthe user's presence on various platforms.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in an organization when a user comes\nback online after being long offline.  While most presence updates happen\ndone via polling the main presence endpoint, this event is important\nto avoid confusing users when someone comes online and then immediately sends\na message (one wouldn't want them to still appear offline at that point!).\n",
                  "example" : {
                    "type" : "presence",
                    "user_id" : 10,
                    "email" : "user10@zulip.testserver",
                    "server_timestamp" : 1.5948254453200784E9,
                    "presence" : {
                      "ZulipAndroid/1.0" : {
                        "client" : "ZulipAndroid/1.0",
                        "status" : "idle",
                        "timestamp" : 1594825445,
                        "pushable" : false
                      }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "create" ]
                    },
                    "streams" : {
                      "type" : "array",
                      "description" : "Array of stream objects, each containing\ndetails about the newly added stream(s).\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a new stream is created to users who can see\nthe new stream exists (for private streams, only subscribers and\norganization administrators will receive this event).\n\nNote that organization administrators who are not subscribed will\nnot be able to see content on the stream; just that it exists.\n",
                  "example" : {
                    "type" : "stream",
                    "op" : "create",
                    "streams" : [ {
                      "name" : "private",
                      "stream_id" : 12,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : true,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : false,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "delete" ]
                    },
                    "streams" : {
                      "type" : "array",
                      "description" : "Array of stream objects, each contatining\ndetails about a stream that was deleted.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users who can see a stream when it is deactivated.\n",
                  "example" : {
                    "type" : "stream",
                    "op" : "delete",
                    "streams" : [ {
                      "name" : "private",
                      "stream_id" : 12,
                      "description" : "",
                      "rendered_description" : "",
                      "invite_only" : true,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : false,
                      "first_message_id" : null,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "stream" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "The ID of the stream whose details have changed.\n"
                    },
                    "name" : {
                      "type" : "string",
                      "description" : "The name of the stream whose details have changed.\n"
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The property of the stream which has changed. See\n[/stream GET](/api/get-streams) for details on the various\nproperties of a stream.\n\nClients should handle an \"unknown\" property received here without\ncrashing, since that can happen when connecting to a server running a\nnewer version of Zulip with new features.\n"
                    },
                    "value" : {
                      "description" : "The new value of the changed property.\n",
                      "oneOf" : [ {
                        "type" : "integer"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "string"
                      } ]
                    },
                    "rendered_description" : {
                      "type" : "string",
                      "description" : "Note: Only present if the changed property was `description`.\n\nThe short description of the stream rendered as HTML, intended to\nbe used when displaying the stream description in a UI.\n\nOne should use the standard Zulip rendered_markdown CSS when\ndisplaying this content so that emoji, LaTeX, and other syntax\nwork correctly.  And any client-side security logic for\nuser-generated message content should be applied when displaying\nthis HTML as though it were the body of a Zulip message.\n"
                    },
                    "history_public_to_subscribers" : {
                      "type" : "boolean",
                      "description" : "Note: Only present if the changed property was `invite_only`.\n\nWhether the history of the stream is public to its subscribers.\n\nCurrently always true for public streams (i.e. invite_only=False implies\nhistory_public_to_subscribers=True), but clients should not make that\nassumption, as we may change that behavior in the future.\n"
                    },
                    "is_web_public" : {
                      "type" : "boolean",
                      "description" : "Note: Only present if the changed property was `invite_only`.\n\nWhether the stream's history is now readable by web-public spectators.\n\n**Changes**: New in Zulip 5.0 (feature level 71).\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users who can see that a stream exists\nwhen a property of that stream changes.\n",
                  "example" : {
                    "op" : "update",
                    "type" : "stream",
                    "property" : "invite_only",
                    "value" : true,
                    "history_public_to_subscribers" : true,
                    "is_web_public" : false,
                    "stream_id" : 11,
                    "name" : "test_stream",
                    "id" : 0
                  }
                }, {
                  "description" : "Event sent when a reaction is added to a message.\nSent to all users who were recipients of the message.\n",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/EmojiReactionBase"
                  }, {
                    "type" : "object",
                    "properties" : {
                      "emoji_code" : { },
                      "emoji_name" : { },
                      "reaction_type" : { },
                      "user_id" : { },
                      "user" : { },
                      "id" : {
                        "$ref" : "#/components/schemas/EventIdSchema"
                      },
                      "type" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventTypeSchema"
                        }, {
                          "type" : "string",
                          "enum" : [ "reaction" ]
                        } ]
                      },
                      "op" : {
                        "type" : "string",
                        "enum" : [ "add" ]
                      },
                      "message_id" : {
                        "type" : "integer",
                        "description" : "The ID of the message to which a reaction was\nadded.\n"
                      }
                    },
                    "additionalProperties" : false,
                    "example" : {
                      "type" : "reaction",
                      "op" : "add",
                      "user_id" : 10,
                      "user" : {
                        "user_id" : 10,
                        "email" : "user10@zulip.testserver",
                        "full_name" : "King Hamlet"
                      },
                      "message_id" : 32,
                      "emoji_name" : "tada",
                      "emoji_code" : "1f389",
                      "reaction_type" : "unicode_emoji",
                      "id" : 0
                    }
                  } ]
                }, {
                  "description" : "Event sent when a reaction is removed from a message.\nSent to all users who were recipients of the message.\n",
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/EmojiReactionBase"
                  }, {
                    "type" : "object",
                    "properties" : {
                      "emoji_code" : { },
                      "emoji_name" : { },
                      "reaction_type" : { },
                      "user_id" : { },
                      "user" : { },
                      "id" : {
                        "$ref" : "#/components/schemas/EventIdSchema"
                      },
                      "type" : {
                        "allOf" : [ {
                          "$ref" : "#/components/schemas/EventTypeSchema"
                        }, {
                          "type" : "string",
                          "enum" : [ "reaction" ]
                        } ]
                      },
                      "op" : {
                        "type" : "string",
                        "enum" : [ "remove" ]
                      },
                      "message_id" : {
                        "type" : "integer",
                        "description" : "The ID of the message from which the reaction was\nremoved.\n"
                      }
                    },
                    "additionalProperties" : false,
                    "example" : {
                      "type" : "reaction",
                      "op" : "remove",
                      "user_id" : 10,
                      "user" : {
                        "user_id" : 10,
                        "email" : "user10@zulip.testserver",
                        "full_name" : "King Hamlet"
                      },
                      "message_id" : 52,
                      "emoji_name" : "tada",
                      "emoji_code" : "1f389",
                      "reaction_type" : "unicode_emoji",
                      "id" : 0
                    }
                  } ]
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "attachment" : {
                      "$ref" : "#/components/schemas/Attachments"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user uploads a new file\nin a Zulip message.  Useful to implement live update in UI showing all files\nthe current user has uploaded.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "add",
                    "attachment" : {
                      "id" : 1,
                      "name" : "zulip.txt",
                      "path_id" : "2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt",
                      "size" : 6,
                      "create_time" : 1594825414000,
                      "messages" : [ ]
                    },
                    "upload_space_used" : 6,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "attachment" : {
                      "$ref" : "#/components/schemas/Attachments"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent sent to a user's clients when details of a file that user\nuploaded are changed.  Most updates will be changes in the list of\nmessages that reference the uploaded file.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "update",
                    "attachment" : {
                      "id" : 1,
                      "name" : "zulip.txt",
                      "path_id" : "2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt",
                      "size" : 6,
                      "create_time" : 1594825414000,
                      "messages" : [ ]
                    },
                    "upload_space_used" : 6,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "attachment" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "attachment" : {
                      "type" : "object",
                      "properties" : {
                        "id" : {
                          "type" : "integer",
                          "description" : "The ID of the deleted attachment.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Dictionary containing the id of the deleted attachment.\n"
                    },
                    "upload_space_used" : {
                      "type" : "integer",
                      "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when the user deletes a file\nthey had uploaded.  Useful primarily for UI showing all the files\nthe current user has uploaded.\n",
                  "example" : {
                    "type" : "attachment",
                    "op" : "remove",
                    "attachment" : {
                      "id" : 1
                    },
                    "upload_space_used" : 0,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "submessage" ]
                      } ]
                    },
                    "msg_type" : {
                      "type" : "string",
                      "description" : "The type of the message.\n"
                    },
                    "content" : {
                      "type" : "string",
                      "description" : "The new content of the submessage.\n"
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The ID of the message to which the submessage has been added.\n"
                    },
                    "sender_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user who sent the message.\n"
                    },
                    "submessage_id" : {
                      "type" : "integer",
                      "description" : "The ID of the submessage.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a submessage is added to a message.\n\nSubmessages are an **experimental** API used for widgets such as the\n`/poll` widget in Zulip.\n",
                  "example" : {
                    "type" : "submessage",
                    "msg_type" : "widget",
                    "message_id" : 970461,
                    "submessage_id" : 4737,
                    "sender_id" : 58,
                    "content" : "{\"type\":\"vote\",\"key\":\"58,1\",\"vote\":1}",
                    "id" : 28
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_status" ]
                      } ]
                    },
                    "away" : {
                      "type" : "boolean",
                      "description" : "Whether the user has marked themself \"away\".\n"
                    },
                    "status_text" : {
                      "type" : "string",
                      "description" : "The text content of the status message.\n"
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user whose status changed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nstatus of a user changes.\n",
                  "example" : {
                    "type" : "user_status",
                    "user_id" : 10,
                    "away" : true,
                    "status_text" : "out to lunch",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "custom_profile_fields" ]
                      } ]
                    },
                    "fields" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndetails of a single new custom profile field for the Zulip\norganization.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/CustomProfileField"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when new custom\nprofile field types are configured for that Zulip organization.\n",
                  "example" : {
                    "type" : "custom_profile_fields",
                    "fields" : [ {
                      "id" : 1,
                      "name" : "Phone number",
                      "type" : 1,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 1
                    }, {
                      "id" : 2,
                      "name" : "Biography",
                      "type" : 2,
                      "hint" : "What are you known for?",
                      "field_data" : "",
                      "order" : 2
                    }, {
                      "id" : 3,
                      "name" : "Favorite food",
                      "type" : 1,
                      "hint" : "Or drink, if you'd prefer",
                      "field_data" : "",
                      "order" : 3
                    }, {
                      "id" : 4,
                      "name" : "Favorite editor",
                      "type" : 3,
                      "hint" : "",
                      "field_data" : "{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}",
                      "order" : 4
                    }, {
                      "id" : 5,
                      "name" : "Birthday",
                      "type" : 4,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 5
                    }, {
                      "id" : 6,
                      "name" : "Favorite website",
                      "type" : 5,
                      "hint" : "Or your personal blog's URL",
                      "field_data" : "",
                      "order" : 6
                    }, {
                      "id" : 7,
                      "name" : "Mentor",
                      "type" : 6,
                      "hint" : "",
                      "field_data" : "",
                      "order" : 7
                    }, {
                      "id" : 8,
                      "name" : "GitHub",
                      "type" : 7,
                      "hint" : "Enter your GitHub username",
                      "field_data" : "{\"subtype\":\"github\"}",
                      "order" : 8
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "default_stream_groups" ]
                      } ]
                    },
                    "default_stream_groups" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary\ncontains details about a single default stream group.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/DefaultStreamGroup"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when an organization\nadministrator changes the organization's configured default stream groups.\n\nDefault stream groups are an **experimental** feature that is not yet\nstabilized.\n",
                  "example" : {
                    "type" : "default_stream_groups",
                    "default_stream_groups" : [ {
                      "name" : "group1",
                      "id" : 2,
                      "description" : "New description",
                      "streams" : [ {
                        "name" : "Scotland",
                        "stream_id" : 3,
                        "description" : "Located in the United Kingdom",
                        "rendered_description" : "<p>Located in the United Kingdom</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 1,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      }, {
                        "name" : "Denmark",
                        "stream_id" : 1,
                        "description" : "A Scandinavian country",
                        "rendered_description" : "<p>A Scandinavian country</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 4,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      }, {
                        "name" : "Verona",
                        "stream_id" : 5,
                        "description" : "A city in Italy",
                        "rendered_description" : "<p>A city in Italy</p>",
                        "invite_only" : false,
                        "is_web_public" : false,
                        "stream_post_policy" : 1,
                        "history_public_to_subscribers" : true,
                        "first_message_id" : 6,
                        "message_retention_days" : null,
                        "is_announcement_only" : false
                      } ]
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "default_streams" ]
                      } ]
                    },
                    "default_streams" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary\ncontains details about a single default stream.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/BasicStream"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\ndefault streams in the organization are changed by an\norganization administrator.\n",
                  "example" : {
                    "type" : "default_streams",
                    "default_streams" : [ {
                      "name" : "Scotland",
                      "stream_id" : 3,
                      "description" : "Located in the United Kingdom",
                      "rendered_description" : "<p>Located in the United Kingdom</p>",
                      "invite_only" : false,
                      "is_web_public" : false,
                      "stream_post_policy" : 1,
                      "history_public_to_subscribers" : true,
                      "first_message_id" : 1,
                      "message_retention_days" : null,
                      "is_announcement_only" : false
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "delete_message" ]
                      } ]
                    },
                    "message_ids" : {
                      "type" : "array",
                      "description" : "The `message_ids` property will be present for clients that support\nthe `bulk_message_deletion` client capability.\n\nAn containing the IDs of the newly deleted messages.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The `message_id` property will be present for clients that do not support\nthe `bulk_message_deletion` client capability.\n\nThe ID of the newly deleted message.\n"
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "The type of message. Either 'stream' or 'private'.  The other keys\npresent in the event, necessary to update various frontend data structures\nthat might be tracking the message, depend on the message type.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present for stream messages.\n\nThe ID of the stream to which the message was sent.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present for stream messages.\n\nThe topic to which the message was sent.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a message has been deleted.\nSent to all users who received the message.\n\n**Changes**: Before Zulip 5.0 (feature level 77), events\nfor private messages contained additional `sender_id` and\n`recipient_id` fields.\n",
                  "example" : {
                    "type" : "delete_message",
                    "message_type" : "private",
                    "message_id" : 37,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "muted_topics" ]
                      } ]
                    },
                    "muted_topics" : {
                      "type" : "array",
                      "description" : "Array of tuples, where each tuple describes a muted topic.\nThe first element of tuple is the stream name in which the topic\nhas to be muted, the second element is the topic name to be muted\nand the third element is an integer UNIX timestamp representing\nwhen the topic was muted.\n",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "oneOf" : [ {
                            "type" : "string"
                          }, {
                            "type" : "integer"
                          } ]
                        }
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of\nconfigured muted topics have changed.\n",
                  "example" : {
                    "type" : "muted_topics",
                    "muted_topics" : [ [ "Denmark", "topic", 1594825442 ] ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "muted_users" ]
                      } ]
                    },
                    "muted_users" : {
                      "type" : "array",
                      "description" : "A list of dictionaries where each dictionary describes\na muted user.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "id" : {
                            "type" : "integer",
                            "description" : "The ID of the muted user.\n"
                          },
                          "timestamp" : {
                            "type" : "integer",
                            "description" : "An integer UNIX timestamp representing when the user was muted.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and timestamp of a muted user.\n"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user's clients when that user's set of\nconfigured [muted users](/api/mute-user) have changed.\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n",
                  "example" : {
                    "type" : "muted_users",
                    "muted_users" : [ {
                      "id" : 1,
                      "timestamp" : 1594825442
                    }, {
                      "id" : 22,
                      "timestamp" : 1654865392
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "heartbeat" ]
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Heartbeat events are sent by the server to avoid\nlongpolling connections being affected by networks that\nkill idle HTTP connections.\n\nClients do not need to do anything to process these\nevents, beyond the common `last_event_id` accounting.\n",
                  "example" : {
                    "type" : "heartbeat",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "hotspots" ]
                      } ]
                    },
                    "hotspots" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each\ndictionary contains details about a single hotspot.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/Hotspot"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when the set of onboarding \"hotspots\" to show for\nthe current user have changed (E.g. because the user dismissed one).\n\nClients that feature a similar tutorial experience to the Zulip\nweb app may want to handle these events.\n",
                  "example" : {
                    "type" : "hotspots",
                    "hotspots" : [ {
                      "name" : "intro_streams",
                      "title" : "Catch up on a stream",
                      "description" : "Messages sent to a stream are seen by everyone subscribed to that stream. Try clicking on one of the stream links below.",
                      "delay" : 0.5
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message" ]
                      } ]
                    },
                    "user_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user who sent the message.\n"
                    },
                    "message_id" : {
                      "type" : "integer",
                      "description" : "The ID of the message which was edited.\n\nThis field should be used to apply content edits to the client's\ncached message history.  If the stream or topic was changed, the\nset of moved messages is encoded in the separate `message_ids`\nfield, which is guaranteed to include `message_id`.\n"
                    },
                    "message_ids" : {
                      "type" : "array",
                      "description" : "The list of IDs of messages to which any stream or topic changes\nencoded in this event should be applied.\n\nThese messages are guaranteed to have all been previously sent\nto stream `stream_id` with topic `orig_subject`, and have been\nmoved to `new_stream_id` with topic `subject` (if those fields\nare present in the event).\n\nClients processing these events should update all cached message\nhistory associated with the moved messages (including adjusting\n`unread_msgs` data structures, where the client may not have the\nmessage itself in its history) to reflect the new stream and\ntopic.\n\nContent changes should be applied only to the single message\nindicated by `message_id`.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "edit_timestamp" : {
                      "type" : "integer",
                      "description" : "The time when this message edit operation was processed by the\nserver.\n"
                    },
                    "stream_name" : {
                      "type" : "string",
                      "description" : "Only present if the message was originally sent to a stream.\n\nThe name of the stream that the message was sent to.  Clients\nare recommended to use the `stream_id` field instead.\n"
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if the message was originally sent to a stream.\n\nThe pre-edit stream for all of the messages with IDs in\n`message_ids`.\n"
                    },
                    "new_stream_id" : {
                      "type" : "integer",
                      "description" : "Note: Only present if message(s) were moved to a different stream.\n\nThe post-edit stream for all of the messages with IDs in\n`message_ids`.\n"
                    },
                    "propagate_mode" : {
                      "type" : "string",
                      "description" : "The choice the editing user made about which messages should be\naffected by a stream/topic edit: just the one indicated in\n`message_id`, messages in the same topic that had been sent\nafter this one, or all messages in that topic.\n\nThis parameter should be used to decide whether to change\nnavigation and compose box state in response to the edit.  For\nexample, if the user was previously in topic narrow, and the\ntopic was edited with `change_later` or `change_all`, the Zulip\nweb app will automatically navigate to the new topic narrow.\nSimilarly, a message being composed to the old topic should\nhave its recipient changed to the new topic.\n\nThis navigation makes it much more convenient to move content\nbetween topics without disruption or messages continuing\nto be sent to the pre-edit topic by accident.\n",
                      "enum" : [ "change_one", "change_later", "change_all" ]
                    },
                    "orig_subject" : {
                      "type" : "string",
                      "description" : "The pre-edit topic for all of the messages with IDs in\n`message_ids`.\n\nOnly present if this event moved messages to a different\ntopic.\n"
                    },
                    "subject" : {
                      "type" : "string",
                      "description" : "The post-edit topic for all of the messages with IDs in\n`message_ids`.\n\nOnly present if this event moved messages to a different\ntopic.\n"
                    },
                    "topic_links" : {
                      "type" : "array",
                      "description" : "Data on any links to be included in the `topic`\nline (these are generated by\n[custom linkification filter](/help/add-a-custom-linkifier)\nthat match content in the message's topic.), corresponding\nto the post-edit topic.\n\nOnly present if this event moved messages to a different\ntopic.\n\n**Changes**: This field contained a list of urls before\n  Zulip 4.0 (feature level 46).\n\nNew in Zulip 3.0 (feature level 1).  Previously, this field\nwas called `subject_links`; clients are recommended to\nrename `subject_links` to `topic_links` if present for\ncompatibility with older Zulip servers.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "text" : {
                            "type" : "string",
                            "description" : "The original link text present in the topic.\n"
                          },
                          "url" : {
                            "type" : "string",
                            "description" : "The expanded target url which the link points to.\n"
                          }
                        },
                        "additionalProperties" : false
                      }
                    },
                    "orig_content" : {
                      "type" : "string",
                      "description" : "The original content of the message with ID `message_id`\nimmediately prior to this edit, in the original markdown.\n"
                    },
                    "orig_rendered_content" : {
                      "type" : "string",
                      "description" : "The original content of the message with ID `message_id`\nimmediately prior to this edit, rendered as HTML.\n"
                    },
                    "prev_rendered_content_version" : {
                      "type" : "integer",
                      "description" : "The Markdown processor version number for the pre-edit message.\n\nClients should ignore this field.\n"
                    },
                    "content" : {
                      "type" : "string",
                      "description" : "The new content of the message with ID `message_id`, in the\noriginal Markdown.\n"
                    },
                    "rendered_content" : {
                      "type" : "string",
                      "description" : "The new content of the message with ID `message_id`,\nrendered in HTML.\n"
                    },
                    "is_me_message" : {
                      "type" : "boolean",
                      "description" : "Whether the message with ID `message_id` is now a\n[/me status message][status-messages].\n\n[status-messages]: /help/format-your-message-using-markdown#status-messages\n"
                    },
                    "flags" : {
                      "type" : "array",
                      "description" : "The user's personal [message flags][message-flags] for the\nmessage with ID `message_id` following the edit.\n\nA client application should compare these to the original flags\nto identify cases where a mention or alert word was added by the\nedit.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                      "items" : {
                        "type" : "string"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a message has been edited.\nSent to all users who had received the original\nmessage.\n",
                  "example" : {
                    "type" : "update_message",
                    "user_id" : 10,
                    "edit_timestamp" : 1594825451,
                    "message_id" : 58,
                    "stream_name" : "Verona",
                    "orig_content" : "hello",
                    "orig_rendered_content" : "<p>hello</p>",
                    "content" : "new content",
                    "rendered_content" : "<p>new content</p>",
                    "prev_rendered_content_version" : 1,
                    "is_me_message" : false,
                    "propagate_mode" : "change_all",
                    "stream_id" : 5,
                    "orig_subject" : "test",
                    "subject" : "new_topic",
                    "topic_links" : [ ],
                    "message_ids" : [ 58, 57 ],
                    "flags" : [ ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "typing" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "start" ]
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "Type of message being composed.  Must be \"stream\" or \"private\",\nas with sending a message.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\nall typing notifications were implicitly private `private`.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "sender" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user's ID.\n"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "The Zulip display email address for the user.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object describing the \"sender\" (i.e. the user who is typing a message).\n"
                    },
                    "recipients" : {
                      "type" : "array",
                      "description" : "Only present if `message_type` is `private`.\n\nArray of dictionaries describing the set of users who would be recipients\nof the message being typed.  Each dictionary contains details on one\none of the recipients users; the sending user is guaranteed to appear\namong the recipients.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The Zulip display email address for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and email of a recipient.\n"
                      }
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if `message_type` is `stream`.\n\nThe unique ID of the stream to which message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present if `message_type` is `stream`.\n\nTopic within the stream where the message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a user starts typing a message.\n\nSent to all clients for users who would receive the\nmessage being typed, with the additional rule that typing\nnotifications for stream messages are only sent to clients\nthat included `stream_typing_notifications` in their\n`client_capabilities` when registering the event queue.\n\n**Changes**: Typing notifications for stream messages are new in\nZulip 4.0 (feature level 58).\n\nSee the [typing endpoint docs](/api/set-typing-status) for more details.\n",
                  "example" : {
                    "type" : "typing",
                    "op" : "start",
                    "sender" : {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    },
                    "recipients" : [ {
                      "user_id" : 8,
                      "email" : "user8@zulip.testserver"
                    }, {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "typing" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "stop" ]
                    },
                    "message_type" : {
                      "type" : "string",
                      "description" : "Type of message being composed.  Must be \"stream\" or \"private\",\nas with sending a message.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\nall typing notifications were implicitly private `private`.\n",
                      "enum" : [ "private", "stream" ]
                    },
                    "sender" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user's ID.\n"
                        },
                        "email" : {
                          "type" : "string",
                          "description" : "The Zulip display email address for the user.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object describing the \"sender\" (i.e. the user who was previously\ntyping a message).\n"
                    },
                    "recipients" : {
                      "type" : "array",
                      "description" : "Only present for typing notifications for (group) private messages.\n\nArray of dictionaries describing the set of users who would be recipients\nof the message that stopped being typed.  Each dictionary contains\ndetails on one one of the recipients users; the sending user is\nguaranteed to appear among the recipients.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "user_id" : {
                            "type" : "integer",
                            "description" : "The ID of the user.\n"
                          },
                          "email" : {
                            "type" : "string",
                            "description" : "The Zulip display email address for the user.\n"
                          }
                        },
                        "additionalProperties" : false,
                        "description" : "Object containing the user id and email of a recipient.\n"
                      }
                    },
                    "stream_id" : {
                      "type" : "integer",
                      "description" : "Only present if `message_type` is `stream`.\n\nThe unique ID of the stream to which message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    },
                    "topic" : {
                      "type" : "string",
                      "description" : "Only present if `message_type` is `stream`.\n\nTopic within the stream where the message is being typed.\n\n**Changes**: New in Zulip 4.0 (feature level 58).  Previously,\ntyping notifications were only for private messages.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent when a user stops typing a message.\n\nSent to all clients for users who would receive the message\nthat was previously being typed, with the additional rule\nthat typing notifications for stream messages are only sent to\nclients that included `stream_typing_notifications` in their\n`client_capabilities` when registering the event queue.\n\n**Changes**: Typing notifications for stream messages are new in\nZulip 4.0 (feature level 58).\n\nSee the [typing endpoint docs](/api/set-typing-status) for more details.\n",
                  "example" : {
                    "type" : "typing",
                    "op" : "stop",
                    "sender" : {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    },
                    "recipients" : [ {
                      "user_id" : 8,
                      "email" : "user8@zulip.testserver"
                    }, {
                      "user_id" : 10,
                      "email" : "user10@zulip.testserver"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message_flags" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "operation" : {
                      "type" : "string",
                      "description" : "Old name for `op` for this event type.\n\n**Deprecated**: This is deprecated; please use `op` instead\nstarting with Zulip 4.0 (feature level 32).\n",
                      "deprecated" : true,
                      "enum" : [ "add" ]
                    },
                    "flag" : {
                      "type" : "string",
                      "description" : "The flag that was added.\n"
                    },
                    "messages" : {
                      "type" : "array",
                      "description" : "Array containing the ids of all messages to which\nthe flag was added.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "all" : {
                      "type" : "boolean",
                      "description" : "Whether the flag was added to all messages (E.g. all messages\nwere marked as read).\nIf this is true, then the `messages` array will be empty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user when [message flags][message-flags] are added\nto a message.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                  "example" : {
                    "type" : "update_message_flags",
                    "op" : "add",
                    "operation" : "add",
                    "flag" : "starred",
                    "messages" : [ 63 ],
                    "all" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "update_message_flags" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "operation" : {
                      "type" : "string",
                      "description" : "Old name for `op` for this event type.\n\n**Deprecated**: This is deprecated; please use `op` instead\nstarting with Zulip 4.0 (feature level 32).\n",
                      "deprecated" : true,
                      "enum" : [ "remove" ]
                    },
                    "flag" : {
                      "type" : "string",
                      "description" : "The flag to be removed.\n"
                    },
                    "messages" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the messages from which the flag\nwas removed.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    },
                    "all" : {
                      "type" : "boolean",
                      "description" : "Whether the flag was removed from all messages.\nIf this is true then the `messages` array will be empty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to a user when [message flags][message-flags] are\nremoved from a message.\n\n[message-flags]: /api/update-message-flags#available-flags\n",
                  "example" : {
                    "type" : "update_message_flags",
                    "op" : "remove",
                    "operation" : "remove",
                    "flag" : "starred",
                    "messages" : [ 63 ],
                    "all" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "group" : {
                      "$ref" : "#/components/schemas/UserGroup"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users in an organization when a [user group](/help/user-groups) is created.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "add",
                    "group" : {
                      "name" : "backend",
                      "members" : [ 12 ],
                      "description" : "Backend team",
                      "id" : 2
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group whose details have changed.\n"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "type" : "string",
                          "description" : "The new name of the user group. Only present if the group's name changed.\n"
                        },
                        "description" : {
                          "type" : "string",
                          "description" : "The new description of the group. Only present if the description\nchanged.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Dictionary containing the changed details of the user group.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization\nwhen a property of a user group is changed.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "update",
                    "group_id" : 2,
                    "data" : {
                      "description" : "Mention this group to get the security team's attention."
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add_members" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group with new members.\n"
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the users who have been added\nto the user group.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when users have been added to a user group.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "add_members",
                    "group_id" : 2,
                    "user_ids" : [ 10 ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove_members" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the user group whose details have changed.\n"
                    },
                    "user_ids" : {
                      "type" : "array",
                      "description" : "Array containing the IDs of the users who have been removed\nfrom the user group.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when users have been removed from\na user group.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "remove_members",
                    "group_id" : 2,
                    "user_ids" : [ 10 ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "user_group" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "group_id" : {
                      "type" : "integer",
                      "description" : "The ID of the group which has been deleted.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a user group has been deleted.\n",
                  "example" : {
                    "type" : "user_group",
                    "op" : "remove",
                    "group_id" : 2,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_linkifiers" ]
                      } ]
                    },
                    "realm_linkifiers" : {
                      "type" : "array",
                      "description" : "Array of dictionaries where each dictionary contains details about\na single realm linkifier.\n",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "pattern" : {
                            "type" : "string",
                            "description" : "The string regex pattern which represents the pattern that\nshould be linkified by this linkifier.\n"
                          },
                          "url_format" : {
                            "type" : "string",
                            "description" : "The URL format string to be used for linkifying matches.\n"
                          },
                          "id" : {
                            "type" : "integer",
                            "description" : "The ID of the linkifier.\n"
                          }
                        },
                        "additionalProperties" : false
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nset of configured [linkifiers](/help/add-a-custom-linkifier)\nfor the organization has changed.\n\nProcessing this event is important to doing Markdown local echo\ncorrectly.\n\n**Changes**: New in Zulip 4.0 (feature level 54), replacing the\nprevious `realm_filters` event type, which is still sent for\nbackwards compatibility reasons.\n\nClients should migrate to requesting and processing the\n`realm_linkifiers` event type when possible, since we plan to remove\nthe legacy `realm_filters` logic entirely in a future release.\n",
                  "example" : {
                    "type" : "realm_linkifiers",
                    "realm_linkifiers" : [ {
                      "pattern" : "#(?P<id>[123])",
                      "url_format" : "https://realm.com/my_realm_filter/%(id)s",
                      "id" : 1
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_filters" ]
                      } ]
                    },
                    "realm_filters" : {
                      "type" : "array",
                      "description" : "An array of tuples, where each tuple describes a linkifier.\nThe first element of the tuple is a\nstring regex pattern which represents the pattern that should\nbe linkified on matching. The second element is the URL with which the\npattern matching string should be linkified with and the third element\nis the ID of the realm filter.\n",
                      "items" : {
                        "type" : "array",
                        "items" : {
                          "oneOf" : [ {
                            "type" : "integer"
                          }, {
                            "type" : "string"
                          } ]
                        }
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Legacy event type. Sent to all users in a Zulip organization\nwhen the set of configured [linkifiers](/help/add-a-custom-linkifier)\nfor the organization has changed.\n\n**Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\nthe `realm_linkifiers` event type, which has a clearer name and format,\ninstead.\n",
                  "example" : {
                    "type" : "realm_filters",
                    "realm_filters" : [ [ "#(?P<id>[123])", "https://realm.com/my_realm_filter/%(id)s", 1 ] ],
                    "id" : 0
                  },
                  "deprecated" : true
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_playgrounds" ]
                      } ]
                    },
                    "realm_playgrounds" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndata about a single playground entry.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/RealmPlayground"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nset of configured [code playgrounds](/help/code-blocks#code-playgrounds)\nfor the organization has changed.\n\n**Changes**: New in Zulip 4.0 (feature level 49).\n",
                  "example" : {
                    "type" : "realm_playgrounds",
                    "realm_playgrounds" : [ {
                      "id" : 1,
                      "name" : "Python playground",
                      "pygments_language" : "Python",
                      "url_prefix" : "https://python.example.com"
                    } ],
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_emoji" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "realm_emoji" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "$ref" : "#/components/schemas/RealmEmoji"
                      },
                      "description" : "An object in which each key describes a realm emoji.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when\na [custom emoji](/help/add-custom-emoji) has been updated,\ntypically when a new emoji has been added or an old one\nhas been deactivated. The event contains all custom emoji\nconfigured for the organization, not just the updated\ncustom emoji.\n",
                  "example" : {
                    "type" : "realm_emoji",
                    "op" : "update",
                    "realm_emoji" : {
                      "2" : {
                        "id" : "2",
                        "name" : "my_emoji",
                        "source_url" : "/user_avatars/2/emoji/images/2.png",
                        "deactivated" : true,
                        "author_id" : 11
                      },
                      "1" : {
                        "id" : "1",
                        "name" : "green_tick",
                        "source_url" : "/user_avatars/2/emoji/images/1.png",
                        "deactivated" : false,
                        "author_id" : 11
                      }
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "realm_domain" : {
                      "$ref" : "#/components/schemas/RealmDomain"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "add",
                    "realm_domain" : {
                      "domain" : "zulip.org",
                      "allow_subdomains" : false
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "change" ]
                    },
                    "realm_domain" : {
                      "type" : "object",
                      "properties" : {
                        "domain" : {
                          "type" : "string",
                          "description" : "The domain whose settings have changed.\n"
                        },
                        "allow_subdomains" : {
                          "type" : "boolean",
                          "description" : "Whether subdomains are allowed for this domain.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details of the edited domain.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "change",
                    "realm_domain" : {
                      "domain" : "zulip.org",
                      "allow_subdomains" : true
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_domains" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "domain" : {
                      "type" : "string",
                      "description" : "The domain to be removed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the set of\n[allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)\nhas changed.\n",
                  "example" : {
                    "type" : "realm_domains",
                    "op" : "remove",
                    "domain" : "zulip.org",
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_export" ]
                      } ]
                    },
                    "exports" : {
                      "type" : "array",
                      "description" : "An array of dictionaries where each dictionary contains\ndata about a single organization export request.\n",
                      "items" : {
                        "$ref" : "#/components/schemas/RealmExport"
                      }
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to the user who requested a [data export](/help/export-your-organization)\nwhen the status of the export changes.\n",
                  "example" : {
                    "type" : "realm_export",
                    "exports" : [ {
                      "id" : 107,
                      "export_time" : 1.594825443656797E9,
                      "acting_user_id" : 10,
                      "export_url" : null,
                      "deleted_timestamp" : null,
                      "failed_timestamp" : 1.594825444436336E9,
                      "pending" : false
                    } ],
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "add" ]
                    },
                    "bot" : {
                      "$ref" : "#/components/schemas/Bot"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users who can administer a newly created bot\nuser.  Clients will also receive a `realm_user` event that\ncontains basic details (but not the API key).\n\nThe `realm_user` events are sufficient for clients that\nonly need to interact with the bot; this `realm_bot` event\ntype is relevant only for administering bots.\n\nOnly organization administrators and the user who owns the bot will\nreceive this event.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "add",
                    "bot" : {
                      "email" : "test-bot@zulip.testserver",
                      "user_id" : 36,
                      "full_name" : "Foo Bot",
                      "bot_type" : 1,
                      "is_active" : true,
                      "api_key" : "6hc6MC9mpNFvoo0gSOWnZEq4aJEn8UNK",
                      "default_sending_stream" : null,
                      "default_events_register_stream" : null,
                      "default_all_public_streams" : false,
                      "avatar_url" : "https://secure.gravatar.com/avatar/af8abc2537d283b212a6bd4d1289956d?d=identicon&version=1",
                      "services" : [ ],
                      "owner_id" : 10
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "bot" : {
                      "allOf" : [ {
                        "description" : "Object containing details about the changed bot.\nIt contains two properties: the user id of the bot and\nthe property to be changed. The changed property is one\nof the remaining properties listed below.\n"
                      }, {
                        "$ref" : "#/components/schemas/BasicBot"
                      } ]
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to users who can administer a bot user when the bot is\nconfigured.  Clients may also receive a `realm_user` event that\nfor changes in public data about the bot (name, etc.).\n\nThe `realm_user` events are sufficient for clients that\nonly need to interact with the bot; this `realm_bot` event\ntype is relevant only for administering bots.\n\nOnly organization administrators and the user who owns the bot will\nreceive this event.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "update",
                    "bot" : {
                      "user_id" : 37,
                      "services" : [ {
                        "base_url" : "http://hostname.domain2.com",
                        "interface" : 2,
                        "token" : "grr8I2APXRmVL0FRTMRYAE4DRPQ5Wlaw"
                      } ]
                    },
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "remove" ]
                    },
                    "bot" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user ID of the deactivated bot.\n"
                        },
                        "full_name" : {
                          "type" : "string",
                          "description" : "The full name of the deactivated bot.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details about the deactivated bot.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a bot has been deactivated.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "remove",
                    "bot" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm_bot" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "delete" ]
                    },
                    "bot" : {
                      "type" : "object",
                      "properties" : {
                        "user_id" : {
                          "type" : "integer",
                          "description" : "The user ID of the deactivated bot.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing details about the deactivated bot.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users when a bot has been deactivated.\nNote that this is very similar to the bot_remove event\nand one of them will be removed soon.\n",
                  "example" : {
                    "type" : "realm_bot",
                    "op" : "delete",
                    "bot" : {
                      "user_id" : 35,
                      "full_name" : "Foo Bot"
                    },
                    "id" : 1
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update" ]
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "The name of the property that was changed.\n"
                    },
                    "value" : {
                      "description" : "The new value of the property.\n",
                      "oneOf" : [ {
                        "type" : "string"
                      }, {
                        "type" : "boolean"
                      }, {
                        "type" : "integer"
                      } ]
                    },
                    "extra_data" : {
                      "type" : "object",
                      "properties" : {
                        "upload_quota" : {
                          "type" : "integer",
                          "description" : "Note: Only present if changed property is `plan_type`.\n\nThe new upload quota for the Zulip organization.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "Object containing extra data related to the changed\nproperty.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nconfiguration of the organization (realm) has changed.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "update",
                    "property" : "disallow_disposable_email_addresses",
                    "value" : false,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "deactivated" ]
                    },
                    "realm_id" : {
                      "type" : "integer",
                      "description" : "The ID of the deactivated realm.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\norganization (realm) is deactivated.  Its main purpose is to\nflush active longpolling connections so clients can immediately\nshow the organization as deactivated.\n\nClients cannot rely on receiving this event, because they will\nno longer be able to authenticate to the Zulip API due to the\ndeactivation, and thus can miss it if they did not have an active\nlongpolling connection at the moment of deactivation.\n\nCorrect handling of realm deactivations requires that clients\nparse authentication errors from GET /events; if that is done\ncorrectly, the client can ignore this event type and rely on its\nhandling of the `GET /events` request it will do immediately\nafter processing this batch of events.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "deactivated",
                    "realm_id" : 2,
                    "id" : 0
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "restart" ]
                      } ]
                    },
                    "zulip_version" : {
                      "type" : "string",
                      "description" : "The Zulip version number, in the format where this appears\nin the [server_settings](/api/get-server-settings) and\n[register](/api/register-queue) responses.\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n"
                    },
                    "zulip_feature_level" : {
                      "type" : "integer",
                      "description" : "The [Zulip feature level](/api/changelog) of the server\nafter the restart.\n\nClients can safely avoid refetching their state and\ncreating a new event queue when the API feature level has not\nchanged, or when they know the specific feature level change\nis not relevant to the client (E.g. it just adds a new endpoint\nthat the client doesn't use).\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n"
                    },
                    "immediate" : {
                      "type" : "boolean",
                      "description" : "Whether the client should fetch a new event queue immediately,\nrather than using a backoff strategy to avoid thundering herds.\nA Zulip development server uses this parameter to reload\nclients immediately.\n"
                    },
                    "server_generation" : {
                      "type" : "integer",
                      "description" : "The timestamp at which the server started.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all the users whenever the Zulip server restarts.\n\nSpecifically, this event is sent whenever the Tornado process\nfor the user is restarted; in particular, this will always happen\nwhen the Zulip server is upgraded.\n\nClients can use this event to know when they should get a new\nevent queue after a server upgrade.  Clients doing so must implement\na random delay strategy to spread such restarts over 10 minutes or\nmore to avoid creating a synchronized thundering herd effect.\n",
                  "example" : {
                    "id" : 0,
                    "immediate" : true,
                    "server_generation" : 1619334181,
                    "type" : "restart",
                    "zulip_feature_level" : 57,
                    "zulip_version" : "4.0-dev+git"
                  }
                }, {
                  "type" : "object",
                  "properties" : {
                    "id" : {
                      "$ref" : "#/components/schemas/EventIdSchema"
                    },
                    "type" : {
                      "allOf" : [ {
                        "$ref" : "#/components/schemas/EventTypeSchema"
                      }, {
                        "type" : "string",
                        "enum" : [ "realm" ]
                      } ]
                    },
                    "op" : {
                      "type" : "string",
                      "enum" : [ "update_dict" ]
                    },
                    "property" : {
                      "type" : "string",
                      "description" : "Always `\"default\"`.  Present for backwards-compatibility with older\nclients that predate the `update_dict` event style.\n"
                    },
                    "data" : {
                      "type" : "object",
                      "properties" : {
                        "add_emoji_by_admins_only" : {
                          "type" : "boolean",
                          "description" : "Whether the organization is configured to only allow administrators\nto upload new custom emoji.\n"
                        },
                        "allow_edit_history" : {
                          "type" : "boolean",
                          "description" : "Whether this organization is configured to allow users to access\n[message edit history](/help/view-a-messages-edit-history).\n"
                        },
                        "bot_creation_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can create bot users in this organization.\n"
                        },
                        "create_stream_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can create streams in this organization.\n"
                        },
                        "invite_to_stream_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can add other users to streams in this\norganization.\n"
                        },
                        "move_messages_between_streams_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can move messages from one stream to another.\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 56)\n"
                        },
                        "wildcard_mention_policy" : {
                          "type" : "integer",
                          "description" : "The policy for who can use wildcard mentions in large streams.\n\n* 1 => Any user can use wildcard mentions in large streams.\n* 2 => Only members can use wildcard mentions in large streams.\n* 3 => Only full members can use wildcard mentions in large streams.\n* 4 => Only stream and organization administrators can use wildcard mentions in large streams.\n* 5 => Only organization administrators can use wildcard mentions in large streams.\n* 6 => Nobody can use wildcard mentions in large streams.\n* 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.\n\nAll users will receive a warning/reminder when using\nmentions in large streams, even when permitted to do so.\n\n**Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\nZulip 4.0 (feature level 62).\n"
                        },
                        "description" : {
                          "type" : "string",
                          "description" : "The description of the organization, used on login and registration pages.\n"
                        },
                        "realm_giphy_rating" : {
                          "type" : "integer",
                          "description" : "Maximum rating of the GIFs that will be retrieved from GIPHY.\n\n**Changes**: New in Zulip 4.0 (feature level 55).\n"
                        },
                        "digest_emails_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization has enabled [weekly digest emails](/help/digest-emails).\n"
                        },
                        "disallow_disposable_email_addresses" : {
                          "type" : "boolean",
                          "description" : "Whether the organization disallows disposable email\naddresses.\n"
                        },
                        "email_address_visibility" : {
                          "type" : "integer",
                          "description" : "The policy for which users in this organization can see the\nreal email addresses of other users.\n\n* 1 = everyone\n* 2 = members only\n* 3 = administrators only\n* 4 = nobody (though note that administrators can change this setting).\n* 5 = moderators only\n"
                        },
                        "email_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether users are allowed to change their own email address in this\norganization.  This is typically disabled for organizations that\nsynchronize accounts from LDAP or a similar corporate database.\n"
                        },
                        "invite_required" : {
                          "type" : "boolean",
                          "description" : "Whether an invitation is required to join this organization.\n"
                        },
                        "invite_to_realm_policy" : {
                          "type" : "integer",
                          "description" : "Policy for [who can invite new users](/help/invite-new-users#change-who-can-send-invitations)\nto join the organization:\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 50) replacing the\nprevious `invite_by_admins_only` boolean.\n"
                        },
                        "inline_image_preview" : {
                          "type" : "boolean",
                          "description" : "Whether this organization has been configured to enable\n[previews of linked images](/help/allow-image-link-previews).\n"
                        },
                        "inline_url_embed_preview" : {
                          "type" : "boolean",
                          "description" : "Whether this organization has been configured to enable\n[previews of linked websites](/help/allow-image-link-previews).\n"
                        },
                        "mandatory_topics" : {
                          "type" : "boolean",
                          "description" : "Whether [topics are required](/help/require-topics) for messages in this organization.\n"
                        },
                        "message_retention_days" : {
                          "type" : "integer",
                          "description" : "The default [message retention policy](/help/message-retention-policy)\nfor this organization.  Pass `\"forever\"` to request that messages\nby retained forever (the default).\n"
                        },
                        "realm_name" : {
                          "type" : "string",
                          "description" : "The name of the organization, used in login pages etc.\n"
                        },
                        "name_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Indicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their name\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
                        },
                        "avatar_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Indicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their avatar\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
                        },
                        "emails_restricted_to_domains" : {
                          "type" : "boolean",
                          "description" : "Whether [new users joining](/help/allow-anyone-to-join-without-an-invitation)\nthis organization are required to have an email\naddress in one of the `realm_domains` configured for the organization.\n"
                        },
                        "send_welcome_emails" : {
                          "type" : "boolean",
                          "description" : "Whether or not this organization is configured to send the standard Zulip\n[welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n"
                        },
                        "message_content_allowed_in_email_notifications" : {
                          "type" : "boolean",
                          "description" : "Whether notification emails in this organization are allowed to\ncontain Zulip the message content, or simply indicate that a new\nmessage was sent.\n"
                        },
                        "video_chat_provider" : {
                          "type" : "integer",
                          "description" : "The configured video call provider for the organization.\n"
                        },
                        "waiting_period_threshold" : {
                          "type" : "integer",
                          "description" : "Members whose accounts have been created at least this many days ago\nwill be treated as [full members](/help/restrict-permissions-of-new-members)\nfor the purpose of settings that restrict access to new members.\n"
                        },
                        "digest_weekday" : {
                          "type" : "integer",
                          "description" : "The day of the week when the organization will send\nits weekly digest email to inactive users.\n"
                        },
                        "private_message_policy" : {
                          "type" : "integer",
                          "description" : "Policy for [who can send private messages](/help/restrict-private-messages)\nin this organization.\n\n* 1 = Everyone\n* 2 = Nobody\n"
                        },
                        "user_group_edit_policy" : {
                          "type" : "integer",
                          "description" : "The organization's policy for [who can manage user groups\n](/help/restrict-user-group-management).\n\n* 1 = All members can create and edit user groups\n* 2 = Only organization administrators can create and edit user groups\n"
                        },
                        "default_code_block_language" : {
                          "type" : "string",
                          "description" : "The default pygments language code to be used for a code blocks\nin this organization.  Null if no default has been set.\n",
                          "nullable" : true
                        },
                        "message_content_delete_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot be deleted\nwith this organization's\n[message deletion policy](/help/configure-message-editing-and-deletion).\n"
                        },
                        "authentication_methods" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "boolean",
                            "description" : "Boolean describing whether the authentication method (i.e its key)\nis enabled in this organization.\n"
                          },
                          "description" : "Dictionary of 'authentication_method_name': 'boolean' with each\nentry describing whether the authentication name can be used for\nauthenticating into the organization.\n"
                        },
                        "allow_message_editing" : {
                          "type" : "boolean",
                          "description" : "Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\nallows editing the content of messages.\n"
                        },
                        "edit_topic_policy" : {
                          "type" : "integer",
                          "description" : "The policy for which users can edit topics of any message.\n\n* 1 = members only\n* 2 = admins only\n* 3 = full members only\n* 4 = moderators only\n* 5 = everyone\n\n**Changes**: New in Zulip 5.0 (feature level 75), replacing the\nprevious `allow_community_topic_editing` boolean.\n"
                        },
                        "message_content_edit_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot be edited\nwith this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n"
                        },
                        "community_topic_editing_limit_seconds" : {
                          "type" : "integer",
                          "description" : "Messages sent more than this many seconds ago cannot have\ntheir topics edited by other users with this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n\n**Changes**: New in Zulip 3.0 (feature level 11).  Previously this\nvalue was hardcoded to 86400 seconds (1 day).\n"
                        },
                        "icon_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's [profile icon](/help/create-your-organization-profile).\n"
                        },
                        "icon_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's\n[profile icon](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the organization's icon.\n\n* \"G\" means generated by Gravatar (the default).\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "icon_file_size" : {
                          "type" : "integer",
                          "description" : "The maximum file size allowed for the organization's\nicon.  Useful for UI allowing editing the organization's icon.\n"
                        },
                        "logo_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's wide logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
                        },
                        "logo_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "night_logo_url" : {
                          "type" : "string",
                          "description" : "The URL of the organization's night theme wide-format logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
                        },
                        "night_logo_source" : {
                          "type" : "string",
                          "description" : "String indicating whether the organization's night theme\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
                        },
                        "bot_domain" : {
                          "type" : "string",
                          "description" : "The fake email domain that will be used for new bots created this\norganization.  Useful for UI for creating bots.\n"
                        },
                        "realm_uri" : {
                          "type" : "string",
                          "description" : "The URL for the organization.\n"
                        },
                        "available_video_chat_providers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "type" : "string",
                                "description" : "The name of the video call provider.\n"
                              },
                              "id" : {
                                "type" : "integer",
                                "description" : "The ID of the video call provider.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "`{provider_name}`: Dictionary containing the details of the\nvideo call provider with the name of the chat provider as\nthe key.\n"
                          },
                          "description" : "Dictionary where each entry describes a supported\n[video call provider](/help/start-a-call)\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nvideo call provider.\n"
                        },
                        "presence_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether online presence of other users is shown in this\norganization.\n"
                        },
                        "settings_send_digest_emails" : {
                          "type" : "boolean",
                          "description" : "Whether this Zulip server is configured to allow organizations to\nenable [digest emails](/help/digest-emails).\n\nRelevant for administrative settings UI that can change the digest\nemail settings.\n"
                        },
                        "is_zephyr_mirror_realm" : {
                          "type" : "boolean",
                          "description" : "Whether the organization is a Zephyr mirror realm.\n"
                        },
                        "email_auth_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization has enabled Zulip's default email and password\nauthentication feature.  Determines whether Zulip stores a password\nfor the user and clients should offer any UI for changing the user's\nZulip password.\n"
                        },
                        "password_auth_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether the organization allows any sort of password-based\nauthentication (whether via EmailAuthBackend or LDAP passwords).\n\nDetermines whether a client might ever need to display a password prompt\n(clients will primarily look at this attribute in [server_settings](/api/get-server-settings)\nbefore presenting a login page).\n"
                        },
                        "push_notifications_enabled" : {
                          "type" : "boolean",
                          "description" : "Whether push notifications are enabled for this organization.  Typically\n`false` for self-hosted servers that have not configured the\n[Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).\n"
                        },
                        "upload_quota" : {
                          "type" : "integer",
                          "description" : "The total quota for uploaded files in this organization.\n\nClients are not responsible for checking this quota; it is included\nin the API only for display purposes.\n\nNull if there is no limit.\n",
                          "nullable" : true
                        },
                        "plan_type" : {
                          "type" : "integer",
                          "description" : "The plan type of the organization.\n\n* 1 = Self-hosted organization (SELF_HOSTED)\n* 2 = Zulip Cloud free plan (LIMITED)\n* 3 = Zulip Cloud Standard plan (STANDARD)\n* 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n"
                        },
                        "zulip_plan_is_not_limited" : {
                          "type" : "boolean",
                          "description" : "Whether the organization is using a limited (Zulip Cloud Free) plan.\n"
                        },
                        "upgrade_text_for_wide_organization_logo" : {
                          "type" : "string",
                          "description" : "Text to use when displaying UI for wide organization logos, a feature\nthat is currently not available on the Zulip Cloud Free plan.\n\nUseful only for clients supporting administrative UI for uploading\na new wide organization logo to brand the organization.\n"
                        },
                        "default_external_accounts" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "type" : "string",
                                "description" : "The name of the external account provider\n"
                              },
                              "text" : {
                                "type" : "string",
                                "description" : "The text describing the external account.\n"
                              },
                              "hint" : {
                                "type" : "string",
                                "description" : "The help text to be displayed for the\ncustom profile field in user-facing\nsettings UI for configuring custom\nprofile fields for this account.\n"
                              },
                              "url_pattern" : {
                                "type" : "string",
                                "description" : "The regex pattern of the URL of a profile page\non the external site.\n"
                              }
                            },
                            "additionalProperties" : false,
                            "description" : "`{site_name}`: Dictionary containing the details of the\ndefault external account provider with the name of the\nwebsite as the key.\n"
                          },
                          "description" : "Dictionary where each entry describes a default external\naccount type that can be configured with Zulip's custom\nprofile fields feature.\n"
                        },
                        "jitsi_server_url" : {
                          "type" : "string",
                          "description" : "The base URL the organization uses to create Jitsi video calls.\n"
                        },
                        "development_environment" : {
                          "type" : "boolean",
                          "description" : "Whether this Zulip server is a development environment.  Used\nto control certain features or UI (such as error popups)\nthat should only apply when connected to a Zulip development\nenvironment.\n"
                        },
                        "server_generation" : {
                          "type" : "integer",
                          "description" : "A timestamp indicating when the process hosting this\nevent queue was started.  Clients will likely only find\nthis value useful for inclusion in detailed error reports.\n"
                        },
                        "password_min_length" : {
                          "type" : "integer",
                          "description" : "This Zulip server's configured minimum required length for passwords.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
                        },
                        "password_min_guesses" : {
                          "type" : "integer",
                          "description" : "This Zulip server's configured minimum `zxcvbn` minimum guesses.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
                        },
                        "max_file_upload_size_mib" : {
                          "type" : "integer",
                          "description" : "The maximum file size that can be uploaded to this Zulip server.\n"
                        },
                        "max_avatar_file_size_mib" : {
                          "type" : "integer",
                          "description" : "The maximum avatar size that can be uploaded to this Zulip server.\n"
                        },
                        "server_inline_image_preview" : {
                          "type" : "boolean",
                          "description" : "Whether the server is configured with support for inline image previews.\nClients containing administrative UI for changing\n`realm_inline_image_preview` should consult this field before offering\nthat feature.\n"
                        },
                        "server_inline_url_embed_preview" : {
                          "type" : "boolean",
                          "description" : "Whether the server is configured with support for inline URL previews.\nClients containing administrative UI for changing\n`realm_inline_url_embed_preview` should consult this field before offering\nthat feature.\n"
                        },
                        "server_avatar_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether the server allows avatar changes.  Similar to\n`realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`\nZulip server level setting.\n"
                        },
                        "server_name_changes_disabled" : {
                          "type" : "boolean",
                          "description" : "Whether the server allows name changes.  Similar to\n`realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`\nZulip server level setting.\n"
                        },
                        "notifications_stream_id" : {
                          "type" : "integer",
                          "description" : "The ID of the stream to which notifications announcing the\ncreation of new streams are sent. -1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
                        },
                        "signup_notifications_stream_id" : {
                          "type" : "integer",
                          "description" : "The ID of the stream to which notifications announcing\nthat new users have joined the organization are sent.\n-1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
                        }
                      },
                      "additionalProperties" : false,
                      "description" : "An object containing the properties that have changed.\n"
                    }
                  },
                  "additionalProperties" : false,
                  "description" : "Event sent to all users in a Zulip organization when the\nconfiguration of the organization (realm) has changed.\n\nUnlike realm / update, supports multiple properties being changed\nin a single event.\n",
                  "example" : {
                    "type" : "realm",
                    "op" : "update_dict",
                    "property" : "default",
                    "data" : {
                      "allow_message_editing" : false,
                      "message_content_edit_limit_seconds" : 0,
                      "edit_topic_policy" : 2
                    },
                    "id" : 0
                  }
                } ]
              }
            },
            "queue_id" : {
              "type" : "string",
              "description" : "The ID of the registered queue.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "queue_id" : "1375801870:2942",
            "events" : [ {
              "id" : 0,
              "message" : {
                "avatar_url" : "https://url/for/othello-bots/avatar",
                "client" : "website",
                "content" : "I come not, friends, to steal away your hearts.",
                "content_type" : "text/x-markdown",
                "display_recipient" : "Denmark",
                "id" : 12345678,
                "recipient_id" : 12314,
                "sender_email" : "othello-bot@example.com",
                "sender_full_name" : "Othello Bot",
                "sender_id" : 13215,
                "sender_realm_str" : "example",
                "topic_links" : [ ],
                "timestamp" : 1375978403,
                "type" : "stream"
              },
              "type" : "message"
            }, {
              "id" : 1,
              "message" : {
                "avatar_url" : "https://url/for/othello-bots/avatar",
                "client" : "website",
                "content" : "With mirth and laughter let old wrinkles come.",
                "content_type" : "text/x-markdown",
                "display_recipient" : [ {
                  "email" : "hamlet@example.com",
                  "full_name" : "Hamlet of Denmark",
                  "id" : 31572
                } ],
                "id" : 12345679,
                "recipient_id" : 18391,
                "sender_email" : "othello-bot@example.com",
                "sender_full_name" : "Othello Bot",
                "sender_id" : 13215,
                "sender_realm_str" : "example",
                "subject" : "",
                "topic_links" : [ ],
                "timestamp" : 1375978404,
                "type" : "private"
              },
              "type" : "message"
            } ],
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/BadEventQueueIdError"
        }, {
          "description" : "#### BAD_EVENT_QUEUE_ID errors\n\nThis error occurs if the target event queue has been garbage collected.\nA compliant client will handle this error by re-initializing itself\n(e.g. a Zulip web app browser window will reload in this case).\n\nSee [the /register endpoint docs](/api/register-queue) for details on how to\nhandle these correctly.\n\nThe following is the error response in such case\n"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/real-time',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'realTimePost',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/register',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'registerQueue',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "queue_id" : {
              "type" : "string",
              "description" : "The ID of the queue that has been allocated for your client.\n"
            },
            "last_event_id" : {
              "type" : "integer",
              "description" : "The initial value of `last_event_id` to pass to `GET /api/v1/events`.\n"
            },
            "zulip_feature_level" : {
              "type" : "integer",
              "description" : "The server's current [Zulip feature level](/api/changelog).\n"
            },
            "zulip_version" : {
              "type" : "string",
              "description" : "The server's version.\n"
            },
            "alert_words" : {
              "type" : "array",
              "description" : "Present if `alert_words` is present in `fetch_event_types`.\n\nAn array of strings, each an [alert word](/help/add-an-alert-word)\nthat the current user has configured.\n",
              "items" : {
                "type" : "string"
              }
            },
            "custom_profile_fields" : {
              "type" : "array",
              "description" : "Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n An array of dictionaries where each dictionary contains the\n details of a single custom profile field that is available to users\n in this Zulip organization.  This must be combined with the custom profile\n field values on individual user objects to display users' full profiles.\n",
              "items" : {
                "$ref" : "#/components/schemas/CustomProfileField"
              }
            },
            "custom_profile_field_types" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer",
                    "description" : "The id of the custom profile field type.\n"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the custom profile field type.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{FIELD_TYPE}`: Dictionary which contains the details\nof the field type with the field type as the name of the\nproperty itself. The current supported field types are as follows:\n* `SHORT_TEXT`\n* `LONG_TEXT`\n* `DATE` for date-based fields.\n* `CHOICE` for a list of options.\n* `URL` for links.\n* `EXTERNAL_ACCOUNT` for external accounts.\n* `USER` for selecting a user for the field.\n"
              },
              "description" : "Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n An array of objects; each object describes a type of custom profile field\n that could be configured on this Zulip server.  Each custom profile type\n has a id and the `type` property of a custom profile field is equal\n to one of these ids.\n\n This attribute is only useful for clients containing UI for changing\n the set of configured custom profile fields in a Zulip organization.\n"
            },
            "hotspots" : {
              "type" : "array",
              "description" : "Present if `hotspots` is present in `fetch_event_types`.\n\n An array of dictionaries, where each dictionary contains details about\n a single onboarding hotspot that should be shown to new users.\n\n We expect that only official Zulip clients will interact with these data.\n",
              "items" : {
                "$ref" : "#/components/schemas/Hotspot"
              }
            },
            "max_message_id" : {
              "type" : "integer",
              "description" : "Present if `message` is present in `fetch_event_types`.\n\nThe highest message ID among all messages the user has received as of the\nmoment of this request.\n\n**Deprecated**: This field may be removed in future versions as it no\nlonger has a clear purpose.  Clients wishing to fetch the latest messages\nshould pass `anchor=\"latest\"` to `GET /messages`.\n",
              "deprecated" : true
            },
            "max_stream_name_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a stream name.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis required `stream` in `fetch_event_types`, was called\n`stream_name_max_length`, and always had value 60.\n"
            },
            "max_stream_description_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a stream description.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis required `stream` in `fetch_event_types`, was called\n`stream_description_max_length`, and always had value 1024.\n"
            },
            "max_topic_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a topic.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis always had value 60.\n"
            },
            "max_message_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum allowed length for a message.  Clients should use\nthese properties rather than hardcoding field sizes, as they may\nchange in a future Zulip release.\n\n**Changes**: New in Zulip 4.0 (feature level 53).  Previously,\nthis always had value 10000.\n"
            },
            "muted_topics" : {
              "type" : "array",
              "description" : "Present if `muted_topics` is present in `fetch_event_types`.\n\nArray of tuples, where each tuple describes a muted topic.\nThe first element of tuple is the stream name in which the topic\nhas to be muted, the second element is the topic name to be muted\nand the third element is an integer UNIX timestamp representing\nwhen the topic was muted.\n",
              "items" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "type" : "string"
                  }, {
                    "type" : "integer"
                  } ]
                }
              }
            },
            "muted_users" : {
              "type" : "array",
              "description" : "Present if `muted_users` is present in `fetch_event_types`.\n\nA list of dictionaries where each dictionary describes\na [muted user](/api/mute-user).\n\n**Changes**: New in Zulip 4.0 (feature level 48).\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the muted user.\n"
                  },
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "An integer UNIX timestamp representing when the user was muted.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing the user id and timestamp of a muted user.\n"
              }
            },
            "presences" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/Presence"
                },
                "description" : "`{user_id} or {user_email}`: Depending on the value of `slim_presence`.\nEach entry contains the details of the presence of the user with the specific\nid or email.\n"
              },
              "description" : "Present if `presence` is present in `fetch_event_types`.\n\nA dictionary where each entry describes the presence details for another\nuser in the Zulip organization.\n\nUsers who have been offline for multiple weeks may not appear in this object.\n"
            },
            "server_timestamp" : {
              "type" : "number",
              "description" : "Present if `presence` is present in `fetch_event_types`.\n\nThe time when the server fetched the\n`presences` data included in the response.\nMatches the similar field in presence\nresponses.\n\n**Changes**: New in Zulip 5.0 (feature level 70).\n"
            },
            "realm_domains" : {
              "type" : "array",
              "description" : "Present if `realm_domains` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a domain within\nwhich users can join the organization without and invitation.\n",
              "items" : {
                "$ref" : "#/components/schemas/RealmDomain"
              }
            },
            "realm_emoji" : {
              "description" : "Present if `realm_emoji` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a custom\nemoji that has been uploaded in this Zulip organization.\n",
              "oneOf" : [ {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/RealmEmoji"
                }
              }, {
                "type" : "array",
                "items" : {
                  "type" : "integer"
                }
              } ]
            },
            "realm_linkifiers" : {
              "type" : "array",
              "description" : "Present if `realm_linkifiers` is present in `fetch_event_types`.\n\nArray of objects where each object describes a single\n[linkifier](/help/add-a-custom-linkifier).\n\n**Changes**: New in Zulip 4.0 (feature level 54). Clients can\naccess these data on older server versions via the previous\n`realm_filters` key.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "pattern" : {
                    "type" : "string",
                    "description" : "The string regex pattern which represents the pattern that\nshould be linkified on matching.\n"
                  },
                  "url_format" : {
                    "type" : "string",
                    "description" : "The URL with which the pattern matching string should be linkified.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the linkifier.\n"
                  }
                },
                "additionalProperties" : false
              }
            },
            "realm_filters" : {
              "type" : "array",
              "description" : "Legacy property for linkifiers. Present if `realm_filters` is\npresent in `fetch_event_types`.\n\nAn array of tuples (fixed-length arrays) where each tuple describes\na single [linkifier](/help/add-a-custom-linkifier).\nThe first element of the tuple is a string regex pattern which represents\nthe pattern that should be linkified on matching.\n\nThe second element is the URL with which the\npattern matching string should be linkified with and the third element\nis the id of the realm filter.\n\n**Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\nthe `realm_linkifiers` key instead.\n",
              "deprecated" : true,
              "items" : {
                "type" : "array",
                "items" : {
                  "oneOf" : [ {
                    "type" : "integer"
                  }, {
                    "type" : "string"
                  } ]
                }
              }
            },
            "realm_playgrounds" : {
              "type" : "array",
              "description" : "Present if `realm_playgrounds` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a\n[code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.\n\n**Changes**: New in Zulip 4.0 (feature level 49).\n",
              "items" : {
                "$ref" : "#/components/schemas/RealmPlayground"
              }
            },
            "realm_user_groups" : {
              "type" : "array",
              "description" : "Present if `realm_user_groups` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a\n[user group](/help/user-groups) in the Zulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/UserGroup"
              }
            },
            "realm_bots" : {
              "type" : "array",
              "description" : "Present if `realm_bot` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes a bot that the\ncurrent user can administer.  If the current user is an organization\nadministrator, this will include all bots in the organization.  Otherwise,\nit will only include bots owned by the user (either because the user created\nthe bot or an administrator transferred the bot's ownership to the user).\n",
              "items" : {
                "$ref" : "#/components/schemas/Bot"
              }
            },
            "realm_embedded_bots" : {
              "type" : "array",
              "description" : "Present if `realm_embedded_bots` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes an type of embedded\nbot that is available to be configured on this Zulip server.\n\nClients only need these data if they contain UI for creating or administering bots.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the bot.\n"
                  },
                  "config" : {
                    "$ref" : "#/components/schemas/Config"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing details of an embedded bot.  Embedded bots are an experimental\nfeature not enabled in production yet.\n"
              }
            },
            "realm_incoming_webhook_bots" : {
              "type" : "array",
              "description" : "Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary describes an type of incoming webhook\nintegration that is available to be configured on this Zulip server.\n\nClients only need these data if they contain UI for creating or administering bots.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the bot.\n"
                  },
                  "config" : {
                    "$ref" : "#/components/schemas/Config"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object containing details of the bot.\n"
              }
            },
            "recent_private_conversations" : {
              "type" : "array",
              "description" : "Present if `recent_private_conversations` is present in `fetch_event_types`.\n\nAn array of dictionaries containing data on all private message and group private message\nconversations that the user has received (or sent) messages in, organized by\nconversation.  This data set is designed to support UI elements such as the\n\"Private messages\" widget in the web application showing recent private message\nconversations that the user has participated in.\n\n\"Recent\" is defined as the server's discretion; the original implementation\ninterpreted that as \"the 1000 most recent private messages the user received\".\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "max_message_id" : {
                    "type" : "integer",
                    "description" : "The highest message id of the conversation, intended to support sorting\nthe conversations by recency.\n"
                  },
                  "user_ids" : {
                    "type" : "array",
                    "description" : "The list of users other than the current user in the private message\nconversation.  This will be an empty list for private messages sent to\noneself.\n",
                    "items" : {
                      "type" : "integer"
                    }
                  }
                },
                "additionalProperties" : false,
                "description" : "Object describing a single recent private conversation in the user's history.\n"
              }
            },
            "subscriptions" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes the properties\nof a stream the user is subscribed to (as well as that user's\npersonal per-stream settings).\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            },
            "unsubscribed" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes one of the\nstreams the user has unsubscribed from but was previously subscribed to\nalong with the subscription details.\n\nUnlike `never_subscribed`, the user might have messages in their personal\nmessage history that were sent to these streams.\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            },
            "never_subscribed" : {
              "type" : "array",
              "description" : "Present if `subscription` is present in `fetch_event_types`.\n\nA array of dictionaries where each dictionary describes one of the\nstreams that is visible to the user and the user has never been subscribed\nto.\n\nImportant for clients containing UI where one can browse streams to subscribe\nto.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/BasicStreamBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "stream_id" : { },
                    "name" : { },
                    "description" : { },
                    "date_created" : { },
                    "invite_only" : { },
                    "rendered_description" : { },
                    "is_web_public" : { },
                    "stream_post_policy" : { },
                    "message_retention_days" : { },
                    "history_public_to_subscribers" : { },
                    "first_message_id" : { },
                    "is_announcement_only" : { },
                    "stream_weekly_traffic" : {
                      "type" : "integer",
                      "description" : "The average number of messages sent to the stream in recent weeks,\nrounded to the nearest integer.\n\nNull means the stream was recently created and there is\ninsufficient data to estimate the average traffic.\n",
                      "nullable" : true
                    },
                    "subscribers" : {
                      "type" : "array",
                      "description" : "A list of user IDs of users who are subscribed\nto the stream. Included only if `include_subscribers` is `true`.\n\nIf a user is not allowed to know the subscribers for\na stream, we will send an empty array.  API authors\nshould use other data to determine whether users like\nguest users are forbidden to know the subscribers.\n",
                      "items" : {
                        "type" : "integer"
                      }
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            },
            "unread_msgs" : {
              "type" : "array",
              "properties" : {
                "count" : {
                  "type" : "integer",
                  "description" : "The total number of unread messages to display; this includes private\nand group private messages, as well as all messages to unmuted topics\non unmuted streams.\n"
                },
                "pms" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each entry contains details\nof unread private messages with a specific user.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "sender_id" : {
                        "type" : "integer",
                        "description" : "The user id of the other participant in a PM conversation.\n"
                      },
                      "message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread PM messages sent by the other user.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "Object containing the details of a unread private\nmessage with a specific user.\n"
                  }
                },
                "streams" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each dictionary contains\ndetails of all unread messages of a single subscribed stream,\nincluding muted streams.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "sender_ids" : {
                        "type" : "array",
                        "description" : "Array containing the id of the users who have sent recent messages\non this stream under the given topic which have been unread by the user.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      },
                      "topic" : {
                        "type" : "string",
                        "description" : "The topic under which the message was sent.\n"
                      },
                      "stream_id" : {
                        "type" : "integer",
                        "description" : "The id of the stream to which the message was sent.\n"
                      },
                      "unread_message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread messages sent in this stream.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "`{message_id}`: Object containing the details of a unread stream\nmessage with the message_id as the key.\n"
                  }
                },
                "huddles" : {
                  "type" : "array",
                  "description" : "An array of dictionaries where each dictionary contains\ndetails of all unread group private messages of a single\ngroup.\n",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "user_ids_string" : {
                        "type" : "string",
                        "description" : "A string containing the ids of all users in the huddle(group PMs)\nseparated by commas(,). Example: \"1,2,3\".\n"
                      },
                      "message_ids" : {
                        "type" : "array",
                        "description" : "The message ids of the recent unread messages which have been sent in\nthis group.\n",
                        "items" : {
                          "type" : "integer"
                        }
                      }
                    },
                    "additionalProperties" : false,
                    "description" : "Object containing the details of a unread group PM\nmessages of a single group.\n"
                  }
                },
                "mentions" : {
                  "type" : "array",
                  "description" : "Array containing the ids of all messages in which the user has been mentioned.\nFor muted streams, wildcard mentions will not be considered for this array.\n",
                  "items" : {
                    "type" : "integer"
                  }
                },
                "old_unreads_missing" : {
                  "type" : "boolean",
                  "description" : "True if this data set was truncated because the user has too many\nunread messages.  When truncation occurs, only the most recent\n`MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered\nwhen forming this response.  When true, we recommend that clients\ndisplay a warning, as they are likely to produce erroneous results\nuntil reloaded with the user having fewer than `MAX_UNREAD_MESSAGES`\nunread messages.\n\n**Changes**: New in Zulip 4.0 (feature level 44).\n"
                }
              },
              "additionalProperties" : false,
              "description" : "Present if `message` and `update_message_flags` are both present in\n`event_types`.\n\nA set of data structures describing the conversations containing\nthe 50000 most recent unread messages the user has received.  This will usually\ncontain every unread message the user has received, but clients should support\nusers with even more unread messages (and not hardcode the number 50000).\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "starred_messages" : {
              "type" : "array",
              "description" : "Present if `starred_messages` is present in `fetch_event_types`.\n\nArray containing the ids of all messages which have been\n[starred](/help/star-a-message) by the user.\n",
              "items" : {
                "type" : "integer"
              }
            },
            "streams" : {
              "type" : "array",
              "description" : "Present if `stream` is present in `fetch_event_types`.\n\nArray of dictionaries where each dictionary contains details about\na single stream in the organization that is visible to the user.\n\nFor organization administrators, this will include all private streams\nin the organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "realm_default_streams" : {
              "type" : "array",
              "description" : "Present if `default_streams` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary contains details\nabout a single [default stream](/help/set-default-streams-for-new-users)\nfor the Zulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/BasicStream"
              }
            },
            "realm_default_stream_groups" : {
              "type" : "array",
              "description" : "Present if `default_stream_groups` is present in `fetch_event_types`.\n\nAn array of dictionaries where each dictionary contains details\nabout a single default stream group configured for this\nZulip organization.\n\nDefault stream groups are an experimental feature.\n",
              "items" : {
                "$ref" : "#/components/schemas/DefaultStreamGroup"
              }
            },
            "stop_words" : {
              "type" : "array",
              "description" : "Present if `stop_words` is present in `fetch_event_types`.\n\nAn array containing the stop words used by the Zulip server's\nfull-text search implementation.  Useful for showing helpful\nerror messages when a search returns limited results because\na stop word in the query was ignored.\n",
              "items" : {
                "type" : "string"
              }
            },
            "user_status" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "away" : {
                    "type" : "boolean",
                    "description" : "Whether the user has marked themself \"away\".\n"
                  },
                  "status_text" : {
                    "type" : "string",
                    "description" : "The text content of the status message.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{user_id}`: Object containing the status details of a user\nwith the key of the object being the id of the user.\n"
              },
              "description" : "Present if `user_status` is present in `fetch_event_types`.\n\nA dictionary which contains the [status](/help/status-and-availability)\nof all users in the Zulip organization who have set a status.\n"
            },
            "has_zoom_token" : {
              "type" : "boolean",
              "description" : "Present if `video_calls` is present in `fetch_event_types`.\n\nA boolean which signifies whether the user has a zoom token and has thus completed\nOAuth flow for the [Zoom integration](/help/start-a-call).  Clients need\nto know whether initiating Zoom OAuth is required before creating a Zoom call.\n"
            },
            "giphy_api_key" : {
              "type" : "string",
              "description" : "Present if `giphy` is present in `fetch_event_types`.\n\nGIPHY's client-side SDKs needs this API key to use the GIPHY API.\nGIPHY API keys are not secret (their main purpose appears to be\nallowing GIPHY to block a problematic app).  Please don't use our API\nkey for an app unrelated to Zulip.\n\nDevelopers of clients should also read the\n[GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-)\nbefore using this API key.\n\n**Changes**: Added in Zulip 4.0 (feature level 47).\n"
            },
            "enable_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_digest_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_login_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_marketing_emails" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_offline_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_offline_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_online_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_sounds" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_stream_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_stream_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_stream_push_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "enable_stream_audible_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "wildcard_mentions_notify" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "message_content_in_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "notification_sound" : {
              "type" : "string",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "pm_content_in_desktop_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "desktop_icon_count_display" : {
              "type" : "integer",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "realm_name_in_notifications" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "presence_enabled" : {
              "type" : "boolean",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nThe current value of this global notification setting for the user.\nSee [update-notification-settings](/api/update-notification-settings)\nfor details on notification settings.\n"
            },
            "available_notification_sounds" : {
              "type" : "array",
              "description" : "Present if `update_global_notifications` is present in `fetch_event_types`.\n\nArray containing the names of the notification sound options supported by\nthis Zulip server.  Only relevant to support UI for configuring notification\nsounds.\n",
              "items" : {
                "type" : "string"
              }
            },
            "color_scheme" : {
              "type" : "integer",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nThe color scheme selected by the user.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "default_language" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nThe default language chosen by the user.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "demote_inactive_streams" : {
              "type" : "integer",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen to demote inactive streams.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "dense_mode" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has switched on dense mode.  Dense mode is an experimental\nfeature that is only available in development environments.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "emojiset" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nThe name of the emojiset that the user has chosen.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "fluid_layout_width" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen for the layout width to be fluid.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "default_view" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nThe [default view](/help/change-default-view) in Zulip, represented\nas the URL suffix after `#` to be rendered when Zulip loads.\n\nCurrently supported values are `all_messages` and `recent_topics`.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "high_contrast_mode" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether has switched on high contrast mode.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "left_side_userlist" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen for the userlist to be displayed\non the left side of the screen (for desktop app and web app) in narrow\nwindows.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "starred_message_counts" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen the number of starred messages to\nbe displayed similar to unread counts.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "timezone" : {
              "type" : "string",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nThe timezone configured for the user.  This is used primarily to display\nthe user's timezone to other users.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "translate_emoticons" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen for emoticons to be translated into emoji\nin the Zulip compose box.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "twenty_four_hour_time" : {
              "type" : "boolean",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nWhether the user has chosen a twenty four hour time display (true)\nor a twelve hour one (false).\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n"
            },
            "emojiset_choices" : {
              "type" : "array",
              "description" : "Present if `update_display_settings` is present in `fetch_event_types`.\n\nArray of dictionaries where each dictionary describes an emojiset\nsupported by this version of the Zulip server.\n\nOnly relevant to clients with configuration UI for choosing an emojiset;\nthe currently selected emojiset is available in the `emojiset` key.\n\nSee [PATCH /settings/display](/api/update-display-settings)\nfor api details on display settings.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "key" : {
                    "type" : "string",
                    "description" : "The key or the name of the emojiset which will be the value\nof `emojiset` if this emojiset is chosen.\n"
                  },
                  "text" : {
                    "type" : "string",
                    "description" : "The text describing the emojiset.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "Object describing a emojiset.\n"
              }
            },
            "realm_add_emoji_by_admins_only" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization is configured to only allow administrators\nto upload new custom emoji.\n"
            },
            "realm_allow_edit_history" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization is configured to allow users to access\n[message edit history](/help/view-a-messages-edit-history).\n"
            },
            "realm_allow_message_deleting" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether messages can be deleted in this Zulip organization.\n"
            },
            "realm_bot_creation_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can create bot users in this organization.\n"
            },
            "realm_create_stream_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can create streams in this organization.\n"
            },
            "realm_invite_to_stream_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can add other users to streams in this\norganization.\n"
            },
            "realm_wildcard_mention_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for who can use wildcard mentions in large streams.\n\n* 1 => Any user can use wildcard mentions in large streams.\n* 2 => Only members can use wildcard mentions in large streams.\n* 3 => Only full members can use wildcard mentions in large streams.\n* 4 => Only stream and organization administrators can use wildcard mentions in large streams.\n* 5 => Only organization administrators can use wildcard mentions in large streams.\n* 6 => Nobody can use wildcard mentions in large streams.\n* 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.\n\nAll users will receive a warning/reminder when using\nmentions in large streams, even when permitted to do so.\n\n**Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\nZulip 4.0 (feature level 62).\n"
            },
            "realm_default_language" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default UI language for new users joining this organization.\n"
            },
            "realm_default_twenty_four_hour_time" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether new members of this organization will see times displayed in\n24-hour time (true) or 12-hour time (false).\n"
            },
            "realm_description" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe description of the organization, used on login and registration pages.\n"
            },
            "realm_digest_emails_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization has enabled [weekly digest emails](/help/digest-emails).\n"
            },
            "realm_disallow_disposable_email_addresses" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization disallows disposable email\naddresses.\n"
            },
            "realm_email_address_visibility" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users in this organization can see the\nreal email addresses of other users.\n\n* 1 = everyone\n* 2 = members only\n* 3 = administrators only\n* 4 = nobody (though note that administrators can change this setting).\n* 5 = moderators only\n"
            },
            "realm_email_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether users are allowed to change their own email address in this\norganization.  This is typically disabled for organizations that\nsynchronize accounts from LDAP or a similar corporate database.\n"
            },
            "realm_invite_required" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether an invitation is required to join this organization.\n"
            },
            "realm_invite_to_realm_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nPolicy for [who can invite new users](/help/invite-new-users#change-who-can-send-invitations)\nto join the organization:\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 50) replacing the\nprevious `realm_invite_by_admins_only` boolean.\n"
            },
            "realm_move_messages_between_streams_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can move messages from one stream to another.\n\n* 1 = Members only\n* 2 = Administrators only\n* 3 = Full members only\n* 4 = Moderators only\n\n**Changes**: New in Zulip 4.0 (feature level 56)\n"
            },
            "realm_inline_image_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization has been configured to enable\n[previews of linked images](/help/allow-image-link-previews).\n"
            },
            "realm_inline_url_embed_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organization has been configured to enable\n[previews of linked websites](/help/allow-image-link-previews).\n"
            },
            "realm_mandatory_topics" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether [topics are required](/help/require-topics) for messages in this organization.\n"
            },
            "realm_message_retention_days" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default [message retention policy](/help/message-retention-policy)\nfor this organization.  Pass `\"forever\"` to request that messages\nby retained forever (the default).\n"
            },
            "realm_name" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe name of the organization, used in login pages etc.\n"
            },
            "realm_name_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nIndicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their name\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
            },
            "realm_avatar_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nIndicates whether users are\n[allowed to change](/help/restrict-name-and-email-changes) their avatar\nvia the Zulip UI in this organization.  Typically disabled\nin organizations syncing this this type of account information\nan external user database like LDAP.\n"
            },
            "realm_emails_restricted_to_domains" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether [new users joining](/help/allow-anyone-to-join-without-an-invitation)\nthis organization are required to have an email\naddress in one of the `realm_domains` configured for the organization.\n"
            },
            "realm_send_welcome_emails" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether or not this organization is configured to send the standard Zulip\n[welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n"
            },
            "realm_message_content_allowed_in_email_notifications" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether notification emails in this organization are allowed to\ncontain Zulip the message content, or simply indicate that a new\nmessage was sent.\n"
            },
            "realm_video_chat_provider" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe configured video call provider for the organization.\n"
            },
            "realm_giphy_rating" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe configured GIPHY rating for the organization.\n\n**Changes**: New in Zulip 4.0 (feature level 55).\n"
            },
            "realm_waiting_period_threshold" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMembers whose accounts have been created at least this many days ago\nwill be treated as [full members](/help/restrict-permissions-of-new-members)\nfor the purpose of settings that restrict access to new members.\n"
            },
            "realm_digest_weekday" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe day of the week when the organization will send\nits weekly digest email to inactive users.\n"
            },
            "realm_private_message_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nPolicy for [who can send private messages](/help/restrict-private-messages)\nin this organization.\n\n* 1 = Everyone\n* 2 = Nobody\n"
            },
            "realm_user_group_edit_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe organization's policy for [who can manage user groups\n](/help/restrict-user-group-management).\n\n* 1 = All members can create and edit user groups\n* 2 = Only organization administrators can create and edit user groups\n"
            },
            "realm_default_code_block_language" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe default pygments language code to be used for a code blocks\nin this organization.  Null if no default has been set.\n",
              "nullable" : true
            },
            "realm_message_content_delete_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot be deleted\nwith this organization's\n[message deletion policy](/help/configure-message-editing-and-deletion).\n"
            },
            "realm_authentication_methods" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "boolean",
                "description" : "Boolean describing whether the authentication method (i.e its key)\nis enabled in this organization.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary of 'authentication_method_name': 'boolean' with each\nentry describing whether the authentication name can be used for\nauthenticating into the organization.\n"
            },
            "realm_allow_message_editing" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\nallows editing the content of messages.\n"
            },
            "realm_edit_topic_policy" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe policy for which users can edit topics of any message.\n\n* 1 = members only\n* 2 = admins only\n* 3 = full members only\n* 4 = moderators only\n* 5 = everyone\n\n**Changes**: New in Zulip 5.0 (feature level 75), replacing the\nprevious `allow_community_topic_editing` boolean.\n"
            },
            "realm_message_content_edit_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot be edited\nwith this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n"
            },
            "realm_community_topic_editing_limit_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nMessages sent more than this many seconds ago cannot have\ntheir topics edited by other users with this organization's\n[message edit policy](/help/configure-message-editing-and-deletion).\n\n**Changes**: New in Zulip 3.0 (feature level 11).  Previously this\nvalue was hardcoded to 86400 seconds (1 day).\n"
            },
            "realm_icon_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's [profile icon](/help/create-your-organization-profile).\n"
            },
            "realm_icon_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's\n[profile icon](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the organization's icon.\n\n* \"G\" means generated by Gravatar (the default).\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "max_icon_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size allowed for the organization's\nicon.  Useful for UI allowing editing the organization's icon.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `max_icon_file_size`.\n"
            },
            "realm_logo_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's wide logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
            },
            "realm_logo_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "realm_night_logo_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL of the organization's night theme wide-format logo configured in the\n[organization profile](/help/create-your-organization-profile).\n"
            },
            "realm_night_logo_source" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nString indicating whether the organization's night theme\n[profile wide logo](/help/create-your-organization-profile) was uploaded\nby a user or is the default.  Useful for UI allowing editing the\norganization's wide logo.\n\n* \"D\" means the logo is the default Zulip logo.\n* \"U\" means uploaded by an organization administrator.\n"
            },
            "max_logo_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size allowed for the uploaded organization logos.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `max_logo_file_size`.\n"
            },
            "realm_bot_domain" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe fake email domain that will be used for new bots created this\norganization.  Useful for UI for creating bots.\n"
            },
            "realm_uri" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe URL for the organization.\n"
            },
            "realm_available_video_chat_providers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the video call provider.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the video call provider.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{provider_name}`: Dictionary containing the details of the\nvideo call provider with the name of the chat provider as\nthe key.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary where each entry describes a supported\n[video call provider](/help/start-a-call)\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nvideo call provider.\n"
            },
            "realm_presence_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether online presence of other users is shown in this\norganization.\n"
            },
            "settings_send_digest_emails" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this Zulip server is configured to allow organizations to\nenable [digest emails](/help/digest-emails).\n\nRelevant for administrative settings UI that can change the digest\nemail settings.\n"
            },
            "realm_is_zephyr_mirror_realm" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization is a Zephyr mirror realm.\n"
            },
            "realm_email_auth_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization has enabled Zulip's default email and password\nauthentication feature.  Determines whether Zulip stores a password\nfor the user and clients should offer any UI for changing the user's\nZulip password.\n"
            },
            "realm_password_auth_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization allows any sort of password-based\nauthentication (whether via EmailAuthBackend or LDAP passwords).\n\nDetermines whether a client might ever need to display a password prompt\n(clients will primarily look at this attribute in [server_settings](/api/get-server-settings)\nbefore presenting a login page).\n"
            },
            "realm_push_notifications_enabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether push notifications are enabled for this organization.  Typically\n`false` for self-hosted servers that have not configured the\n[Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).\n"
            },
            "realm_upload_quota_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe total quota for uploaded files in this organization.\n\nClients are not responsible for checking this quota; it is included\nin the API only for display purposes.\n\nNull if there is no limit.\n\n**Changes**: New in Zulip 5.0 (feature level 72).  Previously,\nthis was called `realm_upload_quota`.\n",
              "nullable" : true
            },
            "realm_plan_type" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe plan type of the organization.\n\n* 1 = Self-hosted organization (SELF_HOSTED)\n* 2 = Zulip Cloud free plan (LIMITED)\n* 3 = Zulip Cloud Standard plan (STANDARD)\n* 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n"
            },
            "zulip_plan_is_not_limited" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the organization is using a limited (Zulip Cloud Free) plan.\n"
            },
            "upgrade_text_for_wide_organization_logo" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nText to use when displaying UI for wide organization logos, a feature\nthat is currently not available on the Zulip Cloud Free plan.\n\nUseful only for clients supporting administrative UI for uploading\na new wide organization logo to brand the organization.\n"
            },
            "realm_default_external_accounts" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the external account provider\n"
                  },
                  "text" : {
                    "type" : "string",
                    "description" : "The text describing the external account.\n"
                  },
                  "hint" : {
                    "type" : "string",
                    "description" : "The help text to be displayed for the\ncustom profile field in user-facing\nsettings UI for configuring custom\nprofile fields for this account.\n"
                  },
                  "url_pattern" : {
                    "type" : "string",
                    "description" : "The regex pattern of the URL of a profile page\non the external site.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{site_name}`: Dictionary containing the details of the\ndefault external account provider with the name of the\nwebsite as the key.\n"
              },
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nDictionary where each entry describes a default external\naccount type that can be configured with Zulip's custom\nprofile fields feature.\n"
            },
            "jitsi_server_url" : {
              "type" : "string",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe base URL the organization uses to create Jitsi video calls.\n"
            },
            "development_environment" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether this Zulip server is a development environment.  Used\nto control certain features or UI (such as error popups)\nthat should only apply when connected to a Zulip development\nenvironment.\n"
            },
            "server_generation" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nA timestamp indicating when the process hosting this\nevent queue was started.  Clients will likely only find\nthis value useful for inclusion in detailed error reports.\n"
            },
            "password_min_length" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThis Zulip server's configured minimum required length for passwords.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
            },
            "password_min_guesses" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThis Zulip server's configured minimum `zxcvbn` minimum guesses.\nNecessary for password change UI to show whether the password\nwill be accepted.\n"
            },
            "giphy_rating_options" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "The description of the rating option.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the rating option.\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{rating_name}`: Dictionary containing the details of the\nrating with the name of the rating as\nthe key.\n"
              },
              "description" : "Dictionary where each entry describes a valid rating\nthat is configured on this server and could be selected by an\norganization administrator.\n\nUseful for administrative settings UI that allows changing the\nallowed rating of GIFs.\n"
            },
            "max_file_upload_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum file size that can be uploaded to this Zulip server.\n"
            },
            "max_avatar_file_size_mib" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe maximum avatar size that can be uploaded to this Zulip server.\n"
            },
            "server_inline_image_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is configured with support for inline image previews.\nClients containing administrative UI for changing\n`realm_inline_image_preview` should consult this field before offering\nthat feature.\n"
            },
            "server_inline_url_embed_preview" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is configured with support for inline URL previews.\nClients containing administrative UI for changing\n`realm_inline_url_embed_preview` should consult this field before offering\nthat feature.\n"
            },
            "server_avatar_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server allows avatar changes.  Similar to\n`realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`\nZulip server level setting.\n"
            },
            "server_name_changes_disabled" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server allows name changes.  Similar to\n`realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`\nZulip server level setting.\n"
            },
            "server_needs_upgrade" : {
              "type" : "boolean",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nWhether the server is running an old version based on the Zulip\n[server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag),\nsuch that the web app will display to the current user a prominent warning.\n\n**Changes**: New in Zulip 5.0 (feature level 74).\n"
            },
            "event_queue_longpoll_timeout_seconds" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nRecommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls.\nThis is guaranteed to be somewhat greater than the heartbeat frequency. It is important\nthat clients respect this parameter, so that increases in the heartbeat frequency do not\nbreak clients.\n\n**Changes**: New in Zulip 5.0 (feature level 74). Previously,\nthis was hardcoded to 90 seconds, and clients should use that as a fallback\nvalue when interacting with servers where this field is not present.\n"
            },
            "realm_notifications_stream_id" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe ID of the stream to which notifications announcing the\ncreation of new streams are sent. -1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
            },
            "realm_signup_notifications_stream_id" : {
              "type" : "integer",
              "description" : "Present if `realm` is present in `fetch_event_types`.\n\nThe ID of the stream to which notifications announcing\nthat new users have joined the organization are sent.\n-1 if such notifications are disabled.\n\nSince these notifications are sent by the server, this field is\nprimarily relevant to clients containing UI for changing it.\n"
            },
            "realm_users" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nA array of dictionaries where each entry describes a user\nwhose account has not been deactivated. Note that unlike\nthe usual User dictionary, this does not contain the `is_active`\nkey, as all the users present in this array have active accounts.\n\nSee also `cross_realm_bots` and `realm_non_active_users`.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "realm_non_active_users" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nA array of dictionaries where each entry describes a user\nwhose account has been deactivated. Note that unlike\nthe usual User dictionary this does not contain the `is_active`\nkey as all the users present in this array have deactivated\naccounts.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            },
            "avatar_source" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe avatar data source type for the current user.\n\nValue values are `G` (gravatar) and `U` (uploaded by user).\n"
            },
            "avatar_url_medium" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe avatar URL for the current user at 500x500 resolution, appropriate\nfor use in settings UI showing the user's avatar.\n"
            },
            "avatar_url" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe URL of the avatar for the current user at 100x100\nresolution.  See also `avatar_url_medium`.\n"
            },
            "can_create_streams" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is allowed to create streams with\nthe organization's [stream creation policy](/help/configure-who-can-create-streams).\n"
            },
            "can_subscribe_other_users" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is allowed to subscribe other users to streams with\nthe organization's [streams policy](/help/configure-who-can-invite-to-streams).\n"
            },
            "can_invite_others_to_realm" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user [is allowed to invite others]\n(/help/invite-new-users#change-who-can-send-invitations) to the organization.\n\n**Changes**: New in Zulip 4.0 (feature level 51).\n"
            },
            "is_admin" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization administrator](/help/roles-and-permissions).\n"
            },
            "is_owner" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization owner](/help/roles-and-permissions).\n"
            },
            "is_billing_admin" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is a billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n"
            },
            "is_moderator" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is an [organization moderator](/help/roles-and-permissions).\n\n**Changes**: New in Zulip 4.0 (feature level 60).\n"
            },
            "is_guest" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the current user is a [guest user](/help/roles-and-permissions).\n"
            },
            "enter_sends" : {
              "type" : "boolean",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nWhether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\nin the compose box is enabled.\n"
            },
            "user_id" : {
              "type" : "integer",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe unique ID for the current user.\n"
            },
            "email" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe Zulip display email address for the current user.  See also\n`delivery_email`; these may be the same or different depending\non the organization's `email_address_visibility` policy.\n"
            },
            "delivery_email" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe user's email address, appropriate for UI for changing\nthe user's email address.  See also `email`.\n"
            },
            "full_name" : {
              "type" : "string",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nThe full name of the current user.\n"
            },
            "cross_realm_bots" : {
              "type" : "array",
              "description" : "Present if `realm_user` is present in `fetch_event_types`.\n\nArray of dictionaries where each dictionary contains details of\na single cross realm bot.  Cross-realm bots are special system bot accounts\nlike Notification Bot.\n\nMost clients will want to combine this with `realm_users` in many\ncontexts.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/UserBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "email" : { },
                    "is_bot" : { },
                    "avatar_url" : { },
                    "avatar_version" : { },
                    "full_name" : { },
                    "is_admin" : { },
                    "is_owner" : { },
                    "is_billing_admin" : { },
                    "role" : { },
                    "bot_type" : { },
                    "user_id" : { },
                    "bot_owner_id" : { },
                    "is_active" : { },
                    "is_guest" : { },
                    "timezone" : { },
                    "date_joined" : { },
                    "delivery_email" : { },
                    "profile_data" : { },
                    "is_cross_realm_bot" : {
                      "type" : "boolean",
                      "description" : "Whether the user is a cross realm bot.\n"
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "last_event_id" : -1,
            "msg" : "",
            "queue_id" : "1517975029:0",
            "realm_emoji" : {
              "1" : {
                "author_id" : 5,
                "deactivated" : false,
                "id" : "1",
                "name" : "green_tick",
                "source_url" : "/user_avatars/1/emoji/images/1.png"
              }
            },
            "result" : "success",
            "zulip_feature_level" : 2,
            "zulip_version" : "2.1.0"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/rest-error-handling',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'restErrorHandling',
            'responses' => [
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/InvalidApiKeyError"
        }, {
          "$ref" : "#/components/schemas/MissingArgumentError"
        }, {
          "$ref" : "#/components/schemas/UserNotAuthorizedError"
        } ]
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/UserDeactivatedError"
        }, {
          "$ref" : "#/components/schemas/RealmDeactivatedError"
        } ]
      }
    }
  }
}',
                ],
                '429' => [
                    'jsonSchema' => '{
  "description" : "Rate limit exceeded.\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/RateLimitedError"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/playgrounds',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'addCodePlayground',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The numeric ID assigned to this playground.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "id" : 1,
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'addLinkifier',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The numeric ID assigned to this filter.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "id" : 42,
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'createCustomProfileField',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "id" : {
              "type" : "integer",
              "description" : "The ID for the custom profile field.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "id" : 9
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/emoji',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getCustomEmoji',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "emoji" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/RealmEmoji"
              },
              "description" : "An object that contains `emoji` objects, each identified with their\nemoji ID as the key.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "emoji" : {
              "1" : {
                "id" : "1",
                "name" : "green_tick",
                "source_url" : "/user_avatars/1/emoji/images/1.png",
                "deactivated" : false,
                "author_id" : 5
              }
            }
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getCustomProfileFields',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "custom_fields" : {
              "type" : "array",
              "description" : "An array containing all the custom profile fields defined in this\nZulip organization.\n",
              "items" : {
                "$ref" : "#/components/schemas/CustomProfileField"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "custom_fields" : [ {
              "id" : 1,
              "name" : "Phone number",
              "type" : 1,
              "hint" : "",
              "field_data" : "",
              "order" : 1
            }, {
              "id" : 2,
              "name" : "Biography",
              "type" : 2,
              "hint" : "What are you known for?",
              "field_data" : "",
              "order" : 2
            }, {
              "id" : 3,
              "name" : "Favorite food",
              "type" : 1,
              "hint" : "Or drink, if you'd prefer",
              "field_data" : "",
              "order" : 3
            }, {
              "id" : 4,
              "name" : "Favorite editor",
              "type" : 3,
              "hint" : "",
              "field_data" : "{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}",
              "order" : 4
            }, {
              "id" : 5,
              "name" : "Birthday",
              "type" : 4,
              "hint" : "",
              "field_data" : "",
              "order" : 5
            }, {
              "id" : 6,
              "name" : "Favorite website",
              "type" : 5,
              "hint" : "Or your personal blog's URL",
              "field_data" : "",
              "order" : 6
            }, {
              "id" : 7,
              "name" : "Mentor",
              "type" : 6,
              "hint" : "",
              "field_data" : "",
              "order" : 7
            }, {
              "id" : 8,
              "name" : "GitHub",
              "type" : 7,
              "hint" : "Enter your GitHub username",
              "field_data" : "{\"subtype\":\"github\"}",
              "order" : 8
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/linkifiers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getLinkifiers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "linkifiers" : {
              "type" : "array",
              "description" : "An array of objects, where each object describes a linkifier.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "pattern" : {
                    "type" : "string",
                    "description" : "The string regex pattern which represents the pattern that\nshould be linkified by this linkifier.\n"
                  },
                  "url_format" : {
                    "type" : "string",
                    "description" : "The URL format string to be used for linkifying matches.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The ID of the linkifier.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "linkifiers" : [ {
              "pattern" : "#(?P<id>[0-9]+)",
              "url_format" : "https://github.com/zulip/zulip/issues/%(id)s",
              "id" : 1
            } ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/server_settings',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getServerSettings',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "authentication_methods" : {
              "type" : "object",
              "properties" : {
                "password" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using password.\n"
                },
                "dev" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using development API key.\n"
                },
                "email" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using email.\n"
                },
                "ldap" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using LDAP.\n"
                },
                "remoteuser" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using REMOTE_USER.\n"
                },
                "github" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their GitHub account.\n"
                },
                "azuread" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Azure Active Directory account.\n"
                },
                "gitlab" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their GitLab account.\n"
                },
                "apple" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Apple account.\n"
                },
                "google" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using their Google account.\n"
                },
                "saml" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using SAML.\n"
                },
                "openid connect" : {
                  "type" : "boolean",
                  "description" : "Whether the user can authenticate using OpenID Connect.\n"
                }
              },
              "additionalProperties" : false,
              "description" : "Each key-value pair in the object indicates whether the authentication\nmethod is enabled on this server.\n\n**Changes**: Deprecated in Zulip 2.1, in favor of the more expressive\n`external_authentication_methods`.\n",
              "deprecated" : true
            },
            "external_authentication_methods" : {
              "type" : "array",
              "description" : "A list of dictionaries describing the available external\nauthentication methods (E.g. Google, GitHub, or SAML)\nenabled for this organization.\n\nThe list is sorted in the order in which these\nauthentication methods should be displayed.\n\n**Changes**: New in Zulip 2.1.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "name" : {
                    "type" : "string",
                    "description" : "A unique, table, machine-readable name for the authentication method,\nintended to be used by clients with special behavior for specific\nauthentication methods to correctly identify the method.\n"
                  },
                  "display_name" : {
                    "type" : "string",
                    "description" : "Display name of the authentication method, to be used in all buttons\nfor the authentication method.\n"
                  },
                  "display_icon" : {
                    "type" : "string",
                    "description" : "URL for an image to be displayed as an icon in all buttons for\nthe external authentication method.\n\nWhen null, no icon should be displayed.\n",
                    "nullable" : true
                  },
                  "login_url" : {
                    "type" : "string",
                    "description" : "URL to be used to initiate authentication using this method.\n"
                  },
                  "signup_url" : {
                    "type" : "string",
                    "description" : "URL to be used to initiate account registration using this method.\n"
                  }
                },
                "additionalProperties" : false
              }
            },
            "zulip_version" : {
              "type" : "string",
              "description" : "The version of Zulip running in the server.\n"
            },
            "zulip_feature_level" : {
              "type" : "integer",
              "description" : "An integer indicating what features are\navailable on the server. The feature level increases monotonically;\na value of N means the server supports all API features introduced\nbefore feature level N.  This is designed to provide a simple way\nfor client apps to decide whether the server supports a given\nfeature or API change.  See the [changelog](/api/changelog) for\ndetails on what each feature level means.\n\n**Changes**.  New in Zulip 3.0.  We recommend using an implied value\nof 0 for Zulip servers that do not send this field.\n"
            },
            "push_notifications_enabled" : {
              "type" : "boolean",
              "description" : "Whether mobile/push notifications are enabled.\n"
            },
            "is_incompatible" : {
              "type" : "boolean",
              "description" : "Whether the Zulip client that has sent a request to this endpoint is\ndeemed incompatible with the server.\n"
            },
            "email_auth_enabled" : {
              "type" : "boolean",
              "description" : "Setting for allowing users authenticate with an email-password\ncombination.\n"
            },
            "require_email_format_usernames" : {
              "type" : "boolean",
              "description" : "Whether all valid usernames for authentication to this\norganization will be email addresses. This is important\nfor clients to know whether to do client side validation\nof email address format in a login prompt.\n\nThis value will be false if the server has [LDAP\nauthentication][ldap-auth] enabled with a username and\npassword combination.\n\n[ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory\n"
            },
            "realm_uri" : {
              "type" : "string",
              "description" : "The organization's canonical URL.\n"
            },
            "realm_name" : {
              "type" : "string",
              "description" : "The organization's name (for display purposes).\n"
            },
            "realm_icon" : {
              "type" : "string",
              "description" : "The URL for the organization's logo formatted as a square image,\nused for identifying the organization in small locations in the\nmobile and desktop apps.\n"
            },
            "realm_description" : {
              "type" : "string",
              "description" : "HTML description of the organization, as configured by the [organization\nprofile](/help/create-your-organization-profile).\n"
            }
          },
          "additionalProperties" : false,
          "description" : "A typical successful JSON response for a single-organization server may look like",
          "example" : {
            "authentication_methods" : {
              "password" : true,
              "dev" : true,
              "email" : true,
              "ldap" : false,
              "remoteuser" : false,
              "github" : true,
              "azuread" : false,
              "google" : true,
              "saml" : true
            },
            "zulip_version" : "2.0.6+git",
            "push_notifications_enabled" : false,
            "msg" : "",
            "is_incompatible" : false,
            "email_auth_enabled" : true,
            "require_email_format_usernames" : true,
            "realm_uri" : "http://localhost:9991",
            "realm_name" : "Zulip Dev",
            "realm_icon" : "https://secure.gravatar.com/avatar/62429d594b6ffc712f54aee976a18b44?d=identicon",
            "realm_description" : "<p>The Zulip development environment default organization.  It's great for testing!</p>",
            "result" : "success",
            "external_authentication_methods" : [ {
              "name" : "saml:idp_name",
              "display_name" : "SAML",
              "display_icon" : null,
              "login_url" : "/accounts/login/social/saml/idp_name",
              "signup_url" : "/accounts/register/social/saml/idp_name"
            }, {
              "name" : "google",
              "display_name" : "Google",
              "display_icon" : "/static/images/landing-page/logos/googl_e-icon.png",
              "login_url" : "/accounts/login/social/google",
              "signup_url" : "/accounts/register/social/google"
            }, {
              "name" : "github",
              "display_name" : "GitHub",
              "display_icon" : "/static/images/landing-page/logos/github-icon.png",
              "login_url" : "/accounts/login/social/github",
              "signup_url" : "/accounts/register/social/github"
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'reorderCustomProfileFields',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/playgrounds/{playground_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'removeCodePlayground',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters/{filter_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'removeLinkifier',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters/{filter_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'updateLinkifier',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/emoji/{emoji_name}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'uploadCustomEmoji',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/calls/bigbluebutton/create',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'createBigBlueButtonVideoCall',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "url" : {
              "type" : "string",
              "description" : "The URL for the BigBlueButton video call.\n",
              "example" : "/calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "url" : "/calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/get_stream_id',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreamId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "stream_id" : {
              "type" : "integer",
              "description" : "The ID of the given stream.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "stream_id" : 15
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream name 'nonexistent'",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreams',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "streams" : {
              "type" : "array",
              "description" : "A list of `stream` objects with details on the requested streams.\n",
              "items" : {
                "allOf" : [ {
                  "$ref" : "#/components/schemas/BasicStreamBase"
                }, {
                  "type" : "object",
                  "properties" : {
                    "stream_id" : { },
                    "name" : { },
                    "description" : { },
                    "date_created" : { },
                    "invite_only" : { },
                    "rendered_description" : { },
                    "is_web_public" : { },
                    "stream_post_policy" : { },
                    "message_retention_days" : { },
                    "history_public_to_subscribers" : { },
                    "first_message_id" : { },
                    "is_announcement_only" : { },
                    "is_default" : {
                      "type" : "boolean",
                      "description" : "Whether the given stream is a\n[default stream](/help/set-default-streams-for-new-users).  Only\nreturned if the `include_default` parameter is `true`.\n"
                    }
                  },
                  "additionalProperties" : false
                } ]
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "streams" : [ {
              "description" : "A Scandinavian country",
              "invite_only" : false,
              "name" : "Denmark",
              "stream_id" : 1
            }, {
              "description" : "Yet another Italian city",
              "invite_only" : false,
              "name" : "Rome",
              "stream_id" : 2
            }, {
              "description" : "Located in the United Kingdom",
              "invite_only" : false,
              "name" : "Scotland",
              "stream_id" : 3
            }, {
              "description" : "A northeastern Italian city",
              "invite_only" : false,
              "name" : "Venice",
              "stream_id" : 4
            }, {
              "description" : "A city in Italy",
              "invite_only" : false,
              "name" : "Verona",
              "stream_id" : 5
            }, {
              "description" : "New stream for testing",
              "invite_only" : false,
              "name" : "new stream",
              "stream_id" : 6
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "An example JSON response for when the user is not authorized to use the\n`include_all_active` parameter (i.e. because they are not an organization\nadministrator)\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "User not authorized for this query",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getSubscriptions',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "required" : [ "subscriptions" ],
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscriptions" : {
              "type" : "array",
              "description" : "A list of dictionaries where each dictionary contains\ninformation about one of the subscribed streams.\n",
              "items" : {
                "$ref" : "#/components/schemas/Subscriptions"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "subscriptions" : [ {
              "audible_notifications" : true,
              "color" : "#e79ab5",
              "description" : "A Scandinavian country",
              "desktop_notifications" : true,
              "email_address" : "Denmark+187b4125ed36d6af8b5d03ef4f65c0cf@zulipdev.com:9981",
              "is_muted" : false,
              "invite_only" : false,
              "name" : "Denmark",
              "pin_to_top" : false,
              "push_notifications" : false,
              "role" : 20,
              "stream_id" : 1,
              "subscribers" : [ 7, 10, 11, 12, 14 ]
            }, {
              "audible_notifications" : true,
              "color" : "#e79ab5",
              "description" : "Located in the United Kingdom",
              "desktop_notifications" : true,
              "email_address" : "Scotland+f5786390183e60a1ccb18374f9d05649@zulipdev.com:9981",
              "is_muted" : false,
              "invite_only" : false,
              "name" : "Scotland",
              "pin_to_top" : false,
              "push_notifications" : false,
              "role" : 50,
              "stream_id" : 3,
              "subscribers" : [ 7, 11, 12, 14 ]
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions/muted_topics',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'muteTopic',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when an `add` operation is requested for a topic\nthat has already been muted\n",
            "example" : {
              "msg" : "Topic already muted",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when a `remove` operation is requested for a\ntopic that had not been previously muted\n",
            "example" : {
              "msg" : "Topic is not muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'subscribe',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "$ref" : "#/components/schemas/SuccessDescription"
          }, {
            "example" : {
              "already_subscribed" : { },
              "msg" : "",
              "result" : "success",
              "subscribed" : {
                "iago@zulip.com" : [ "new stream" ]
              }
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical successful JSON response when the user is already subscribed to\nthe streams specified\n",
            "example" : {
              "already_subscribed" : {
                "newbie@zulip.com" : [ "new stream" ]
              },
              "msg" : "",
              "result" : "success",
              "subscribed" : { }
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical response for when the requesting user does not have access to\na private stream and `authorization_errors_fatal` is `True`\n",
            "example" : {
              "msg" : "Unable to access stream (private_stream).",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/AddSubscriptionsResponse"
          }, {
            "description" : "A typical response for when the requesting user does not have access to\na private stream and `authorization_errors_fatal` is `False`\n",
            "example" : {
              "already_subscribed" : { },
              "msg" : "",
              "result" : "success",
              "subscribed" : { },
              "unauthorized" : [ "private_stream" ]
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'unsubscribe',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "not_removed" : {
              "type" : "array",
              "description" : "A list of the names of streams that the user is already unsubscribed\nfrom, and hence doesn't need to be unsubscribed.\n",
              "items" : {
                "type" : "string"
              }
            },
            "removed" : {
              "type" : "array",
              "description" : "A list of the names of streams which were unsubscribed from as a result\nof the query.\n",
              "items" : {
                "type" : "string"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "not_removed" : [ ],
            "removed" : [ "new stream" ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NonExistingStreamError"
        }, {
          "description" : "A typical failed JSON response for when the target stream does not exist"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions/properties',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateSubscriptionSettings',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscription_data" : {
              "type" : "array",
              "description" : "The same `subscription_data` array sent by the client for the request.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "property" : {
                    "type" : "string",
                    "description" : "The property to be changed. It is one of:\n\n* `color`: The hex value of the user's personal display color for the stream.<br>\n* `is_muted`: Whether the stream is [muted](/help/mute-a-stream).<br>\n**Changes**: Prior to Zulip 2.1, this feature was\nrepresented by the more confusingly named `in_home_view` (with the\nopposite value, `in_home_view=!is_muted`); for\nbackwards-compatibility, modern Zulip still accepts that value.<br>\n* `pin_to_top`: Whether to pin the stream at the top of the stream list.\n* `desktop_notifications`: Whether to show desktop notifications for all\nmessages sent to the stream.<br>\n* `audible_notifications`: Whether to play a sound notification for all\nmessages sent to the stream.<br>\n* `push_notifications`: Whether to trigger a mobile push notification for\nall messages sent to the stream.<br>\n* `email_notifications`: Whether to trigger an email notification for all\nmessages sent to the stream.<br>\n* `in_home_view`: Whether to mute the stream (legacy property)<br>\n* `wildcard_mentions_notify`: whether wildcard mentions trigger notifications\nas though they were personal mentions in this stream.<br>\nA null value means the value of this setting\nshould be inherited from the user-level default\nsetting, wildcard_mentions_notify, for\nthis stream.\n",
                    "enum" : [ "color", "push_notifications", "is_muted", "pin_to_top", "desktop_notifications", "audible_notifications", "push_notifications", "email_notifications", "in_home_view", "wildcard_mentions_notify" ]
                  },
                  "value" : {
                    "description" : "The desired value of the property\n",
                    "oneOf" : [ {
                      "type" : "boolean"
                    }, {
                      "type" : "string"
                    } ]
                  },
                  "stream_id" : {
                    "type" : "integer",
                    "description" : "The desired value of the property\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "subscription_data" : [ {
              "property" : "pin_to_top",
              "value" : true,
              "stream_id" : 1
            }, {
              "property" : "color",
              "value" : "#f00f00",
              "stream_id" : 3
            } ],
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateSubscriptions',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "required" : [ "already_subscribed", "removed", "subscribed" ],
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "subscribed" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "description" : "`{email_id}`: A list of the names of streams that\nthe user was subscribed to as a result of the query.\n",
                "items" : {
                  "type" : "string"
                }
              },
              "description" : "A dictionary where the key is the email\naddress of the user/bot and the value is a\nlist of the names of the streams that were\nsubscribed to as a result of the query.\n"
            },
            "already_subscribed" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "description" : "`{email_id}`: A list of the names of streams that\nthe user was already subscribed to.\n",
                "items" : {
                  "type" : "string"
                }
              },
              "description" : "A dictionary where the key is the email\naddress of the user/bot and the value is a\nlist of the names of the streams that the\nuser/bot is already subscribed to.\n"
            },
            "not_removed" : {
              "type" : "array",
              "description" : "A list of the names of streams that the user\nis already unsubscribed from, and hence\ndoesn't need to be unsubscribed.\n",
              "items" : {
                "type" : "string"
              }
            },
            "removed" : {
              "type" : "array",
              "description" : "A list of the names of streams which were unsubscribed\nfrom as a result of the query.\n",
              "items" : {
                "type" : "string"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "subscribed" : { },
            "already_subscribed" : {
              "iago@zulip.com" : [ "Verona" ]
            },
            "not_removed" : [ ],
            "removed" : [ "new stream" ],
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'archiveStream',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/{stream_id}/topics',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreamTopics',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "topics" : {
              "type" : "array",
              "description" : "An array of `topic` objects.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "max_id" : {
                    "type" : "integer",
                    "description" : "The message ID of the last message sent to this topic.\n"
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "The name of the topic.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "topics" : [ {
              "max_id" : 26,
              "name" : "Denmark3"
            }, {
              "max_id" : 23,
              "name" : "Denmark1"
            }, {
              "max_id" : 6,
              "name" : "Denmark2"
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the user is attempting to fetch the topics\nof a non-existing stream (or also a private stream they don't have access to)\n",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}/subscriptions/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getSubscriptionStatus',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "is_subscribed" : {
              "type" : "boolean",
              "description" : "Whether the user is subscribed to the stream.\n"
            }
          },
          "additionalProperties" : false,
          "description" : "MANUALLY",
          "example" : {
            "msg" : "",
            "result" : "success",
            "is_subscribed" : false
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateStream',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response for when the supplied stream does not exist",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid stream id",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'createUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user_id" : {
              "type" : "integer",
              "description" : "The ID assigned to the newly created user.\n\n**Changes**: New in Zulip 4.0 (feature level 30).\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user_id" : 25
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "A typical JSON response for when another user with the same\nemail address already exists in the realm\n",
          "example" : {
            "msg" : "Email 'newbie@zulip.com' already in use",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/create',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'createUserGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for when the one of the users does not exist",
          "example" : {
            "result" : "error",
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user ID: 500"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'deactivateOwnUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response when attempting to deactivate the only\norganization owner in an organization\n",
          "example" : {
            "msg" : "Cannot deactivate the only organization owner",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/attachments',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getAttachments',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "attachments" : {
              "type" : "array",
              "description" : "A list of `attachment` objects, each containing\ndetails about a file uploaded by the user.\n",
              "items" : {
                "$ref" : "#/components/schemas/Attachments"
              }
            },
            "upload_space_used" : {
              "type" : "integer",
              "description" : "The total size of all files uploaded by in the organization,\nin bytes.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "result" : "success",
            "msg" : "",
            "attachments" : [ {
              "id" : 1,
              "name" : "166050.jpg",
              "path_id" : "2/ce/DfOkzwdg_IwlrN3myw3KGtiJ/166050.jpg",
              "size" : 571946,
              "create_time" : 1588145417000,
              "messages" : [ {
                "id" : 102,
                "date_sent" : 1588145424000
              }, {
                "id" : 103,
                "date_sent" : 1588145448000
              } ]
            } ],
            "upload_space_used" : 571946
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getOwnUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "avatar_url" : {
              "type" : "string",
              "description" : "URL for the user's avatar.\n\n**Changes**: New in Zulip 2.1.0.\n",
              "example" : "x"
            },
            "avatar_version" : {
              "type" : "integer",
              "description" : "Version for the user's avatar.  Used for cache-busting requests\nfor the user's avatar.  Clients generally shouldn't need to use this;\nmost avatar URLs sent by Zulip will already end with `?v={avatar_version}`.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : 1
            },
            "email" : {
              "type" : "string",
              "description" : "Email of the requesting user.\n",
              "example" : "iago@zulip.com"
            },
            "full_name" : {
              "type" : "string",
              "description" : "Full name of the requesting user.\n",
              "example" : "Iago"
            },
            "is_admin" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is an admin.\n",
              "example" : true
            },
            "is_owner" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is\nan organization owner.\n\n**Changes**: New in Zulip 3.0 (feature level 8).\n",
              "example" : false
            },
            "is_billing_admin" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is\na billing administrator.\n\n**Changes**: New in Zulip 5.0 (feature level 73).\n",
              "example" : false
            },
            "role" : {
              "type" : "integer",
              "description" : "[Organization-level role](/help/roles-and-permissions)) of the user.\nPoosible values are:\n\n* Organization owner => 100\n* Organization administrator => 200\n* Organization moderator => 300\n* Member => 400\n* Guest => 600\n\n**Changes**: New in Zulip 4.0 (feature level 59).\n",
              "enum" : [ 100, 200, 300, 400, 600 ]
            },
            "is_guest" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is a guest.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : false
            },
            "is_bot" : {
              "type" : "boolean",
              "description" : "A boolean indicating if the requesting user is a bot.\n",
              "example" : false
            },
            "is_active" : {
              "type" : "boolean",
              "description" : "A boolean specifying whether the user account has been deactivated.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : true
            },
            "timezone" : {
              "type" : "string",
              "description" : "The time zone of the user.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : ""
            },
            "date_joined" : {
              "type" : "string",
              "description" : "The time the user account was created.\n\n**Changes**: New in Zulip 3.0 (feature level 10). Previous\nversions do not return this field.\n",
              "example" : "2019-10-20T07:50:53.728864+00:00"
            },
            "max_message_id" : {
              "type" : "integer",
              "description" : "The integer ID of the last message received by your account.\n\n**Deprecated**.  We plan to remove this in favor of recommending\nusing `GET /messages` with `anchor=\"newest\"`.\n",
              "example" : 30,
              "deprecated" : true
            },
            "user_id" : {
              "type" : "integer",
              "description" : "The user's ID.\n",
              "example" : 1
            },
            "delivery_email" : {
              "type" : "string",
              "description" : "The user's real email address.  This field is present only if\n[email address visibility](/help/restrict-visibility-of-email-addresses) is\nlimited and you are an administrator with access to real email addresses\nunder the configured policy.\n"
            },
            "profile_data" : {
              "$ref" : "#/components/schemas/profile_data"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "avatar_url" : "https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon&version=1",
            "avatar_version" : 1,
            "email" : "iago@zulip.com",
            "full_name" : "Iago",
            "is_admin" : true,
            "is_owner" : false,
            "role" : 200,
            "is_guest" : false,
            "is_billing_admin" : false,
            "is_bot" : false,
            "is_active" : true,
            "timezone" : "",
            "date_joined" : "2019-10-20T07:50:53.728864+00:00",
            "max_message_id" : 30,
            "msg" : "",
            "result" : "success",
            "user_id" : 5,
            "profile_data" : {
              "5" : {
                "value" : "2000-01-01"
              },
              "4" : {
                "value" : "emacs"
              },
              "7" : {
                "value" : "[10]"
              },
              "1" : {
                "value" : "+1-234-567-8901",
                "rendered_value" : "<p>+1-234-567-8901</p>"
              },
              "2" : {
                "rendered_value" : "<p>Betrayer of Othello.</p>",
                "value" : "Betrayer of Othello."
              },
              "8" : {
                "value" : "zulip"
              },
              "3" : {
                "value" : "Apples",
                "rendered_value" : "<p>Apples</p>"
              },
              "6" : {
                "value" : "https://zulip.readthedocs.io/en/latest/"
              }
            }
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserGroups',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user_groups" : {
              "type" : "array",
              "description" : "A list of `user_group` objects, which contain a `description`, a `name`,\ntheir `id` and the list of members of the user group.\n",
              "items" : {
                "type" : "object",
                "properties" : {
                  "description" : {
                    "type" : "string",
                    "description" : "The human-readable description of the user group.\n"
                  },
                  "id" : {
                    "type" : "integer",
                    "description" : "The user group's integer id.\n"
                  },
                  "members" : {
                    "type" : "array",
                    "description" : "The integer user IDs of the user group members.\n",
                    "items" : {
                      "type" : "integer"
                    }
                  },
                  "name" : {
                    "type" : "string",
                    "description" : "User group name.\n"
                  }
                },
                "additionalProperties" : false
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user_groups" : [ {
              "description" : "Characters of Hamlet",
              "id" : 1,
              "name" : "hamletcharacters",
              "members" : [ 3, 4 ]
            }, {
              "description" : "Other users",
              "id" : 2,
              "name" : "other users",
              "members" : [ 1, 2 ]
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUsers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "members" : {
              "type" : "array",
              "description" : "A list of `user` objects, each containing details about a user in the\norganization.\n",
              "items" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "members" : [ {
              "is_active" : true,
              "email" : "AARON@zulip.com",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/818c212b9f8830dfef491b3f7da99a14?d=identicon&version=1",
              "bot_type" : null,
              "timezone" : "",
              "is_bot" : false,
              "user_id" : 7,
              "profile_data" : { },
              "is_guest" : false,
              "date_joined" : "2019-10-20T07:50:53.728864+00:00",
              "full_name" : "aaron"
            }, {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }, {
              "bot_owner_id" : 11,
              "is_guest" : false,
              "date_joined" : "2019-10-20T12:52:17.862053+00:00",
              "full_name" : "Iago's Bot",
              "email" : "iago-bot@zulipdev.com",
              "is_active" : true,
              "avatar_url" : "https://secure.gravatar.com/avatar/7328586831cdbb1627649bd857b1ee8c?d=identicon&version=1",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "user_id" : 23,
              "bot_type" : 1,
              "timezone" : "",
              "is_bot" : true
            } ]
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/typing',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'setTypingStatus',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for when user sends to multiple streams",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Cannot send to multiple streams",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/settings/display',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateDisplaySettings',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "twenty_four_hour_time" : {
              "type" : "boolean",
              "description" : "The setting for `twenty_four_hour_time`, if it was changed in this request.\n"
            },
            "dense_mode" : {
              "type" : "boolean",
              "description" : "The setting for `dense_mode`, if it was changed in this request.\nThis setting is however reserved for future, and can not be\nmodified in production environment.\n"
            },
            "starred_message_counts" : {
              "type" : "boolean",
              "description" : "The setting for `starred_message_counts`, if it was changed\nin this request.\n"
            },
            "fluid_layout_width" : {
              "type" : "boolean",
              "description" : "The setting for `fluid_layout_width`, if it was changed\nin this request.\n"
            },
            "high_contrast_mode" : {
              "type" : "boolean",
              "description" : "The setting for `high_contrast_mode`, if it was changed in\nthis request.\nThis setting is however reserved for future, and can not be\nmodified in production environment.\n"
            },
            "color_scheme" : {
              "type" : "integer",
              "description" : "The numerical key corresponding to new `color_scheme` if it was changed in this request.\n"
            },
            "translate_emoticons" : {
              "type" : "boolean",
              "description" : "The setting for `translate_emoticons`, if it was changed in this request.\n"
            },
            "default_language" : {
              "type" : "string",
              "description" : "The language code corresponding to new `default_language` if it was changed in this request.\n"
            },
            "default_view" : {
              "type" : "string",
              "description" : "The new setting for `default_view`, if it was changed in this request.\n"
            },
            "left_side_userlist" : {
              "type" : "boolean",
              "description" : "The setting for `left_side_userlist`, if it was changed in this request.\n"
            },
            "emojiset" : {
              "type" : "string",
              "description" : "The string identifier corresponding to new `emojiset` if it was changed in this request.\n"
            },
            "demote_inactive_streams" : {
              "type" : "integer",
              "description" : "The numerical key corresponding to new `demote_inactive_streams` setting if it was changed in this request.\n"
            },
            "timezone" : {
              "type" : "string",
              "description" : "The setting for `timezone`, if it was changed in this request.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "emojiset" : "google",
            "left_side_userlist" : true,
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/settings/notifications',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateNotificationSettings',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "enable_desktop_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_desktop_notifications`, if it was changed in\nthis request.\n"
            },
            "enable_digest_emails" : {
              "type" : "boolean",
              "description" : "The setting for `enable_digest_emails`, if it was changed in this\nrequest.\n"
            },
            "enable_marketing_emails" : {
              "type" : "boolean",
              "description" : "The setting for `enable_marketing_emails`, if it was changed in this\nrequest.\n"
            },
            "enable_offline_email_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_offline_email_notifications`, if it was changed\nin this request.\n"
            },
            "enable_offline_push_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_offline_push_notifications`, if it was changed\nin this request.\n"
            },
            "enable_online_push_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_online_push_notifications`, if it was changed in\nthis request.\n"
            },
            "enable_sounds" : {
              "type" : "boolean",
              "description" : "The setting for `enable_sounds`, if it was changed in this request.\n"
            },
            "enable_stream_email_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_stream_email_notifications`, if it was changed\nin this request.\n"
            },
            "enable_stream_push_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_stream_push_notifications`, if it was changed in\nthis request.\n"
            },
            "enable_stream_audible_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `enable_stream_audible_notifications`, if it was changed\nin this request.\n"
            },
            "message_content_in_email_notifications" : {
              "type" : "boolean",
              "description" : "The setting for `message_content_in_email_notifications`, if it was\nchanged in this request.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "enable_offline_push_notifications" : true,
            "enable_online_push_notifications" : true,
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'deactivateUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response when attempting to deactivate the only\norganization owner in an organization\n",
          "example" : {
            "msg" : "Cannot deactivate the only organization owner",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user" : {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{email}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserByEmail',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "user" : {
              "$ref" : "#/components/schemas/User"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "msg" : "",
            "result" : "success",
            "user" : {
              "date_joined" : "2019-10-20T07:50:53.729659+00:00",
              "full_name" : "King Hamlet",
              "is_guest" : false,
              "profile_data" : {
                "4" : {
                  "value" : "vim"
                },
                "2" : {
                  "value" : "I am:\n* The prince of Denmark\n* Nephew to the usurping Claudius",
                  "rendered_value" : "<p>I am:</p>\n<ul>\n<li>The prince of Denmark</li>\n<li>Nephew to the usurping Claudius</li>\n</ul>"
                },
                "5" : {
                  "value" : "1900-01-01"
                },
                "7" : {
                  "value" : "[11]"
                },
                "6" : {
                  "value" : "https://blog.zulig.org"
                },
                "1" : {
                  "value" : "+0-11-23-456-7890",
                  "rendered_value" : "<p>+0-11-23-456-7890</p>"
                },
                "8" : {
                  "value" : "zulipbot"
                },
                "3" : {
                  "rendered_value" : "<p>Dark chocolate</p>",
                  "value" : "Dark chocolate"
                }
              },
              "user_id" : 10,
              "is_bot" : false,
              "bot_type" : null,
              "timezone" : "",
              "is_admin" : false,
              "is_owner" : false,
              "is_billing_admin" : false,
              "role" : 400,
              "avatar_url" : "https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1",
              "is_active" : true,
              "email" : "hamlet@zulip.com"
            }
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id_or_email}/presence',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserPresence',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccessBase"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "type" : "object",
          "properties" : {
            "result" : { },
            "msg" : { },
            "presence" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "timestamp" : {
                    "type" : "integer",
                    "description" : "when this update was received; if the timestamp\nis more than a few minutes in the past, the user is offline.\n"
                  },
                  "status" : {
                    "type" : "string",
                    "description" : "either `active` or `idle`: whether the user had\nrecently interacted with Zulip at the time in the timestamp\n(this distinguishes orange vs. green dots in the Zulip web\nUI; orange/idle means we don't know whether the user is\nactually at their computer or just left the Zulip app open\non their desktop).\n"
                  }
                },
                "additionalProperties" : false,
                "description" : "`{client_name}` or `aggregated`: the keys for these objects are\nthe names of the different clients where this user is logged in,\nlike `website`, `ZulipDesktop`, `ZulipTerminal`, or\n`ZulipMobile`. There is also an `aggregated` key, which matches\nthe contents of the object that has been updated most\nrecently. For most applications, you'll just want to look at the\n`aggregated` key.\n"
              },
              "description" : "An object containing the presence details for every client the user has\nlogged into.\n"
            }
          },
          "additionalProperties" : false,
          "example" : {
            "presence" : {
              "website" : {
                "timestamp" : 1532697622,
                "status" : "active"
              },
              "ZulipMobile" : {
                "timestamp" : 1522687421,
                "status" : "active"
              },
              "aggregated" : {
                "timestamp" : 1532697622,
                "status" : "active"
              }
            },
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/muted_users/{muted_user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'muteUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is yourself",
            "example" : {
              "msg" : "Cannot mute self",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is nonexistent or inaccessible",
            "example" : {
              "msg" : "No such user",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is already muted",
            "example" : {
              "msg" : "User already muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}/reactivate',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'reactivateUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'removeUserGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "result" : "success",
            "msg" : ""
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON error response for an invalid user group id",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user group",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/muted_users/{muted_user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'unmuteUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        }, {
          "example" : {
            "msg" : "",
            "result" : "success"
          }
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "oneOf" : [ {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is nonexistent or inaccessible",
            "example" : {
              "msg" : "No such user",
              "result" : "error"
            }
          } ]
        }, {
          "allOf" : [ {
            "$ref" : "#/components/schemas/JsonError"
          }, {
            "description" : "An example JSON response for when the user is not previously muted",
            "example" : {
              "msg" : "User is not muted",
              "result" : "error"
            }
          } ]
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUser',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/CodedError"
        }, {
          "description" : "A typical unsuccessful JSON response",
          "example" : {
            "result" : "error",
            "msg" : "Guests cannot be organization administrators",
            "code" : "BAD_REQUEST"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUserGroup',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad request.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonError"
        }, {
          "description" : "An example JSON response when the user group ID is invalid",
          "example" : {
            "code" : "BAD_REQUEST",
            "msg" : "Invalid user group",
            "result" : "error"
          }
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}/members',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUserGroupMembers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success.",
  "content" : {
    "application/json" : {
      "schema" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/JsonSuccess"
        }, {
          "$ref" : "#/components/schemas/SuccessDescription"
        } ]
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/zulip-outgoing-webhook',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWebhooksApi',
            'userClassname' => 'WebhooksApi',
            'operationId' => 'zulipOutgoingWebhooks',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "Success\n",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_200"
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     * @throws Exception when not supported authorization schema type provided
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };

        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
        $responseFactory = new ResponseFactory();
        $getMockStatusCodeCallback = $mockerOptions['getMockStatusCodeCallback'] ?? null;
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

            if (is_callable($getMockStatusCodeCallback)) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = new OpenApiDataMockerRouteMiddleware($dataMocker, $mockSchemaResponses, $responseFactory, $getMockStatusCodeCallback, $mockAfterCallback);
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
