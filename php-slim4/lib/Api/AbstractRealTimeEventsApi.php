<?php

/**
 * Zulip REST API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Powerful open source group chat
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractRealTimeEventsApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractRealTimeEventsApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * DELETE deleteQueue
     * Summary: Delete an event queue
     * Notes: Delete a previously registered queue.  &#x60;DELETE {{ api_url }}/v1/events&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteQueue(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $queueId = (key_exists('queue_id', $queryParams)) ? $queryParams['queue_id'] : null;
        $message = "How about implementing deleteQueue as a DELETE method in OpenAPIServer\Api\RealTimeEventsApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getEvents
     * Summary: Get events from an event queue
     * Notes: &#x60;GET {{ api_url }}/v1/events&#x60;  This endpoint allows you to receive new events from [a registered event queue](/api/register-queue).  Long-lived clients should use the &#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by &#x60;POST /register&#x60; as the client-side HTTP request timeout for calls to this endpoint.  It is guaranteed to be higher than heartbeat frequency and should be respected by clients to avoid breaking when heartbeat frequency increases.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getEvents(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $queueId = (key_exists('queue_id', $queryParams)) ? $queryParams['queue_id'] : null;
        $lastEventId = (key_exists('last_event_id', $queryParams)) ? $queryParams['last_event_id'] : null;
        $dontBlock = (key_exists('dont_block', $queryParams)) ? $queryParams['dont_block'] : null;
        $message = "How about implementing getEvents as a GET method in OpenAPIServer\Api\RealTimeEventsApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST realTimePost
     * Notes: (Ignored)
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function realTimePost(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $eventTypes = (key_exists('event_types', $queryParams)) ? $queryParams['event_types'] : null;
        $narrow = (key_exists('narrow', $queryParams)) ? $queryParams['narrow'] : null;
        $allPublicStreams = (key_exists('all_public_streams', $queryParams)) ? $queryParams['all_public_streams'] : null;
        $message = "How about implementing realTimePost as a POST method in OpenAPIServer\Api\RealTimeEventsApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST registerQueue
     * Summary: Register an event queue
     * Notes: &#x60;POST {{ api_url }}/v1/register&#x60;  This powerful endpoint can be used to register a Zulip \&quot;event queue\&quot; (subscribed to certain types of \&quot;events\&quot;, or updates to the messages and other Zulip data the current user has access to), as well as to fetch the current state of that data.  (&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is intended primarily for complex applications for which the more convenient &#x60;call_on_each_event&#x60; API is insufficient).  This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be used in subsequent calls to the [\&quot;events\&quot; endpoint](/api/get-events) to request events from the Zulip server using long-polling.  The server will queue events for up to 10 minutes of inactivity. After 10 minutes, your event queue will be garbage-collected.  The server will send &#x60;heartbeat&#x60; events every minute, which makes it easy to implement a robust client that does not miss events unless the client loses network connectivity with the Zulip server for 10 minutes or longer.  Once the server garbage-collects your event queue, the server will [return an error](/api/get-events#bad_event_queue_id-errors) with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from the event queue.  Your software will need to handle that error condition by re-initializing itself (e.g. this is what triggers your browser reloading the Zulip web app when your laptop comes back online after being offline for more than 10 minutes).  When prototyping with this API, we recommend first calling &#x60;register&#x60; with no &#x60;event_types&#x60; parameter to see all the available data from all supported event types.  Before using your client in production, you should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters so that your client only requests the data it needs.  A few minutes doing this often saves 90% of the total bandwidth and other resources consumed by a client using this API.  See the [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html) if you need deeper details about how the Zulip event queue system works, avoids clients needing to worry about large classes of potentially messy races, etc.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function registerQueue(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $applyMarkdown = (key_exists('apply_markdown', $queryParams)) ? $queryParams['apply_markdown'] : null;
        $clientGravatar = (key_exists('client_gravatar', $queryParams)) ? $queryParams['client_gravatar'] : null;
        $slimPresence = (key_exists('slim_presence', $queryParams)) ? $queryParams['slim_presence'] : null;
        $eventTypes = (key_exists('event_types', $queryParams)) ? $queryParams['event_types'] : null;
        $allPublicStreams = (key_exists('all_public_streams', $queryParams)) ? $queryParams['all_public_streams'] : null;
        $includeSubscribers = (key_exists('include_subscribers', $queryParams)) ? $queryParams['include_subscribers'] : null;
        $clientCapabilities = (key_exists('client_capabilities', $queryParams)) ? $queryParams['client_capabilities'] : null;
        $fetchEventTypes = (key_exists('fetch_event_types', $queryParams)) ? $queryParams['fetch_event_types'] : null;
        $narrow = (key_exists('narrow', $queryParams)) ? $queryParams['narrow'] : null;
        $message = "How about implementing registerQueue as a POST method in OpenAPIServer\Api\RealTimeEventsApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST restErrorHandling
     * Summary: Error handling
     * Notes: Common error to many endpoints
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function restErrorHandling(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $message = "How about implementing restErrorHandling as a POST method in OpenAPIServer\Api\RealTimeEventsApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
