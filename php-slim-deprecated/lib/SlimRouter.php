<?php
/**
 * SlimRouter
 *
 * PHP version 7
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\App;
use Slim\Interfaces\RouteInterface;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/dev_fetch_api_key',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'devFetchApiKey',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/fetch_api_key',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractAuthenticationApi',
            'userClassname' => 'AuthenticationApi',
            'operationId' => 'fetchApiKey',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/drafts',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDraftsApi',
            'userClassname' => 'DraftsApi',
            'operationId' => 'createDrafts',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/drafts',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDraftsApi',
            'userClassname' => 'DraftsApi',
            'operationId' => 'getDrafts',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/drafts/{draft_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDraftsApi',
            'userClassname' => 'DraftsApi',
            'operationId' => 'deleteDraft',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/drafts/{draft_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDraftsApi',
            'userClassname' => 'DraftsApi',
            'operationId' => 'editDraft',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/matches_narrow',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'checkMessagesMatchNarrow',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getMessages',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_all_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markAllAsRead',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_stream_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markStreamAsRead',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/mark_topic_as_read',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'markTopicAsRead',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/render',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'renderMessage',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'sendMessage',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/flags',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'updateMessageFlags',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_uploads',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'uploadFile',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/reactions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'addReaction',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'deleteMessage',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_uploads/{realm_id_str}/{filename}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getFileTemporaryUrl',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/history',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getMessageHistory',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'getRawMessage',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}/reactions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'removeReaction',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/messages/{message_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMessagesApi',
            'userClassname' => 'MessagesApi',
            'operationId' => 'updateMessage',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'deleteQueue',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/events',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'getEvents',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/real-time',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'realTimePost',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/register',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'registerQueue',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/rest-error-handling',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRealTimeEventsApi',
            'userClassname' => 'RealTimeEventsApi',
            'operationId' => 'restErrorHandling',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/playgrounds',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'addCodePlayground',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'addLinkifier',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'createCustomProfileField',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/emoji',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getCustomEmoji',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getCustomProfileFields',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/linkifiers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getLinkifiers',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/server_settings',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'getServerSettings',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/profile_fields',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'reorderCustomProfileFields',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/playgrounds/{playground_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'removeCodePlayground',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters/{filter_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'removeLinkifier',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/filters/{filter_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'updateLinkifier',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/realm/emoji/{emoji_name}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractServerAndOrganizationsApi',
            'userClassname' => 'ServerAndOrganizationsApi',
            'operationId' => 'uploadCustomEmoji',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/calls/bigbluebutton/create',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'createBigBlueButtonVideoCall',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/get_stream_id',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreamId',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreams',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getSubscriptions',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions/muted_topics',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'muteTopic',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'subscribe',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'unsubscribe',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions/properties',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateSubscriptionSettings',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/subscriptions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateSubscriptions',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'archiveStream',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}/delete_topic',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'deleteTopic',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/{stream_id}/topics',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getStreamTopics',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}/members',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getSubscribers',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}/subscriptions/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'getSubscriptionStatus',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/streams/{stream_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractStreamsApi',
            'userClassname' => 'StreamsApi',
            'operationId' => 'updateStream',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'createUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/create',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'createUserGroup',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'deactivateOwnUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/attachments',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getAttachments',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getOwnUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserGroups',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUsers',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/typing',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'setTypingStatus',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/settings',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateSettings',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/status',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateStatus',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'deactivateUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{email}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserByEmail',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id_or_email}/presence',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUserPresence',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/muted_users/{muted_user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'muteUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}/reactivate',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'reactivateUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'removeUserGroup',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/me/muted_users/{muted_user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'unmuteUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/users/{user_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUser',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PATCH',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUserGroup',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/user_groups/{user_group_id}/members',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'updateUserGroupMembers',
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/api/v1',
            'path' => '/zulip-outgoing-webhook',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWebhooksApi',
            'userClassname' => 'WebhooksApi',
            'operationId' => 'zulipOutgoingWebhooks',
            'authMethods' => [
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws InvalidArgumentException When no container is provided that implements ContainerInterface
     * @throws Exception When implementation class doesn't exists
     */
    public function __construct($settings = [])
    {
        $this->slimApp = new App($settings);

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
            throw new Exception($message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new Exception($message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new Exception($message);
        };

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new Exception($message);
                return $response->withStatus(501)->write($message);
            };
            $middlewares = [];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ]));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ]));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ]));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $options Params which need to merge into user options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $options)
    {
        if (is_array($this->slimApp->getContainer()['tokenAuthenticationOptions']) === false) {
            return $options;
        }

        return array_merge($this->slimApp->getContainer()['tokenAuthenticationOptions'], $options);
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
