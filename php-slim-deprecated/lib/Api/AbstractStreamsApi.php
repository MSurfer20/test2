<?php
/**
 * AbstractStreamsApi
 *
 * PHP version 7
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;

/**
 * AbstractStreamsApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractStreamsApi
{

    /**
     * @var ContainerInterface Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface $container Slim app container instance
     */
    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }


    /**
     * DELETE archiveStream
     * Summary: Archive a stream
     * Notes: [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function archiveStream(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $streamId = $args['stream_id'];
        $message = "How about implementing archiveStream as a DELETE method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET createBigBlueButtonVideoCall
     * Summary: Create BigBlueButton video call
     * Notes: Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function createBigBlueButtonVideoCall(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $message = "How about implementing createBigBlueButtonVideoCall as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getStreamId
     * Summary: Get stream ID
     * Notes: Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getStreamId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $stream = $request->getQueryParam('stream');
        $message = "How about implementing getStreamId as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getStreamTopics
     * Summary: Get topics in a stream
     * Notes: Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getStreamTopics(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $streamId = $args['stream_id'];
        $message = "How about implementing getStreamTopics as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getStreams
     * Summary: Get all streams
     * Notes: Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getStreams(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $includePublic = $request->getQueryParam('include_public');
        $includeWebPublic = $request->getQueryParam('include_web_public');
        $includeSubscribed = $request->getQueryParam('include_subscribed');
        $includeAllActive = $request->getQueryParam('include_all_active');
        $includeDefault = $request->getQueryParam('include_default');
        $includeOwnerSubscribed = $request->getQueryParam('include_owner_subscribed');
        $message = "How about implementing getStreams as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSubscriptionStatus
     * Summary: Get subscription status
     * Notes: Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11).
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSubscriptionStatus(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $userId = $args['user_id'];
        $streamId = $args['stream_id'];
        $message = "How about implementing getSubscriptionStatus as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * GET getSubscriptions
     * Summary: Get subscribed streams
     * Notes: Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function getSubscriptions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $includeSubscribers = $request->getQueryParam('include_subscribers');
        $message = "How about implementing getSubscriptions as a GET method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * PATCH muteTopic
     * Summary: Topic muting
     * Notes: This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function muteTopic(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $stream = $request->getQueryParam('stream');
        $streamId = $request->getQueryParam('stream_id');
        $topic = $request->getQueryParam('topic');
        $op = $request->getQueryParam('op');
        $message = "How about implementing muteTopic as a PATCH method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * POST subscribe
     * Summary: Subscribe to a stream
     * Notes: Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function subscribe(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $subscriptions = $request->getQueryParam('subscriptions');
        $principals = $request->getQueryParam('principals');
        $authorizationErrorsFatal = $request->getQueryParam('authorization_errors_fatal');
        $announce = $request->getQueryParam('announce');
        $inviteOnly = $request->getQueryParam('invite_only');
        $historyPublicToSubscribers = $request->getQueryParam('history_public_to_subscribers');
        $streamPostPolicy = $request->getQueryParam('stream_post_policy');
        $messageRetentionDays = $request->getQueryParam('message_retention_days');
        $message = "How about implementing subscribe as a POST method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * DELETE unsubscribe
     * Summary: Unsubscribe from a stream
     * Notes: Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function unsubscribe(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $subscriptions = $request->getQueryParam('subscriptions');
        $principals = $request->getQueryParam('principals');
        $message = "How about implementing unsubscribe as a DELETE method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * PATCH updateStream
     * Summary: Update a stream
     * Notes: Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function updateStream(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $streamId = $args['stream_id'];
        $queryParams = $request->getQueryParams();
        $description = $request->getQueryParam('description');
        $newName = $request->getQueryParam('new_name');
        $isPrivate = $request->getQueryParam('is_private');
        $isAnnouncementOnly = $request->getQueryParam('is_announcement_only');
        $streamPostPolicy = $request->getQueryParam('stream_post_policy');
        $historyPublicToSubscribers = $request->getQueryParam('history_public_to_subscribers');
        $messageRetentionDays = $request->getQueryParam('message_retention_days');
        $message = "How about implementing updateStream as a PATCH method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * POST updateSubscriptionSettings
     * Summary: Update subscription settings
     * Notes: This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60;
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function updateSubscriptionSettings(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $subscriptionData = $request->getQueryParam('subscription_data');
        $message = "How about implementing updateSubscriptionSettings as a POST method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }

    /**
     * PATCH updateSubscriptions
     * Summary: Update subscriptions
     * Notes: Update which streams you are are subscribed to.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     */
    public function updateSubscriptions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $delete = $request->getQueryParam('delete');
        $add = $request->getQueryParam('add');
        $message = "How about implementing updateSubscriptions as a PATCH method in OpenAPIServer\Api\StreamsApi class?";
        throw new Exception($message);

        return $response->write($message)->withStatus(501);
    }
}
