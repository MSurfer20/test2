/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI 
{

class OPENAPI_API OpenAPIStreamsApi
{
public:
	OpenAPIStreamsApi();
	~OpenAPIStreamsApi();

	/* Sets the URL Endpoint. 
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();
	
	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used. 
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ArchiveStreamRequest;
	class ArchiveStreamResponse;
	class CreateBigBlueButtonVideoCallRequest;
	class CreateBigBlueButtonVideoCallResponse;
	class GetStreamIdRequest;
	class GetStreamIdResponse;
	class GetStreamTopicsRequest;
	class GetStreamTopicsResponse;
	class GetStreamsRequest;
	class GetStreamsResponse;
	class GetSubscriptionStatusRequest;
	class GetSubscriptionStatusResponse;
	class GetSubscriptionsRequest;
	class GetSubscriptionsResponse;
	class MuteTopicRequest;
	class MuteTopicResponse;
	class SubscribeRequest;
	class SubscribeResponse;
	class UnsubscribeRequest;
	class UnsubscribeResponse;
	class UpdateStreamRequest;
	class UpdateStreamResponse;
	class UpdateSubscriptionSettingsRequest;
	class UpdateSubscriptionSettingsResponse;
	class UpdateSubscriptionsRequest;
	class UpdateSubscriptionsResponse;
	
    DECLARE_DELEGATE_OneParam(FArchiveStreamDelegate, const ArchiveStreamResponse&);
    DECLARE_DELEGATE_OneParam(FCreateBigBlueButtonVideoCallDelegate, const CreateBigBlueButtonVideoCallResponse&);
    DECLARE_DELEGATE_OneParam(FGetStreamIdDelegate, const GetStreamIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetStreamTopicsDelegate, const GetStreamTopicsResponse&);
    DECLARE_DELEGATE_OneParam(FGetStreamsDelegate, const GetStreamsResponse&);
    DECLARE_DELEGATE_OneParam(FGetSubscriptionStatusDelegate, const GetSubscriptionStatusResponse&);
    DECLARE_DELEGATE_OneParam(FGetSubscriptionsDelegate, const GetSubscriptionsResponse&);
    DECLARE_DELEGATE_OneParam(FMuteTopicDelegate, const MuteTopicResponse&);
    DECLARE_DELEGATE_OneParam(FSubscribeDelegate, const SubscribeResponse&);
    DECLARE_DELEGATE_OneParam(FUnsubscribeDelegate, const UnsubscribeResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateStreamDelegate, const UpdateStreamResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateSubscriptionSettingsDelegate, const UpdateSubscriptionSettingsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateSubscriptionsDelegate, const UpdateSubscriptionsResponse&);
    
    FHttpRequestPtr ArchiveStream(const ArchiveStreamRequest& Request, const FArchiveStreamDelegate& Delegate = FArchiveStreamDelegate()) const;
    FHttpRequestPtr CreateBigBlueButtonVideoCall(const CreateBigBlueButtonVideoCallRequest& Request, const FCreateBigBlueButtonVideoCallDelegate& Delegate = FCreateBigBlueButtonVideoCallDelegate()) const;
    FHttpRequestPtr GetStreamId(const GetStreamIdRequest& Request, const FGetStreamIdDelegate& Delegate = FGetStreamIdDelegate()) const;
    FHttpRequestPtr GetStreamTopics(const GetStreamTopicsRequest& Request, const FGetStreamTopicsDelegate& Delegate = FGetStreamTopicsDelegate()) const;
    FHttpRequestPtr GetStreams(const GetStreamsRequest& Request, const FGetStreamsDelegate& Delegate = FGetStreamsDelegate()) const;
    FHttpRequestPtr GetSubscriptionStatus(const GetSubscriptionStatusRequest& Request, const FGetSubscriptionStatusDelegate& Delegate = FGetSubscriptionStatusDelegate()) const;
    FHttpRequestPtr GetSubscriptions(const GetSubscriptionsRequest& Request, const FGetSubscriptionsDelegate& Delegate = FGetSubscriptionsDelegate()) const;
    FHttpRequestPtr MuteTopic(const MuteTopicRequest& Request, const FMuteTopicDelegate& Delegate = FMuteTopicDelegate()) const;
    FHttpRequestPtr Subscribe(const SubscribeRequest& Request, const FSubscribeDelegate& Delegate = FSubscribeDelegate()) const;
    FHttpRequestPtr Unsubscribe(const UnsubscribeRequest& Request, const FUnsubscribeDelegate& Delegate = FUnsubscribeDelegate()) const;
    FHttpRequestPtr UpdateStream(const UpdateStreamRequest& Request, const FUpdateStreamDelegate& Delegate = FUpdateStreamDelegate()) const;
    FHttpRequestPtr UpdateSubscriptionSettings(const UpdateSubscriptionSettingsRequest& Request, const FUpdateSubscriptionSettingsDelegate& Delegate = FUpdateSubscriptionSettingsDelegate()) const;
    FHttpRequestPtr UpdateSubscriptions(const UpdateSubscriptionsRequest& Request, const FUpdateSubscriptionsDelegate& Delegate = FUpdateSubscriptionsDelegate()) const;
    
private:
    void OnArchiveStreamResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FArchiveStreamDelegate Delegate) const;
    void OnCreateBigBlueButtonVideoCallResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateBigBlueButtonVideoCallDelegate Delegate) const;
    void OnGetStreamIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStreamIdDelegate Delegate) const;
    void OnGetStreamTopicsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStreamTopicsDelegate Delegate) const;
    void OnGetStreamsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetStreamsDelegate Delegate) const;
    void OnGetSubscriptionStatusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSubscriptionStatusDelegate Delegate) const;
    void OnGetSubscriptionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetSubscriptionsDelegate Delegate) const;
    void OnMuteTopicResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMuteTopicDelegate Delegate) const;
    void OnSubscribeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSubscribeDelegate Delegate) const;
    void OnUnsubscribeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnsubscribeDelegate Delegate) const;
    void OnUpdateStreamResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateStreamDelegate Delegate) const;
    void OnUpdateSubscriptionSettingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateSubscriptionSettingsDelegate Delegate) const;
    void OnUpdateSubscriptionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateSubscriptionsDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};
	
}
