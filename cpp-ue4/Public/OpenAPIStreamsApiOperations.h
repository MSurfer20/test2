/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIStreamsApi.h"

#include "OpenAPICodedError.h"
#include "OpenAPIJsonError.h"
#include "OpenAPIJsonSuccess.h"
#include "OpenAPIJsonSuccessBase.h"
#include "OpenAPINonExistingStreamError.h"
#include "OpenAPIOneOfobjectobject.h"
#include "OpenAPIOneOfstringinteger.h"

namespace OpenAPI 
{

/* Archive a stream
 *
 * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::ArchiveStreamRequest : public Request
{
public:
    virtual ~ArchiveStreamRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The ID of the stream to access.  */
	int32 StreamId = 0;
};

class OPENAPI_API OpenAPIStreamsApi::ArchiveStreamResponse : public Response
{
public:
    virtual ~ArchiveStreamResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccess Content;
};

/* Create BigBlueButton video call
 *
 * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
*/
class OPENAPI_API OpenAPIStreamsApi::CreateBigBlueButtonVideoCallRequest : public Request
{
public:
    virtual ~CreateBigBlueButtonVideoCallRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class OPENAPI_API OpenAPIStreamsApi::CreateBigBlueButtonVideoCallResponse : public Response
{
public:
    virtual ~CreateBigBlueButtonVideoCallResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Get stream ID
 *
 * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::GetStreamIdRequest : public Request
{
public:
    virtual ~GetStreamIdRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The name of the stream to access.  */
	FString Stream;
};

class OPENAPI_API OpenAPIStreamsApi::GetStreamIdResponse : public Response
{
public:
    virtual ~GetStreamIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Get topics in a stream
 *
 * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::GetStreamTopicsRequest : public Request
{
public:
    virtual ~GetStreamTopicsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The ID of the stream to access.  */
	int32 StreamId = 0;
};

class OPENAPI_API OpenAPIStreamsApi::GetStreamTopicsResponse : public Response
{
public:
    virtual ~GetStreamTopicsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Get all streams
 *
 * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::GetStreamsRequest : public Request
{
public:
    virtual ~GetStreamsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Include all public streams.  */
	TOptional<bool> IncludePublic;
	/* Include all web public streams.  */
	TOptional<bool> IncludeWebPublic;
	/* Include all streams that the user is subscribed to.  */
	TOptional<bool> IncludeSubscribed;
	/* Include all active streams. The user must have administrative privileges to use this parameter.  */
	TOptional<bool> IncludeAllActive;
	/* Include all default streams for the user's realm.  */
	TOptional<bool> IncludeDefault;
	/* If the user is a bot, include all streams that the bot's owner is subscribed to.  */
	TOptional<bool> IncludeOwnerSubscribed;
};

class OPENAPI_API OpenAPIStreamsApi::GetStreamsResponse : public Response
{
public:
    virtual ~GetStreamsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Get subscription status
 *
 * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
*/
class OPENAPI_API OpenAPIStreamsApi::GetSubscriptionStatusRequest : public Request
{
public:
    virtual ~GetSubscriptionStatusRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The target user's ID.  */
	int32 UserId = 0;
	/* The ID of the stream to access.  */
	int32 StreamId = 0;
};

class OPENAPI_API OpenAPIStreamsApi::GetSubscriptionStatusResponse : public Response
{
public:
    virtual ~GetSubscriptionStatusResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Get subscribed streams
 *
 * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::GetSubscriptionsRequest : public Request
{
public:
    virtual ~GetSubscriptionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Whether each returned stream object should include a `subscribers` field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  */
	TOptional<bool> IncludeSubscribers;
};

class OPENAPI_API OpenAPIStreamsApi::GetSubscriptionsResponse : public Response
{
public:
    virtual ~GetSubscriptionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Topic muting
 *
 * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::MuteTopicRequest : public Request
{
public:
    virtual ~MuteTopicRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  */
	FString Topic;
	enum class OpEnum
	{
		Add,
		Remove,
  	};

	static FString EnumToString(const OpEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, OpEnum& EnumValue);
	/* Whether to mute (`add`) or unmute (`remove`) the provided topic.  */
	OpEnum Op;
	/* The name of the stream to access.  */
	TOptional<FString> Stream;
	/* The ID of the stream to access.  */
	TOptional<int32> StreamId;
};

class OPENAPI_API OpenAPIStreamsApi::MuteTopicResponse : public Response
{
public:
    virtual ~MuteTopicResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccess Content;
};

/* Subscribe to a stream
 *
 * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
*/
class OPENAPI_API OpenAPIStreamsApi::SubscribeRequest : public Request
{
public:
    virtual ~SubscribeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* A list of dictionaries containing the key `name` and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key `description` with an appropriate value.  */
	TArray<TSharedPtr<FJsonObject>> Subscriptions;
	/* A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  */
	TOptional<TArray<OpenAPIOneOfstringinteger>> Principals;
	/* A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When `True`, an authorization error is reported as such. When set to `False`, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the `unauthorized` key.  */
	TOptional<bool> AuthorizationErrorsFatal;
	/* If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream's creation.  */
	TOptional<bool> Announce;
	/* As described above, this endpoint will create a new stream if passed a stream name that doesn't already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  */
	TOptional<bool> InviteOnly;
	/* Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  */
	TOptional<bool> HistoryPublicToSubscribers;
	/* Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.  */
	TOptional<int32> StreamPostPolicy;
	/* Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  */
	TOptional<OpenAPIOneOfstringinteger> MessageRetentionDays;
};

class OPENAPI_API OpenAPIStreamsApi::SubscribeResponse : public Response
{
public:
    virtual ~SubscribeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIOneOfobjectobject Content;
};

/* Unsubscribe from a stream
 *
 * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::UnsubscribeRequest : public Request
{
public:
    virtual ~UnsubscribeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* A list of stream names to unsubscribe from. This parameter is called `streams` in our Python API.  */
	TArray<FString> Subscriptions;
	/* A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  */
	TOptional<TArray<OpenAPIOneOfstringinteger>> Principals;
};

class OPENAPI_API OpenAPIStreamsApi::UnsubscribeResponse : public Response
{
public:
    virtual ~UnsubscribeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Update a stream
 *
 * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::UpdateStreamRequest : public Request
{
public:
    virtual ~UpdateStreamRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The ID of the stream to access.  */
	int32 StreamId = 0;
	/* The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  */
	TOptional<FString> Description;
	/* The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  */
	TOptional<FString> NewName;
	/* Change whether the stream is a private stream.  */
	TOptional<bool> IsPrivate;
	/* Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   `stream_post_policy` instead.  */
	TOptional<bool> IsAnnouncementOnly;
	/* Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.  */
	TOptional<int32> StreamPostPolicy;
	/* Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  */
	TOptional<bool> HistoryPublicToSubscribers;
	/* Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  */
	TOptional<OpenAPIOneOfstringinteger> MessageRetentionDays;
};

class OPENAPI_API OpenAPIStreamsApi::UpdateStreamResponse : public Response
{
public:
    virtual ~UpdateStreamResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccess Content;
};

/* Update subscription settings
 *
 * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
*/
class OPENAPI_API OpenAPIStreamsApi::UpdateSubscriptionSettingsRequest : public Request
{
public:
    virtual ~UpdateSubscriptionSettingsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a `stream_id` key that identifies the stream, as well as the `property` being modified and its new `value`.  The possible values for each `property` and `value` pairs are:  * `color` (string): the hex value of the user's display color for the stream. * `is_muted` (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named `in_home_view` (with the   opposite value, `in_home_view=!is_muted`); for   backwards-compatibility, modern Zulip still accepts that value. * `pin_to_top` (boolean): whether to pin the stream at the top of the stream list. * `desktop_notifications` (boolean): whether to show desktop notifications     for all messages sent to the stream. * `audible_notifications` (boolean): whether to play a sound   notification for all messages sent to the stream. * `push_notifications` (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * `email_notifications` (boolean): whether to trigger an email     notification for all messages sent to the stream.  */
	TArray<TSharedPtr<FJsonObject>> SubscriptionData;
};

class OPENAPI_API OpenAPIStreamsApi::UpdateSubscriptionSettingsResponse : public Response
{
public:
    virtual ~UpdateSubscriptionSettingsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

/* Update subscriptions
 *
 * Update which streams you are are subscribed to. 
*/
class OPENAPI_API OpenAPIStreamsApi::UpdateSubscriptionsRequest : public Request
{
public:
    virtual ~UpdateSubscriptionsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* A list of stream names to unsubscribe from.  */
	TOptional<TArray<FString>> _Delete;
	/* A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  */
	TOptional<TArray<TSharedPtr<FJsonObject>>> Add;
};

class OPENAPI_API OpenAPIStreamsApi::UpdateSubscriptionsResponse : public Response
{
public:
    virtual ~UpdateSubscriptionsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
    
    OpenAPIJsonSuccessBase Content;
};

}
