/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI 
{

class OPENAPI_API OpenAPIMessagesApi
{
public:
	OpenAPIMessagesApi();
	~OpenAPIMessagesApi();

	/* Sets the URL Endpoint. 
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();
	
	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used. 
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AddReactionRequest;
	class AddReactionResponse;
	class CheckMessagesMatchNarrowRequest;
	class CheckMessagesMatchNarrowResponse;
	class DeleteMessageRequest;
	class DeleteMessageResponse;
	class GetFileTemporaryUrlRequest;
	class GetFileTemporaryUrlResponse;
	class GetMessageHistoryRequest;
	class GetMessageHistoryResponse;
	class GetMessagesRequest;
	class GetMessagesResponse;
	class GetRawMessageRequest;
	class GetRawMessageResponse;
	class MarkAllAsReadRequest;
	class MarkAllAsReadResponse;
	class MarkStreamAsReadRequest;
	class MarkStreamAsReadResponse;
	class MarkTopicAsReadRequest;
	class MarkTopicAsReadResponse;
	class RemoveReactionRequest;
	class RemoveReactionResponse;
	class RenderMessageRequest;
	class RenderMessageResponse;
	class SendMessageRequest;
	class SendMessageResponse;
	class UpdateMessageRequest;
	class UpdateMessageResponse;
	class UpdateMessageFlagsRequest;
	class UpdateMessageFlagsResponse;
	class UploadFileRequest;
	class UploadFileResponse;
	
    DECLARE_DELEGATE_OneParam(FAddReactionDelegate, const AddReactionResponse&);
    DECLARE_DELEGATE_OneParam(FCheckMessagesMatchNarrowDelegate, const CheckMessagesMatchNarrowResponse&);
    DECLARE_DELEGATE_OneParam(FDeleteMessageDelegate, const DeleteMessageResponse&);
    DECLARE_DELEGATE_OneParam(FGetFileTemporaryUrlDelegate, const GetFileTemporaryUrlResponse&);
    DECLARE_DELEGATE_OneParam(FGetMessageHistoryDelegate, const GetMessageHistoryResponse&);
    DECLARE_DELEGATE_OneParam(FGetMessagesDelegate, const GetMessagesResponse&);
    DECLARE_DELEGATE_OneParam(FGetRawMessageDelegate, const GetRawMessageResponse&);
    DECLARE_DELEGATE_OneParam(FMarkAllAsReadDelegate, const MarkAllAsReadResponse&);
    DECLARE_DELEGATE_OneParam(FMarkStreamAsReadDelegate, const MarkStreamAsReadResponse&);
    DECLARE_DELEGATE_OneParam(FMarkTopicAsReadDelegate, const MarkTopicAsReadResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveReactionDelegate, const RemoveReactionResponse&);
    DECLARE_DELEGATE_OneParam(FRenderMessageDelegate, const RenderMessageResponse&);
    DECLARE_DELEGATE_OneParam(FSendMessageDelegate, const SendMessageResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateMessageDelegate, const UpdateMessageResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateMessageFlagsDelegate, const UpdateMessageFlagsResponse&);
    DECLARE_DELEGATE_OneParam(FUploadFileDelegate, const UploadFileResponse&);
    
    FHttpRequestPtr AddReaction(const AddReactionRequest& Request, const FAddReactionDelegate& Delegate = FAddReactionDelegate()) const;
    FHttpRequestPtr CheckMessagesMatchNarrow(const CheckMessagesMatchNarrowRequest& Request, const FCheckMessagesMatchNarrowDelegate& Delegate = FCheckMessagesMatchNarrowDelegate()) const;
    FHttpRequestPtr DeleteMessage(const DeleteMessageRequest& Request, const FDeleteMessageDelegate& Delegate = FDeleteMessageDelegate()) const;
    FHttpRequestPtr GetFileTemporaryUrl(const GetFileTemporaryUrlRequest& Request, const FGetFileTemporaryUrlDelegate& Delegate = FGetFileTemporaryUrlDelegate()) const;
    FHttpRequestPtr GetMessageHistory(const GetMessageHistoryRequest& Request, const FGetMessageHistoryDelegate& Delegate = FGetMessageHistoryDelegate()) const;
    FHttpRequestPtr GetMessages(const GetMessagesRequest& Request, const FGetMessagesDelegate& Delegate = FGetMessagesDelegate()) const;
    FHttpRequestPtr GetRawMessage(const GetRawMessageRequest& Request, const FGetRawMessageDelegate& Delegate = FGetRawMessageDelegate()) const;
    FHttpRequestPtr MarkAllAsRead(const MarkAllAsReadRequest& Request, const FMarkAllAsReadDelegate& Delegate = FMarkAllAsReadDelegate()) const;
    FHttpRequestPtr MarkStreamAsRead(const MarkStreamAsReadRequest& Request, const FMarkStreamAsReadDelegate& Delegate = FMarkStreamAsReadDelegate()) const;
    FHttpRequestPtr MarkTopicAsRead(const MarkTopicAsReadRequest& Request, const FMarkTopicAsReadDelegate& Delegate = FMarkTopicAsReadDelegate()) const;
    FHttpRequestPtr RemoveReaction(const RemoveReactionRequest& Request, const FRemoveReactionDelegate& Delegate = FRemoveReactionDelegate()) const;
    FHttpRequestPtr RenderMessage(const RenderMessageRequest& Request, const FRenderMessageDelegate& Delegate = FRenderMessageDelegate()) const;
    FHttpRequestPtr SendMessage(const SendMessageRequest& Request, const FSendMessageDelegate& Delegate = FSendMessageDelegate()) const;
    FHttpRequestPtr UpdateMessage(const UpdateMessageRequest& Request, const FUpdateMessageDelegate& Delegate = FUpdateMessageDelegate()) const;
    FHttpRequestPtr UpdateMessageFlags(const UpdateMessageFlagsRequest& Request, const FUpdateMessageFlagsDelegate& Delegate = FUpdateMessageFlagsDelegate()) const;
    FHttpRequestPtr UploadFile(const UploadFileRequest& Request, const FUploadFileDelegate& Delegate = FUploadFileDelegate()) const;
    
private:
    void OnAddReactionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddReactionDelegate Delegate) const;
    void OnCheckMessagesMatchNarrowResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCheckMessagesMatchNarrowDelegate Delegate) const;
    void OnDeleteMessageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDeleteMessageDelegate Delegate) const;
    void OnGetFileTemporaryUrlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetFileTemporaryUrlDelegate Delegate) const;
    void OnGetMessageHistoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMessageHistoryDelegate Delegate) const;
    void OnGetMessagesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetMessagesDelegate Delegate) const;
    void OnGetRawMessageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetRawMessageDelegate Delegate) const;
    void OnMarkAllAsReadResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMarkAllAsReadDelegate Delegate) const;
    void OnMarkStreamAsReadResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMarkStreamAsReadDelegate Delegate) const;
    void OnMarkTopicAsReadResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FMarkTopicAsReadDelegate Delegate) const;
    void OnRemoveReactionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveReactionDelegate Delegate) const;
    void OnRenderMessageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRenderMessageDelegate Delegate) const;
    void OnSendMessageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSendMessageDelegate Delegate) const;
    void OnUpdateMessageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateMessageDelegate Delegate) const;
    void OnUpdateMessageFlagsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateMessageFlagsDelegate Delegate) const;
    void OnUploadFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUploadFileDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};
	
}
