/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace OpenAPI 
{

class OPENAPI_API OpenAPIServerAndOrganizationsApi
{
public:
	OpenAPIServerAndOrganizationsApi();
	~OpenAPIServerAndOrganizationsApi();

	/* Sets the URL Endpoint. 
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();
	
	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used. 
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class AddCodePlaygroundRequest;
	class AddCodePlaygroundResponse;
	class AddLinkifierRequest;
	class AddLinkifierResponse;
	class CreateCustomProfileFieldRequest;
	class CreateCustomProfileFieldResponse;
	class GetCustomEmojiRequest;
	class GetCustomEmojiResponse;
	class GetCustomProfileFieldsRequest;
	class GetCustomProfileFieldsResponse;
	class GetLinkifiersRequest;
	class GetLinkifiersResponse;
	class GetServerSettingsRequest;
	class GetServerSettingsResponse;
	class RemoveCodePlaygroundRequest;
	class RemoveCodePlaygroundResponse;
	class RemoveLinkifierRequest;
	class RemoveLinkifierResponse;
	class ReorderCustomProfileFieldsRequest;
	class ReorderCustomProfileFieldsResponse;
	class UpdateLinkifierRequest;
	class UpdateLinkifierResponse;
	class UploadCustomEmojiRequest;
	class UploadCustomEmojiResponse;
	
    DECLARE_DELEGATE_OneParam(FAddCodePlaygroundDelegate, const AddCodePlaygroundResponse&);
    DECLARE_DELEGATE_OneParam(FAddLinkifierDelegate, const AddLinkifierResponse&);
    DECLARE_DELEGATE_OneParam(FCreateCustomProfileFieldDelegate, const CreateCustomProfileFieldResponse&);
    DECLARE_DELEGATE_OneParam(FGetCustomEmojiDelegate, const GetCustomEmojiResponse&);
    DECLARE_DELEGATE_OneParam(FGetCustomProfileFieldsDelegate, const GetCustomProfileFieldsResponse&);
    DECLARE_DELEGATE_OneParam(FGetLinkifiersDelegate, const GetLinkifiersResponse&);
    DECLARE_DELEGATE_OneParam(FGetServerSettingsDelegate, const GetServerSettingsResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveCodePlaygroundDelegate, const RemoveCodePlaygroundResponse&);
    DECLARE_DELEGATE_OneParam(FRemoveLinkifierDelegate, const RemoveLinkifierResponse&);
    DECLARE_DELEGATE_OneParam(FReorderCustomProfileFieldsDelegate, const ReorderCustomProfileFieldsResponse&);
    DECLARE_DELEGATE_OneParam(FUpdateLinkifierDelegate, const UpdateLinkifierResponse&);
    DECLARE_DELEGATE_OneParam(FUploadCustomEmojiDelegate, const UploadCustomEmojiResponse&);
    
    FHttpRequestPtr AddCodePlayground(const AddCodePlaygroundRequest& Request, const FAddCodePlaygroundDelegate& Delegate = FAddCodePlaygroundDelegate()) const;
    FHttpRequestPtr AddLinkifier(const AddLinkifierRequest& Request, const FAddLinkifierDelegate& Delegate = FAddLinkifierDelegate()) const;
    FHttpRequestPtr CreateCustomProfileField(const CreateCustomProfileFieldRequest& Request, const FCreateCustomProfileFieldDelegate& Delegate = FCreateCustomProfileFieldDelegate()) const;
    FHttpRequestPtr GetCustomEmoji(const GetCustomEmojiRequest& Request, const FGetCustomEmojiDelegate& Delegate = FGetCustomEmojiDelegate()) const;
    FHttpRequestPtr GetCustomProfileFields(const GetCustomProfileFieldsRequest& Request, const FGetCustomProfileFieldsDelegate& Delegate = FGetCustomProfileFieldsDelegate()) const;
    FHttpRequestPtr GetLinkifiers(const GetLinkifiersRequest& Request, const FGetLinkifiersDelegate& Delegate = FGetLinkifiersDelegate()) const;
    FHttpRequestPtr GetServerSettings(const GetServerSettingsRequest& Request, const FGetServerSettingsDelegate& Delegate = FGetServerSettingsDelegate()) const;
    FHttpRequestPtr RemoveCodePlayground(const RemoveCodePlaygroundRequest& Request, const FRemoveCodePlaygroundDelegate& Delegate = FRemoveCodePlaygroundDelegate()) const;
    FHttpRequestPtr RemoveLinkifier(const RemoveLinkifierRequest& Request, const FRemoveLinkifierDelegate& Delegate = FRemoveLinkifierDelegate()) const;
    FHttpRequestPtr ReorderCustomProfileFields(const ReorderCustomProfileFieldsRequest& Request, const FReorderCustomProfileFieldsDelegate& Delegate = FReorderCustomProfileFieldsDelegate()) const;
    FHttpRequestPtr UpdateLinkifier(const UpdateLinkifierRequest& Request, const FUpdateLinkifierDelegate& Delegate = FUpdateLinkifierDelegate()) const;
    FHttpRequestPtr UploadCustomEmoji(const UploadCustomEmojiRequest& Request, const FUploadCustomEmojiDelegate& Delegate = FUploadCustomEmojiDelegate()) const;
    
private:
    void OnAddCodePlaygroundResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddCodePlaygroundDelegate Delegate) const;
    void OnAddLinkifierResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FAddLinkifierDelegate Delegate) const;
    void OnCreateCustomProfileFieldResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCreateCustomProfileFieldDelegate Delegate) const;
    void OnGetCustomEmojiResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCustomEmojiDelegate Delegate) const;
    void OnGetCustomProfileFieldsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetCustomProfileFieldsDelegate Delegate) const;
    void OnGetLinkifiersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetLinkifiersDelegate Delegate) const;
    void OnGetServerSettingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetServerSettingsDelegate Delegate) const;
    void OnRemoveCodePlaygroundResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveCodePlaygroundDelegate Delegate) const;
    void OnRemoveLinkifierResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FRemoveLinkifierDelegate Delegate) const;
    void OnReorderCustomProfileFieldsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FReorderCustomProfileFieldsDelegate Delegate) const;
    void OnUpdateLinkifierResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUpdateLinkifierDelegate Delegate) const;
    void OnUploadCustomEmojiResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUploadCustomEmojiDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};
	
}
