/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMessagesApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI 
{

FString OpenAPIMessagesApi::AddReactionRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}/reactions"), PathParams);
	
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("emoji_name=")) + ToUrlString(EmojiName));
	if(EmojiCode.IsSet())
	{
		QueryParams.Add(FString(TEXT("emoji_code=")) + ToUrlString(EmojiCode.GetValue()));
	}
	if(ReactionType.IsSet())
	{
		QueryParams.Add(FString(TEXT("reaction_type=")) + ToUrlString(ReactionType.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::AddReactionRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::AddReactionResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::AddReactionResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::CheckMessagesMatchNarrowRequest::ComputePath() const
{
	FString Path(TEXT("/messages/matches_narrow"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("msg_ids=")) + CollectionToUrlString_multi(MsgIds, TEXT("msg_ids")));
	QueryParams.Add(FString(TEXT("narrow=")) + CollectionToUrlString_multi(Narrow, TEXT("narrow")));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::CheckMessagesMatchNarrowRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::CheckMessagesMatchNarrowResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::CheckMessagesMatchNarrowResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::DeleteMessageRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}"), PathParams);
	
	return Path;
}

void OpenAPIMessagesApi::DeleteMessageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::DeleteMessageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::DeleteMessageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::GetFileTemporaryUrlRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("realm_id_str"), ToStringFormatArg(RealmIdStr) },
	{ TEXT("filename"), ToStringFormatArg(Filename) } };

	FString Path = FString::Format(TEXT("/user_uploads/{realm_id_str}/{filename}"), PathParams);
	
	return Path;
}

void OpenAPIMessagesApi::GetFileTemporaryUrlRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::GetFileTemporaryUrlResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::GetFileTemporaryUrlResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::GetMessageHistoryRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}/history"), PathParams);
	
	return Path;
}

void OpenAPIMessagesApi::GetMessageHistoryRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::GetMessageHistoryResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::GetMessageHistoryResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::GetMessagesRequest::ComputePath() const
{
	FString Path(TEXT("/messages"));
	TArray<FString> QueryParams;
	if(Anchor.IsSet())
	{
		QueryParams.Add(FString(TEXT("anchor=")) + ToUrlString(Anchor.GetValue()));
	}
	QueryParams.Add(FString(TEXT("num_before=")) + ToUrlString(NumBefore));
	QueryParams.Add(FString(TEXT("num_after=")) + ToUrlString(NumAfter));
	if(Narrow.IsSet())
	{
		QueryParams.Add(FString(TEXT("narrow=")) + CollectionToUrlString_multi(Narrow.GetValue(), TEXT("narrow")));
	}
	if(ClientGravatar.IsSet())
	{
		QueryParams.Add(FString(TEXT("client_gravatar=")) + ToUrlString(ClientGravatar.GetValue()));
	}
	if(ApplyMarkdown.IsSet())
	{
		QueryParams.Add(FString(TEXT("apply_markdown=")) + ToUrlString(ApplyMarkdown.GetValue()));
	}
	if(UseFirstUnreadAnchor.IsSet())
	{
		QueryParams.Add(FString(TEXT("use_first_unread_anchor=")) + ToUrlString(UseFirstUnreadAnchor.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::GetMessagesRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::GetMessagesResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::GetMessagesResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::GetRawMessageRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}"), PathParams);
	
	return Path;
}

void OpenAPIMessagesApi::GetRawMessageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::GetRawMessageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::GetRawMessageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::MarkAllAsReadRequest::ComputePath() const
{
	FString Path(TEXT("/mark_all_as_read"));
	return Path;
}

void OpenAPIMessagesApi::MarkAllAsReadRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::MarkAllAsReadResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::MarkAllAsReadResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::MarkStreamAsReadRequest::ComputePath() const
{
	FString Path(TEXT("/mark_stream_as_read"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("stream_id=")) + ToUrlString(StreamId));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::MarkStreamAsReadRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::MarkStreamAsReadResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::MarkStreamAsReadResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::MarkTopicAsReadRequest::ComputePath() const
{
	FString Path(TEXT("/mark_topic_as_read"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("stream_id=")) + ToUrlString(StreamId));
	QueryParams.Add(FString(TEXT("topic_name=")) + ToUrlString(TopicName));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::MarkTopicAsReadRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::MarkTopicAsReadResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::MarkTopicAsReadResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::RemoveReactionRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}/reactions"), PathParams);
	
	TArray<FString> QueryParams;
	if(EmojiName.IsSet())
	{
		QueryParams.Add(FString(TEXT("emoji_name=")) + ToUrlString(EmojiName.GetValue()));
	}
	if(EmojiCode.IsSet())
	{
		QueryParams.Add(FString(TEXT("emoji_code=")) + ToUrlString(EmojiCode.GetValue()));
	}
	if(ReactionType.IsSet())
	{
		QueryParams.Add(FString(TEXT("reaction_type=")) + ToUrlString(ReactionType.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::RemoveReactionRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("DELETE"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::RemoveReactionResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::RemoveReactionResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::RenderMessageRequest::ComputePath() const
{
	FString Path(TEXT("/messages/render"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("content=")) + ToUrlString(Content));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::RenderMessageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::RenderMessageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::RenderMessageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIMessagesApi::SendMessageRequest::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessagesApi::SendMessageRequest::TypeEnum::_Private:
		return TEXT("private");
	case OpenAPIMessagesApi::SendMessageRequest::TypeEnum::Stream:
		return TEXT("stream");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessagesApi::SendMessageRequest::TypeEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPIMessagesApi::SendMessageRequest::EnumToString(const OpenAPIMessagesApi::SendMessageRequest::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessagesApi::SendMessageRequest::TypeEnum& Value)
{
	static TMap<FString, OpenAPIMessagesApi::SendMessageRequest::TypeEnum> StringToEnum = { 
		{ TEXT("private"), OpenAPIMessagesApi::SendMessageRequest::TypeEnum::_Private },
		{ TEXT("stream"), OpenAPIMessagesApi::SendMessageRequest::TypeEnum::Stream }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;	
}

bool OpenAPIMessagesApi::SendMessageRequest::EnumFromString(const FString& EnumAsString, OpenAPIMessagesApi::SendMessageRequest::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIMessagesApi::SendMessageRequest::TypeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessagesApi::SendMessageRequest::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessagesApi::SendMessageRequest::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIMessagesApi::SendMessageRequest::ComputePath() const
{
	FString Path(TEXT("/messages"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("type=")) + ToUrlString(Type));
	QueryParams.Add(FString(TEXT("to=")) + CollectionToUrlString_multi(To, TEXT("to")));
	QueryParams.Add(FString(TEXT("content=")) + ToUrlString(Content));
	if(Topic.IsSet())
	{
		QueryParams.Add(FString(TEXT("topic=")) + ToUrlString(Topic.GetValue()));
	}
	if(QueueId.IsSet())
	{
		QueryParams.Add(FString(TEXT("queue_id=")) + ToUrlString(QueueId.GetValue()));
	}
	if(LocalId.IsSet())
	{
		QueryParams.Add(FString(TEXT("local_id=")) + ToUrlString(LocalId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::SendMessageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::SendMessageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::SendMessageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::One:
		return TEXT("change_one");
	case OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::Later:
		return TEXT("change_later");
	case OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::All:
		return TEXT("change_all");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPIMessagesApi::UpdateMessageRequest::EnumToString(const OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& Value)
{
	static TMap<FString, OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum> StringToEnum = { 
		{ TEXT("change_one"), OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::One },
		{ TEXT("change_later"), OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::Later },
		{ TEXT("change_all"), OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum::All }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;	
}

bool OpenAPIMessagesApi::UpdateMessageRequest::EnumFromString(const FString& EnumAsString, OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessagesApi::UpdateMessageRequest::PropagateModeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIMessagesApi::UpdateMessageRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("message_id"), ToStringFormatArg(MessageId) } };

	FString Path = FString::Format(TEXT("/messages/{message_id}"), PathParams);
	
	TArray<FString> QueryParams;
	if(Topic.IsSet())
	{
		QueryParams.Add(FString(TEXT("topic=")) + ToUrlString(Topic.GetValue()));
	}
	if(PropagateMode.IsSet())
	{
		QueryParams.Add(FString(TEXT("propagate_mode=")) + ToUrlString(PropagateMode.GetValue()));
	}
	if(SendNotificationToOldThread.IsSet())
	{
		QueryParams.Add(FString(TEXT("send_notification_to_old_thread=")) + ToUrlString(SendNotificationToOldThread.GetValue()));
	}
	if(SendNotificationToNewThread.IsSet())
	{
		QueryParams.Add(FString(TEXT("send_notification_to_new_thread=")) + ToUrlString(SendNotificationToNewThread.GetValue()));
	}
	if(Content.IsSet())
	{
		QueryParams.Add(FString(TEXT("content=")) + ToUrlString(Content.GetValue()));
	}
	if(StreamId.IsSet())
	{
		QueryParams.Add(FString(TEXT("stream_id=")) + ToUrlString(StreamId.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::UpdateMessageRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("PATCH"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::UpdateMessageResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request."));
		break;
	}
}

bool OpenAPIMessagesApi::UpdateMessageResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

inline FString ToString(const OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& Value)
{
	switch (Value)
	{
	case OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum::Add:
		return TEXT("add");
	case OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum::Remove:
		return TEXT("remove");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPIMessagesApi::UpdateMessageFlagsRequest::EnumToString(const OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& Value)
{
	static TMap<FString, OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum> StringToEnum = { 
		{ TEXT("add"), OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum::Add },
		{ TEXT("remove"), OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum::Remove }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;	
}

bool OpenAPIMessagesApi::UpdateMessageFlagsRequest::EnumFromString(const FString& EnumAsString, OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIMessagesApi::UpdateMessageFlagsRequest::OpEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

FString OpenAPIMessagesApi::UpdateMessageFlagsRequest::ComputePath() const
{
	FString Path(TEXT("/messages/flags"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("messages=")) + CollectionToUrlString_multi(Messages, TEXT("messages")));
	QueryParams.Add(FString(TEXT("op=")) + ToUrlString(Op));
	QueryParams.Add(FString(TEXT("flag=")) + ToUrlString(Flag));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIMessagesApi::UpdateMessageFlagsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::UpdateMessageFlagsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::UpdateMessageFlagsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIMessagesApi::UploadFileRequest::ComputePath() const
{
	FString Path(TEXT("/user_uploads"));
	return Path;
}

void OpenAPIMessagesApi::UploadFileRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("multipart/form-data") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (filename) was ignored, cannot be used in JsonBody"));
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		if(Filename.IsSet())
		{
			FormData.AddFilePart(TEXT("filename"), Filename.GetValue());
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		UE_LOG(LogOpenAPI, Error, TEXT("Form parameter (filename) was ignored, Files are not supported in urlencoded requests"));
		
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIMessagesApi::UploadFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Success."));
		break;
	}
}

bool OpenAPIMessagesApi::UploadFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
