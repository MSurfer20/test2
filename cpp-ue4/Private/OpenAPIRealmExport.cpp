/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRealmExport.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

void OpenAPIRealmExport::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());	
	}
	if (ActingUserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("acting_user_id")); WriteJsonValue(Writer, ActingUserId.GetValue());	
	}
	if (ExportTime.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("export_time")); WriteJsonValue(Writer, ExportTime.GetValue());	
	}
	if (DeletedTimestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deleted_timestamp")); WriteJsonValue(Writer, DeletedTimestamp.GetValue());	
	}
	if (FailedTimestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("failed_timestamp")); WriteJsonValue(Writer, FailedTimestamp.GetValue());	
	}
	if (ExportUrl.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("export_url")); WriteJsonValue(Writer, ExportUrl.GetValue());	
	}
	if (Pending.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pending")); WriteJsonValue(Writer, Pending.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIRealmExport::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("acting_user_id"), ActingUserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("export_time"), ExportTime);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deleted_timestamp"), DeletedTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("failed_timestamp"), FailedTimestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("export_url"), ExportUrl);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pending"), Pending);

	return ParseSuccess;
}

}
