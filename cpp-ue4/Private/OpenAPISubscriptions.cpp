/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISubscriptions.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

inline FString ToString(const OpenAPISubscriptions::RoleEnum& Value)
{
	switch (Value)
	{
	case OpenAPISubscriptions::RoleEnum::_20:
		return TEXT("20");
	case OpenAPISubscriptions::RoleEnum::_50:
		return TEXT("50");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPISubscriptions::RoleEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

FString OpenAPISubscriptions::EnumToString(const OpenAPISubscriptions::RoleEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPISubscriptions::RoleEnum& Value)
{
	static TMap<FString, OpenAPISubscriptions::RoleEnum> StringToEnum = { 
		{ TEXT("20"), OpenAPISubscriptions::RoleEnum::_20 },
		{ TEXT("50"), OpenAPISubscriptions::RoleEnum::_50 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPISubscriptions::EnumFromString(const FString& EnumAsString, OpenAPISubscriptions::RoleEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPISubscriptions::RoleEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPISubscriptions::RoleEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPISubscriptions::RoleEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPISubscriptions::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StreamId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stream_id")); WriteJsonValue(Writer, StreamId.GetValue());	
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());	
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());	
	}
	if (RenderedDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("rendered_description")); WriteJsonValue(Writer, RenderedDescription.GetValue());	
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("date_created")); WriteJsonValue(Writer, DateCreated.GetValue());	
	}
	if (InviteOnly.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("invite_only")); WriteJsonValue(Writer, InviteOnly.GetValue());	
	}
	if (Subscribers.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subscribers")); WriteJsonValue(Writer, Subscribers.GetValue());	
	}
	if (DesktopNotifications.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("desktop_notifications")); WriteJsonValue(Writer, DesktopNotifications.GetValue());	
	}
	if (EmailNotifications.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("email_notifications")); WriteJsonValue(Writer, EmailNotifications.GetValue());	
	}
	if (WildcardMentionsNotify.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("wildcard_mentions_notify")); WriteJsonValue(Writer, WildcardMentionsNotify.GetValue());	
	}
	if (PushNotifications.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("push_notifications")); WriteJsonValue(Writer, PushNotifications.GetValue());	
	}
	if (AudibleNotifications.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("audible_notifications")); WriteJsonValue(Writer, AudibleNotifications.GetValue());	
	}
	if (PinToTop.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pin_to_top")); WriteJsonValue(Writer, PinToTop.GetValue());	
	}
	if (EmailAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("email_address")); WriteJsonValue(Writer, EmailAddress.GetValue());	
	}
	if (IsMuted.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_muted")); WriteJsonValue(Writer, IsMuted.GetValue());	
	}
	if (InHomeView.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("in_home_view")); WriteJsonValue(Writer, InHomeView.GetValue());	
	}
	if (IsAnnouncementOnly.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_announcement_only")); WriteJsonValue(Writer, IsAnnouncementOnly.GetValue());	
	}
	if (IsWebPublic.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("is_web_public")); WriteJsonValue(Writer, IsWebPublic.GetValue());	
	}
	if (Role.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("role")); WriteJsonValue(Writer, Role.GetValue());	
	}
	if (Color.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("color")); WriteJsonValue(Writer, Color.GetValue());	
	}
	if (StreamPostPolicy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stream_post_policy")); WriteJsonValue(Writer, StreamPostPolicy.GetValue());	
	}
	if (MessageRetentionDays.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("message_retention_days")); WriteJsonValue(Writer, MessageRetentionDays.GetValue());	
	}
	if (HistoryPublicToSubscribers.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("history_public_to_subscribers")); WriteJsonValue(Writer, HistoryPublicToSubscribers.GetValue());	
	}
	if (FirstMessageId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("first_message_id")); WriteJsonValue(Writer, FirstMessageId.GetValue());	
	}
	if (StreamWeeklyTraffic.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("stream_weekly_traffic")); WriteJsonValue(Writer, StreamWeeklyTraffic.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISubscriptions::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stream_id"), StreamId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("rendered_description"), RenderedDescription);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("date_created"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("invite_only"), InviteOnly);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subscribers"), Subscribers);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("desktop_notifications"), DesktopNotifications);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("email_notifications"), EmailNotifications);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("wildcard_mentions_notify"), WildcardMentionsNotify);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("push_notifications"), PushNotifications);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("audible_notifications"), AudibleNotifications);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pin_to_top"), PinToTop);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("email_address"), EmailAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_muted"), IsMuted);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("in_home_view"), InHomeView);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_announcement_only"), IsAnnouncementOnly);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("is_web_public"), IsWebPublic);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("role"), Role);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("color"), Color);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stream_post_policy"), StreamPostPolicy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("message_retention_days"), MessageRetentionDays);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("history_public_to_subscribers"), HistoryPublicToSubscribers);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("first_message_id"), FirstMessageId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("stream_weekly_traffic"), StreamWeeklyTraffic);

	return ParseSuccess;
}

}
