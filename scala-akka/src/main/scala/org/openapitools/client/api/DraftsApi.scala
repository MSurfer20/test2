/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CodedError
import org.openapitools.client.model.Draft
import org.openapitools.client.model.JsonError
import org.openapitools.client.model.JsonSuccess
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object DraftsApi {

  def apply(baseUrl: String = "https://example.zulipchat.com/api/v1") = new DraftsApi(baseUrl)
}

class DraftsApi(baseUrl: String) {
  
  /**
   * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via `drafts` events.  `POST {{ api_url }}/v1/drafts` 
   * 
   * Expected answers:
   *   code 200 : JsonSuccess (Success.)
   *   code 400 : CodedError (Bad request.)
   * 
   * @param drafts A JSON-encoded list of containing new draft objects. 
   */
  def createDrafts(drafts: Seq[Draft]): ApiRequest[JsonSuccess] =
    ApiRequest[JsonSuccess](ApiMethods.POST, baseUrl, "/drafts", "application/json")
      .withQueryParam("drafts", ArrayValues(drafts, MULTI))
      .withSuccessResponse[JsonSuccess](200)
      .withErrorResponse[CodedError](400)
      

  /**
   * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a `drafts` event.  `DELETE {{ api_url }}/v1/drafts/{draft_id}` 
   * 
   * Expected answers:
   *   code 200 : JsonSuccess (Success.)
   *   code 404 : JsonError (Not Found.)
   * 
   * @param draftId The ID of the draft you want to delete. 
   */
  def deleteDraft(draftId: Int): ApiRequest[JsonSuccess] =
    ApiRequest[JsonSuccess](ApiMethods.DELETE, baseUrl, "/drafts/{draft_id}", "application/json")
      .withPathParam("draft_id", draftId)
      .withSuccessResponse[JsonSuccess](200)
      .withErrorResponse[JsonError](404)
      

  /**
   * Edit a draft on the server. The edit will be automatically synchronized to other clients via `drafts` events.  `PATCH {{ api_url }}/v1/drafts/{draft_id}` 
   * 
   * Expected answers:
   *   code 200 : JsonSuccess (Success.)
   *   code 404 : JsonError (Not Found.)
   * 
   * @param draftId The ID of the draft to be edited. 
   * @param draft A JSON-encoded object containing a replacement draft object for this ID. 
   */
  def editDraft(draftId: Int, draft: Draft): ApiRequest[JsonSuccess] =
    ApiRequest[JsonSuccess](ApiMethods.PATCH, baseUrl, "/drafts/{draft_id}", "application/json")
      .withQueryParam("draft", draft)
      .withPathParam("draft_id", draftId)
      .withSuccessResponse[JsonSuccess](200)
      .withErrorResponse[JsonError](404)
      

  /**
   * Fetch all drafts for the current user.  `GET {{ api_url }}/v1/drafts` 
   * 
   * Expected answers:
   *   code 200 : JsonSuccess (Success.)
   */
  def getDrafts(): ApiRequest[JsonSuccess] =
    ApiRequest[JsonSuccess](ApiMethods.GET, baseUrl, "/drafts", "application/json")
      .withSuccessResponse[JsonSuccess](200)
      



}

