/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.CodedError;
import java.io.File;
import org.openapitools.model.InvalidMessageError;
import org.openapitools.model.JsonSuccess;
import org.openapitools.model.JsonSuccessBase;
import org.openapitools.model.OneOfobjectobject;
import org.openapitools.model.OneOfstringinteger;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.ext.multipart.Attachment;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;
import org.apache.cxf.jaxrs.provider.MultipartProvider;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * Zulip REST API
 *
 * <p>Powerful open source group chat 
 *
 * API tests for MessagesApi.
 */
public class MessagesApiTest {

    private MessagesApi api;

    @Before
    public void setup() {
        List<?> providers = Arrays.asList(new JacksonJsonProvider(), new JacksonXMLProvider(), new MultipartProvider());

        api = JAXRSClientFactory.create("https://example.zulipchat.com/api/v1", MessagesApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Add an emoji reaction
     *
     * Add an [emoji reaction](/help/emoji-reactions) to a message.  &#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void addReactionTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;
        String emojiName = null;
        String emojiCode = null;
        String reactionType = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.addReaction(messageId, emojiName, emojiCode, reactionType);
        // TODO: complete test assertions
    }
    
    /**
     * Check if messages match a narrow
     *
     * Check whether a set of messages match a [narrow](/api/construct-narrow).  &#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a &#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message object identical to how a &#x60;GET /messages&#x60; for the current narrow would have returned the message. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void checkMessagesMatchNarrowTest() throws Exception {
        // TODO: assign appropriate parameter values
        List<Integer> msgIds = null;
        List<Object> narrow = null;

        // TODO: delete this line and uncomment the next
        // Object response = api.checkMessagesMatchNarrow(msgIds, narrow);
        // TODO: complete test assertions
    }
    
    /**
     * Delete a message
     *
     * Permanently delete a message.  &#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void deleteMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.deleteMessage(messageId);
        // TODO: complete test assertions
    }
    
    /**
     * Get public temporary URL
     *
     * Get a temporary URL for access to the file that doesn&#39;t require authentication. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getFileTemporaryUrlTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer realmIdStr = null;
        String filename = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.getFileTemporaryUrl(realmIdStr, filename);
        // TODO: complete test assertions
    }
    
    /**
     * Get a message&#39;s edit history
     *
     * Fetch the message edit history of a previously edited message.  &#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getMessageHistoryTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.getMessageHistory(messageId);
        // TODO: complete test assertions
    }
    
    /**
     * Get messages
     *
     * Fetch message history from a Zulip server.  &#x60;GET {{ api_url }}/v1/messages&#x60;  This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip&#39;s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user&#39;s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an &#x60;anchor&#x60; message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.  We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getMessagesTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer numBefore = null;
        Integer numAfter = null;
        OneOfstringinteger anchor = null;
        List<Object> narrow = null;
        Boolean clientGravatar = null;
        Boolean applyMarkdown = null;
        Boolean useFirstUnreadAnchor = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.getMessages(numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor);
        // TODO: complete test assertions
    }
    
    /**
     * Get a message&#39;s raw Markdown
     *
     * Get the raw content of a message.  &#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message&#39;s raw Markdown (e.g. for pre-filling a message-editing UI). 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getRawMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.getRawMessage(messageId);
        // TODO: complete test assertions
    }
    
    /**
     * Mark all messages as read
     *
     * Marks all of the current user&#39;s unread messages as read.  &#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void markAllAsReadTest() throws Exception {

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.markAllAsRead();
        // TODO: complete test assertions
    }
    
    /**
     * Mark messages in a stream as read
     *
     * Mark all the unread messages in a stream as read. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void markStreamAsReadTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer streamId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.markStreamAsRead(streamId);
        // TODO: complete test assertions
    }
    
    /**
     * Mark messages in a topic as read
     *
     * Mark all the unread messages in a topic as read. 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void markTopicAsReadTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer streamId = null;
        String topicName = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.markTopicAsRead(streamId, topicName);
        // TODO: complete test assertions
    }
    
    /**
     * Remove an emoji reaction
     *
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.  &#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void removeReactionTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;
        String emojiName = null;
        String emojiCode = null;
        String reactionType = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.removeReaction(messageId, emojiName, emojiCode, reactionType);
        // TODO: complete test assertions
    }
    
    /**
     * Render message
     *
     * Render a message to HTML.  &#x60;POST {{ api_url }}/v1/messages/render&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void renderMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        String content = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.renderMessage(content);
        // TODO: complete test assertions
    }
    
    /**
     * Send a message
     *
     * Send a stream or a private message.  &#x60;POST {{ api_url }}/v1/messages&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void sendMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        String type = null;
        List<Integer> to = null;
        String content = null;
        String topic = null;
        String queueId = null;
        String localId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.sendMessage(type, to, content, topic, queueId, localId);
        // TODO: complete test assertions
    }
    
    /**
     * Edit a message
     *
     * Edit/update the content or topic of a message.  &#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;  &#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to &#x60;✔ {original_topic}&#x60;.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void updateMessageTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer messageId = null;
        String topic = null;
        String propagateMode = null;
        Boolean sendNotificationToOldThread = null;
        Boolean sendNotificationToNewThread = null;
        String content = null;
        Integer streamId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.updateMessage(messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId);
        // TODO: complete test assertions
    }
    
    /**
     * Update personal message flags
     *
     * Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60; on a collection of message IDs.  &#x60;POST {{ api_url }}/v1/messages/flags&#x60;  For updating the &#x60;read&#x60; flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read). 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void updateMessageFlagsTest() throws Exception {
        // TODO: assign appropriate parameter values
        List<Integer> messages = null;
        String op = null;
        String flag = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.updateMessageFlags(messages, op, flag);
        // TODO: complete test assertions
    }
    
    /**
     * Upload a file
     *
     * Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void uploadFileTest() throws Exception {
        // TODO: assign appropriate parameter values
        Attachment filename = new Attachment("filename", MediaType.TEXT_PLAIN, "Dummy attachment content");

        // TODO: delete this line and uncomment the next
        // JsonSuccessBase response = api.uploadFile(filename);
        // TODO: complete test assertions
    }
    
}
