/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.CodedError;
import org.openapitools.model.Draft;
import org.openapitools.model.JsonError;
import org.openapitools.model.JsonSuccess;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.ext.multipart.Attachment;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;
import org.apache.cxf.jaxrs.provider.MultipartProvider;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * Zulip REST API
 *
 * <p>Powerful open source group chat 
 *
 * API tests for DraftsApi.
 */
public class DraftsApiTest {

    private DraftsApi api;

    @Before
    public void setup() {
        List<?> providers = Arrays.asList(new JacksonJsonProvider(), new JacksonXMLProvider(), new MultipartProvider());

        api = JAXRSClientFactory.create("https://example.zulipchat.com/api/v1", DraftsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Create drafts
     *
     * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createDraftsTest() throws Exception {
        // TODO: assign appropriate parameter values
        List<Draft> drafts = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.createDrafts(drafts);
        // TODO: complete test assertions
    }
    
    /**
     * Delete a draft
     *
     * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void deleteDraftTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer draftId = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.deleteDraft(draftId);
        // TODO: complete test assertions
    }
    
    /**
     * Edit a draft
     *
     * Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void editDraftTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer draftId = null;
        Draft draft = null;

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.editDraft(draftId, draft);
        // TODO: complete test assertions
    }
    
    /**
     * Get drafts
     *
     * Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getDraftsTest() throws Exception {

        // TODO: delete this line and uncomment the next
        // JsonSuccess response = api.getDrafts();
        // TODO: complete test assertions
    }
    
}
