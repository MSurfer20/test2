/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.OneOfInvalidApiKeyErrorMissingArgumentErrorUserNotAuthorizedError;
import org.openapitools.model.OneOfRateLimitedError;
import org.openapitools.model.OneOfUserDeactivatedErrorRealmDeactivatedError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-08T21:15:43.843274Z[Etc/UTC]")
@Validated
@Api(value = "rest-error-handling", description = "the rest-error-handling API")
public interface RestErrorHandlingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /rest-error-handling : Error handling
     * Common error to many endpoints 
     *
     * @return Bad request.  (status code 400)
     *         or Unauthorized.  (status code 401)
     *         or Rate limit exceeded.  (status code 429)
     */
    @ApiOperation(value = "Error handling", nickname = "restErrorHandling", notes = "Common error to many endpoints ", tags={ "real_time_events", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Bad request. ", response = OneOfInvalidApiKeyErrorMissingArgumentErrorUserNotAuthorizedError.class),
        @ApiResponse(code = 401, message = "Unauthorized. ", response = OneOfUserDeactivatedErrorRealmDeactivatedError.class),
        @ApiResponse(code = 429, message = "Rate limit exceeded. ", response = OneOfRateLimitedError.class) })
    @PostMapping(
        value = "/rest-error-handling",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> restErrorHandling() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
