/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.JsonError;
import org.openapitools.model.JsonSuccess;
import org.openapitools.model.JsonSuccessBase;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-08T20:43:06.633496Z[Etc/UTC]")
@Validated
@Api(value = "user_groups", description = "the user_groups API")
public interface UserGroupsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user_groups/create : Create a user group
     * Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
     *
     * @param name The name of the user group.  (required)
     * @param description The description of the user group.  (required)
     * @param members An array containing the user IDs of the initial members for the new user group.  (required)
     * @return Success. (status code 200)
     *         or Bad request. (status code 400)
     */
    @ApiOperation(value = "Create a user group", nickname = "createUserGroup", notes = "Create a new [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/create` ", response = JsonSuccess.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccess.class),
        @ApiResponse(code = 400, message = "Bad request.", response = JsonError.class) })
    @PostMapping(
        value = "/user_groups/create",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccess> createUserGroup(@NotNull @ApiParam(value = "The name of the user group. ", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The description of the user group. ", required = true) @Valid @RequestParam(value = "description", required = true) String description,@NotNull @ApiParam(value = "An array containing the user IDs of the initial members for the new user group. ", required = true) @Valid @RequestParam(value = "members", required = true) List<Integer> members) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user_groups : Get user groups
     * {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
     *
     * @return Success. (status code 200)
     */
    @ApiOperation(value = "Get user groups", nickname = "getUserGroups", notes = "{!api-members-only.md!}  Fetches all of the user groups in the organization.  `GET {{ api_url }}/v1/user_groups` ", response = JsonSuccessBase.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccessBase.class) })
    @GetMapping(
        value = "/user_groups",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccessBase> getUserGroups() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user_groups/{user_group_id} : Delete a user group
     * Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
     *
     * @param userGroupId The ID of the target user group.  (required)
     * @return Success. (status code 200)
     *         or Bad request. (status code 400)
     */
    @ApiOperation(value = "Delete a user group", nickname = "removeUserGroup", notes = "Delete a [user group](/help/user-groups).  `DELETE {{ api_url }}/v1/user_groups/{user_group_id}` ", response = JsonSuccess.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccess.class),
        @ApiResponse(code = 400, message = "Bad request.", response = JsonError.class) })
    @DeleteMapping(
        value = "/user_groups/{user_group_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccess> removeUserGroup(@ApiParam(value = "The ID of the target user group. ",required=true) @PathVariable("user_group_id") Integer userGroupId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /user_groups/{user_group_id} : Update a user group
     * Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
     *
     * @param userGroupId The ID of the target user group.  (required)
     * @param name The new name of the group.  (required)
     * @param description The new description of the group.  (required)
     * @return Success. (status code 200)
     *         or Bad request. (status code 400)
     */
    @ApiOperation(value = "Update a user group", nickname = "updateUserGroup", notes = "Update the name or description of a [user group](/help/user-groups).  `PATCH {{ api_url }}/v1/user_groups/{user_group_id}` ", response = JsonSuccess.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccess.class),
        @ApiResponse(code = 400, message = "Bad request.", response = JsonError.class) })
    @PatchMapping(
        value = "/user_groups/{user_group_id}",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccess> updateUserGroup(@ApiParam(value = "The ID of the target user group. ",required=true) @PathVariable("user_group_id") Integer userGroupId,@NotNull @ApiParam(value = "The new name of the group. ", required = true) @Valid @RequestParam(value = "name", required = true) String name,@NotNull @ApiParam(value = "The new description of the group. ", required = true) @Valid @RequestParam(value = "description", required = true) String description) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user_groups/{user_group_id}/members : Update user group members
     * Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
     *
     * @param userGroupId The ID of the target user group.  (required)
     * @param delete The list of user ids to be removed from the user group.  (optional)
     * @param add The list of user ids to be added to the user group.  (optional)
     * @return Success. (status code 200)
     */
    @ApiOperation(value = "Update user group members", nickname = "updateUserGroupMembers", notes = "Update the members of a [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/{user_group_id}/members` ", response = JsonSuccess.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccess.class) })
    @PostMapping(
        value = "/user_groups/{user_group_id}/members",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccess> updateUserGroupMembers(@ApiParam(value = "The ID of the target user group. ",required=true) @PathVariable("user_group_id") Integer userGroupId,@ApiParam(value = "The list of user ids to be removed from the user group. ") @Valid @RequestParam(value = "delete", required = false) List<Integer> delete,@ApiParam(value = "The list of user ids to be added to the user group. ") @Valid @RequestParam(value = "add", required = false) List<Integer> add) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
