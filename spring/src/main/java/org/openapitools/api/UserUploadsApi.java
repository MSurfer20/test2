/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.JsonSuccessBase;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "user_uploads", description = "the user_uploads API")
public interface UserUploadsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user_uploads/{realm_id_str}/{filename} : Get public temporary URL
     * Get a temporary URL for access to the file that doesn&#39;t require authentication. 
     *
     * @param realmIdStr The realm id.  (required)
     * @param filename Path to the URL.  (required)
     * @return Success. (status code 200)
     */
    @ApiOperation(value = "Get public temporary URL", nickname = "getFileTemporaryUrl", notes = "Get a temporary URL for access to the file that doesn't require authentication. ", response = JsonSuccessBase.class, tags={ "messages", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccessBase.class) })
    @GetMapping(
        value = "/user_uploads/{realm_id_str}/{filename}",
        produces = { "application/json" }
    )
    default ResponseEntity<JsonSuccessBase> getFileTemporaryUrl(@ApiParam(value = "The realm id. ",required=true) @PathVariable("realm_id_str") Integer realmIdStr,@ApiParam(value = "Path to the URL. ",required=true) @PathVariable("filename") String filename) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /user_uploads : Upload a file
     * Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message 
     *
     * @param filename  (optional)
     * @return Success. (status code 200)
     */
    @ApiOperation(value = "Upload a file", nickname = "uploadFile", notes = "Upload a single file and get the corresponding URI.  `POST {{ api_url }}/v1/user_uploads`  Initially, only you will be able to access the link.  To share the uploaded file, you'll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message ", response = JsonSuccessBase.class, tags={ "messages", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success.", response = JsonSuccessBase.class) })
    @PostMapping(
        value = "/user_uploads",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<JsonSuccessBase> uploadFile(@ApiParam(value = "") @Valid @RequestPart(value = "filename", required = false) MultipartFile filename) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
