/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.Location

object Paths {
    /**
     * Check if messages match a narrow
     * Check whether a set of messages match a [narrow](/api/construct-narrow).

&#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;

For many common narrows (E.g. a topic), clients can write an
efficient client-side check to determine whether a
newly arrived message belongs in the view.

This endpoint is designed to allow clients to handle more complex narrows
for which the client does not (or in the case of full-text search,
cannot) implement this check.

The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match
those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a
&#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message
object identical to how a &#x60;GET /messages&#x60; for the current narrow would have
returned the message.

     * @param msgIds List of IDs for the messages to check. 
     * @param narrow A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). 
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages/matches_narrow") class checkMessagesMatchNarrow(val msgIds: kotlin.Array<kotlin.Int>, val narrow: kotlin.Array<kotlin.Any>)

    /**
     * Delete a message
     * Permanently delete a message.

&#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;

This API corresponds to the
[delete a message completely][delete-completely] feature documented in
the Zulip Help Center.

[delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely

     * @param messageId The target message&#39;s ID.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages/{message_id}") class deleteMessage(val messageId: kotlin.Int)

    /**
     * Get public temporary URL
     * Get a temporary URL for access to the file that doesn&#39;t require authentication.

     * @param realmIdStr The realm id.  
     * @param filename Path to the URL.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/user_uploads/{realm_id_str}/{filename}") class getFileTemporaryUrl(val realmIdStr: kotlin.Int, val filename: kotlin.String)

    /**
     * Get a message&#39;s edit history
     * Fetch the message edit history of a previously edited message.

&#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;

Note that edit history may be disabled in some organizations; see the
[Zulip Help Center documentation on editing messages][edit-settings].

[edit-settings]: /help/view-a-messages-edit-history

     * @param messageId The target message&#39;s ID.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages/{message_id}/history") class getMessageHistory(val messageId: kotlin.Int)

    /**
     * Get messages
     * Fetch message history from a Zulip server.

&#x60;GET {{ api_url }}/v1/messages&#x60;

This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch
message history from a Zulip server.  It is useful both for Zulip
clients (e.g. the web, desktop, mobile, and terminal clients) as well
as bots, API clients, backup scripts, etc.

By specifying a [narrow filter](/api/construct-narrow), you can use
this endpoint to fetch the messages matching any search query that is
supported by Zulip&#39;s powerful full-text search backend.

When a narrow is not specified, it can be used to fetch a user&#39;s
message history. (We recommend paginating to 1000 messages at a time.)

In either case, you specify an &#x60;anchor&#x60; message (or ask the server to
calculate the first unread message for you and use that as the
anchor), as well as a number of messages before and after the anchor
message.  The server returns those messages, sorted by message ID, as
well as some metadata that makes it easy for a client to determine
whether there are more messages matching the query that were not
returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.

We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to
avoid generating very large HTTP responses. A maximum of 5000 messages
can be obtained per request; attempting to exceed this will result in an
error.

     * @param numBefore The number of messages with IDs less than the anchor to retrieve.  
     * @param numAfter The number of messages with IDs greater than the anchor to retrieve.  
     * @param anchor Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value).  (optional)
     * @param narrow The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow).  (optional)
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param applyMarkdown If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered.  (optional, default to true)
     * @param useFirstUnreadAnchor Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages") class getMessages(val numBefore: kotlin.Int, val numAfter: kotlin.Int, val anchor: OneOfLessThanStringCommaIntegerGreaterThan? = null, val narrow: kotlin.Array<kotlin.Any>? = null, val clientGravatar: kotlin.Boolean? = null, val applyMarkdown: kotlin.Boolean? = null, val useFirstUnreadAnchor: kotlin.Boolean? = null)

    /**
     * Get a message&#39;s raw Markdown
     * Get the raw content of a message.

&#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;

This is a rarely-used endpoint relevant for clients that primarily
work with HTML-rendered messages but might need to occasionally fetch
the message&#39;s raw Markdown (e.g. for pre-filling a message-editing
UI).

     * @param messageId The target message&#39;s ID.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages/{message_id}") class getRawMessage(val messageId: kotlin.Int)

    /**
     * Remove an emoji reaction
     * Remove an [emoji reaction](/help/emoji-reactions) from a message.

&#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60;

     * @param messageId The target message&#39;s ID.  
     * @param emojiName The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name.  (optional)
     * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji.  (optional)
     * @param reactionType If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified.  (optional)
     */
    @KtorExperimentalLocationsAPI
    @Location("/messages/{message_id}/reactions") class removeReaction(val messageId: kotlin.Int, val emojiName: kotlin.String? = null, val emojiCode: kotlin.String? = null, val reactionType: kotlin.String? = null)

    /**
     * Delete an event queue
     * Delete a previously registered queue.

&#x60;DELETE {{ api_url }}/v1/events&#x60;

     * @param queueId The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)).  
     */
    @KtorExperimentalLocationsAPI
    @Location("/events") class deleteQueue(val queueId: kotlin.String)

    /**
     * Get events from an event queue
     * &#x60;GET {{ api_url }}/v1/events&#x60;

This endpoint allows you to receive new events from
[a registered event queue](/api/register-queue).

Long-lived clients should use the
&#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by
&#x60;POST /register&#x60; as the client-side HTTP request timeout for
calls to this endpoint.  It is guaranteed to be higher than
heartbeat frequency and should be respected by clients to
avoid breaking when heartbeat frequency increases.

     * @param queueId The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)).  
     * @param lastEventId The highest event ID in this queue that you&#39;ve received and wish to acknowledge. See the [code for &#x60;call_on_each_event&#x60;](https://github.com/zulip/python-zulip-api/blob/master/zulip/zulip/__init__.py) in the [zulip Python module](https://github.com/zulip/python-zulip-api) for an example implementation of correctly processing each event exactly once.  (optional)
     * @param dontBlock Set to &#x60;true&#x60; if the client is requesting a nonblocking reply. If not specified, the request will block until either a new event is available or a few minutes have passed, in which case the server will send the client a heartbeat event.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/events") class getEvents(val queueId: kotlin.String, val lastEventId: kotlin.Int? = null, val dontBlock: kotlin.Boolean? = null)

    /**
     * Get all custom emoji
     * Get all the custom emoji in the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/emoji&#x60;

     */
    @KtorExperimentalLocationsAPI
    @Location("/realm/emoji") class getCustomEmoji()

    /**
     * Get all custom profile fields
     * Get all the [custom profile fields](/help/add-custom-profile-fields)
configured for the user&#39;s organization.

&#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60;

     */
    @KtorExperimentalLocationsAPI
    @Location("/realm/profile_fields") class getCustomProfileFields()

    /**
     * Get linkifiers
     * List all of an organization&#39;s configured
[linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;

**Changes**: New in Zulip 4.0 (feature level 54). On older versions,
a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in
a &#x60;[pattern, url_format, id]&#x60; tuple format.

     */
    @KtorExperimentalLocationsAPI
    @Location("/realm/linkifiers") class getLinkifiers()

    /**
     * Get server settings
     * Fetch global settings for a Zulip server.

&#x60;GET {{ api_url }}/v1/server_settings&#x60;

**Note:** this endpoint does not require any authentication at all, and you can use it to check:

* If this is a Zulip server, and if so, what version of Zulip it&#39;s running.
* What a Zulip client (e.g. a mobile app or
[zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to
know in order to display a login prompt for the server (e.g. what
authentication methods are available).

     */
    @KtorExperimentalLocationsAPI
    @Location("/server_settings") class getServerSettings()

    /**
     * Remove a code playground
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously
configured for an organization.

&#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 49).

     * @param playgroundId The ID of the playground that you want to remove.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/realm/playgrounds/{playground_id}") class removeCodePlayground(val playgroundId: kotlin.Int)

    /**
     * Remove a linkifier
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular
expression patterns that are automatically linkified when they appear
in messages and topics.

&#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60;

     * @param filterId The ID of the linkifier that you want to remove.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/realm/filters/{filter_id}") class removeLinkifier(val filterId: kotlin.Int)

    /**
     * Archive a stream
     * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.

&#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;

     * @param streamId The ID of the stream to access.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/streams/{stream_id}") class archiveStream(val streamId: kotlin.Int)

    /**
     * Create BigBlueButton video call
     * Create a video call URL for a BigBlueButton video call.
Requires BigBlueButton to be configured on the Zulip server.

     */
    @KtorExperimentalLocationsAPI
    @Location("/calls/bigbluebutton/create") class createBigBlueButtonVideoCall()

    /**
     * Get stream ID
     * Get the unique ID of a given stream.

&#x60;GET {{ api_url }}/v1/get_stream_id&#x60;

     * @param stream The name of the stream to access.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/get_stream_id") class getStreamId(val stream: kotlin.String)

    /**
     * Get topics in a stream
     * Get all the topics in a specific stream

&#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;

     * @param streamId The ID of the stream to access.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me/{stream_id}/topics") class getStreamTopics(val streamId: kotlin.Int)

    /**
     * Get all streams
     * Get all streams that the user has access to.

&#x60;GET {{ api_url }}/v1/streams&#x60;

     * @param includePublic Include all public streams.  (optional, default to true)
     * @param includeWebPublic Include all web public streams.  (optional, default to false)
     * @param includeSubscribed Include all streams that the user is subscribed to.  (optional, default to true)
     * @param includeAllActive Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
     * @param includeDefault Include all default streams for the user&#39;s realm.  (optional, default to false)
     * @param includeOwnerSubscribed If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/streams") class getStreams(val includePublic: kotlin.Boolean? = null, val includeWebPublic: kotlin.Boolean? = null, val includeSubscribed: kotlin.Boolean? = null, val includeAllActive: kotlin.Boolean? = null, val includeDefault: kotlin.Boolean? = null, val includeOwnerSubscribed: kotlin.Boolean? = null)

    /**
     * Get subscription status
     * Check whether a user is subscribed to a stream.

&#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;

**Changes**: New in Zulip 3.0 (feature level 11).

     * @param userId The target user&#39;s ID.  
     * @param streamId The ID of the stream to access.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/{user_id}/subscriptions/{stream_id}") class getSubscriptionStatus(val userId: kotlin.Int, val streamId: kotlin.Int)

    /**
     * Get subscribed streams
     * Get all streams that the user is subscribed to.

&#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;

     * @param includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me/subscriptions") class getSubscriptions(val includeSubscribers: kotlin.Boolean? = null)

    /**
     * Unsubscribe from a stream
     * Unsubscribe yourself or other users from one or more streams.

&#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;

     * @param subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
     * @param principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me/subscriptions") class unsubscribe(val subscriptions: kotlin.Array<kotlin.String>, val principals: kotlin.Array<OneOfLessThanStringCommaIntegerGreaterThan>? = null)

    /**
     * Deactivate own user
     * Deactivates the user&#39;s account.  See also the administrative endpoint for
[deactivating another user](/api/deactivate-user).

&#x60;DELETE {{ api_url }}/v1/users/me&#x60;

This endpoint is primarily useful to Zulip clients providing a user settings UI.

     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me") class deactivateOwnUser()

    /**
     * Deactivate a user
     * [Deactivates a
user](https://zulip.com/help/deactivate-or-reactivate-a-user)
given their user ID.

&#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60;

     * @param userId The target user&#39;s ID.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/{user_id}") class deactivateUser(val userId: kotlin.Int)

    /**
     * Get attachments
     * Fetch metadata on files uploaded by the requesting user.

&#x60;GET {{ api_url }}/v1/attachments&#x60;

     */
    @KtorExperimentalLocationsAPI
    @Location("/attachments") class getAttachments()

    /**
     * Get own user
     * Get basic data about the user/bot that requests this endpoint.

&#x60;GET {{ api_url }}/v1/users/me&#x60;

     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me") class getOwnUser()

    /**
     * Get a user
     * Fetch details for a single user in the organization.

&#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;

You can also fetch details on [all users in the organization](/api/get-users)
or [by email](/api/get-user-by-email).

*This endpoint is new in Zulip Server 3.0 (feature level 1).*

     * @param userId The target user&#39;s ID.  
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/{user_id}") class getUser(val userId: kotlin.Int, val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Get a user by email
     * Fetch details for a single user in the organization given a Zulip display
email address.

&#x60;GET {{ api_url }}/v1/users/{email}&#x60;

Note that this endpoint uses Zulip display emails addresses
for organizations that have configured limited [email address
visibility](/help/restrict-visibility-of-email-addresses).

You can also fetch details on [all users in the organization](/api/get-users) or
[by user ID](/api/get-user).  Fetching by user ID is generally recommended
when possible, as users can
[change their email address](/help/change-your-email-address).

*This endpoint is new in Zulip Server 4.0 (feature level 39).*

     * @param email The email address of the user whose details you want to fetch.  
     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/{email}") class getUserByEmail(val email: kotlin.String, val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Get user groups
     * {!api-members-only.md!}

Fetches all of the user groups in the organization.

&#x60;GET {{ api_url }}/v1/user_groups&#x60;

     */
    @KtorExperimentalLocationsAPI
    @Location("/user_groups") class getUserGroups()

    /**
     * Get user presence
     * Get the presence status for a specific user.

This endpoint is most useful for embedding data about a user&#39;s
presence status in other sites (E.g. an employee directory).  Full
Zulip clients like mobile/desktop apps will want to use the main
presence endpoint, which returns data for all active users in the
organization, instead.

&#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;

See
[Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)
for details on the data model for presence in Zulip.

     * @param userIdOrEmail The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/{user_id_or_email}/presence") class getUserPresence(val userIdOrEmail: kotlin.String)

    /**
     * Get all users
     * Retrieve details on all users in the organization.  Optionally
includes values of [custom profile field](/help/add-custom-profile-fields).

&#x60;GET {{ api_url }}/v1/users&#x60;

You can also [fetch details on a single user](/api/get-user).

     * @param clientGravatar Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     * @param includeCustomProfileFields Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     */
    @KtorExperimentalLocationsAPI
    @Location("/users") class getUsers(val clientGravatar: kotlin.Boolean? = null, val includeCustomProfileFields: kotlin.Boolean? = null)

    /**
     * Delete a user group
     * Delete a [user group](/help/user-groups).

&#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60;

     * @param userGroupId The ID of the target user group.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/user_groups/{user_group_id}") class removeUserGroup(val userGroupId: kotlin.Int)

    /**
     * Unmute a user
     * This endpoint unmutes a user.

&#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;

**Changes**: New in Zulip 4.0 (feature level 48).

     * @param mutedUserId The ID of the user to mute/un-mute.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/users/me/muted_users/{muted_user_id}") class unmuteUser(val mutedUserId: kotlin.Int)

}
