/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ZulipRestApi);
  }
}(this, function(expect, ZulipRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ZulipRestApi.User();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('User', function() {
    it('should create an instance of User', function() {
      // uncomment below and update the code to test User
      //var instance = new ZulipRestApi.User();
      //expect(instance).to.be.a(ZulipRestApi.User);
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isBot (base name: "is_bot")', function() {
      // uncomment below and update the code to test the property isBot
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property avatarUrl (base name: "avatar_url")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property avatarVersion (base name: "avatar_version")', function() {
      // uncomment below and update the code to test the property avatarVersion
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property fullName (base name: "full_name")', function() {
      // uncomment below and update the code to test the property fullName
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isAdmin (base name: "is_admin")', function() {
      // uncomment below and update the code to test the property isAdmin
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isOwner (base name: "is_owner")', function() {
      // uncomment below and update the code to test the property isOwner
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isBillingAdmin (base name: "is_billing_admin")', function() {
      // uncomment below and update the code to test the property isBillingAdmin
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property botType (base name: "bot_type")', function() {
      // uncomment below and update the code to test the property botType
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property botOwnerId (base name: "bot_owner_id")', function() {
      // uncomment below and update the code to test the property botOwnerId
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isActive (base name: "is_active")', function() {
      // uncomment below and update the code to test the property isActive
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property isGuest (base name: "is_guest")', function() {
      // uncomment below and update the code to test the property isGuest
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property timezone (base name: "timezone")', function() {
      // uncomment below and update the code to test the property timezone
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property dateJoined (base name: "date_joined")', function() {
      // uncomment below and update the code to test the property dateJoined
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property deliveryEmail (base name: "delivery_email")', function() {
      // uncomment below and update the code to test the property deliveryEmail
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

    it('should have the property profileData (base name: "profile_data")', function() {
      // uncomment below and update the code to test the property profileData
      //var instane = new ZulipRestApi.User();
      //expect(instance).to.be();
    });

  });

}));
