# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Hotspot(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay: float=None, name: str=None, title: str=None, description: str=None):
        """Hotspot - a model defined in OpenAPI

        :param delay: The delay of this Hotspot.
        :param name: The name of this Hotspot.
        :param title: The title of this Hotspot.
        :param description: The description of this Hotspot.
        """
        self.openapi_types = {
            'delay': float,
            'name': str,
            'title': str,
            'description': str
        }

        self.attribute_map = {
            'delay': 'delay',
            'name': 'name',
            'title': 'title',
            'description': 'description'
        }

        self._delay = delay
        self._name = name
        self._title = title
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hotspot':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hotspot of this Hotspot.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay(self):
        """Gets the delay of this Hotspot.

        The delay after which the user should be shown the hotspot. 

        :return: The delay of this Hotspot.
        :rtype: float
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this Hotspot.

        The delay after which the user should be shown the hotspot. 

        :param delay: The delay of this Hotspot.
        :type delay: float
        """

        self._delay = delay

    @property
    def name(self):
        """Gets the name of this Hotspot.

        The name of the hotspot. 

        :return: The name of this Hotspot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hotspot.

        The name of the hotspot. 

        :param name: The name of this Hotspot.
        :type name: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this Hotspot.

        The title of the hotspot, as will be displayed to the user. 

        :return: The title of this Hotspot.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Hotspot.

        The title of the hotspot, as will be displayed to the user. 

        :param title: The title of this Hotspot.
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Hotspot.

        The description of the hotspot, as will be displayed to the user. 

        :return: The description of this Hotspot.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Hotspot.

        The description of the hotspot, as will be displayed to the user. 

        :param description: The description of this Hotspot.
        :type description: str
        """

        self._description = description
