# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Draft(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: str=None, to: List[int]=None, topic: str=None, content: str=None, timestamp: float=None):
        """Draft - a model defined in OpenAPI

        :param id: The id of this Draft.
        :param type: The type of this Draft.
        :param to: The to of this Draft.
        :param topic: The topic of this Draft.
        :param content: The content of this Draft.
        :param timestamp: The timestamp of this Draft.
        """
        self.openapi_types = {
            'id': int,
            'type': str,
            'to': List[int],
            'topic': str,
            'content': str,
            'timestamp': float
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'to': 'to',
            'topic': 'topic',
            'content': 'content',
            'timestamp': 'timestamp'
        }

        self._id = id
        self._type = type
        self._to = to
        self._topic = topic
        self._content = content
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Draft':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Draft of this Draft.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Draft.

        The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited. 

        :return: The id of this Draft.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Draft.

        The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited. 

        :param id: The id of this Draft.
        :type id: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this Draft.

        The type of the draft. Either unaddressed (empty string), \"stream\", or \"private\" (for PMs and private group messages). 

        :return: The type of this Draft.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Draft.

        The type of the draft. Either unaddressed (empty string), \"stream\", or \"private\" (for PMs and private group messages). 

        :param type: The type of this Draft.
        :type type: str
        """
        allowed_values = ["", "stream", "private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def to(self):
        """Gets the to of this Draft.

        An array of the tentative target audience IDs. For \"stream\" messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array. 

        :return: The to of this Draft.
        :rtype: List[int]
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Draft.

        An array of the tentative target audience IDs. For \"stream\" messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array. 

        :param to: The to of this Draft.
        :type to: List[int]
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")

        self._to = to

    @property
    def topic(self):
        """Gets the topic of this Draft.

        For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes. 

        :return: The topic of this Draft.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Draft.

        For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes. 

        :param topic: The topic of this Draft.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic

    @property
    def content(self):
        """Gets the content of this Draft.

        The body of the draft. Should not contain null bytes. 

        :return: The content of this Draft.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Draft.

        The body of the draft. Should not contain null bytes. 

        :param content: The content of this Draft.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def timestamp(self):
        """Gets the timestamp of this Draft.

        A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server. 

        :return: The timestamp of this Draft.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Draft.

        A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server. 

        :param timestamp: The timestamp of this Draft.
        :type timestamp: float
        """

        self._timestamp = timestamp
