# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, is_bot: bool=None, avatar_url: str=None, avatar_version: int=None, full_name: str=None, is_admin: bool=None, is_owner: bool=None, is_billing_admin: bool=None, role: int=None, bot_type: int=None, user_id: int=None, bot_owner_id: int=None, is_active: bool=None, is_guest: bool=None, timezone: str=None, date_joined: str=None, delivery_email: str=None, profile_data: Dict[str, object]=None):
        """UserBase - a model defined in OpenAPI

        :param email: The email of this UserBase.
        :param is_bot: The is_bot of this UserBase.
        :param avatar_url: The avatar_url of this UserBase.
        :param avatar_version: The avatar_version of this UserBase.
        :param full_name: The full_name of this UserBase.
        :param is_admin: The is_admin of this UserBase.
        :param is_owner: The is_owner of this UserBase.
        :param is_billing_admin: The is_billing_admin of this UserBase.
        :param role: The role of this UserBase.
        :param bot_type: The bot_type of this UserBase.
        :param user_id: The user_id of this UserBase.
        :param bot_owner_id: The bot_owner_id of this UserBase.
        :param is_active: The is_active of this UserBase.
        :param is_guest: The is_guest of this UserBase.
        :param timezone: The timezone of this UserBase.
        :param date_joined: The date_joined of this UserBase.
        :param delivery_email: The delivery_email of this UserBase.
        :param profile_data: The profile_data of this UserBase.
        """
        self.openapi_types = {
            'email': str,
            'is_bot': bool,
            'avatar_url': str,
            'avatar_version': int,
            'full_name': str,
            'is_admin': bool,
            'is_owner': bool,
            'is_billing_admin': bool,
            'role': int,
            'bot_type': int,
            'user_id': int,
            'bot_owner_id': int,
            'is_active': bool,
            'is_guest': bool,
            'timezone': str,
            'date_joined': str,
            'delivery_email': str,
            'profile_data': Dict[str, object]
        }

        self.attribute_map = {
            'email': 'email',
            'is_bot': 'is_bot',
            'avatar_url': 'avatar_url',
            'avatar_version': 'avatar_version',
            'full_name': 'full_name',
            'is_admin': 'is_admin',
            'is_owner': 'is_owner',
            'is_billing_admin': 'is_billing_admin',
            'role': 'role',
            'bot_type': 'bot_type',
            'user_id': 'user_id',
            'bot_owner_id': 'bot_owner_id',
            'is_active': 'is_active',
            'is_guest': 'is_guest',
            'timezone': 'timezone',
            'date_joined': 'date_joined',
            'delivery_email': 'delivery_email',
            'profile_data': 'profile_data'
        }

        self._email = email
        self._is_bot = is_bot
        self._avatar_url = avatar_url
        self._avatar_version = avatar_version
        self._full_name = full_name
        self._is_admin = is_admin
        self._is_owner = is_owner
        self._is_billing_admin = is_billing_admin
        self._role = role
        self._bot_type = bot_type
        self._user_id = user_id
        self._bot_owner_id = bot_owner_id
        self._is_active = is_active
        self._is_guest = is_guest
        self._timezone = timezone
        self._date_joined = date_joined
        self._delivery_email = delivery_email
        self._profile_data = profile_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserBase of this UserBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this UserBase.

        The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 

        :return: The email of this UserBase.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserBase.

        The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 

        :param email: The email of this UserBase.
        :type email: str
        """

        self._email = email

    @property
    def is_bot(self):
        """Gets the is_bot of this UserBase.

        A boolean specifying whether the user is a bot or full account. 

        :return: The is_bot of this UserBase.
        :rtype: bool
        """
        return self._is_bot

    @is_bot.setter
    def is_bot(self, is_bot):
        """Sets the is_bot of this UserBase.

        A boolean specifying whether the user is a bot or full account. 

        :param is_bot: The is_bot of this UserBase.
        :type is_bot: bool
        """

        self._is_bot = is_bot

    @property
    def avatar_url(self):
        """Gets the avatar_url of this UserBase.

        URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 

        :return: The avatar_url of this UserBase.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this UserBase.

        URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 

        :param avatar_url: The avatar_url of this UserBase.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def avatar_version(self):
        """Gets the avatar_version of this UserBase.

        Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 

        :return: The avatar_version of this UserBase.
        :rtype: int
        """
        return self._avatar_version

    @avatar_version.setter
    def avatar_version(self, avatar_version):
        """Sets the avatar_version of this UserBase.

        Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 

        :param avatar_version: The avatar_version of this UserBase.
        :type avatar_version: int
        """

        self._avatar_version = avatar_version

    @property
    def full_name(self):
        """Gets the full_name of this UserBase.

        Full name of the user or bot, used for all display purposes. 

        :return: The full_name of this UserBase.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserBase.

        Full name of the user or bot, used for all display purposes. 

        :param full_name: The full_name of this UserBase.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def is_admin(self):
        """Gets the is_admin of this UserBase.

        A boolean specifying whether the user is an organization administrator. 

        :return: The is_admin of this UserBase.
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this UserBase.

        A boolean specifying whether the user is an organization administrator. 

        :param is_admin: The is_admin of this UserBase.
        :type is_admin: bool
        """

        self._is_admin = is_admin

    @property
    def is_owner(self):
        """Gets the is_owner of this UserBase.

        A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 

        :return: The is_owner of this UserBase.
        :rtype: bool
        """
        return self._is_owner

    @is_owner.setter
    def is_owner(self, is_owner):
        """Sets the is_owner of this UserBase.

        A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 

        :param is_owner: The is_owner of this UserBase.
        :type is_owner: bool
        """

        self._is_owner = is_owner

    @property
    def is_billing_admin(self):
        """Gets the is_billing_admin of this UserBase.

        A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 

        :return: The is_billing_admin of this UserBase.
        :rtype: bool
        """
        return self._is_billing_admin

    @is_billing_admin.setter
    def is_billing_admin(self, is_billing_admin):
        """Sets the is_billing_admin of this UserBase.

        A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 

        :param is_billing_admin: The is_billing_admin of this UserBase.
        :type is_billing_admin: bool
        """

        self._is_billing_admin = is_billing_admin

    @property
    def role(self):
        """Gets the role of this UserBase.

        [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 

        :return: The role of this UserBase.
        :rtype: int
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserBase.

        [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 

        :param role: The role of this UserBase.
        :type role: int
        """
        allowed_values = [100, 200, 300, 400, 600]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def bot_type(self):
        """Gets the bot_type of this UserBase.

        An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 

        :return: The bot_type of this UserBase.
        :rtype: int
        """
        return self._bot_type

    @bot_type.setter
    def bot_type(self, bot_type):
        """Sets the bot_type of this UserBase.

        An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 

        :param bot_type: The bot_type of this UserBase.
        :type bot_type: int
        """

        self._bot_type = bot_type

    @property
    def user_id(self):
        """Gets the user_id of this UserBase.

        The unique ID of the user. 

        :return: The user_id of this UserBase.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserBase.

        The unique ID of the user. 

        :param user_id: The user_id of this UserBase.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def bot_owner_id(self):
        """Gets the bot_owner_id of this UserBase.

        If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 

        :return: The bot_owner_id of this UserBase.
        :rtype: int
        """
        return self._bot_owner_id

    @bot_owner_id.setter
    def bot_owner_id(self, bot_owner_id):
        """Sets the bot_owner_id of this UserBase.

        If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 

        :param bot_owner_id: The bot_owner_id of this UserBase.
        :type bot_owner_id: int
        """

        self._bot_owner_id = bot_owner_id

    @property
    def is_active(self):
        """Gets the is_active of this UserBase.

        A boolean specifying whether the user account has been deactivated. 

        :return: The is_active of this UserBase.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this UserBase.

        A boolean specifying whether the user account has been deactivated. 

        :param is_active: The is_active of this UserBase.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_guest(self):
        """Gets the is_guest of this UserBase.

        A boolean specifying whether the user is a guest user. 

        :return: The is_guest of this UserBase.
        :rtype: bool
        """
        return self._is_guest

    @is_guest.setter
    def is_guest(self, is_guest):
        """Sets the is_guest of this UserBase.

        A boolean specifying whether the user is a guest user. 

        :param is_guest: The is_guest of this UserBase.
        :type is_guest: bool
        """

        self._is_guest = is_guest

    @property
    def timezone(self):
        """Gets the timezone of this UserBase.

        The time zone of the user. 

        :return: The timezone of this UserBase.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserBase.

        The time zone of the user. 

        :param timezone: The timezone of this UserBase.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def date_joined(self):
        """Gets the date_joined of this UserBase.

        The time the user account was created. 

        :return: The date_joined of this UserBase.
        :rtype: str
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this UserBase.

        The time the user account was created. 

        :param date_joined: The date_joined of this UserBase.
        :type date_joined: str
        """

        self._date_joined = date_joined

    @property
    def delivery_email(self):
        """Gets the delivery_email of this UserBase.

        The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 

        :return: The delivery_email of this UserBase.
        :rtype: str
        """
        return self._delivery_email

    @delivery_email.setter
    def delivery_email(self, delivery_email):
        """Sets the delivery_email of this UserBase.

        The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 

        :param delivery_email: The delivery_email of this UserBase.
        :type delivery_email: str
        """

        self._delivery_email = delivery_email

    @property
    def profile_data(self):
        """Gets the profile_data of this UserBase.

        A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 

        :return: The profile_data of this UserBase.
        :rtype: Dict[str, object]
        """
        return self._profile_data

    @profile_data.setter
    def profile_data(self, profile_data):
        """Sets the profile_data of this UserBase.

        A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 

        :param profile_data: The profile_data of this UserBase.
        :type profile_data: Dict[str, object]
        """

        self._profile_data = profile_data
