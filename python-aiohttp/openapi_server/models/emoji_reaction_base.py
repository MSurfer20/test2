# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.emoji_reaction_base_user import EmojiReactionBaseUser
from openapi_server import util


class EmojiReactionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emoji_code: str=None, emoji_name: str=None, reaction_type: str=None, user_id: int=None, user: EmojiReactionBaseUser=None):
        """EmojiReactionBase - a model defined in OpenAPI

        :param emoji_code: The emoji_code of this EmojiReactionBase.
        :param emoji_name: The emoji_name of this EmojiReactionBase.
        :param reaction_type: The reaction_type of this EmojiReactionBase.
        :param user_id: The user_id of this EmojiReactionBase.
        :param user: The user of this EmojiReactionBase.
        """
        self.openapi_types = {
            'emoji_code': str,
            'emoji_name': str,
            'reaction_type': str,
            'user_id': int,
            'user': EmojiReactionBaseUser
        }

        self.attribute_map = {
            'emoji_code': 'emoji_code',
            'emoji_name': 'emoji_name',
            'reaction_type': 'reaction_type',
            'user_id': 'user_id',
            'user': 'user'
        }

        self._emoji_code = emoji_code
        self._emoji_name = emoji_name
        self._reaction_type = reaction_type
        self._user_id = user_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmojiReactionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmojiReactionBase of this EmojiReactionBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emoji_code(self):
        """Gets the emoji_code of this EmojiReactionBase.

        A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint. 

        :return: The emoji_code of this EmojiReactionBase.
        :rtype: str
        """
        return self._emoji_code

    @emoji_code.setter
    def emoji_code(self, emoji_code):
        """Sets the emoji_code of this EmojiReactionBase.

        A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint. 

        :param emoji_code: The emoji_code of this EmojiReactionBase.
        :type emoji_code: str
        """

        self._emoji_code = emoji_code

    @property
    def emoji_name(self):
        """Gets the emoji_name of this EmojiReactionBase.

        Name of the emoji. 

        :return: The emoji_name of this EmojiReactionBase.
        :rtype: str
        """
        return self._emoji_name

    @emoji_name.setter
    def emoji_name(self, emoji_name):
        """Sets the emoji_name of this EmojiReactionBase.

        Name of the emoji. 

        :param emoji_name: The emoji_name of this EmojiReactionBase.
        :type emoji_name: str
        """

        self._emoji_name = emoji_name

    @property
    def reaction_type(self):
        """Gets the reaction_type of this EmojiReactionBase.

        One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 

        :return: The reaction_type of this EmojiReactionBase.
        :rtype: str
        """
        return self._reaction_type

    @reaction_type.setter
    def reaction_type(self, reaction_type):
        """Sets the reaction_type of this EmojiReactionBase.

        One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 

        :param reaction_type: The reaction_type of this EmojiReactionBase.
        :type reaction_type: str
        """

        self._reaction_type = reaction_type

    @property
    def user_id(self):
        """Gets the user_id of this EmojiReactionBase.

        The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 

        :return: The user_id of this EmojiReactionBase.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EmojiReactionBase.

        The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 

        :param user_id: The user_id of this EmojiReactionBase.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user(self):
        """Gets the user of this EmojiReactionBase.


        :return: The user of this EmojiReactionBase.
        :rtype: EmojiReactionBaseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EmojiReactionBase.


        :param user: The user of this EmojiReactionBase.
        :type user: EmojiReactionBaseUser
        """

        self._user = user
