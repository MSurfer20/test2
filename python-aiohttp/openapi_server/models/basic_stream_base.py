# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BasicStreamBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_id: int=None, name: str=None, description: str=None, date_created: int=None, invite_only: bool=None, rendered_description: str=None, is_web_public: bool=None, stream_post_policy: int=None, message_retention_days: int=None, history_public_to_subscribers: bool=None, first_message_id: int=None, is_announcement_only: bool=None):
        """BasicStreamBase - a model defined in OpenAPI

        :param stream_id: The stream_id of this BasicStreamBase.
        :param name: The name of this BasicStreamBase.
        :param description: The description of this BasicStreamBase.
        :param date_created: The date_created of this BasicStreamBase.
        :param invite_only: The invite_only of this BasicStreamBase.
        :param rendered_description: The rendered_description of this BasicStreamBase.
        :param is_web_public: The is_web_public of this BasicStreamBase.
        :param stream_post_policy: The stream_post_policy of this BasicStreamBase.
        :param message_retention_days: The message_retention_days of this BasicStreamBase.
        :param history_public_to_subscribers: The history_public_to_subscribers of this BasicStreamBase.
        :param first_message_id: The first_message_id of this BasicStreamBase.
        :param is_announcement_only: The is_announcement_only of this BasicStreamBase.
        """
        self.openapi_types = {
            'stream_id': int,
            'name': str,
            'description': str,
            'date_created': int,
            'invite_only': bool,
            'rendered_description': str,
            'is_web_public': bool,
            'stream_post_policy': int,
            'message_retention_days': int,
            'history_public_to_subscribers': bool,
            'first_message_id': int,
            'is_announcement_only': bool
        }

        self.attribute_map = {
            'stream_id': 'stream_id',
            'name': 'name',
            'description': 'description',
            'date_created': 'date_created',
            'invite_only': 'invite_only',
            'rendered_description': 'rendered_description',
            'is_web_public': 'is_web_public',
            'stream_post_policy': 'stream_post_policy',
            'message_retention_days': 'message_retention_days',
            'history_public_to_subscribers': 'history_public_to_subscribers',
            'first_message_id': 'first_message_id',
            'is_announcement_only': 'is_announcement_only'
        }

        self._stream_id = stream_id
        self._name = name
        self._description = description
        self._date_created = date_created
        self._invite_only = invite_only
        self._rendered_description = rendered_description
        self._is_web_public = is_web_public
        self._stream_post_policy = stream_post_policy
        self._message_retention_days = message_retention_days
        self._history_public_to_subscribers = history_public_to_subscribers
        self._first_message_id = first_message_id
        self._is_announcement_only = is_announcement_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasicStreamBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasicStreamBase of this BasicStreamBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_id(self):
        """Gets the stream_id of this BasicStreamBase.

        The unique ID of the stream. 

        :return: The stream_id of this BasicStreamBase.
        :rtype: int
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this BasicStreamBase.

        The unique ID of the stream. 

        :param stream_id: The stream_id of this BasicStreamBase.
        :type stream_id: int
        """

        self._stream_id = stream_id

    @property
    def name(self):
        """Gets the name of this BasicStreamBase.

        The name of the stream. 

        :return: The name of this BasicStreamBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BasicStreamBase.

        The name of the stream. 

        :param name: The name of this BasicStreamBase.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this BasicStreamBase.

        The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 

        :return: The description of this BasicStreamBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BasicStreamBase.

        The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 

        :param description: The description of this BasicStreamBase.
        :type description: str
        """

        self._description = description

    @property
    def date_created(self):
        """Gets the date_created of this BasicStreamBase.

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 

        :return: The date_created of this BasicStreamBase.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BasicStreamBase.

        The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 

        :param date_created: The date_created of this BasicStreamBase.
        :type date_created: int
        """

        self._date_created = date_created

    @property
    def invite_only(self):
        """Gets the invite_only of this BasicStreamBase.

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 

        :return: The invite_only of this BasicStreamBase.
        :rtype: bool
        """
        return self._invite_only

    @invite_only.setter
    def invite_only(self, invite_only):
        """Sets the invite_only of this BasicStreamBase.

        Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 

        :param invite_only: The invite_only of this BasicStreamBase.
        :type invite_only: bool
        """

        self._invite_only = invite_only

    @property
    def rendered_description(self):
        """Gets the rendered_description of this BasicStreamBase.

        The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 

        :return: The rendered_description of this BasicStreamBase.
        :rtype: str
        """
        return self._rendered_description

    @rendered_description.setter
    def rendered_description(self, rendered_description):
        """Sets the rendered_description of this BasicStreamBase.

        The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 

        :param rendered_description: The rendered_description of this BasicStreamBase.
        :type rendered_description: str
        """

        self._rendered_description = rendered_description

    @property
    def is_web_public(self):
        """Gets the is_web_public of this BasicStreamBase.

        Whether the stream has been configured to allow unauthenticated access to its message history from the web. 

        :return: The is_web_public of this BasicStreamBase.
        :rtype: bool
        """
        return self._is_web_public

    @is_web_public.setter
    def is_web_public(self, is_web_public):
        """Sets the is_web_public of this BasicStreamBase.

        Whether the stream has been configured to allow unauthenticated access to its message history from the web. 

        :param is_web_public: The is_web_public of this BasicStreamBase.
        :type is_web_public: bool
        """

        self._is_web_public = is_web_public

    @property
    def stream_post_policy(self):
        """Gets the stream_post_policy of this BasicStreamBase.

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 

        :return: The stream_post_policy of this BasicStreamBase.
        :rtype: int
        """
        return self._stream_post_policy

    @stream_post_policy.setter
    def stream_post_policy(self, stream_post_policy):
        """Sets the stream_post_policy of this BasicStreamBase.

        Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 

        :param stream_post_policy: The stream_post_policy of this BasicStreamBase.
        :type stream_post_policy: int
        """

        self._stream_post_policy = stream_post_policy

    @property
    def message_retention_days(self):
        """Gets the message_retention_days of this BasicStreamBase.

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 

        :return: The message_retention_days of this BasicStreamBase.
        :rtype: int
        """
        return self._message_retention_days

    @message_retention_days.setter
    def message_retention_days(self, message_retention_days):
        """Sets the message_retention_days of this BasicStreamBase.

        Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 

        :param message_retention_days: The message_retention_days of this BasicStreamBase.
        :type message_retention_days: int
        """

        self._message_retention_days = message_retention_days

    @property
    def history_public_to_subscribers(self):
        """Gets the history_public_to_subscribers of this BasicStreamBase.

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 

        :return: The history_public_to_subscribers of this BasicStreamBase.
        :rtype: bool
        """
        return self._history_public_to_subscribers

    @history_public_to_subscribers.setter
    def history_public_to_subscribers(self, history_public_to_subscribers):
        """Sets the history_public_to_subscribers of this BasicStreamBase.

        Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 

        :param history_public_to_subscribers: The history_public_to_subscribers of this BasicStreamBase.
        :type history_public_to_subscribers: bool
        """

        self._history_public_to_subscribers = history_public_to_subscribers

    @property
    def first_message_id(self):
        """Gets the first_message_id of this BasicStreamBase.

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 

        :return: The first_message_id of this BasicStreamBase.
        :rtype: int
        """
        return self._first_message_id

    @first_message_id.setter
    def first_message_id(self, first_message_id):
        """Sets the first_message_id of this BasicStreamBase.

        The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 

        :param first_message_id: The first_message_id of this BasicStreamBase.
        :type first_message_id: int
        """

        self._first_message_id = first_message_id

    @property
    def is_announcement_only(self):
        """Gets the is_announcement_only of this BasicStreamBase.

        Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 

        :return: The is_announcement_only of this BasicStreamBase.
        :rtype: bool
        """
        return self._is_announcement_only

    @is_announcement_only.setter
    def is_announcement_only(self, is_announcement_only):
        """Sets the is_announcement_only of this BasicStreamBase.

        Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 

        :param is_announcement_only: The is_announcement_only of this BasicStreamBase.
        :type is_announcement_only: bool
        """

        self._is_announcement_only = is_announcement_only
