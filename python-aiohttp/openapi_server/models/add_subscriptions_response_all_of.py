# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AddSubscriptionsResponseAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result: object=None, msg: object=None, subscribed: Dict[str, List[str]]=None, already_subscribed: Dict[str, List[str]]=None, unauthorized: List[str]=None):
        """AddSubscriptionsResponseAllOf - a model defined in OpenAPI

        :param result: The result of this AddSubscriptionsResponseAllOf.
        :param msg: The msg of this AddSubscriptionsResponseAllOf.
        :param subscribed: The subscribed of this AddSubscriptionsResponseAllOf.
        :param already_subscribed: The already_subscribed of this AddSubscriptionsResponseAllOf.
        :param unauthorized: The unauthorized of this AddSubscriptionsResponseAllOf.
        """
        self.openapi_types = {
            'result': object,
            'msg': object,
            'subscribed': Dict[str, List[str]],
            'already_subscribed': Dict[str, List[str]],
            'unauthorized': List[str]
        }

        self.attribute_map = {
            'result': 'result',
            'msg': 'msg',
            'subscribed': 'subscribed',
            'already_subscribed': 'already_subscribed',
            'unauthorized': 'unauthorized'
        }

        self._result = result
        self._msg = msg
        self._subscribed = subscribed
        self._already_subscribed = already_subscribed
        self._unauthorized = unauthorized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddSubscriptionsResponseAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddSubscriptionsResponse_allOf of this AddSubscriptionsResponseAllOf.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self):
        """Gets the result of this AddSubscriptionsResponseAllOf.


        :return: The result of this AddSubscriptionsResponseAllOf.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AddSubscriptionsResponseAllOf.


        :param result: The result of this AddSubscriptionsResponseAllOf.
        :type result: object
        """

        self._result = result

    @property
    def msg(self):
        """Gets the msg of this AddSubscriptionsResponseAllOf.


        :return: The msg of this AddSubscriptionsResponseAllOf.
        :rtype: object
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this AddSubscriptionsResponseAllOf.


        :param msg: The msg of this AddSubscriptionsResponseAllOf.
        :type msg: object
        """

        self._msg = msg

    @property
    def subscribed(self):
        """Gets the subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 

        :return: The subscribed of this AddSubscriptionsResponseAllOf.
        :rtype: Dict[str, List[str]]
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 

        :param subscribed: The subscribed of this AddSubscriptionsResponseAllOf.
        :type subscribed: Dict[str, List[str]]
        """

        self._subscribed = subscribed

    @property
    def already_subscribed(self):
        """Gets the already_subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 

        :return: The already_subscribed of this AddSubscriptionsResponseAllOf.
        :rtype: Dict[str, List[str]]
        """
        return self._already_subscribed

    @already_subscribed.setter
    def already_subscribed(self, already_subscribed):
        """Sets the already_subscribed of this AddSubscriptionsResponseAllOf.

        A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 

        :param already_subscribed: The already_subscribed of this AddSubscriptionsResponseAllOf.
        :type already_subscribed: Dict[str, List[str]]
        """

        self._already_subscribed = already_subscribed

    @property
    def unauthorized(self):
        """Gets the unauthorized of this AddSubscriptionsResponseAllOf.

        A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 

        :return: The unauthorized of this AddSubscriptionsResponseAllOf.
        :rtype: List[str]
        """
        return self._unauthorized

    @unauthorized.setter
    def unauthorized(self, unauthorized):
        """Sets the unauthorized of this AddSubscriptionsResponseAllOf.

        A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 

        :param unauthorized: The unauthorized of this AddSubscriptionsResponseAllOf.
        :type unauthorized: List[str]
        """

        self._unauthorized = unauthorized
