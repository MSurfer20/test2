#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSOpenAPITools' -name 'UsersApi' {
    Context 'New-User' {
        It 'Test New-User' {
            #$TestResult = New-User -Email "TEST_VALUE" -Password "TEST_VALUE" -FullName "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-UserGroup' {
        It 'Test New-UserGroup' {
            #$TestResult = New-UserGroup -Name "TEST_VALUE" -Description "TEST_VALUE" -Members "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeactivateOwnUser' {
        It 'Test Invoke-DeactivateOwnUser' {
            #$TestResult = Invoke-DeactivateOwnUser
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeactivateUser' {
        It 'Test Invoke-DeactivateUser' {
            #$TestResult = Invoke-DeactivateUser -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Attachments' {
        It 'Test Get-Attachments' {
            #$TestResult = Get-Attachments
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-OwnUser' {
        It 'Test Get-OwnUser' {
            #$TestResult = Get-OwnUser
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-User' {
        It 'Test Get-User' {
            #$TestResult = Get-User -UserId "TEST_VALUE" -ClientGravatar "TEST_VALUE" -IncludeCustomProfileFields "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserByEmail' {
        It 'Test Get-UserByEmail' {
            #$TestResult = Get-UserByEmail -Email "TEST_VALUE" -ClientGravatar "TEST_VALUE" -IncludeCustomProfileFields "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserGroups' {
        It 'Test Get-UserGroups' {
            #$TestResult = Get-UserGroups
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserPresence' {
        It 'Test Get-UserPresence' {
            #$TestResult = Get-UserPresence -UserIdOrEmail "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Users' {
        It 'Test Get-Users' {
            #$TestResult = Get-Users -ClientGravatar "TEST_VALUE" -IncludeCustomProfileFields "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-MuteUser' {
        It 'Test Invoke-MuteUser' {
            #$TestResult = Invoke-MuteUser -MutedUserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ReactivateUser' {
        It 'Test Invoke-ReactivateUser' {
            #$TestResult = Invoke-ReactivateUser -UserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Remove-UserGroup' {
        It 'Test Remove-UserGroup' {
            #$TestResult = Remove-UserGroup -UserGroupId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Set-TypingStatus' {
        It 'Test Set-TypingStatus' {
            #$TestResult = Set-TypingStatus -Op "TEST_VALUE" -To "TEST_VALUE" -Type "TEST_VALUE" -Topic "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-UnmuteUser' {
        It 'Test Invoke-UnmuteUser' {
            #$TestResult = Invoke-UnmuteUser -MutedUserId "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Settings' {
        It 'Test Update-Settings' {
            #$TestResult = Update-Settings -FullName "TEST_VALUE" -Email "TEST_VALUE" -OldPassword "TEST_VALUE" -NewPassword "TEST_VALUE" -TwentyFourHourTime "TEST_VALUE" -DenseMode "TEST_VALUE" -StarredMessageCounts "TEST_VALUE" -FluidLayoutWidth "TEST_VALUE" -HighContrastMode "TEST_VALUE" -ColorScheme "TEST_VALUE" -EnableDraftsSynchronization "TEST_VALUE" -TranslateEmoticons "TEST_VALUE" -DefaultLanguage "TEST_VALUE" -DefaultView "TEST_VALUE" -LeftSideUserlist "TEST_VALUE" -Emojiset "TEST_VALUE" -DemoteInactiveStreams "TEST_VALUE" -Timezone "TEST_VALUE" -EnableStreamDesktopNotifications "TEST_VALUE" -EnableStreamEmailNotifications "TEST_VALUE" -EnableStreamPushNotifications "TEST_VALUE" -EnableStreamAudibleNotifications "TEST_VALUE" -NotificationSound "TEST_VALUE" -EnableDesktopNotifications "TEST_VALUE" -EnableSounds "TEST_VALUE" -EmailNotificationsBatchingPeriodSeconds "TEST_VALUE" -EnableOfflineEmailNotifications "TEST_VALUE" -EnableOfflinePushNotifications "TEST_VALUE" -EnableOnlinePushNotifications "TEST_VALUE" -EnableDigestEmails "TEST_VALUE" -EnableMarketingEmails "TEST_VALUE" -EnableLoginEmails "TEST_VALUE" -MessageContentInEmailNotifications "TEST_VALUE" -PmContentInDesktopNotifications "TEST_VALUE" -WildcardMentionsNotify "TEST_VALUE" -DesktopIconCountDisplay "TEST_VALUE" -RealmNameInNotifications "TEST_VALUE" -PresenceEnabled "TEST_VALUE" -EnterSends "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Status' {
        It 'Test Update-Status' {
            #$TestResult = Update-Status -StatusText "TEST_VALUE" -Away "TEST_VALUE" -EmojiName "TEST_VALUE" -EmojiCode "TEST_VALUE" -ReactionType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-User' {
        It 'Test Update-User' {
            #$TestResult = Update-User -UserId "TEST_VALUE" -FullName "TEST_VALUE" -Role "TEST_VALUE" -ProfileData "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-UserGroup' {
        It 'Test Update-UserGroup' {
            #$TestResult = Update-UserGroup -UserGroupId "TEST_VALUE" -Name "TEST_VALUE" -Description "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-UserGroupMembers' {
        It 'Test Update-UserGroupMembers' {
            #$TestResult = Update-UserGroupMembers -UserGroupId "TEST_VALUE" -Delete "TEST_VALUE" -Add "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
