#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EmojiCode
No description available.
.PARAMETER EmojiName
No description available.
.PARAMETER ReactionType
No description available.
.PARAMETER UserId
No description available.
.PARAMETER User
No description available.
.OUTPUTS

EmojiReaction<PSCustomObject>
#>

function Initialize-EmojiReaction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EmojiCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EmojiName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ReactionType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmojiReaction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "emoji_code" = ${EmojiCode}
            "emoji_name" = ${EmojiName}
            "reaction_type" = ${ReactionType}
            "user_id" = ${UserId}
            "user" = ${User}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmojiReaction<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmojiReaction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmojiReaction<PSCustomObject>
#>
function ConvertFrom-JsonToEmojiReaction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmojiReaction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmojiReaction
        $AllProperties = ("emoji_code", "emoji_name", "reaction_type", "user_id", "user")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emoji_code"))) { #optional property not found
            $EmojiCode = $null
        } else {
            $EmojiCode = $JsonParameters.PSobject.Properties["emoji_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emoji_name"))) { #optional property not found
            $EmojiName = $null
        } else {
            $EmojiName = $JsonParameters.PSobject.Properties["emoji_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reaction_type"))) { #optional property not found
            $ReactionType = $null
        } else {
            $ReactionType = $JsonParameters.PSobject.Properties["reaction_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_id"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        $PSO = [PSCustomObject]@{
            "emoji_code" = ${EmojiCode}
            "emoji_name" = ${EmojiName}
            "reaction_type" = ${ReactionType}
            "user_id" = ${UserId}
            "user" = ${User}
        }

        return $PSO
    }

}

