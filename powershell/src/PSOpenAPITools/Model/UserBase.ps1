#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A dictionary containing basic data on a given Zulip user. 

.PARAMETER Email
The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
.PARAMETER IsBot
A boolean specifying whether the user is a bot or full account. 
.PARAMETER AvatarUrl
URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 
.PARAMETER AvatarVersion
Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 
.PARAMETER FullName
Full name of the user or bot, used for all display purposes. 
.PARAMETER IsAdmin
A boolean specifying whether the user is an organization administrator. 
.PARAMETER IsOwner
A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
.PARAMETER IsBillingAdmin
A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
.PARAMETER Role
[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 
.PARAMETER BotType
An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
.PARAMETER UserId
The unique ID of the user. 
.PARAMETER BotOwnerId
If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 
.PARAMETER IsActive
A boolean specifying whether the user account has been deactivated. 
.PARAMETER IsGuest
A boolean specifying whether the user is a guest user. 
.PARAMETER Timezone
The time zone of the user. 
.PARAMETER DateJoined
The time the user account was created. 
.PARAMETER DeliveryEmail
The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
.PARAMETER ProfileData
A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 
.OUTPUTS

UserBase<PSCustomObject>
#>

function Initialize-UserBase {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsBot},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AvatarUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AvatarVersion},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsAdmin},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsOwner},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsBillingAdmin},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("100", "200", "300", "400", "600")]
        [System.Nullable[Int32]]
        ${Role},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BotType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UserId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BotOwnerId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActive},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsGuest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timezone},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateJoined},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DeliveryEmail},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${ProfileData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UserBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "email" = ${Email}
            "is_bot" = ${IsBot}
            "avatar_url" = ${AvatarUrl}
            "avatar_version" = ${AvatarVersion}
            "full_name" = ${FullName}
            "is_admin" = ${IsAdmin}
            "is_owner" = ${IsOwner}
            "is_billing_admin" = ${IsBillingAdmin}
            "role" = ${Role}
            "bot_type" = ${BotType}
            "user_id" = ${UserId}
            "bot_owner_id" = ${BotOwnerId}
            "is_active" = ${IsActive}
            "is_guest" = ${IsGuest}
            "timezone" = ${Timezone}
            "date_joined" = ${DateJoined}
            "delivery_email" = ${DeliveryEmail}
            "profile_data" = ${ProfileData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserBase<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserBase<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserBase<PSCustomObject>
#>
function ConvertFrom-JsonToUserBase {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UserBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UserBase
        $AllProperties = ("email", "is_bot", "avatar_url", "avatar_version", "full_name", "is_admin", "is_owner", "is_billing_admin", "role", "bot_type", "user_id", "bot_owner_id", "is_active", "is_guest", "timezone", "date_joined", "delivery_email", "profile_data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_bot"))) { #optional property not found
            $IsBot = $null
        } else {
            $IsBot = $JsonParameters.PSobject.Properties["is_bot"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatar_url"))) { #optional property not found
            $AvatarUrl = $null
        } else {
            $AvatarUrl = $JsonParameters.PSobject.Properties["avatar_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatar_version"))) { #optional property not found
            $AvatarVersion = $null
        } else {
            $AvatarVersion = $JsonParameters.PSobject.Properties["avatar_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full_name"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_admin"))) { #optional property not found
            $IsAdmin = $null
        } else {
            $IsAdmin = $JsonParameters.PSobject.Properties["is_admin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_owner"))) { #optional property not found
            $IsOwner = $null
        } else {
            $IsOwner = $JsonParameters.PSobject.Properties["is_owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_billing_admin"))) { #optional property not found
            $IsBillingAdmin = $null
        } else {
            $IsBillingAdmin = $JsonParameters.PSobject.Properties["is_billing_admin"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bot_type"))) { #optional property not found
            $BotType = $null
        } else {
            $BotType = $JsonParameters.PSobject.Properties["bot_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_id"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bot_owner_id"))) { #optional property not found
            $BotOwnerId = $null
        } else {
            $BotOwnerId = $JsonParameters.PSobject.Properties["bot_owner_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_active"))) { #optional property not found
            $IsActive = $null
        } else {
            $IsActive = $JsonParameters.PSobject.Properties["is_active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_guest"))) { #optional property not found
            $IsGuest = $null
        } else {
            $IsGuest = $JsonParameters.PSobject.Properties["is_guest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timezone"))) { #optional property not found
            $Timezone = $null
        } else {
            $Timezone = $JsonParameters.PSobject.Properties["timezone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date_joined"))) { #optional property not found
            $DateJoined = $null
        } else {
            $DateJoined = $JsonParameters.PSobject.Properties["date_joined"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delivery_email"))) { #optional property not found
            $DeliveryEmail = $null
        } else {
            $DeliveryEmail = $JsonParameters.PSobject.Properties["delivery_email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "profile_data"))) { #optional property not found
            $ProfileData = $null
        } else {
            $ProfileData = $JsonParameters.PSobject.Properties["profile_data"].value
        }

        $PSO = [PSCustomObject]@{
            "email" = ${Email}
            "is_bot" = ${IsBot}
            "avatar_url" = ${AvatarUrl}
            "avatar_version" = ${AvatarVersion}
            "full_name" = ${FullName}
            "is_admin" = ${IsAdmin}
            "is_owner" = ${IsOwner}
            "is_billing_admin" = ${IsBillingAdmin}
            "role" = ${Role}
            "bot_type" = ${BotType}
            "user_id" = ${UserId}
            "bot_owner_id" = ${BotOwnerId}
            "is_active" = ${IsActive}
            "is_guest" = ${IsGuest}
            "timezone" = ${Timezone}
            "date_joined" = ${DateJoined}
            "delivery_email" = ${DeliveryEmail}
            "profile_data" = ${ProfileData}
        }

        return $PSO
    }

}

