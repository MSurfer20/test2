#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Result
No description available.
.PARAMETER Msg
No description available.
.PARAMETER ApiKey
The API key that can be used to authenticate as the requested user. 
.PARAMETER Email
The email address of the user who owns the API key 
.OUTPUTS

ApiKeyResponseAllOf<PSCustomObject>
#>

function Initialize-ApiKeyResponseAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Result},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Msg},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApiKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiKeyResponseAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ApiKey -eq $null) {
            throw "invalid value for 'ApiKey', 'ApiKey' cannot be null."
        }

        if ($Email -eq $null) {
            throw "invalid value for 'Email', 'Email' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "api_key" = ${ApiKey}
            "email" = ${Email}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiKeyResponseAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiKeyResponseAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiKeyResponseAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToApiKeyResponseAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiKeyResponseAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiKeyResponseAllOf
        $AllProperties = ("result", "msg", "api_key", "email")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'api_key' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "api_key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'api_key' missing."
        } else {
            $ApiKey = $JsonParameters.PSobject.Properties["api_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) {
            throw "Error! JSON cannot be serialized due to the required property 'email' missing."
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result"))) { #optional property not found
            $Result = $null
        } else {
            $Result = $JsonParameters.PSobject.Properties["result"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) { #optional property not found
            $Msg = $null
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "api_key" = ${ApiKey}
            "email" = ${Email}
        }

        return $PSO
    }

}

