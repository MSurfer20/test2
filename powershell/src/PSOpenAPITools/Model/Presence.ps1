#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

`{client_name}`: Object containing the details of the user's presence on a particular platform with the client's platform name being the object key. 

.PARAMETER Client
The client's platform name. 
.PARAMETER Status
The status of the user on this client. It is either `idle` or `active`. 
.PARAMETER Timestamp
The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second. 
.PARAMETER Pushable
Whether the client is capable of showing mobile/push notifications to the user. 
.OUTPUTS

Presence<PSCustomObject>
#>

function Initialize-Presence {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Client},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("idle", "active")]
        [String]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Timestamp},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Pushable}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Presence' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "client" = ${Client}
            "status" = ${Status}
            "timestamp" = ${Timestamp}
            "pushable" = ${Pushable}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Presence<PSCustomObject>

.DESCRIPTION

Convert from JSON to Presence<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Presence<PSCustomObject>
#>
function ConvertFrom-JsonToPresence {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Presence' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Presence
        $AllProperties = ("client", "status", "timestamp", "pushable")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "client"))) { #optional property not found
            $Client = $null
        } else {
            $Client = $JsonParameters.PSobject.Properties["client"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pushable"))) { #optional property not found
            $Pushable = $null
        } else {
            $Pushable = $JsonParameters.PSobject.Properties["pushable"].value
        }

        $PSO = [PSCustomObject]@{
            "client" = ${Client}
            "status" = ${Status}
            "timestamp" = ${Timestamp}
            "pushable" = ${Pushable}
        }

        return $PSO
    }

}

