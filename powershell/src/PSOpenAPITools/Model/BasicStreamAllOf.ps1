#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StreamId
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER DateCreated
No description available.
.PARAMETER InviteOnly
No description available.
.PARAMETER RenderedDescription
No description available.
.PARAMETER IsWebPublic
No description available.
.PARAMETER StreamPostPolicy
No description available.
.PARAMETER MessageRetentionDays
No description available.
.PARAMETER HistoryPublicToSubscribers
No description available.
.PARAMETER FirstMessageId
No description available.
.PARAMETER IsAnnouncementOnly
No description available.
.OUTPUTS

BasicStreamAllOf<PSCustomObject>
#>

function Initialize-BasicStreamAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StreamId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DateCreated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${InviteOnly},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RenderedDescription},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IsWebPublic},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StreamPostPolicy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MessageRetentionDays},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HistoryPublicToSubscribers},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FirstMessageId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${IsAnnouncementOnly}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BasicStreamAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "stream_id" = ${StreamId}
            "name" = ${Name}
            "description" = ${Description}
            "date_created" = ${DateCreated}
            "invite_only" = ${InviteOnly}
            "rendered_description" = ${RenderedDescription}
            "is_web_public" = ${IsWebPublic}
            "stream_post_policy" = ${StreamPostPolicy}
            "message_retention_days" = ${MessageRetentionDays}
            "history_public_to_subscribers" = ${HistoryPublicToSubscribers}
            "first_message_id" = ${FirstMessageId}
            "is_announcement_only" = ${IsAnnouncementOnly}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BasicStreamAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to BasicStreamAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BasicStreamAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToBasicStreamAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BasicStreamAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BasicStreamAllOf
        $AllProperties = ("stream_id", "name", "description", "date_created", "invite_only", "rendered_description", "is_web_public", "stream_post_policy", "message_retention_days", "history_public_to_subscribers", "first_message_id", "is_announcement_only")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stream_id"))) { #optional property not found
            $StreamId = $null
        } else {
            $StreamId = $JsonParameters.PSobject.Properties["stream_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date_created"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["date_created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invite_only"))) { #optional property not found
            $InviteOnly = $null
        } else {
            $InviteOnly = $JsonParameters.PSobject.Properties["invite_only"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rendered_description"))) { #optional property not found
            $RenderedDescription = $null
        } else {
            $RenderedDescription = $JsonParameters.PSobject.Properties["rendered_description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_web_public"))) { #optional property not found
            $IsWebPublic = $null
        } else {
            $IsWebPublic = $JsonParameters.PSobject.Properties["is_web_public"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "stream_post_policy"))) { #optional property not found
            $StreamPostPolicy = $null
        } else {
            $StreamPostPolicy = $JsonParameters.PSobject.Properties["stream_post_policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message_retention_days"))) { #optional property not found
            $MessageRetentionDays = $null
        } else {
            $MessageRetentionDays = $JsonParameters.PSobject.Properties["message_retention_days"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "history_public_to_subscribers"))) { #optional property not found
            $HistoryPublicToSubscribers = $null
        } else {
            $HistoryPublicToSubscribers = $JsonParameters.PSobject.Properties["history_public_to_subscribers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "first_message_id"))) { #optional property not found
            $FirstMessageId = $null
        } else {
            $FirstMessageId = $JsonParameters.PSobject.Properties["first_message_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_announcement_only"))) { #optional property not found
            $IsAnnouncementOnly = $null
        } else {
            $IsAnnouncementOnly = $JsonParameters.PSobject.Properties["is_announcement_only"].value
        }

        $PSO = [PSCustomObject]@{
            "stream_id" = ${StreamId}
            "name" = ${Name}
            "description" = ${Description}
            "date_created" = ${DateCreated}
            "invite_only" = ${InviteOnly}
            "rendered_description" = ${RenderedDescription}
            "is_web_public" = ${IsWebPublic}
            "stream_post_policy" = ${StreamPostPolicy}
            "message_retention_days" = ${MessageRetentionDays}
            "history_public_to_subscribers" = ${HistoryPublicToSubscribers}
            "first_message_id" = ${FirstMessageId}
            "is_announcement_only" = ${IsAnnouncementOnly}
        }

        return $PSO
    }

}

