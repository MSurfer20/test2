#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Dictionary containing details of a default stream group. 

.PARAMETER Name
Name of the default stream group. 
.PARAMETER Description
Description of the default stream group. 
.PARAMETER Id
id of the default stream group. 
.PARAMETER Streams
Array containing details about the streams in the default stream group. 
.OUTPUTS

DefaultStreamGroup<PSCustomObject>
#>

function Initialize-DefaultStreamGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Streams}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DefaultStreamGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "id" = ${Id}
            "streams" = ${Streams}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DefaultStreamGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to DefaultStreamGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DefaultStreamGroup<PSCustomObject>
#>
function ConvertFrom-JsonToDefaultStreamGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DefaultStreamGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DefaultStreamGroup
        $AllProperties = ("name", "description", "id", "streams")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "streams"))) { #optional property not found
            $Streams = $null
        } else {
            $Streams = $JsonParameters.PSobject.Properties["streams"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "id" = ${Id}
            "streams" = ${Streams}
        }

        return $PSO
    }

}

