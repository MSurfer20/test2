#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the `id` field.  **Note**: In the [events API](/api/get-events), this `user` dictionary confusing had the user ID in a field called `user_id` instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the `user_id` field. 

.PARAMETER Id
ID of the user. 
.PARAMETER Email
Email of the user. 
.PARAMETER FullName
Full name of the user. 
.PARAMETER IsMirrorDummy
Whether the user is a mirror dummy. 
.OUTPUTS

EmojiReactionBaseAllOfUser<PSCustomObject>
#>

function Initialize-EmojiReactionBaseAllOfUser {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsMirrorDummy}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmojiReactionBaseAllOfUser' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "email" = ${Email}
            "full_name" = ${FullName}
            "is_mirror_dummy" = ${IsMirrorDummy}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmojiReactionBaseAllOfUser<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmojiReactionBaseAllOfUser<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmojiReactionBaseAllOfUser<PSCustomObject>
#>
function ConvertFrom-JsonToEmojiReactionBaseAllOfUser {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmojiReactionBaseAllOfUser' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmojiReactionBaseAllOfUser
        $AllProperties = ("id", "email", "full_name", "is_mirror_dummy")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full_name"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_mirror_dummy"))) { #optional property not found
            $IsMirrorDummy = $null
        } else {
            $IsMirrorDummy = $JsonParameters.PSobject.Properties["is_mirror_dummy"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "email" = ${Email}
            "full_name" = ${FullName}
            "is_mirror_dummy" = ${IsMirrorDummy}
        }

        return $PSO
    }

}

