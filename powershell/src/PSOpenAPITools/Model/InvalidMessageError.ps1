#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Result
No description available.
.PARAMETER Msg
No description available.
.PARAMETER RawContent
The raw content of the message. 
.OUTPUTS

InvalidMessageError<PSCustomObject>
#>

function Initialize-InvalidMessageError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Result},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Msg},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RawContent}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => InvalidMessageError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "raw_content" = ${RawContent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InvalidMessageError<PSCustomObject>

.DESCRIPTION

Convert from JSON to InvalidMessageError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InvalidMessageError<PSCustomObject>
#>
function ConvertFrom-JsonToInvalidMessageError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => InvalidMessageError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InvalidMessageError
        $AllProperties = ("result", "msg", "raw_content")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'result' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result"))) {
            throw "Error! JSON cannot be serialized due to the required property 'result' missing."
        } else {
            $Result = $JsonParameters.PSobject.Properties["result"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) {
            throw "Error! JSON cannot be serialized due to the required property 'msg' missing."
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw_content"))) { #optional property not found
            $RawContent = $null
        } else {
            $RawContent = $JsonParameters.PSobject.Properties["raw_content"].value
        }

        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "raw_content" = ${RawContent}
        }

        return $PSO
    }

}

