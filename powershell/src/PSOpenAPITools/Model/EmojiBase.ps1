#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EmojiCode
A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji. 
.PARAMETER EmojiName
Name of the emoji. 
.PARAMETER ReactionType
One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 
.OUTPUTS

EmojiBase<PSCustomObject>
#>

function Initialize-EmojiBase {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmojiCode},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EmojiName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReactionType}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EmojiBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "emoji_code" = ${EmojiCode}
            "emoji_name" = ${EmojiName}
            "reaction_type" = ${ReactionType}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EmojiBase<PSCustomObject>

.DESCRIPTION

Convert from JSON to EmojiBase<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EmojiBase<PSCustomObject>
#>
function ConvertFrom-JsonToEmojiBase {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EmojiBase' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EmojiBase
        $AllProperties = ("emoji_code", "emoji_name", "reaction_type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emoji_code"))) { #optional property not found
            $EmojiCode = $null
        } else {
            $EmojiCode = $JsonParameters.PSobject.Properties["emoji_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "emoji_name"))) { #optional property not found
            $EmojiName = $null
        } else {
            $EmojiName = $JsonParameters.PSobject.Properties["emoji_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reaction_type"))) { #optional property not found
            $ReactionType = $null
        } else {
            $ReactionType = $JsonParameters.PSobject.Properties["reaction_type"].value
        }

        $PSO = [PSCustomObject]@{
            "emoji_code" = ${EmojiCode}
            "emoji_name" = ${EmojiName}
            "reaction_type" = ${ReactionType}
        }

        return $PSO
    }

}

