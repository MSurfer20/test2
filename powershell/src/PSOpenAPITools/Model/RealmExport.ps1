#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object containing details about a realm export. 

.PARAMETER Id
The id of the export. 
.PARAMETER ActingUserId
The id of the user who did the export. 
.PARAMETER ExportTime
The UNIX timestamp of when the export was made. 
.PARAMETER DeletedTimestamp
The timestamp of when the export was deleted. Null if it wasn't. 
.PARAMETER FailedTimestamp
The timestamp of when the export failed. Null if it didn't. 
.PARAMETER ExportUrl
The URL of the export. `null` if there's no URL. 
.PARAMETER Pending
Whether the export is pending or not. 
.OUTPUTS

RealmExport<PSCustomObject>
#>

function Initialize-RealmExport {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ActingUserId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${ExportTime},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DeletedTimestamp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${FailedTimestamp},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ExportUrl},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Pending}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RealmExport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "acting_user_id" = ${ActingUserId}
            "export_time" = ${ExportTime}
            "deleted_timestamp" = ${DeletedTimestamp}
            "failed_timestamp" = ${FailedTimestamp}
            "export_url" = ${ExportUrl}
            "pending" = ${Pending}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RealmExport<PSCustomObject>

.DESCRIPTION

Convert from JSON to RealmExport<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RealmExport<PSCustomObject>
#>
function ConvertFrom-JsonToRealmExport {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RealmExport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RealmExport
        $AllProperties = ("id", "acting_user_id", "export_time", "deleted_timestamp", "failed_timestamp", "export_url", "pending")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "acting_user_id"))) { #optional property not found
            $ActingUserId = $null
        } else {
            $ActingUserId = $JsonParameters.PSobject.Properties["acting_user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "export_time"))) { #optional property not found
            $ExportTime = $null
        } else {
            $ExportTime = $JsonParameters.PSobject.Properties["export_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted_timestamp"))) { #optional property not found
            $DeletedTimestamp = $null
        } else {
            $DeletedTimestamp = $JsonParameters.PSobject.Properties["deleted_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "failed_timestamp"))) { #optional property not found
            $FailedTimestamp = $null
        } else {
            $FailedTimestamp = $JsonParameters.PSobject.Properties["failed_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "export_url"))) { #optional property not found
            $ExportUrl = $null
        } else {
            $ExportUrl = $JsonParameters.PSobject.Properties["export_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pending"))) { #optional property not found
            $Pending = $null
        } else {
            $Pending = $JsonParameters.PSobject.Properties["pending"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "acting_user_id" = ${ActingUserId}
            "export_time" = ${ExportTime}
            "deleted_timestamp" = ${DeletedTimestamp}
            "failed_timestamp" = ${FailedTimestamp}
            "export_url" = ${ExportUrl}
            "pending" = ${Pending}
        }

        return $PSO
    }

}

