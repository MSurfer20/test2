#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Dictionary containing details of a single hotspot. 

.PARAMETER Delay
The delay after which the user should be shown the hotspot. 
.PARAMETER Name
The name of the hotspot. 
.PARAMETER Title
The title of the hotspot, as will be displayed to the user. 
.PARAMETER Description
The description of the hotspot, as will be displayed to the user. 
.OUTPUTS

Hotspot<PSCustomObject>
#>

function Initialize-Hotspot {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${Delay},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Hotspot' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "delay" = ${Delay}
            "name" = ${Name}
            "title" = ${Title}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Hotspot<PSCustomObject>

.DESCRIPTION

Convert from JSON to Hotspot<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Hotspot<PSCustomObject>
#>
function ConvertFrom-JsonToHotspot {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Hotspot' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Hotspot
        $AllProperties = ("delay", "name", "title", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "delay"))) { #optional property not found
            $Delay = $null
        } else {
            $Delay = $JsonParameters.PSobject.Properties["delay"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "delay" = ${Delay}
            "name" = ${Name}
            "title" = ${Title}
            "description" = ${Description}
        }

        return $PSO
    }

}

