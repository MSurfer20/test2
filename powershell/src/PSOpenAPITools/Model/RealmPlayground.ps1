#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object containing details about a realm playground. 

.PARAMETER Id
The unique ID for the realm playground. 
.PARAMETER Name
The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). 
.PARAMETER PygmentsLanguage
The name of the Pygments language lexer for that programming language. 
.PARAMETER UrlPrefix
The url prefix for the playground. 
.OUTPUTS

RealmPlayground<PSCustomObject>
#>

function Initialize-RealmPlayground {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PygmentsLanguage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UrlPrefix}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RealmPlayground' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "pygments_language" = ${PygmentsLanguage}
            "url_prefix" = ${UrlPrefix}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RealmPlayground<PSCustomObject>

.DESCRIPTION

Convert from JSON to RealmPlayground<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RealmPlayground<PSCustomObject>
#>
function ConvertFrom-JsonToRealmPlayground {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RealmPlayground' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RealmPlayground
        $AllProperties = ("id", "name", "pygments_language", "url_prefix")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pygments_language"))) { #optional property not found
            $PygmentsLanguage = $null
        } else {
            $PygmentsLanguage = $JsonParameters.PSobject.Properties["pygments_language"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url_prefix"))) { #optional property not found
            $UrlPrefix = $null
        } else {
            $UrlPrefix = $JsonParameters.PSobject.Properties["url_prefix"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "pygments_language" = ${PygmentsLanguage}
            "url_prefix" = ${UrlPrefix}
        }

        return $PSO
    }

}

