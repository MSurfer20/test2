#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Object containing details of a bot. 

.PARAMETER UserId
No description available.
.PARAMETER FullName
No description available.
.PARAMETER ApiKey
No description available.
.PARAMETER DefaultSendingStream
No description available.
.PARAMETER DefaultEventsRegisterStream
No description available.
.PARAMETER DefaultAllPublicStreams
No description available.
.PARAMETER AvatarUrl
No description available.
.PARAMETER OwnerId
No description available.
.PARAMETER Services
No description available.
.PARAMETER Email
The email of the bot. 
.PARAMETER BotType
An integer describing the type of bot: * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
.PARAMETER IsActive
A boolean describing whether the user account has been deactivated. 
.OUTPUTS

BotAllOf<PSCustomObject>
#>

function Initialize-BotAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UserId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${FullName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ApiKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultSendingStream},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultEventsRegisterStream},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultAllPublicStreams},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AvatarUrl},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OwnerId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Services},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${BotType},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActive}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => BotAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "user_id" = ${UserId}
            "full_name" = ${FullName}
            "api_key" = ${ApiKey}
            "default_sending_stream" = ${DefaultSendingStream}
            "default_events_register_stream" = ${DefaultEventsRegisterStream}
            "default_all_public_streams" = ${DefaultAllPublicStreams}
            "avatar_url" = ${AvatarUrl}
            "owner_id" = ${OwnerId}
            "services" = ${Services}
            "email" = ${Email}
            "bot_type" = ${BotType}
            "is_active" = ${IsActive}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to BotAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to BotAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

BotAllOf<PSCustomObject>
#>
function ConvertFrom-JsonToBotAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => BotAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in BotAllOf
        $AllProperties = ("user_id", "full_name", "api_key", "default_sending_stream", "default_events_register_stream", "default_all_public_streams", "avatar_url", "owner_id", "services", "email", "bot_type", "is_active")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_id"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["user_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "full_name"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "api_key"))) { #optional property not found
            $ApiKey = $null
        } else {
            $ApiKey = $JsonParameters.PSobject.Properties["api_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_sending_stream"))) { #optional property not found
            $DefaultSendingStream = $null
        } else {
            $DefaultSendingStream = $JsonParameters.PSobject.Properties["default_sending_stream"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_events_register_stream"))) { #optional property not found
            $DefaultEventsRegisterStream = $null
        } else {
            $DefaultEventsRegisterStream = $JsonParameters.PSobject.Properties["default_events_register_stream"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_all_public_streams"))) { #optional property not found
            $DefaultAllPublicStreams = $null
        } else {
            $DefaultAllPublicStreams = $JsonParameters.PSobject.Properties["default_all_public_streams"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avatar_url"))) { #optional property not found
            $AvatarUrl = $null
        } else {
            $AvatarUrl = $JsonParameters.PSobject.Properties["avatar_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner_id"))) { #optional property not found
            $OwnerId = $null
        } else {
            $OwnerId = $JsonParameters.PSobject.Properties["owner_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "services"))) { #optional property not found
            $Services = $null
        } else {
            $Services = $JsonParameters.PSobject.Properties["services"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bot_type"))) { #optional property not found
            $BotType = $null
        } else {
            $BotType = $JsonParameters.PSobject.Properties["bot_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_active"))) { #optional property not found
            $IsActive = $null
        } else {
            $IsActive = $JsonParameters.PSobject.Properties["is_active"].value
        }

        $PSO = [PSCustomObject]@{
            "user_id" = ${UserId}
            "full_name" = ${FullName}
            "api_key" = ${ApiKey}
            "default_sending_stream" = ${DefaultSendingStream}
            "default_events_register_stream" = ${DefaultEventsRegisterStream}
            "default_all_public_streams" = ${DefaultAllPublicStreams}
            "avatar_url" = ${AvatarUrl}
            "owner_id" = ${OwnerId}
            "services" = ${Services}
            "email" = ${Email}
            "bot_type" = ${BotType}
            "is_active" = ${IsActive}
        }

        return $PSO
    }

}

