#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Result
No description available.
.PARAMETER Msg
No description available.
.PARAMETER Subscribed
A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
.PARAMETER AlreadySubscribed
A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
.PARAMETER Unauthorized
A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 
.OUTPUTS

AddSubscriptionsResponse<PSCustomObject>
#>

function Initialize-AddSubscriptionsResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Result},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Msg},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Subscribed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${AlreadySubscribed},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Unauthorized}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AddSubscriptionsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "subscribed" = ${Subscribed}
            "already_subscribed" = ${AlreadySubscribed}
            "unauthorized" = ${Unauthorized}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AddSubscriptionsResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to AddSubscriptionsResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AddSubscriptionsResponse<PSCustomObject>
#>
function ConvertFrom-JsonToAddSubscriptionsResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AddSubscriptionsResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AddSubscriptionsResponse
        $AllProperties = ("result", "msg", "subscribed", "already_subscribed", "unauthorized")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'result' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result"))) {
            throw "Error! JSON cannot be serialized due to the required property 'result' missing."
        } else {
            $Result = $JsonParameters.PSobject.Properties["result"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "msg"))) {
            throw "Error! JSON cannot be serialized due to the required property 'msg' missing."
        } else {
            $Msg = $JsonParameters.PSobject.Properties["msg"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subscribed"))) { #optional property not found
            $Subscribed = $null
        } else {
            $Subscribed = $JsonParameters.PSobject.Properties["subscribed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "already_subscribed"))) { #optional property not found
            $AlreadySubscribed = $null
        } else {
            $AlreadySubscribed = $JsonParameters.PSobject.Properties["already_subscribed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unauthorized"))) { #optional property not found
            $Unauthorized = $null
        } else {
            $Unauthorized = $JsonParameters.PSobject.Properties["unauthorized"].value
        }

        $PSO = [PSCustomObject]@{
            "result" = ${Result}
            "msg" = ${Msg}
            "subscribed" = ${Subscribed}
            "already_subscribed" = ${AlreadySubscribed}
            "unauthorized" = ${Unauthorized}
        }

        return $PSO
    }

}

