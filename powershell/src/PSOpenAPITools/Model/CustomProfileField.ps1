#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Dictionary containing the details of a custom profile field configured for this organization. 

.PARAMETER Id
The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects. 
.PARAMETER Type
An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
.PARAMETER Order
Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`. 
.PARAMETER Name
The name of the custom profile field. 
.PARAMETER Hint
The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
.PARAMETER FieldData
Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
.OUTPUTS

CustomProfileField<PSCustomObject>
#>

function Initialize-CustomProfileField {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Order},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hint},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FieldData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CustomProfileField' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "order" = ${Order}
            "name" = ${Name}
            "hint" = ${Hint}
            "field_data" = ${FieldData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomProfileField<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomProfileField<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomProfileField<PSCustomObject>
#>
function ConvertFrom-JsonToCustomProfileField {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CustomProfileField' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomProfileField
        $AllProperties = ("id", "type", "order", "name", "hint", "field_data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order"))) { #optional property not found
            $Order = $null
        } else {
            $Order = $JsonParameters.PSobject.Properties["order"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hint"))) { #optional property not found
            $Hint = $null
        } else {
            $Hint = $JsonParameters.PSobject.Properties["hint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "field_data"))) { #optional property not found
            $FieldData = $null
        } else {
            $FieldData = $JsonParameters.PSobject.Properties["field_data"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "order" = ${Order}
            "name" = ${Name}
            "hint" = ${Hint}
            "field_data" = ${FieldData}
        }

        return $PSO
    }

}

