#
# Zulip REST API
# Powerful open source group chat 
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

This is an example of the JSON payload that the Zulip server will `POST` to your server 

.PARAMETER BotEmail
Email of the bot user. 
.PARAMETER BotFullName
The full name of the bot user. 
.PARAMETER VarData
The message content, in raw Markdown format (not rendered to HTML). 
.PARAMETER Trigger
What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`. 
.PARAMETER Token
A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot. 
.PARAMETER Message
A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages). 
.OUTPUTS

InlineResponse200<PSCustomObject>
#>

function Initialize-InlineResponse200 {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BotEmail},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BotFullName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarData},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Trigger},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Token},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Message}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => InlineResponse200' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "bot_email" = ${BotEmail}
            "bot_full_name" = ${BotFullName}
            "data" = ${VarData}
            "trigger" = ${Trigger}
            "token" = ${Token}
            "message" = ${Message}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InlineResponse200<PSCustomObject>

.DESCRIPTION

Convert from JSON to InlineResponse200<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InlineResponse200<PSCustomObject>
#>
function ConvertFrom-JsonToInlineResponse200 {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => InlineResponse200' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InlineResponse200
        $AllProperties = ("bot_email", "bot_full_name", "data", "trigger", "token", "message")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bot_email"))) { #optional property not found
            $BotEmail = $null
        } else {
            $BotEmail = $JsonParameters.PSobject.Properties["bot_email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bot_full_name"))) { #optional property not found
            $BotFullName = $null
        } else {
            $BotFullName = $JsonParameters.PSobject.Properties["bot_full_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) { #optional property not found
            $VarData = $null
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "trigger"))) { #optional property not found
            $Trigger = $null
        } else {
            $Trigger = $JsonParameters.PSobject.Properties["trigger"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token"))) { #optional property not found
            $Token = $null
        } else {
            $Token = $JsonParameters.PSobject.Properties["token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        $PSO = [PSCustomObject]@{
            "bot_email" = ${BotEmail}
            "bot_full_name" = ${BotFullName}
            "data" = ${VarData}
            "trigger" = ${Trigger}
            "token" = ${Token}
            "message" = ${Message}
        }

        return $PSO
    }

}

