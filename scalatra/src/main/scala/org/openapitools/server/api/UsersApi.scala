/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.AnyType
import org.openapitools.server.model.CodedError
import org.openapitools.server.model.JsonError
import org.openapitools.server.model.JsonSuccess
import org.openapitools.server.model.JsonSuccessBase
import org.openapitools.server.model.OneOfobjectobject
import org.openapitools.server.model.OneOfobjectobjectobject
import org.openapitools.server.model.OneOfobjectobjectobjectobjectobjectobject

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class UsersApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "UsersApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val createUserOperation = (apiOperation[JsonSuccessBase]("createUser")
    summary "Create a user"
    parameters(queryParam[String]("email").description(""), queryParam[String]("password").description(""), queryParam[String]("fullName").description(""))
  )

  post("/users", operation(createUserOperation)) {
            val email = params.getAs[String]("email")

    //println("email: " + email)
            val password = params.getAs[String]("password")

    //println("password: " + password)
            val fullName = params.getAs[String]("fullName")

    //println("fullName: " + fullName)
  }

  

  val createUserGroupOperation = (apiOperation[JsonSuccess]("createUserGroup")
    summary "Create a user group"
    parameters(queryParam[String]("name").description(""), queryParam[String]("description").description(""), queryParam[List[Int]]("members").description("").defaultValue(List.empty[Int] ))
  )

  post("/user_groups/create", operation(createUserGroupOperation)) {
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val description = params.getAs[String]("description")

    //println("description: " + description)
        val membersString = params.getAs[String]("members")
    val members = if("multi" == "default" || "multi" == "csv") {
      membersString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("members: " + members)
  }

  

  val deactivateOwnUserOperation = (apiOperation[JsonSuccess]("deactivateOwnUser")
    summary "Deactivate own user"
    parameters()
  )

  delete("/users/me", operation(deactivateOwnUserOperation)) {
  }

  

  val deactivateUserOperation = (apiOperation[JsonSuccess]("deactivateUser")
    summary "Deactivate a user"
    parameters(pathParam[Int]("userId").description(""))
  )

  delete("/users/:user_id", operation(deactivateUserOperation)) {
    val userId = params.getOrElse("userId", halt(400))
    //println("userId: " + userId)
  }

  

  val getAttachmentsOperation = (apiOperation[JsonSuccessBase]("getAttachments")
    summary "Get attachments"
    parameters()
  )

  get("/attachments", operation(getAttachmentsOperation)) {
  }

  

  val getOwnUserOperation = (apiOperation[JsonSuccessBase]("getOwnUser")
    summary "Get own user"
    parameters()
  )

  get("/users/me", operation(getOwnUserOperation)) {
  }

  

  val getUserOperation = (apiOperation[JsonSuccessBase]("getUser")
    summary "Get a user"
    parameters(pathParam[Int]("userId").description(""), queryParam[Boolean]("clientGravatar").description("").optional.defaultValue(false), queryParam[Boolean]("includeCustomProfileFields").description("").optional.defaultValue(false))
  )

  get("/users/:user_id", operation(getUserOperation)) {
    val userId = params.getOrElse("userId", halt(400))
    //println("userId: " + userId)
            val clientGravatar = params.getAs[Boolean]("clientGravatar")

    //println("clientGravatar: " + clientGravatar)
            val includeCustomProfileFields = params.getAs[Boolean]("includeCustomProfileFields")

    //println("includeCustomProfileFields: " + includeCustomProfileFields)
  }

  

  val getUserByEmailOperation = (apiOperation[JsonSuccessBase]("getUserByEmail")
    summary "Get a user by email"
    parameters(pathParam[String]("email").description(""), queryParam[Boolean]("clientGravatar").description("").optional.defaultValue(false), queryParam[Boolean]("includeCustomProfileFields").description("").optional.defaultValue(false))
  )

  get("/users/:email", operation(getUserByEmailOperation)) {
    val email = params.getOrElse("email", halt(400))
    //println("email: " + email)
            val clientGravatar = params.getAs[Boolean]("clientGravatar")

    //println("clientGravatar: " + clientGravatar)
            val includeCustomProfileFields = params.getAs[Boolean]("includeCustomProfileFields")

    //println("includeCustomProfileFields: " + includeCustomProfileFields)
  }

  

  val getUserGroupsOperation = (apiOperation[JsonSuccessBase]("getUserGroups")
    summary "Get user groups"
    parameters()
  )

  get("/user_groups", operation(getUserGroupsOperation)) {
  }

  

  val getUserPresenceOperation = (apiOperation[JsonSuccessBase]("getUserPresence")
    summary "Get user presence"
    parameters(pathParam[String]("userIdOrEmail").description(""))
  )

  get("/users/:user_id_or_email/presence", operation(getUserPresenceOperation)) {
    val userIdOrEmail = params.getOrElse("userIdOrEmail", halt(400))
    //println("userIdOrEmail: " + userIdOrEmail)
  }

  

  val getUsersOperation = (apiOperation[JsonSuccessBase]("getUsers")
    summary "Get all users"
    parameters(queryParam[Boolean]("clientGravatar").description("").optional.defaultValue(false), queryParam[Boolean]("includeCustomProfileFields").description("").optional.defaultValue(false))
  )

  get("/users", operation(getUsersOperation)) {
            val clientGravatar = params.getAs[Boolean]("clientGravatar")

    //println("clientGravatar: " + clientGravatar)
            val includeCustomProfileFields = params.getAs[Boolean]("includeCustomProfileFields")

    //println("includeCustomProfileFields: " + includeCustomProfileFields)
  }

  

  val muteUserOperation = (apiOperation[JsonSuccess]("muteUser")
    summary "Mute a user"
    parameters(pathParam[Int]("mutedUserId").description(""))
  )

  post("/users/me/muted_users/:muted_user_id", operation(muteUserOperation)) {
    val mutedUserId = params.getOrElse("mutedUserId", halt(400))
    //println("mutedUserId: " + mutedUserId)
  }

  

  val reactivateUserOperation = (apiOperation[AnyType]("reactivateUser")
    summary "Reactivate a user"
    parameters(pathParam[Int]("userId").description(""))
  )

  post("/users/:user_id/reactivate", operation(reactivateUserOperation)) {
    val userId = params.getOrElse("userId", halt(400))
    //println("userId: " + userId)
  }

  

  val removeUserGroupOperation = (apiOperation[JsonSuccess]("removeUserGroup")
    summary "Delete a user group"
    parameters(pathParam[Int]("userGroupId").description(""))
  )

  delete("/user_groups/:user_group_id", operation(removeUserGroupOperation)) {
    val userGroupId = params.getOrElse("userGroupId", halt(400))
    //println("userGroupId: " + userGroupId)
  }

  

  val setTypingStatusOperation = (apiOperation[JsonSuccess]("setTypingStatus")
    summary "Set \"typing\" status"
    parameters(queryParam[String]("op").description(""), queryParam[List[Int]]("to").description("").defaultValue(List.empty[Int] ), queryParam[String]("`type`").description("").optional.defaultValue(private), queryParam[String]("topic").description("").optional)
  )

  post("/typing", operation(setTypingStatusOperation)) {
            val op = params.getAs[String]("op")

    //println("op: " + op)
        val toString = params.getAs[String]("to")
    val to = if("multi" == "default" || "multi" == "csv") {
      toString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("to: " + to)
            val `type` = params.getAs[String]("`type`")

    //println("`type`: " + `type`)
            val topic = params.getAs[String]("topic")

    //println("topic: " + topic)
  }

  

  val unmuteUserOperation = (apiOperation[JsonSuccess]("unmuteUser")
    summary "Unmute a user"
    parameters(pathParam[Int]("mutedUserId").description(""))
  )

  delete("/users/me/muted_users/:muted_user_id", operation(unmuteUserOperation)) {
    val mutedUserId = params.getOrElse("mutedUserId", halt(400))
    //println("mutedUserId: " + mutedUserId)
  }

  

  val updateSettingsOperation = (apiOperation[JsonSuccessBase]("updateSettings")
    summary "Update settings"
    parameters(queryParam[String]("fullName").description("").optional, queryParam[String]("email").description("").optional, queryParam[String]("oldPassword").description("").optional, queryParam[String]("newPassword").description("").optional, queryParam[Boolean]("twentyFourHourTime").description("").optional, queryParam[Boolean]("denseMode").description("").optional, queryParam[Boolean]("starredMessageCounts").description("").optional, queryParam[Boolean]("fluidLayoutWidth").description("").optional, queryParam[Boolean]("highContrastMode").description("").optional, queryParam[Int]("colorScheme").description("").optional, queryParam[Boolean]("enableDraftsSynchronization").description("").optional, queryParam[Boolean]("translateEmoticons").description("").optional, queryParam[String]("defaultLanguage").description("").optional, queryParam[String]("defaultView").description("").optional, queryParam[Boolean]("leftSideUserlist").description("").optional, queryParam[String]("emojiset").description("").optional, queryParam[Int]("demoteInactiveStreams").description("").optional, queryParam[String]("timezone").description("").optional, queryParam[Boolean]("enableStreamDesktopNotifications").description("").optional, queryParam[Boolean]("enableStreamEmailNotifications").description("").optional, queryParam[Boolean]("enableStreamPushNotifications").description("").optional, queryParam[Boolean]("enableStreamAudibleNotifications").description("").optional, queryParam[String]("notificationSound").description("").optional, queryParam[Boolean]("enableDesktopNotifications").description("").optional, queryParam[Boolean]("enableSounds").description("").optional, queryParam[Int]("emailNotificationsBatchingPeriodSeconds").description("").optional, queryParam[Boolean]("enableOfflineEmailNotifications").description("").optional, queryParam[Boolean]("enableOfflinePushNotifications").description("").optional, queryParam[Boolean]("enableOnlinePushNotifications").description("").optional, queryParam[Boolean]("enableDigestEmails").description("").optional, queryParam[Boolean]("enableMarketingEmails").description("").optional, queryParam[Boolean]("enableLoginEmails").description("").optional, queryParam[Boolean]("messageContentInEmailNotifications").description("").optional, queryParam[Boolean]("pmContentInDesktopNotifications").description("").optional, queryParam[Boolean]("wildcardMentionsNotify").description("").optional, queryParam[Int]("desktopIconCountDisplay").description("").optional, queryParam[Boolean]("realmNameInNotifications").description("").optional, queryParam[Boolean]("presenceEnabled").description("").optional, queryParam[Boolean]("enterSends").description("").optional)
  )

  patch("/settings", operation(updateSettingsOperation)) {
            val fullName = params.getAs[String]("fullName")

    //println("fullName: " + fullName)
            val email = params.getAs[String]("email")

    //println("email: " + email)
            val oldPassword = params.getAs[String]("oldPassword")

    //println("oldPassword: " + oldPassword)
            val newPassword = params.getAs[String]("newPassword")

    //println("newPassword: " + newPassword)
            val twentyFourHourTime = params.getAs[Boolean]("twentyFourHourTime")

    //println("twentyFourHourTime: " + twentyFourHourTime)
            val denseMode = params.getAs[Boolean]("denseMode")

    //println("denseMode: " + denseMode)
            val starredMessageCounts = params.getAs[Boolean]("starredMessageCounts")

    //println("starredMessageCounts: " + starredMessageCounts)
            val fluidLayoutWidth = params.getAs[Boolean]("fluidLayoutWidth")

    //println("fluidLayoutWidth: " + fluidLayoutWidth)
            val highContrastMode = params.getAs[Boolean]("highContrastMode")

    //println("highContrastMode: " + highContrastMode)
            val colorScheme = params.getAs[Int]("colorScheme")

    //println("colorScheme: " + colorScheme)
            val enableDraftsSynchronization = params.getAs[Boolean]("enableDraftsSynchronization")

    //println("enableDraftsSynchronization: " + enableDraftsSynchronization)
            val translateEmoticons = params.getAs[Boolean]("translateEmoticons")

    //println("translateEmoticons: " + translateEmoticons)
            val defaultLanguage = params.getAs[String]("defaultLanguage")

    //println("defaultLanguage: " + defaultLanguage)
            val defaultView = params.getAs[String]("defaultView")

    //println("defaultView: " + defaultView)
            val leftSideUserlist = params.getAs[Boolean]("leftSideUserlist")

    //println("leftSideUserlist: " + leftSideUserlist)
            val emojiset = params.getAs[String]("emojiset")

    //println("emojiset: " + emojiset)
            val demoteInactiveStreams = params.getAs[Int]("demoteInactiveStreams")

    //println("demoteInactiveStreams: " + demoteInactiveStreams)
            val timezone = params.getAs[String]("timezone")

    //println("timezone: " + timezone)
            val enableStreamDesktopNotifications = params.getAs[Boolean]("enableStreamDesktopNotifications")

    //println("enableStreamDesktopNotifications: " + enableStreamDesktopNotifications)
            val enableStreamEmailNotifications = params.getAs[Boolean]("enableStreamEmailNotifications")

    //println("enableStreamEmailNotifications: " + enableStreamEmailNotifications)
            val enableStreamPushNotifications = params.getAs[Boolean]("enableStreamPushNotifications")

    //println("enableStreamPushNotifications: " + enableStreamPushNotifications)
            val enableStreamAudibleNotifications = params.getAs[Boolean]("enableStreamAudibleNotifications")

    //println("enableStreamAudibleNotifications: " + enableStreamAudibleNotifications)
            val notificationSound = params.getAs[String]("notificationSound")

    //println("notificationSound: " + notificationSound)
            val enableDesktopNotifications = params.getAs[Boolean]("enableDesktopNotifications")

    //println("enableDesktopNotifications: " + enableDesktopNotifications)
            val enableSounds = params.getAs[Boolean]("enableSounds")

    //println("enableSounds: " + enableSounds)
            val emailNotificationsBatchingPeriodSeconds = params.getAs[Int]("emailNotificationsBatchingPeriodSeconds")

    //println("emailNotificationsBatchingPeriodSeconds: " + emailNotificationsBatchingPeriodSeconds)
            val enableOfflineEmailNotifications = params.getAs[Boolean]("enableOfflineEmailNotifications")

    //println("enableOfflineEmailNotifications: " + enableOfflineEmailNotifications)
            val enableOfflinePushNotifications = params.getAs[Boolean]("enableOfflinePushNotifications")

    //println("enableOfflinePushNotifications: " + enableOfflinePushNotifications)
            val enableOnlinePushNotifications = params.getAs[Boolean]("enableOnlinePushNotifications")

    //println("enableOnlinePushNotifications: " + enableOnlinePushNotifications)
            val enableDigestEmails = params.getAs[Boolean]("enableDigestEmails")

    //println("enableDigestEmails: " + enableDigestEmails)
            val enableMarketingEmails = params.getAs[Boolean]("enableMarketingEmails")

    //println("enableMarketingEmails: " + enableMarketingEmails)
            val enableLoginEmails = params.getAs[Boolean]("enableLoginEmails")

    //println("enableLoginEmails: " + enableLoginEmails)
            val messageContentInEmailNotifications = params.getAs[Boolean]("messageContentInEmailNotifications")

    //println("messageContentInEmailNotifications: " + messageContentInEmailNotifications)
            val pmContentInDesktopNotifications = params.getAs[Boolean]("pmContentInDesktopNotifications")

    //println("pmContentInDesktopNotifications: " + pmContentInDesktopNotifications)
            val wildcardMentionsNotify = params.getAs[Boolean]("wildcardMentionsNotify")

    //println("wildcardMentionsNotify: " + wildcardMentionsNotify)
            val desktopIconCountDisplay = params.getAs[Int]("desktopIconCountDisplay")

    //println("desktopIconCountDisplay: " + desktopIconCountDisplay)
            val realmNameInNotifications = params.getAs[Boolean]("realmNameInNotifications")

    //println("realmNameInNotifications: " + realmNameInNotifications)
            val presenceEnabled = params.getAs[Boolean]("presenceEnabled")

    //println("presenceEnabled: " + presenceEnabled)
            val enterSends = params.getAs[Boolean]("enterSends")

    //println("enterSends: " + enterSends)
  }

  

  val updateStatusOperation = (apiOperation[JsonSuccess]("updateStatus")
    summary "Update your status"
    parameters(queryParam[String]("statusText").description("").optional, queryParam[Boolean]("away").description("").optional, queryParam[String]("emojiName").description("").optional, queryParam[String]("emojiCode").description("").optional, queryParam[String]("reactionType").description("").optional)
  )

  post("/users/me/status", operation(updateStatusOperation)) {
            val statusText = params.getAs[String]("statusText")

    //println("statusText: " + statusText)
            val away = params.getAs[Boolean]("away")

    //println("away: " + away)
            val emojiName = params.getAs[String]("emojiName")

    //println("emojiName: " + emojiName)
            val emojiCode = params.getAs[String]("emojiCode")

    //println("emojiCode: " + emojiCode)
            val reactionType = params.getAs[String]("reactionType")

    //println("reactionType: " + reactionType)
  }

  

  val updateUserOperation = (apiOperation[JsonSuccess]("updateUser")
    summary "Update a user"
    parameters(pathParam[Int]("userId").description(""), queryParam[String]("fullName").description("").optional, queryParam[Int]("role").description("").optional, queryParam[List[Any]]("profileData").description("").optional.defaultValue(List.empty[Any] ))
  )

  patch("/users/:user_id", operation(updateUserOperation)) {
    val userId = params.getOrElse("userId", halt(400))
    //println("userId: " + userId)
            val fullName = params.getAs[String]("fullName")

    //println("fullName: " + fullName)
            val role = params.getAs[Int]("role")

    //println("role: " + role)
        val profileDataString = params.getAs[String]("profileData")
    val profileData = if("multi" == "default" || "multi" == "csv") {
      profileDataString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("profileData: " + profileData)
  }

  

  val updateUserGroupOperation = (apiOperation[JsonSuccess]("updateUserGroup")
    summary "Update a user group"
    parameters(pathParam[Int]("userGroupId").description(""), queryParam[String]("name").description(""), queryParam[String]("description").description(""))
  )

  patch("/user_groups/:user_group_id", operation(updateUserGroupOperation)) {
    val userGroupId = params.getOrElse("userGroupId", halt(400))
    //println("userGroupId: " + userGroupId)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val description = params.getAs[String]("description")

    //println("description: " + description)
  }

  

  val updateUserGroupMembersOperation = (apiOperation[JsonSuccess]("updateUserGroupMembers")
    summary "Update user group members"
    parameters(pathParam[Int]("userGroupId").description(""), queryParam[List[Int]]("delete").description("").optional.defaultValue(List.empty[Int] ), queryParam[List[Int]]("add").description("").optional.defaultValue(List.empty[Int] ))
  )

  post("/user_groups/:user_group_id/members", operation(updateUserGroupMembersOperation)) {
    val userGroupId = params.getOrElse("userGroupId", halt(400))
    //println("userGroupId: " + userGroupId)
        val deleteString = params.getAs[String]("delete")
    val delete = if("multi" == "default" || "multi" == "csv") {
      deleteString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("delete: " + delete)
        val addString = params.getAs[String]("add")
    val add = if("multi" == "default" || "multi" == "csv") {
      addString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("add: " + add)
  }

}
