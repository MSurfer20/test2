/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import java.io.File
import org.openapitools.server.model.JsonSuccess
import org.openapitools.server.model.JsonSuccessBase

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class ServerAndOrganizationsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "ServerAndOrganizationsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val addCodePlaygroundOperation = (apiOperation[JsonSuccessBase]("addCodePlayground")
    summary "Add a code playground"
    parameters(queryParam[String]("name").description(""), queryParam[String]("pygmentsLanguage").description(""), queryParam[String]("urlPrefix").description(""))
  )

  post("/realm/playgrounds", operation(addCodePlaygroundOperation)) {
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val pygmentsLanguage = params.getAs[String]("pygmentsLanguage")

    //println("pygmentsLanguage: " + pygmentsLanguage)
            val urlPrefix = params.getAs[String]("urlPrefix")

    //println("urlPrefix: " + urlPrefix)
  }

  

  val addLinkifierOperation = (apiOperation[JsonSuccessBase]("addLinkifier")
    summary "Add a linkifier"
    parameters(queryParam[String]("pattern").description(""), queryParam[String]("urlFormatString").description(""))
  )

  post("/realm/filters", operation(addLinkifierOperation)) {
            val pattern = params.getAs[String]("pattern")

    //println("pattern: " + pattern)
            val urlFormatString = params.getAs[String]("urlFormatString")

    //println("urlFormatString: " + urlFormatString)
  }

  

  val createCustomProfileFieldOperation = (apiOperation[JsonSuccessBase]("createCustomProfileField")
    summary "Create a custom profile field"
    parameters(queryParam[Int]("fieldType").description(""), queryParam[String]("name").description("").optional, queryParam[String]("hint").description("").optional, queryParam[Any]("fieldData").description("").optional)
  )

  post("/realm/profile_fields", operation(createCustomProfileFieldOperation)) {
            val fieldType = params.getAs[Int]("fieldType")

    //println("fieldType: " + fieldType)
            val name = params.getAs[String]("name")

    //println("name: " + name)
            val hint = params.getAs[String]("hint")

    //println("hint: " + hint)
            val fieldData = params.getAs[Any]("fieldData")

    //println("fieldData: " + fieldData)
  }

  

  val getCustomEmojiOperation = (apiOperation[JsonSuccessBase]("getCustomEmoji")
    summary "Get all custom emoji"
    parameters()
  )

  get("/realm/emoji", operation(getCustomEmojiOperation)) {
  }

  

  val getCustomProfileFieldsOperation = (apiOperation[JsonSuccessBase]("getCustomProfileFields")
    summary "Get all custom profile fields"
    parameters()
  )

  get("/realm/profile_fields", operation(getCustomProfileFieldsOperation)) {
  }

  

  val getLinkifiersOperation = (apiOperation[JsonSuccessBase]("getLinkifiers")
    summary "Get linkifiers"
    parameters()
  )

  get("/realm/linkifiers", operation(getLinkifiersOperation)) {
  }

  

  val getServerSettingsOperation = (apiOperation[JsonSuccessBase]("getServerSettings")
    summary "Get server settings"
    parameters()
  )

  get("/server_settings", operation(getServerSettingsOperation)) {
  }

  

  val removeCodePlaygroundOperation = (apiOperation[JsonSuccess]("removeCodePlayground")
    summary "Remove a code playground"
    parameters(pathParam[Int]("playgroundId").description(""))
  )

  delete("/realm/playgrounds/:playground_id", operation(removeCodePlaygroundOperation)) {
    val playgroundId = params.getOrElse("playgroundId", halt(400))
    //println("playgroundId: " + playgroundId)
  }

  

  val removeLinkifierOperation = (apiOperation[JsonSuccess]("removeLinkifier")
    summary "Remove a linkifier"
    parameters(pathParam[Int]("filterId").description(""))
  )

  delete("/realm/filters/:filter_id", operation(removeLinkifierOperation)) {
    val filterId = params.getOrElse("filterId", halt(400))
    //println("filterId: " + filterId)
  }

  

  val reorderCustomProfileFieldsOperation = (apiOperation[JsonSuccess]("reorderCustomProfileFields")
    summary "Reorder custom profile fields"
    parameters(queryParam[List[Int]]("order").description("").defaultValue(List.empty[Int] ))
  )

  patch("/realm/profile_fields", operation(reorderCustomProfileFieldsOperation)) {
        val orderString = params.getAs[String]("order")
    val order = if("multi" == "default" || "multi" == "csv") {
      orderString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("order: " + order)
  }

  

  val updateLinkifierOperation = (apiOperation[JsonSuccess]("updateLinkifier")
    summary "Update a linkifier"
    parameters(pathParam[Int]("filterId").description(""), queryParam[String]("pattern").description(""), queryParam[String]("urlFormatString").description(""))
  )

  patch("/realm/filters/:filter_id", operation(updateLinkifierOperation)) {
    val filterId = params.getOrElse("filterId", halt(400))
    //println("filterId: " + filterId)
            val pattern = params.getAs[String]("pattern")

    //println("pattern: " + pattern)
            val urlFormatString = params.getAs[String]("urlFormatString")

    //println("urlFormatString: " + urlFormatString)
  }

  

  val uploadCustomEmojiOperation = (apiOperation[JsonSuccess]("uploadCustomEmoji")
    summary "Upload custom emoji"
    parameters(pathParam[String]("emojiName").description(""), formParam[File]("filename").description("").optional)
  )

  post("/realm/emoji/:emoji_name", operation(uploadCustomEmojiOperation)) {
    val emojiName = params.getOrElse("emojiName", halt(400))
    //println("emojiName: " + emojiName)
    val filename = fileParams("filename")
    //println("filename: " + filename)
  }

}
