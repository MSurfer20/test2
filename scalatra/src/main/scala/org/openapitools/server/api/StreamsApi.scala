/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 */


package org.openapitools.server.api

import org.openapitools.server.model.CodedError
import org.openapitools.server.model.JsonError
import org.openapitools.server.model.JsonSuccess
import org.openapitools.server.model.JsonSuccessBase
import org.openapitools.server.model.NonExistingStreamError
import org.openapitools.server.model.OneOfobjectobject
import org.openapitools.server.model.OneOfstringinteger

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class StreamsApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "StreamsApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val archiveStreamOperation = (apiOperation[JsonSuccess]("archiveStream")
    summary "Archive a stream"
    parameters(pathParam[Int]("streamId").description(""))
  )

  delete("/streams/:stream_id", operation(archiveStreamOperation)) {
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
  }

  

  val createBigBlueButtonVideoCallOperation = (apiOperation[JsonSuccessBase]("createBigBlueButtonVideoCall")
    summary "Create BigBlueButton video call"
    parameters()
  )

  get("/calls/bigbluebutton/create", operation(createBigBlueButtonVideoCallOperation)) {
  }

  

  val deleteTopicOperation = (apiOperation[JsonSuccess]("deleteTopic")
    summary "Delete a topic"
    parameters(pathParam[Int]("streamId").description(""), queryParam[String]("topicName").description(""))
  )

  post("/streams/:stream_id/delete_topic", operation(deleteTopicOperation)) {
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
            val topicName = params.getAs[String]("topicName")

    //println("topicName: " + topicName)
  }

  

  val getStreamIdOperation = (apiOperation[JsonSuccessBase]("getStreamId")
    summary "Get stream ID"
    parameters(queryParam[String]("stream").description(""))
  )

  get("/get_stream_id", operation(getStreamIdOperation)) {
            val stream = params.getAs[String]("stream")

    //println("stream: " + stream)
  }

  

  val getStreamTopicsOperation = (apiOperation[JsonSuccessBase]("getStreamTopics")
    summary "Get topics in a stream"
    parameters(pathParam[Int]("streamId").description(""))
  )

  get("/users/me/:stream_id/topics", operation(getStreamTopicsOperation)) {
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
  }

  

  val getStreamsOperation = (apiOperation[JsonSuccessBase]("getStreams")
    summary "Get all streams"
    parameters(queryParam[Boolean]("includePublic").description("").optional.defaultValue(true), queryParam[Boolean]("includeWebPublic").description("").optional.defaultValue(false), queryParam[Boolean]("includeSubscribed").description("").optional.defaultValue(true), queryParam[Boolean]("includeAllActive").description("").optional.defaultValue(false), queryParam[Boolean]("includeDefault").description("").optional.defaultValue(false), queryParam[Boolean]("includeOwnerSubscribed").description("").optional.defaultValue(false))
  )

  get("/streams", operation(getStreamsOperation)) {
            val includePublic = params.getAs[Boolean]("includePublic")

    //println("includePublic: " + includePublic)
            val includeWebPublic = params.getAs[Boolean]("includeWebPublic")

    //println("includeWebPublic: " + includeWebPublic)
            val includeSubscribed = params.getAs[Boolean]("includeSubscribed")

    //println("includeSubscribed: " + includeSubscribed)
            val includeAllActive = params.getAs[Boolean]("includeAllActive")

    //println("includeAllActive: " + includeAllActive)
            val includeDefault = params.getAs[Boolean]("includeDefault")

    //println("includeDefault: " + includeDefault)
            val includeOwnerSubscribed = params.getAs[Boolean]("includeOwnerSubscribed")

    //println("includeOwnerSubscribed: " + includeOwnerSubscribed)
  }

  

  val getSubscribersOperation = (apiOperation[JsonSuccessBase]("getSubscribers")
    summary "Get the subscribers of a stream"
    parameters(pathParam[Int]("streamId").description(""))
  )

  get("/streams/:stream_id/members", operation(getSubscribersOperation)) {
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
  }

  

  val getSubscriptionStatusOperation = (apiOperation[JsonSuccessBase]("getSubscriptionStatus")
    summary "Get subscription status"
    parameters(pathParam[Int]("userId").description(""), pathParam[Int]("streamId").description(""))
  )

  get("/users/:user_id/subscriptions/:stream_id", operation(getSubscriptionStatusOperation)) {
    val userId = params.getOrElse("userId", halt(400))
    //println("userId: " + userId)
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
  }

  

  val getSubscriptionsOperation = (apiOperation[JsonSuccessBase]("getSubscriptions")
    summary "Get subscribed streams"
    parameters(queryParam[Boolean]("includeSubscribers").description("").optional.defaultValue(false))
  )

  get("/users/me/subscriptions", operation(getSubscriptionsOperation)) {
            val includeSubscribers = params.getAs[Boolean]("includeSubscribers")

    //println("includeSubscribers: " + includeSubscribers)
  }

  

  val muteTopicOperation = (apiOperation[JsonSuccess]("muteTopic")
    summary "Topic muting"
    parameters(queryParam[String]("topic").description(""), queryParam[String]("op").description(""), queryParam[String]("stream").description("").optional, queryParam[Int]("streamId").description("").optional)
  )

  patch("/users/me/subscriptions/muted_topics", operation(muteTopicOperation)) {
            val topic = params.getAs[String]("topic")

    //println("topic: " + topic)
            val op = params.getAs[String]("op")

    //println("op: " + op)
            val stream = params.getAs[String]("stream")

    //println("stream: " + stream)
            val streamId = params.getAs[Int]("streamId")

    //println("streamId: " + streamId)
  }

  

  val subscribeOperation = (apiOperation[OneOfobjectobject]("subscribe")
    summary "Subscribe to a stream"
    parameters(queryParam[List[Any]]("subscriptions").description("").defaultValue(List.empty[Any] ), queryParam[List[OneOfstringinteger]]("principals").description("").optional.defaultValue(List.empty[OneOfstringinteger] ), queryParam[Boolean]("authorizationErrorsFatal").description("").optional.defaultValue(true), queryParam[Boolean]("announce").description("").optional.defaultValue(false), queryParam[Boolean]("inviteOnly").description("").optional.defaultValue(false), queryParam[Boolean]("historyPublicToSubscribers").description("").optional, queryParam[Int]("streamPostPolicy").description("").optional.defaultValue(1), queryParam[OneOfstringinteger]("messageRetentionDays").description("").optional)
  )

  post("/users/me/subscriptions", operation(subscribeOperation)) {
        val subscriptionsString = params.getAs[String]("subscriptions")
    val subscriptions = if("multi" == "default" || "multi" == "csv") {
      subscriptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("subscriptions: " + subscriptions)
        val principalsString = params.getAs[String]("principals")
    val principals = if("multi" == "default" || "multi" == "csv") {
      principalsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("principals: " + principals)
            val authorizationErrorsFatal = params.getAs[Boolean]("authorizationErrorsFatal")

    //println("authorizationErrorsFatal: " + authorizationErrorsFatal)
            val announce = params.getAs[Boolean]("announce")

    //println("announce: " + announce)
            val inviteOnly = params.getAs[Boolean]("inviteOnly")

    //println("inviteOnly: " + inviteOnly)
            val historyPublicToSubscribers = params.getAs[Boolean]("historyPublicToSubscribers")

    //println("historyPublicToSubscribers: " + historyPublicToSubscribers)
            val streamPostPolicy = params.getAs[Int]("streamPostPolicy")

    //println("streamPostPolicy: " + streamPostPolicy)
            val messageRetentionDays = params.getAs[OneOfstringinteger]("messageRetentionDays")

    //println("messageRetentionDays: " + messageRetentionDays)
  }

  

  val unsubscribeOperation = (apiOperation[JsonSuccessBase]("unsubscribe")
    summary "Unsubscribe from a stream"
    parameters(queryParam[List[String]]("subscriptions").description("").defaultValue(List.empty[String] ), queryParam[List[OneOfstringinteger]]("principals").description("").optional.defaultValue(List.empty[OneOfstringinteger] ))
  )

  delete("/users/me/subscriptions", operation(unsubscribeOperation)) {
        val subscriptionsString = params.getAs[String]("subscriptions")
    val subscriptions = if("multi" == "default" || "multi" == "csv") {
      subscriptionsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("subscriptions: " + subscriptions)
        val principalsString = params.getAs[String]("principals")
    val principals = if("multi" == "default" || "multi" == "csv") {
      principalsString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("principals: " + principals)
  }

  

  val updateStreamOperation = (apiOperation[JsonSuccess]("updateStream")
    summary "Update a stream"
    parameters(pathParam[Int]("streamId").description(""), queryParam[String]("description").description("").optional, queryParam[String]("newName").description("").optional, queryParam[Boolean]("isPrivate").description("").optional, queryParam[Boolean]("isAnnouncementOnly").description("").optional, queryParam[Int]("streamPostPolicy").description("").optional.defaultValue(1), queryParam[Boolean]("historyPublicToSubscribers").description("").optional, queryParam[OneOfstringinteger]("messageRetentionDays").description("").optional)
  )

  patch("/streams/:stream_id", operation(updateStreamOperation)) {
    val streamId = params.getOrElse("streamId", halt(400))
    //println("streamId: " + streamId)
            val description = params.getAs[String]("description")

    //println("description: " + description)
            val newName = params.getAs[String]("newName")

    //println("newName: " + newName)
            val isPrivate = params.getAs[Boolean]("isPrivate")

    //println("isPrivate: " + isPrivate)
            val isAnnouncementOnly = params.getAs[Boolean]("isAnnouncementOnly")

    //println("isAnnouncementOnly: " + isAnnouncementOnly)
            val streamPostPolicy = params.getAs[Int]("streamPostPolicy")

    //println("streamPostPolicy: " + streamPostPolicy)
            val historyPublicToSubscribers = params.getAs[Boolean]("historyPublicToSubscribers")

    //println("historyPublicToSubscribers: " + historyPublicToSubscribers)
            val messageRetentionDays = params.getAs[OneOfstringinteger]("messageRetentionDays")

    //println("messageRetentionDays: " + messageRetentionDays)
  }

  

  val updateSubscriptionSettingsOperation = (apiOperation[JsonSuccessBase]("updateSubscriptionSettings")
    summary "Update subscription settings"
    parameters(queryParam[List[Any]]("subscriptionData").description("").defaultValue(List.empty[Any] ))
  )

  post("/users/me/subscriptions/properties", operation(updateSubscriptionSettingsOperation)) {
        val subscriptionDataString = params.getAs[String]("subscriptionData")
    val subscriptionData = if("multi" == "default" || "multi" == "csv") {
      subscriptionDataString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("subscriptionData: " + subscriptionData)
  }

  

  val updateSubscriptionsOperation = (apiOperation[JsonSuccessBase]("updateSubscriptions")
    summary "Update subscriptions"
    parameters(queryParam[List[String]]("delete").description("").optional.defaultValue(List.empty[String] ), queryParam[List[Any]]("add").description("").optional.defaultValue(List.empty[Any] ))
  )

  patch("/users/me/subscriptions", operation(updateSubscriptionsOperation)) {
        val deleteString = params.getAs[String]("delete")
    val delete = if("multi" == "default" || "multi" == "csv") {
      deleteString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("delete: " + delete)
        val addString = params.getAs[String]("add")
    val add = if("multi" == "default" || "multi" == "csv") {
      addString match {
        case Some(str) => str.split(",").toSeq
        case None => Seq()
      }
    } else
      Seq()

    //println("add: " + add)
  }

}
