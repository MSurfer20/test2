<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class RealTimeEventsController extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation deleteQueue
     *
     * Delete an event queue.
     *
     *
     * @return Http response
     */
    public function deleteQueue()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['queueId'])) {
            throw new \InvalidArgumentException('Missing the required parameter $queueId when calling deleteQueue');
        }
        $queueId = $input['queueId'];


        return response('How about implementing deleteQueue as a delete method ?');
    }
    /**
     * Operation getEvents
     *
     * Get events from an event queue.
     *
     *
     * @return Http response
     */
    public function getEvents()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['queueId'])) {
            throw new \InvalidArgumentException('Missing the required parameter $queueId when calling getEvents');
        }
        $queueId = $input['queueId'];

        $lastEventId = $input['lastEventId'];

        $dontBlock = $input['dontBlock'];


        return response('How about implementing getEvents as a get method ?');
    }
    /**
     * Operation realTimePost
     *
     * .
     *
     *
     * @return Http response
     */
    public function realTimePost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $eventTypes = $input['eventTypes'];

        $narrow = $input['narrow'];

        $allPublicStreams = $input['allPublicStreams'];


        return response('How about implementing realTimePost as a post method ?');
    }
    /**
     * Operation registerQueue
     *
     * Register an event queue.
     *
     *
     * @return Http response
     */
    public function registerQueue()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $applyMarkdown = $input['applyMarkdown'];

        $clientGravatar = $input['clientGravatar'];

        $slimPresence = $input['slimPresence'];

        $eventTypes = $input['eventTypes'];

        $allPublicStreams = $input['allPublicStreams'];

        $includeSubscribers = $input['includeSubscribers'];

        $clientCapabilities = $input['clientCapabilities'];

        $fetchEventTypes = $input['fetchEventTypes'];

        $narrow = $input['narrow'];


        return response('How about implementing registerQueue as a post method ?');
    }
    /**
     * Operation restErrorHandling
     *
     * Error handling.
     *
     *
     * @return Http response
     */
    public function restErrorHandling()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing restErrorHandling as a post method ?');
    }
}
