<?php

/**
 * Zulip REST API
 * Powerful open source group chat
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/**
 * post devFetchApiKey
 * Summary: Fetch an API key (development only)
 * Notes: For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/dev_fetch_api_key', 'AuthenticationController@devFetchApiKey');
/**
 * post fetchApiKey
 * Summary: Fetch an API key (production)
 * Notes: This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key).
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/fetch_api_key', 'AuthenticationController@fetchApiKey');
/**
 * post createDrafts
 * Summary: Create drafts
 * Notes: Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/drafts', 'DraftsController@createDrafts');
/**
 * get getDrafts
 * Summary: Get drafts
 * Notes: Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/drafts', 'DraftsController@getDrafts');
/**
 * delete deleteDraft
 * Summary: Delete a draft
 * Notes: Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/drafts/{draft_id}', 'DraftsController@deleteDraft');
/**
 * patch editDraft
 * Summary: Edit a draft
 * Notes: Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/drafts/{draft_id}', 'DraftsController@editDraft');
/**
 * post markAllAsRead
 * Summary: Mark all messages as read
 * Notes: Marks all of the current user&#39;s unread messages as read.  &#x60;POST {{ api_url }}/v1/mark_all_as_read&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/mark_all_as_read', 'MessagesController@markAllAsRead');
/**
 * post markStreamAsRead
 * Summary: Mark messages in a stream as read
 * Notes: Mark all the unread messages in a stream as read.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/mark_stream_as_read', 'MessagesController@markStreamAsRead');
/**
 * post markTopicAsRead
 * Summary: Mark messages in a topic as read
 * Notes: Mark all the unread messages in a topic as read.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/mark_topic_as_read', 'MessagesController@markTopicAsRead');
/**
 * get getMessages
 * Summary: Get messages
 * Notes: Fetch message history from a Zulip server.  &#x60;GET {{ api_url }}/v1/messages&#x60;  This &#x60;GET /api/v1/messages&#x60; endpoint is the primary way to fetch message history from a Zulip server.  It is useful both for Zulip clients (e.g. the web, desktop, mobile, and terminal clients) as well as bots, API clients, backup scripts, etc.  By specifying a [narrow filter](/api/construct-narrow), you can use this endpoint to fetch the messages matching any search query that is supported by Zulip&#39;s powerful full-text search backend.  When a narrow is not specified, it can be used to fetch a user&#39;s message history. (We recommend paginating to 1000 messages at a time.)  In either case, you specify an &#x60;anchor&#x60; message (or ask the server to calculate the first unread message for you and use that as the anchor), as well as a number of messages before and after the anchor message.  The server returns those messages, sorted by message ID, as well as some metadata that makes it easy for a client to determine whether there are more messages matching the query that were not returned due to the &#x60;num_before&#x60; and &#x60;num_after&#x60; limits.  We recommend using &#x60;num_before &lt;&#x3D; 1000&#x60; and &#x60;num_after &lt;&#x3D; 1000&#x60; to avoid generating very large HTTP responses. A maximum of 5000 messages can be obtained per request; attempting to exceed this will result in an error.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/messages', 'MessagesController@getMessages');
/**
 * post sendMessage
 * Summary: Send a message
 * Notes: Send a stream or a private message.  &#x60;POST {{ api_url }}/v1/messages&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/messages', 'MessagesController@sendMessage');
/**
 * post updateMessageFlags
 * Summary: Update personal message flags
 * Notes: Add or remove personal message flags like &#x60;read&#x60; and &#x60;starred&#x60; on a collection of message IDs.  &#x60;POST {{ api_url }}/v1/messages/flags&#x60;  For updating the &#x60;read&#x60; flag on common collections of messages, see also the [special endpoints for marking message as read in bulk](/api/mark-all-as-read).
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/messages/flags', 'MessagesController@updateMessageFlags');
/**
 * get checkMessagesMatchNarrow
 * Summary: Check if messages match a narrow
 * Notes: Check whether a set of messages match a [narrow](/api/construct-narrow).  &#x60;GET {{ api_url }}/v1/messages/matches_narrow&#x60;  For many common narrows (E.g. a topic), clients can write an efficient client-side check to determine whether a newly arrived message belongs in the view.  This endpoint is designed to allow clients to handle more complex narrows for which the client does not (or in the case of full-text search, cannot) implement this check.  The format of the &#x60;match_subject&#x60; and &#x60;match_content&#x60; objects is designed to match those of &#x60;GET /messages&#x60;, so that a client can splice these fields into a &#x60;message&#x60; object received from &#x60;GET /events&#x60; and end up with an extended message object identical to how a &#x60;GET /messages&#x60; for the current narrow would have returned the message.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/messages/matches_narrow', 'MessagesController@checkMessagesMatchNarrow');
/**
 * post renderMessage
 * Summary: Render message
 * Notes: Render a message to HTML.  &#x60;POST {{ api_url }}/v1/messages/render&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/messages/render', 'MessagesController@renderMessage');
/**
 * delete deleteMessage
 * Summary: Delete a message
 * Notes: Permanently delete a message.  &#x60;DELETE {{ api_url }}/v1/messages/{msg_id}&#x60;  This API corresponds to the [delete a message completely][delete-completely] feature documented in the Zulip Help Center.  [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/messages/{message_id}', 'MessagesController@deleteMessage');
/**
 * get getRawMessage
 * Summary: Get a message&#39;s raw Markdown
 * Notes: Get the raw content of a message.  &#x60;GET {{ api_url }}/v1/messages/{msg_id}&#x60;  This is a rarely-used endpoint relevant for clients that primarily work with HTML-rendered messages but might need to occasionally fetch the message&#39;s raw Markdown (e.g. for pre-filling a message-editing UI).
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/messages/{message_id}', 'MessagesController@getRawMessage');
/**
 * patch updateMessage
 * Summary: Edit a message
 * Notes: Edit/update the content or topic of a message.  &#x60;PATCH {{ api_url }}/v1/messages/{msg_id}&#x60;  &#x60;{msg_id}&#x60; in the above URL should be replaced with the ID of the message you wish you update.  You can [resolve topics](/help/resolve-a-topic) by editing the topic to &#x60;âœ” {original_topic}&#x60;.  **Note**: See [configuring message editing][config-message-editing] for detailed documentation on when users are allowed to edit topics.  [config-message-editing]: /help/configure-message-editing-and-deletion
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/messages/{message_id}', 'MessagesController@updateMessage');
/**
 * get getMessageHistory
 * Summary: Get a message&#39;s edit history
 * Notes: Fetch the message edit history of a previously edited message.  &#x60;GET {{ api_url }}/v1/messages/{message_id}/history&#x60;  Note that edit history may be disabled in some organizations; see the [Zulip Help Center documentation on editing messages][edit-settings].  [edit-settings]: /help/view-a-messages-edit-history
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/messages/{message_id}/history', 'MessagesController@getMessageHistory');
/**
 * post addReaction
 * Summary: Add an emoji reaction
 * Notes: Add an [emoji reaction](/help/emoji-reactions) to a message.  &#x60;POST {{ api_url }}/v1/messages/{message_id}/reactions&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/messages/{message_id}/reactions', 'MessagesController@addReaction');
/**
 * delete removeReaction
 * Summary: Remove an emoji reaction
 * Notes: Remove an [emoji reaction](/help/emoji-reactions) from a message.  &#x60;DELETE {{ api_url }}/v1/messages/{message_id}/reactions&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/messages/{message_id}/reactions', 'MessagesController@removeReaction');
/**
 * post uploadFile
 * Summary: Upload a file
 * Notes: Upload a single file and get the corresponding URI.  &#x60;POST {{ api_url }}/v1/user_uploads&#x60;  Initially, only you will be able to access the link.  To share the uploaded file, you&#39;ll need to [send a message][send-message] containing the resulting link.  Users who can already access the link can reshare it with other users by sending additional Zulip messages containing the link.  [uploaded-files]: /help/manage-your-uploaded-files [send-message]: /api/send-message
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/user_uploads', 'MessagesController@uploadFile');
/**
 * get getFileTemporaryUrl
 * Summary: Get public temporary URL
 * Notes: Get a temporary URL for access to the file that doesn&#39;t require authentication.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/user_uploads/{realm_id_str}/{filename}', 'MessagesController@getFileTemporaryUrl');
/**
 * delete deleteQueue
 * Summary: Delete an event queue
 * Notes: Delete a previously registered queue.  &#x60;DELETE {{ api_url }}/v1/events&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/events', 'RealTimeEventsController@deleteQueue');
/**
 * get getEvents
 * Summary: Get events from an event queue
 * Notes: &#x60;GET {{ api_url }}/v1/events&#x60;  This endpoint allows you to receive new events from [a registered event queue](/api/register-queue).  Long-lived clients should use the &#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by &#x60;POST /register&#x60; as the client-side HTTP request timeout for calls to this endpoint.  It is guaranteed to be higher than heartbeat frequency and should be respected by clients to avoid breaking when heartbeat frequency increases.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/events', 'RealTimeEventsController@getEvents');
/**
 * post realTimePost
 * Summary: 
 * Notes: (Ignored)

 */
Route::post('/api/v1/real-time', 'RealTimeEventsController@realTimePost');
/**
 * post registerQueue
 * Summary: Register an event queue
 * Notes: &#x60;POST {{ api_url }}/v1/register&#x60;  This powerful endpoint can be used to register a Zulip \&quot;event queue\&quot; (subscribed to certain types of \&quot;events\&quot;, or updates to the messages and other Zulip data the current user has access to), as well as to fetch the current state of that data.  (&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is intended primarily for complex applications for which the more convenient &#x60;call_on_each_event&#x60; API is insufficient).  This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be used in subsequent calls to the [\&quot;events\&quot; endpoint](/api/get-events) to request events from the Zulip server using long-polling.  The server will queue events for up to 10 minutes of inactivity. After 10 minutes, your event queue will be garbage-collected.  The server will send &#x60;heartbeat&#x60; events every minute, which makes it easy to implement a robust client that does not miss events unless the client loses network connectivity with the Zulip server for 10 minutes or longer.  Once the server garbage-collects your event queue, the server will [return an error](/api/get-events#bad_event_queue_id-errors) with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from the event queue.  Your software will need to handle that error condition by re-initializing itself (e.g. this is what triggers your browser reloading the Zulip web app when your laptop comes back online after being offline for more than 10 minutes).  When prototyping with this API, we recommend first calling &#x60;register&#x60; with no &#x60;event_types&#x60; parameter to see all the available data from all supported event types.  Before using your client in production, you should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters so that your client only requests the data it needs.  A few minutes doing this often saves 90% of the total bandwidth and other resources consumed by a client using this API.  See the [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html) if you need deeper details about how the Zulip event queue system works, avoids clients needing to worry about large classes of potentially messy races, etc.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/register', 'RealTimeEventsController@registerQueue');
/**
 * post restErrorHandling
 * Summary: Error handling
 * Notes: Common error to many endpoints
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/rest-error-handling', 'RealTimeEventsController@restErrorHandling');
/**
 * get getCustomEmoji
 * Summary: Get all custom emoji
 * Notes: Get all the custom emoji in the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/realm/emoji', 'ServerAndOrganizationsController@getCustomEmoji');
/**
 * post uploadCustomEmoji
 * Summary: Upload custom emoji
 * Notes: This endpoint is used to upload a custom emoji for use in the user&#39;s organization.  Access to this endpoint depends on the [organization&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/realm/emoji/{emoji_name}', 'ServerAndOrganizationsController@uploadCustomEmoji');
/**
 * post addLinkifier
 * Summary: Add a linkifier
 * Notes: Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/realm/filters', 'ServerAndOrganizationsController@addLinkifier');
/**
 * delete removeLinkifier
 * Summary: Remove a linkifier
 * Notes: Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/realm/filters/{filter_id}', 'ServerAndOrganizationsController@removeLinkifier');
/**
 * patch updateLinkifier
 * Summary: Update a linkifier
 * Notes: Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57).
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/realm/filters/{filter_id}', 'ServerAndOrganizationsController@updateLinkifier');
/**
 * get getLinkifiers
 * Summary: Get linkifiers
 * Notes: List all of an organization&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/realm/linkifiers', 'ServerAndOrganizationsController@getLinkifiers');
/**
 * post addCodePlayground
 * Summary: Add a code playground
 * Notes: Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57).
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/realm/playgrounds', 'ServerAndOrganizationsController@addCodePlayground');
/**
 * delete removeCodePlayground
 * Summary: Remove a code playground
 * Notes: Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49).
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/realm/playgrounds/{playground_id}', 'ServerAndOrganizationsController@removeCodePlayground');
/**
 * post createCustomProfileField
 * Summary: Create a custom profile field
 * Notes: [Create a custom profile field](/help/add-custom-profile-fields) in the user&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/realm/profile_fields', 'ServerAndOrganizationsController@createCustomProfileField');
/**
 * get getCustomProfileFields
 * Summary: Get all custom profile fields
 * Notes: Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/realm/profile_fields', 'ServerAndOrganizationsController@getCustomProfileFields');
/**
 * patch reorderCustomProfileFields
 * Summary: Reorder custom profile fields
 * Notes: Reorder the custom profile fields in the user&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields).
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/realm/profile_fields', 'ServerAndOrganizationsController@reorderCustomProfileFields');
/**
 * get getServerSettings
 * Summary: Get server settings
 * Notes: Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available).
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/server_settings', 'ServerAndOrganizationsController@getServerSettings');
/**
 * get createBigBlueButtonVideoCall
 * Summary: Create BigBlueButton video call
 * Notes: Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/calls/bigbluebutton/create', 'StreamsController@createBigBlueButtonVideoCall');
/**
 * get getStreamId
 * Summary: Get stream ID
 * Notes: Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/get_stream_id', 'StreamsController@getStreamId');
/**
 * get getStreams
 * Summary: Get all streams
 * Notes: Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/streams', 'StreamsController@getStreams');
/**
 * delete archiveStream
 * Summary: Archive a stream
 * Notes: [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/streams/{stream_id}', 'StreamsController@archiveStream');
/**
 * patch updateStream
 * Summary: Update a stream
 * Notes: Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/streams/{stream_id}', 'StreamsController@updateStream');
/**
 * post deleteTopic
 * Summary: Delete a topic
 * Notes: Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/streams/{stream_id}/delete_topic', 'StreamsController@deleteTopic');
/**
 * get getSubscribers
 * Summary: Get the subscribers of a stream
 * Notes: Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/streams/{stream_id}/members', 'StreamsController@getSubscribers');
/**
 * get getSubscriptions
 * Summary: Get subscribed streams
 * Notes: Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/me/subscriptions', 'StreamsController@getSubscriptions');
/**
 * post subscribe
 * Summary: Subscribe to a stream
 * Notes: Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users/me/subscriptions', 'StreamsController@subscribe');
/**
 * delete unsubscribe
 * Summary: Unsubscribe from a stream
 * Notes: Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/users/me/subscriptions', 'StreamsController@unsubscribe');
/**
 * patch updateSubscriptions
 * Summary: Update subscriptions
 * Notes: Update which streams you are are subscribed to.
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/users/me/subscriptions', 'StreamsController@updateSubscriptions');
/**
 * patch muteTopic
 * Summary: Topic muting
 * Notes: This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60;
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/users/me/subscriptions/muted_topics', 'StreamsController@muteTopic');
/**
 * post updateSubscriptionSettings
 * Summary: Update subscription settings
 * Notes: This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users/me/subscriptions/properties', 'StreamsController@updateSubscriptionSettings');
/**
 * get getStreamTopics
 * Summary: Get topics in a stream
 * Notes: Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/me/{stream_id}/topics', 'StreamsController@getStreamTopics');
/**
 * get getSubscriptionStatus
 * Summary: Get subscription status
 * Notes: Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11).
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/{user_id}/subscriptions/{stream_id}', 'StreamsController@getSubscriptionStatus');
/**
 * get getAttachments
 * Summary: Get attachments
 * Notes: Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/attachments', 'UsersController@getAttachments');
/**
 * patch updateSettings
 * Summary: Update settings
 * Notes: This endpoint is used to edit the current user&#39;s settings.  &#x60;PATCH {{ api_url }}/v1/settings&#x60;  **Changes**: Prior to Zulip 5.0 (feature level 80), this endpoint only supported the &#x60;full_name&#x60;, &#x60;email&#x60;, &#x60;old_password&#x60;, and &#x60;new_password&#x60; parameters. Notification settings were managed by &#x60;PATCH /settings/notifications&#x60;, and all other settings by &#x60;PATCH /settings/display&#x60;. The feature level 80 migration to merge these endpoints did not change how request parameters are encoded. Note, however, that it did change the handling of any invalid parameters present in a request to change notification or display settings, since the merged endpoint uses the new response format that was introduced for &#x60;/settings&#x60; in Zulip 5.0 (feature level 78).  The &#x60;/settings/display&#x60; and &#x60;/settings/notifications&#x60; endpoints are now deprecated aliases for this endpoint for backwards-compatibility, and will be removed once clients have migrated to use this endpoint.
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/settings', 'UsersController@updateSettings');
/**
 * post setTypingStatus
 * Summary: Set \&quot;typing\&quot; status
 * Notes: Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/typing', 'UsersController@setTypingStatus');
/**
 * get getUserGroups
 * Summary: Get user groups
 * Notes: {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/user_groups', 'UsersController@getUserGroups');
/**
 * post createUserGroup
 * Summary: Create a user group
 * Notes: Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/user_groups/create', 'UsersController@createUserGroup');
/**
 * delete removeUserGroup
 * Summary: Delete a user group
 * Notes: Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/user_groups/{user_group_id}', 'UsersController@removeUserGroup');
/**
 * patch updateUserGroup
 * Summary: Update a user group
 * Notes: Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/user_groups/{user_group_id}', 'UsersController@updateUserGroup');
/**
 * post updateUserGroupMembers
 * Summary: Update user group members
 * Notes: Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/user_groups/{user_group_id}/members', 'UsersController@updateUserGroupMembers');
/**
 * post createUser
 * Summary: Create a user
 * Notes: {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users', 'UsersController@createUser');
/**
 * get getUsers
 * Summary: Get all users
 * Notes: Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user).
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users', 'UsersController@getUsers');
/**
 * delete deactivateOwnUser
 * Summary: Deactivate own user
 * Notes: Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI.
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/users/me', 'UsersController@deactivateOwnUser');
/**
 * get getOwnUser
 * Summary: Get own user
 * Notes: Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60;
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/me', 'UsersController@getOwnUser');
/**
 * post muteUser
 * Summary: Mute a user
 * Notes: This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48).
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users/me/muted_users/{muted_user_id}', 'UsersController@muteUser');
/**
 * delete unmuteUser
 * Summary: Unmute a user
 * Notes: This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48).
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/users/me/muted_users/{muted_user_id}', 'UsersController@unmuteUser');
/**
 * post updateStatus
 * Summary: Update your status
 * Notes: Change your [status](/help/status-and-availability).  &#x60;POST {{ api_url }}/v1/users/me/status&#x60;  A request to this endpoint will only change the parameters passed. For example, passing just &#x60;status_text&#x60; requests a change in the status text, but will leave the status emoji unchanged.  Clients that wish to set the user&#39;s status to a specific value should pass all supported parameters.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users/me/status', 'UsersController@updateStatus');
/**
 * get getUserByEmail
 * Summary: Get a user by email
 * Notes: Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).*
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/{email}', 'UsersController@getUserByEmail');
/**
 * get getUserPresence
 * Summary: Get user presence
 * Notes: Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip.
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/{user_id_or_email}/presence', 'UsersController@getUserPresence');
/**
 * delete deactivateUser
 * Summary: Deactivate a user
 * Notes: [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60;
 * Output-Formats: [application/json]
 */
Route::delete('/api/v1/users/{user_id}', 'UsersController@deactivateUser');
/**
 * get getUser
 * Summary: Get a user
 * Notes: Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).*
 * Output-Formats: [application/json]
 */
Route::get('/api/v1/users/{user_id}', 'UsersController@getUser');
/**
 * patch updateUser
 * Summary: Update a user
 * Notes: Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields).
 * Output-Formats: [application/json]
 */
Route::patch('/api/v1/users/{user_id}', 'UsersController@updateUser');
/**
 * post reactivateUser
 * Summary: Reactivate a user
 * Notes: [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60;
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/users/{user_id}/reactivate', 'UsersController@reactivateUser');
/**
 * post zulipOutgoingWebhooks
 * Summary: Outgoing webhooks
 * Notes: Outgoing webhooks allows to build or set up Zulip integrations which are notified when certain types of messages are sent in Zulip.
 * Output-Formats: [application/json]
 */
Route::post('/api/v1/zulip-outgoing-webhook', 'WebhooksController@zulipOutgoingWebhooks');

Route::middleware('auth:api')->get('/user', function (Request $request) {
    return $request->user();
});
