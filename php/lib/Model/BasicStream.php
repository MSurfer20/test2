<?php
/**
 * BasicStream
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BasicStream Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BasicStream implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasicStream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'stream_id' => 'mixed',
        'name' => 'mixed',
        'description' => 'mixed',
        'date_created' => 'mixed',
        'invite_only' => 'mixed',
        'rendered_description' => 'mixed',
        'is_web_public' => 'mixed',
        'stream_post_policy' => 'mixed',
        'message_retention_days' => 'mixed',
        'history_public_to_subscribers' => 'mixed',
        'first_message_id' => 'mixed',
        'is_announcement_only' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'stream_id' => null,
        'name' => null,
        'description' => null,
        'date_created' => null,
        'invite_only' => null,
        'rendered_description' => null,
        'is_web_public' => null,
        'stream_post_policy' => null,
        'message_retention_days' => null,
        'history_public_to_subscribers' => null,
        'first_message_id' => null,
        'is_announcement_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stream_id' => 'stream_id',
        'name' => 'name',
        'description' => 'description',
        'date_created' => 'date_created',
        'invite_only' => 'invite_only',
        'rendered_description' => 'rendered_description',
        'is_web_public' => 'is_web_public',
        'stream_post_policy' => 'stream_post_policy',
        'message_retention_days' => 'message_retention_days',
        'history_public_to_subscribers' => 'history_public_to_subscribers',
        'first_message_id' => 'first_message_id',
        'is_announcement_only' => 'is_announcement_only'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stream_id' => 'setStreamId',
        'name' => 'setName',
        'description' => 'setDescription',
        'date_created' => 'setDateCreated',
        'invite_only' => 'setInviteOnly',
        'rendered_description' => 'setRenderedDescription',
        'is_web_public' => 'setIsWebPublic',
        'stream_post_policy' => 'setStreamPostPolicy',
        'message_retention_days' => 'setMessageRetentionDays',
        'history_public_to_subscribers' => 'setHistoryPublicToSubscribers',
        'first_message_id' => 'setFirstMessageId',
        'is_announcement_only' => 'setIsAnnouncementOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stream_id' => 'getStreamId',
        'name' => 'getName',
        'description' => 'getDescription',
        'date_created' => 'getDateCreated',
        'invite_only' => 'getInviteOnly',
        'rendered_description' => 'getRenderedDescription',
        'is_web_public' => 'getIsWebPublic',
        'stream_post_policy' => 'getStreamPostPolicy',
        'message_retention_days' => 'getMessageRetentionDays',
        'history_public_to_subscribers' => 'getHistoryPublicToSubscribers',
        'first_message_id' => 'getFirstMessageId',
        'is_announcement_only' => 'getIsAnnouncementOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stream_id'] = $data['stream_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['date_created'] = $data['date_created'] ?? null;
        $this->container['invite_only'] = $data['invite_only'] ?? null;
        $this->container['rendered_description'] = $data['rendered_description'] ?? null;
        $this->container['is_web_public'] = $data['is_web_public'] ?? null;
        $this->container['stream_post_policy'] = $data['stream_post_policy'] ?? null;
        $this->container['message_retention_days'] = $data['message_retention_days'] ?? null;
        $this->container['history_public_to_subscribers'] = $data['history_public_to_subscribers'] ?? null;
        $this->container['first_message_id'] = $data['first_message_id'] ?? null;
        $this->container['is_announcement_only'] = $data['is_announcement_only'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stream_id
     *
     * @return mixed|null
     */
    public function getStreamId()
    {
        return $this->container['stream_id'];
    }

    /**
     * Sets stream_id
     *
     * @param mixed|null $stream_id stream_id
     *
     * @return self
     */
    public function setStreamId($stream_id)
    {
        $this->container['stream_id'] = $stream_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return mixed|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param mixed|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return mixed|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param mixed|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return mixed|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param mixed|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets invite_only
     *
     * @return mixed|null
     */
    public function getInviteOnly()
    {
        return $this->container['invite_only'];
    }

    /**
     * Sets invite_only
     *
     * @param mixed|null $invite_only invite_only
     *
     * @return self
     */
    public function setInviteOnly($invite_only)
    {
        $this->container['invite_only'] = $invite_only;

        return $this;
    }

    /**
     * Gets rendered_description
     *
     * @return mixed|null
     */
    public function getRenderedDescription()
    {
        return $this->container['rendered_description'];
    }

    /**
     * Sets rendered_description
     *
     * @param mixed|null $rendered_description rendered_description
     *
     * @return self
     */
    public function setRenderedDescription($rendered_description)
    {
        $this->container['rendered_description'] = $rendered_description;

        return $this;
    }

    /**
     * Gets is_web_public
     *
     * @return mixed|null
     */
    public function getIsWebPublic()
    {
        return $this->container['is_web_public'];
    }

    /**
     * Sets is_web_public
     *
     * @param mixed|null $is_web_public is_web_public
     *
     * @return self
     */
    public function setIsWebPublic($is_web_public)
    {
        $this->container['is_web_public'] = $is_web_public;

        return $this;
    }

    /**
     * Gets stream_post_policy
     *
     * @return mixed|null
     */
    public function getStreamPostPolicy()
    {
        return $this->container['stream_post_policy'];
    }

    /**
     * Sets stream_post_policy
     *
     * @param mixed|null $stream_post_policy stream_post_policy
     *
     * @return self
     */
    public function setStreamPostPolicy($stream_post_policy)
    {
        $this->container['stream_post_policy'] = $stream_post_policy;

        return $this;
    }

    /**
     * Gets message_retention_days
     *
     * @return mixed|null
     */
    public function getMessageRetentionDays()
    {
        return $this->container['message_retention_days'];
    }

    /**
     * Sets message_retention_days
     *
     * @param mixed|null $message_retention_days message_retention_days
     *
     * @return self
     */
    public function setMessageRetentionDays($message_retention_days)
    {
        $this->container['message_retention_days'] = $message_retention_days;

        return $this;
    }

    /**
     * Gets history_public_to_subscribers
     *
     * @return mixed|null
     */
    public function getHistoryPublicToSubscribers()
    {
        return $this->container['history_public_to_subscribers'];
    }

    /**
     * Sets history_public_to_subscribers
     *
     * @param mixed|null $history_public_to_subscribers history_public_to_subscribers
     *
     * @return self
     */
    public function setHistoryPublicToSubscribers($history_public_to_subscribers)
    {
        $this->container['history_public_to_subscribers'] = $history_public_to_subscribers;

        return $this;
    }

    /**
     * Gets first_message_id
     *
     * @return mixed|null
     */
    public function getFirstMessageId()
    {
        return $this->container['first_message_id'];
    }

    /**
     * Sets first_message_id
     *
     * @param mixed|null $first_message_id first_message_id
     *
     * @return self
     */
    public function setFirstMessageId($first_message_id)
    {
        $this->container['first_message_id'] = $first_message_id;

        return $this;
    }

    /**
     * Gets is_announcement_only
     *
     * @return mixed|null
     */
    public function getIsAnnouncementOnly()
    {
        return $this->container['is_announcement_only'];
    }

    /**
     * Sets is_announcement_only
     *
     * @param mixed|null $is_announcement_only is_announcement_only
     *
     * @return self
     */
    public function setIsAnnouncementOnly($is_announcement_only)
    {
        $this->container['is_announcement_only'] = $is_announcement_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


