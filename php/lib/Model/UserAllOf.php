<?php
/**
 * UserAllOf
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserAllOf Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'mixed',
        'is_bot' => 'mixed',
        'avatar_url' => 'mixed',
        'avatar_version' => 'mixed',
        'full_name' => 'mixed',
        'is_admin' => 'mixed',
        'is_owner' => 'mixed',
        'is_billing_admin' => 'mixed',
        'role' => 'mixed',
        'bot_type' => 'mixed',
        'user_id' => 'mixed',
        'bot_owner_id' => 'mixed',
        'is_active' => 'mixed',
        'is_guest' => 'mixed',
        'timezone' => 'mixed',
        'date_joined' => 'mixed',
        'delivery_email' => 'mixed',
        'profile_data' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => null,
        'is_bot' => null,
        'avatar_url' => null,
        'avatar_version' => null,
        'full_name' => null,
        'is_admin' => null,
        'is_owner' => null,
        'is_billing_admin' => null,
        'role' => null,
        'bot_type' => null,
        'user_id' => null,
        'bot_owner_id' => null,
        'is_active' => null,
        'is_guest' => null,
        'timezone' => null,
        'date_joined' => null,
        'delivery_email' => null,
        'profile_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'is_bot' => 'is_bot',
        'avatar_url' => 'avatar_url',
        'avatar_version' => 'avatar_version',
        'full_name' => 'full_name',
        'is_admin' => 'is_admin',
        'is_owner' => 'is_owner',
        'is_billing_admin' => 'is_billing_admin',
        'role' => 'role',
        'bot_type' => 'bot_type',
        'user_id' => 'user_id',
        'bot_owner_id' => 'bot_owner_id',
        'is_active' => 'is_active',
        'is_guest' => 'is_guest',
        'timezone' => 'timezone',
        'date_joined' => 'date_joined',
        'delivery_email' => 'delivery_email',
        'profile_data' => 'profile_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'is_bot' => 'setIsBot',
        'avatar_url' => 'setAvatarUrl',
        'avatar_version' => 'setAvatarVersion',
        'full_name' => 'setFullName',
        'is_admin' => 'setIsAdmin',
        'is_owner' => 'setIsOwner',
        'is_billing_admin' => 'setIsBillingAdmin',
        'role' => 'setRole',
        'bot_type' => 'setBotType',
        'user_id' => 'setUserId',
        'bot_owner_id' => 'setBotOwnerId',
        'is_active' => 'setIsActive',
        'is_guest' => 'setIsGuest',
        'timezone' => 'setTimezone',
        'date_joined' => 'setDateJoined',
        'delivery_email' => 'setDeliveryEmail',
        'profile_data' => 'setProfileData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'is_bot' => 'getIsBot',
        'avatar_url' => 'getAvatarUrl',
        'avatar_version' => 'getAvatarVersion',
        'full_name' => 'getFullName',
        'is_admin' => 'getIsAdmin',
        'is_owner' => 'getIsOwner',
        'is_billing_admin' => 'getIsBillingAdmin',
        'role' => 'getRole',
        'bot_type' => 'getBotType',
        'user_id' => 'getUserId',
        'bot_owner_id' => 'getBotOwnerId',
        'is_active' => 'getIsActive',
        'is_guest' => 'getIsGuest',
        'timezone' => 'getTimezone',
        'date_joined' => 'getDateJoined',
        'delivery_email' => 'getDeliveryEmail',
        'profile_data' => 'getProfileData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['is_bot'] = $data['is_bot'] ?? null;
        $this->container['avatar_url'] = $data['avatar_url'] ?? null;
        $this->container['avatar_version'] = $data['avatar_version'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['is_admin'] = $data['is_admin'] ?? null;
        $this->container['is_owner'] = $data['is_owner'] ?? null;
        $this->container['is_billing_admin'] = $data['is_billing_admin'] ?? null;
        $this->container['role'] = $data['role'] ?? null;
        $this->container['bot_type'] = $data['bot_type'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['bot_owner_id'] = $data['bot_owner_id'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['is_guest'] = $data['is_guest'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['date_joined'] = $data['date_joined'] ?? null;
        $this->container['delivery_email'] = $data['delivery_email'] ?? null;
        $this->container['profile_data'] = $data['profile_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return mixed|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param mixed|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets is_bot
     *
     * @return mixed|null
     */
    public function getIsBot()
    {
        return $this->container['is_bot'];
    }

    /**
     * Sets is_bot
     *
     * @param mixed|null $is_bot is_bot
     *
     * @return self
     */
    public function setIsBot($is_bot)
    {
        $this->container['is_bot'] = $is_bot;

        return $this;
    }

    /**
     * Gets avatar_url
     *
     * @return mixed|null
     */
    public function getAvatarUrl()
    {
        return $this->container['avatar_url'];
    }

    /**
     * Sets avatar_url
     *
     * @param mixed|null $avatar_url avatar_url
     *
     * @return self
     */
    public function setAvatarUrl($avatar_url)
    {
        $this->container['avatar_url'] = $avatar_url;

        return $this;
    }

    /**
     * Gets avatar_version
     *
     * @return mixed|null
     */
    public function getAvatarVersion()
    {
        return $this->container['avatar_version'];
    }

    /**
     * Sets avatar_version
     *
     * @param mixed|null $avatar_version avatar_version
     *
     * @return self
     */
    public function setAvatarVersion($avatar_version)
    {
        $this->container['avatar_version'] = $avatar_version;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return mixed|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param mixed|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets is_admin
     *
     * @return mixed|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param mixed|null $is_admin is_admin
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {
        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets is_owner
     *
     * @return mixed|null
     */
    public function getIsOwner()
    {
        return $this->container['is_owner'];
    }

    /**
     * Sets is_owner
     *
     * @param mixed|null $is_owner is_owner
     *
     * @return self
     */
    public function setIsOwner($is_owner)
    {
        $this->container['is_owner'] = $is_owner;

        return $this;
    }

    /**
     * Gets is_billing_admin
     *
     * @return mixed|null
     */
    public function getIsBillingAdmin()
    {
        return $this->container['is_billing_admin'];
    }

    /**
     * Sets is_billing_admin
     *
     * @param mixed|null $is_billing_admin is_billing_admin
     *
     * @return self
     */
    public function setIsBillingAdmin($is_billing_admin)
    {
        $this->container['is_billing_admin'] = $is_billing_admin;

        return $this;
    }

    /**
     * Gets role
     *
     * @return mixed|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param mixed|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets bot_type
     *
     * @return mixed|null
     */
    public function getBotType()
    {
        return $this->container['bot_type'];
    }

    /**
     * Sets bot_type
     *
     * @param mixed|null $bot_type bot_type
     *
     * @return self
     */
    public function setBotType($bot_type)
    {
        $this->container['bot_type'] = $bot_type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return mixed|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param mixed|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets bot_owner_id
     *
     * @return mixed|null
     */
    public function getBotOwnerId()
    {
        return $this->container['bot_owner_id'];
    }

    /**
     * Sets bot_owner_id
     *
     * @param mixed|null $bot_owner_id bot_owner_id
     *
     * @return self
     */
    public function setBotOwnerId($bot_owner_id)
    {
        $this->container['bot_owner_id'] = $bot_owner_id;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return mixed|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param mixed|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_guest
     *
     * @return mixed|null
     */
    public function getIsGuest()
    {
        return $this->container['is_guest'];
    }

    /**
     * Sets is_guest
     *
     * @param mixed|null $is_guest is_guest
     *
     * @return self
     */
    public function setIsGuest($is_guest)
    {
        $this->container['is_guest'] = $is_guest;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return mixed|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param mixed|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets date_joined
     *
     * @return mixed|null
     */
    public function getDateJoined()
    {
        return $this->container['date_joined'];
    }

    /**
     * Sets date_joined
     *
     * @param mixed|null $date_joined date_joined
     *
     * @return self
     */
    public function setDateJoined($date_joined)
    {
        $this->container['date_joined'] = $date_joined;

        return $this;
    }

    /**
     * Gets delivery_email
     *
     * @return mixed|null
     */
    public function getDeliveryEmail()
    {
        return $this->container['delivery_email'];
    }

    /**
     * Sets delivery_email
     *
     * @param mixed|null $delivery_email delivery_email
     *
     * @return self
     */
    public function setDeliveryEmail($delivery_email)
    {
        $this->container['delivery_email'] = $delivery_email;

        return $this;
    }

    /**
     * Gets profile_data
     *
     * @return mixed|null
     */
    public function getProfileData()
    {
        return $this->container['profile_data'];
    }

    /**
     * Sets profile_data
     *
     * @param mixed|null $profile_data profile_data
     *
     * @return self
     */
    public function setProfileData($profile_data)
    {
        $this->container['profile_data'] = $profile_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


