--  Zulip REST API
--  Powerful open source group chat 
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.


package body .Models is
   pragma Style_Checks ("-mr");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;



   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBaseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("result", Value.Result);
      Into.Write_Entity ("msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBaseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBaseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBaseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonErrorBaseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseAllOfUser_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("email", Value.Email);
      Into.Write_Entity ("full_name", Value.Full_Name);
      Into.Write_Entity ("is_mirror_dummy", Value.Is_Mirror_Dummy);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseAllOfUser_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseAllOfUser_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "full_name", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "is_mirror_dummy", Value.Is_Mirror_Dummy);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseAllOfUser_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiReactionBaseAllOfUser_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("emoji_code", Value.Emoji_Code);
      Into.Write_Entity ("emoji_name", Value.Emoji_Name);
      Into.Write_Entity ("reaction_type", Value.Reaction_Type);
      Into.Write_Entity ("user_id", Value.User_Id);
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "emoji_code", Value.Emoji_Code);
      Swagger.Streams.Deserialize (Object, "emoji_name", Value.Emoji_Name);
      Swagger.Streams.Deserialize (Object, "reaction_type", Value.Reaction_Type);
      Swagger.Streams.Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiReactionBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("user_id", Value.User_Id);
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionBaseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionBaseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiReactionBaseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("result", Value.Result);
      Into.Write_Entity ("msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonErrorBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonErrorBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonErrorBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("result", Value.Result);
      Into.Write_Entity ("msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonSuccessBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuccessDescription_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuccessDescription_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SuccessDescription_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SuccessDescription_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : SuccessDescription_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("email", Value.Email);
      Into.Write_Entity ("is_bot", Value.Is_Bot);
      Into.Write_Entity ("avatar_url", Value.Avatar_Url);
      Into.Write_Entity ("avatar_version", Value.Avatar_Version);
      Into.Write_Entity ("full_name", Value.Full_Name);
      Into.Write_Entity ("is_admin", Value.Is_Admin);
      Into.Write_Entity ("is_owner", Value.Is_Owner);
      Into.Write_Entity ("is_billing_admin", Value.Is_Billing_Admin);
      Into.Write_Entity ("role", Value.Role);
      Into.Write_Entity ("bot_type", Value.Bot_Type);
      Into.Write_Entity ("user_id", Value.User_Id);
      Into.Write_Entity ("bot_owner_id", Value.Bot_Owner_Id);
      Into.Write_Entity ("is_active", Value.Is_Active);
      Into.Write_Entity ("is_guest", Value.Is_Guest);
      Into.Write_Entity ("timezone", Value.Timezone);
      Into.Write_Entity ("date_joined", Value.Date_Joined);
      Into.Write_Entity ("delivery_email", Value.Delivery_Email);
      Serialize (Into, "profile_data", Value.Profile_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "is_bot", Value.Is_Bot);
      Swagger.Streams.Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Swagger.Streams.Deserialize (Object, "avatar_version", Value.Avatar_Version);
      Swagger.Streams.Deserialize (Object, "full_name", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "is_admin", Value.Is_Admin);
      Swagger.Streams.Deserialize (Object, "is_owner", Value.Is_Owner);
      Swagger.Streams.Deserialize (Object, "is_billing_admin", Value.Is_Billing_Admin);
      Swagger.Streams.Deserialize (Object, "role", Value.Role);
      Swagger.Streams.Deserialize (Object, "bot_type", Value.Bot_Type);
      Swagger.Streams.Deserialize (Object, "user_id", Value.User_Id);
      Swagger.Streams.Deserialize (Object, "bot_owner_id", Value.Bot_Owner_Id);
      Swagger.Streams.Deserialize (Object, "is_active", Value.Is_Active);
      Swagger.Streams.Deserialize (Object, "is_guest", Value.Is_Guest);
      Swagger.Streams.Deserialize (Object, "timezone", Value.Timezone);
      Swagger.Streams.Deserialize (Object, "date_joined", Value.Date_Joined);
      Swagger.Streams.Deserialize (Object, "delivery_email", Value.Delivery_Email);
      Swagger.Streams.Deserialize (Object, "profile_data", Value.Profile_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UserBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Draft_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("type", Value.P_Type);
      Serialize (Into, "to", Value.To);
      Into.Write_Entity ("topic", Value.Topic);
      Into.Write_Entity ("content", Value.Content);
      Serialize (Into, "timestamp", Value.Timestamp);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Draft_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Draft_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
      Swagger.Streams.Deserialize (Object, "topic", Value.Topic);
      Swagger.Streams.Deserialize (Object, "content", Value.Content);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Draft_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Draft_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("emoji_code", Value.Emoji_Code);
      Into.Write_Entity ("emoji_name", Value.Emoji_Name);
      Into.Write_Entity ("reaction_type", Value.Reaction_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "emoji_code", Value.Emoji_Code);
      Swagger.Streams.Deserialize (Object, "emoji_name", Value.Emoji_Name);
      Swagger.Streams.Deserialize (Object, "reaction_type", Value.Reaction_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "members", Value.Members);
      Into.Write_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "members", Value.Members);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UserGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmPlayground_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("pygments_language", Value.Pygments_Language);
      Into.Write_Entity ("url_prefix", Value.Url_Prefix);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmPlayground_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmPlayground_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "pygments_language", Value.Pygments_Language);
      Swagger.Streams.Deserialize (Object, "url_prefix", Value.Url_Prefix);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmPlayground_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RealmPlayground_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmEmoji_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("source_url", Value.Source_Url);
      Into.Write_Entity ("deactivated", Value.Deactivated);
      Into.Write_Entity ("author_id", Value.Author_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmEmoji_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmEmoji_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "source_url", Value.Source_Url);
      Swagger.Streams.Deserialize (Object, "deactivated", Value.Deactivated);
      Swagger.Streams.Deserialize (Object, "author_id", Value.Author_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmEmoji_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RealmEmoji_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomProfileField_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("type", Value.P_Type);
      Into.Write_Entity ("order", Value.Order);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("hint", Value.Hint);
      Into.Write_Entity ("field_data", Value.Field_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CustomProfileField_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CustomProfileField_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "order", Value.Order);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "hint", Value.Hint);
      Swagger.Streams.Deserialize (Object, "field_data", Value.Field_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CustomProfileField_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CustomProfileField_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("stream_id", Value.Stream_Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("date_created", Value.Date_Created);
      Into.Write_Entity ("invite_only", Value.Invite_Only);
      Into.Write_Entity ("rendered_description", Value.Rendered_Description);
      Into.Write_Entity ("is_web_public", Value.Is_Web_Public);
      Into.Write_Entity ("stream_post_policy", Value.Stream_Post_Policy);
      Into.Write_Entity ("message_retention_days", Value.Message_Retention_Days);
      Into.Write_Entity ("history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Into.Write_Entity ("first_message_id", Value.First_Message_Id);
      Into.Write_Entity ("is_announcement_only", Value.Is_Announcement_Only);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "stream_id", Value.Stream_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "date_created", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "invite_only", Value.Invite_Only);
      Swagger.Streams.Deserialize (Object, "rendered_description", Value.Rendered_Description);
      Swagger.Streams.Deserialize (Object, "is_web_public", Value.Is_Web_Public);
      Swagger.Streams.Deserialize (Object, "stream_post_policy", Value.Stream_Post_Policy);
      Swagger.Streams.Deserialize (Object, "message_retention_days", Value.Message_Retention_Days);
      Swagger.Streams.Deserialize (Object, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Swagger.Streams.Deserialize (Object, "first_message_id", Value.First_Message_Id);
      Swagger.Streams.Deserialize (Object, "is_announcement_only", Value.Is_Announcement_Only);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicStreamBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventIdSchema_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventIdSchema_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventIdSchema_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventIdSchema_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EventIdSchema_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventTypeSchema_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EventTypeSchema_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventTypeSchema_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EventTypeSchema_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EventTypeSchema_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Hotspot_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "delay", Value.P_Delay);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("title", Value.Title);
      Into.Write_Entity ("description", Value.Description);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Hotspot_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Hotspot_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "delay", Value.P_Delay);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Hotspot_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Hotspot_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDomain_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("domain", Value.Domain);
      Into.Write_Entity ("allow_subdomains", Value.Allow_Subdomains);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDomain_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDomain_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "domain", Value.Domain);
      Swagger.Streams.Deserialize (Object, "allow_subdomains", Value.Allow_Subdomains);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDomain_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RealmDomain_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmExport_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("acting_user_id", Value.Acting_User_Id);
      Serialize (Into, "export_time", Value.Export_Time);
      Serialize (Into, "deleted_timestamp", Value.Deleted_Timestamp);
      Serialize (Into, "failed_timestamp", Value.Failed_Timestamp);
      Into.Write_Entity ("export_url", Value.Export_Url);
      Into.Write_Entity ("pending", Value.Pending);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmExport_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmExport_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "acting_user_id", Value.Acting_User_Id);
      Swagger.Streams.Deserialize (Object, "export_time", Value.Export_Time);
      Swagger.Streams.Deserialize (Object, "deleted_timestamp", Value.Deleted_Timestamp);
      Swagger.Streams.Deserialize (Object, "failed_timestamp", Value.Failed_Timestamp);
      Swagger.Streams.Deserialize (Object, "export_url", Value.Export_Url);
      Swagger.Streams.Deserialize (Object, "pending", Value.Pending);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmExport_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RealmExport_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subscriptions_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("stream_id", Value.Stream_Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("rendered_description", Value.Rendered_Description);
      Into.Write_Entity ("date_created", Value.Date_Created);
      Into.Write_Entity ("invite_only", Value.Invite_Only);
      Serialize (Into, "subscribers", Value.Subscribers);
      Into.Write_Entity ("desktop_notifications", Value.Desktop_Notifications);
      Into.Write_Entity ("email_notifications", Value.Email_Notifications);
      Into.Write_Entity ("wildcard_mentions_notify", Value.Wildcard_Mentions_Notify);
      Into.Write_Entity ("push_notifications", Value.Push_Notifications);
      Into.Write_Entity ("audible_notifications", Value.Audible_Notifications);
      Into.Write_Entity ("pin_to_top", Value.Pin_To_Top);
      Into.Write_Entity ("email_address", Value.Email_Address);
      Into.Write_Entity ("is_muted", Value.Is_Muted);
      Into.Write_Entity ("in_home_view", Value.In_Home_View);
      Into.Write_Entity ("is_announcement_only", Value.Is_Announcement_Only);
      Into.Write_Entity ("is_web_public", Value.Is_Web_Public);
      Into.Write_Entity ("role", Value.Role);
      Into.Write_Entity ("color", Value.Color);
      Into.Write_Entity ("stream_post_policy", Value.Stream_Post_Policy);
      Into.Write_Entity ("message_retention_days", Value.Message_Retention_Days);
      Into.Write_Entity ("history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Into.Write_Entity ("first_message_id", Value.First_Message_Id);
      Into.Write_Entity ("stream_weekly_traffic", Value.Stream_Weekly_Traffic);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subscriptions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Subscriptions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "stream_id", Value.Stream_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "rendered_description", Value.Rendered_Description);
      Swagger.Streams.Deserialize (Object, "date_created", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "invite_only", Value.Invite_Only);
      Swagger.Streams.Deserialize (Object, "subscribers", Value.Subscribers);
      Swagger.Streams.Deserialize (Object, "desktop_notifications", Value.Desktop_Notifications);
      Swagger.Streams.Deserialize (Object, "email_notifications", Value.Email_Notifications);
      Swagger.Streams.Deserialize (Object, "wildcard_mentions_notify", Value.Wildcard_Mentions_Notify);
      Swagger.Streams.Deserialize (Object, "push_notifications", Value.Push_Notifications);
      Swagger.Streams.Deserialize (Object, "audible_notifications", Value.Audible_Notifications);
      Swagger.Streams.Deserialize (Object, "pin_to_top", Value.Pin_To_Top);
      Swagger.Streams.Deserialize (Object, "email_address", Value.Email_Address);
      Swagger.Streams.Deserialize (Object, "is_muted", Value.Is_Muted);
      Swagger.Streams.Deserialize (Object, "in_home_view", Value.In_Home_View);
      Swagger.Streams.Deserialize (Object, "is_announcement_only", Value.Is_Announcement_Only);
      Swagger.Streams.Deserialize (Object, "is_web_public", Value.Is_Web_Public);
      Swagger.Streams.Deserialize (Object, "role", Value.Role);
      Swagger.Streams.Deserialize (Object, "color", Value.Color);
      Swagger.Streams.Deserialize (Object, "stream_post_policy", Value.Stream_Post_Policy);
      Swagger.Streams.Deserialize (Object, "message_retention_days", Value.Message_Retention_Days);
      Swagger.Streams.Deserialize (Object, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Swagger.Streams.Deserialize (Object, "first_message_id", Value.First_Message_Id);
      Swagger.Streams.Deserialize (Object, "stream_weekly_traffic", Value.Stream_Weekly_Traffic);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Subscriptions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Subscriptions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Presence_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("client", Value.Client);
      Into.Write_Entity ("status", Value.Status);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("pushable", Value.Pushable);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Presence_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Presence_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "client", Value.Client);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "pushable", Value.Pushable);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Presence_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Presence_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonResponseBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonResponseBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonResponseBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonResponseBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonResponseBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttachmentsMessages_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("date_sent", Value.Date_Sent);
      Into.Write_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AttachmentsMessages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AttachmentsMessages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "date_sent", Value.Date_Sent);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AttachmentsMessages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : AttachmentsMessages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Attachments_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("path_id", Value.Path_Id);
      Into.Write_Entity ("size", Value.Size);
      Into.Write_Entity ("create_time", Value.Create_Time);
      Serialize (Into, "messages", Value.Messages);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Attachments_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Attachments_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "path_id", Value.Path_Id);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "create_time", Value.Create_Time);
      Deserialize (Object, "messages", Value.Messages);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Attachments_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Attachments_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBaseTopicLinks_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("text", Value.Text);
      Into.Write_Entity ("url", Value.Url);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBaseTopicLinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBaseTopicLinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "text", Value.Text);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBaseTopicLinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : MessagesBaseTopicLinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBaseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("result", Value.Result);
      Into.Write_Entity ("msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessBaseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBaseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessBaseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonSuccessBaseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStream_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "name", Value.Name);
      Serialize (Into, "description", Value.Description);
      Serialize (Into, "date_created", Value.Date_Created);
      Serialize (Into, "invite_only", Value.Invite_Only);
      Serialize (Into, "rendered_description", Value.Rendered_Description);
      Serialize (Into, "is_web_public", Value.Is_Web_Public);
      Serialize (Into, "stream_post_policy", Value.Stream_Post_Policy);
      Serialize (Into, "message_retention_days", Value.Message_Retention_Days);
      Serialize (Into, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Serialize (Into, "first_message_id", Value.First_Message_Id);
      Serialize (Into, "is_announcement_only", Value.Is_Announcement_Only);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStream_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStream_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "date_created", Value.Date_Created);
      Deserialize (Object, "invite_only", Value.Invite_Only);
      Deserialize (Object, "rendered_description", Value.Rendered_Description);
      Deserialize (Object, "is_web_public", Value.Is_Web_Public);
      Deserialize (Object, "stream_post_policy", Value.Stream_Post_Policy);
      Deserialize (Object, "message_retention_days", Value.Message_Retention_Days);
      Deserialize (Object, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Deserialize (Object, "first_message_id", Value.First_Message_Id);
      Deserialize (Object, "is_announcement_only", Value.Is_Announcement_Only);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStream_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicStream_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBot_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "api_key", Value.Api_Key);
      Serialize (Into, "default_sending_stream", Value.Default_Sending_Stream);
      Serialize (Into, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Serialize (Into, "default_all_public_streams", Value.Default_All_Public_Streams);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "owner_id", Value.Owner_Id);
      Serialize (Into, "services", Value.Services);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBot_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBot_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "api_key", Value.Api_Key);
      Deserialize (Object, "default_sending_stream", Value.Default_Sending_Stream);
      Deserialize (Object, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Deserialize (Object, "default_all_public_streams", Value.Default_All_Public_Streams);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "owner_id", Value.Owner_Id);
      Deserialize (Object, "services", Value.Services);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBot_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicBot_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("user_id", Value.User_Id);
      Into.Write_Entity ("full_name", Value.Full_Name);
      Into.Write_Entity ("api_key", Value.Api_Key);
      Into.Write_Entity ("default_sending_stream", Value.Default_Sending_Stream);
      Into.Write_Entity ("default_events_register_stream", Value.Default_Events_Register_Stream);
      Into.Write_Entity ("default_all_public_streams", Value.Default_All_Public_Streams);
      Into.Write_Entity ("avatar_url", Value.Avatar_Url);
      Into.Write_Entity ("owner_id", Value.Owner_Id);
      Serialize (Into, "services", Value.Services);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "user_id", Value.User_Id);
      Swagger.Streams.Deserialize (Object, "full_name", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "api_key", Value.Api_Key);
      Swagger.Streams.Deserialize (Object, "default_sending_stream", Value.Default_Sending_Stream);
      Swagger.Streams.Deserialize (Object, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Swagger.Streams.Deserialize (Object, "default_all_public_streams", Value.Default_All_Public_Streams);
      Swagger.Streams.Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Swagger.Streams.Deserialize (Object, "owner_id", Value.Owner_Id);
      Deserialize (Object, "services", Value.Services);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicBotBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Bot_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "api_key", Value.Api_Key);
      Serialize (Into, "default_sending_stream", Value.Default_Sending_Stream);
      Serialize (Into, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Serialize (Into, "default_all_public_streams", Value.Default_All_Public_Streams);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "owner_id", Value.Owner_Id);
      Serialize (Into, "services", Value.Services);
      Into.Write_Entity ("email", Value.Email);
      Into.Write_Entity ("bot_type", Value.Bot_Type);
      Into.Write_Entity ("is_active", Value.Is_Active);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Bot_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Bot_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "api_key", Value.Api_Key);
      Deserialize (Object, "default_sending_stream", Value.Default_Sending_Stream);
      Deserialize (Object, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Deserialize (Object, "default_all_public_streams", Value.Default_All_Public_Streams);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "owner_id", Value.Owner_Id);
      Deserialize (Object, "services", Value.Services);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "bot_type", Value.Bot_Type);
      Swagger.Streams.Deserialize (Object, "is_active", Value.Is_Active);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Bot_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Bot_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DefaultStreamGroup_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("description", Value.Description);
      Into.Write_Entity ("id", Value.Id);
      Serialize (Into, "streams", Value.Streams);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DefaultStreamGroup_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DefaultStreamGroup_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "streams", Value.Streams);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out DefaultStreamGroup_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : DefaultStreamGroup_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReaction_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "emoji_code", Value.Emoji_Code);
      Serialize (Into, "emoji_name", Value.Emoji_Name);
      Serialize (Into, "reaction_type", Value.Reaction_Type);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReaction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReaction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "emoji_code", Value.Emoji_Code);
      Deserialize (Object, "emoji_name", Value.Emoji_Name);
      Deserialize (Object, "reaction_type", Value.Reaction_Type);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReaction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiReaction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Messages_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "client", Value.Client);
      Serialize (Into, "content", Value.Content);
      Serialize (Into, "content_type", Value.Content_Type);
      Serialize (Into, "display_recipient", Value.Display_Recipient);
      Serialize (Into, "id", Value.Id);
      Serialize (Into, "is_me_message", Value.Is_Me_Message);
      Serialize (Into, "reactions", Value.Reactions);
      Serialize (Into, "recipient_id", Value.Recipient_Id);
      Serialize (Into, "sender_email", Value.Sender_Email);
      Serialize (Into, "sender_full_name", Value.Sender_Full_Name);
      Serialize (Into, "sender_id", Value.Sender_Id);
      Serialize (Into, "sender_realm_str", Value.Sender_Realm_Str);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "subject", Value.Subject);
      Serialize (Into, "topic_links", Value.Topic_Links);
      Serialize (Into, "submessages", Value.Submessages);
      Serialize (Into, "timestamp", Value.Timestamp);
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Messages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Messages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "client", Value.Client);
      Deserialize (Object, "content", Value.Content);
      Deserialize (Object, "content_type", Value.Content_Type);
      Deserialize (Object, "display_recipient", Value.Display_Recipient);
      Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "is_me_message", Value.Is_Me_Message);
      Deserialize (Object, "reactions", Value.Reactions);
      Deserialize (Object, "recipient_id", Value.Recipient_Id);
      Deserialize (Object, "sender_email", Value.Sender_Email);
      Deserialize (Object, "sender_full_name", Value.Sender_Full_Name);
      Deserialize (Object, "sender_id", Value.Sender_Id);
      Deserialize (Object, "sender_realm_str", Value.Sender_Realm_Str);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "subject", Value.Subject);
      Deserialize (Object, "topic_links", Value.Topic_Links);
      Deserialize (Object, "submessages", Value.Submessages);
      Deserialize (Object, "timestamp", Value.Timestamp);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out Messages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : Messages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBase_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("avatar_url", Value.Avatar_Url);
      Into.Write_Entity ("client", Value.Client);
      Into.Write_Entity ("content", Value.Content);
      Into.Write_Entity ("content_type", Value.Content_Type);
      Serialize (Into, "display_recipient", Value.Display_Recipient);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("is_me_message", Value.Is_Me_Message);
      Serialize (Into, "reactions", Value.Reactions);
      Into.Write_Entity ("recipient_id", Value.Recipient_Id);
      Into.Write_Entity ("sender_email", Value.Sender_Email);
      Into.Write_Entity ("sender_full_name", Value.Sender_Full_Name);
      Into.Write_Entity ("sender_id", Value.Sender_Id);
      Into.Write_Entity ("sender_realm_str", Value.Sender_Realm_Str);
      Into.Write_Entity ("stream_id", Value.Stream_Id);
      Into.Write_Entity ("subject", Value.Subject);
      Serialize (Into, "topic_links", Value.Topic_Links);
      Serialize (Into, "submessages", Value.Submessages);
      Into.Write_Entity ("timestamp", Value.Timestamp);
      Into.Write_Entity ("type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Swagger.Streams.Deserialize (Object, "client", Value.Client);
      Swagger.Streams.Deserialize (Object, "content", Value.Content);
      Swagger.Streams.Deserialize (Object, "content_type", Value.Content_Type);
      Deserialize (Object, "display_recipient", Value.Display_Recipient);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "is_me_message", Value.Is_Me_Message);
      Deserialize (Object, "reactions", Value.Reactions);
      Swagger.Streams.Deserialize (Object, "recipient_id", Value.Recipient_Id);
      Swagger.Streams.Deserialize (Object, "sender_email", Value.Sender_Email);
      Swagger.Streams.Deserialize (Object, "sender_full_name", Value.Sender_Full_Name);
      Swagger.Streams.Deserialize (Object, "sender_id", Value.Sender_Id);
      Swagger.Streams.Deserialize (Object, "sender_realm_str", Value.Sender_Realm_Str);
      Swagger.Streams.Deserialize (Object, "stream_id", Value.Stream_Id);
      Swagger.Streams.Deserialize (Object, "subject", Value.Subject);
      Deserialize (Object, "topic_links", Value.Topic_Links);
      Swagger.Streams.Deserialize (Object, "submessages", Value.Submessages);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : MessagesBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessages_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "client", Value.Client);
      Serialize (Into, "content", Value.Content);
      Serialize (Into, "content_type", Value.Content_Type);
      Serialize (Into, "display_recipient", Value.Display_Recipient);
      Serialize (Into, "id", Value.Id);
      Serialize (Into, "is_me_message", Value.Is_Me_Message);
      Serialize (Into, "reactions", Value.Reactions);
      Serialize (Into, "recipient_id", Value.Recipient_Id);
      Serialize (Into, "sender_email", Value.Sender_Email);
      Serialize (Into, "sender_full_name", Value.Sender_Full_Name);
      Serialize (Into, "sender_id", Value.Sender_Id);
      Serialize (Into, "sender_realm_str", Value.Sender_Realm_Str);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "subject", Value.Subject);
      Serialize (Into, "topic_links", Value.Topic_Links);
      Serialize (Into, "submessages", Value.Submessages);
      Serialize (Into, "timestamp", Value.Timestamp);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "flags", Value.Flags);
      Into.Write_Entity ("last_edit_timestamp", Value.Last_Edit_Timestamp);
      Into.Write_Entity ("match_content", Value.Match_Content);
      Into.Write_Entity ("match_subject", Value.Match_Subject);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessages_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessages_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "client", Value.Client);
      Deserialize (Object, "content", Value.Content);
      Deserialize (Object, "content_type", Value.Content_Type);
      Deserialize (Object, "display_recipient", Value.Display_Recipient);
      Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "is_me_message", Value.Is_Me_Message);
      Deserialize (Object, "reactions", Value.Reactions);
      Deserialize (Object, "recipient_id", Value.Recipient_Id);
      Deserialize (Object, "sender_email", Value.Sender_Email);
      Deserialize (Object, "sender_full_name", Value.Sender_Full_Name);
      Deserialize (Object, "sender_id", Value.Sender_Id);
      Deserialize (Object, "sender_realm_str", Value.Sender_Realm_Str);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "subject", Value.Subject);
      Deserialize (Object, "topic_links", Value.Topic_Links);
      Deserialize (Object, "submessages", Value.Submessages);
      Deserialize (Object, "timestamp", Value.Timestamp);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "flags", Value.Flags);
      Swagger.Streams.Deserialize (Object, "last_edit_timestamp", Value.Last_Edit_Timestamp);
      Swagger.Streams.Deserialize (Object, "match_content", Value.Match_Content);
      Swagger.Streams.Deserialize (Object, "match_subject", Value.Match_Subject);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessages_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : GetMessages_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "email", Value.Email);
      Serialize (Into, "is_bot", Value.Is_Bot);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "avatar_version", Value.Avatar_Version);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "is_admin", Value.Is_Admin);
      Serialize (Into, "is_owner", Value.Is_Owner);
      Serialize (Into, "is_billing_admin", Value.Is_Billing_Admin);
      Serialize (Into, "role", Value.Role);
      Serialize (Into, "bot_type", Value.Bot_Type);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "bot_owner_id", Value.Bot_Owner_Id);
      Serialize (Into, "is_active", Value.Is_Active);
      Serialize (Into, "is_guest", Value.Is_Guest);
      Serialize (Into, "timezone", Value.Timezone);
      Serialize (Into, "date_joined", Value.Date_Joined);
      Serialize (Into, "delivery_email", Value.Delivery_Email);
      Serialize (Into, "profile_data", Value.Profile_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out User_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "email", Value.Email);
      Deserialize (Object, "is_bot", Value.Is_Bot);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "avatar_version", Value.Avatar_Version);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "is_admin", Value.Is_Admin);
      Deserialize (Object, "is_owner", Value.Is_Owner);
      Deserialize (Object, "is_billing_admin", Value.Is_Billing_Admin);
      Deserialize (Object, "role", Value.Role);
      Deserialize (Object, "bot_type", Value.Bot_Type);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "bot_owner_id", Value.Bot_Owner_Id);
      Deserialize (Object, "is_active", Value.Is_Active);
      Deserialize (Object, "is_guest", Value.Is_Guest);
      Deserialize (Object, "timezone", Value.Timezone);
      Deserialize (Object, "date_joined", Value.Date_Joined);
      Deserialize (Object, "delivery_email", Value.Delivery_Email);
      Deserialize (Object, "profile_data", Value.Profile_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out User_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : User_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccess_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccess_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccess_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccess_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonSuccess_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("api_key", Value.Api_Key);
      Into.Write_Entity ("email", Value.Email);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "api_key", Value.Api_Key);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : ApiKeyResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CodedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBase_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBase_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBase_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBase_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CodedErrorBase_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("queue_id", Value.Queue_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "queue_id", Value.Queue_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BadEventQueueIdError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("raw_content", Value.Raw_Content);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "raw_content", Value.Raw_Content);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : InvalidMessageError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("stream", Value.Stream);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "stream", Value.Stream);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : NonExistingStreamError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "subscribed", Value.Subscribed);
      Serialize (Into, "already_subscribed", Value.Already_Subscribed);
      Serialize (Into, "unauthorized", Value.Unauthorized);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "subscribed", Value.Subscribed);
      Swagger.Streams.Deserialize (Object, "already_subscribed", Value.Already_Subscribed);
      Swagger.Streams.Deserialize (Object, "unauthorized", Value.Unauthorized);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : AddSubscriptionsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidApiKeyError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidApiKeyError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidApiKeyError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidApiKeyError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : InvalidApiKeyError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("var_name", Value.Var_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "var_name", Value.Var_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : MissingArgumentError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserNotAuthorizedError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserNotAuthorizedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserNotAuthorizedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserNotAuthorizedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UserNotAuthorizedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserDeactivatedError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserDeactivatedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserDeactivatedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserDeactivatedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UserDeactivatedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RateLimitedError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RateLimitedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RateLimitedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RateLimitedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RateLimitedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDeactivatedError_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RealmDeactivatedError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDeactivatedError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out RealmDeactivatedError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : RealmDeactivatedError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineResponse200_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bot_email", Value.Bot_Email);
      Into.Write_Entity ("bot_full_name", Value.Bot_Full_Name);
      Into.Write_Entity ("data", Value.Data);
      Into.Write_Entity ("trigger", Value.Trigger);
      Into.Write_Entity ("token", Value.Token);
      Serialize (Into, "message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineResponse200_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InlineResponse200_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bot_email", Value.Bot_Email);
      Swagger.Streams.Deserialize (Object, "bot_full_name", Value.Bot_Full_Name);
      Swagger.Streams.Deserialize (Object, "data", Value.Data);
      Swagger.Streams.Deserialize (Object, "trigger", Value.Trigger);
      Swagger.Streams.Deserialize (Object, "token", Value.Token);
      Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InlineResponse200_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : InlineResponse200_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "name", Value.Name);
      Serialize (Into, "description", Value.Description);
      Serialize (Into, "date_created", Value.Date_Created);
      Serialize (Into, "invite_only", Value.Invite_Only);
      Serialize (Into, "rendered_description", Value.Rendered_Description);
      Serialize (Into, "is_web_public", Value.Is_Web_Public);
      Serialize (Into, "stream_post_policy", Value.Stream_Post_Policy);
      Serialize (Into, "message_retention_days", Value.Message_Retention_Days);
      Serialize (Into, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Serialize (Into, "first_message_id", Value.First_Message_Id);
      Serialize (Into, "is_announcement_only", Value.Is_Announcement_Only);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicStreamAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "date_created", Value.Date_Created);
      Deserialize (Object, "invite_only", Value.Invite_Only);
      Deserialize (Object, "rendered_description", Value.Rendered_Description);
      Deserialize (Object, "is_web_public", Value.Is_Web_Public);
      Deserialize (Object, "stream_post_policy", Value.Stream_Post_Policy);
      Deserialize (Object, "message_retention_days", Value.Message_Retention_Days);
      Deserialize (Object, "history_public_to_subscribers", Value.History_Public_To_Subscribers);
      Deserialize (Object, "first_message_id", Value.First_Message_Id);
      Deserialize (Object, "is_announcement_only", Value.Is_Announcement_Only);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicStreamAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicStreamAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "api_key", Value.Api_Key);
      Serialize (Into, "default_sending_stream", Value.Default_Sending_Stream);
      Serialize (Into, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Serialize (Into, "default_all_public_streams", Value.Default_All_Public_Streams);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "owner_id", Value.Owner_Id);
      Serialize (Into, "services", Value.Services);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasicBotAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "api_key", Value.Api_Key);
      Deserialize (Object, "default_sending_stream", Value.Default_Sending_Stream);
      Deserialize (Object, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Deserialize (Object, "default_all_public_streams", Value.Default_All_Public_Streams);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "owner_id", Value.Owner_Id);
      Deserialize (Object, "services", Value.Services);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BasicBotAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BasicBotAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BotAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "api_key", Value.Api_Key);
      Serialize (Into, "default_sending_stream", Value.Default_Sending_Stream);
      Serialize (Into, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Serialize (Into, "default_all_public_streams", Value.Default_All_Public_Streams);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "owner_id", Value.Owner_Id);
      Serialize (Into, "services", Value.Services);
      Into.Write_Entity ("email", Value.Email);
      Into.Write_Entity ("bot_type", Value.Bot_Type);
      Into.Write_Entity ("is_active", Value.Is_Active);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BotAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BotAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "api_key", Value.Api_Key);
      Deserialize (Object, "default_sending_stream", Value.Default_Sending_Stream);
      Deserialize (Object, "default_events_register_stream", Value.Default_Events_Register_Stream);
      Deserialize (Object, "default_all_public_streams", Value.Default_All_Public_Streams);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "owner_id", Value.Owner_Id);
      Deserialize (Object, "services", Value.Services);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "bot_type", Value.Bot_Type);
      Swagger.Streams.Deserialize (Object, "is_active", Value.Is_Active);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BotAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BotAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "emoji_code", Value.Emoji_Code);
      Serialize (Into, "emoji_name", Value.Emoji_Name);
      Serialize (Into, "reaction_type", Value.Reaction_Type);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "user", Value.User);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmojiReactionAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "emoji_code", Value.Emoji_Code);
      Deserialize (Object, "emoji_name", Value.Emoji_Name);
      Deserialize (Object, "reaction_type", Value.Reaction_Type);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "user", Value.User);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out EmojiReactionAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : EmojiReactionAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "client", Value.Client);
      Serialize (Into, "content", Value.Content);
      Serialize (Into, "content_type", Value.Content_Type);
      Serialize (Into, "display_recipient", Value.Display_Recipient);
      Serialize (Into, "id", Value.Id);
      Serialize (Into, "is_me_message", Value.Is_Me_Message);
      Serialize (Into, "reactions", Value.Reactions);
      Serialize (Into, "recipient_id", Value.Recipient_Id);
      Serialize (Into, "sender_email", Value.Sender_Email);
      Serialize (Into, "sender_full_name", Value.Sender_Full_Name);
      Serialize (Into, "sender_id", Value.Sender_Id);
      Serialize (Into, "sender_realm_str", Value.Sender_Realm_Str);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "subject", Value.Subject);
      Serialize (Into, "topic_links", Value.Topic_Links);
      Serialize (Into, "submessages", Value.Submessages);
      Serialize (Into, "timestamp", Value.Timestamp);
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MessagesAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "client", Value.Client);
      Deserialize (Object, "content", Value.Content);
      Deserialize (Object, "content_type", Value.Content_Type);
      Deserialize (Object, "display_recipient", Value.Display_Recipient);
      Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "is_me_message", Value.Is_Me_Message);
      Deserialize (Object, "reactions", Value.Reactions);
      Deserialize (Object, "recipient_id", Value.Recipient_Id);
      Deserialize (Object, "sender_email", Value.Sender_Email);
      Deserialize (Object, "sender_full_name", Value.Sender_Full_Name);
      Deserialize (Object, "sender_id", Value.Sender_Id);
      Deserialize (Object, "sender_realm_str", Value.Sender_Realm_Str);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "subject", Value.Subject);
      Deserialize (Object, "topic_links", Value.Topic_Links);
      Deserialize (Object, "submessages", Value.Submessages);
      Deserialize (Object, "timestamp", Value.Timestamp);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MessagesAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : MessagesAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessagesAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "client", Value.Client);
      Serialize (Into, "content", Value.Content);
      Serialize (Into, "content_type", Value.Content_Type);
      Serialize (Into, "display_recipient", Value.Display_Recipient);
      Serialize (Into, "id", Value.Id);
      Serialize (Into, "is_me_message", Value.Is_Me_Message);
      Serialize (Into, "reactions", Value.Reactions);
      Serialize (Into, "recipient_id", Value.Recipient_Id);
      Serialize (Into, "sender_email", Value.Sender_Email);
      Serialize (Into, "sender_full_name", Value.Sender_Full_Name);
      Serialize (Into, "sender_id", Value.Sender_Id);
      Serialize (Into, "sender_realm_str", Value.Sender_Realm_Str);
      Serialize (Into, "stream_id", Value.Stream_Id);
      Serialize (Into, "subject", Value.Subject);
      Serialize (Into, "topic_links", Value.Topic_Links);
      Serialize (Into, "submessages", Value.Submessages);
      Serialize (Into, "timestamp", Value.Timestamp);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "flags", Value.Flags);
      Into.Write_Entity ("last_edit_timestamp", Value.Last_Edit_Timestamp);
      Into.Write_Entity ("match_content", Value.Match_Content);
      Into.Write_Entity ("match_subject", Value.Match_Subject);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMessagesAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessagesAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "client", Value.Client);
      Deserialize (Object, "content", Value.Content);
      Deserialize (Object, "content_type", Value.Content_Type);
      Deserialize (Object, "display_recipient", Value.Display_Recipient);
      Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "is_me_message", Value.Is_Me_Message);
      Deserialize (Object, "reactions", Value.Reactions);
      Deserialize (Object, "recipient_id", Value.Recipient_Id);
      Deserialize (Object, "sender_email", Value.Sender_Email);
      Deserialize (Object, "sender_full_name", Value.Sender_Full_Name);
      Deserialize (Object, "sender_id", Value.Sender_Id);
      Deserialize (Object, "sender_realm_str", Value.Sender_Realm_Str);
      Deserialize (Object, "stream_id", Value.Stream_Id);
      Deserialize (Object, "subject", Value.Subject);
      Deserialize (Object, "topic_links", Value.Topic_Links);
      Deserialize (Object, "submessages", Value.Submessages);
      Deserialize (Object, "timestamp", Value.Timestamp);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "flags", Value.Flags);
      Swagger.Streams.Deserialize (Object, "last_edit_timestamp", Value.Last_Edit_Timestamp);
      Swagger.Streams.Deserialize (Object, "match_content", Value.Match_Content);
      Swagger.Streams.Deserialize (Object, "match_subject", Value.Match_Subject);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out GetMessagesAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : GetMessagesAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "email", Value.Email);
      Serialize (Into, "is_bot", Value.Is_Bot);
      Serialize (Into, "avatar_url", Value.Avatar_Url);
      Serialize (Into, "avatar_version", Value.Avatar_Version);
      Serialize (Into, "full_name", Value.Full_Name);
      Serialize (Into, "is_admin", Value.Is_Admin);
      Serialize (Into, "is_owner", Value.Is_Owner);
      Serialize (Into, "is_billing_admin", Value.Is_Billing_Admin);
      Serialize (Into, "role", Value.Role);
      Serialize (Into, "bot_type", Value.Bot_Type);
      Serialize (Into, "user_id", Value.User_Id);
      Serialize (Into, "bot_owner_id", Value.Bot_Owner_Id);
      Serialize (Into, "is_active", Value.Is_Active);
      Serialize (Into, "is_guest", Value.Is_Guest);
      Serialize (Into, "timezone", Value.Timezone);
      Serialize (Into, "date_joined", Value.Date_Joined);
      Serialize (Into, "delivery_email", Value.Delivery_Email);
      Serialize (Into, "profile_data", Value.Profile_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "email", Value.Email);
      Deserialize (Object, "is_bot", Value.Is_Bot);
      Deserialize (Object, "avatar_url", Value.Avatar_Url);
      Deserialize (Object, "avatar_version", Value.Avatar_Version);
      Deserialize (Object, "full_name", Value.Full_Name);
      Deserialize (Object, "is_admin", Value.Is_Admin);
      Deserialize (Object, "is_owner", Value.Is_Owner);
      Deserialize (Object, "is_billing_admin", Value.Is_Billing_Admin);
      Deserialize (Object, "role", Value.Role);
      Deserialize (Object, "bot_type", Value.Bot_Type);
      Deserialize (Object, "user_id", Value.User_Id);
      Deserialize (Object, "bot_owner_id", Value.Bot_Owner_Id);
      Deserialize (Object, "is_active", Value.Is_Active);
      Deserialize (Object, "is_guest", Value.Is_Guest);
      Deserialize (Object, "timezone", Value.Timezone);
      Deserialize (Object, "date_joined", Value.Date_Joined);
      Deserialize (Object, "delivery_email", Value.Delivery_Email);
      Deserialize (Object, "profile_data", Value.Profile_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UserAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : UserAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in JsonSuccessAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out JsonSuccessAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : JsonSuccessAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("api_key", Value.Api_Key);
      Into.Write_Entity ("email", Value.Email);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiKeyResponseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "api_key", Value.Api_Key);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out ApiKeyResponseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : ApiKeyResponseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CodedErrorAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBaseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("code", Value.Code);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodedErrorBaseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBaseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CodedErrorBaseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : CodedErrorBaseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdErrorAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("queue_id", Value.Queue_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BadEventQueueIdErrorAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdErrorAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "queue_id", Value.Queue_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out BadEventQueueIdErrorAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : BadEventQueueIdErrorAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageErrorAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Into.Write_Entity ("raw_content", Value.Raw_Content);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InvalidMessageErrorAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageErrorAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "raw_content", Value.Raw_Content);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out InvalidMessageErrorAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : InvalidMessageErrorAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamErrorAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("stream", Value.Stream);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NonExistingStreamErrorAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamErrorAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "stream", Value.Stream);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out NonExistingStreamErrorAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : NonExistingStreamErrorAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponseAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "subscribed", Value.Subscribed);
      Serialize (Into, "already_subscribed", Value.Already_Subscribed);
      Serialize (Into, "unauthorized", Value.Unauthorized);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddSubscriptionsResponseAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponseAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Swagger.Streams.Deserialize (Object, "subscribed", Value.Subscribed);
      Swagger.Streams.Deserialize (Object, "already_subscribed", Value.Already_Subscribed);
      Swagger.Streams.Deserialize (Object, "unauthorized", Value.Unauthorized);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out AddSubscriptionsResponseAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : AddSubscriptionsResponseAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;




   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentErrorAllOf_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Serialize (Into, "msg", Value.Msg);
      Serialize (Into, "code", Value.Code);
      Into.Write_Entity ("var_name", Value.Var_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MissingArgumentErrorAllOf_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentErrorAllOf_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
      Deserialize (Object, "msg", Value.Msg);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "var_name", Value.Var_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out MissingArgumentErrorAllOf_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : MissingArgumentErrorAllOf_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;



end .Models;
