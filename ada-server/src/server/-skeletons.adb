--  Zulip REST API
--  Powerful open source group chat 
--
--  The version of the OpenAPI document: 1.0.0
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 5.2.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   package body Skeleton is


      package API_Dev_Fetch_Api_Key is
         new Swagger.Servers.Operation (Handler => Dev_Fetch_Api_Key,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/dev_fetch_api_key");

      --  Fetch an API key (development only)
      procedure Dev_Fetch_Api_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
         Result : .Models.ApiKeyResponse_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Impl.Dev_Fetch_Api_Key
            (Username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Dev_Fetch_Api_Key;

      package API_Fetch_Api_Key is
         new Swagger.Servers.Operation (Handler => Fetch_Api_Key,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/fetch_api_key");

      --  Fetch an API key (production)
      procedure Fetch_Api_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Username : Swagger.UString;
         Password : Swagger.UString;
         Result : .Models.ApiKeyResponse_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Impl.Fetch_Api_Key
            (Username,
             Password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Fetch_Api_Key;

      package API_Create_Drafts is
         new Swagger.Servers.Operation (Handler => Create_Drafts,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/drafts");

      --  Create drafts
      procedure Create_Drafts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Drafts : .Models.Draft_Type_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "drafts", Drafts);
         Impl.Create_Drafts
            (Drafts, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Drafts;

      package API_Delete_Draft is
         new Swagger.Servers.Operation (Handler => Delete_Draft,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/drafts/{draft_id}");

      --  Delete a draft
      procedure Delete_Draft
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Draft_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Draft_Id);
         Impl.Delete_Draft
            (Draft_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Draft;

      package API_Edit_Draft is
         new Swagger.Servers.Operation (Handler => Edit_Draft,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/drafts/{draft_id}");

      --  Edit a draft
      procedure Edit_Draft
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Draft_Id : Integer;
         Draft : .Models.Draft_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "draft", Draft);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Draft_Id);
         Impl.Edit_Draft
            (Draft_Id,
             Draft, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Edit_Draft;

      package API_Get_Drafts is
         new Swagger.Servers.Operation (Handler => Get_Drafts,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/drafts");

      --  Get drafts
      procedure Get_Drafts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Impl.Get_Drafts (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Drafts;

      package API_Add_Reaction is
         new Swagger.Servers.Operation (Handler => Add_Reaction,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/{message_id}/reactions");

      --  Add an emoji reaction
      procedure Add_Reaction
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Emoji_Name : Swagger.UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Add_Reaction
            (Message_Id,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Reaction;

      package API_Check_Messages_Match_Narrow is
         new Swagger.Servers.Operation (Handler => Check_Messages_Match_Narrow,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/matches_narrow");

      --  Check if messages match a narrow
      procedure Check_Messages_Match_Narrow
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Msg_Ids : Integer_Vectors.Vector;
         Narrow : Swagger.Object_Vectors.Vector;
         Result : .Models.AnyType_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "msg_ids", Msg_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Impl.Check_Messages_Match_Narrow
            (Msg_Ids,
             Narrow, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Check_Messages_Match_Narrow;

      package API_Delete_Message is
         new Swagger.Servers.Operation (Handler => Delete_Message,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Delete a message
      procedure Delete_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Delete_Message
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Message;

      package API_Get_File_Temporary_Url is
         new Swagger.Servers.Operation (Handler => Get_File_Temporary_Url,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_uploads/{realm_id_str}/{filename}");

      --  Get public temporary URL
      procedure Get_File_Temporary_Url
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Realm_Id_Str : Integer;
         Filename : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Realm_Id_Str);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Filename);
         Impl.Get_File_Temporary_Url
            (Realm_Id_Str,
             Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_File_Temporary_Url;

      package API_Get_Message_History is
         new Swagger.Servers.Operation (Handler => Get_Message_History,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/{message_id}/history");

      --  Get a message's edit history
      procedure Get_Message_History
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Get_Message_History
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Message_History;

      package API_Get_Messages is
         new Swagger.Servers.Operation (Handler => Get_Messages,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages");

      --  Get messages
      procedure Get_Messages
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Num_Before : Integer;
         Num_After : Integer;
         Anchor : .Models.OneOfstringinteger_Type;
         Narrow : Swagger.Object_Vectors.Vector;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Apply_Markdown : Swagger.Nullable_Boolean;
         Use_First_Unread_Anchor : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "anchor", Anchor);
         Swagger.Servers.Get_Query_Parameter (Req, "num_before", Num_Before);
         Swagger.Servers.Get_Query_Parameter (Req, "num_after", Num_After);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "apply_markdown", Apply_Markdown);
         Swagger.Servers.Get_Query_Parameter (Req, "use_first_unread_anchor", Use_First_Unread_Anchor);
         Impl.Get_Messages
            (Num_Before,
             Num_After,
             Anchor,
             Narrow,
             Client_Gravatar,
             Apply_Markdown,
             Use_First_Unread_Anchor, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Messages;

      package API_Get_Raw_Message is
         new Swagger.Servers.Operation (Handler => Get_Raw_Message,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Get a message's raw Markdown
      procedure Get_Raw_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Get_Raw_Message
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Raw_Message;

      package API_Mark_All_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_All_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_all_as_read");

      --  Mark all messages as read
      procedure Mark_All_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Impl.Mark_All_As_Read (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_All_As_Read;

      package API_Mark_Stream_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_Stream_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_stream_as_read");

      --  Mark messages in a stream as read
      procedure Mark_Stream_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Impl.Mark_Stream_As_Read
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_Stream_As_Read;

      package API_Mark_Topic_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_Topic_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_topic_as_read");

      --  Mark messages in a topic as read
      procedure Mark_Topic_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Topic_Name : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "topic_name", Topic_Name);
         Impl.Mark_Topic_As_Read
            (Stream_Id,
             Topic_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_Topic_As_Read;

      package API_Remove_Reaction is
         new Swagger.Servers.Operation (Handler => Remove_Reaction,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/messages/{message_id}/reactions");

      --  Remove an emoji reaction
      procedure Remove_Reaction
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Emoji_Name : Swagger.Nullable_UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Remove_Reaction
            (Message_Id,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Reaction;

      package API_Render_Message is
         new Swagger.Servers.Operation (Handler => Render_Message,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/render");

      --  Render message
      procedure Render_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Content : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Impl.Render_Message
            (Content, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Render_Message;

      package API_Send_Message is
         new Swagger.Servers.Operation (Handler => Send_Message,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages");

      --  Send a message
      procedure Send_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         P_Type : Swagger.UString;
         To : Integer_Vectors.Vector;
         Content : Swagger.UString;
         Topic : Swagger.Nullable_UString;
         Queue_Id : Swagger.Nullable_UString;
         Local_Id : Swagger.Nullable_UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "to", To);
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "local_id", Local_Id);
         Impl.Send_Message
            (P_Type,
             To,
             Content,
             Topic,
             Queue_Id,
             Local_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Send_Message;

      package API_Update_Message is
         new Swagger.Servers.Operation (Handler => Update_Message,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Edit a message
      procedure Update_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Message_Id : Integer;
         Topic : Swagger.Nullable_UString;
         Propagate_Mode : Swagger.Nullable_UString;
         Send_Notification_To_Old_Thread : Swagger.Nullable_Boolean;
         Send_Notification_To_New_Thread : Swagger.Nullable_Boolean;
         Content : Swagger.Nullable_UString;
         Stream_Id : Swagger.Nullable_Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "propagate_mode", Propagate_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "send_notification_to_old_thread", Send_Notification_To_Old_Thread);
         Swagger.Servers.Get_Query_Parameter (Req, "send_notification_to_new_thread", Send_Notification_To_New_Thread);
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Impl.Update_Message
            (Message_Id,
             Topic,
             Propagate_Mode,
             Send_Notification_To_Old_Thread,
             Send_Notification_To_New_Thread,
             Content,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Message;

      package API_Update_Message_Flags is
         new Swagger.Servers.Operation (Handler => Update_Message_Flags,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/flags");

      --  Update personal message flags
      procedure Update_Message_Flags
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Messages : Integer_Vectors.Vector;
         Op : Swagger.UString;
         Flag : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "messages", Messages);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Swagger.Servers.Get_Query_Parameter (Req, "flag", Flag);
         Impl.Update_Message_Flags
            (Messages,
             Op,
             Flag, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Message_Flags;

      package API_Upload_File is
         new Swagger.Servers.Operation (Handler => Upload_File,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_uploads");

      --  Upload a file
      procedure Upload_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Filename : Swagger.File_Part_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Parameter (Context, "filename", Filename);
         Impl.Upload_File
            (Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Upload_File;

      package API_Delete_Queue is
         new Swagger.Servers.Operation (Handler => Delete_Queue,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/events");

      --  Delete an event queue
      procedure Delete_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Queue_Id : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Impl.Delete_Queue
            (Queue_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Queue;

      package API_Get_Events is
         new Swagger.Servers.Operation (Handler => Get_Events,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/events");

      --  Get events from an event queue
      procedure Get_Events
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Queue_Id : Swagger.UString;
         Last_Event_Id : Swagger.Nullable_Integer;
         Dont_Block : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "last_event_id", Last_Event_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "dont_block", Dont_Block);
         Impl.Get_Events
            (Queue_Id,
             Last_Event_Id,
             Dont_Block, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Events;

      package API_Real_Time_Post is
         new Swagger.Servers.Operation (Handler => Real_Time_Post,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/real-time");

      --  
      procedure Real_Time_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Event_Types : Swagger.UString_Vectors.Vector;
         Narrow : Swagger.UString_Vectors.Vector_Vectors.Vector;
         All_Public_Streams : Swagger.Nullable_Boolean;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "event_types", Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Swagger.Servers.Get_Query_Parameter (Req, "all_public_streams", All_Public_Streams);
         Impl.Real_Time_Post
            (Event_Types,
             Narrow,
             All_Public_Streams, Context);

      end Real_Time_Post;

      package API_Register_Queue is
         new Swagger.Servers.Operation (Handler => Register_Queue,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/register");

      --  Register an event queue
      procedure Register_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Apply_Markdown : Swagger.Nullable_Boolean;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Slim_Presence : Swagger.Nullable_Boolean;
         Event_Types : Swagger.UString_Vectors.Vector;
         All_Public_Streams : Swagger.Nullable_Boolean;
         Include_Subscribers : Swagger.Nullable_Boolean;
         Client_Capabilities : Swagger.Object;
         Fetch_Event_Types : Swagger.UString_Vectors.Vector;
         Narrow : Swagger.UString_Vectors.Vector_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "apply_markdown", Apply_Markdown);
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "slim_presence", Slim_Presence);
         Swagger.Servers.Get_Query_Parameter (Req, "event_types", Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "all_public_streams", All_Public_Streams);
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribers", Include_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "client_capabilities", Client_Capabilities);
         Swagger.Servers.Get_Query_Parameter (Req, "fetch_event_types", Fetch_Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Impl.Register_Queue
            (Apply_Markdown,
             Client_Gravatar,
             Slim_Presence,
             Event_Types,
             All_Public_Streams,
             Include_Subscribers,
             Client_Capabilities,
             Fetch_Event_Types,
             Narrow, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Register_Queue;

      package API_Rest_Error_Handling is
         new Swagger.Servers.Operation (Handler => Rest_Error_Handling,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/rest-error-handling");

      --  Error handling
      procedure Rest_Error_Handling
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         Impl.Rest_Error_Handling (Context);

      end Rest_Error_Handling;

      package API_Add_Code_Playground is
         new Swagger.Servers.Operation (Handler => Add_Code_Playground,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/playgrounds");

      --  Add a code playground
      procedure Add_Code_Playground
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Pygments_Language : Swagger.UString;
         Url_Prefix : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "pygments_language", Pygments_Language);
         Swagger.Servers.Get_Query_Parameter (Req, "url_prefix", Url_Prefix);
         Impl.Add_Code_Playground
            (Name,
             Pygments_Language,
             Url_Prefix, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Code_Playground;

      package API_Add_Linkifier is
         new Swagger.Servers.Operation (Handler => Add_Linkifier,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/filters");

      --  Add a linkifier
      procedure Add_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Pattern : Swagger.UString;
         Url_Format_String : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pattern", Pattern);
         Swagger.Servers.Get_Query_Parameter (Req, "url_format_string", Url_Format_String);
         Impl.Add_Linkifier
            (Pattern,
             Url_Format_String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Linkifier;

      package API_Create_Custom_Profile_Field is
         new Swagger.Servers.Operation (Handler => Create_Custom_Profile_Field,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Create a custom profile field
      procedure Create_Custom_Profile_Field
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Field_Type : Integer;
         Name : Swagger.Nullable_UString;
         Hint : Swagger.Nullable_UString;
         Field_Data : Swagger.Object;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "hint", Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "field_type", Field_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "field_data", Field_Data);
         Impl.Create_Custom_Profile_Field
            (Field_Type,
             Name,
             Hint,
             Field_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Custom_Profile_Field;

      package API_Get_Custom_Emoji is
         new Swagger.Servers.Operation (Handler => Get_Custom_Emoji,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/emoji");

      --  Get all custom emoji
      procedure Get_Custom_Emoji
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Custom_Emoji (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Custom_Emoji;

      package API_Get_Custom_Profile_Fields is
         new Swagger.Servers.Operation (Handler => Get_Custom_Profile_Fields,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Get all custom profile fields
      procedure Get_Custom_Profile_Fields
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Custom_Profile_Fields (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Custom_Profile_Fields;

      package API_Get_Linkifiers is
         new Swagger.Servers.Operation (Handler => Get_Linkifiers,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/linkifiers");

      --  Get linkifiers
      procedure Get_Linkifiers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Linkifiers (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Linkifiers;

      package API_Get_Server_Settings is
         new Swagger.Servers.Operation (Handler => Get_Server_Settings,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/server_settings");

      --  Get server settings
      procedure Get_Server_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Server_Settings (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Server_Settings;

      package API_Remove_Code_Playground is
         new Swagger.Servers.Operation (Handler => Remove_Code_Playground,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/realm/playgrounds/{playground_id}");

      --  Remove a code playground
      procedure Remove_Code_Playground
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Playground_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Playground_Id);
         Impl.Remove_Code_Playground
            (Playground_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Code_Playground;

      package API_Remove_Linkifier is
         new Swagger.Servers.Operation (Handler => Remove_Linkifier,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/realm/filters/{filter_id}");

      --  Remove a linkifier
      procedure Remove_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Filter_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Filter_Id);
         Impl.Remove_Linkifier
            (Filter_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Linkifier;

      package API_Reorder_Custom_Profile_Fields is
         new Swagger.Servers.Operation (Handler => Reorder_Custom_Profile_Fields,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Reorder custom profile fields
      procedure Reorder_Custom_Profile_Fields
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Order : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Impl.Reorder_Custom_Profile_Fields
            (Order, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Reorder_Custom_Profile_Fields;

      package API_Update_Linkifier is
         new Swagger.Servers.Operation (Handler => Update_Linkifier,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/realm/filters/{filter_id}");

      --  Update a linkifier
      procedure Update_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Filter_Id : Integer;
         Pattern : Swagger.UString;
         Url_Format_String : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pattern", Pattern);
         Swagger.Servers.Get_Query_Parameter (Req, "url_format_string", Url_Format_String);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Filter_Id);
         Impl.Update_Linkifier
            (Filter_Id,
             Pattern,
             Url_Format_String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Linkifier;

      package API_Upload_Custom_Emoji is
         new Swagger.Servers.Operation (Handler => Upload_Custom_Emoji,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/emoji/{emoji_name}");

      --  Upload custom emoji
      procedure Upload_Custom_Emoji
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Emoji_Name : Swagger.UString;
         Filename : Swagger.File_Part_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Emoji_Name);
         Swagger.Servers.Get_Parameter (Context, "filename", Filename);
         Impl.Upload_Custom_Emoji
            (Emoji_Name,
             Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Upload_Custom_Emoji;

      package API_Archive_Stream is
         new Swagger.Servers.Operation (Handler => Archive_Stream,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/streams/{stream_id}");

      --  Archive a stream
      procedure Archive_Stream
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Impl.Archive_Stream
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Archive_Stream;

      package API_Create_Big_Blue_Button_Video_Call is
         new Swagger.Servers.Operation (Handler => Create_Big_Blue_Button_Video_Call,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/calls/bigbluebutton/create");

      --  Create BigBlueButton video call
      procedure Create_Big_Blue_Button_Video_Call
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Create_Big_Blue_Button_Video_Call (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Big_Blue_Button_Video_Call;

      package API_Delete_Topic is
         new Swagger.Servers.Operation (Handler => Delete_Topic,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/streams/{stream_id}/delete_topic");

      --  Delete a topic
      procedure Delete_Topic
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Topic_Name : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "topic_name", Topic_Name);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Impl.Delete_Topic
            (Stream_Id,
             Topic_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Topic;

      package API_Get_Stream_Id is
         new Swagger.Servers.Operation (Handler => Get_Stream_Id,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/get_stream_id");

      --  Get stream ID
      procedure Get_Stream_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream", Stream);
         Impl.Get_Stream_Id
            (Stream, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Stream_Id;

      package API_Get_Stream_Topics is
         new Swagger.Servers.Operation (Handler => Get_Stream_Topics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me/{stream_id}/topics");

      --  Get topics in a stream
      procedure Get_Stream_Topics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Impl.Get_Stream_Topics
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Stream_Topics;

      package API_Get_Streams is
         new Swagger.Servers.Operation (Handler => Get_Streams,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/streams");

      --  Get all streams
      procedure Get_Streams
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Include_Public : Swagger.Nullable_Boolean;
         Include_Web_Public : Swagger.Nullable_Boolean;
         Include_Subscribed : Swagger.Nullable_Boolean;
         Include_All_Active : Swagger.Nullable_Boolean;
         Include_Default : Swagger.Nullable_Boolean;
         Include_Owner_Subscribed : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "include_public", Include_Public);
         Swagger.Servers.Get_Query_Parameter (Req, "include_web_public", Include_Web_Public);
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribed", Include_Subscribed);
         Swagger.Servers.Get_Query_Parameter (Req, "include_all_active", Include_All_Active);
         Swagger.Servers.Get_Query_Parameter (Req, "include_default", Include_Default);
         Swagger.Servers.Get_Query_Parameter (Req, "include_owner_subscribed", Include_Owner_Subscribed);
         Impl.Get_Streams
            (Include_Public,
             Include_Web_Public,
             Include_Subscribed,
             Include_All_Active,
             Include_Default,
             Include_Owner_Subscribed, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Streams;

      package API_Get_Subscribers is
         new Swagger.Servers.Operation (Handler => Get_Subscribers,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/streams/{stream_id}/members");

      --  Get the subscribers of a stream
      procedure Get_Subscribers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Impl.Get_Subscribers
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscribers;

      package API_Get_Subscription_Status is
         new Swagger.Servers.Operation (Handler => Get_Subscription_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id}/subscriptions/{stream_id}");

      --  Get subscription status
      procedure Get_Subscription_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id : Integer;
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Stream_Id);
         Impl.Get_Subscription_Status
            (User_Id,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscription_Status;

      package API_Get_Subscriptions is
         new Swagger.Servers.Operation (Handler => Get_Subscriptions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Get subscribed streams
      procedure Get_Subscriptions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Include_Subscribers : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribers", Include_Subscribers);
         Impl.Get_Subscriptions
            (Include_Subscribers, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscriptions;

      package API_Mute_Topic is
         new Swagger.Servers.Operation (Handler => Mute_Topic,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/me/subscriptions/muted_topics");

      --  Topic muting
      procedure Mute_Topic
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Topic : Swagger.UString;
         Op : Swagger.UString;
         Stream : Swagger.Nullable_UString;
         Stream_Id : Swagger.Nullable_Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream", Stream);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Impl.Mute_Topic
            (Topic,
             Op,
             Stream,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mute_Topic;

      package API_Subscribe is
         new Swagger.Servers.Operation (Handler => Subscribe,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Subscribe to a stream
      procedure Subscribe
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Subscriptions : Swagger.Object_Vectors.Vector;
         Principals : .Models.OneOfstringinteger_Type_Vectors.Vector;
         Authorization_Errors_Fatal : Swagger.Nullable_Boolean;
         Announce : Swagger.Nullable_Boolean;
         Invite_Only : Swagger.Nullable_Boolean;
         History_Public_To_Subscribers : Swagger.Nullable_Boolean;
         Stream_Post_Policy : Swagger.Nullable_Integer;
         Message_Retention_Days : .Models.OneOfstringinteger_Type;
         Result : .Models.OneOfobjectobject_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscriptions", Subscriptions);
         Swagger.Servers.Get_Query_Parameter (Req, "principals", Principals);
         Swagger.Servers.Get_Query_Parameter (Req, "authorization_errors_fatal", Authorization_Errors_Fatal);
         Swagger.Servers.Get_Query_Parameter (Req, "announce", Announce);
         Swagger.Servers.Get_Query_Parameter (Req, "invite_only", Invite_Only);
         Swagger.Servers.Get_Query_Parameter (Req, "history_public_to_subscribers", History_Public_To_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_post_policy", Stream_Post_Policy);
         Swagger.Servers.Get_Query_Parameter (Req, "message_retention_days", Message_Retention_Days);
         Impl.Subscribe
            (Subscriptions,
             Principals,
             Authorization_Errors_Fatal,
             Announce,
             Invite_Only,
             History_Public_To_Subscribers,
             Stream_Post_Policy,
             Message_Retention_Days, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Subscribe;

      package API_Unsubscribe is
         new Swagger.Servers.Operation (Handler => Unsubscribe,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Unsubscribe from a stream
      procedure Unsubscribe
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Subscriptions : Swagger.UString_Vectors.Vector;
         Principals : .Models.OneOfstringinteger_Type_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscriptions", Subscriptions);
         Swagger.Servers.Get_Query_Parameter (Req, "principals", Principals);
         Impl.Unsubscribe
            (Subscriptions,
             Principals, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Unsubscribe;

      package API_Update_Stream is
         new Swagger.Servers.Operation (Handler => Update_Stream,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/streams/{stream_id}");

      --  Update a stream
      procedure Update_Stream
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Stream_Id : Integer;
         Description : Swagger.Nullable_UString;
         New_Name : Swagger.Nullable_UString;
         Is_Private : Swagger.Nullable_Boolean;
         Is_Announcement_Only : Swagger.Nullable_Boolean;
         Stream_Post_Policy : Swagger.Nullable_Integer;
         History_Public_To_Subscribers : Swagger.Nullable_Boolean;
         Message_Retention_Days : .Models.OneOfstringinteger_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Query_Parameter (Req, "new_name", New_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "is_private", Is_Private);
         Swagger.Servers.Get_Query_Parameter (Req, "is_announcement_only", Is_Announcement_Only);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_post_policy", Stream_Post_Policy);
         Swagger.Servers.Get_Query_Parameter (Req, "history_public_to_subscribers", History_Public_To_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "message_retention_days", Message_Retention_Days);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Impl.Update_Stream
            (Stream_Id,
             Description,
             New_Name,
             Is_Private,
             Is_Announcement_Only,
             Stream_Post_Policy,
             History_Public_To_Subscribers,
             Message_Retention_Days, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Stream;

      package API_Update_Subscription_Settings is
         new Swagger.Servers.Operation (Handler => Update_Subscription_Settings,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/subscriptions/properties");

      --  Update subscription settings
      procedure Update_Subscription_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Subscription_Data : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscription_data", Subscription_Data);
         Impl.Update_Subscription_Settings
            (Subscription_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Subscription_Settings;

      package API_Update_Subscriptions is
         new Swagger.Servers.Operation (Handler => Update_Subscriptions,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Update subscriptions
      procedure Update_Subscriptions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Delete : Swagger.UString_Vectors.Vector;
         Add : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "add", Add);
         Impl.Update_Subscriptions
            (Delete,
             Add, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Subscriptions;

      package API_Create_User is
         new Swagger.Servers.Operation (Handler => Create_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users");

      --  Create a user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Email : Swagger.UString;
         Password : Swagger.UString;
         Full_Name : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "email", Email);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Impl.Create_User
            (Email,
             Password,
             Full_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User;

      package API_Create_User_Group is
         new Swagger.Servers.Operation (Handler => Create_User_Group,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_groups/create");

      --  Create a user group
      procedure Create_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Description : Swagger.UString;
         Members : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Query_Parameter (Req, "members", Members);
         Impl.Create_User_Group
            (Name,
             Description,
             Members, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User_Group;

      package API_Deactivate_Own_User is
         new Swagger.Servers.Operation (Handler => Deactivate_Own_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me");

      --  Deactivate own user
      procedure Deactivate_Own_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Impl.Deactivate_Own_User (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Deactivate_Own_User;

      package API_Deactivate_User is
         new Swagger.Servers.Operation (Handler => Deactivate_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Deactivate a user
      procedure Deactivate_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Impl.Deactivate_User
            (User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Deactivate_User;

      package API_Get_Attachments is
         new Swagger.Servers.Operation (Handler => Get_Attachments,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/attachments");

      --  Get attachments
      procedure Get_Attachments
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Attachments (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Attachments;

      package API_Get_Own_User is
         new Swagger.Servers.Operation (Handler => Get_Own_User,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me");

      --  Get own user
      procedure Get_Own_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_Own_User (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Own_User;

      package API_Get_User is
         new Swagger.Servers.Operation (Handler => Get_User,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Get a user
      procedure Get_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id : Integer;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Impl.Get_User
            (User_Id,
             Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User;

      package API_Get_User_By_Email is
         new Swagger.Servers.Operation (Handler => Get_User_By_Email,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{email}");

      --  Get a user by email
      procedure Get_User_By_Email
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Email : Swagger.UString;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Email);
         Impl.Get_User_By_Email
            (Email,
             Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_By_Email;

      package API_Get_User_Groups is
         new Swagger.Servers.Operation (Handler => Get_User_Groups,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_groups");

      --  Get user groups
      procedure Get_User_Groups
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Impl.Get_User_Groups (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_Groups;

      package API_Get_User_Presence is
         new Swagger.Servers.Operation (Handler => Get_User_Presence,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id_or_email}/presence");

      --  Get user presence
      procedure Get_User_Presence
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id_Or_Email : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id_Or_Email);
         Impl.Get_User_Presence
            (User_Id_Or_Email, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_Presence;

      package API_Get_Users is
         new Swagger.Servers.Operation (Handler => Get_Users,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users");

      --  Get all users
      procedure Get_Users
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Impl.Get_Users
            (Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Users;

      package API_Mute_User is
         new Swagger.Servers.Operation (Handler => Mute_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/muted_users/{muted_user_id}");

      --  Mute a user
      procedure Mute_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Muted_User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Muted_User_Id);
         Impl.Mute_User
            (Muted_User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mute_User;

      package API_Reactivate_User is
         new Swagger.Servers.Operation (Handler => Reactivate_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/{user_id}/reactivate");

      --  Reactivate a user
      procedure Reactivate_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id : Integer;
         Result : .Models.AnyType_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Impl.Reactivate_User
            (User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Reactivate_User;

      package API_Remove_User_Group is
         new Swagger.Servers.Operation (Handler => Remove_User_Group,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}");

      --  Delete a user group
      procedure Remove_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Group_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Impl.Remove_User_Group
            (User_Group_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_User_Group;

      package API_Set_Typing_Status is
         new Swagger.Servers.Operation (Handler => Set_Typing_Status,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/typing");

      --  Set \"typing\" status
      procedure Set_Typing_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Op : Swagger.UString;
         To : Integer_Vectors.Vector;
         P_Type : Swagger.Nullable_UString;
         Topic : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Swagger.Servers.Get_Query_Parameter (Req, "to", To);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Impl.Set_Typing_Status
            (Op,
             To,
             P_Type,
             Topic, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Set_Typing_Status;

      package API_Unmute_User is
         new Swagger.Servers.Operation (Handler => Unmute_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me/muted_users/{muted_user_id}");

      --  Unmute a user
      procedure Unmute_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Muted_User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Muted_User_Id);
         Impl.Unmute_User
            (Muted_User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Unmute_User;

      package API_Update_Settings is
         new Swagger.Servers.Operation (Handler => Update_Settings,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/settings");

      --  Update settings
      procedure Update_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Full_Name : Swagger.Nullable_UString;
         Email : Swagger.Nullable_UString;
         Old_Password : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Twenty_Four_Hour_Time : Swagger.Nullable_Boolean;
         Dense_Mode : Swagger.Nullable_Boolean;
         Starred_Message_Counts : Swagger.Nullable_Boolean;
         Fluid_Layout_Width : Swagger.Nullable_Boolean;
         High_Contrast_Mode : Swagger.Nullable_Boolean;
         Color_Scheme : Swagger.Nullable_Integer;
         Enable_Drafts_Synchronization : Swagger.Nullable_Boolean;
         Translate_Emoticons : Swagger.Nullable_Boolean;
         Default_Language : Swagger.Nullable_UString;
         Default_View : Swagger.Nullable_UString;
         Left_Side_Userlist : Swagger.Nullable_Boolean;
         Emojiset : Swagger.Nullable_UString;
         Demote_Inactive_Streams : Swagger.Nullable_Integer;
         Timezone : Swagger.Nullable_UString;
         Enable_Stream_Desktop_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Email_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Audible_Notifications : Swagger.Nullable_Boolean;
         Notification_Sound : Swagger.Nullable_UString;
         Enable_Desktop_Notifications : Swagger.Nullable_Boolean;
         Enable_Sounds : Swagger.Nullable_Boolean;
         Email_Notifications_Batching_Period_Seconds : Swagger.Nullable_Integer;
         Enable_Offline_Email_Notifications : Swagger.Nullable_Boolean;
         Enable_Offline_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Online_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Digest_Emails : Swagger.Nullable_Boolean;
         Enable_Marketing_Emails : Swagger.Nullable_Boolean;
         Enable_Login_Emails : Swagger.Nullable_Boolean;
         Message_Content_In_Email_Notifications : Swagger.Nullable_Boolean;
         Pm_Content_In_Desktop_Notifications : Swagger.Nullable_Boolean;
         Wildcard_Mentions_Notify : Swagger.Nullable_Boolean;
         Desktop_Icon_Count_Display : Swagger.Nullable_Integer;
         Realm_Name_In_Notifications : Swagger.Nullable_Boolean;
         Presence_Enabled : Swagger.Nullable_Boolean;
         Enter_Sends : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "email", Email);
         Swagger.Servers.Get_Query_Parameter (Req, "old_password", Old_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "new_password", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "twenty_four_hour_time", Twenty_Four_Hour_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "dense_mode", Dense_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "starred_message_counts", Starred_Message_Counts);
         Swagger.Servers.Get_Query_Parameter (Req, "fluid_layout_width", Fluid_Layout_Width);
         Swagger.Servers.Get_Query_Parameter (Req, "high_contrast_mode", High_Contrast_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "color_scheme", Color_Scheme);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_drafts_synchronization", Enable_Drafts_Synchronization);
         Swagger.Servers.Get_Query_Parameter (Req, "translate_emoticons", Translate_Emoticons);
         Swagger.Servers.Get_Query_Parameter (Req, "default_language", Default_Language);
         Swagger.Servers.Get_Query_Parameter (Req, "default_view", Default_View);
         Swagger.Servers.Get_Query_Parameter (Req, "left_side_userlist", Left_Side_Userlist);
         Swagger.Servers.Get_Query_Parameter (Req, "emojiset", Emojiset);
         Swagger.Servers.Get_Query_Parameter (Req, "demote_inactive_streams", Demote_Inactive_Streams);
         Swagger.Servers.Get_Query_Parameter (Req, "timezone", Timezone);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_desktop_notifications", Enable_Stream_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_email_notifications", Enable_Stream_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_push_notifications", Enable_Stream_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_audible_notifications", Enable_Stream_Audible_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "notification_sound", Notification_Sound);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_desktop_notifications", Enable_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_sounds", Enable_Sounds);
         Swagger.Servers.Get_Query_Parameter (Req, "email_notifications_batching_period_seconds", Email_Notifications_Batching_Period_Seconds);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_offline_email_notifications", Enable_Offline_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_offline_push_notifications", Enable_Offline_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_online_push_notifications", Enable_Online_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_digest_emails", Enable_Digest_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_marketing_emails", Enable_Marketing_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_login_emails", Enable_Login_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "message_content_in_email_notifications", Message_Content_In_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "pm_content_in_desktop_notifications", Pm_Content_In_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "wildcard_mentions_notify", Wildcard_Mentions_Notify);
         Swagger.Servers.Get_Query_Parameter (Req, "desktop_icon_count_display", Desktop_Icon_Count_Display);
         Swagger.Servers.Get_Query_Parameter (Req, "realm_name_in_notifications", Realm_Name_In_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "presence_enabled", Presence_Enabled);
         Swagger.Servers.Get_Query_Parameter (Req, "enter_sends", Enter_Sends);
         Impl.Update_Settings
            (Full_Name,
             Email,
             Old_Password,
             New_Password,
             Twenty_Four_Hour_Time,
             Dense_Mode,
             Starred_Message_Counts,
             Fluid_Layout_Width,
             High_Contrast_Mode,
             Color_Scheme,
             Enable_Drafts_Synchronization,
             Translate_Emoticons,
             Default_Language,
             Default_View,
             Left_Side_Userlist,
             Emojiset,
             Demote_Inactive_Streams,
             Timezone,
             Enable_Stream_Desktop_Notifications,
             Enable_Stream_Email_Notifications,
             Enable_Stream_Push_Notifications,
             Enable_Stream_Audible_Notifications,
             Notification_Sound,
             Enable_Desktop_Notifications,
             Enable_Sounds,
             Email_Notifications_Batching_Period_Seconds,
             Enable_Offline_Email_Notifications,
             Enable_Offline_Push_Notifications,
             Enable_Online_Push_Notifications,
             Enable_Digest_Emails,
             Enable_Marketing_Emails,
             Enable_Login_Emails,
             Message_Content_In_Email_Notifications,
             Pm_Content_In_Desktop_Notifications,
             Wildcard_Mentions_Notify,
             Desktop_Icon_Count_Display,
             Realm_Name_In_Notifications,
             Presence_Enabled,
             Enter_Sends, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Settings;

      package API_Update_Status is
         new Swagger.Servers.Operation (Handler => Update_Status,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/status");

      --  Update your status
      procedure Update_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Status_Text : Swagger.Nullable_UString;
         Away : Swagger.Nullable_Boolean;
         Emoji_Name : Swagger.Nullable_UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "status_text", Status_Text);
         Swagger.Servers.Get_Query_Parameter (Req, "away", Away);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Impl.Update_Status
            (Status_Text,
             Away,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Status;

      package API_Update_User is
         new Swagger.Servers.Operation (Handler => Update_User,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Update a user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Id : Integer;
         Full_Name : Swagger.Nullable_UString;
         Role : Swagger.Nullable_Integer;
         Profile_Data : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "role", Role);
         Swagger.Servers.Get_Query_Parameter (Req, "profile_data", Profile_Data);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Impl.Update_User
            (User_Id,
             Full_Name,
             Role,
             Profile_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User;

      package API_Update_User_Group is
         new Swagger.Servers.Operation (Handler => Update_User_Group,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}");

      --  Update a user group
      procedure Update_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Group_Id : Integer;
         Name : Swagger.UString;
         Description : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Impl.Update_User_Group
            (User_Group_Id,
             Name,
             Description, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User_Group;

      package API_Update_User_Group_Members is
         new Swagger.Servers.Operation (Handler => Update_User_Group_Members,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}/members");

      --  Update user group members
      procedure Update_User_Group_Members
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User_Group_Id : Integer;
         Delete : Integer_Vectors.Vector;
         Add : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "add", Add);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Impl.Update_User_Group_Members
            (User_Group_Id,
             Delete,
             Add, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User_Group_Members;

      package API_Zulip_Outgoing_Webhooks is
         new Swagger.Servers.Operation (Handler => Zulip_Outgoing_Webhooks,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/zulip-outgoing-webhook");

      --  Outgoing webhooks
      procedure Zulip_Outgoing_Webhooks
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.InlineResponse200_Type;
      begin
         Impl.Zulip_Outgoing_Webhooks (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Zulip_Outgoing_Webhooks;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Dev_Fetch_Api_Key.Definition);
         Swagger.Servers.Register (Server, API_Fetch_Api_Key.Definition);
         Swagger.Servers.Register (Server, API_Create_Drafts.Definition);
         Swagger.Servers.Register (Server, API_Delete_Draft.Definition);
         Swagger.Servers.Register (Server, API_Edit_Draft.Definition);
         Swagger.Servers.Register (Server, API_Get_Drafts.Definition);
         Swagger.Servers.Register (Server, API_Add_Reaction.Definition);
         Swagger.Servers.Register (Server, API_Check_Messages_Match_Narrow.Definition);
         Swagger.Servers.Register (Server, API_Delete_Message.Definition);
         Swagger.Servers.Register (Server, API_Get_File_Temporary_Url.Definition);
         Swagger.Servers.Register (Server, API_Get_Message_History.Definition);
         Swagger.Servers.Register (Server, API_Get_Messages.Definition);
         Swagger.Servers.Register (Server, API_Get_Raw_Message.Definition);
         Swagger.Servers.Register (Server, API_Mark_All_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Mark_Stream_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Mark_Topic_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Remove_Reaction.Definition);
         Swagger.Servers.Register (Server, API_Render_Message.Definition);
         Swagger.Servers.Register (Server, API_Send_Message.Definition);
         Swagger.Servers.Register (Server, API_Update_Message.Definition);
         Swagger.Servers.Register (Server, API_Update_Message_Flags.Definition);
         Swagger.Servers.Register (Server, API_Upload_File.Definition);
         Swagger.Servers.Register (Server, API_Delete_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Events.Definition);
         Swagger.Servers.Register (Server, API_Real_Time_Post.Definition);
         Swagger.Servers.Register (Server, API_Register_Queue.Definition);
         Swagger.Servers.Register (Server, API_Rest_Error_Handling.Definition);
         Swagger.Servers.Register (Server, API_Add_Code_Playground.Definition);
         Swagger.Servers.Register (Server, API_Add_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Create_Custom_Profile_Field.Definition);
         Swagger.Servers.Register (Server, API_Get_Custom_Emoji.Definition);
         Swagger.Servers.Register (Server, API_Get_Custom_Profile_Fields.Definition);
         Swagger.Servers.Register (Server, API_Get_Linkifiers.Definition);
         Swagger.Servers.Register (Server, API_Get_Server_Settings.Definition);
         Swagger.Servers.Register (Server, API_Remove_Code_Playground.Definition);
         Swagger.Servers.Register (Server, API_Remove_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Reorder_Custom_Profile_Fields.Definition);
         Swagger.Servers.Register (Server, API_Update_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Upload_Custom_Emoji.Definition);
         Swagger.Servers.Register (Server, API_Archive_Stream.Definition);
         Swagger.Servers.Register (Server, API_Create_Big_Blue_Button_Video_Call.Definition);
         Swagger.Servers.Register (Server, API_Delete_Topic.Definition);
         Swagger.Servers.Register (Server, API_Get_Stream_Id.Definition);
         Swagger.Servers.Register (Server, API_Get_Stream_Topics.Definition);
         Swagger.Servers.Register (Server, API_Get_Streams.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscribers.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscription_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscriptions.Definition);
         Swagger.Servers.Register (Server, API_Mute_Topic.Definition);
         Swagger.Servers.Register (Server, API_Subscribe.Definition);
         Swagger.Servers.Register (Server, API_Unsubscribe.Definition);
         Swagger.Servers.Register (Server, API_Update_Stream.Definition);
         Swagger.Servers.Register (Server, API_Update_Subscription_Settings.Definition);
         Swagger.Servers.Register (Server, API_Update_Subscriptions.Definition);
         Swagger.Servers.Register (Server, API_Create_User.Definition);
         Swagger.Servers.Register (Server, API_Create_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Deactivate_Own_User.Definition);
         Swagger.Servers.Register (Server, API_Deactivate_User.Definition);
         Swagger.Servers.Register (Server, API_Get_Attachments.Definition);
         Swagger.Servers.Register (Server, API_Get_Own_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_By_Email.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Groups.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Presence.Definition);
         Swagger.Servers.Register (Server, API_Get_Users.Definition);
         Swagger.Servers.Register (Server, API_Mute_User.Definition);
         Swagger.Servers.Register (Server, API_Reactivate_User.Definition);
         Swagger.Servers.Register (Server, API_Remove_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Set_Typing_Status.Definition);
         Swagger.Servers.Register (Server, API_Unmute_User.Definition);
         Swagger.Servers.Register (Server, API_Update_Settings.Definition);
         Swagger.Servers.Register (Server, API_Update_Status.Definition);
         Swagger.Servers.Register (Server, API_Update_User.Definition);
         Swagger.Servers.Register (Server, API_Update_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Update_User_Group_Members.Definition);
         Swagger.Servers.Register (Server, API_Zulip_Outgoing_Webhooks.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  Fetch an API key (development only)
      procedure Dev_Fetch_Api_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
         Result : .Models.ApiKeyResponse_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Server.Dev_Fetch_Api_Key
            (Username, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Dev_Fetch_Api_Key;

      package API_Dev_Fetch_Api_Key is
         new Swagger.Servers.Operation (Handler => Dev_Fetch_Api_Key,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/dev_fetch_api_key");

      --  Fetch an API key (production)
      procedure Fetch_Api_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Username : Swagger.UString;
         Password : Swagger.UString;
         Result : .Models.ApiKeyResponse_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "username", Username);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Server.Fetch_Api_Key
            (Username,
             Password, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Fetch_Api_Key;

      package API_Fetch_Api_Key is
         new Swagger.Servers.Operation (Handler => Fetch_Api_Key,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/fetch_api_key");

      --  Create drafts
      procedure Create_Drafts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Drafts : .Models.Draft_Type_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "drafts", Drafts);
         Server.Create_Drafts
            (Drafts, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Drafts;

      package API_Create_Drafts is
         new Swagger.Servers.Operation (Handler => Create_Drafts,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/drafts");

      --  Delete a draft
      procedure Delete_Draft
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Draft_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Draft_Id);
         Server.Delete_Draft
            (Draft_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Draft;

      package API_Delete_Draft is
         new Swagger.Servers.Operation (Handler => Delete_Draft,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/drafts/{draft_id}");

      --  Edit a draft
      procedure Edit_Draft
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Draft_Id : Integer;
         Draft : .Models.Draft_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "draft", Draft);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Draft_Id);
         Server.Edit_Draft
            (Draft_Id,
             Draft, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Edit_Draft;

      package API_Edit_Draft is
         new Swagger.Servers.Operation (Handler => Edit_Draft,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/drafts/{draft_id}");

      --  Get drafts
      procedure Get_Drafts
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccess_Type;
      begin
         Server.Get_Drafts (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Drafts;

      package API_Get_Drafts is
         new Swagger.Servers.Operation (Handler => Get_Drafts,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/drafts");

      --  Add an emoji reaction
      procedure Add_Reaction
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Emoji_Name : Swagger.UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Add_Reaction
            (Message_Id,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Reaction;

      package API_Add_Reaction is
         new Swagger.Servers.Operation (Handler => Add_Reaction,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/{message_id}/reactions");

      --  Check if messages match a narrow
      procedure Check_Messages_Match_Narrow
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Msg_Ids : Integer_Vectors.Vector;
         Narrow : Swagger.Object_Vectors.Vector;
         Result : .Models.AnyType_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "msg_ids", Msg_Ids);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Server.Check_Messages_Match_Narrow
            (Msg_Ids,
             Narrow, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Check_Messages_Match_Narrow;

      package API_Check_Messages_Match_Narrow is
         new Swagger.Servers.Operation (Handler => Check_Messages_Match_Narrow,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/matches_narrow");

      --  Delete a message
      procedure Delete_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Delete_Message
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Message;

      package API_Delete_Message is
         new Swagger.Servers.Operation (Handler => Delete_Message,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Get public temporary URL
      procedure Get_File_Temporary_Url
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Realm_Id_Str : Integer;
         Filename : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Realm_Id_Str);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Filename);
         Server.Get_File_Temporary_Url
            (Realm_Id_Str,
             Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_File_Temporary_Url;

      package API_Get_File_Temporary_Url is
         new Swagger.Servers.Operation (Handler => Get_File_Temporary_Url,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_uploads/{realm_id_str}/{filename}");

      --  Get a message's edit history
      procedure Get_Message_History
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Get_Message_History
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Message_History;

      package API_Get_Message_History is
         new Swagger.Servers.Operation (Handler => Get_Message_History,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/{message_id}/history");

      --  Get messages
      procedure Get_Messages
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Num_Before : Integer;
         Num_After : Integer;
         Anchor : .Models.OneOfstringinteger_Type;
         Narrow : Swagger.Object_Vectors.Vector;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Apply_Markdown : Swagger.Nullable_Boolean;
         Use_First_Unread_Anchor : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "anchor", Anchor);
         Swagger.Servers.Get_Query_Parameter (Req, "num_before", Num_Before);
         Swagger.Servers.Get_Query_Parameter (Req, "num_after", Num_After);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "apply_markdown", Apply_Markdown);
         Swagger.Servers.Get_Query_Parameter (Req, "use_first_unread_anchor", Use_First_Unread_Anchor);
         Server.Get_Messages
            (Num_Before,
             Num_After,
             Anchor,
             Narrow,
             Client_Gravatar,
             Apply_Markdown,
             Use_First_Unread_Anchor, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Messages;

      package API_Get_Messages is
         new Swagger.Servers.Operation (Handler => Get_Messages,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages");

      --  Get a message's raw Markdown
      procedure Get_Raw_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Get_Raw_Message
            (Message_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Raw_Message;

      package API_Get_Raw_Message is
         new Swagger.Servers.Operation (Handler => Get_Raw_Message,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Mark all messages as read
      procedure Mark_All_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccess_Type;
      begin
         Server.Mark_All_As_Read (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_All_As_Read;

      package API_Mark_All_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_All_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_all_as_read");

      --  Mark messages in a stream as read
      procedure Mark_Stream_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Server.Mark_Stream_As_Read
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_Stream_As_Read;

      package API_Mark_Stream_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_Stream_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_stream_as_read");

      --  Mark messages in a topic as read
      procedure Mark_Topic_As_Read
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Topic_Name : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "topic_name", Topic_Name);
         Server.Mark_Topic_As_Read
            (Stream_Id,
             Topic_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mark_Topic_As_Read;

      package API_Mark_Topic_As_Read is
         new Swagger.Servers.Operation (Handler => Mark_Topic_As_Read,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/mark_topic_as_read");

      --  Remove an emoji reaction
      procedure Remove_Reaction
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Emoji_Name : Swagger.Nullable_UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Remove_Reaction
            (Message_Id,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Reaction;

      package API_Remove_Reaction is
         new Swagger.Servers.Operation (Handler => Remove_Reaction,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/messages/{message_id}/reactions");

      --  Render message
      procedure Render_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Content : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Server.Render_Message
            (Content, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Render_Message;

      package API_Render_Message is
         new Swagger.Servers.Operation (Handler => Render_Message,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/render");

      --  Send a message
      procedure Send_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         P_Type : Swagger.UString;
         To : Integer_Vectors.Vector;
         Content : Swagger.UString;
         Topic : Swagger.Nullable_UString;
         Queue_Id : Swagger.Nullable_UString;
         Local_Id : Swagger.Nullable_UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "to", To);
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "local_id", Local_Id);
         Server.Send_Message
            (P_Type,
             To,
             Content,
             Topic,
             Queue_Id,
             Local_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Send_Message;

      package API_Send_Message is
         new Swagger.Servers.Operation (Handler => Send_Message,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages");

      --  Edit a message
      procedure Update_Message
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Message_Id : Integer;
         Topic : Swagger.Nullable_UString;
         Propagate_Mode : Swagger.Nullable_UString;
         Send_Notification_To_Old_Thread : Swagger.Nullable_Boolean;
         Send_Notification_To_New_Thread : Swagger.Nullable_Boolean;
         Content : Swagger.Nullable_UString;
         Stream_Id : Swagger.Nullable_Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "propagate_mode", Propagate_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "send_notification_to_old_thread", Send_Notification_To_Old_Thread);
         Swagger.Servers.Get_Query_Parameter (Req, "send_notification_to_new_thread", Send_Notification_To_New_Thread);
         Swagger.Servers.Get_Query_Parameter (Req, "content", Content);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Message_Id);
         Server.Update_Message
            (Message_Id,
             Topic,
             Propagate_Mode,
             Send_Notification_To_Old_Thread,
             Send_Notification_To_New_Thread,
             Content,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Message;

      package API_Update_Message is
         new Swagger.Servers.Operation (Handler => Update_Message,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/messages/{message_id}");

      --  Update personal message flags
      procedure Update_Message_Flags
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Messages : Integer_Vectors.Vector;
         Op : Swagger.UString;
         Flag : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "messages", Messages);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Swagger.Servers.Get_Query_Parameter (Req, "flag", Flag);
         Server.Update_Message_Flags
            (Messages,
             Op,
             Flag, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Message_Flags;

      package API_Update_Message_Flags is
         new Swagger.Servers.Operation (Handler => Update_Message_Flags,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/messages/flags");

      --  Upload a file
      procedure Upload_File
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Filename : Swagger.File_Part_Type;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Parameter (Context, "filename", Filename);
         Server.Upload_File
            (Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Upload_File;

      package API_Upload_File is
         new Swagger.Servers.Operation (Handler => Upload_File,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_uploads");

      --  Delete an event queue
      procedure Delete_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Queue_Id : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Server.Delete_Queue
            (Queue_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Queue;

      package API_Delete_Queue is
         new Swagger.Servers.Operation (Handler => Delete_Queue,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/events");

      --  Get events from an event queue
      procedure Get_Events
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Queue_Id : Swagger.UString;
         Last_Event_Id : Swagger.Nullable_Integer;
         Dont_Block : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "queue_id", Queue_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "last_event_id", Last_Event_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "dont_block", Dont_Block);
         Server.Get_Events
            (Queue_Id,
             Last_Event_Id,
             Dont_Block, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Events;

      package API_Get_Events is
         new Swagger.Servers.Operation (Handler => Get_Events,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/events");

      --  
      procedure Real_Time_Post
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Event_Types : Swagger.UString_Vectors.Vector;
         Narrow : Swagger.UString_Vectors.Vector_Vectors.Vector;
         All_Public_Streams : Swagger.Nullable_Boolean;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "event_types", Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Swagger.Servers.Get_Query_Parameter (Req, "all_public_streams", All_Public_Streams);
         Server.Real_Time_Post
            (Event_Types,
             Narrow,
             All_Public_Streams, Context);

      end Real_Time_Post;

      package API_Real_Time_Post is
         new Swagger.Servers.Operation (Handler => Real_Time_Post,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/real-time");

      --  Register an event queue
      procedure Register_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Apply_Markdown : Swagger.Nullable_Boolean;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Slim_Presence : Swagger.Nullable_Boolean;
         Event_Types : Swagger.UString_Vectors.Vector;
         All_Public_Streams : Swagger.Nullable_Boolean;
         Include_Subscribers : Swagger.Nullable_Boolean;
         Client_Capabilities : Swagger.Object;
         Fetch_Event_Types : Swagger.UString_Vectors.Vector;
         Narrow : Swagger.UString_Vectors.Vector_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "apply_markdown", Apply_Markdown);
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "slim_presence", Slim_Presence);
         Swagger.Servers.Get_Query_Parameter (Req, "event_types", Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "all_public_streams", All_Public_Streams);
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribers", Include_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "client_capabilities", Client_Capabilities);
         Swagger.Servers.Get_Query_Parameter (Req, "fetch_event_types", Fetch_Event_Types);
         Swagger.Servers.Get_Query_Parameter (Req, "narrow", Narrow);
         Server.Register_Queue
            (Apply_Markdown,
             Client_Gravatar,
             Slim_Presence,
             Event_Types,
             All_Public_Streams,
             Include_Subscribers,
             Client_Capabilities,
             Fetch_Event_Types,
             Narrow, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Register_Queue;

      package API_Register_Queue is
         new Swagger.Servers.Operation (Handler => Register_Queue,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/register");

      --  Error handling
      procedure Rest_Error_Handling
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         Server.Rest_Error_Handling (Context);

      end Rest_Error_Handling;

      package API_Rest_Error_Handling is
         new Swagger.Servers.Operation (Handler => Rest_Error_Handling,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/rest-error-handling");

      --  Add a code playground
      procedure Add_Code_Playground
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Pygments_Language : Swagger.UString;
         Url_Prefix : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "pygments_language", Pygments_Language);
         Swagger.Servers.Get_Query_Parameter (Req, "url_prefix", Url_Prefix);
         Server.Add_Code_Playground
            (Name,
             Pygments_Language,
             Url_Prefix, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Code_Playground;

      package API_Add_Code_Playground is
         new Swagger.Servers.Operation (Handler => Add_Code_Playground,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/playgrounds");

      --  Add a linkifier
      procedure Add_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Pattern : Swagger.UString;
         Url_Format_String : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pattern", Pattern);
         Swagger.Servers.Get_Query_Parameter (Req, "url_format_string", Url_Format_String);
         Server.Add_Linkifier
            (Pattern,
             Url_Format_String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Add_Linkifier;

      package API_Add_Linkifier is
         new Swagger.Servers.Operation (Handler => Add_Linkifier,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/filters");

      --  Create a custom profile field
      procedure Create_Custom_Profile_Field
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Field_Type : Integer;
         Name : Swagger.Nullable_UString;
         Hint : Swagger.Nullable_UString;
         Field_Data : Swagger.Object;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "hint", Hint);
         Swagger.Servers.Get_Query_Parameter (Req, "field_type", Field_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "field_data", Field_Data);
         Server.Create_Custom_Profile_Field
            (Field_Type,
             Name,
             Hint,
             Field_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Custom_Profile_Field;

      package API_Create_Custom_Profile_Field is
         new Swagger.Servers.Operation (Handler => Create_Custom_Profile_Field,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Get all custom emoji
      procedure Get_Custom_Emoji
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Custom_Emoji (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Custom_Emoji;

      package API_Get_Custom_Emoji is
         new Swagger.Servers.Operation (Handler => Get_Custom_Emoji,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/emoji");

      --  Get all custom profile fields
      procedure Get_Custom_Profile_Fields
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Custom_Profile_Fields (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Custom_Profile_Fields;

      package API_Get_Custom_Profile_Fields is
         new Swagger.Servers.Operation (Handler => Get_Custom_Profile_Fields,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Get linkifiers
      procedure Get_Linkifiers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Linkifiers (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Linkifiers;

      package API_Get_Linkifiers is
         new Swagger.Servers.Operation (Handler => Get_Linkifiers,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/realm/linkifiers");

      --  Get server settings
      procedure Get_Server_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Server_Settings (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Server_Settings;

      package API_Get_Server_Settings is
         new Swagger.Servers.Operation (Handler => Get_Server_Settings,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/server_settings");

      --  Remove a code playground
      procedure Remove_Code_Playground
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Playground_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Playground_Id);
         Server.Remove_Code_Playground
            (Playground_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Code_Playground;

      package API_Remove_Code_Playground is
         new Swagger.Servers.Operation (Handler => Remove_Code_Playground,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/realm/playgrounds/{playground_id}");

      --  Remove a linkifier
      procedure Remove_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Filter_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Filter_Id);
         Server.Remove_Linkifier
            (Filter_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_Linkifier;

      package API_Remove_Linkifier is
         new Swagger.Servers.Operation (Handler => Remove_Linkifier,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/realm/filters/{filter_id}");

      --  Reorder custom profile fields
      procedure Reorder_Custom_Profile_Fields
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Order : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "order", Order);
         Server.Reorder_Custom_Profile_Fields
            (Order, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Reorder_Custom_Profile_Fields;

      package API_Reorder_Custom_Profile_Fields is
         new Swagger.Servers.Operation (Handler => Reorder_Custom_Profile_Fields,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/realm/profile_fields");

      --  Update a linkifier
      procedure Update_Linkifier
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Filter_Id : Integer;
         Pattern : Swagger.UString;
         Url_Format_String : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "pattern", Pattern);
         Swagger.Servers.Get_Query_Parameter (Req, "url_format_string", Url_Format_String);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Filter_Id);
         Server.Update_Linkifier
            (Filter_Id,
             Pattern,
             Url_Format_String, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Linkifier;

      package API_Update_Linkifier is
         new Swagger.Servers.Operation (Handler => Update_Linkifier,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/realm/filters/{filter_id}");

      --  Upload custom emoji
      procedure Upload_Custom_Emoji
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Emoji_Name : Swagger.UString;
         Filename : Swagger.File_Part_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Emoji_Name);
         Swagger.Servers.Get_Parameter (Context, "filename", Filename);
         Server.Upload_Custom_Emoji
            (Emoji_Name,
             Filename, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Upload_Custom_Emoji;

      package API_Upload_Custom_Emoji is
         new Swagger.Servers.Operation (Handler => Upload_Custom_Emoji,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/realm/emoji/{emoji_name}");

      --  Archive a stream
      procedure Archive_Stream
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Server.Archive_Stream
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Archive_Stream;

      package API_Archive_Stream is
         new Swagger.Servers.Operation (Handler => Archive_Stream,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/streams/{stream_id}");

      --  Create BigBlueButton video call
      procedure Create_Big_Blue_Button_Video_Call
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Create_Big_Blue_Button_Video_Call (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_Big_Blue_Button_Video_Call;

      package API_Create_Big_Blue_Button_Video_Call is
         new Swagger.Servers.Operation (Handler => Create_Big_Blue_Button_Video_Call,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/calls/bigbluebutton/create");

      --  Delete a topic
      procedure Delete_Topic
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Topic_Name : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "topic_name", Topic_Name);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Server.Delete_Topic
            (Stream_Id,
             Topic_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Delete_Topic;

      package API_Delete_Topic is
         new Swagger.Servers.Operation (Handler => Delete_Topic,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/streams/{stream_id}/delete_topic");

      --  Get stream ID
      procedure Get_Stream_Id
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream", Stream);
         Server.Get_Stream_Id
            (Stream, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Stream_Id;

      package API_Get_Stream_Id is
         new Swagger.Servers.Operation (Handler => Get_Stream_Id,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/get_stream_id");

      --  Get topics in a stream
      procedure Get_Stream_Topics
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Server.Get_Stream_Topics
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Stream_Topics;

      package API_Get_Stream_Topics is
         new Swagger.Servers.Operation (Handler => Get_Stream_Topics,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me/{stream_id}/topics");

      --  Get all streams
      procedure Get_Streams
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Include_Public : Swagger.Nullable_Boolean;
         Include_Web_Public : Swagger.Nullable_Boolean;
         Include_Subscribed : Swagger.Nullable_Boolean;
         Include_All_Active : Swagger.Nullable_Boolean;
         Include_Default : Swagger.Nullable_Boolean;
         Include_Owner_Subscribed : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "include_public", Include_Public);
         Swagger.Servers.Get_Query_Parameter (Req, "include_web_public", Include_Web_Public);
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribed", Include_Subscribed);
         Swagger.Servers.Get_Query_Parameter (Req, "include_all_active", Include_All_Active);
         Swagger.Servers.Get_Query_Parameter (Req, "include_default", Include_Default);
         Swagger.Servers.Get_Query_Parameter (Req, "include_owner_subscribed", Include_Owner_Subscribed);
         Server.Get_Streams
            (Include_Public,
             Include_Web_Public,
             Include_Subscribed,
             Include_All_Active,
             Include_Default,
             Include_Owner_Subscribed, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Streams;

      package API_Get_Streams is
         new Swagger.Servers.Operation (Handler => Get_Streams,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/streams");

      --  Get the subscribers of a stream
      procedure Get_Subscribers
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Server.Get_Subscribers
            (Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscribers;

      package API_Get_Subscribers is
         new Swagger.Servers.Operation (Handler => Get_Subscribers,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/streams/{stream_id}/members");

      --  Get subscription status
      procedure Get_Subscription_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id : Integer;
         Stream_Id : Integer;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Swagger.Servers.Get_Path_Parameter (Req, 2, Stream_Id);
         Server.Get_Subscription_Status
            (User_Id,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscription_Status;

      package API_Get_Subscription_Status is
         new Swagger.Servers.Operation (Handler => Get_Subscription_Status,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id}/subscriptions/{stream_id}");

      --  Get subscribed streams
      procedure Get_Subscriptions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Include_Subscribers : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "include_subscribers", Include_Subscribers);
         Server.Get_Subscriptions
            (Include_Subscribers, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Subscriptions;

      package API_Get_Subscriptions is
         new Swagger.Servers.Operation (Handler => Get_Subscriptions,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Topic muting
      procedure Mute_Topic
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Topic : Swagger.UString;
         Op : Swagger.UString;
         Stream : Swagger.Nullable_UString;
         Stream_Id : Swagger.Nullable_Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "stream", Stream);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_id", Stream_Id);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Server.Mute_Topic
            (Topic,
             Op,
             Stream,
             Stream_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mute_Topic;

      package API_Mute_Topic is
         new Swagger.Servers.Operation (Handler => Mute_Topic,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/me/subscriptions/muted_topics");

      --  Subscribe to a stream
      procedure Subscribe
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Subscriptions : Swagger.Object_Vectors.Vector;
         Principals : .Models.OneOfstringinteger_Type_Vectors.Vector;
         Authorization_Errors_Fatal : Swagger.Nullable_Boolean;
         Announce : Swagger.Nullable_Boolean;
         Invite_Only : Swagger.Nullable_Boolean;
         History_Public_To_Subscribers : Swagger.Nullable_Boolean;
         Stream_Post_Policy : Swagger.Nullable_Integer;
         Message_Retention_Days : .Models.OneOfstringinteger_Type;
         Result : .Models.OneOfobjectobject_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscriptions", Subscriptions);
         Swagger.Servers.Get_Query_Parameter (Req, "principals", Principals);
         Swagger.Servers.Get_Query_Parameter (Req, "authorization_errors_fatal", Authorization_Errors_Fatal);
         Swagger.Servers.Get_Query_Parameter (Req, "announce", Announce);
         Swagger.Servers.Get_Query_Parameter (Req, "invite_only", Invite_Only);
         Swagger.Servers.Get_Query_Parameter (Req, "history_public_to_subscribers", History_Public_To_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_post_policy", Stream_Post_Policy);
         Swagger.Servers.Get_Query_Parameter (Req, "message_retention_days", Message_Retention_Days);
         Server.Subscribe
            (Subscriptions,
             Principals,
             Authorization_Errors_Fatal,
             Announce,
             Invite_Only,
             History_Public_To_Subscribers,
             Stream_Post_Policy,
             Message_Retention_Days, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Subscribe;

      package API_Subscribe is
         new Swagger.Servers.Operation (Handler => Subscribe,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Unsubscribe from a stream
      procedure Unsubscribe
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Subscriptions : Swagger.UString_Vectors.Vector;
         Principals : .Models.OneOfstringinteger_Type_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscriptions", Subscriptions);
         Swagger.Servers.Get_Query_Parameter (Req, "principals", Principals);
         Server.Unsubscribe
            (Subscriptions,
             Principals, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Unsubscribe;

      package API_Unsubscribe is
         new Swagger.Servers.Operation (Handler => Unsubscribe,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Update a stream
      procedure Update_Stream
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Stream_Id : Integer;
         Description : Swagger.Nullable_UString;
         New_Name : Swagger.Nullable_UString;
         Is_Private : Swagger.Nullable_Boolean;
         Is_Announcement_Only : Swagger.Nullable_Boolean;
         Stream_Post_Policy : Swagger.Nullable_Integer;
         History_Public_To_Subscribers : Swagger.Nullable_Boolean;
         Message_Retention_Days : .Models.OneOfstringinteger_Type;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Query_Parameter (Req, "new_name", New_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "is_private", Is_Private);
         Swagger.Servers.Get_Query_Parameter (Req, "is_announcement_only", Is_Announcement_Only);
         Swagger.Servers.Get_Query_Parameter (Req, "stream_post_policy", Stream_Post_Policy);
         Swagger.Servers.Get_Query_Parameter (Req, "history_public_to_subscribers", History_Public_To_Subscribers);
         Swagger.Servers.Get_Query_Parameter (Req, "message_retention_days", Message_Retention_Days);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Stream_Id);
         Server.Update_Stream
            (Stream_Id,
             Description,
             New_Name,
             Is_Private,
             Is_Announcement_Only,
             Stream_Post_Policy,
             History_Public_To_Subscribers,
             Message_Retention_Days, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Stream;

      package API_Update_Stream is
         new Swagger.Servers.Operation (Handler => Update_Stream,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/streams/{stream_id}");

      --  Update subscription settings
      procedure Update_Subscription_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Subscription_Data : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "subscription_data", Subscription_Data);
         Server.Update_Subscription_Settings
            (Subscription_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Subscription_Settings;

      package API_Update_Subscription_Settings is
         new Swagger.Servers.Operation (Handler => Update_Subscription_Settings,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/subscriptions/properties");

      --  Update subscriptions
      procedure Update_Subscriptions
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Delete : Swagger.UString_Vectors.Vector;
         Add : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "add", Add);
         Server.Update_Subscriptions
            (Delete,
             Add, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Subscriptions;

      package API_Update_Subscriptions is
         new Swagger.Servers.Operation (Handler => Update_Subscriptions,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/me/subscriptions");

      --  Create a user
      procedure Create_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Email : Swagger.UString;
         Password : Swagger.UString;
         Full_Name : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "email", Email);
         Swagger.Servers.Get_Query_Parameter (Req, "password", Password);
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Server.Create_User
            (Email,
             Password,
             Full_Name, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User;

      package API_Create_User is
         new Swagger.Servers.Operation (Handler => Create_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users");

      --  Create a user group
      procedure Create_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Description : Swagger.UString;
         Members : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Query_Parameter (Req, "members", Members);
         Server.Create_User_Group
            (Name,
             Description,
             Members, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Create_User_Group;

      package API_Create_User_Group is
         new Swagger.Servers.Operation (Handler => Create_User_Group,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_groups/create");

      --  Deactivate own user
      procedure Deactivate_Own_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccess_Type;
      begin
         Server.Deactivate_Own_User (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Deactivate_Own_User;

      package API_Deactivate_Own_User is
         new Swagger.Servers.Operation (Handler => Deactivate_Own_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me");

      --  Deactivate a user
      procedure Deactivate_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Server.Deactivate_User
            (User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Deactivate_User;

      package API_Deactivate_User is
         new Swagger.Servers.Operation (Handler => Deactivate_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Get attachments
      procedure Get_Attachments
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Attachments (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Attachments;

      package API_Get_Attachments is
         new Swagger.Servers.Operation (Handler => Get_Attachments,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/attachments");

      --  Get own user
      procedure Get_Own_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_Own_User (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Own_User;

      package API_Get_Own_User is
         new Swagger.Servers.Operation (Handler => Get_Own_User,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/me");

      --  Get a user
      procedure Get_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id : Integer;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Server.Get_User
            (User_Id,
             Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User;

      package API_Get_User is
         new Swagger.Servers.Operation (Handler => Get_User,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Get a user by email
      procedure Get_User_By_Email
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Email : Swagger.UString;
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Swagger.Servers.Get_Path_Parameter (Req, 1, Email);
         Server.Get_User_By_Email
            (Email,
             Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_By_Email;

      package API_Get_User_By_Email is
         new Swagger.Servers.Operation (Handler => Get_User_By_Email,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{email}");

      --  Get user groups
      procedure Get_User_Groups
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.JsonSuccessBase_Type;
      begin
         Server.Get_User_Groups (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_Groups;

      package API_Get_User_Groups is
         new Swagger.Servers.Operation (Handler => Get_User_Groups,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/user_groups");

      --  Get user presence
      procedure Get_User_Presence
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id_Or_Email : Swagger.UString;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id_Or_Email);
         Server.Get_User_Presence
            (User_Id_Or_Email, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_User_Presence;

      package API_Get_User_Presence is
         new Swagger.Servers.Operation (Handler => Get_User_Presence,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users/{user_id_or_email}/presence");

      --  Get all users
      procedure Get_Users
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Client_Gravatar : Swagger.Nullable_Boolean;
         Include_Custom_Profile_Fields : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "client_gravatar", Client_Gravatar);
         Swagger.Servers.Get_Query_Parameter (Req, "include_custom_profile_fields", Include_Custom_Profile_Fields);
         Server.Get_Users
            (Client_Gravatar,
             Include_Custom_Profile_Fields, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Get_Users;

      package API_Get_Users is
         new Swagger.Servers.Operation (Handler => Get_Users,
                                        Method  => Swagger.Servers.GET,
                                        URI     => URI_Prefix & "/users");

      --  Mute a user
      procedure Mute_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Muted_User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Muted_User_Id);
         Server.Mute_User
            (Muted_User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Mute_User;

      package API_Mute_User is
         new Swagger.Servers.Operation (Handler => Mute_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/muted_users/{muted_user_id}");

      --  Reactivate a user
      procedure Reactivate_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id : Integer;
         Result : .Models.AnyType_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Server.Reactivate_User
            (User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Reactivate_User;

      package API_Reactivate_User is
         new Swagger.Servers.Operation (Handler => Reactivate_User,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/{user_id}/reactivate");

      --  Delete a user group
      procedure Remove_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Group_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Server.Remove_User_Group
            (User_Group_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Remove_User_Group;

      package API_Remove_User_Group is
         new Swagger.Servers.Operation (Handler => Remove_User_Group,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}");

      --  Set \"typing\" status
      procedure Set_Typing_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Op : Swagger.UString;
         To : Integer_Vectors.Vector;
         P_Type : Swagger.Nullable_UString;
         Topic : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "type", P_Type);
         Swagger.Servers.Get_Query_Parameter (Req, "op", Op);
         Swagger.Servers.Get_Query_Parameter (Req, "to", To);
         Swagger.Servers.Get_Query_Parameter (Req, "topic", Topic);
         Server.Set_Typing_Status
            (Op,
             To,
             P_Type,
             Topic, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Set_Typing_Status;

      package API_Set_Typing_Status is
         new Swagger.Servers.Operation (Handler => Set_Typing_Status,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/typing");

      --  Unmute a user
      procedure Unmute_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Muted_User_Id : Integer;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Path_Parameter (Req, 1, Muted_User_Id);
         Server.Unmute_User
            (Muted_User_Id, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Unmute_User;

      package API_Unmute_User is
         new Swagger.Servers.Operation (Handler => Unmute_User,
                                        Method  => Swagger.Servers.DELETE,
                                        URI     => URI_Prefix & "/users/me/muted_users/{muted_user_id}");

      --  Update settings
      procedure Update_Settings
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Full_Name : Swagger.Nullable_UString;
         Email : Swagger.Nullable_UString;
         Old_Password : Swagger.Nullable_UString;
         New_Password : Swagger.Nullable_UString;
         Twenty_Four_Hour_Time : Swagger.Nullable_Boolean;
         Dense_Mode : Swagger.Nullable_Boolean;
         Starred_Message_Counts : Swagger.Nullable_Boolean;
         Fluid_Layout_Width : Swagger.Nullable_Boolean;
         High_Contrast_Mode : Swagger.Nullable_Boolean;
         Color_Scheme : Swagger.Nullable_Integer;
         Enable_Drafts_Synchronization : Swagger.Nullable_Boolean;
         Translate_Emoticons : Swagger.Nullable_Boolean;
         Default_Language : Swagger.Nullable_UString;
         Default_View : Swagger.Nullable_UString;
         Left_Side_Userlist : Swagger.Nullable_Boolean;
         Emojiset : Swagger.Nullable_UString;
         Demote_Inactive_Streams : Swagger.Nullable_Integer;
         Timezone : Swagger.Nullable_UString;
         Enable_Stream_Desktop_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Email_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Stream_Audible_Notifications : Swagger.Nullable_Boolean;
         Notification_Sound : Swagger.Nullable_UString;
         Enable_Desktop_Notifications : Swagger.Nullable_Boolean;
         Enable_Sounds : Swagger.Nullable_Boolean;
         Email_Notifications_Batching_Period_Seconds : Swagger.Nullable_Integer;
         Enable_Offline_Email_Notifications : Swagger.Nullable_Boolean;
         Enable_Offline_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Online_Push_Notifications : Swagger.Nullable_Boolean;
         Enable_Digest_Emails : Swagger.Nullable_Boolean;
         Enable_Marketing_Emails : Swagger.Nullable_Boolean;
         Enable_Login_Emails : Swagger.Nullable_Boolean;
         Message_Content_In_Email_Notifications : Swagger.Nullable_Boolean;
         Pm_Content_In_Desktop_Notifications : Swagger.Nullable_Boolean;
         Wildcard_Mentions_Notify : Swagger.Nullable_Boolean;
         Desktop_Icon_Count_Display : Swagger.Nullable_Integer;
         Realm_Name_In_Notifications : Swagger.Nullable_Boolean;
         Presence_Enabled : Swagger.Nullable_Boolean;
         Enter_Sends : Swagger.Nullable_Boolean;
         Result : .Models.JsonSuccessBase_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "email", Email);
         Swagger.Servers.Get_Query_Parameter (Req, "old_password", Old_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "new_password", New_Password);
         Swagger.Servers.Get_Query_Parameter (Req, "twenty_four_hour_time", Twenty_Four_Hour_Time);
         Swagger.Servers.Get_Query_Parameter (Req, "dense_mode", Dense_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "starred_message_counts", Starred_Message_Counts);
         Swagger.Servers.Get_Query_Parameter (Req, "fluid_layout_width", Fluid_Layout_Width);
         Swagger.Servers.Get_Query_Parameter (Req, "high_contrast_mode", High_Contrast_Mode);
         Swagger.Servers.Get_Query_Parameter (Req, "color_scheme", Color_Scheme);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_drafts_synchronization", Enable_Drafts_Synchronization);
         Swagger.Servers.Get_Query_Parameter (Req, "translate_emoticons", Translate_Emoticons);
         Swagger.Servers.Get_Query_Parameter (Req, "default_language", Default_Language);
         Swagger.Servers.Get_Query_Parameter (Req, "default_view", Default_View);
         Swagger.Servers.Get_Query_Parameter (Req, "left_side_userlist", Left_Side_Userlist);
         Swagger.Servers.Get_Query_Parameter (Req, "emojiset", Emojiset);
         Swagger.Servers.Get_Query_Parameter (Req, "demote_inactive_streams", Demote_Inactive_Streams);
         Swagger.Servers.Get_Query_Parameter (Req, "timezone", Timezone);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_desktop_notifications", Enable_Stream_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_email_notifications", Enable_Stream_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_push_notifications", Enable_Stream_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_stream_audible_notifications", Enable_Stream_Audible_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "notification_sound", Notification_Sound);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_desktop_notifications", Enable_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_sounds", Enable_Sounds);
         Swagger.Servers.Get_Query_Parameter (Req, "email_notifications_batching_period_seconds", Email_Notifications_Batching_Period_Seconds);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_offline_email_notifications", Enable_Offline_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_offline_push_notifications", Enable_Offline_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_online_push_notifications", Enable_Online_Push_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_digest_emails", Enable_Digest_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_marketing_emails", Enable_Marketing_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "enable_login_emails", Enable_Login_Emails);
         Swagger.Servers.Get_Query_Parameter (Req, "message_content_in_email_notifications", Message_Content_In_Email_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "pm_content_in_desktop_notifications", Pm_Content_In_Desktop_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "wildcard_mentions_notify", Wildcard_Mentions_Notify);
         Swagger.Servers.Get_Query_Parameter (Req, "desktop_icon_count_display", Desktop_Icon_Count_Display);
         Swagger.Servers.Get_Query_Parameter (Req, "realm_name_in_notifications", Realm_Name_In_Notifications);
         Swagger.Servers.Get_Query_Parameter (Req, "presence_enabled", Presence_Enabled);
         Swagger.Servers.Get_Query_Parameter (Req, "enter_sends", Enter_Sends);
         Server.Update_Settings
            (Full_Name,
             Email,
             Old_Password,
             New_Password,
             Twenty_Four_Hour_Time,
             Dense_Mode,
             Starred_Message_Counts,
             Fluid_Layout_Width,
             High_Contrast_Mode,
             Color_Scheme,
             Enable_Drafts_Synchronization,
             Translate_Emoticons,
             Default_Language,
             Default_View,
             Left_Side_Userlist,
             Emojiset,
             Demote_Inactive_Streams,
             Timezone,
             Enable_Stream_Desktop_Notifications,
             Enable_Stream_Email_Notifications,
             Enable_Stream_Push_Notifications,
             Enable_Stream_Audible_Notifications,
             Notification_Sound,
             Enable_Desktop_Notifications,
             Enable_Sounds,
             Email_Notifications_Batching_Period_Seconds,
             Enable_Offline_Email_Notifications,
             Enable_Offline_Push_Notifications,
             Enable_Online_Push_Notifications,
             Enable_Digest_Emails,
             Enable_Marketing_Emails,
             Enable_Login_Emails,
             Message_Content_In_Email_Notifications,
             Pm_Content_In_Desktop_Notifications,
             Wildcard_Mentions_Notify,
             Desktop_Icon_Count_Display,
             Realm_Name_In_Notifications,
             Presence_Enabled,
             Enter_Sends, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Settings;

      package API_Update_Settings is
         new Swagger.Servers.Operation (Handler => Update_Settings,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/settings");

      --  Update your status
      procedure Update_Status
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Status_Text : Swagger.Nullable_UString;
         Away : Swagger.Nullable_Boolean;
         Emoji_Name : Swagger.Nullable_UString;
         Emoji_Code : Swagger.Nullable_UString;
         Reaction_Type : Swagger.Nullable_UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "status_text", Status_Text);
         Swagger.Servers.Get_Query_Parameter (Req, "away", Away);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_name", Emoji_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "emoji_code", Emoji_Code);
         Swagger.Servers.Get_Query_Parameter (Req, "reaction_type", Reaction_Type);
         Server.Update_Status
            (Status_Text,
             Away,
             Emoji_Name,
             Emoji_Code,
             Reaction_Type, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_Status;

      package API_Update_Status is
         new Swagger.Servers.Operation (Handler => Update_Status,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/users/me/status");

      --  Update a user
      procedure Update_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Id : Integer;
         Full_Name : Swagger.Nullable_UString;
         Role : Swagger.Nullable_Integer;
         Profile_Data : Swagger.Object_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "full_name", Full_Name);
         Swagger.Servers.Get_Query_Parameter (Req, "role", Role);
         Swagger.Servers.Get_Query_Parameter (Req, "profile_data", Profile_Data);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Id);
         Server.Update_User
            (User_Id,
             Full_Name,
             Role,
             Profile_Data, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User;

      package API_Update_User is
         new Swagger.Servers.Operation (Handler => Update_User,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/users/{user_id}");

      --  Update a user group
      procedure Update_User_Group
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Group_Id : Integer;
         Name : Swagger.UString;
         Description : Swagger.UString;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "name", Name);
         Swagger.Servers.Get_Query_Parameter (Req, "description", Description);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Server.Update_User_Group
            (User_Group_Id,
             Name,
             Description, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User_Group;

      package API_Update_User_Group is
         new Swagger.Servers.Operation (Handler => Update_User_Group,
                                        Method  => Swagger.Servers.PATCH,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}");

      --  Update user group members
      procedure Update_User_Group_Members
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User_Group_Id : Integer;
         Delete : Integer_Vectors.Vector;
         Add : Integer_Vectors.Vector;
         Result : .Models.JsonSuccess_Type;
      begin
         Swagger.Servers.Get_Query_Parameter (Req, "delete", Delete);
         Swagger.Servers.Get_Query_Parameter (Req, "add", Add);
         Swagger.Servers.Get_Path_Parameter (Req, 1, User_Group_Id);
         Server.Update_User_Group_Members
            (User_Group_Id,
             Delete,
             Add, Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Update_User_Group_Members;

      package API_Update_User_Group_Members is
         new Swagger.Servers.Operation (Handler => Update_User_Group_Members,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/user_groups/{user_group_id}/members");

      --  Outgoing webhooks
      procedure Zulip_Outgoing_Webhooks
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.InlineResponse200_Type;
      begin
         Server.Zulip_Outgoing_Webhooks (Result, Context);
         if Context.Get_Status = 200 then
            Stream.Start_Document;
            .Models.Serialize (Stream, "", Result);
            Stream.End_Document;
         end if;
      end Zulip_Outgoing_Webhooks;

      package API_Zulip_Outgoing_Webhooks is
         new Swagger.Servers.Operation (Handler => Zulip_Outgoing_Webhooks,
                                        Method  => Swagger.Servers.POST,
                                        URI     => URI_Prefix & "/zulip-outgoing-webhook");

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Dev_Fetch_Api_Key.Definition);
         Swagger.Servers.Register (Server, API_Fetch_Api_Key.Definition);
         Swagger.Servers.Register (Server, API_Create_Drafts.Definition);
         Swagger.Servers.Register (Server, API_Delete_Draft.Definition);
         Swagger.Servers.Register (Server, API_Edit_Draft.Definition);
         Swagger.Servers.Register (Server, API_Get_Drafts.Definition);
         Swagger.Servers.Register (Server, API_Add_Reaction.Definition);
         Swagger.Servers.Register (Server, API_Check_Messages_Match_Narrow.Definition);
         Swagger.Servers.Register (Server, API_Delete_Message.Definition);
         Swagger.Servers.Register (Server, API_Get_File_Temporary_Url.Definition);
         Swagger.Servers.Register (Server, API_Get_Message_History.Definition);
         Swagger.Servers.Register (Server, API_Get_Messages.Definition);
         Swagger.Servers.Register (Server, API_Get_Raw_Message.Definition);
         Swagger.Servers.Register (Server, API_Mark_All_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Mark_Stream_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Mark_Topic_As_Read.Definition);
         Swagger.Servers.Register (Server, API_Remove_Reaction.Definition);
         Swagger.Servers.Register (Server, API_Render_Message.Definition);
         Swagger.Servers.Register (Server, API_Send_Message.Definition);
         Swagger.Servers.Register (Server, API_Update_Message.Definition);
         Swagger.Servers.Register (Server, API_Update_Message_Flags.Definition);
         Swagger.Servers.Register (Server, API_Upload_File.Definition);
         Swagger.Servers.Register (Server, API_Delete_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Events.Definition);
         Swagger.Servers.Register (Server, API_Real_Time_Post.Definition);
         Swagger.Servers.Register (Server, API_Register_Queue.Definition);
         Swagger.Servers.Register (Server, API_Rest_Error_Handling.Definition);
         Swagger.Servers.Register (Server, API_Add_Code_Playground.Definition);
         Swagger.Servers.Register (Server, API_Add_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Create_Custom_Profile_Field.Definition);
         Swagger.Servers.Register (Server, API_Get_Custom_Emoji.Definition);
         Swagger.Servers.Register (Server, API_Get_Custom_Profile_Fields.Definition);
         Swagger.Servers.Register (Server, API_Get_Linkifiers.Definition);
         Swagger.Servers.Register (Server, API_Get_Server_Settings.Definition);
         Swagger.Servers.Register (Server, API_Remove_Code_Playground.Definition);
         Swagger.Servers.Register (Server, API_Remove_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Reorder_Custom_Profile_Fields.Definition);
         Swagger.Servers.Register (Server, API_Update_Linkifier.Definition);
         Swagger.Servers.Register (Server, API_Upload_Custom_Emoji.Definition);
         Swagger.Servers.Register (Server, API_Archive_Stream.Definition);
         Swagger.Servers.Register (Server, API_Create_Big_Blue_Button_Video_Call.Definition);
         Swagger.Servers.Register (Server, API_Delete_Topic.Definition);
         Swagger.Servers.Register (Server, API_Get_Stream_Id.Definition);
         Swagger.Servers.Register (Server, API_Get_Stream_Topics.Definition);
         Swagger.Servers.Register (Server, API_Get_Streams.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscribers.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscription_Status.Definition);
         Swagger.Servers.Register (Server, API_Get_Subscriptions.Definition);
         Swagger.Servers.Register (Server, API_Mute_Topic.Definition);
         Swagger.Servers.Register (Server, API_Subscribe.Definition);
         Swagger.Servers.Register (Server, API_Unsubscribe.Definition);
         Swagger.Servers.Register (Server, API_Update_Stream.Definition);
         Swagger.Servers.Register (Server, API_Update_Subscription_Settings.Definition);
         Swagger.Servers.Register (Server, API_Update_Subscriptions.Definition);
         Swagger.Servers.Register (Server, API_Create_User.Definition);
         Swagger.Servers.Register (Server, API_Create_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Deactivate_Own_User.Definition);
         Swagger.Servers.Register (Server, API_Deactivate_User.Definition);
         Swagger.Servers.Register (Server, API_Get_Attachments.Definition);
         Swagger.Servers.Register (Server, API_Get_Own_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_By_Email.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Groups.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Presence.Definition);
         Swagger.Servers.Register (Server, API_Get_Users.Definition);
         Swagger.Servers.Register (Server, API_Mute_User.Definition);
         Swagger.Servers.Register (Server, API_Reactivate_User.Definition);
         Swagger.Servers.Register (Server, API_Remove_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Set_Typing_Status.Definition);
         Swagger.Servers.Register (Server, API_Unmute_User.Definition);
         Swagger.Servers.Register (Server, API_Update_Settings.Definition);
         Swagger.Servers.Register (Server, API_Update_Status.Definition);
         Swagger.Servers.Register (Server, API_Update_User.Definition);
         Swagger.Servers.Register (Server, API_Update_User_Group.Definition);
         Swagger.Servers.Register (Server, API_Update_User_Group_Members.Definition);
         Swagger.Servers.Register (Server, API_Zulip_Outgoing_Webhooks.Definition);
      end Register;

      protected body Server is
         --  Fetch an API key (development only)
         procedure Dev_Fetch_Api_Key
            (Username : in Swagger.UString;
             Result : out .Models.ApiKeyResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Dev_Fetch_Api_Key
               (Username,
                Result,
                Context);
         end Dev_Fetch_Api_Key;

         --  Fetch an API key (production)
         procedure Fetch_Api_Key
            (Username : in Swagger.UString;
             Password : in Swagger.UString;
             Result : out .Models.ApiKeyResponse_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Fetch_Api_Key
               (Username,
                Password,
                Result,
                Context);
         end Fetch_Api_Key;

         --  Create drafts
         procedure Create_Drafts
            (Drafts : in .Models.Draft_Type_Vectors.Vector;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Drafts
               (Drafts,
                Result,
                Context);
         end Create_Drafts;

         --  Delete a draft
         procedure Delete_Draft
            (Draft_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Draft
               (Draft_Id,
                Result,
                Context);
         end Delete_Draft;

         --  Edit a draft
         procedure Edit_Draft
            (Draft_Id : in Integer;
             Draft : in .Models.Draft_Type;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Edit_Draft
               (Draft_Id,
                Draft,
                Result,
                Context);
         end Edit_Draft;

         --  Get drafts
         procedure Get_Drafts (Result : out .Models.JsonSuccess_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Drafts (Result, Context);
         end Get_Drafts;

         --  Add an emoji reaction
         procedure Add_Reaction
            (Message_Id : in Integer;
             Emoji_Name : in Swagger.UString;
             Emoji_Code : in Swagger.Nullable_UString;
             Reaction_Type : in Swagger.Nullable_UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Add_Reaction
               (Message_Id,
                Emoji_Name,
                Emoji_Code,
                Reaction_Type,
                Result,
                Context);
         end Add_Reaction;

         --  Check if messages match a narrow
         procedure Check_Messages_Match_Narrow
            (Msg_Ids : in Integer_Vectors.Vector;
             Narrow : in Swagger.Object_Vectors.Vector;
             Result : out .Models.AnyType_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Check_Messages_Match_Narrow
               (Msg_Ids,
                Narrow,
                Result,
                Context);
         end Check_Messages_Match_Narrow;

         --  Delete a message
         procedure Delete_Message
            (Message_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Message
               (Message_Id,
                Result,
                Context);
         end Delete_Message;

         --  Get public temporary URL
         procedure Get_File_Temporary_Url
            (Realm_Id_Str : in Integer;
             Filename : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_File_Temporary_Url
               (Realm_Id_Str,
                Filename,
                Result,
                Context);
         end Get_File_Temporary_Url;

         --  Get a message's edit history
         procedure Get_Message_History
            (Message_Id : in Integer;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Message_History
               (Message_Id,
                Result,
                Context);
         end Get_Message_History;

         --  Get messages
         procedure Get_Messages
            (Num_Before : in Integer;
             Num_After : in Integer;
             Anchor : in .Models.OneOfstringinteger_Type;
             Narrow : in Swagger.Object_Vectors.Vector;
             Client_Gravatar : in Swagger.Nullable_Boolean;
             Apply_Markdown : in Swagger.Nullable_Boolean;
             Use_First_Unread_Anchor : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Messages
               (Num_Before,
                Num_After,
                Anchor,
                Narrow,
                Client_Gravatar,
                Apply_Markdown,
                Use_First_Unread_Anchor,
                Result,
                Context);
         end Get_Messages;

         --  Get a message's raw Markdown
         procedure Get_Raw_Message
            (Message_Id : in Integer;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Raw_Message
               (Message_Id,
                Result,
                Context);
         end Get_Raw_Message;

         --  Mark all messages as read
         procedure Mark_All_As_Read (Result : out .Models.JsonSuccess_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Mark_All_As_Read (Result, Context);
         end Mark_All_As_Read;

         --  Mark messages in a stream as read
         procedure Mark_Stream_As_Read
            (Stream_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Mark_Stream_As_Read
               (Stream_Id,
                Result,
                Context);
         end Mark_Stream_As_Read;

         --  Mark messages in a topic as read
         procedure Mark_Topic_As_Read
            (Stream_Id : in Integer;
             Topic_Name : in Swagger.UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Mark_Topic_As_Read
               (Stream_Id,
                Topic_Name,
                Result,
                Context);
         end Mark_Topic_As_Read;

         --  Remove an emoji reaction
         procedure Remove_Reaction
            (Message_Id : in Integer;
             Emoji_Name : in Swagger.Nullable_UString;
             Emoji_Code : in Swagger.Nullable_UString;
             Reaction_Type : in Swagger.Nullable_UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Remove_Reaction
               (Message_Id,
                Emoji_Name,
                Emoji_Code,
                Reaction_Type,
                Result,
                Context);
         end Remove_Reaction;

         --  Render message
         procedure Render_Message
            (Content : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Render_Message
               (Content,
                Result,
                Context);
         end Render_Message;

         --  Send a message
         procedure Send_Message
            (P_Type : in Swagger.UString;
             To : in Integer_Vectors.Vector;
             Content : in Swagger.UString;
             Topic : in Swagger.Nullable_UString;
             Queue_Id : in Swagger.Nullable_UString;
             Local_Id : in Swagger.Nullable_UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Send_Message
               (P_Type,
                To,
                Content,
                Topic,
                Queue_Id,
                Local_Id,
                Result,
                Context);
         end Send_Message;

         --  Edit a message
         procedure Update_Message
            (Message_Id : in Integer;
             Topic : in Swagger.Nullable_UString;
             Propagate_Mode : in Swagger.Nullable_UString;
             Send_Notification_To_Old_Thread : in Swagger.Nullable_Boolean;
             Send_Notification_To_New_Thread : in Swagger.Nullable_Boolean;
             Content : in Swagger.Nullable_UString;
             Stream_Id : in Swagger.Nullable_Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Message
               (Message_Id,
                Topic,
                Propagate_Mode,
                Send_Notification_To_Old_Thread,
                Send_Notification_To_New_Thread,
                Content,
                Stream_Id,
                Result,
                Context);
         end Update_Message;

         --  Update personal message flags
         procedure Update_Message_Flags
            (Messages : in Integer_Vectors.Vector;
             Op : in Swagger.UString;
             Flag : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Message_Flags
               (Messages,
                Op,
                Flag,
                Result,
                Context);
         end Update_Message_Flags;

         --  Upload a file
         procedure Upload_File
            (Filename : in Swagger.File_Part_Type;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Upload_File
               (Filename,
                Result,
                Context);
         end Upload_File;

         --  Delete an event queue
         procedure Delete_Queue
            (Queue_Id : in Swagger.UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Queue
               (Queue_Id,
                Result,
                Context);
         end Delete_Queue;

         --  Get events from an event queue
         procedure Get_Events
            (Queue_Id : in Swagger.UString;
             Last_Event_Id : in Swagger.Nullable_Integer;
             Dont_Block : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Events
               (Queue_Id,
                Last_Event_Id,
                Dont_Block,
                Result,
                Context);
         end Get_Events;

         --  
         procedure Real_Time_Post
            (Event_Types : in Swagger.UString_Vectors.Vector;
             Narrow : in Swagger.UString_Vectors.Vector_Vectors.Vector;
             All_Public_Streams : in Swagger.Nullable_Boolean;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Real_Time_Post
               (Event_Types,
                Narrow,
                All_Public_Streams,
                Context);
         end Real_Time_Post;

         --  Register an event queue
         procedure Register_Queue
            (Apply_Markdown : in Swagger.Nullable_Boolean;
             Client_Gravatar : in Swagger.Nullable_Boolean;
             Slim_Presence : in Swagger.Nullable_Boolean;
             Event_Types : in Swagger.UString_Vectors.Vector;
             All_Public_Streams : in Swagger.Nullable_Boolean;
             Include_Subscribers : in Swagger.Nullable_Boolean;
             Client_Capabilities : in Swagger.Object;
             Fetch_Event_Types : in Swagger.UString_Vectors.Vector;
             Narrow : in Swagger.UString_Vectors.Vector_Vectors.Vector;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Register_Queue
               (Apply_Markdown,
                Client_Gravatar,
                Slim_Presence,
                Event_Types,
                All_Public_Streams,
                Include_Subscribers,
                Client_Capabilities,
                Fetch_Event_Types,
                Narrow,
                Result,
                Context);
         end Register_Queue;

         --  Error handling
         procedure Rest_Error_Handling (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Rest_Error_Handling (Context);
         end Rest_Error_Handling;

         --  Add a code playground
         procedure Add_Code_Playground
            (Name : in Swagger.UString;
             Pygments_Language : in Swagger.UString;
             Url_Prefix : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Add_Code_Playground
               (Name,
                Pygments_Language,
                Url_Prefix,
                Result,
                Context);
         end Add_Code_Playground;

         --  Add a linkifier
         procedure Add_Linkifier
            (Pattern : in Swagger.UString;
             Url_Format_String : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Add_Linkifier
               (Pattern,
                Url_Format_String,
                Result,
                Context);
         end Add_Linkifier;

         --  Create a custom profile field
         procedure Create_Custom_Profile_Field
            (Field_Type : in Integer;
             Name : in Swagger.Nullable_UString;
             Hint : in Swagger.Nullable_UString;
             Field_Data : in Swagger.Object;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Custom_Profile_Field
               (Field_Type,
                Name,
                Hint,
                Field_Data,
                Result,
                Context);
         end Create_Custom_Profile_Field;

         --  Get all custom emoji
         procedure Get_Custom_Emoji (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Custom_Emoji (Result, Context);
         end Get_Custom_Emoji;

         --  Get all custom profile fields
         procedure Get_Custom_Profile_Fields (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Custom_Profile_Fields (Result, Context);
         end Get_Custom_Profile_Fields;

         --  Get linkifiers
         procedure Get_Linkifiers (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Linkifiers (Result, Context);
         end Get_Linkifiers;

         --  Get server settings
         procedure Get_Server_Settings (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Server_Settings (Result, Context);
         end Get_Server_Settings;

         --  Remove a code playground
         procedure Remove_Code_Playground
            (Playground_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Remove_Code_Playground
               (Playground_Id,
                Result,
                Context);
         end Remove_Code_Playground;

         --  Remove a linkifier
         procedure Remove_Linkifier
            (Filter_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Remove_Linkifier
               (Filter_Id,
                Result,
                Context);
         end Remove_Linkifier;

         --  Reorder custom profile fields
         procedure Reorder_Custom_Profile_Fields
            (Order : in Integer_Vectors.Vector;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reorder_Custom_Profile_Fields
               (Order,
                Result,
                Context);
         end Reorder_Custom_Profile_Fields;

         --  Update a linkifier
         procedure Update_Linkifier
            (Filter_Id : in Integer;
             Pattern : in Swagger.UString;
             Url_Format_String : in Swagger.UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Linkifier
               (Filter_Id,
                Pattern,
                Url_Format_String,
                Result,
                Context);
         end Update_Linkifier;

         --  Upload custom emoji
         procedure Upload_Custom_Emoji
            (Emoji_Name : in Swagger.UString;
             Filename : in Swagger.File_Part_Type;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Upload_Custom_Emoji
               (Emoji_Name,
                Filename,
                Result,
                Context);
         end Upload_Custom_Emoji;

         --  Archive a stream
         procedure Archive_Stream
            (Stream_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Archive_Stream
               (Stream_Id,
                Result,
                Context);
         end Archive_Stream;

         --  Create BigBlueButton video call
         procedure Create_Big_Blue_Button_Video_Call (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_Big_Blue_Button_Video_Call (Result, Context);
         end Create_Big_Blue_Button_Video_Call;

         --  Delete a topic
         procedure Delete_Topic
            (Stream_Id : in Integer;
             Topic_Name : in Swagger.UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Topic
               (Stream_Id,
                Topic_Name,
                Result,
                Context);
         end Delete_Topic;

         --  Get stream ID
         procedure Get_Stream_Id
            (Stream : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Stream_Id
               (Stream,
                Result,
                Context);
         end Get_Stream_Id;

         --  Get topics in a stream
         procedure Get_Stream_Topics
            (Stream_Id : in Integer;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Stream_Topics
               (Stream_Id,
                Result,
                Context);
         end Get_Stream_Topics;

         --  Get all streams
         procedure Get_Streams
            (Include_Public : in Swagger.Nullable_Boolean;
             Include_Web_Public : in Swagger.Nullable_Boolean;
             Include_Subscribed : in Swagger.Nullable_Boolean;
             Include_All_Active : in Swagger.Nullable_Boolean;
             Include_Default : in Swagger.Nullable_Boolean;
             Include_Owner_Subscribed : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Streams
               (Include_Public,
                Include_Web_Public,
                Include_Subscribed,
                Include_All_Active,
                Include_Default,
                Include_Owner_Subscribed,
                Result,
                Context);
         end Get_Streams;

         --  Get the subscribers of a stream
         procedure Get_Subscribers
            (Stream_Id : in Integer;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Subscribers
               (Stream_Id,
                Result,
                Context);
         end Get_Subscribers;

         --  Get subscription status
         procedure Get_Subscription_Status
            (User_Id : in Integer;
             Stream_Id : in Integer;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Subscription_Status
               (User_Id,
                Stream_Id,
                Result,
                Context);
         end Get_Subscription_Status;

         --  Get subscribed streams
         procedure Get_Subscriptions
            (Include_Subscribers : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Subscriptions
               (Include_Subscribers,
                Result,
                Context);
         end Get_Subscriptions;

         --  Topic muting
         procedure Mute_Topic
            (Topic : in Swagger.UString;
             Op : in Swagger.UString;
             Stream : in Swagger.Nullable_UString;
             Stream_Id : in Swagger.Nullable_Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Mute_Topic
               (Topic,
                Op,
                Stream,
                Stream_Id,
                Result,
                Context);
         end Mute_Topic;

         --  Subscribe to a stream
         procedure Subscribe
            (Subscriptions : in Swagger.Object_Vectors.Vector;
             Principals : in .Models.OneOfstringinteger_Type_Vectors.Vector;
             Authorization_Errors_Fatal : in Swagger.Nullable_Boolean;
             Announce : in Swagger.Nullable_Boolean;
             Invite_Only : in Swagger.Nullable_Boolean;
             History_Public_To_Subscribers : in Swagger.Nullable_Boolean;
             Stream_Post_Policy : in Swagger.Nullable_Integer;
             Message_Retention_Days : in .Models.OneOfstringinteger_Type;
             Result : out .Models.OneOfobjectobject_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Subscribe
               (Subscriptions,
                Principals,
                Authorization_Errors_Fatal,
                Announce,
                Invite_Only,
                History_Public_To_Subscribers,
                Stream_Post_Policy,
                Message_Retention_Days,
                Result,
                Context);
         end Subscribe;

         --  Unsubscribe from a stream
         procedure Unsubscribe
            (Subscriptions : in Swagger.UString_Vectors.Vector;
             Principals : in .Models.OneOfstringinteger_Type_Vectors.Vector;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Unsubscribe
               (Subscriptions,
                Principals,
                Result,
                Context);
         end Unsubscribe;

         --  Update a stream
         procedure Update_Stream
            (Stream_Id : in Integer;
             Description : in Swagger.Nullable_UString;
             New_Name : in Swagger.Nullable_UString;
             Is_Private : in Swagger.Nullable_Boolean;
             Is_Announcement_Only : in Swagger.Nullable_Boolean;
             Stream_Post_Policy : in Swagger.Nullable_Integer;
             History_Public_To_Subscribers : in Swagger.Nullable_Boolean;
             Message_Retention_Days : in .Models.OneOfstringinteger_Type;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Stream
               (Stream_Id,
                Description,
                New_Name,
                Is_Private,
                Is_Announcement_Only,
                Stream_Post_Policy,
                History_Public_To_Subscribers,
                Message_Retention_Days,
                Result,
                Context);
         end Update_Stream;

         --  Update subscription settings
         procedure Update_Subscription_Settings
            (Subscription_Data : in Swagger.Object_Vectors.Vector;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Subscription_Settings
               (Subscription_Data,
                Result,
                Context);
         end Update_Subscription_Settings;

         --  Update subscriptions
         procedure Update_Subscriptions
            (Delete : in Swagger.UString_Vectors.Vector;
             Add : in Swagger.Object_Vectors.Vector;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Subscriptions
               (Delete,
                Add,
                Result,
                Context);
         end Update_Subscriptions;

         --  Create a user
         procedure Create_User
            (Email : in Swagger.UString;
             Password : in Swagger.UString;
             Full_Name : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_User
               (Email,
                Password,
                Full_Name,
                Result,
                Context);
         end Create_User;

         --  Create a user group
         procedure Create_User_Group
            (Name : in Swagger.UString;
             Description : in Swagger.UString;
             Members : in Integer_Vectors.Vector;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Create_User_Group
               (Name,
                Description,
                Members,
                Result,
                Context);
         end Create_User_Group;

         --  Deactivate own user
         procedure Deactivate_Own_User (Result : out .Models.JsonSuccess_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Deactivate_Own_User (Result, Context);
         end Deactivate_Own_User;

         --  Deactivate a user
         procedure Deactivate_User
            (User_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Deactivate_User
               (User_Id,
                Result,
                Context);
         end Deactivate_User;

         --  Get attachments
         procedure Get_Attachments (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Attachments (Result, Context);
         end Get_Attachments;

         --  Get own user
         procedure Get_Own_User (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Own_User (Result, Context);
         end Get_Own_User;

         --  Get a user
         procedure Get_User
            (User_Id : in Integer;
             Client_Gravatar : in Swagger.Nullable_Boolean;
             Include_Custom_Profile_Fields : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User
               (User_Id,
                Client_Gravatar,
                Include_Custom_Profile_Fields,
                Result,
                Context);
         end Get_User;

         --  Get a user by email
         procedure Get_User_By_Email
            (Email : in Swagger.UString;
             Client_Gravatar : in Swagger.Nullable_Boolean;
             Include_Custom_Profile_Fields : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User_By_Email
               (Email,
                Client_Gravatar,
                Include_Custom_Profile_Fields,
                Result,
                Context);
         end Get_User_By_Email;

         --  Get user groups
         procedure Get_User_Groups (Result : out .Models.JsonSuccessBase_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User_Groups (Result, Context);
         end Get_User_Groups;

         --  Get user presence
         procedure Get_User_Presence
            (User_Id_Or_Email : in Swagger.UString;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User_Presence
               (User_Id_Or_Email,
                Result,
                Context);
         end Get_User_Presence;

         --  Get all users
         procedure Get_Users
            (Client_Gravatar : in Swagger.Nullable_Boolean;
             Include_Custom_Profile_Fields : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Users
               (Client_Gravatar,
                Include_Custom_Profile_Fields,
                Result,
                Context);
         end Get_Users;

         --  Mute a user
         procedure Mute_User
            (Muted_User_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Mute_User
               (Muted_User_Id,
                Result,
                Context);
         end Mute_User;

         --  Reactivate a user
         procedure Reactivate_User
            (User_Id : in Integer;
             Result : out .Models.AnyType_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Reactivate_User
               (User_Id,
                Result,
                Context);
         end Reactivate_User;

         --  Delete a user group
         procedure Remove_User_Group
            (User_Group_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Remove_User_Group
               (User_Group_Id,
                Result,
                Context);
         end Remove_User_Group;

         --  Set \"typing\" status
         procedure Set_Typing_Status
            (Op : in Swagger.UString;
             To : in Integer_Vectors.Vector;
             P_Type : in Swagger.Nullable_UString;
             Topic : in Swagger.Nullable_UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Set_Typing_Status
               (Op,
                To,
                P_Type,
                Topic,
                Result,
                Context);
         end Set_Typing_Status;

         --  Unmute a user
         procedure Unmute_User
            (Muted_User_Id : in Integer;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Unmute_User
               (Muted_User_Id,
                Result,
                Context);
         end Unmute_User;

         --  Update settings
         procedure Update_Settings
            (Full_Name : in Swagger.Nullable_UString;
             Email : in Swagger.Nullable_UString;
             Old_Password : in Swagger.Nullable_UString;
             New_Password : in Swagger.Nullable_UString;
             Twenty_Four_Hour_Time : in Swagger.Nullable_Boolean;
             Dense_Mode : in Swagger.Nullable_Boolean;
             Starred_Message_Counts : in Swagger.Nullable_Boolean;
             Fluid_Layout_Width : in Swagger.Nullable_Boolean;
             High_Contrast_Mode : in Swagger.Nullable_Boolean;
             Color_Scheme : in Swagger.Nullable_Integer;
             Enable_Drafts_Synchronization : in Swagger.Nullable_Boolean;
             Translate_Emoticons : in Swagger.Nullable_Boolean;
             Default_Language : in Swagger.Nullable_UString;
             Default_View : in Swagger.Nullable_UString;
             Left_Side_Userlist : in Swagger.Nullable_Boolean;
             Emojiset : in Swagger.Nullable_UString;
             Demote_Inactive_Streams : in Swagger.Nullable_Integer;
             Timezone : in Swagger.Nullable_UString;
             Enable_Stream_Desktop_Notifications : in Swagger.Nullable_Boolean;
             Enable_Stream_Email_Notifications : in Swagger.Nullable_Boolean;
             Enable_Stream_Push_Notifications : in Swagger.Nullable_Boolean;
             Enable_Stream_Audible_Notifications : in Swagger.Nullable_Boolean;
             Notification_Sound : in Swagger.Nullable_UString;
             Enable_Desktop_Notifications : in Swagger.Nullable_Boolean;
             Enable_Sounds : in Swagger.Nullable_Boolean;
             Email_Notifications_Batching_Period_Seconds : in Swagger.Nullable_Integer;
             Enable_Offline_Email_Notifications : in Swagger.Nullable_Boolean;
             Enable_Offline_Push_Notifications : in Swagger.Nullable_Boolean;
             Enable_Online_Push_Notifications : in Swagger.Nullable_Boolean;
             Enable_Digest_Emails : in Swagger.Nullable_Boolean;
             Enable_Marketing_Emails : in Swagger.Nullable_Boolean;
             Enable_Login_Emails : in Swagger.Nullable_Boolean;
             Message_Content_In_Email_Notifications : in Swagger.Nullable_Boolean;
             Pm_Content_In_Desktop_Notifications : in Swagger.Nullable_Boolean;
             Wildcard_Mentions_Notify : in Swagger.Nullable_Boolean;
             Desktop_Icon_Count_Display : in Swagger.Nullable_Integer;
             Realm_Name_In_Notifications : in Swagger.Nullable_Boolean;
             Presence_Enabled : in Swagger.Nullable_Boolean;
             Enter_Sends : in Swagger.Nullable_Boolean;
             Result : out .Models.JsonSuccessBase_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Settings
               (Full_Name,
                Email,
                Old_Password,
                New_Password,
                Twenty_Four_Hour_Time,
                Dense_Mode,
                Starred_Message_Counts,
                Fluid_Layout_Width,
                High_Contrast_Mode,
                Color_Scheme,
                Enable_Drafts_Synchronization,
                Translate_Emoticons,
                Default_Language,
                Default_View,
                Left_Side_Userlist,
                Emojiset,
                Demote_Inactive_Streams,
                Timezone,
                Enable_Stream_Desktop_Notifications,
                Enable_Stream_Email_Notifications,
                Enable_Stream_Push_Notifications,
                Enable_Stream_Audible_Notifications,
                Notification_Sound,
                Enable_Desktop_Notifications,
                Enable_Sounds,
                Email_Notifications_Batching_Period_Seconds,
                Enable_Offline_Email_Notifications,
                Enable_Offline_Push_Notifications,
                Enable_Online_Push_Notifications,
                Enable_Digest_Emails,
                Enable_Marketing_Emails,
                Enable_Login_Emails,
                Message_Content_In_Email_Notifications,
                Pm_Content_In_Desktop_Notifications,
                Wildcard_Mentions_Notify,
                Desktop_Icon_Count_Display,
                Realm_Name_In_Notifications,
                Presence_Enabled,
                Enter_Sends,
                Result,
                Context);
         end Update_Settings;

         --  Update your status
         procedure Update_Status
            (Status_Text : in Swagger.Nullable_UString;
             Away : in Swagger.Nullable_Boolean;
             Emoji_Name : in Swagger.Nullable_UString;
             Emoji_Code : in Swagger.Nullable_UString;
             Reaction_Type : in Swagger.Nullable_UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_Status
               (Status_Text,
                Away,
                Emoji_Name,
                Emoji_Code,
                Reaction_Type,
                Result,
                Context);
         end Update_Status;

         --  Update a user
         procedure Update_User
            (User_Id : in Integer;
             Full_Name : in Swagger.Nullable_UString;
             Role : in Swagger.Nullable_Integer;
             Profile_Data : in Swagger.Object_Vectors.Vector;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_User
               (User_Id,
                Full_Name,
                Role,
                Profile_Data,
                Result,
                Context);
         end Update_User;

         --  Update a user group
         procedure Update_User_Group
            (User_Group_Id : in Integer;
             Name : in Swagger.UString;
             Description : in Swagger.UString;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_User_Group
               (User_Group_Id,
                Name,
                Description,
                Result,
                Context);
         end Update_User_Group;

         --  Update user group members
         procedure Update_User_Group_Members
            (User_Group_Id : in Integer;
             Delete : in Integer_Vectors.Vector;
             Add : in Integer_Vectors.Vector;
             Result : out .Models.JsonSuccess_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Update_User_Group_Members
               (User_Group_Id,
                Delete,
                Add,
                Result,
                Context);
         end Update_User_Group_Members;

         --  Outgoing webhooks
         procedure Zulip_Outgoing_Webhooks (Result : out .Models.InlineResponse200_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Zulip_Outgoing_Webhooks (Result, Context);
         end Zulip_Outgoing_Webhooks;

      end Server;

   end Shared_Instance;

end .Skeletons;
