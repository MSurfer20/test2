/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.CodedError;
import org.openapitools.model.JsonError;
import org.openapitools.model.JsonSuccess;
import org.openapitools.model.JsonSuccessBase;
import org.openapitools.model.OneOfobjectobject;
import org.openapitools.model.OneOfobjectobjectobject;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Zulip REST API
 *
 * <p>Powerful open source group chat 
 *
 * API tests for UsersApi 
 */
public class UsersApiTest {


    private UsersApi api;
    
    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);
        
        api = JAXRSClientFactory.create("https://example.zulipchat.com/api/v1", UsersApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);
        
        ClientConfiguration config = WebClient.getConfig(client); 
    }

    
    /**
     * Create a user
     *
     * {!can-create-users-only.md!}  Create a new user account via the API.  &#x60;POST {{ api_url }}/v1/users&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() {
        String email = null;
        String password = null;
        String fullName = null;
        //JsonSuccessBase response = api.createUser(email, password, fullName);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Create a user group
     *
     * Create a new [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/create&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserGroupTest() {
        String name = null;
        String description = null;
        List<Integer> members = null;
        //JsonSuccess response = api.createUserGroup(name, description, members);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Deactivate own user
     *
     * Deactivates the user&#39;s account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  &#x60;DELETE {{ api_url }}/v1/users/me&#x60;  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivateOwnUserTest() {
        //JsonSuccess response = api.deactivateOwnUser();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Deactivate a user
     *
     * [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;DELETE {{ api_url }}/v1/users/{user_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivateUserTest() {
        Integer userId = null;
        //JsonSuccess response = api.deactivateUser(userId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get attachments
     *
     * Fetch metadata on files uploaded by the requesting user.  &#x60;GET {{ api_url }}/v1/attachments&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() {
        //JsonSuccessBase response = api.getAttachments();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get own user
     *
     * Get basic data about the user/bot that requests this endpoint.  &#x60;GET {{ api_url }}/v1/users/me&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOwnUserTest() {
        //JsonSuccessBase response = api.getOwnUser();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get a user
     *
     * Fetch details for a single user in the organization.  &#x60;GET {{ api_url }}/v1/users/{user_id}&#x60;  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() {
        Integer userId = null;
        Boolean clientGravatar = null;
        Boolean includeCustomProfileFields = null;
        //JsonSuccessBase response = api.getUser(userId, clientGravatar, includeCustomProfileFields);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get a user by email
     *
     * Fetch details for a single user in the organization given a Zulip display email address.  &#x60;GET {{ api_url }}/v1/users/{email}&#x60;  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByEmailTest() {
        String email = null;
        Boolean clientGravatar = null;
        Boolean includeCustomProfileFields = null;
        //JsonSuccessBase response = api.getUserByEmail(email, clientGravatar, includeCustomProfileFields);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get user groups
     *
     * {!api-members-only.md!}  Fetches all of the user groups in the organization.  &#x60;GET {{ api_url }}/v1/user_groups&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserGroupsTest() {
        //JsonSuccessBase response = api.getUserGroups();
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get user presence
     *
     * Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user&#39;s presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  &#x60;GET {{ api_url }}/v1/users/{user_id_or_email}/presence&#x60;  See [Zulip&#39;s developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserPresenceTest() {
        String userIdOrEmail = null;
        //JsonSuccessBase response = api.getUserPresence(userIdOrEmail);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Get all users
     *
     * Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  &#x60;GET {{ api_url }}/v1/users&#x60;  You can also [fetch details on a single user](/api/get-user). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() {
        Boolean clientGravatar = null;
        Boolean includeCustomProfileFields = null;
        //JsonSuccessBase response = api.getUsers(clientGravatar, includeCustomProfileFields);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Mute a user
     *
     * This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you&#39;ve muted will be automatically marked as read and hidden.  &#x60;POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \&quot;Muted user\&quot;, rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \&quot;All users that exist   on this stream or realm\&quot;, e.g. for organization   administration or showing stream subscribers, should display   the user&#39;s name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteUserTest() {
        Integer mutedUserId = null;
        //JsonSuccess response = api.muteUser(mutedUserId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Reactivate a user
     *
     * [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  &#x60;POST {{ api_url }}/v1/users/{user_id}/reactivate&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reactivateUserTest() {
        Integer userId = null;
        //Object response = api.reactivateUser(userId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Delete a user group
     *
     * Delete a [user group](/help/user-groups).  &#x60;DELETE {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUserGroupTest() {
        Integer userGroupId = null;
        //JsonSuccess response = api.removeUserGroup(userGroupId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Set \&quot;typing\&quot; status
     *
     * Notify other users whether the current user is typing a message.  &#x60;POST {{ api_url }}/v1/typing&#x60;  Clients implementing Zulip&#39;s typing notifications protocol should work as follows:  * Send a request to this endpoint with &#x60;op&#x3D;\&quot;start\&quot;&#x60; when a user starts typing a message,   and also every &#x60;TYPING_STARTED_WAIT_PERIOD&#x3D;10&#x60; seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with &#x60;op&#x3D;\&quot;stop\&quot;&#x60; when a user pauses using the   compose UI for at least &#x60;TYPING_STOPPED_WAIT_PERIOD&#x3D;5&#x60; seconds or cancels   the compose action (if it had previously sent a \&quot;start\&quot; operation for that   compose action). * Start displaying \&quot;Sender is typing\&quot; for a given conversation when the client   receives an &#x60;op&#x3D;\&quot;start\&quot;&#x60; event from the [events API](/api/get-events). * Continue displaying \&quot;Sender is typing\&quot; until they receive an &#x60;op&#x3D;\&quot;stop\&quot;&#x60; event   from the [events API](/api/get-events) or &#x60;TYPING_STARTED_EXPIRY_PERIOD&#x3D;15&#x60;   seconds have passed without a new &#x60;op&#x3D;\&quot;start\&quot;&#x60; event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   &#x60;stream_typing_notifications&#x60; in the &#x60;client_capabilities&#x60; parameter to &#x60;/register&#x60;.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip&#39;s typing notifications protocol. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setTypingStatusTest() {
        String op = null;
        List<Integer> to = null;
        String type = null;
        String topic = null;
        //JsonSuccess response = api.setTypingStatus(op, to, type, topic);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Unmute a user
     *
     * This endpoint unmutes a user.  &#x60;DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 48). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unmuteUserTest() {
        Integer mutedUserId = null;
        //JsonSuccess response = api.unmuteUser(mutedUserId);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update display settings
     *
     * This endpoint is used to edit the current user&#39;s user interface settings.  &#x60;PATCH {{ api_url }}/v1/settings/display&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDisplaySettingsTest() {
        Boolean twentyFourHourTime = null;
        Boolean denseMode = null;
        Boolean starredMessageCounts = null;
        Boolean fluidLayoutWidth = null;
        Boolean highContrastMode = null;
        Integer colorScheme = null;
        Boolean translateEmoticons = null;
        String defaultLanguage = null;
        String defaultView = null;
        Boolean leftSideUserlist = null;
        String emojiset = null;
        Integer demoteInactiveStreams = null;
        String timezone = null;
        //JsonSuccessBase response = api.updateDisplaySettings(twentyFourHourTime, denseMode, starredMessageCounts, fluidLayoutWidth, highContrastMode, colorScheme, translateEmoticons, defaultLanguage, defaultView, leftSideUserlist, emojiset, demoteInactiveStreams, timezone);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update notification settings
     *
     * This endpoint is used to edit the user&#39;s global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  &#x60;PATCH {{ api_url }}/v1/settings/notifications&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationSettingsTest() {
        Boolean enableStreamDesktopNotifications = null;
        Boolean enableStreamEmailNotifications = null;
        Boolean enableStreamPushNotifications = null;
        Boolean enableStreamAudibleNotifications = null;
        String notificationSound = null;
        Boolean enableDesktopNotifications = null;
        Boolean enableSounds = null;
        Boolean enableOfflineEmailNotifications = null;
        Boolean enableOfflinePushNotifications = null;
        Boolean enableOnlinePushNotifications = null;
        Boolean enableDigestEmails = null;
        Boolean enableMarketingEmails = null;
        Boolean enableLoginEmails = null;
        Boolean messageContentInEmailNotifications = null;
        Boolean pmContentInDesktopNotifications = null;
        Boolean wildcardMentionsNotify = null;
        Integer desktopIconCountDisplay = null;
        Boolean realmNameInNotifications = null;
        Boolean presenceEnabled = null;
        //JsonSuccessBase response = api.updateNotificationSettings(enableStreamDesktopNotifications, enableStreamEmailNotifications, enableStreamPushNotifications, enableStreamAudibleNotifications, notificationSound, enableDesktopNotifications, enableSounds, enableOfflineEmailNotifications, enableOfflinePushNotifications, enableOnlinePushNotifications, enableDigestEmails, enableMarketingEmails, enableLoginEmails, messageContentInEmailNotifications, pmContentInDesktopNotifications, wildcardMentionsNotify, desktopIconCountDisplay, realmNameInNotifications, presenceEnabled);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update a user
     *
     * Administrative endpoint to update the details of another user in the organization.  &#x60;PATCH {{ api_url }}/v1/users/{user_id}&#x60;  Supports everything an administrator can do to edit details of another user&#39;s account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() {
        Integer userId = null;
        String fullName = null;
        Integer role = null;
        List<Object> profileData = null;
        //JsonSuccess response = api.updateUser(userId, fullName, role, profileData);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update a user group
     *
     * Update the name or description of a [user group](/help/user-groups).  &#x60;PATCH {{ api_url }}/v1/user_groups/{user_group_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserGroupTest() {
        Integer userGroupId = null;
        String name = null;
        String description = null;
        //JsonSuccess response = api.updateUserGroup(userGroupId, name, description);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
    /**
     * Update user group members
     *
     * Update the members of a [user group](/help/user-groups).  &#x60;POST {{ api_url }}/v1/user_groups/{user_group_id}/members&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserGroupMembersTest() {
        Integer userGroupId = null;
        List<Integer> delete = null;
        List<Integer> add = null;
        //JsonSuccess response = api.updateUserGroupMembers(userGroupId, delete, add);
        //assertNotNull(response);
        // TODO: test validations
        
        
    }
    
}
