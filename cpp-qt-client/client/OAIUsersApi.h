/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIAnyType.h"
#include "OAICodedError.h"
#include "OAIJsonError.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include "OAIOneOfobjectobject.h"
#include "OAIOneOfobjectobjectobject.h"
#include "OAIOneOfobjectobjectobjectobjectobjectobject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  email QString [required]
    * @param[in]  password QString [required]
    * @param[in]  full_name QString [required]
    */
    void createUser(const QString &email, const QString &password, const QString &full_name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  description QString [required]
    * @param[in]  members QList<qint32> [required]
    */
    void createUserGroup(const QString &name, const QString &description, const QList<qint32> &members);


    void deactivateOwnUser();

    /**
    * @param[in]  user_id qint32 [required]
    */
    void deactivateUser(const qint32 &user_id);


    void getAttachments();


    void getOwnUser();

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  client_gravatar bool [optional]
    * @param[in]  include_custom_profile_fields bool [optional]
    */
    void getUser(const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &client_gravatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  client_gravatar bool [optional]
    * @param[in]  include_custom_profile_fields bool [optional]
    */
    void getUserByEmail(const QString &email, const ::OpenAPI::OptionalParam<bool> &client_gravatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields = ::OpenAPI::OptionalParam<bool>());


    void getUserGroups();

    /**
    * @param[in]  user_id_or_email QString [required]
    */
    void getUserPresence(const QString &user_id_or_email);

    /**
    * @param[in]  client_gravatar bool [optional]
    * @param[in]  include_custom_profile_fields bool [optional]
    */
    void getUsers(const ::OpenAPI::OptionalParam<bool> &client_gravatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  muted_user_id qint32 [required]
    */
    void muteUser(const qint32 &muted_user_id);

    /**
    * @param[in]  user_id qint32 [required]
    */
    void reactivateUser(const qint32 &user_id);

    /**
    * @param[in]  user_group_id qint32 [required]
    */
    void removeUserGroup(const qint32 &user_group_id);

    /**
    * @param[in]  op QString [required]
    * @param[in]  to QList<qint32> [required]
    * @param[in]  type QString [optional]
    * @param[in]  topic QString [optional]
    */
    void setTypingStatus(const QString &op, const QList<qint32> &to, const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  muted_user_id qint32 [required]
    */
    void unmuteUser(const qint32 &muted_user_id);

    /**
    * @param[in]  full_name QString [optional]
    * @param[in]  email QString [optional]
    * @param[in]  old_password QString [optional]
    * @param[in]  new_password QString [optional]
    * @param[in]  twenty_four_hour_time bool [optional]
    * @param[in]  dense_mode bool [optional]
    * @param[in]  starred_message_counts bool [optional]
    * @param[in]  fluid_layout_width bool [optional]
    * @param[in]  high_contrast_mode bool [optional]
    * @param[in]  color_scheme qint32 [optional]
    * @param[in]  enable_drafts_synchronization bool [optional]
    * @param[in]  translate_emoticons bool [optional]
    * @param[in]  default_language QString [optional]
    * @param[in]  default_view QString [optional]
    * @param[in]  left_side_userlist bool [optional]
    * @param[in]  emojiset QString [optional]
    * @param[in]  demote_inactive_streams qint32 [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  enable_stream_desktop_notifications bool [optional]
    * @param[in]  enable_stream_email_notifications bool [optional]
    * @param[in]  enable_stream_push_notifications bool [optional]
    * @param[in]  enable_stream_audible_notifications bool [optional]
    * @param[in]  notification_sound QString [optional]
    * @param[in]  enable_desktop_notifications bool [optional]
    * @param[in]  enable_sounds bool [optional]
    * @param[in]  email_notifications_batching_period_seconds qint32 [optional]
    * @param[in]  enable_offline_email_notifications bool [optional]
    * @param[in]  enable_offline_push_notifications bool [optional]
    * @param[in]  enable_online_push_notifications bool [optional]
    * @param[in]  enable_digest_emails bool [optional]
    * @param[in]  enable_marketing_emails bool [optional]
    * @param[in]  enable_login_emails bool [optional]
    * @param[in]  message_content_in_email_notifications bool [optional]
    * @param[in]  pm_content_in_desktop_notifications bool [optional]
    * @param[in]  wildcard_mentions_notify bool [optional]
    * @param[in]  desktop_icon_count_display qint32 [optional]
    * @param[in]  realm_name_in_notifications bool [optional]
    * @param[in]  presence_enabled bool [optional]
    * @param[in]  enter_sends bool [optional]
    */
    void updateSettings(const ::OpenAPI::OptionalParam<QString> &full_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &old_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &new_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &twenty_four_hour_time = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &dense_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &starred_message_counts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &fluid_layout_width = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &high_contrast_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &color_scheme = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_drafts_synchronization = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &translate_emoticons = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &default_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &left_side_userlist = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &emojiset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &demote_inactive_streams = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_stream_desktop_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_stream_email_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_stream_push_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_stream_audible_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &notification_sound = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enable_desktop_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_sounds = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &email_notifications_batching_period_seconds = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &enable_offline_email_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_offline_push_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_online_push_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_digest_emails = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_marketing_emails = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enable_login_emails = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &message_content_in_email_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pm_content_in_desktop_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &wildcard_mentions_notify = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &desktop_icon_count_display = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &realm_name_in_notifications = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &presence_enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enter_sends = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  status_text QString [optional]
    * @param[in]  away bool [optional]
    * @param[in]  emoji_name QString [optional]
    * @param[in]  emoji_code QString [optional]
    * @param[in]  reaction_type QString [optional]
    */
    void updateStatus(const ::OpenAPI::OptionalParam<QString> &status_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &away = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &emoji_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emoji_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reaction_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint32 [required]
    * @param[in]  full_name QString [optional]
    * @param[in]  role qint32 [optional]
    * @param[in]  profile_data QList<OAIObject> [optional]
    */
    void updateUser(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &full_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &role = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &profile_data = ::OpenAPI::OptionalParam<QList<OAIObject>>());

    /**
    * @param[in]  user_group_id qint32 [required]
    * @param[in]  name QString [required]
    * @param[in]  description QString [required]
    */
    void updateUserGroup(const qint32 &user_group_id, const QString &name, const QString &description);

    /**
    * @param[in]  user_group_id qint32 [required]
    * @param[in]  r_delete QList<qint32> [optional]
    * @param[in]  add QList<qint32> [optional]
    */
    void updateUserGroupMembers(const qint32 &user_group_id, const ::OpenAPI::OptionalParam<QList<qint32>> &r_delete = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &add = ::OpenAPI::OptionalParam<QList<qint32>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void createUserCallback(OAIHttpRequestWorker *worker);
    void createUserGroupCallback(OAIHttpRequestWorker *worker);
    void deactivateOwnUserCallback(OAIHttpRequestWorker *worker);
    void deactivateUserCallback(OAIHttpRequestWorker *worker);
    void getAttachmentsCallback(OAIHttpRequestWorker *worker);
    void getOwnUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserByEmailCallback(OAIHttpRequestWorker *worker);
    void getUserGroupsCallback(OAIHttpRequestWorker *worker);
    void getUserPresenceCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void muteUserCallback(OAIHttpRequestWorker *worker);
    void reactivateUserCallback(OAIHttpRequestWorker *worker);
    void removeUserGroupCallback(OAIHttpRequestWorker *worker);
    void setTypingStatusCallback(OAIHttpRequestWorker *worker);
    void unmuteUserCallback(OAIHttpRequestWorker *worker);
    void updateSettingsCallback(OAIHttpRequestWorker *worker);
    void updateStatusCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUserGroupCallback(OAIHttpRequestWorker *worker);
    void updateUserGroupMembersCallback(OAIHttpRequestWorker *worker);

signals:

    void createUserSignal(OAIJsonSuccessBase summary);
    void createUserGroupSignal(OAIJsonSuccess summary);
    void deactivateOwnUserSignal(OAIJsonSuccess summary);
    void deactivateUserSignal(OAIJsonSuccess summary);
    void getAttachmentsSignal(OAIJsonSuccessBase summary);
    void getOwnUserSignal(OAIJsonSuccessBase summary);
    void getUserSignal(OAIJsonSuccessBase summary);
    void getUserByEmailSignal(OAIJsonSuccessBase summary);
    void getUserGroupsSignal(OAIJsonSuccessBase summary);
    void getUserPresenceSignal(OAIJsonSuccessBase summary);
    void getUsersSignal(OAIJsonSuccessBase summary);
    void muteUserSignal(OAIJsonSuccess summary);
    void reactivateUserSignal(OAIAnyType summary);
    void removeUserGroupSignal(OAIJsonSuccess summary);
    void setTypingStatusSignal(OAIJsonSuccess summary);
    void unmuteUserSignal(OAIJsonSuccess summary);
    void updateSettingsSignal(OAIJsonSuccessBase summary);
    void updateStatusSignal(OAIJsonSuccess summary);
    void updateUserSignal(OAIJsonSuccess summary);
    void updateUserGroupSignal(OAIJsonSuccess summary);
    void updateUserGroupMembersSignal(OAIJsonSuccess summary);

    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void createUserGroupSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void deactivateOwnUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void deactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void getAttachmentsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getOwnUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getUserByEmailSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getUserPresenceSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void muteUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void reactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIAnyType summary);
    void removeUserGroupSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void setTypingStatusSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void unmuteUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateSettingsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void updateStatusSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateUserGroupSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateUserGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);

    void createUserSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserGroupSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateOwnUserSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnUserSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByEmailSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPresenceSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void muteUserSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalE(OAIAnyType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserGroupSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setTypingStatusSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteUserSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupMembersSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateOwnUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttachmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOwnUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void muteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setTypingStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
