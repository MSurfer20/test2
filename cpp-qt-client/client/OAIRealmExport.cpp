/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealmExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealmExport::OAIRealmExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealmExport::OAIRealmExport() {
    this->initializeModel();
}

OAIRealmExport::~OAIRealmExport() {}

void OAIRealmExport::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_acting_user_id_isSet = false;
    m_acting_user_id_isValid = false;

    m_export_time_isSet = false;
    m_export_time_isValid = false;

    m_deleted_timestamp_isSet = false;
    m_deleted_timestamp_isValid = false;

    m_failed_timestamp_isSet = false;
    m_failed_timestamp_isValid = false;

    m_export_url_isSet = false;
    m_export_url_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;
}

void OAIRealmExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealmExport::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_acting_user_id_isValid = ::OpenAPI::fromJsonValue(acting_user_id, json[QString("acting_user_id")]);
    m_acting_user_id_isSet = !json[QString("acting_user_id")].isNull() && m_acting_user_id_isValid;

    m_export_time_isValid = ::OpenAPI::fromJsonValue(export_time, json[QString("export_time")]);
    m_export_time_isSet = !json[QString("export_time")].isNull() && m_export_time_isValid;

    m_deleted_timestamp_isValid = ::OpenAPI::fromJsonValue(deleted_timestamp, json[QString("deleted_timestamp")]);
    m_deleted_timestamp_isSet = !json[QString("deleted_timestamp")].isNull() && m_deleted_timestamp_isValid;

    m_failed_timestamp_isValid = ::OpenAPI::fromJsonValue(failed_timestamp, json[QString("failed_timestamp")]);
    m_failed_timestamp_isSet = !json[QString("failed_timestamp")].isNull() && m_failed_timestamp_isValid;

    m_export_url_isValid = ::OpenAPI::fromJsonValue(export_url, json[QString("export_url")]);
    m_export_url_isSet = !json[QString("export_url")].isNull() && m_export_url_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;
}

QString OAIRealmExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealmExport::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_acting_user_id_isSet) {
        obj.insert(QString("acting_user_id"), ::OpenAPI::toJsonValue(acting_user_id));
    }
    if (m_export_time_isSet) {
        obj.insert(QString("export_time"), ::OpenAPI::toJsonValue(export_time));
    }
    if (m_deleted_timestamp_isSet) {
        obj.insert(QString("deleted_timestamp"), ::OpenAPI::toJsonValue(deleted_timestamp));
    }
    if (m_failed_timestamp_isSet) {
        obj.insert(QString("failed_timestamp"), ::OpenAPI::toJsonValue(failed_timestamp));
    }
    if (m_export_url_isSet) {
        obj.insert(QString("export_url"), ::OpenAPI::toJsonValue(export_url));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(pending));
    }
    return obj;
}

qint32 OAIRealmExport::getId() const {
    return id;
}
void OAIRealmExport::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIRealmExport::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRealmExport::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRealmExport::getActingUserId() const {
    return acting_user_id;
}
void OAIRealmExport::setActingUserId(const qint32 &acting_user_id) {
    this->acting_user_id = acting_user_id;
    this->m_acting_user_id_isSet = true;
}

bool OAIRealmExport::is_acting_user_id_Set() const{
    return m_acting_user_id_isSet;
}

bool OAIRealmExport::is_acting_user_id_Valid() const{
    return m_acting_user_id_isValid;
}

double OAIRealmExport::getExportTime() const {
    return export_time;
}
void OAIRealmExport::setExportTime(const double &export_time) {
    this->export_time = export_time;
    this->m_export_time_isSet = true;
}

bool OAIRealmExport::is_export_time_Set() const{
    return m_export_time_isSet;
}

bool OAIRealmExport::is_export_time_Valid() const{
    return m_export_time_isValid;
}

double OAIRealmExport::getDeletedTimestamp() const {
    return deleted_timestamp;
}
void OAIRealmExport::setDeletedTimestamp(const double &deleted_timestamp) {
    this->deleted_timestamp = deleted_timestamp;
    this->m_deleted_timestamp_isSet = true;
}

bool OAIRealmExport::is_deleted_timestamp_Set() const{
    return m_deleted_timestamp_isSet;
}

bool OAIRealmExport::is_deleted_timestamp_Valid() const{
    return m_deleted_timestamp_isValid;
}

double OAIRealmExport::getFailedTimestamp() const {
    return failed_timestamp;
}
void OAIRealmExport::setFailedTimestamp(const double &failed_timestamp) {
    this->failed_timestamp = failed_timestamp;
    this->m_failed_timestamp_isSet = true;
}

bool OAIRealmExport::is_failed_timestamp_Set() const{
    return m_failed_timestamp_isSet;
}

bool OAIRealmExport::is_failed_timestamp_Valid() const{
    return m_failed_timestamp_isValid;
}

QString OAIRealmExport::getExportUrl() const {
    return export_url;
}
void OAIRealmExport::setExportUrl(const QString &export_url) {
    this->export_url = export_url;
    this->m_export_url_isSet = true;
}

bool OAIRealmExport::is_export_url_Set() const{
    return m_export_url_isSet;
}

bool OAIRealmExport::is_export_url_Valid() const{
    return m_export_url_isValid;
}

bool OAIRealmExport::isPending() const {
    return pending;
}
void OAIRealmExport::setPending(const bool &pending) {
    this->pending = pending;
    this->m_pending_isSet = true;
}

bool OAIRealmExport::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIRealmExport::is_pending_Valid() const{
    return m_pending_isValid;
}

bool OAIRealmExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acting_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealmExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
