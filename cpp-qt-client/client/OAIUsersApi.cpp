/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsersApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIUsersApi::OAIUsersApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIUsersApi::~OAIUsersApi() {
}

void OAIUsersApi::initializeServerConfigs(){
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://{subdomain}.zulipchat.com/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"subdomain", OAIServerVariable("No description provided","example",
    QSet<QString>{ {"example"} })}, }));
    
    defaultConf.append(OAIServerConfiguration(
    QUrl("{server}/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"server", OAIServerVariable("No description provided","https://",
    QSet<QString>{ {"https://"} })}, }));
    
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://chat.zulip.org/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://localhost:9991/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createUser", defaultConf);
    _serverIndices.insert("createUser", 0);
    _serverConfigs.insert("createUserGroup", defaultConf);
    _serverIndices.insert("createUserGroup", 0);
    _serverConfigs.insert("deactivateOwnUser", defaultConf);
    _serverIndices.insert("deactivateOwnUser", 0);
    _serverConfigs.insert("deactivateUser", defaultConf);
    _serverIndices.insert("deactivateUser", 0);
    _serverConfigs.insert("getAttachments", defaultConf);
    _serverIndices.insert("getAttachments", 0);
    _serverConfigs.insert("getOwnUser", defaultConf);
    _serverIndices.insert("getOwnUser", 0);
    _serverConfigs.insert("getUser", defaultConf);
    _serverIndices.insert("getUser", 0);
    _serverConfigs.insert("getUserByEmail", defaultConf);
    _serverIndices.insert("getUserByEmail", 0);
    _serverConfigs.insert("getUserGroups", defaultConf);
    _serverIndices.insert("getUserGroups", 0);
    _serverConfigs.insert("getUserPresence", defaultConf);
    _serverIndices.insert("getUserPresence", 0);
    _serverConfigs.insert("getUsers", defaultConf);
    _serverIndices.insert("getUsers", 0);
    _serverConfigs.insert("muteUser", defaultConf);
    _serverIndices.insert("muteUser", 0);
    _serverConfigs.insert("reactivateUser", defaultConf);
    _serverIndices.insert("reactivateUser", 0);
    _serverConfigs.insert("removeUserGroup", defaultConf);
    _serverIndices.insert("removeUserGroup", 0);
    _serverConfigs.insert("setTypingStatus", defaultConf);
    _serverIndices.insert("setTypingStatus", 0);
    _serverConfigs.insert("unmuteUser", defaultConf);
    _serverIndices.insert("unmuteUser", 0);
    _serverConfigs.insert("updateSettings", defaultConf);
    _serverIndices.insert("updateSettings", 0);
    _serverConfigs.insert("updateStatus", defaultConf);
    _serverIndices.insert("updateStatus", 0);
    _serverConfigs.insert("updateUser", defaultConf);
    _serverIndices.insert("updateUser", 0);
    _serverConfigs.insert("updateUserGroup", defaultConf);
    _serverIndices.insert("updateUserGroup", 0);
    _serverConfigs.insert("updateUserGroupMembers", defaultConf);
    _serverIndices.insert("updateUserGroupMembers", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIUsersApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIUsersApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void OAIUsersApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void OAIUsersApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void OAIUsersApi::setUsername(const QString &username) {
    _username = username;
}

void OAIUsersApi::setPassword(const QString &password) {
    _password = password;
}


void OAIUsersApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIUsersApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIUsersApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIUsersApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    if(_serverConfigs.contains(operation)){
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    }else{
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUsersApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    for(auto e : _serverIndices.keys()){
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIUsersApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIUsersApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIUsersApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIUsersApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIUsersApi::abortRequests(){
    emit abortRequestsSignal();
}

QString OAIUsersApi::getParamStylePrefix(QString style){
    if(style == "matrix"){
        return ";";
    }else if(style == "label"){
        return ".";
    }else if(style == "form"){
        return "&";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "&";
    }else if(style == "pipeDelimited"){
        return "&";
    }else{
        return "none";
    }
}

QString OAIUsersApi::getParamStyleSuffix(QString style){
    if(style == "matrix"){
        return "=";
    }else if(style == "label"){
        return "";
    }else if(style == "form"){
        return "=";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "=";
    }else if(style == "pipeDelimited"){
        return "=";
    }else{
        return "none";
    }
}

QString OAIUsersApi::getParamStyleDelimiter(QString style, QString name, bool isExplode){

    if(style == "matrix"){
        return (isExplode) ? ";" + name + "=" : ",";

    }else if(style == "label"){
        return (isExplode) ? "." : ",";

    }else if(style == "form"){
        return (isExplode) ? "&" + name + "=" : ",";

    }else if(style == "simple"){
        return ",";
    }else if(style == "spaceDelimited"){
        return (isExplode) ? "&" + name + "=" : " ";

    }else if(style == "pipeDelimited"){
        return (isExplode) ? "&" + name + "=" : "|";

    }else if(style == "deepObject"){
        return (isExplode) ? "&" : "none";

    }else {
        return "none";
    }
}

void OAIUsersApi::createUser(const QString &email, const QString &password, const QString &full_name) {
    QString fullPath = QString(_serverConfigs["createUser"][_serverIndices.value("createUser")].URL()+"/users");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "email", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("email")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(email)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "password", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("password")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(password)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "full_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("full_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::createUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::createUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createUserSignal(output);
        emit createUserSignalFull(worker, output);
    } else {
        emit createUserSignalE(output, error_type, error_str);
        emit createUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::createUserGroup(const QString &name, const QString &description, const QList<qint32> &members) {
    QString fullPath = QString(_serverConfigs["createUserGroup"][_serverIndices.value("createUserGroup")].URL()+"/user_groups/create");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(description)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "members", true);
        if(members.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, members) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("members=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("members").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, members) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("members").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, members) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("members").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, members) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("members").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, members) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("members").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, members) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::createUserGroupCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::createUserGroupCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createUserGroupSignal(output);
        emit createUserGroupSignalFull(worker, output);
    } else {
        emit createUserGroupSignalE(output, error_type, error_str);
        emit createUserGroupSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::deactivateOwnUser() {
    QString fullPath = QString(_serverConfigs["deactivateOwnUser"][_serverIndices.value("deactivateOwnUser")].URL()+"/users/me");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::deactivateOwnUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::deactivateOwnUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deactivateOwnUserSignal(output);
        emit deactivateOwnUserSignalFull(worker, output);
    } else {
        emit deactivateOwnUserSignalE(output, error_type, error_str);
        emit deactivateOwnUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::deactivateUser(const qint32 &user_id) {
    QString fullPath = QString(_serverConfigs["deactivateUser"][_serverIndices.value("deactivateUser")].URL()+"/users/{user_id}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::deactivateUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::deactivateUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deactivateUserSignal(output);
        emit deactivateUserSignalFull(worker, output);
    } else {
        emit deactivateUserSignalE(output, error_type, error_str);
        emit deactivateUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getAttachments() {
    QString fullPath = QString(_serverConfigs["getAttachments"][_serverIndices.value("getAttachments")].URL()+"/attachments");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getAttachmentsCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getAttachmentsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getAttachmentsSignal(output);
        emit getAttachmentsSignalFull(worker, output);
    } else {
        emit getAttachmentsSignalE(output, error_type, error_str);
        emit getAttachmentsSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getOwnUser() {
    QString fullPath = QString(_serverConfigs["getOwnUser"][_serverIndices.value("getOwnUser")].URL()+"/users/me");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getOwnUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getOwnUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getOwnUserSignal(output);
        emit getOwnUserSignalFull(worker, output);
    } else {
        emit getOwnUserSignalE(output, error_type, error_str);
        emit getOwnUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getUser(const qint32 &user_id, const ::OpenAPI::OptionalParam<bool> &client_gravatar, const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields) {
    QString fullPath = QString(_serverConfigs["getUser"][_serverIndices.value("getUser")].URL()+"/users/{user_id}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(client_gravatar.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_gravatar", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_gravatar")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_gravatar.value())));
    }
    if(include_custom_profile_fields.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_custom_profile_fields", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_custom_profile_fields")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_custom_profile_fields.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserSignal(output);
        emit getUserSignalFull(worker, output);
    } else {
        emit getUserSignalE(output, error_type, error_str);
        emit getUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getUserByEmail(const QString &email, const ::OpenAPI::OptionalParam<bool> &client_gravatar, const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields) {
    QString fullPath = QString(_serverConfigs["getUserByEmail"][_serverIndices.value("getUserByEmail")].URL()+"/users/{email}");
    
    
    {
        QString emailPathParam("{");
        emailPathParam.append("email").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "email", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"email"+pathSuffix : pathPrefix;
        fullPath.replace(emailPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(email)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(client_gravatar.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_gravatar", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_gravatar")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_gravatar.value())));
    }
    if(include_custom_profile_fields.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_custom_profile_fields", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_custom_profile_fields")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_custom_profile_fields.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getUserByEmailCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getUserByEmailCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserByEmailSignal(output);
        emit getUserByEmailSignalFull(worker, output);
    } else {
        emit getUserByEmailSignalE(output, error_type, error_str);
        emit getUserByEmailSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getUserGroups() {
    QString fullPath = QString(_serverConfigs["getUserGroups"][_serverIndices.value("getUserGroups")].URL()+"/user_groups");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getUserGroupsCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getUserGroupsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserGroupsSignal(output);
        emit getUserGroupsSignalFull(worker, output);
    } else {
        emit getUserGroupsSignalE(output, error_type, error_str);
        emit getUserGroupsSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getUserPresence(const QString &user_id_or_email) {
    QString fullPath = QString(_serverConfigs["getUserPresence"][_serverIndices.value("getUserPresence")].URL()+"/users/{user_id_or_email}/presence");
    
    
    {
        QString user_id_or_emailPathParam("{");
        user_id_or_emailPathParam.append("user_id_or_email").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id_or_email", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id_or_email"+pathSuffix : pathPrefix;
        fullPath.replace(user_id_or_emailPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id_or_email)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getUserPresenceCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getUserPresenceCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUserPresenceSignal(output);
        emit getUserPresenceSignalFull(worker, output);
    } else {
        emit getUserPresenceSignalE(output, error_type, error_str);
        emit getUserPresenceSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::getUsers(const ::OpenAPI::OptionalParam<bool> &client_gravatar, const ::OpenAPI::OptionalParam<bool> &include_custom_profile_fields) {
    QString fullPath = QString(_serverConfigs["getUsers"][_serverIndices.value("getUsers")].URL()+"/users");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(client_gravatar.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_gravatar", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_gravatar")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_gravatar.value())));
    }
    if(include_custom_profile_fields.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_custom_profile_fields", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_custom_profile_fields")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_custom_profile_fields.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::getUsersCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::getUsersCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getUsersSignal(output);
        emit getUsersSignalFull(worker, output);
    } else {
        emit getUsersSignalE(output, error_type, error_str);
        emit getUsersSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::muteUser(const qint32 &muted_user_id) {
    QString fullPath = QString(_serverConfigs["muteUser"][_serverIndices.value("muteUser")].URL()+"/users/me/muted_users/{muted_user_id}");
    
    
    {
        QString muted_user_idPathParam("{");
        muted_user_idPathParam.append("muted_user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "muted_user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"muted_user_id"+pathSuffix : pathPrefix;
        fullPath.replace(muted_user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(muted_user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::muteUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::muteUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit muteUserSignal(output);
        emit muteUserSignalFull(worker, output);
    } else {
        emit muteUserSignalE(output, error_type, error_str);
        emit muteUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::reactivateUser(const qint32 &user_id) {
    QString fullPath = QString(_serverConfigs["reactivateUser"][_serverIndices.value("reactivateUser")].URL()+"/users/{user_id}/reactivate");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::reactivateUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::reactivateUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIAnyType output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit reactivateUserSignal(output);
        emit reactivateUserSignalFull(worker, output);
    } else {
        emit reactivateUserSignalE(output, error_type, error_str);
        emit reactivateUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::removeUserGroup(const qint32 &user_group_id) {
    QString fullPath = QString(_serverConfigs["removeUserGroup"][_serverIndices.value("removeUserGroup")].URL()+"/user_groups/{user_group_id}");
    
    
    {
        QString user_group_idPathParam("{");
        user_group_idPathParam.append("user_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::removeUserGroupCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::removeUserGroupCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit removeUserGroupSignal(output);
        emit removeUserGroupSignalFull(worker, output);
    } else {
        emit removeUserGroupSignalE(output, error_type, error_str);
        emit removeUserGroupSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::setTypingStatus(const QString &op, const QList<qint32> &to, const ::OpenAPI::OptionalParam<QString> &type, const ::OpenAPI::OptionalParam<QString> &topic) {
    QString fullPath = QString(_serverConfigs["setTypingStatus"][_serverIndices.value("setTypingStatus")].URL()+"/typing");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(type.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(type.value())));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "op", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("op")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(op)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", true);
        if(to.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, to) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("to=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if(topic.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "topic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("topic")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::setTypingStatusCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::setTypingStatusCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit setTypingStatusSignal(output);
        emit setTypingStatusSignalFull(worker, output);
    } else {
        emit setTypingStatusSignalE(output, error_type, error_str);
        emit setTypingStatusSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::unmuteUser(const qint32 &muted_user_id) {
    QString fullPath = QString(_serverConfigs["unmuteUser"][_serverIndices.value("unmuteUser")].URL()+"/users/me/muted_users/{muted_user_id}");
    
    
    {
        QString muted_user_idPathParam("{");
        muted_user_idPathParam.append("muted_user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "muted_user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"muted_user_id"+pathSuffix : pathPrefix;
        fullPath.replace(muted_user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(muted_user_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::unmuteUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::unmuteUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit unmuteUserSignal(output);
        emit unmuteUserSignalFull(worker, output);
    } else {
        emit unmuteUserSignalE(output, error_type, error_str);
        emit unmuteUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::updateSettings(const ::OpenAPI::OptionalParam<QString> &full_name, const ::OpenAPI::OptionalParam<QString> &email, const ::OpenAPI::OptionalParam<QString> &old_password, const ::OpenAPI::OptionalParam<QString> &new_password, const ::OpenAPI::OptionalParam<bool> &twenty_four_hour_time, const ::OpenAPI::OptionalParam<bool> &dense_mode, const ::OpenAPI::OptionalParam<bool> &starred_message_counts, const ::OpenAPI::OptionalParam<bool> &fluid_layout_width, const ::OpenAPI::OptionalParam<bool> &high_contrast_mode, const ::OpenAPI::OptionalParam<qint32> &color_scheme, const ::OpenAPI::OptionalParam<bool> &enable_drafts_synchronization, const ::OpenAPI::OptionalParam<bool> &translate_emoticons, const ::OpenAPI::OptionalParam<QString> &default_language, const ::OpenAPI::OptionalParam<QString> &default_view, const ::OpenAPI::OptionalParam<bool> &left_side_userlist, const ::OpenAPI::OptionalParam<QString> &emojiset, const ::OpenAPI::OptionalParam<qint32> &demote_inactive_streams, const ::OpenAPI::OptionalParam<QString> &timezone, const ::OpenAPI::OptionalParam<bool> &enable_stream_desktop_notifications, const ::OpenAPI::OptionalParam<bool> &enable_stream_email_notifications, const ::OpenAPI::OptionalParam<bool> &enable_stream_push_notifications, const ::OpenAPI::OptionalParam<bool> &enable_stream_audible_notifications, const ::OpenAPI::OptionalParam<QString> &notification_sound, const ::OpenAPI::OptionalParam<bool> &enable_desktop_notifications, const ::OpenAPI::OptionalParam<bool> &enable_sounds, const ::OpenAPI::OptionalParam<qint32> &email_notifications_batching_period_seconds, const ::OpenAPI::OptionalParam<bool> &enable_offline_email_notifications, const ::OpenAPI::OptionalParam<bool> &enable_offline_push_notifications, const ::OpenAPI::OptionalParam<bool> &enable_online_push_notifications, const ::OpenAPI::OptionalParam<bool> &enable_digest_emails, const ::OpenAPI::OptionalParam<bool> &enable_marketing_emails, const ::OpenAPI::OptionalParam<bool> &enable_login_emails, const ::OpenAPI::OptionalParam<bool> &message_content_in_email_notifications, const ::OpenAPI::OptionalParam<bool> &pm_content_in_desktop_notifications, const ::OpenAPI::OptionalParam<bool> &wildcard_mentions_notify, const ::OpenAPI::OptionalParam<qint32> &desktop_icon_count_display, const ::OpenAPI::OptionalParam<bool> &realm_name_in_notifications, const ::OpenAPI::OptionalParam<bool> &presence_enabled, const ::OpenAPI::OptionalParam<bool> &enter_sends) {
    QString fullPath = QString(_serverConfigs["updateSettings"][_serverIndices.value("updateSettings")].URL()+"/settings");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(full_name.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "full_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("full_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name.value())));
    }
    if(email.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "email", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("email")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(email.value())));
    }
    if(old_password.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "old_password", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("old_password")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(old_password.value())));
    }
    if(new_password.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "new_password", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("new_password")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(new_password.value())));
    }
    if(twenty_four_hour_time.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "twenty_four_hour_time", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("twenty_four_hour_time")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(twenty_four_hour_time.value())));
    }
    if(dense_mode.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "dense_mode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("dense_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(dense_mode.value())));
    }
    if(starred_message_counts.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "starred_message_counts", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("starred_message_counts")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(starred_message_counts.value())));
    }
    if(fluid_layout_width.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fluid_layout_width", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fluid_layout_width")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(fluid_layout_width.value())));
    }
    if(high_contrast_mode.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "high_contrast_mode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("high_contrast_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(high_contrast_mode.value())));
    }
    if(color_scheme.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "color_scheme", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("color_scheme")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(color_scheme.value())));
    }
    if(enable_drafts_synchronization.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_drafts_synchronization", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_drafts_synchronization")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_drafts_synchronization.value())));
    }
    if(translate_emoticons.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "translate_emoticons", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("translate_emoticons")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(translate_emoticons.value())));
    }
    if(default_language.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_language", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_language")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_language.value())));
    }
    if(default_view.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "default_view", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("default_view")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(default_view.value())));
    }
    if(left_side_userlist.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "left_side_userlist", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("left_side_userlist")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(left_side_userlist.value())));
    }
    if(emojiset.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emojiset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emojiset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emojiset.value())));
    }
    if(demote_inactive_streams.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "demote_inactive_streams", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("demote_inactive_streams")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(demote_inactive_streams.value())));
    }
    if(timezone.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timezone", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timezone")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(timezone.value())));
    }
    if(enable_stream_desktop_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_stream_desktop_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_stream_desktop_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_stream_desktop_notifications.value())));
    }
    if(enable_stream_email_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_stream_email_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_stream_email_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_stream_email_notifications.value())));
    }
    if(enable_stream_push_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_stream_push_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_stream_push_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_stream_push_notifications.value())));
    }
    if(enable_stream_audible_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_stream_audible_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_stream_audible_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_stream_audible_notifications.value())));
    }
    if(notification_sound.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "notification_sound", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("notification_sound")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(notification_sound.value())));
    }
    if(enable_desktop_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_desktop_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_desktop_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_desktop_notifications.value())));
    }
    if(enable_sounds.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_sounds", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_sounds")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_sounds.value())));
    }
    if(email_notifications_batching_period_seconds.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "email_notifications_batching_period_seconds", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("email_notifications_batching_period_seconds")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(email_notifications_batching_period_seconds.value())));
    }
    if(enable_offline_email_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_offline_email_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_offline_email_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_offline_email_notifications.value())));
    }
    if(enable_offline_push_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_offline_push_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_offline_push_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_offline_push_notifications.value())));
    }
    if(enable_online_push_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_online_push_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_online_push_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_online_push_notifications.value())));
    }
    if(enable_digest_emails.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_digest_emails", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_digest_emails")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_digest_emails.value())));
    }
    if(enable_marketing_emails.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_marketing_emails", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_marketing_emails")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_marketing_emails.value())));
    }
    if(enable_login_emails.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enable_login_emails", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enable_login_emails")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enable_login_emails.value())));
    }
    if(message_content_in_email_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "message_content_in_email_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("message_content_in_email_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_content_in_email_notifications.value())));
    }
    if(pm_content_in_desktop_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pm_content_in_desktop_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pm_content_in_desktop_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(pm_content_in_desktop_notifications.value())));
    }
    if(wildcard_mentions_notify.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "wildcard_mentions_notify", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("wildcard_mentions_notify")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(wildcard_mentions_notify.value())));
    }
    if(desktop_icon_count_display.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "desktop_icon_count_display", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("desktop_icon_count_display")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(desktop_icon_count_display.value())));
    }
    if(realm_name_in_notifications.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "realm_name_in_notifications", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("realm_name_in_notifications")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm_name_in_notifications.value())));
    }
    if(presence_enabled.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "presence_enabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("presence_enabled")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(presence_enabled.value())));
    }
    if(enter_sends.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "enter_sends", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("enter_sends")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(enter_sends.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::updateSettingsCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::updateSettingsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateSettingsSignal(output);
        emit updateSettingsSignalFull(worker, output);
    } else {
        emit updateSettingsSignalE(output, error_type, error_str);
        emit updateSettingsSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::updateStatus(const ::OpenAPI::OptionalParam<QString> &status_text, const ::OpenAPI::OptionalParam<bool> &away, const ::OpenAPI::OptionalParam<QString> &emoji_name, const ::OpenAPI::OptionalParam<QString> &emoji_code, const ::OpenAPI::OptionalParam<QString> &reaction_type) {
    QString fullPath = QString(_serverConfigs["updateStatus"][_serverIndices.value("updateStatus")].URL()+"/users/me/status");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(status_text.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status_text", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status_text")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(status_text.value())));
    }
    if(away.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "away", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("away")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(away.value())));
    }
    if(emoji_name.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_name.value())));
    }
    if(emoji_code.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_code", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_code")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_code.value())));
    }
    if(reaction_type.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reaction_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reaction_type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(reaction_type.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::updateStatusCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::updateStatusCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateStatusSignal(output);
        emit updateStatusSignalFull(worker, output);
    } else {
        emit updateStatusSignalE(output, error_type, error_str);
        emit updateStatusSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::updateUser(const qint32 &user_id, const ::OpenAPI::OptionalParam<QString> &full_name, const ::OpenAPI::OptionalParam<qint32> &role, const ::OpenAPI::OptionalParam<QList<OAIObject>> &profile_data) {
    QString fullPath = QString(_serverConfigs["updateUser"][_serverIndices.value("updateUser")].URL()+"/users/{user_id}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(full_name.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "full_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("full_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(full_name.value())));
    }
    if(role.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "role", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("role")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(role.value())));
    }
    if(profile_data.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "profile_data", true);
        if(profile_data.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (OAIObject t, profile_data.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("profile_data=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("profile_data").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, profile_data.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("profile_data").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, profile_data.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("profile_data").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, profile_data.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("profile_data").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, profile_data.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("profile_data").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, profile_data.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::updateUserCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::updateUserCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateUserSignal(output);
        emit updateUserSignalFull(worker, output);
    } else {
        emit updateUserSignalE(output, error_type, error_str);
        emit updateUserSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::updateUserGroup(const qint32 &user_group_id, const QString &name, const QString &description) {
    QString fullPath = QString(_serverConfigs["updateUserGroup"][_serverIndices.value("updateUserGroup")].URL()+"/user_groups/{user_group_id}");
    
    
    {
        QString user_group_idPathParam("{");
        user_group_idPathParam.append("user_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "description", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("description")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(description)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::updateUserGroupCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::updateUserGroupCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateUserGroupSignal(output);
        emit updateUserGroupSignalFull(worker, output);
    } else {
        emit updateUserGroupSignalE(output, error_type, error_str);
        emit updateUserGroupSignalEFull(worker, error_type, error_str);
    }
}

void OAIUsersApi::updateUserGroupMembers(const qint32 &user_group_id, const ::OpenAPI::OptionalParam<QList<qint32>> &r_delete, const ::OpenAPI::OptionalParam<QList<qint32>> &add) {
    QString fullPath = QString(_serverConfigs["updateUserGroupMembers"][_serverIndices.value("updateUserGroupMembers")].URL()+"/user_groups/{user_group_id}/members");
    
    
    {
        QString user_group_idPathParam("{");
        user_group_idPathParam.append("user_group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_group_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(r_delete.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "delete", true);
        if(r_delete.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, r_delete.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("delete=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("delete").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, r_delete.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("delete").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, r_delete.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("delete").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, r_delete.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("delete").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, r_delete.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("delete").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, r_delete.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if(add.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "add", true);
        if(add.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, add.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("add=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("add").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, add.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("add").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, add.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("add").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, add.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("add").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, add.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("add").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, add.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIUsersApi::updateUserGroupMembersCallback);
    connect(this, &OAIUsersApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIUsersApi::updateUserGroupMembersCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateUserGroupMembersSignal(output);
        emit updateUserGroupMembersSignalFull(worker, output);
    } else {
        emit updateUserGroupMembersSignalE(output, error_type, error_str);
        emit updateUserGroupMembersSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
