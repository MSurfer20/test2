/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBasicBotBase.h
 *
 * 
 */

#ifndef OAIBasicBotBase_H
#define OAIBasicBotBase_H

#include <QJsonObject>

#include "OAIOneOfobjectobject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBasicBotBase : public OAIObject {
public:
    OAIBasicBotBase();
    OAIBasicBotBase(QString json);
    ~OAIBasicBotBase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getFullName() const;
    void setFullName(const QString &full_name);
    bool is_full_name_Set() const;
    bool is_full_name_Valid() const;

    QString getApiKey() const;
    void setApiKey(const QString &api_key);
    bool is_api_key_Set() const;
    bool is_api_key_Valid() const;

    QString getDefaultSendingStream() const;
    void setDefaultSendingStream(const QString &default_sending_stream);
    bool is_default_sending_stream_Set() const;
    bool is_default_sending_stream_Valid() const;

    QString getDefaultEventsRegisterStream() const;
    void setDefaultEventsRegisterStream(const QString &default_events_register_stream);
    bool is_default_events_register_stream_Set() const;
    bool is_default_events_register_stream_Valid() const;

    bool isDefaultAllPublicStreams() const;
    void setDefaultAllPublicStreams(const bool &default_all_public_streams);
    bool is_default_all_public_streams_Set() const;
    bool is_default_all_public_streams_Valid() const;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    qint32 getOwnerId() const;
    void setOwnerId(const qint32 &owner_id);
    bool is_owner_id_Set() const;
    bool is_owner_id_Valid() const;

    QList<OAIOneOfobjectobject> getServices() const;
    void setServices(const QList<OAIOneOfobjectobject> &services);
    bool is_services_Set() const;
    bool is_services_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString full_name;
    bool m_full_name_isSet;
    bool m_full_name_isValid;

    QString api_key;
    bool m_api_key_isSet;
    bool m_api_key_isValid;

    QString default_sending_stream;
    bool m_default_sending_stream_isSet;
    bool m_default_sending_stream_isValid;

    QString default_events_register_stream;
    bool m_default_events_register_stream_isSet;
    bool m_default_events_register_stream_isValid;

    bool default_all_public_streams;
    bool m_default_all_public_streams_isSet;
    bool m_default_all_public_streams_isValid;

    QString avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    qint32 owner_id;
    bool m_owner_id_isSet;
    bool m_owner_id_isValid;

    QList<OAIOneOfobjectobject> services;
    bool m_services_isSet;
    bool m_services_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBasicBotBase)

#endif // OAIBasicBotBase_H
