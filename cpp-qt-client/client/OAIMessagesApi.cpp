/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessagesApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIMessagesApi::OAIMessagesApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIMessagesApi::~OAIMessagesApi() {
}

void OAIMessagesApi::initializeServerConfigs(){
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://{subdomain}.zulipchat.com/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"subdomain", OAIServerVariable("No description provided","example",
    QSet<QString>{ {"example"} })}, }));
    
    defaultConf.append(OAIServerConfiguration(
    QUrl("{server}/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"server", OAIServerVariable("No description provided","https://",
    QSet<QString>{ {"https://"} })}, }));
    
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://chat.zulip.org/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://localhost:9991/api/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("addReaction", defaultConf);
    _serverIndices.insert("addReaction", 0);
    _serverConfigs.insert("checkMessagesMatchNarrow", defaultConf);
    _serverIndices.insert("checkMessagesMatchNarrow", 0);
    _serverConfigs.insert("deleteMessage", defaultConf);
    _serverIndices.insert("deleteMessage", 0);
    _serverConfigs.insert("getFileTemporaryUrl", defaultConf);
    _serverIndices.insert("getFileTemporaryUrl", 0);
    _serverConfigs.insert("getMessageHistory", defaultConf);
    _serverIndices.insert("getMessageHistory", 0);
    _serverConfigs.insert("getMessages", defaultConf);
    _serverIndices.insert("getMessages", 0);
    _serverConfigs.insert("getRawMessage", defaultConf);
    _serverIndices.insert("getRawMessage", 0);
    _serverConfigs.insert("markAllAsRead", defaultConf);
    _serverIndices.insert("markAllAsRead", 0);
    _serverConfigs.insert("markStreamAsRead", defaultConf);
    _serverIndices.insert("markStreamAsRead", 0);
    _serverConfigs.insert("markTopicAsRead", defaultConf);
    _serverIndices.insert("markTopicAsRead", 0);
    _serverConfigs.insert("removeReaction", defaultConf);
    _serverIndices.insert("removeReaction", 0);
    _serverConfigs.insert("renderMessage", defaultConf);
    _serverIndices.insert("renderMessage", 0);
    _serverConfigs.insert("sendMessage", defaultConf);
    _serverIndices.insert("sendMessage", 0);
    _serverConfigs.insert("updateMessage", defaultConf);
    _serverIndices.insert("updateMessage", 0);
    _serverConfigs.insert("updateMessageFlags", defaultConf);
    _serverIndices.insert("updateMessageFlags", 0);
    _serverConfigs.insert("uploadFile", defaultConf);
    _serverIndices.insert("uploadFile", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIMessagesApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value){
    auto it = _serverConfigs.find(operation);
    if(it != _serverConfigs.end() && serverIndex < it.value().size() ){
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIMessagesApi::setServerIndex(const QString &operation, int serverIndex){
    if(_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size() )
        _serverIndices[operation] = serverIndex;
}

void OAIMessagesApi::setApiKey(const QString &apiKeyName, const QString &apiKey){
    _apiKeys.insert(apiKeyName,apiKey);
}

void OAIMessagesApi::setBearerToken(const QString &token){
    _bearerToken = token;
}

void OAIMessagesApi::setUsername(const QString &username) {
    _username = username;
}

void OAIMessagesApi::setPassword(const QString &password) {
    _password = password;
}


void OAIMessagesApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIMessagesApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIMessagesApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIMessagesApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    if(_serverConfigs.contains(operation)){
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    }else{
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMessagesApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    for(auto e : _serverIndices.keys()){
        setServerIndex(e, addServerConfiguration(e, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIMessagesApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables){
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIMessagesApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAIMessagesApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAIMessagesApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAIMessagesApi::abortRequests(){
    emit abortRequestsSignal();
}

QString OAIMessagesApi::getParamStylePrefix(QString style){
    if(style == "matrix"){
        return ";";
    }else if(style == "label"){
        return ".";
    }else if(style == "form"){
        return "&";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "&";
    }else if(style == "pipeDelimited"){
        return "&";
    }else{
        return "none";
    }
}

QString OAIMessagesApi::getParamStyleSuffix(QString style){
    if(style == "matrix"){
        return "=";
    }else if(style == "label"){
        return "";
    }else if(style == "form"){
        return "=";
    }else if(style == "simple"){
        return "";
    }else if(style == "spaceDelimited"){
        return "=";
    }else if(style == "pipeDelimited"){
        return "=";
    }else{
        return "none";
    }
}

QString OAIMessagesApi::getParamStyleDelimiter(QString style, QString name, bool isExplode){

    if(style == "matrix"){
        return (isExplode) ? ";" + name + "=" : ",";

    }else if(style == "label"){
        return (isExplode) ? "." : ",";

    }else if(style == "form"){
        return (isExplode) ? "&" + name + "=" : ",";

    }else if(style == "simple"){
        return ",";
    }else if(style == "spaceDelimited"){
        return (isExplode) ? "&" + name + "=" : " ";

    }else if(style == "pipeDelimited"){
        return (isExplode) ? "&" + name + "=" : "|";

    }else if(style == "deepObject"){
        return (isExplode) ? "&" : "none";

    }else {
        return "none";
    }
}

void OAIMessagesApi::addReaction(const qint32 &message_id, const QString &emoji_name, const ::OpenAPI::OptionalParam<QString> &emoji_code, const ::OpenAPI::OptionalParam<QString> &reaction_type) {
    QString fullPath = QString(_serverConfigs["addReaction"][_serverIndices.value("addReaction")].URL()+"/messages/{message_id}/reactions");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_name)));
    }
    if(emoji_code.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_code", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_code")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_code.value())));
    }
    if(reaction_type.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reaction_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reaction_type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(reaction_type.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::addReactionCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::addReactionCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit addReactionSignal(output);
        emit addReactionSignalFull(worker, output);
    } else {
        emit addReactionSignalE(output, error_type, error_str);
        emit addReactionSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::checkMessagesMatchNarrow(const QList<qint32> &msg_ids, const QList<OAIObject> &narrow) {
    QString fullPath = QString(_serverConfigs["checkMessagesMatchNarrow"][_serverIndices.value("checkMessagesMatchNarrow")].URL()+"/messages/matches_narrow");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "msg_ids", true);
        if(msg_ids.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, msg_ids) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("msg_ids=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("msg_ids").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, msg_ids) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("msg_ids").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, msg_ids) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("msg_ids").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, msg_ids) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("msg_ids").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, msg_ids) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("msg_ids").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, msg_ids) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "narrow", true);
        if(narrow.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (OAIObject t, narrow) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("narrow=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::checkMessagesMatchNarrowCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::checkMessagesMatchNarrowCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIAnyType output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit checkMessagesMatchNarrowSignal(output);
        emit checkMessagesMatchNarrowSignalFull(worker, output);
    } else {
        emit checkMessagesMatchNarrowSignalE(output, error_type, error_str);
        emit checkMessagesMatchNarrowSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::deleteMessage(const qint32 &message_id) {
    QString fullPath = QString(_serverConfigs["deleteMessage"][_serverIndices.value("deleteMessage")].URL()+"/messages/{message_id}");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::deleteMessageCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::deleteMessageCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteMessageSignal(output);
        emit deleteMessageSignalFull(worker, output);
    } else {
        emit deleteMessageSignalE(output, error_type, error_str);
        emit deleteMessageSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::getFileTemporaryUrl(const qint32 &realm_id_str, const QString &filename) {
    QString fullPath = QString(_serverConfigs["getFileTemporaryUrl"][_serverIndices.value("getFileTemporaryUrl")].URL()+"/user_uploads/{realm_id_str}/{filename}");
    
    
    {
        QString realm_id_strPathParam("{");
        realm_id_strPathParam.append("realm_id_str").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "realm_id_str", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"realm_id_str"+pathSuffix : pathPrefix;
        fullPath.replace(realm_id_strPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(realm_id_str)));
    }
    
    {
        QString filenamePathParam("{");
        filenamePathParam.append("filename").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "filename", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"filename"+pathSuffix : pathPrefix;
        fullPath.replace(filenamePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(filename)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::getFileTemporaryUrlCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::getFileTemporaryUrlCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFileTemporaryUrlSignal(output);
        emit getFileTemporaryUrlSignalFull(worker, output);
    } else {
        emit getFileTemporaryUrlSignalE(output, error_type, error_str);
        emit getFileTemporaryUrlSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::getMessageHistory(const qint32 &message_id) {
    QString fullPath = QString(_serverConfigs["getMessageHistory"][_serverIndices.value("getMessageHistory")].URL()+"/messages/{message_id}/history");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::getMessageHistoryCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::getMessageHistoryCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMessageHistorySignal(output);
        emit getMessageHistorySignalFull(worker, output);
    } else {
        emit getMessageHistorySignalE(output, error_type, error_str);
        emit getMessageHistorySignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::getMessages(const qint32 &num_before, const qint32 &num_after, const ::OpenAPI::OptionalParam<OAIOneOfstringinteger> &anchor, const ::OpenAPI::OptionalParam<QList<OAIObject>> &narrow, const ::OpenAPI::OptionalParam<bool> &client_gravatar, const ::OpenAPI::OptionalParam<bool> &apply_markdown, const ::OpenAPI::OptionalParam<bool> &use_first_unread_anchor) {
    QString fullPath = QString(_serverConfigs["getMessages"][_serverIndices.value("getMessages")].URL()+"/messages");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(anchor.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "anchor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");
        QString paramString = (queryStyle == "form" && true) ? "" : (queryStyle == "form" && !(true)) ? "anchor"+querySuffix : "";
        QJsonObject parameter = anchor.value().asJsonObject();
        qint32 count = 0;
        foreach(const QString& key, parameter.keys()) {
            if (count > 0) {
                queryDelimiter =  ((queryStyle == "form" || queryStyle == "deepObject") && true) ? "&" : getParamStyleDelimiter(queryStyle, key, true);
                paramString.append(queryDelimiter);
            }
            QString assignOperator;
            if (queryStyle == "form")
                assignOperator = (true) ? "=" : ",";
            else if (queryStyle == "deepObject")
                assignOperator = (true) ? "=" : "none";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("anchor").append("[").append(key).append("]"))+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("anchor").append("[").append(key).append("]"))+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("anchor").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("anchor").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("anchor").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.append(paramString);
            }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "num_before", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("num_before")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(num_before)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "num_after", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("num_after")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(num_after)));
    }
    if(narrow.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "narrow", true);
        if(narrow.value().size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (OAIObject t, narrow.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("narrow=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow.value()) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("narrow").append(querySuffix);
                qint32 count = 0;
                foreach (OAIObject t, narrow.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    if(client_gravatar.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "client_gravatar", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("client_gravatar")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_gravatar.value())));
    }
    if(apply_markdown.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "apply_markdown", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("apply_markdown")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(apply_markdown.value())));
    }
    if(use_first_unread_anchor.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "use_first_unread_anchor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("use_first_unread_anchor")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(use_first_unread_anchor.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::getMessagesCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::getMessagesCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getMessagesSignal(output);
        emit getMessagesSignalFull(worker, output);
    } else {
        emit getMessagesSignalE(output, error_type, error_str);
        emit getMessagesSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::getRawMessage(const qint32 &message_id) {
    QString fullPath = QString(_serverConfigs["getRawMessage"][_serverIndices.value("getRawMessage")].URL()+"/messages/{message_id}");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::getRawMessageCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::getRawMessageCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRawMessageSignal(output);
        emit getRawMessageSignalFull(worker, output);
    } else {
        emit getRawMessageSignalE(output, error_type, error_str);
        emit getRawMessageSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::markAllAsRead() {
    QString fullPath = QString(_serverConfigs["markAllAsRead"][_serverIndices.value("markAllAsRead")].URL()+"/mark_all_as_read");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::markAllAsReadCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::markAllAsReadCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit markAllAsReadSignal(output);
        emit markAllAsReadSignalFull(worker, output);
    } else {
        emit markAllAsReadSignalE(output, error_type, error_str);
        emit markAllAsReadSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::markStreamAsRead(const qint32 &stream_id) {
    QString fullPath = QString(_serverConfigs["markStreamAsRead"][_serverIndices.value("markStreamAsRead")].URL()+"/mark_stream_as_read");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "stream_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("stream_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::markStreamAsReadCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::markStreamAsReadCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit markStreamAsReadSignal(output);
        emit markStreamAsReadSignalFull(worker, output);
    } else {
        emit markStreamAsReadSignalE(output, error_type, error_str);
        emit markStreamAsReadSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::markTopicAsRead(const qint32 &stream_id, const QString &topic_name) {
    QString fullPath = QString(_serverConfigs["markTopicAsRead"][_serverIndices.value("markTopicAsRead")].URL()+"/mark_topic_as_read");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "stream_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("stream_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_id)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "topic_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("topic_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::markTopicAsReadCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::markTopicAsReadCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit markTopicAsReadSignal(output);
        emit markTopicAsReadSignalFull(worker, output);
    } else {
        emit markTopicAsReadSignalE(output, error_type, error_str);
        emit markTopicAsReadSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::removeReaction(const qint32 &message_id, const ::OpenAPI::OptionalParam<QString> &emoji_name, const ::OpenAPI::OptionalParam<QString> &emoji_code, const ::OpenAPI::OptionalParam<QString> &reaction_type) {
    QString fullPath = QString(_serverConfigs["removeReaction"][_serverIndices.value("removeReaction")].URL()+"/messages/{message_id}/reactions");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(emoji_name.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_name")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_name.value())));
    }
    if(emoji_code.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "emoji_code", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("emoji_code")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(emoji_code.value())));
    }
    if(reaction_type.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "reaction_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("reaction_type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(reaction_type.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::removeReactionCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::removeReactionCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit removeReactionSignal(output);
        emit removeReactionSignalFull(worker, output);
    } else {
        emit removeReactionSignalE(output, error_type, error_str);
        emit removeReactionSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::renderMessage(const QString &content) {
    QString fullPath = QString(_serverConfigs["renderMessage"][_serverIndices.value("renderMessage")].URL()+"/messages/render");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "content", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("content")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(content)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::renderMessageCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::renderMessageCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit renderMessageSignal(output);
        emit renderMessageSignalFull(worker, output);
    } else {
        emit renderMessageSignalE(output, error_type, error_str);
        emit renderMessageSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::sendMessage(const QString &type, const QList<qint32> &to, const QString &content, const ::OpenAPI::OptionalParam<QString> &topic, const ::OpenAPI::OptionalParam<QString> &queue_id, const ::OpenAPI::OptionalParam<QString> &local_id) {
    QString fullPath = QString(_serverConfigs["sendMessage"][_serverIndices.value("sendMessage")].URL()+"/messages");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "to", true);
        if(to.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, to) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("to=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("to").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, to) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "content", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("content")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(content)));
    }
    if(topic.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "topic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("topic")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic.value())));
    }
    if(queue_id.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "queue_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("queue_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue_id.value())));
    }
    if(local_id.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "local_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("local_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(local_id.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::sendMessageCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::sendMessageCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit sendMessageSignal(output);
        emit sendMessageSignalFull(worker, output);
    } else {
        emit sendMessageSignalE(output, error_type, error_str);
        emit sendMessageSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::updateMessage(const qint32 &message_id, const ::OpenAPI::OptionalParam<QString> &topic, const ::OpenAPI::OptionalParam<QString> &propagate_mode, const ::OpenAPI::OptionalParam<bool> &send_notification_to_old_thread, const ::OpenAPI::OptionalParam<bool> &send_notification_to_new_thread, const ::OpenAPI::OptionalParam<QString> &content, const ::OpenAPI::OptionalParam<qint32> &stream_id) {
    QString fullPath = QString(_serverConfigs["updateMessage"][_serverIndices.value("updateMessage")].URL()+"/messages/{message_id}");
    
    
    {
        QString message_idPathParam("{");
        message_idPathParam.append("message_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if(pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_id"+pathSuffix : pathPrefix;
        fullPath.replace(message_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if(topic.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "topic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("topic")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(topic.value())));
    }
    if(propagate_mode.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "propagate_mode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("propagate_mode")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(propagate_mode.value())));
    }
    if(send_notification_to_old_thread.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "send_notification_to_old_thread", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("send_notification_to_old_thread")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(send_notification_to_old_thread.value())));
    }
    if(send_notification_to_new_thread.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "send_notification_to_new_thread", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("send_notification_to_new_thread")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(send_notification_to_new_thread.value())));
    }
    if(content.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "content", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("content")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(content.value())));
    }
    if(stream_id.hasValue())
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "stream_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("stream_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(stream_id.value())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::updateMessageCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::updateMessageCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccess output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateMessageSignal(output);
        emit updateMessageSignalFull(worker, output);
    } else {
        emit updateMessageSignalE(output, error_type, error_str);
        emit updateMessageSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::updateMessageFlags(const QList<qint32> &messages, const QString &op, const QString &flag) {
    QString fullPath = QString(_serverConfigs["updateMessageFlags"][_serverIndices.value("updateMessageFlags")].URL()+"/messages/flags");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "messages", true);
        if(messages.size() > 0) {
            if (QString("multi").indexOf("multi") == 0) {
                foreach (qint32 t, messages) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("messages=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("multi").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("messages").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, messages) {
                    if (count > 0) {
                        fullPath.append((true)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("messages").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, messages) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("messages").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, messages) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("messages").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, messages) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("multi").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("messages").append(querySuffix);
                qint32 count = 0;
                foreach (qint32 t, messages) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "op", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("op")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(op)));
    }
    
    {
        queryStyle = "form";
        if(queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "flag", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("flag")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(flag)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::updateMessageFlagsCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::updateMessageFlagsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateMessageFlagsSignal(output);
        emit updateMessageFlagsSignalFull(worker, output);
    } else {
        emit updateMessageFlagsSignalE(output, error_type, error_str);
        emit updateMessageFlagsSignalEFull(worker, error_type, error_str);
    }
}

void OAIMessagesApi::uploadFile(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &filename) {
    QString fullPath = QString(_serverConfigs["uploadFile"][_serverIndices.value("uploadFile")].URL()+"/user_uploads");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if(filename.hasValue())
    {
        input.add_file("filename", filename.value().local_filename, filename.value().request_filename, filename.value().mime_type);
    }

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIMessagesApi::uploadFileCallback);
    connect(this, &OAIMessagesApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, [this](){
        if(findChildren<OAIHttpRequestWorker*>().count() == 0){
            emit allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIMessagesApi::uploadFileCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIJsonSuccessBase output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit uploadFileSignal(output);
        emit uploadFileSignalFull(worker, output);
    } else {
        emit uploadFileSignalE(output, error_type, error_str);
        emit uploadFileSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
