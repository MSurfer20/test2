/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmojiReactionBase_user.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmojiReactionBase_user::OAIEmojiReactionBase_user(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmojiReactionBase_user::OAIEmojiReactionBase_user() {
    this->initializeModel();
}

OAIEmojiReactionBase_user::~OAIEmojiReactionBase_user() {}

void OAIEmojiReactionBase_user::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_is_mirror_dummy_isSet = false;
    m_is_mirror_dummy_isValid = false;
}

void OAIEmojiReactionBase_user::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmojiReactionBase_user::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_is_mirror_dummy_isValid = ::OpenAPI::fromJsonValue(is_mirror_dummy, json[QString("is_mirror_dummy")]);
    m_is_mirror_dummy_isSet = !json[QString("is_mirror_dummy")].isNull() && m_is_mirror_dummy_isValid;
}

QString OAIEmojiReactionBase_user::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmojiReactionBase_user::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(full_name));
    }
    if (m_is_mirror_dummy_isSet) {
        obj.insert(QString("is_mirror_dummy"), ::OpenAPI::toJsonValue(is_mirror_dummy));
    }
    return obj;
}

qint32 OAIEmojiReactionBase_user::getId() const {
    return id;
}
void OAIEmojiReactionBase_user::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIEmojiReactionBase_user::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEmojiReactionBase_user::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEmojiReactionBase_user::getEmail() const {
    return email;
}
void OAIEmojiReactionBase_user::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool OAIEmojiReactionBase_user::is_email_Set() const{
    return m_email_isSet;
}

bool OAIEmojiReactionBase_user::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIEmojiReactionBase_user::getFullName() const {
    return full_name;
}
void OAIEmojiReactionBase_user::setFullName(const QString &full_name) {
    this->full_name = full_name;
    this->m_full_name_isSet = true;
}

bool OAIEmojiReactionBase_user::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIEmojiReactionBase_user::is_full_name_Valid() const{
    return m_full_name_isValid;
}

bool OAIEmojiReactionBase_user::isIsMirrorDummy() const {
    return is_mirror_dummy;
}
void OAIEmojiReactionBase_user::setIsMirrorDummy(const bool &is_mirror_dummy) {
    this->is_mirror_dummy = is_mirror_dummy;
    this->m_is_mirror_dummy_isSet = true;
}

bool OAIEmojiReactionBase_user::is_is_mirror_dummy_Set() const{
    return m_is_mirror_dummy_isSet;
}

bool OAIEmojiReactionBase_user::is_is_mirror_dummy_Valid() const{
    return m_is_mirror_dummy_isValid;
}

bool OAIEmojiReactionBase_user::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mirror_dummy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmojiReactionBase_user::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
