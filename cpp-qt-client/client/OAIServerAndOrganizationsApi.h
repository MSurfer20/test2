/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerAndOrganizationsApi_H
#define OAI_OAIServerAndOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIHttpFileElement.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerAndOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIServerAndOrganizationsApi(const int timeOut = 0);
    ~OAIServerAndOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  name QString [required]
    * @param[in]  pygments_language QString [required]
    * @param[in]  url_prefix QString [required]
    */
    void addCodePlayground(const QString &name, const QString &pygments_language, const QString &url_prefix);

    /**
    * @param[in]  pattern QString [required]
    * @param[in]  url_format_string QString [required]
    */
    void addLinkifier(const QString &pattern, const QString &url_format_string);

    /**
    * @param[in]  field_type qint32 [required]
    * @param[in]  name QString [optional]
    * @param[in]  hint QString [optional]
    * @param[in]  field_data OAIObject [optional]
    */
    void createCustomProfileField(const qint32 &field_type, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hint = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &field_data = ::OpenAPI::OptionalParam<OAIObject>());


    void getCustomEmoji();


    void getCustomProfileFields();


    void getLinkifiers();


    void getServerSettings();

    /**
    * @param[in]  playground_id qint32 [required]
    */
    void removeCodePlayground(const qint32 &playground_id);

    /**
    * @param[in]  filter_id qint32 [required]
    */
    void removeLinkifier(const qint32 &filter_id);

    /**
    * @param[in]  order QList<qint32> [required]
    */
    void reorderCustomProfileFields(const QList<qint32> &order);

    /**
    * @param[in]  filter_id qint32 [required]
    * @param[in]  pattern QString [required]
    * @param[in]  url_format_string QString [required]
    */
    void updateLinkifier(const qint32 &filter_id, const QString &pattern, const QString &url_format_string);

    /**
    * @param[in]  emoji_name QString [required]
    * @param[in]  filename OAIHttpFileElement [optional]
    */
    void uploadCustomEmoji(const QString &emoji_name, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &filename = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void addCodePlaygroundCallback(OAIHttpRequestWorker *worker);
    void addLinkifierCallback(OAIHttpRequestWorker *worker);
    void createCustomProfileFieldCallback(OAIHttpRequestWorker *worker);
    void getCustomEmojiCallback(OAIHttpRequestWorker *worker);
    void getCustomProfileFieldsCallback(OAIHttpRequestWorker *worker);
    void getLinkifiersCallback(OAIHttpRequestWorker *worker);
    void getServerSettingsCallback(OAIHttpRequestWorker *worker);
    void removeCodePlaygroundCallback(OAIHttpRequestWorker *worker);
    void removeLinkifierCallback(OAIHttpRequestWorker *worker);
    void reorderCustomProfileFieldsCallback(OAIHttpRequestWorker *worker);
    void updateLinkifierCallback(OAIHttpRequestWorker *worker);
    void uploadCustomEmojiCallback(OAIHttpRequestWorker *worker);

signals:

    void addCodePlaygroundSignal(OAIJsonSuccessBase summary);
    void addLinkifierSignal(OAIJsonSuccessBase summary);
    void createCustomProfileFieldSignal(OAIJsonSuccessBase summary);
    void getCustomEmojiSignal(OAIJsonSuccessBase summary);
    void getCustomProfileFieldsSignal(OAIJsonSuccessBase summary);
    void getLinkifiersSignal(OAIJsonSuccessBase summary);
    void getServerSettingsSignal(OAIJsonSuccessBase summary);
    void removeCodePlaygroundSignal(OAIJsonSuccess summary);
    void removeLinkifierSignal(OAIJsonSuccess summary);
    void reorderCustomProfileFieldsSignal(OAIJsonSuccess summary);
    void updateLinkifierSignal(OAIJsonSuccess summary);
    void uploadCustomEmojiSignal(OAIJsonSuccess summary);

    void addCodePlaygroundSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void addLinkifierSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void createCustomProfileFieldSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getCustomEmojiSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getCustomProfileFieldsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getLinkifiersSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getServerSettingsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void removeCodePlaygroundSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void removeLinkifierSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void reorderCustomProfileFieldsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateLinkifierSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void uploadCustomEmojiSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);

    void addCodePlaygroundSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addLinkifierSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomProfileFieldSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomEmojiSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomProfileFieldsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkifiersSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSettingsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCodePlaygroundSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLinkifierSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderCustomProfileFieldsSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLinkifierSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadCustomEmojiSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addCodePlaygroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLinkifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomProfileFieldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomProfileFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLinkifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCodePlaygroundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLinkifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reorderCustomProfileFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLinkifierSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadCustomEmojiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
