/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"

#include "OAIAnyType.h"
#include "OAICodedError.h"
#include "OAIHttpFileElement.h"
#include "OAIInvalidMessageError.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include "OAIOneOfobjectobject.h"
#include "OAIOneOfstringinteger.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(QString style);
    QString getParamStyleSuffix(QString style);
    QString getParamStyleDelimiter(QString style, QString name, bool isExplode);

    /**
    * @param[in]  message_id qint32 [required]
    * @param[in]  emoji_name QString [required]
    * @param[in]  emoji_code QString [optional]
    * @param[in]  reaction_type QString [optional]
    */
    void addReaction(const qint32 &message_id, const QString &emoji_name, const ::OpenAPI::OptionalParam<QString> &emoji_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reaction_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  msg_ids QList<qint32> [required]
    * @param[in]  narrow QList<OAIObject> [required]
    */
    void checkMessagesMatchNarrow(const QList<qint32> &msg_ids, const QList<OAIObject> &narrow);

    /**
    * @param[in]  message_id qint32 [required]
    */
    void deleteMessage(const qint32 &message_id);

    /**
    * @param[in]  realm_id_str qint32 [required]
    * @param[in]  filename QString [required]
    */
    void getFileTemporaryUrl(const qint32 &realm_id_str, const QString &filename);

    /**
    * @param[in]  message_id qint32 [required]
    */
    void getMessageHistory(const qint32 &message_id);

    /**
    * @param[in]  num_before qint32 [required]
    * @param[in]  num_after qint32 [required]
    * @param[in]  anchor OAIOneOfstringinteger [optional]
    * @param[in]  narrow QList<OAIObject> [optional]
    * @param[in]  client_gravatar bool [optional]
    * @param[in]  apply_markdown bool [optional]
    * @param[in]  use_first_unread_anchor bool [optional]
    */
    void getMessages(const qint32 &num_before, const qint32 &num_after, const ::OpenAPI::OptionalParam<OAIOneOfstringinteger> &anchor = ::OpenAPI::OptionalParam<OAIOneOfstringinteger>(), const ::OpenAPI::OptionalParam<QList<OAIObject>> &narrow = ::OpenAPI::OptionalParam<QList<OAIObject>>(), const ::OpenAPI::OptionalParam<bool> &client_gravatar = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &apply_markdown = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_first_unread_anchor = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  message_id qint32 [required]
    */
    void getRawMessage(const qint32 &message_id);


    void markAllAsRead();

    /**
    * @param[in]  stream_id qint32 [required]
    */
    void markStreamAsRead(const qint32 &stream_id);

    /**
    * @param[in]  stream_id qint32 [required]
    * @param[in]  topic_name QString [required]
    */
    void markTopicAsRead(const qint32 &stream_id, const QString &topic_name);

    /**
    * @param[in]  message_id qint32 [required]
    * @param[in]  emoji_name QString [optional]
    * @param[in]  emoji_code QString [optional]
    * @param[in]  reaction_type QString [optional]
    */
    void removeReaction(const qint32 &message_id, const ::OpenAPI::OptionalParam<QString> &emoji_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &emoji_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &reaction_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content QString [required]
    */
    void renderMessage(const QString &content);

    /**
    * @param[in]  type QString [required]
    * @param[in]  to QList<qint32> [required]
    * @param[in]  content QString [required]
    * @param[in]  topic QString [optional]
    * @param[in]  queue_id QString [optional]
    * @param[in]  local_id QString [optional]
    */
    void sendMessage(const QString &type, const QList<qint32> &to, const QString &content, const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &queue_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &local_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  message_id qint32 [required]
    * @param[in]  topic QString [optional]
    * @param[in]  propagate_mode QString [optional]
    * @param[in]  send_notification_to_old_thread bool [optional]
    * @param[in]  send_notification_to_new_thread bool [optional]
    * @param[in]  content QString [optional]
    * @param[in]  stream_id qint32 [optional]
    */
    void updateMessage(const qint32 &message_id, const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &propagate_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &send_notification_to_old_thread = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &send_notification_to_new_thread = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &stream_id = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  messages QList<qint32> [required]
    * @param[in]  op QString [required]
    * @param[in]  flag QString [required]
    */
    void updateMessageFlags(const QList<qint32> &messages, const QString &op, const QString &flag);

    /**
    * @param[in]  filename OAIHttpFileElement [optional]
    */
    void uploadFile(const ::OpenAPI::OptionalParam<OAIHttpFileElement> &filename = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void addReactionCallback(OAIHttpRequestWorker *worker);
    void checkMessagesMatchNarrowCallback(OAIHttpRequestWorker *worker);
    void deleteMessageCallback(OAIHttpRequestWorker *worker);
    void getFileTemporaryUrlCallback(OAIHttpRequestWorker *worker);
    void getMessageHistoryCallback(OAIHttpRequestWorker *worker);
    void getMessagesCallback(OAIHttpRequestWorker *worker);
    void getRawMessageCallback(OAIHttpRequestWorker *worker);
    void markAllAsReadCallback(OAIHttpRequestWorker *worker);
    void markStreamAsReadCallback(OAIHttpRequestWorker *worker);
    void markTopicAsReadCallback(OAIHttpRequestWorker *worker);
    void removeReactionCallback(OAIHttpRequestWorker *worker);
    void renderMessageCallback(OAIHttpRequestWorker *worker);
    void sendMessageCallback(OAIHttpRequestWorker *worker);
    void updateMessageCallback(OAIHttpRequestWorker *worker);
    void updateMessageFlagsCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);

signals:

    void addReactionSignal(OAIJsonSuccess summary);
    void checkMessagesMatchNarrowSignal(OAIAnyType summary);
    void deleteMessageSignal(OAIJsonSuccess summary);
    void getFileTemporaryUrlSignal(OAIJsonSuccessBase summary);
    void getMessageHistorySignal(OAIJsonSuccessBase summary);
    void getMessagesSignal(OAIJsonSuccessBase summary);
    void getRawMessageSignal(OAIJsonSuccessBase summary);
    void markAllAsReadSignal(OAIJsonSuccess summary);
    void markStreamAsReadSignal(OAIJsonSuccess summary);
    void markTopicAsReadSignal(OAIJsonSuccess summary);
    void removeReactionSignal(OAIJsonSuccess summary);
    void renderMessageSignal(OAIJsonSuccessBase summary);
    void sendMessageSignal(OAIJsonSuccessBase summary);
    void updateMessageSignal(OAIJsonSuccess summary);
    void updateMessageFlagsSignal(OAIJsonSuccessBase summary);
    void uploadFileSignal(OAIJsonSuccessBase summary);

    void addReactionSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void checkMessagesMatchNarrowSignalFull(OAIHttpRequestWorker *worker, OAIAnyType summary);
    void deleteMessageSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void getFileTemporaryUrlSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getMessageHistorySignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getMessagesSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void getRawMessageSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void markAllAsReadSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void markStreamAsReadSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void markTopicAsReadSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void removeReactionSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void renderMessageSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void sendMessageSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void updateMessageSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccess summary);
    void updateMessageFlagsSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIJsonSuccessBase summary);

    void addReactionSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkMessagesMatchNarrowSignalE(OAIAnyType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileTemporaryUrlSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageHistorySignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawMessageSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markAllAsReadSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markStreamAsReadSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markTopicAsReadSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReactionSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMessageSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalE(OAIJsonSuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageFlagsSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalE(OAIJsonSuccessBase summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkMessagesMatchNarrowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFileTemporaryUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRawMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markAllAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markStreamAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markTopicAsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renderMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageFlagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();
};

} // namespace OpenAPI
#endif
