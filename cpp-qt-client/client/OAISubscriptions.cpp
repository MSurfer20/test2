/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptions::OAISubscriptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptions::OAISubscriptions() {
    this->initializeModel();
}

OAISubscriptions::~OAISubscriptions() {}

void OAISubscriptions::initializeModel() {

    m_stream_id_isSet = false;
    m_stream_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_rendered_description_isSet = false;
    m_rendered_description_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_invite_only_isSet = false;
    m_invite_only_isValid = false;

    m_subscribers_isSet = false;
    m_subscribers_isValid = false;

    m_desktop_notifications_isSet = false;
    m_desktop_notifications_isValid = false;

    m_email_notifications_isSet = false;
    m_email_notifications_isValid = false;

    m_wildcard_mentions_notify_isSet = false;
    m_wildcard_mentions_notify_isValid = false;

    m_push_notifications_isSet = false;
    m_push_notifications_isValid = false;

    m_audible_notifications_isSet = false;
    m_audible_notifications_isValid = false;

    m_pin_to_top_isSet = false;
    m_pin_to_top_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_is_muted_isSet = false;
    m_is_muted_isValid = false;

    m_in_home_view_isSet = false;
    m_in_home_view_isValid = false;

    m_is_announcement_only_isSet = false;
    m_is_announcement_only_isValid = false;

    m_is_web_public_isSet = false;
    m_is_web_public_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_stream_post_policy_isSet = false;
    m_stream_post_policy_isValid = false;

    m_message_retention_days_isSet = false;
    m_message_retention_days_isValid = false;

    m_history_public_to_subscribers_isSet = false;
    m_history_public_to_subscribers_isValid = false;

    m_first_message_id_isSet = false;
    m_first_message_id_isValid = false;

    m_stream_weekly_traffic_isSet = false;
    m_stream_weekly_traffic_isValid = false;
}

void OAISubscriptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptions::fromJsonObject(QJsonObject json) {

    m_stream_id_isValid = ::OpenAPI::fromJsonValue(stream_id, json[QString("stream_id")]);
    m_stream_id_isSet = !json[QString("stream_id")].isNull() && m_stream_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_rendered_description_isValid = ::OpenAPI::fromJsonValue(rendered_description, json[QString("rendered_description")]);
    m_rendered_description_isSet = !json[QString("rendered_description")].isNull() && m_rendered_description_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(date_created, json[QString("date_created")]);
    m_date_created_isSet = !json[QString("date_created")].isNull() && m_date_created_isValid;

    m_invite_only_isValid = ::OpenAPI::fromJsonValue(invite_only, json[QString("invite_only")]);
    m_invite_only_isSet = !json[QString("invite_only")].isNull() && m_invite_only_isValid;

    m_subscribers_isValid = ::OpenAPI::fromJsonValue(subscribers, json[QString("subscribers")]);
    m_subscribers_isSet = !json[QString("subscribers")].isNull() && m_subscribers_isValid;

    m_desktop_notifications_isValid = ::OpenAPI::fromJsonValue(desktop_notifications, json[QString("desktop_notifications")]);
    m_desktop_notifications_isSet = !json[QString("desktop_notifications")].isNull() && m_desktop_notifications_isValid;

    m_email_notifications_isValid = ::OpenAPI::fromJsonValue(email_notifications, json[QString("email_notifications")]);
    m_email_notifications_isSet = !json[QString("email_notifications")].isNull() && m_email_notifications_isValid;

    m_wildcard_mentions_notify_isValid = ::OpenAPI::fromJsonValue(wildcard_mentions_notify, json[QString("wildcard_mentions_notify")]);
    m_wildcard_mentions_notify_isSet = !json[QString("wildcard_mentions_notify")].isNull() && m_wildcard_mentions_notify_isValid;

    m_push_notifications_isValid = ::OpenAPI::fromJsonValue(push_notifications, json[QString("push_notifications")]);
    m_push_notifications_isSet = !json[QString("push_notifications")].isNull() && m_push_notifications_isValid;

    m_audible_notifications_isValid = ::OpenAPI::fromJsonValue(audible_notifications, json[QString("audible_notifications")]);
    m_audible_notifications_isSet = !json[QString("audible_notifications")].isNull() && m_audible_notifications_isValid;

    m_pin_to_top_isValid = ::OpenAPI::fromJsonValue(pin_to_top, json[QString("pin_to_top")]);
    m_pin_to_top_isSet = !json[QString("pin_to_top")].isNull() && m_pin_to_top_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(email_address, json[QString("email_address")]);
    m_email_address_isSet = !json[QString("email_address")].isNull() && m_email_address_isValid;

    m_is_muted_isValid = ::OpenAPI::fromJsonValue(is_muted, json[QString("is_muted")]);
    m_is_muted_isSet = !json[QString("is_muted")].isNull() && m_is_muted_isValid;

    m_in_home_view_isValid = ::OpenAPI::fromJsonValue(in_home_view, json[QString("in_home_view")]);
    m_in_home_view_isSet = !json[QString("in_home_view")].isNull() && m_in_home_view_isValid;

    m_is_announcement_only_isValid = ::OpenAPI::fromJsonValue(is_announcement_only, json[QString("is_announcement_only")]);
    m_is_announcement_only_isSet = !json[QString("is_announcement_only")].isNull() && m_is_announcement_only_isValid;

    m_is_web_public_isValid = ::OpenAPI::fromJsonValue(is_web_public, json[QString("is_web_public")]);
    m_is_web_public_isSet = !json[QString("is_web_public")].isNull() && m_is_web_public_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_stream_post_policy_isValid = ::OpenAPI::fromJsonValue(stream_post_policy, json[QString("stream_post_policy")]);
    m_stream_post_policy_isSet = !json[QString("stream_post_policy")].isNull() && m_stream_post_policy_isValid;

    m_message_retention_days_isValid = ::OpenAPI::fromJsonValue(message_retention_days, json[QString("message_retention_days")]);
    m_message_retention_days_isSet = !json[QString("message_retention_days")].isNull() && m_message_retention_days_isValid;

    m_history_public_to_subscribers_isValid = ::OpenAPI::fromJsonValue(history_public_to_subscribers, json[QString("history_public_to_subscribers")]);
    m_history_public_to_subscribers_isSet = !json[QString("history_public_to_subscribers")].isNull() && m_history_public_to_subscribers_isValid;

    m_first_message_id_isValid = ::OpenAPI::fromJsonValue(first_message_id, json[QString("first_message_id")]);
    m_first_message_id_isSet = !json[QString("first_message_id")].isNull() && m_first_message_id_isValid;

    m_stream_weekly_traffic_isValid = ::OpenAPI::fromJsonValue(stream_weekly_traffic, json[QString("stream_weekly_traffic")]);
    m_stream_weekly_traffic_isSet = !json[QString("stream_weekly_traffic")].isNull() && m_stream_weekly_traffic_isValid;
}

QString OAISubscriptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptions::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_id_isSet) {
        obj.insert(QString("stream_id"), ::OpenAPI::toJsonValue(stream_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_rendered_description_isSet) {
        obj.insert(QString("rendered_description"), ::OpenAPI::toJsonValue(rendered_description));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("date_created"), ::OpenAPI::toJsonValue(date_created));
    }
    if (m_invite_only_isSet) {
        obj.insert(QString("invite_only"), ::OpenAPI::toJsonValue(invite_only));
    }
    if (subscribers.size() > 0) {
        obj.insert(QString("subscribers"), ::OpenAPI::toJsonValue(subscribers));
    }
    if (m_desktop_notifications_isSet) {
        obj.insert(QString("desktop_notifications"), ::OpenAPI::toJsonValue(desktop_notifications));
    }
    if (m_email_notifications_isSet) {
        obj.insert(QString("email_notifications"), ::OpenAPI::toJsonValue(email_notifications));
    }
    if (m_wildcard_mentions_notify_isSet) {
        obj.insert(QString("wildcard_mentions_notify"), ::OpenAPI::toJsonValue(wildcard_mentions_notify));
    }
    if (m_push_notifications_isSet) {
        obj.insert(QString("push_notifications"), ::OpenAPI::toJsonValue(push_notifications));
    }
    if (m_audible_notifications_isSet) {
        obj.insert(QString("audible_notifications"), ::OpenAPI::toJsonValue(audible_notifications));
    }
    if (m_pin_to_top_isSet) {
        obj.insert(QString("pin_to_top"), ::OpenAPI::toJsonValue(pin_to_top));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("email_address"), ::OpenAPI::toJsonValue(email_address));
    }
    if (m_is_muted_isSet) {
        obj.insert(QString("is_muted"), ::OpenAPI::toJsonValue(is_muted));
    }
    if (m_in_home_view_isSet) {
        obj.insert(QString("in_home_view"), ::OpenAPI::toJsonValue(in_home_view));
    }
    if (m_is_announcement_only_isSet) {
        obj.insert(QString("is_announcement_only"), ::OpenAPI::toJsonValue(is_announcement_only));
    }
    if (m_is_web_public_isSet) {
        obj.insert(QString("is_web_public"), ::OpenAPI::toJsonValue(is_web_public));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(role));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(color));
    }
    if (m_stream_post_policy_isSet) {
        obj.insert(QString("stream_post_policy"), ::OpenAPI::toJsonValue(stream_post_policy));
    }
    if (m_message_retention_days_isSet) {
        obj.insert(QString("message_retention_days"), ::OpenAPI::toJsonValue(message_retention_days));
    }
    if (m_history_public_to_subscribers_isSet) {
        obj.insert(QString("history_public_to_subscribers"), ::OpenAPI::toJsonValue(history_public_to_subscribers));
    }
    if (m_first_message_id_isSet) {
        obj.insert(QString("first_message_id"), ::OpenAPI::toJsonValue(first_message_id));
    }
    if (m_stream_weekly_traffic_isSet) {
        obj.insert(QString("stream_weekly_traffic"), ::OpenAPI::toJsonValue(stream_weekly_traffic));
    }
    return obj;
}

qint32 OAISubscriptions::getStreamId() const {
    return stream_id;
}
void OAISubscriptions::setStreamId(const qint32 &stream_id) {
    this->stream_id = stream_id;
    this->m_stream_id_isSet = true;
}

bool OAISubscriptions::is_stream_id_Set() const{
    return m_stream_id_isSet;
}

bool OAISubscriptions::is_stream_id_Valid() const{
    return m_stream_id_isValid;
}

QString OAISubscriptions::getName() const {
    return name;
}
void OAISubscriptions::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAISubscriptions::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptions::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubscriptions::getDescription() const {
    return description;
}
void OAISubscriptions::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAISubscriptions::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscriptions::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISubscriptions::getRenderedDescription() const {
    return rendered_description;
}
void OAISubscriptions::setRenderedDescription(const QString &rendered_description) {
    this->rendered_description = rendered_description;
    this->m_rendered_description_isSet = true;
}

bool OAISubscriptions::is_rendered_description_Set() const{
    return m_rendered_description_isSet;
}

bool OAISubscriptions::is_rendered_description_Valid() const{
    return m_rendered_description_isValid;
}

qint32 OAISubscriptions::getDateCreated() const {
    return date_created;
}
void OAISubscriptions::setDateCreated(const qint32 &date_created) {
    this->date_created = date_created;
    this->m_date_created_isSet = true;
}

bool OAISubscriptions::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISubscriptions::is_date_created_Valid() const{
    return m_date_created_isValid;
}

bool OAISubscriptions::isInviteOnly() const {
    return invite_only;
}
void OAISubscriptions::setInviteOnly(const bool &invite_only) {
    this->invite_only = invite_only;
    this->m_invite_only_isSet = true;
}

bool OAISubscriptions::is_invite_only_Set() const{
    return m_invite_only_isSet;
}

bool OAISubscriptions::is_invite_only_Valid() const{
    return m_invite_only_isValid;
}

QList<qint32> OAISubscriptions::getSubscribers() const {
    return subscribers;
}
void OAISubscriptions::setSubscribers(const QList<qint32> &subscribers) {
    this->subscribers = subscribers;
    this->m_subscribers_isSet = true;
}

bool OAISubscriptions::is_subscribers_Set() const{
    return m_subscribers_isSet;
}

bool OAISubscriptions::is_subscribers_Valid() const{
    return m_subscribers_isValid;
}

bool OAISubscriptions::isDesktopNotifications() const {
    return desktop_notifications;
}
void OAISubscriptions::setDesktopNotifications(const bool &desktop_notifications) {
    this->desktop_notifications = desktop_notifications;
    this->m_desktop_notifications_isSet = true;
}

bool OAISubscriptions::is_desktop_notifications_Set() const{
    return m_desktop_notifications_isSet;
}

bool OAISubscriptions::is_desktop_notifications_Valid() const{
    return m_desktop_notifications_isValid;
}

bool OAISubscriptions::isEmailNotifications() const {
    return email_notifications;
}
void OAISubscriptions::setEmailNotifications(const bool &email_notifications) {
    this->email_notifications = email_notifications;
    this->m_email_notifications_isSet = true;
}

bool OAISubscriptions::is_email_notifications_Set() const{
    return m_email_notifications_isSet;
}

bool OAISubscriptions::is_email_notifications_Valid() const{
    return m_email_notifications_isValid;
}

bool OAISubscriptions::isWildcardMentionsNotify() const {
    return wildcard_mentions_notify;
}
void OAISubscriptions::setWildcardMentionsNotify(const bool &wildcard_mentions_notify) {
    this->wildcard_mentions_notify = wildcard_mentions_notify;
    this->m_wildcard_mentions_notify_isSet = true;
}

bool OAISubscriptions::is_wildcard_mentions_notify_Set() const{
    return m_wildcard_mentions_notify_isSet;
}

bool OAISubscriptions::is_wildcard_mentions_notify_Valid() const{
    return m_wildcard_mentions_notify_isValid;
}

bool OAISubscriptions::isPushNotifications() const {
    return push_notifications;
}
void OAISubscriptions::setPushNotifications(const bool &push_notifications) {
    this->push_notifications = push_notifications;
    this->m_push_notifications_isSet = true;
}

bool OAISubscriptions::is_push_notifications_Set() const{
    return m_push_notifications_isSet;
}

bool OAISubscriptions::is_push_notifications_Valid() const{
    return m_push_notifications_isValid;
}

bool OAISubscriptions::isAudibleNotifications() const {
    return audible_notifications;
}
void OAISubscriptions::setAudibleNotifications(const bool &audible_notifications) {
    this->audible_notifications = audible_notifications;
    this->m_audible_notifications_isSet = true;
}

bool OAISubscriptions::is_audible_notifications_Set() const{
    return m_audible_notifications_isSet;
}

bool OAISubscriptions::is_audible_notifications_Valid() const{
    return m_audible_notifications_isValid;
}

bool OAISubscriptions::isPinToTop() const {
    return pin_to_top;
}
void OAISubscriptions::setPinToTop(const bool &pin_to_top) {
    this->pin_to_top = pin_to_top;
    this->m_pin_to_top_isSet = true;
}

bool OAISubscriptions::is_pin_to_top_Set() const{
    return m_pin_to_top_isSet;
}

bool OAISubscriptions::is_pin_to_top_Valid() const{
    return m_pin_to_top_isValid;
}

QString OAISubscriptions::getEmailAddress() const {
    return email_address;
}
void OAISubscriptions::setEmailAddress(const QString &email_address) {
    this->email_address = email_address;
    this->m_email_address_isSet = true;
}

bool OAISubscriptions::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAISubscriptions::is_email_address_Valid() const{
    return m_email_address_isValid;
}

bool OAISubscriptions::isIsMuted() const {
    return is_muted;
}
void OAISubscriptions::setIsMuted(const bool &is_muted) {
    this->is_muted = is_muted;
    this->m_is_muted_isSet = true;
}

bool OAISubscriptions::is_is_muted_Set() const{
    return m_is_muted_isSet;
}

bool OAISubscriptions::is_is_muted_Valid() const{
    return m_is_muted_isValid;
}

bool OAISubscriptions::isInHomeView() const {
    return in_home_view;
}
void OAISubscriptions::setInHomeView(const bool &in_home_view) {
    this->in_home_view = in_home_view;
    this->m_in_home_view_isSet = true;
}

bool OAISubscriptions::is_in_home_view_Set() const{
    return m_in_home_view_isSet;
}

bool OAISubscriptions::is_in_home_view_Valid() const{
    return m_in_home_view_isValid;
}

bool OAISubscriptions::isIsAnnouncementOnly() const {
    return is_announcement_only;
}
void OAISubscriptions::setIsAnnouncementOnly(const bool &is_announcement_only) {
    this->is_announcement_only = is_announcement_only;
    this->m_is_announcement_only_isSet = true;
}

bool OAISubscriptions::is_is_announcement_only_Set() const{
    return m_is_announcement_only_isSet;
}

bool OAISubscriptions::is_is_announcement_only_Valid() const{
    return m_is_announcement_only_isValid;
}

bool OAISubscriptions::isIsWebPublic() const {
    return is_web_public;
}
void OAISubscriptions::setIsWebPublic(const bool &is_web_public) {
    this->is_web_public = is_web_public;
    this->m_is_web_public_isSet = true;
}

bool OAISubscriptions::is_is_web_public_Set() const{
    return m_is_web_public_isSet;
}

bool OAISubscriptions::is_is_web_public_Valid() const{
    return m_is_web_public_isValid;
}

qint32 OAISubscriptions::getRole() const {
    return role;
}
void OAISubscriptions::setRole(const qint32 &role) {
    this->role = role;
    this->m_role_isSet = true;
}

bool OAISubscriptions::is_role_Set() const{
    return m_role_isSet;
}

bool OAISubscriptions::is_role_Valid() const{
    return m_role_isValid;
}

QString OAISubscriptions::getColor() const {
    return color;
}
void OAISubscriptions::setColor(const QString &color) {
    this->color = color;
    this->m_color_isSet = true;
}

bool OAISubscriptions::is_color_Set() const{
    return m_color_isSet;
}

bool OAISubscriptions::is_color_Valid() const{
    return m_color_isValid;
}

qint32 OAISubscriptions::getStreamPostPolicy() const {
    return stream_post_policy;
}
void OAISubscriptions::setStreamPostPolicy(const qint32 &stream_post_policy) {
    this->stream_post_policy = stream_post_policy;
    this->m_stream_post_policy_isSet = true;
}

bool OAISubscriptions::is_stream_post_policy_Set() const{
    return m_stream_post_policy_isSet;
}

bool OAISubscriptions::is_stream_post_policy_Valid() const{
    return m_stream_post_policy_isValid;
}

qint32 OAISubscriptions::getMessageRetentionDays() const {
    return message_retention_days;
}
void OAISubscriptions::setMessageRetentionDays(const qint32 &message_retention_days) {
    this->message_retention_days = message_retention_days;
    this->m_message_retention_days_isSet = true;
}

bool OAISubscriptions::is_message_retention_days_Set() const{
    return m_message_retention_days_isSet;
}

bool OAISubscriptions::is_message_retention_days_Valid() const{
    return m_message_retention_days_isValid;
}

bool OAISubscriptions::isHistoryPublicToSubscribers() const {
    return history_public_to_subscribers;
}
void OAISubscriptions::setHistoryPublicToSubscribers(const bool &history_public_to_subscribers) {
    this->history_public_to_subscribers = history_public_to_subscribers;
    this->m_history_public_to_subscribers_isSet = true;
}

bool OAISubscriptions::is_history_public_to_subscribers_Set() const{
    return m_history_public_to_subscribers_isSet;
}

bool OAISubscriptions::is_history_public_to_subscribers_Valid() const{
    return m_history_public_to_subscribers_isValid;
}

qint32 OAISubscriptions::getFirstMessageId() const {
    return first_message_id;
}
void OAISubscriptions::setFirstMessageId(const qint32 &first_message_id) {
    this->first_message_id = first_message_id;
    this->m_first_message_id_isSet = true;
}

bool OAISubscriptions::is_first_message_id_Set() const{
    return m_first_message_id_isSet;
}

bool OAISubscriptions::is_first_message_id_Valid() const{
    return m_first_message_id_isValid;
}

qint32 OAISubscriptions::getStreamWeeklyTraffic() const {
    return stream_weekly_traffic;
}
void OAISubscriptions::setStreamWeeklyTraffic(const qint32 &stream_weekly_traffic) {
    this->stream_weekly_traffic = stream_weekly_traffic;
    this->m_stream_weekly_traffic_isSet = true;
}

bool OAISubscriptions::is_stream_weekly_traffic_Set() const{
    return m_stream_weekly_traffic_isSet;
}

bool OAISubscriptions::is_stream_weekly_traffic_Valid() const{
    return m_stream_weekly_traffic_isValid;
}

bool OAISubscriptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (subscribers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_desktop_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wildcard_mentions_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audible_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_to_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_home_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_announcement_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_web_public_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_post_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_public_to_subscribers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_weekly_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
