/*
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CodedError;
import org.openapitools.client.model.JsonError;
import org.openapitools.client.model.JsonSuccess;
import org.openapitools.client.model.JsonSuccessBase;
import org.openapitools.client.model.NonExistingStreamError;
import org.openapitools.client.model.OneOfobjectobject;
import org.openapitools.client.model.OneOfstringinteger;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StreamsApi
 */
@Ignore
public class StreamsApiTest {

    private final StreamsApi api = new StreamsApi();

    
    /**
     * Archive a stream
     *
     * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveStreamTest() throws ApiException {
        Integer streamId = null;
        JsonSuccess response = api.archiveStream(streamId);

        // TODO: test validations
    }
    
    /**
     * Create BigBlueButton video call
     *
     * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createBigBlueButtonVideoCallTest() throws ApiException {
        JsonSuccessBase response = api.createBigBlueButtonVideoCall();

        // TODO: test validations
    }
    
    /**
     * Get stream ID
     *
     * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamIdTest() throws ApiException {
        String stream = null;
        JsonSuccessBase response = api.getStreamId(stream);

        // TODO: test validations
    }
    
    /**
     * Get topics in a stream
     *
     * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamTopicsTest() throws ApiException {
        Integer streamId = null;
        JsonSuccessBase response = api.getStreamTopics(streamId);

        // TODO: test validations
    }
    
    /**
     * Get all streams
     *
     * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStreamsTest() throws ApiException {
        Boolean includePublic = null;
        Boolean includeWebPublic = null;
        Boolean includeSubscribed = null;
        Boolean includeAllActive = null;
        Boolean includeDefault = null;
        Boolean includeOwnerSubscribed = null;
        JsonSuccessBase response = api.getStreams(includePublic, includeWebPublic, includeSubscribed, includeAllActive, includeDefault, includeOwnerSubscribed);

        // TODO: test validations
    }
    
    /**
     * Get subscription status
     *
     * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriptionStatusTest() throws ApiException {
        Integer userId = null;
        Integer streamId = null;
        JsonSuccessBase response = api.getSubscriptionStatus(userId, streamId);

        // TODO: test validations
    }
    
    /**
     * Get subscribed streams
     *
     * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriptionsTest() throws ApiException {
        Boolean includeSubscribers = null;
        JsonSuccessBase response = api.getSubscriptions(includeSubscribers);

        // TODO: test validations
    }
    
    /**
     * Topic muting
     *
     * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void muteTopicTest() throws ApiException {
        String topic = null;
        String op = null;
        String stream = null;
        Integer streamId = null;
        JsonSuccess response = api.muteTopic(topic, op, stream, streamId);

        // TODO: test validations
    }
    
    /**
     * Subscribe to a stream
     *
     * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscribeTest() throws ApiException {
        List<Object> subscriptions = null;
        List<OneOfstringinteger> principals = null;
        Boolean authorizationErrorsFatal = null;
        Boolean announce = null;
        Boolean inviteOnly = null;
        Boolean historyPublicToSubscribers = null;
        Integer streamPostPolicy = null;
        OneOfstringinteger messageRetentionDays = null;
        OneOfobjectobject response = api.subscribe(subscriptions, principals, authorizationErrorsFatal, announce, inviteOnly, historyPublicToSubscribers, streamPostPolicy, messageRetentionDays);

        // TODO: test validations
    }
    
    /**
     * Unsubscribe from a stream
     *
     * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unsubscribeTest() throws ApiException {
        List<String> subscriptions = null;
        List<OneOfstringinteger> principals = null;
        JsonSuccessBase response = api.unsubscribe(subscriptions, principals);

        // TODO: test validations
    }
    
    /**
     * Update a stream
     *
     * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateStreamTest() throws ApiException {
        Integer streamId = null;
        String description = null;
        String newName = null;
        Boolean isPrivate = null;
        Boolean isAnnouncementOnly = null;
        Integer streamPostPolicy = null;
        Boolean historyPublicToSubscribers = null;
        OneOfstringinteger messageRetentionDays = null;
        JsonSuccess response = api.updateStream(streamId, description, newName, isPrivate, isAnnouncementOnly, streamPostPolicy, historyPublicToSubscribers, messageRetentionDays);

        // TODO: test validations
    }
    
    /**
     * Update subscription settings
     *
     * This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubscriptionSettingsTest() throws ApiException {
        List<Object> subscriptionData = null;
        JsonSuccessBase response = api.updateSubscriptionSettings(subscriptionData);

        // TODO: test validations
    }
    
    /**
     * Update subscriptions
     *
     * Update which streams you are are subscribed to. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubscriptionsTest() throws ApiException {
        List<String> delete = null;
        List<Object> add = null;
        JsonSuccessBase response = api.updateSubscriptions(delete, add);

        // TODO: test validations
    }
    
}
