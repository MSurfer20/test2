//
// MessagesBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Object containing details of the message.  */
public struct MessagesBase: Codable { 


    /** The URL of the user&#39;s avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user&#39;s email address itself for this user.  */
    public var avatarUrl: String?
    /** A Zulip \&quot;client\&quot; string, describing what Zulip client sent the message.  */
    public var client: String?
    /** The content/body of the message.  */
    public var content: String?
    /** The HTTP &#x60;content_type&#x60; for the message content.  This will be &#x60;text/html&#x60; or &#x60;text/x-markdown&#x60;, depending on whether &#x60;apply_markdown&#x60; was set.  */
    public var contentType: String?
    /** Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */
    public var displayRecipient: OneOfstringarray?
    /** The unique message ID.  Messages should always be displayed sorted by ID.  */
    public var id: Int?
    /** Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */
    public var isMeMessage: Bool?
    /** Data on any reactions to the message.  */
    public var reactions: [EmojiReaction]?
    /** A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */
    public var recipientId: Int?
    /** The Zulip display email address of the message&#39;s sender.  */
    public var senderEmail: String?
    /** The full name of the message&#39;s sender.  */
    public var senderFullName: String?
    /** The user ID of the message&#39;s sender.  */
    public var senderId: Int?
    /** A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on &#x60;example.zulip.com&#x60;, this will be &#x60;example&#x60;.  */
    public var senderRealmStr: String?
    /** Only present for stream messages; the ID of the stream.  */
    public var streamId: Int?
    /** The &#x60;topic&#x60; of the message.  Currently always &#x60;\&quot;\&quot;&#x60; for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \&quot;subjects\&quot; and will eventually change.  */
    public var subject: String?
    /** Data on any links to be included in the &#x60;topic&#x60; line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message&#39;s topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called &#x60;subject_links&#x60;; clients are recommended to rename &#x60;subject_links&#x60; to &#x60;topic_links&#x60; if present for compatibility with older Zulip servers.  */
    public var topicLinks: [MessagesBaseTopicLinks]?
    /** Data used for certain experimental Zulip integrations.  */
    public var submessages: [String]?
    /** The UNIX timestamp for when the message was sent, in UTC seconds.  */
    public var timestamp: Int?
    /** The type of the message: &#x60;stream&#x60; or &#x60;private&#x60;.  */
    public var type: String?

    public init(avatarUrl: String?, client: String?, content: String?, contentType: String?, displayRecipient: OneOfstringarray?, id: Int?, isMeMessage: Bool?, reactions: [EmojiReaction]?, recipientId: Int?, senderEmail: String?, senderFullName: String?, senderId: Int?, senderRealmStr: String?, streamId: Int?, subject: String?, topicLinks: [MessagesBaseTopicLinks]?, submessages: [String]?, timestamp: Int?, type: String?) {
        self.avatarUrl = avatarUrl
        self.client = client
        self.content = content
        self.contentType = contentType
        self.displayRecipient = displayRecipient
        self.id = id
        self.isMeMessage = isMeMessage
        self.reactions = reactions
        self.recipientId = recipientId
        self.senderEmail = senderEmail
        self.senderFullName = senderFullName
        self.senderId = senderId
        self.senderRealmStr = senderRealmStr
        self.streamId = streamId
        self.subject = subject
        self.topicLinks = topicLinks
        self.submessages = submessages
        self.timestamp = timestamp
        self.type = type
    }

    public enum CodingKeys: String, CodingKey { 
        case avatarUrl = "avatar_url"
        case client
        case content
        case contentType = "content_type"
        case displayRecipient = "display_recipient"
        case id
        case isMeMessage = "is_me_message"
        case reactions
        case recipientId = "recipient_id"
        case senderEmail = "sender_email"
        case senderFullName = "sender_full_name"
        case senderId = "sender_id"
        case senderRealmStr = "sender_realm_str"
        case streamId = "stream_id"
        case subject
        case topicLinks = "topic_links"
        case submessages
        case timestamp
        case type
    }

}
