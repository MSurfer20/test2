"""
    Zulip REST API

    Powerful open source group chat   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError



class Subscriptions(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('role',): {
            '20': 20,
            '50': 50,
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'stream_id': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'rendered_description': (str,),  # noqa: E501
            'date_created': (int,),  # noqa: E501
            'invite_only': (bool,),  # noqa: E501
            'subscribers': ([int],),  # noqa: E501
            'desktop_notifications': (bool, none_type,),  # noqa: E501
            'email_notifications': (bool, none_type,),  # noqa: E501
            'wildcard_mentions_notify': (bool, none_type,),  # noqa: E501
            'push_notifications': (bool, none_type,),  # noqa: E501
            'audible_notifications': (bool, none_type,),  # noqa: E501
            'pin_to_top': (bool,),  # noqa: E501
            'email_address': (str,),  # noqa: E501
            'is_muted': (bool,),  # noqa: E501
            'in_home_view': (bool,),  # noqa: E501
            'is_announcement_only': (bool,),  # noqa: E501
            'is_web_public': (bool,),  # noqa: E501
            'role': (int,),  # noqa: E501
            'color': (str,),  # noqa: E501
            'stream_post_policy': (int,),  # noqa: E501
            'message_retention_days': (int, none_type,),  # noqa: E501
            'history_public_to_subscribers': (bool,),  # noqa: E501
            'first_message_id': (int, none_type,),  # noqa: E501
            'stream_weekly_traffic': (int, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'stream_id': 'stream_id',  # noqa: E501
        'name': 'name',  # noqa: E501
        'description': 'description',  # noqa: E501
        'rendered_description': 'rendered_description',  # noqa: E501
        'date_created': 'date_created',  # noqa: E501
        'invite_only': 'invite_only',  # noqa: E501
        'subscribers': 'subscribers',  # noqa: E501
        'desktop_notifications': 'desktop_notifications',  # noqa: E501
        'email_notifications': 'email_notifications',  # noqa: E501
        'wildcard_mentions_notify': 'wildcard_mentions_notify',  # noqa: E501
        'push_notifications': 'push_notifications',  # noqa: E501
        'audible_notifications': 'audible_notifications',  # noqa: E501
        'pin_to_top': 'pin_to_top',  # noqa: E501
        'email_address': 'email_address',  # noqa: E501
        'is_muted': 'is_muted',  # noqa: E501
        'in_home_view': 'in_home_view',  # noqa: E501
        'is_announcement_only': 'is_announcement_only',  # noqa: E501
        'is_web_public': 'is_web_public',  # noqa: E501
        'role': 'role',  # noqa: E501
        'color': 'color',  # noqa: E501
        'stream_post_policy': 'stream_post_policy',  # noqa: E501
        'message_retention_days': 'message_retention_days',  # noqa: E501
        'history_public_to_subscribers': 'history_public_to_subscribers',  # noqa: E501
        'first_message_id': 'first_message_id',  # noqa: E501
        'stream_weekly_traffic': 'stream_weekly_traffic',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """Subscriptions - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            stream_id (int): The unique ID of a stream. . [optional]  # noqa: E501
            name (str): The name of a stream. . [optional]  # noqa: E501
            description (str): The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. . [optional]  # noqa: E501
            rendered_description (str): A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. . [optional]  # noqa: E501
            date_created (int): The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). . [optional]  # noqa: E501
            invite_only (bool): Specifies whether the stream is private or not. Only people who have been invited can access a private stream. . [optional]  # noqa: E501
            subscribers ([int]): A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`. . [optional]  # noqa: E501
            desktop_notifications (bool, none_type): A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. . [optional]  # noqa: E501
            email_notifications (bool, none_type): A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. . [optional]  # noqa: E501
            wildcard_mentions_notify (bool, none_type): A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. . [optional]  # noqa: E501
            push_notifications (bool, none_type): A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. . [optional]  # noqa: E501
            audible_notifications (bool, none_type): A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. . [optional]  # noqa: E501
            pin_to_top (bool): A boolean specifying whether the given stream has been pinned to the top. . [optional]  # noqa: E501
            email_address (str): Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). . [optional]  # noqa: E501
            is_muted (bool): Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`). . [optional]  # noqa: E501
            in_home_view (bool): Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. . [optional]  # noqa: E501
            is_announcement_only (bool): Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. . [optional]  # noqa: E501
            is_web_public (bool): Whether the stream has been configured to allow unauthenticated access to its message history from the web. . [optional]  # noqa: E501
            role (int): The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). . [optional]  # noqa: E501
            color (str): The user's personal color for the stream. . [optional]  # noqa: E501
            stream_post_policy (int): Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. . [optional]  # noqa: E501
            message_retention_days (int, none_type): Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). . [optional]  # noqa: E501
            history_public_to_subscribers (bool): Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. . [optional]  # noqa: E501
            first_message_id (int, none_type): The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. . [optional]  # noqa: E501
            stream_weekly_traffic (int, none_type): The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """Subscriptions - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            stream_id (int): The unique ID of a stream. . [optional]  # noqa: E501
            name (str): The name of a stream. . [optional]  # noqa: E501
            description (str): The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. . [optional]  # noqa: E501
            rendered_description (str): A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. . [optional]  # noqa: E501
            date_created (int): The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). . [optional]  # noqa: E501
            invite_only (bool): Specifies whether the stream is private or not. Only people who have been invited can access a private stream. . [optional]  # noqa: E501
            subscribers ([int]): A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`. . [optional]  # noqa: E501
            desktop_notifications (bool, none_type): A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. . [optional]  # noqa: E501
            email_notifications (bool, none_type): A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. . [optional]  # noqa: E501
            wildcard_mentions_notify (bool, none_type): A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. . [optional]  # noqa: E501
            push_notifications (bool, none_type): A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. . [optional]  # noqa: E501
            audible_notifications (bool, none_type): A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. . [optional]  # noqa: E501
            pin_to_top (bool): A boolean specifying whether the given stream has been pinned to the top. . [optional]  # noqa: E501
            email_address (str): Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). . [optional]  # noqa: E501
            is_muted (bool): Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`). . [optional]  # noqa: E501
            in_home_view (bool): Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. . [optional]  # noqa: E501
            is_announcement_only (bool): Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. . [optional]  # noqa: E501
            is_web_public (bool): Whether the stream has been configured to allow unauthenticated access to its message history from the web. . [optional]  # noqa: E501
            role (int): The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). . [optional]  # noqa: E501
            color (str): The user's personal color for the stream. . [optional]  # noqa: E501
            stream_post_policy (int): Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. . [optional]  # noqa: E501
            message_retention_days (int, none_type): Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). . [optional]  # noqa: E501
            history_public_to_subscribers (bool): Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. . [optional]  # noqa: E501
            first_message_id (int, none_type): The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. . [optional]  # noqa: E501
            stream_weekly_traffic (int, none_type): The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
