/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { JsonSuccess } from '../model/jsonSuccess';
import { JsonSuccessBase } from '../model/jsonSuccessBase';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ServerAndOrganizationsService {
    private basePath: string = 'https://example.zulipchat.com/api/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add a code playground
     * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
     * @param name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
     * @param pygmentsLanguage The name of the Pygments language lexer for that programming language. 
     * @param urlPrefix The url prefix for the playground. 
     
     */
    public addCodePlayground(name: string, pygmentsLanguage: string, urlPrefix: string, observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public addCodePlayground(name: string, pygmentsLanguage: string, urlPrefix: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public addCodePlayground(name: string, pygmentsLanguage: string, urlPrefix: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (name === null || name === undefined){
            throw new Error('Required parameter name was null or undefined when calling addCodePlayground.');
        }

        if (pygmentsLanguage === null || pygmentsLanguage === undefined){
            throw new Error('Required parameter pygmentsLanguage was null or undefined when calling addCodePlayground.');
        }

        if (urlPrefix === null || urlPrefix === undefined){
            throw new Error('Required parameter urlPrefix was null or undefined when calling addCodePlayground.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push('name='+encodeURIComponent(String(name)));
        }
        if (pygmentsLanguage !== undefined) {
            queryParameters.push('pygmentsLanguage='+encodeURIComponent(String(pygmentsLanguage)));
        }
        if (urlPrefix !== undefined) {
            queryParameters.push('urlPrefix='+encodeURIComponent(String(urlPrefix)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.post(`${this.basePath}/realm/playgrounds?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add a linkifier
     * Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; 
     * @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
     
     */
    public addLinkifier(pattern: string, urlFormatString: string, observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public addLinkifier(pattern: string, urlFormatString: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public addLinkifier(pattern: string, urlFormatString: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (pattern === null || pattern === undefined){
            throw new Error('Required parameter pattern was null or undefined when calling addLinkifier.');
        }

        if (urlFormatString === null || urlFormatString === undefined){
            throw new Error('Required parameter urlFormatString was null or undefined when calling addLinkifier.');
        }

        let queryParameters: string[] = [];
        if (pattern !== undefined) {
            queryParameters.push('pattern='+encodeURIComponent(String(pattern)));
        }
        if (urlFormatString !== undefined) {
            queryParameters.push('urlFormatString='+encodeURIComponent(String(urlFormatString)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.post(`${this.basePath}/realm/filters?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a custom profile field
     * [Create a custom profile field](/help/add-custom-profile-fields) in the user\&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; 
     * @param fieldType The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
     * @param name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user\&#39;s profile. 
     * @param hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
     * @param fieldData Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
     
     */
    public createCustomProfileField(fieldType: number, name?: string, hint?: string, fieldData?: object, observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public createCustomProfileField(fieldType: number, name?: string, hint?: string, fieldData?: object, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public createCustomProfileField(fieldType: number, name?: string, hint?: string, fieldData?: object, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (fieldType === null || fieldType === undefined){
            throw new Error('Required parameter fieldType was null or undefined when calling createCustomProfileField.');
        }

        let queryParameters: string[] = [];
        if (name !== undefined) {
            queryParameters.push('name='+encodeURIComponent(String(name)));
        }
        if (hint !== undefined) {
            queryParameters.push('hint='+encodeURIComponent(String(hint)));
        }
        if (fieldType !== undefined) {
            queryParameters.push('fieldType='+encodeURIComponent(String(fieldType)));
        }
        if (fieldData !== undefined) {
            queryParameters.push('fieldData='+encodeURIComponent(String(fieldData)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.post(`${this.basePath}/realm/profile_fields?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get all custom emoji
     * Get all the custom emoji in the user\&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; 
     
     */
    public getCustomEmoji(observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public getCustomEmoji(observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public getCustomEmoji(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.get(`${this.basePath}/realm/emoji`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get all custom profile fields
     * Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user\&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60; 
     
     */
    public getCustomProfileFields(observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public getCustomProfileFields(observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public getCustomProfileFields(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.get(`${this.basePath}/realm/profile_fields`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get linkifiers
     * List all of an organization\&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. 
     
     */
    public getLinkifiers(observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public getLinkifiers(observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public getLinkifiers(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.get(`${this.basePath}/realm/linkifiers`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get server settings
     * Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it\&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
     
     */
    public getServerSettings(observe?: 'body', headers?: Headers): Observable<JsonSuccessBase & object>;
    public getServerSettings(observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccessBase & object>>;
    public getServerSettings(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccessBase & object>> = this.httpClient.get(`${this.basePath}/server_settings`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccessBase & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove a code playground
     * Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). 
     * @param playgroundId The ID of the playground that you want to remove. 
     
     */
    public removeCodePlayground(playgroundId: number, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public removeCodePlayground(playgroundId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public removeCodePlayground(playgroundId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (playgroundId === null || playgroundId === undefined){
            throw new Error('Required parameter playgroundId was null or undefined when calling removeCodePlayground.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.delete(`${this.basePath}/realm/playgrounds/${encodeURIComponent(String(playgroundId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove a linkifier
     * Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; 
     * @param filterId The ID of the linkifier that you want to remove. 
     
     */
    public removeLinkifier(filterId: number, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public removeLinkifier(filterId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public removeLinkifier(filterId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (filterId === null || filterId === undefined){
            throw new Error('Required parameter filterId was null or undefined when calling removeLinkifier.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.delete(`${this.basePath}/realm/filters/${encodeURIComponent(String(filterId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reorder custom profile fields
     * Reorder the custom profile fields in the user\&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
     * @param order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
     
     */
    public reorderCustomProfileFields(order: Array<number>, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public reorderCustomProfileFields(order: Array<number>, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public reorderCustomProfileFields(order: Array<number>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (order === null || order === undefined){
            throw new Error('Required parameter order was null or undefined when calling reorderCustomProfileFields.');
        }

        let queryParameters: string[] = [];
        if (order) {
            order.forEach((element) => {
                queryParameters.push('order='+encodeURIComponent(String(element)));
            })
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.patch(`${this.basePath}/realm/profile_fields?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update a linkifier
     * Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57). 
     * @param filterId The ID of the linkifier that you want to update. 
     * @param pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
     * @param urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
     
     */
    public updateLinkifier(filterId: number, pattern: string, urlFormatString: string, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public updateLinkifier(filterId: number, pattern: string, urlFormatString: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public updateLinkifier(filterId: number, pattern: string, urlFormatString: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (filterId === null || filterId === undefined){
            throw new Error('Required parameter filterId was null or undefined when calling updateLinkifier.');
        }

        if (pattern === null || pattern === undefined){
            throw new Error('Required parameter pattern was null or undefined when calling updateLinkifier.');
        }

        if (urlFormatString === null || urlFormatString === undefined){
            throw new Error('Required parameter urlFormatString was null or undefined when calling updateLinkifier.');
        }

        let queryParameters: string[] = [];
        if (pattern !== undefined) {
            queryParameters.push('pattern='+encodeURIComponent(String(pattern)));
        }
        if (urlFormatString !== undefined) {
            queryParameters.push('urlFormatString='+encodeURIComponent(String(urlFormatString)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.patch(`${this.basePath}/realm/filters/${encodeURIComponent(String(filterId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Upload custom emoji
     * This endpoint is used to upload a custom emoji for use in the user\&#39;s organization.  Access to this endpoint depends on the [organization\&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; 
     * @param emojiName The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
     * @param filename 
     
     */
    public uploadCustomEmoji(emojiName: string, filename?: Blob, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public uploadCustomEmoji(emojiName: string, filename?: Blob, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public uploadCustomEmoji(emojiName: string, filename?: Blob, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (emojiName === null || emojiName === undefined){
            throw new Error('Required parameter emojiName was null or undefined when calling uploadCustomEmoji.');
        }

        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'multipart/form-data';
        if (filename !== undefined) {
            formData.append('filename', <any>filename);
        }

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.post(`${this.basePath}/realm/emoji/${encodeURIComponent(String(emojiName))}`, formData, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }

}
