/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CodedError } from '../model/codedError';
import { Draft } from '../model/draft';
import { JsonError } from '../model/jsonError';
import { JsonSuccess } from '../model/jsonSuccess';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DraftsService {
    private basePath: string = 'https://example.zulipchat.com/api/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Create drafts
     * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
     * @param drafts A JSON-encoded list of containing new draft objects. 
     
     */
    public createDrafts(drafts?: Array<Draft>, observe?: 'body', headers?: Headers): Observable<JsonSuccess & object>;
    public createDrafts(drafts?: Array<Draft>, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess & object>>;
    public createDrafts(drafts?: Array<Draft>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (drafts) {
            drafts.forEach((element) => {
                queryParameters.push('drafts='+encodeURIComponent(String(element)));
            })
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess & object>> = this.httpClient.post(`${this.basePath}/drafts?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess & object>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete a draft
     * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     * @param draftId The ID of the draft you want to delete. 
     
     */
    public deleteDraft(draftId: number, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public deleteDraft(draftId: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public deleteDraft(draftId: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (draftId === null || draftId === undefined){
            throw new Error('Required parameter draftId was null or undefined when calling deleteDraft.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.delete(`${this.basePath}/drafts/${encodeURIComponent(String(draftId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Edit a draft
     * Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
     * @param draftId The ID of the draft to be edited. 
     * @param draft A JSON-encoded object containing a replacement draft object for this ID. 
     
     */
    public editDraft(draftId: number, draft: Draft, observe?: 'body', headers?: Headers): Observable<JsonSuccess>;
    public editDraft(draftId: number, draft: Draft, observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess>>;
    public editDraft(draftId: number, draft: Draft, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (draftId === null || draftId === undefined){
            throw new Error('Required parameter draftId was null or undefined when calling editDraft.');
        }

        if (draft === null || draft === undefined){
            throw new Error('Required parameter draft was null or undefined when calling editDraft.');
        }

        let queryParameters: string[] = [];
        if (draft !== undefined) {
            queryParameters.push('draft='+encodeURIComponent(String(draft)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess>> = this.httpClient.patch(`${this.basePath}/drafts/${encodeURIComponent(String(draftId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get drafts
     * Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
     
     */
    public getDrafts(observe?: 'body', headers?: Headers): Observable<JsonSuccess & object>;
    public getDrafts(observe?: 'response', headers?: Headers): Observable<HttpResponse<JsonSuccess & object>>;
    public getDrafts(observe: any = 'body', headers: Headers = {}): Observable<any> {
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<JsonSuccess & object>> = this.httpClient.get(`${this.basePath}/drafts`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <JsonSuccess & object>(httpResponse.response))
               );
        }
        return response;
    }

}
