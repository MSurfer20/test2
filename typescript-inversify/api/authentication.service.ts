/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ApiKeyResponse } from '../model/apiKeyResponse';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AuthenticationService {
    private basePath: string = 'https://example.zulipchat.com/api/v1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Fetch an API key (development only)
     * For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60; 
     * @param username The email address for the user that owns the API key. 
     
     */
    public devFetchApiKey(username: string, observe?: 'body', headers?: Headers): Observable<ApiKeyResponse>;
    public devFetchApiKey(username: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ApiKeyResponse>>;
    public devFetchApiKey(username: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling devFetchApiKey.');
        }

        let queryParameters: string[] = [];
        if (username !== undefined) {
            queryParameters.push('username='+encodeURIComponent(String(username)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ApiKeyResponse>> = this.httpClient.post(`${this.basePath}/dev_fetch_api_key?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ApiKeyResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Fetch an API key (production)
     * This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user\&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 
     * @param username The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
     * @param password The user\&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). 
     
     */
    public fetchApiKey(username: string, password: string, observe?: 'body', headers?: Headers): Observable<ApiKeyResponse>;
    public fetchApiKey(username: string, password: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<ApiKeyResponse>>;
    public fetchApiKey(username: string, password: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (username === null || username === undefined){
            throw new Error('Required parameter username was null or undefined when calling fetchApiKey.');
        }

        if (password === null || password === undefined){
            throw new Error('Required parameter password was null or undefined when calling fetchApiKey.');
        }

        let queryParameters: string[] = [];
        if (username !== undefined) {
            queryParameters.push('username='+encodeURIComponent(String(username)));
        }
        if (password !== undefined) {
            queryParameters.push('password='+encodeURIComponent(String(password)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ApiKeyResponse>> = this.httpClient.post(`${this.basePath}/fetch_api_key?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ApiKeyResponse>(httpResponse.response))
               );
        }
        return response;
    }

}
