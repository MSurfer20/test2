/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DraftsApiController binds http requests to an api service and writes the service results to the http response
type DraftsApiController struct {
	service DraftsApiServicer
}

// NewDraftsApiController creates a default api controller
func NewDraftsApiController(s DraftsApiServicer) Router {
	return &DraftsApiController{service: s}
}

// Routes returns all of the api route for the DraftsApiController
func (c *DraftsApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateDrafts",
			strings.ToUpper("Post"),
			"/api/v1/drafts",
			c.CreateDrafts,
		},
		{
			"DeleteDraft",
			strings.ToUpper("Delete"),
			"/api/v1/drafts/{draft_id}",
			c.DeleteDraft,
		},
		{
			"EditDraft",
			strings.ToUpper("Patch"),
			"/api/v1/drafts/{draft_id}",
			c.EditDraft,
		},
		{
			"GetDrafts",
			strings.ToUpper("Get"),
			"/api/v1/drafts",
			c.GetDrafts,
		},
	}
}

// CreateDrafts - Create drafts
func (c *DraftsApiController) CreateDrafts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	drafts := strings.Split(query.Get("drafts"), ",")
	result, err := c.service.CreateDrafts(r.Context(), drafts)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteDraft - Delete a draft
func (c *DraftsApiController) DeleteDraft(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	draftId, err := parseInt32Parameter(params["draft_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.DeleteDraft(r.Context(), draftId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditDraft - Edit a draft
func (c *DraftsApiController) EditDraft(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	draftId, err := parseInt32Parameter(params["draft_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	draft := query.Get("draft")
	result, err := c.service.EditDraft(r.Context(), draftId, draft)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetDrafts - Get drafts
func (c *DraftsApiController) GetDrafts(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDrafts(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
