/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A AuthenticationApiController binds http requests to an api service and writes the service results to the http response
type AuthenticationApiController struct {
	service AuthenticationApiServicer
}

// NewAuthenticationApiController creates a default api controller
func NewAuthenticationApiController(s AuthenticationApiServicer) Router {
	return &AuthenticationApiController{service: s}
}

// Routes returns all of the api route for the AuthenticationApiController
func (c *AuthenticationApiController) Routes() Routes {
	return Routes{ 
		{
			"DevFetchApiKey",
			strings.ToUpper("Post"),
			"/api/v1/dev_fetch_api_key",
			c.DevFetchApiKey,
		},
		{
			"FetchApiKey",
			strings.ToUpper("Post"),
			"/api/v1/fetch_api_key",
			c.FetchApiKey,
		},
	}
}

// DevFetchApiKey - Fetch an API key (development only)
func (c *AuthenticationApiController) DevFetchApiKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	username := query.Get("username")
	result, err := c.service.DevFetchApiKey(r.Context(), username)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FetchApiKey - Fetch an API key (production)
func (c *AuthenticationApiController) FetchApiKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	username := query.Get("username")
	password := query.Get("password")
	result, err := c.service.FetchApiKey(r.Context(), username, password)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
