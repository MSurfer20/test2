/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A StreamsApiController binds http requests to an api service and writes the service results to the http response
type StreamsApiController struct {
	service StreamsApiServicer
}

// NewStreamsApiController creates a default api controller
func NewStreamsApiController(s StreamsApiServicer) Router {
	return &StreamsApiController{service: s}
}

// Routes returns all of the api route for the StreamsApiController
func (c *StreamsApiController) Routes() Routes {
	return Routes{ 
		{
			"ArchiveStream",
			strings.ToUpper("Delete"),
			"/api/v1/streams/{stream_id}",
			c.ArchiveStream,
		},
		{
			"CreateBigBlueButtonVideoCall",
			strings.ToUpper("Get"),
			"/api/v1/calls/bigbluebutton/create",
			c.CreateBigBlueButtonVideoCall,
		},
		{
			"DeleteTopic",
			strings.ToUpper("Post"),
			"/api/v1/streams/{stream_id}/delete_topic",
			c.DeleteTopic,
		},
		{
			"GetStreamId",
			strings.ToUpper("Get"),
			"/api/v1/get_stream_id",
			c.GetStreamId,
		},
		{
			"GetStreamTopics",
			strings.ToUpper("Get"),
			"/api/v1/users/me/{stream_id}/topics",
			c.GetStreamTopics,
		},
		{
			"GetStreams",
			strings.ToUpper("Get"),
			"/api/v1/streams",
			c.GetStreams,
		},
		{
			"GetSubscribers",
			strings.ToUpper("Get"),
			"/api/v1/streams/{stream_id}/members",
			c.GetSubscribers,
		},
		{
			"GetSubscriptionStatus",
			strings.ToUpper("Get"),
			"/api/v1/users/{user_id}/subscriptions/{stream_id}",
			c.GetSubscriptionStatus,
		},
		{
			"GetSubscriptions",
			strings.ToUpper("Get"),
			"/api/v1/users/me/subscriptions",
			c.GetSubscriptions,
		},
		{
			"MuteTopic",
			strings.ToUpper("Patch"),
			"/api/v1/users/me/subscriptions/muted_topics",
			c.MuteTopic,
		},
		{
			"Subscribe",
			strings.ToUpper("Post"),
			"/api/v1/users/me/subscriptions",
			c.Subscribe,
		},
		{
			"Unsubscribe",
			strings.ToUpper("Delete"),
			"/api/v1/users/me/subscriptions",
			c.Unsubscribe,
		},
		{
			"UpdateStream",
			strings.ToUpper("Patch"),
			"/api/v1/streams/{stream_id}",
			c.UpdateStream,
		},
		{
			"UpdateSubscriptionSettings",
			strings.ToUpper("Post"),
			"/api/v1/users/me/subscriptions/properties",
			c.UpdateSubscriptionSettings,
		},
		{
			"UpdateSubscriptions",
			strings.ToUpper("Patch"),
			"/api/v1/users/me/subscriptions",
			c.UpdateSubscriptions,
		},
	}
}

// ArchiveStream - Archive a stream
func (c *StreamsApiController) ArchiveStream(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.ArchiveStream(r.Context(), streamId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateBigBlueButtonVideoCall - Create BigBlueButton video call
func (c *StreamsApiController) CreateBigBlueButtonVideoCall(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CreateBigBlueButtonVideoCall(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteTopic - Delete a topic
func (c *StreamsApiController) DeleteTopic(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	topicName := query.Get("topic_name")
	result, err := c.service.DeleteTopic(r.Context(), streamId, topicName)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStreamId - Get stream ID
func (c *StreamsApiController) GetStreamId(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	stream := query.Get("stream")
	result, err := c.service.GetStreamId(r.Context(), stream)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStreamTopics - Get topics in a stream
func (c *StreamsApiController) GetStreamTopics(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetStreamTopics(r.Context(), streamId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetStreams - Get all streams
func (c *StreamsApiController) GetStreams(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	includePublic, err := parseBoolParameter(query.Get("include_public"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	includeWebPublic, err := parseBoolParameter(query.Get("include_web_public"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	includeSubscribed, err := parseBoolParameter(query.Get("include_subscribed"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	includeAllActive, err := parseBoolParameter(query.Get("include_all_active"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	includeDefault, err := parseBoolParameter(query.Get("include_default"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	includeOwnerSubscribed, err := parseBoolParameter(query.Get("include_owner_subscribed"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.GetStreams(r.Context(), includePublic, includeWebPublic, includeSubscribed, includeAllActive, includeDefault, includeOwnerSubscribed)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSubscribers - Get the subscribers of a stream
func (c *StreamsApiController) GetSubscribers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetSubscribers(r.Context(), streamId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSubscriptionStatus - Get subscription status
func (c *StreamsApiController) GetSubscriptionStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userId, err := parseInt32Parameter(params["user_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetSubscriptionStatus(r.Context(), userId, streamId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSubscriptions - Get subscribed streams
func (c *StreamsApiController) GetSubscriptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	includeSubscribers, err := parseBoolParameter(query.Get("include_subscribers"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.GetSubscriptions(r.Context(), includeSubscribers)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MuteTopic - Topic muting
func (c *StreamsApiController) MuteTopic(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	topic := query.Get("topic")
	op := query.Get("op")
	stream := query.Get("stream")
	streamId, err := parseInt32Parameter(query.Get("stream_id"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.MuteTopic(r.Context(), topic, op, stream, streamId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Subscribe - Subscribe to a stream
func (c *StreamsApiController) Subscribe(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	subscriptions := strings.Split(query.Get("subscriptions"), ",")
	principals := strings.Split(query.Get("principals"), ",")
	authorizationErrorsFatal, err := parseBoolParameter(query.Get("authorization_errors_fatal"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	announce, err := parseBoolParameter(query.Get("announce"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	inviteOnly, err := parseBoolParameter(query.Get("invite_only"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	historyPublicToSubscribers, err := parseBoolParameter(query.Get("history_public_to_subscribers"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	streamPostPolicy, err := parseInt32Parameter(query.Get("stream_post_policy"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	messageRetentionDays := query.Get("message_retention_days")
	result, err := c.service.Subscribe(r.Context(), subscriptions, principals, authorizationErrorsFatal, announce, inviteOnly, historyPublicToSubscribers, streamPostPolicy, messageRetentionDays)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Unsubscribe - Unsubscribe from a stream
func (c *StreamsApiController) Unsubscribe(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	subscriptions := strings.Split(query.Get("subscriptions"), ",")
	principals := strings.Split(query.Get("principals"), ",")
	result, err := c.service.Unsubscribe(r.Context(), subscriptions, principals)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateStream - Update a stream
func (c *StreamsApiController) UpdateStream(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	streamId, err := parseInt32Parameter(params["stream_id"], true)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	description := query.Get("description")
	newName := query.Get("new_name")
	isPrivate, err := parseBoolParameter(query.Get("is_private"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	isAnnouncementOnly, err := parseBoolParameter(query.Get("is_announcement_only"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	streamPostPolicy, err := parseInt32Parameter(query.Get("stream_post_policy"), false)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	historyPublicToSubscribers, err := parseBoolParameter(query.Get("history_public_to_subscribers"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	messageRetentionDays := query.Get("message_retention_days")
	result, err := c.service.UpdateStream(r.Context(), streamId, description, newName, isPrivate, isAnnouncementOnly, streamPostPolicy, historyPublicToSubscribers, messageRetentionDays)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSubscriptionSettings - Update subscription settings
func (c *StreamsApiController) UpdateSubscriptionSettings(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	subscriptionData := strings.Split(query.Get("subscription_data"), ",")
	result, err := c.service.UpdateSubscriptionSettings(r.Context(), subscriptionData)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSubscriptions - Update subscriptions
func (c *StreamsApiController) UpdateSubscriptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	delete := strings.Split(query.Get("delete"), ",")
	add := strings.Split(query.Get("add"), ",")
	result, err := c.service.UpdateSubscriptions(r.Context(), delete, add)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
