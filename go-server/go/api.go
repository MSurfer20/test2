/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"os"
	"os"
)



// AuthenticationApiRouter defines the required methods for binding the api requests to a responses for the AuthenticationApi
// The AuthenticationApiRouter implementation should parse necessary information from the http request, 
// pass the data to a AuthenticationApiServicer to perform the required actions, then write the service results to the http response.
type AuthenticationApiRouter interface { 
	DevFetchApiKey(http.ResponseWriter, *http.Request)
	FetchApiKey(http.ResponseWriter, *http.Request)
}
// MessagesApiRouter defines the required methods for binding the api requests to a responses for the MessagesApi
// The MessagesApiRouter implementation should parse necessary information from the http request, 
// pass the data to a MessagesApiServicer to perform the required actions, then write the service results to the http response.
type MessagesApiRouter interface { 
	AddReaction(http.ResponseWriter, *http.Request)
	CheckMessagesMatchNarrow(http.ResponseWriter, *http.Request)
	DeleteMessage(http.ResponseWriter, *http.Request)
	GetFileTemporaryUrl(http.ResponseWriter, *http.Request)
	GetMessageHistory(http.ResponseWriter, *http.Request)
	GetMessages(http.ResponseWriter, *http.Request)
	GetRawMessage(http.ResponseWriter, *http.Request)
	MarkAllAsRead(http.ResponseWriter, *http.Request)
	MarkStreamAsRead(http.ResponseWriter, *http.Request)
	MarkTopicAsRead(http.ResponseWriter, *http.Request)
	RemoveReaction(http.ResponseWriter, *http.Request)
	RenderMessage(http.ResponseWriter, *http.Request)
	SendMessage(http.ResponseWriter, *http.Request)
	UpdateMessage(http.ResponseWriter, *http.Request)
	UpdateMessageFlags(http.ResponseWriter, *http.Request)
	UploadFile(http.ResponseWriter, *http.Request)
}
// RealTimeEventsApiRouter defines the required methods for binding the api requests to a responses for the RealTimeEventsApi
// The RealTimeEventsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a RealTimeEventsApiServicer to perform the required actions, then write the service results to the http response.
type RealTimeEventsApiRouter interface { 
	DeleteQueue(http.ResponseWriter, *http.Request)
	GetEvents(http.ResponseWriter, *http.Request)
	RealTimePost(http.ResponseWriter, *http.Request)
	RegisterQueue(http.ResponseWriter, *http.Request)
	RestErrorHandling(http.ResponseWriter, *http.Request)
}
// ServerAndOrganizationsApiRouter defines the required methods for binding the api requests to a responses for the ServerAndOrganizationsApi
// The ServerAndOrganizationsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a ServerAndOrganizationsApiServicer to perform the required actions, then write the service results to the http response.
type ServerAndOrganizationsApiRouter interface { 
	AddCodePlayground(http.ResponseWriter, *http.Request)
	AddLinkifier(http.ResponseWriter, *http.Request)
	CreateCustomProfileField(http.ResponseWriter, *http.Request)
	GetCustomEmoji(http.ResponseWriter, *http.Request)
	GetCustomProfileFields(http.ResponseWriter, *http.Request)
	GetLinkifiers(http.ResponseWriter, *http.Request)
	GetServerSettings(http.ResponseWriter, *http.Request)
	RemoveCodePlayground(http.ResponseWriter, *http.Request)
	RemoveLinkifier(http.ResponseWriter, *http.Request)
	ReorderCustomProfileFields(http.ResponseWriter, *http.Request)
	UpdateLinkifier(http.ResponseWriter, *http.Request)
	UploadCustomEmoji(http.ResponseWriter, *http.Request)
}
// StreamsApiRouter defines the required methods for binding the api requests to a responses for the StreamsApi
// The StreamsApiRouter implementation should parse necessary information from the http request, 
// pass the data to a StreamsApiServicer to perform the required actions, then write the service results to the http response.
type StreamsApiRouter interface { 
	ArchiveStream(http.ResponseWriter, *http.Request)
	CreateBigBlueButtonVideoCall(http.ResponseWriter, *http.Request)
	GetStreamId(http.ResponseWriter, *http.Request)
	GetStreamTopics(http.ResponseWriter, *http.Request)
	GetStreams(http.ResponseWriter, *http.Request)
	GetSubscriptionStatus(http.ResponseWriter, *http.Request)
	GetSubscriptions(http.ResponseWriter, *http.Request)
	MuteTopic(http.ResponseWriter, *http.Request)
	Subscribe(http.ResponseWriter, *http.Request)
	Unsubscribe(http.ResponseWriter, *http.Request)
	UpdateStream(http.ResponseWriter, *http.Request)
	UpdateSubscriptionSettings(http.ResponseWriter, *http.Request)
	UpdateSubscriptions(http.ResponseWriter, *http.Request)
}
// UsersApiRouter defines the required methods for binding the api requests to a responses for the UsersApi
// The UsersApiRouter implementation should parse necessary information from the http request, 
// pass the data to a UsersApiServicer to perform the required actions, then write the service results to the http response.
type UsersApiRouter interface { 
	CreateUser(http.ResponseWriter, *http.Request)
	CreateUserGroup(http.ResponseWriter, *http.Request)
	DeactivateOwnUser(http.ResponseWriter, *http.Request)
	DeactivateUser(http.ResponseWriter, *http.Request)
	GetAttachments(http.ResponseWriter, *http.Request)
	GetOwnUser(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUserByEmail(http.ResponseWriter, *http.Request)
	GetUserGroups(http.ResponseWriter, *http.Request)
	GetUserPresence(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
	MuteUser(http.ResponseWriter, *http.Request)
	ReactivateUser(http.ResponseWriter, *http.Request)
	RemoveUserGroup(http.ResponseWriter, *http.Request)
	SetTypingStatus(http.ResponseWriter, *http.Request)
	UnmuteUser(http.ResponseWriter, *http.Request)
	UpdateDisplaySettings(http.ResponseWriter, *http.Request)
	UpdateNotificationSettings(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
	UpdateUserGroup(http.ResponseWriter, *http.Request)
	UpdateUserGroupMembers(http.ResponseWriter, *http.Request)
}
// WebhooksApiRouter defines the required methods for binding the api requests to a responses for the WebhooksApi
// The WebhooksApiRouter implementation should parse necessary information from the http request, 
// pass the data to a WebhooksApiServicer to perform the required actions, then write the service results to the http response.
type WebhooksApiRouter interface { 
	ZulipOutgoingWebhooks(http.ResponseWriter, *http.Request)
}


// AuthenticationApiServicer defines the api actions for the AuthenticationApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type AuthenticationApiServicer interface { 
	DevFetchApiKey(context.Context, string) (ImplResponse, error)
	FetchApiKey(context.Context, string, string) (ImplResponse, error)
}


// MessagesApiServicer defines the api actions for the MessagesApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type MessagesApiServicer interface { 
	AddReaction(context.Context, int32, string, string, string) (ImplResponse, error)
	CheckMessagesMatchNarrow(context.Context, []int32, []map[string]interface{}) (ImplResponse, error)
	DeleteMessage(context.Context, int32) (ImplResponse, error)
	GetFileTemporaryUrl(context.Context, int32, string) (ImplResponse, error)
	GetMessageHistory(context.Context, int32) (ImplResponse, error)
	GetMessages(context.Context, int32, int32, OneOfstringinteger, []map[string]interface{}, bool, bool, bool) (ImplResponse, error)
	GetRawMessage(context.Context, int32) (ImplResponse, error)
	MarkAllAsRead(context.Context) (ImplResponse, error)
	MarkStreamAsRead(context.Context, int32) (ImplResponse, error)
	MarkTopicAsRead(context.Context, int32, string) (ImplResponse, error)
	RemoveReaction(context.Context, int32, string, string, string) (ImplResponse, error)
	RenderMessage(context.Context, string) (ImplResponse, error)
	SendMessage(context.Context, string, []int32, string, string, string, string) (ImplResponse, error)
	UpdateMessage(context.Context, int32, string, string, bool, bool, string, int32) (ImplResponse, error)
	UpdateMessageFlags(context.Context, []int32, string, string) (ImplResponse, error)
	UploadFile(context.Context, *os.File) (ImplResponse, error)
}


// RealTimeEventsApiServicer defines the api actions for the RealTimeEventsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type RealTimeEventsApiServicer interface { 
	DeleteQueue(context.Context, string) (ImplResponse, error)
	GetEvents(context.Context, string, int32, bool) (ImplResponse, error)
	RealTimePost(context.Context, []string, [][]string, bool) (ImplResponse, error)
	RegisterQueue(context.Context, bool, bool, bool, []string, bool, bool, map[string]interface{}, []string, [][]string) (ImplResponse, error)
	RestErrorHandling(context.Context) (ImplResponse, error)
}


// ServerAndOrganizationsApiServicer defines the api actions for the ServerAndOrganizationsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type ServerAndOrganizationsApiServicer interface { 
	AddCodePlayground(context.Context, string, string, string) (ImplResponse, error)
	AddLinkifier(context.Context, string, string) (ImplResponse, error)
	CreateCustomProfileField(context.Context, int32, string, string, map[string]interface{}) (ImplResponse, error)
	GetCustomEmoji(context.Context) (ImplResponse, error)
	GetCustomProfileFields(context.Context) (ImplResponse, error)
	GetLinkifiers(context.Context) (ImplResponse, error)
	GetServerSettings(context.Context) (ImplResponse, error)
	RemoveCodePlayground(context.Context, int32) (ImplResponse, error)
	RemoveLinkifier(context.Context, int32) (ImplResponse, error)
	ReorderCustomProfileFields(context.Context, []int32) (ImplResponse, error)
	UpdateLinkifier(context.Context, int32, string, string) (ImplResponse, error)
	UploadCustomEmoji(context.Context, string, *os.File) (ImplResponse, error)
}


// StreamsApiServicer defines the api actions for the StreamsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type StreamsApiServicer interface { 
	ArchiveStream(context.Context, int32) (ImplResponse, error)
	CreateBigBlueButtonVideoCall(context.Context) (ImplResponse, error)
	GetStreamId(context.Context, string) (ImplResponse, error)
	GetStreamTopics(context.Context, int32) (ImplResponse, error)
	GetStreams(context.Context, bool, bool, bool, bool, bool, bool) (ImplResponse, error)
	GetSubscriptionStatus(context.Context, int32, int32) (ImplResponse, error)
	GetSubscriptions(context.Context, bool) (ImplResponse, error)
	MuteTopic(context.Context, string, string, string, int32) (ImplResponse, error)
	Subscribe(context.Context, []map[string]interface{}, []OneOfstringinteger, bool, bool, bool, bool, int32, OneOfstringinteger) (ImplResponse, error)
	Unsubscribe(context.Context, []string, []OneOfstringinteger) (ImplResponse, error)
	UpdateStream(context.Context, int32, string, string, bool, bool, int32, bool, OneOfstringinteger) (ImplResponse, error)
	UpdateSubscriptionSettings(context.Context, []map[string]interface{}) (ImplResponse, error)
	UpdateSubscriptions(context.Context, []string, []map[string]interface{}) (ImplResponse, error)
}


// UsersApiServicer defines the api actions for the UsersApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type UsersApiServicer interface { 
	CreateUser(context.Context, string, string, string) (ImplResponse, error)
	CreateUserGroup(context.Context, string, string, []int32) (ImplResponse, error)
	DeactivateOwnUser(context.Context) (ImplResponse, error)
	DeactivateUser(context.Context, int32) (ImplResponse, error)
	GetAttachments(context.Context) (ImplResponse, error)
	GetOwnUser(context.Context) (ImplResponse, error)
	GetUser(context.Context, int32, bool, bool) (ImplResponse, error)
	GetUserByEmail(context.Context, string, bool, bool) (ImplResponse, error)
	GetUserGroups(context.Context) (ImplResponse, error)
	GetUserPresence(context.Context, string) (ImplResponse, error)
	GetUsers(context.Context, bool, bool) (ImplResponse, error)
	MuteUser(context.Context, int32) (ImplResponse, error)
	ReactivateUser(context.Context, int32) (ImplResponse, error)
	RemoveUserGroup(context.Context, int32) (ImplResponse, error)
	SetTypingStatus(context.Context, string, []int32, string, string) (ImplResponse, error)
	UnmuteUser(context.Context, int32) (ImplResponse, error)
	UpdateDisplaySettings(context.Context, bool, bool, bool, bool, bool, int32, bool, string, string, bool, string, int32, string) (ImplResponse, error)
	UpdateNotificationSettings(context.Context, bool, bool, bool, bool, string, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, bool, int32, bool, bool) (ImplResponse, error)
	UpdateUser(context.Context, int32, string, int32, []map[string]interface{}) (ImplResponse, error)
	UpdateUserGroup(context.Context, int32, string, string) (ImplResponse, error)
	UpdateUserGroupMembers(context.Context, int32, []int32, []int32) (ImplResponse, error)
}


// WebhooksApiServicer defines the api actions for the WebhooksApi service
// This interface intended to stay up to date with the openapi yaml used to generate it, 
// while the service implementation can ignored with the .openapi-generator-ignore file 
// and updated with the logic required for the API.
type WebhooksApiServicer interface { 
	ZulipOutgoingWebhooks(context.Context) (ImplResponse, error)
}
