/*
 * Zulip REST API
 * Powerful open source group chat 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.2.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://chat.zulip.org/api/v1";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/fetch_api_key", () => {
        let password = "TODO_EDIT_THE_PASSWORD";
        let username = "TODO_EDIT_THE_USERNAME";
        let url = BASE_URL + `/fetch_api_key?username=${username}&password=${password}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Valid credentials the client can use to access the Zulip API.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/dev_fetch_api_key", () => {
        let username = "TODO_EDIT_THE_USERNAME";
        let url = BASE_URL + `/dev_fetch_api_key?username=${username}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/events", () => {
        let queueId = "TODO_EDIT_THE_QUEUE_ID";
        let lastEventId = "TODO_EDIT_THE_LAST_EVENT_ID";
        let dontBlock = "TODO_EDIT_THE_DONT_BLOCK";
        let url = BASE_URL + `/events?queue_id=${queue_id}&last_event_id=${last_event_id}&dont_block=${dont_block}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/get_stream_id", () => {
        let stream = "TODO_EDIT_THE_STREAM";
        let url = BASE_URL + `/get_stream_id?stream=${stream}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/mark_all_as_read", () => {
        let url = BASE_URL + `/mark_all_as_read`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/mark_stream_as_read", () => {
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let url = BASE_URL + `/mark_stream_as_read?stream_id=${stream_id}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/mark_topic_as_read", () => {
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let topicName = "TODO_EDIT_THE_TOPIC_NAME";
        let url = BASE_URL + `/mark_topic_as_read?stream_id=${stream_id}&topic_name=${topic_name}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/attachments", () => {
        let url = BASE_URL + `/attachments`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages", () => {
        let queueId = "TODO_EDIT_THE_QUEUE_ID";
        let useFirstUnreadAnchor = "TODO_EDIT_THE_USE_FIRST_UNREAD_ANCHOR";
        let numAfter = "TODO_EDIT_THE_NUM_AFTER";
        let type = "TODO_EDIT_THE_TYPE";
        let localId = "TODO_EDIT_THE_LOCAL_ID";
        let content = "TODO_EDIT_THE_CONTENT";
        let clientGravatar = "TODO_EDIT_THE_CLIENT_GRAVATAR";
        let applyMarkdown = "TODO_EDIT_THE_APPLY_MARKDOWN";
        let numBefore = "TODO_EDIT_THE_NUM_BEFORE";
        let anchor = "TODO_EDIT_THE_ANCHOR";
        let topic = "TODO_EDIT_THE_TOPIC";
        let narrow = "TODO_EDIT_THE_NARROW";
        let to = "TODO_EDIT_THE_TO";
        let url = BASE_URL + `/messages?anchor=${anchor}&num_before=${num_before}&num_after=${num_after}&narrow=${narrow}&client_gravatar=${client_gravatar}&apply_markdown=${apply_markdown}&use_first_unread_anchor=${use_first_unread_anchor}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/{message_id}/history", () => {
        let messageId = "TODO_EDIT_THE_MESSAGE_ID";
        let url = BASE_URL + `/messages/${message_id}/history`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/flags", () => {
        let op = "TODO_EDIT_THE_OP";
        let flag = "TODO_EDIT_THE_FLAG";
        let messages = "TODO_EDIT_THE_MESSAGES";
        let url = BASE_URL + `/messages/flags?messages=${messages}&op=${op}&flag=${flag}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/render", () => {
        let content = "TODO_EDIT_THE_CONTENT";
        let url = BASE_URL + `/messages/render?content=${content}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/{message_id}/reactions", () => {
        let emojiName = "TODO_EDIT_THE_EMOJI_NAME";
        let reactionType = "TODO_EDIT_THE_REACTION_TYPE";
        let messageId = "TODO_EDIT_THE_MESSAGE_ID";
        let emojiCode = "TODO_EDIT_THE_EMOJI_CODE";
        let url = BASE_URL + `/messages/${message_id}/reactions?emoji_name=${emoji_name}&emoji_code=${emoji_code}&reaction_type=${reaction_type}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/matches_narrow", () => {
        let msgIds = "TODO_EDIT_THE_MSG_IDS";
        let narrow = "TODO_EDIT_THE_NARROW";
        let url = BASE_URL + `/messages/matches_narrow?msg_ids=${msg_ids}&narrow=${narrow}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/messages/{message_id}", () => {
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let sendNotificationToNewThread = "TODO_EDIT_THE_SEND_NOTIFICATION_TO_NEW_THREAD";
        let messageId = "TODO_EDIT_THE_MESSAGE_ID";
        let topic = "TODO_EDIT_THE_TOPIC";
        let sendNotificationToOldThread = "TODO_EDIT_THE_SEND_NOTIFICATION_TO_OLD_THREAD";
        let content = "TODO_EDIT_THE_CONTENT";
        let propagateMode = "TODO_EDIT_THE_PROPAGATE_MODE";
        let url = BASE_URL + `/messages/${message_id}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_uploads", () => {
        let url = BASE_URL + `/user_uploads`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"filename": http.file(open("/path/to/file.bin", "b"), "test.bin")};
        let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_uploads/{realm_id_str}/{filename}", () => {
        let filename = "TODO_EDIT_THE_FILENAME";
        let realmIdStr = "TODO_EDIT_THE_REALM_ID_STR";
        let url = BASE_URL + `/user_uploads/${realm_id_str}/${filename}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users", () => {
        let password = "TODO_EDIT_THE_PASSWORD";
        let includeCustomProfileFields = "TODO_EDIT_THE_INCLUDE_CUSTOM_PROFILE_FIELDS";
        let fullName = "TODO_EDIT_THE_FULL_NAME";
        let email = "TODO_EDIT_THE_EMAIL";
        let clientGravatar = "TODO_EDIT_THE_CLIENT_GRAVATAR";
        let url = BASE_URL + `/users?client_gravatar=${client_gravatar}&include_custom_profile_fields=${include_custom_profile_fields}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/{user_id}/reactivate", () => {
        let userId = "TODO_EDIT_THE_USER_ID";
        let url = BASE_URL + `/users/${user_id}/reactivate`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/{user_id_or_email}/presence", () => {
        let userIdOrEmail = "TODO_EDIT_THE_USER_ID_OR_EMAIL";
        let url = BASE_URL + `/users/${user_id_or_email}/presence`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me", () => {
        let url = BASE_URL + `/users/me`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me/{stream_id}/topics", () => {
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let url = BASE_URL + `/users/me/${stream_id}/topics`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me/subscriptions", () => {
        let add = "TODO_EDIT_THE_ADD";
        let authorizationErrorsFatal = "TODO_EDIT_THE_AUTHORIZATION_ERRORS_FATAL";
        let streamPostPolicy = "TODO_EDIT_THE_STREAM_POST_POLICY";
        let subscriptions = "TODO_EDIT_THE_SUBSCRIPTIONS";
        let inviteOnly = "TODO_EDIT_THE_INVITE_ONLY";
        let includeSubscribers = "TODO_EDIT_THE_INCLUDE_SUBSCRIBERS";
        let principals = "TODO_EDIT_THE_PRINCIPALS";
        let historyPublicToSubscribers = "TODO_EDIT_THE_HISTORY_PUBLIC_TO_SUBSCRIBERS";
        let messageRetentionDays = "TODO_EDIT_THE_MESSAGE_RETENTION_DAYS";
        let delete = "TODO_EDIT_THE_DELETE";
        let announce = "TODO_EDIT_THE_ANNOUNCE";
        let url = BASE_URL + `/users/me/subscriptions?include_subscribers=${include_subscribers}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 4
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me/subscriptions/muted_topics", () => {
        let op = "TODO_EDIT_THE_OP";
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let stream = "TODO_EDIT_THE_STREAM";
        let topic = "TODO_EDIT_THE_TOPIC";
        let url = BASE_URL + `/users/me/subscriptions/muted_topics?stream=${stream}&stream_id=${stream_id}&topic=${topic}&op=${op}`;
        // Request No. 1
        let request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me/muted_users/{muted_user_id}", () => {
        let mutedUserId = "TODO_EDIT_THE_MUTED_USER_ID";
        let url = BASE_URL + `/users/me/muted_users/${muted_user_id}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/{user_id}/subscriptions/{stream_id}", () => {
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let userId = "TODO_EDIT_THE_USER_ID";
        let url = BASE_URL + `/users/${user_id}/subscriptions/${stream_id}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/emoji/{emoji_name}", () => {
        let emojiName = "TODO_EDIT_THE_EMOJI_NAME";
        let url = BASE_URL + `/realm/emoji/${emoji_name}`;
        // Request No. 1
        // TODO: edit the parameters of the request body.
        let body = {"filename": http.file(open("/path/to/file.bin", "b"), "test.bin")};
        let params = {headers: {"Content-Type": "multipart/form-data", "Accept": "application/json"}};
        let request = http.post(url, body, params);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/emoji", () => {
        let url = BASE_URL + `/realm/emoji`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/profile_fields", () => {
        let fieldData = "TODO_EDIT_THE_FIELD_DATA";
        let hint = "TODO_EDIT_THE_HINT";
        let name = "TODO_EDIT_THE_NAME";
        let fieldType = "TODO_EDIT_THE_FIELD_TYPE";
        let order = "TODO_EDIT_THE_ORDER";
        let url = BASE_URL + `/realm/profile_fields`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/me/subscriptions/properties", () => {
        let subscriptionData = "TODO_EDIT_THE_SUBSCRIPTION_DATA";
        let url = BASE_URL + `/users/me/subscriptions/properties?subscription_data=${subscription_data}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/{email}", () => {
        let includeCustomProfileFields = "TODO_EDIT_THE_INCLUDE_CUSTOM_PROFILE_FIELDS";
        let email = "TODO_EDIT_THE_EMAIL";
        let clientGravatar = "TODO_EDIT_THE_CLIENT_GRAVATAR";
        let url = BASE_URL + `/users/${email}?client_gravatar=${client_gravatar}&include_custom_profile_fields=${include_custom_profile_fields}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/users/{user_id}", () => {
        let includeCustomProfileFields = "TODO_EDIT_THE_INCLUDE_CUSTOM_PROFILE_FIELDS";
        let role = "TODO_EDIT_THE_ROLE";
        let fullName = "TODO_EDIT_THE_FULL_NAME";
        let profileData = "TODO_EDIT_THE_PROFILE_DATA";
        let userId = "TODO_EDIT_THE_USER_ID";
        let clientGravatar = "TODO_EDIT_THE_CLIENT_GRAVATAR";
        let url = BASE_URL + `/users/${user_id}?client_gravatar=${client_gravatar}&include_custom_profile_fields=${include_custom_profile_fields}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.del(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 3
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/linkifiers", () => {
        let url = BASE_URL + `/realm/linkifiers`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/filters", () => {
        let urlFormatString = "TODO_EDIT_THE_URL_FORMAT_STRING";
        let pattern = "TODO_EDIT_THE_PATTERN";
        let url = BASE_URL + `/realm/filters?pattern=${pattern}&url_format_string=${url_format_string}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/filters/{filter_id}", () => {
        let filterId = "TODO_EDIT_THE_FILTER_ID";
        let urlFormatString = "TODO_EDIT_THE_URL_FORMAT_STRING";
        let pattern = "TODO_EDIT_THE_PATTERN";
        let url = BASE_URL + `/realm/filters/${filter_id}`;
        // Request No. 1
        let request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/playgrounds", () => {
        let pygmentsLanguage = "TODO_EDIT_THE_PYGMENTS_LANGUAGE";
        let urlPrefix = "TODO_EDIT_THE_URL_PREFIX";
        let name = "TODO_EDIT_THE_NAME";
        let url = BASE_URL + `/realm/playgrounds?name=${name}&pygments_language=${pygments_language}&url_prefix=${url_prefix}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/realm/playgrounds/{playground_id}", () => {
        let playgroundId = "TODO_EDIT_THE_PLAYGROUND_ID";
        let url = BASE_URL + `/realm/playgrounds/${playground_id}`;
        // Request No. 1
        let request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/register", () => {
        let slimPresence = "TODO_EDIT_THE_SLIM_PRESENCE";
        let includeSubscribers = "TODO_EDIT_THE_INCLUDE_SUBSCRIBERS";
        let clientCapabilities = "TODO_EDIT_THE_CLIENT_CAPABILITIES";
        let fetchEventTypes = "TODO_EDIT_THE_FETCH_EVENT_TYPES";
        let narrow = "TODO_EDIT_THE_NARROW";
        let eventTypes = "TODO_EDIT_THE_EVENT_TYPES";
        let allPublicStreams = "TODO_EDIT_THE_ALL_PUBLIC_STREAMS";
        let applyMarkdown = "TODO_EDIT_THE_APPLY_MARKDOWN";
        let clientGravatar = "TODO_EDIT_THE_CLIENT_GRAVATAR";
        let url = BASE_URL + `/register?apply_markdown=${apply_markdown}&client_gravatar=${client_gravatar}&slim_presence=${slim_presence}&event_types=${event_types}&all_public_streams=${all_public_streams}&include_subscribers=${include_subscribers}&client_capabilities=${client_capabilities}&fetch_event_types=${fetch_event_types}&narrow=${narrow}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/server_settings", () => {
        let url = BASE_URL + `/server_settings`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/settings/notifications", () => {
        let enableDesktopNotifications = "TODO_EDIT_THE_ENABLE_DESKTOP_NOTIFICATIONS";
        let enableStreamPushNotifications = "TODO_EDIT_THE_ENABLE_STREAM_PUSH_NOTIFICATIONS";
        let presenceEnabled = "TODO_EDIT_THE_PRESENCE_ENABLED";
        let notificationSound = "TODO_EDIT_THE_NOTIFICATION_SOUND";
        let enableStreamAudibleNotifications = "TODO_EDIT_THE_ENABLE_STREAM_AUDIBLE_NOTIFICATIONS";
        let enableLoginEmails = "TODO_EDIT_THE_ENABLE_LOGIN_EMAILS";
        let enableOfflineEmailNotifications = "TODO_EDIT_THE_ENABLE_OFFLINE_EMAIL_NOTIFICATIONS";
        let realmNameInNotifications = "TODO_EDIT_THE_REALM_NAME_IN_NOTIFICATIONS";
        let enableSounds = "TODO_EDIT_THE_ENABLE_SOUNDS";
        let enableOfflinePushNotifications = "TODO_EDIT_THE_ENABLE_OFFLINE_PUSH_NOTIFICATIONS";
        let pmContentInDesktopNotifications = "TODO_EDIT_THE_PM_CONTENT_IN_DESKTOP_NOTIFICATIONS";
        let enableStreamDesktopNotifications = "TODO_EDIT_THE_ENABLE_STREAM_DESKTOP_NOTIFICATIONS";
        let enableStreamEmailNotifications = "TODO_EDIT_THE_ENABLE_STREAM_EMAIL_NOTIFICATIONS";
        let messageContentInEmailNotifications = "TODO_EDIT_THE_MESSAGE_CONTENT_IN_EMAIL_NOTIFICATIONS";
        let enableOnlinePushNotifications = "TODO_EDIT_THE_ENABLE_ONLINE_PUSH_NOTIFICATIONS";
        let desktopIconCountDisplay = "TODO_EDIT_THE_DESKTOP_ICON_COUNT_DISPLAY";
        let wildcardMentionsNotify = "TODO_EDIT_THE_WILDCARD_MENTIONS_NOTIFY";
        let enableMarketingEmails = "TODO_EDIT_THE_ENABLE_MARKETING_EMAILS";
        let enableDigestEmails = "TODO_EDIT_THE_ENABLE_DIGEST_EMAILS";
        let url = BASE_URL + `/settings/notifications?enable_stream_desktop_notifications=${enable_stream_desktop_notifications}&enable_stream_email_notifications=${enable_stream_email_notifications}&enable_stream_push_notifications=${enable_stream_push_notifications}&enable_stream_audible_notifications=${enable_stream_audible_notifications}&notification_sound=${notification_sound}&enable_desktop_notifications=${enable_desktop_notifications}&enable_sounds=${enable_sounds}&enable_offline_email_notifications=${enable_offline_email_notifications}&enable_offline_push_notifications=${enable_offline_push_notifications}&enable_online_push_notifications=${enable_online_push_notifications}&enable_digest_emails=${enable_digest_emails}&enable_marketing_emails=${enable_marketing_emails}&enable_login_emails=${enable_login_emails}&message_content_in_email_notifications=${message_content_in_email_notifications}&pm_content_in_desktop_notifications=${pm_content_in_desktop_notifications}&wildcard_mentions_notify=${wildcard_mentions_notify}&desktop_icon_count_display=${desktop_icon_count_display}&realm_name_in_notifications=${realm_name_in_notifications}&presence_enabled=${presence_enabled}`;
        // Request No. 1
        let request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/settings/display", () => {
        let demoteInactiveStreams = "TODO_EDIT_THE_DEMOTE_INACTIVE_STREAMS";
        let timezone = "TODO_EDIT_THE_TIMEZONE";
        let highContrastMode = "TODO_EDIT_THE_HIGH_CONTRAST_MODE";
        let denseMode = "TODO_EDIT_THE_DENSE_MODE";
        let translateEmoticons = "TODO_EDIT_THE_TRANSLATE_EMOTICONS";
        let defaultLanguage = "TODO_EDIT_THE_DEFAULT_LANGUAGE";
        let defaultView = "TODO_EDIT_THE_DEFAULT_VIEW";
        let emojiset = "TODO_EDIT_THE_EMOJISET";
        let starredMessageCounts = "TODO_EDIT_THE_STARRED_MESSAGE_COUNTS";
        let leftSideUserlist = "TODO_EDIT_THE_LEFT_SIDE_USERLIST";
        let fluidLayoutWidth = "TODO_EDIT_THE_FLUID_LAYOUT_WIDTH";
        let twentyFourHourTime = "TODO_EDIT_THE_TWENTY_FOUR_HOUR_TIME";
        let colorScheme = "TODO_EDIT_THE_COLOR_SCHEME";
        let url = BASE_URL + `/settings/display?twenty_four_hour_time=${twenty_four_hour_time}&dense_mode=${dense_mode}&starred_message_counts=${starred_message_counts}&fluid_layout_width=${fluid_layout_width}&high_contrast_mode=${high_contrast_mode}&color_scheme=${color_scheme}&translate_emoticons=${translate_emoticons}&default_language=${default_language}&default_view=${default_view}&left_side_userlist=${left_side_userlist}&emojiset=${emojiset}&demote_inactive_streams=${demote_inactive_streams}&timezone=${timezone}`;
        // Request No. 1
        let request = http.patch(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/streams", () => {
        let includeWebPublic = "TODO_EDIT_THE_INCLUDE_WEB_PUBLIC";
        let includeSubscribed = "TODO_EDIT_THE_INCLUDE_SUBSCRIBED";
        let includeOwnerSubscribed = "TODO_EDIT_THE_INCLUDE_OWNER_SUBSCRIBED";
        let includePublic = "TODO_EDIT_THE_INCLUDE_PUBLIC";
        let includeAllActive = "TODO_EDIT_THE_INCLUDE_ALL_ACTIVE";
        let includeDefault = "TODO_EDIT_THE_INCLUDE_DEFAULT";
        let url = BASE_URL + `/streams?include_public=${include_public}&include_web_public=${include_web_public}&include_subscribed=${include_subscribed}&include_all_active=${include_all_active}&include_default=${include_default}&include_owner_subscribed=${include_owner_subscribed}`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/streams/{stream_id}", () => {
        let streamPostPolicy = "TODO_EDIT_THE_STREAM_POST_POLICY";
        let newName = "TODO_EDIT_THE_NEW_NAME";
        let streamId = "TODO_EDIT_THE_STREAM_ID";
        let description = "TODO_EDIT_THE_DESCRIPTION";
        let isPrivate = "TODO_EDIT_THE_IS_PRIVATE";
        let historyPublicToSubscribers = "TODO_EDIT_THE_HISTORY_PUBLIC_TO_SUBSCRIBERS";
        let messageRetentionDays = "TODO_EDIT_THE_MESSAGE_RETENTION_DAYS";
        let isAnnouncementOnly = "TODO_EDIT_THE_IS_ANNOUNCEMENT_ONLY";
        let url = BASE_URL + `/streams/${stream_id}`;
        // Request No. 1
        let request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/typing", () => {
        let op = "TODO_EDIT_THE_OP";
        let topic = "TODO_EDIT_THE_TOPIC";
        let to = "TODO_EDIT_THE_TO";
        let type = "TODO_EDIT_THE_TYPE";
        let url = BASE_URL + `/typing?type=${type}&op=${op}&to=${to}&topic=${topic}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_groups/create", () => {
        let members = "TODO_EDIT_THE_MEMBERS";
        let name = "TODO_EDIT_THE_NAME";
        let description = "TODO_EDIT_THE_DESCRIPTION";
        let url = BASE_URL + `/user_groups/create?name=${name}&description=${description}&members=${members}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_groups/{user_group_id}/members", () => {
        let userGroupId = "TODO_EDIT_THE_USER_GROUP_ID";
        let add = "TODO_EDIT_THE_ADD";
        let delete = "TODO_EDIT_THE_DELETE";
        let url = BASE_URL + `/user_groups/${user_group_id}/members?delete=${delete}&add=${add}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_groups/{user_group_id}", () => {
        let userGroupId = "TODO_EDIT_THE_USER_GROUP_ID";
        let name = "TODO_EDIT_THE_NAME";
        let description = "TODO_EDIT_THE_DESCRIPTION";
        let url = BASE_URL + `/user_groups/${user_group_id}`;
        // Request No. 1
        let request = http.del(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);

        // Request No. 2
        request = http.patch(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/user_groups", () => {
        let url = BASE_URL + `/user_groups`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/real-time", () => {
        let narrow = "TODO_EDIT_THE_NARROW";
        let eventTypes = "TODO_EDIT_THE_EVENT_TYPES";
        let allPublicStreams = "TODO_EDIT_THE_ALL_PUBLIC_STREAMS";
        let url = BASE_URL + `/real-time?event_types=${event_types}&narrow=${narrow}&all_public_streams=${all_public_streams}`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/rest-error-handling", () => {
        let url = BASE_URL + `/rest-error-handling`;
        // Request No. 1
        let request = http.post(url);
        sleep(SLEEP_DURATION);
    });
    group("/zulip-outgoing-webhook", () => {
        let url = BASE_URL + `/zulip-outgoing-webhook`;
        // Request No. 1
        let request = http.post(url);
        check(request, {
            "Success
": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
    group("/calls/bigbluebutton/create", () => {
        let url = BASE_URL + `/calls/bigbluebutton/create`;
        // Request No. 1
        let request = http.get(url);
        check(request, {
            "Success.": (r) => r.status === 200
        });
        sleep(SLEEP_DURATION);
    });
}
