# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "uri"

module 
  class AuthenticationApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch an API key (development only)
    # For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  `POST {{ api_url }}/v1/dev_fetch_api_key` 
    # @param username [String] The email address for the user that owns the API key. 
    # @return [ApiKeyResponse]
    def dev_fetch_api_key(username : String)
      data, _status_code, _headers = dev_fetch_api_key_with_http_info(username)
      data
    end

    # Fetch an API key (development only)
    # For easy testing of mobile apps and other clients and against Zulip development servers, we support fetching a Zulip API key for any user on the development server without authentication (so that they can implement analogues of the one-click login process available for Zulip development servers on the web).  **Note:** This endpoint is only available on Zulip development servers; for obvious security reasons it will always return an error in a Zulip production server.  &#x60;POST {{ api_url }}/v1/dev_fetch_api_key&#x60; 
    # @param username [String] The email address for the user that owns the API key. 
    # @return [Array<(ApiKeyResponse, Integer, Hash)>] ApiKeyResponse data, response status code and response headers
    def dev_fetch_api_key_with_http_info(username : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AuthenticationApi.dev_fetch_api_key ..."}
      end
      # verify the required parameter "username" is set
      if @api_client.config.client_side_validation && username.nil?
        raise ArgumentError.new("Missing the required parameter 'username' when calling AuthenticationApi.dev_fetch_api_key")
      end
      # resource path
      local_var_path = "/dev_fetch_api_key"

      # query parameters
      query_params = Hash(String, String).new
      query_params["username"] = username

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ApiKeyResponse"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AuthenticationApi.dev_fetch_api_key",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AuthenticationApi#dev_fetch_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ApiKeyResponse.from_json(data), status_code, headers
    end

    # Fetch an API key (production)
    # This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user's Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the `mobile_flow_otp` in a webview, and the credentials are returned to the app (encrypted) via a redirect to a `zulip://` URL.  !!! warn \"\"     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 
    # @param username [String] The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
    # @param password [String] The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). 
    # @return [ApiKeyResponse]
    def fetch_api_key(username : String, password : String)
      data, _status_code, _headers = fetch_api_key_with_http_info(username, password)
      data
    end

    # Fetch an API key (production)
    # This API endpoint is used by clients such as the Zulip mobile and terminal apps to implement password-based authentication.  Given the user&#39;s Zulip login credentials, it returns a Zulip API key that the client can use to make requests requests as the user.  This endpoint is only useful for Zulip servers/organizations with EmailAuthBackend or LDAPAuthBackend enabled.  The Zulip mobile apps also support SSO/social authentication (GitHub auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead, the mobile apps reuse the web login flow passing the &#x60;mobile_flow_otp&#x60; in a webview, and the credentials are returned to the app (encrypted) via a redirect to a &#x60;zulip://&#x60; URL.  !!! warn \&quot;\&quot;     **Note:** If you signed up using passwordless authentication and     never had a password, you can [reset your password](/help/change-your-password).      See the [API keys](/api/api-keys) documentation for     more details on how to download API key manually.  In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html), see also [the unauthenticated variant](/api/dev-fetch-api-key). 
    # @param username [String] The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
    # @param password [String] The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). 
    # @return [Array<(ApiKeyResponse, Integer, Hash)>] ApiKeyResponse data, response status code and response headers
    def fetch_api_key_with_http_info(username : String, password : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AuthenticationApi.fetch_api_key ..."}
      end
      # verify the required parameter "username" is set
      if @api_client.config.client_side_validation && username.nil?
        raise ArgumentError.new("Missing the required parameter 'username' when calling AuthenticationApi.fetch_api_key")
      end
      # verify the required parameter "password" is set
      if @api_client.config.client_side_validation && password.nil?
        raise ArgumentError.new("Missing the required parameter 'password' when calling AuthenticationApi.fetch_api_key")
      end
      # resource path
      local_var_path = "/fetch_api_key"

      # query parameters
      query_params = Hash(String, String).new
      query_params["username"] = username
      query_params["password"] = password

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ApiKeyResponse"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AuthenticationApi.fetch_api_key",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AuthenticationApi#fetch_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ApiKeyResponse.from_json(data), status_code, headers
    end
  end
end
