# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "uri"

module 
  class RealTimeEventsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an event queue
    # Delete a previously registered queue.  `DELETE {{ api_url }}/v1/events` 
    # @param queue_id [String] The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). 
    # @return [JsonSuccess]
    def delete_queue(queue_id : String)
      data, _status_code, _headers = delete_queue_with_http_info(queue_id)
      data
    end

    # Delete an event queue
    # Delete a previously registered queue.  &#x60;DELETE {{ api_url }}/v1/events&#x60; 
    # @param queue_id [String] The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def delete_queue_with_http_info(queue_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RealTimeEventsApi.delete_queue ..."}
      end
      # verify the required parameter "queue_id" is set
      if @api_client.config.client_side_validation && queue_id.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_id' when calling RealTimeEventsApi.delete_queue")
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = Hash(String, String).new
      query_params["queue_id"] = queue_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"RealTimeEventsApi.delete_queue",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RealTimeEventsApi#delete_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Get events from an event queue
    # `GET {{ api_url }}/v1/events`  This endpoint allows you to receive new events from [a registered event queue](/api/register-queue).  Long-lived clients should use the `event_queue_longpoll_timeout_seconds` property returned by `POST /register` as the client-side HTTP request timeout for calls to this endpoint.  It is guaranteed to be higher than heartbeat frequency and should be respected by clients to avoid breaking when heartbeat frequency increases. 
    # @param queue_id [String] The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). 
    # @return [JsonSuccessBase]
    def get_events(queue_id : String, last_event_id : Int32?, dont_block : Bool?)
      data, _status_code, _headers = get_events_with_http_info(queue_id, last_event_id, dont_block)
      data
    end

    # Get events from an event queue
    # &#x60;GET {{ api_url }}/v1/events&#x60;  This endpoint allows you to receive new events from [a registered event queue](/api/register-queue).  Long-lived clients should use the &#x60;event_queue_longpoll_timeout_seconds&#x60; property returned by &#x60;POST /register&#x60; as the client-side HTTP request timeout for calls to this endpoint.  It is guaranteed to be higher than heartbeat frequency and should be respected by clients to avoid breaking when heartbeat frequency increases. 
    # @param queue_id [String] The ID of an event queue that was previously registered via &#x60;POST /api/v1/register&#x60; (see [Register a queue](/api/register-queue)). 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_events_with_http_info(queue_id : String, last_event_id : Int32?, dont_block : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RealTimeEventsApi.get_events ..."}
      end
      # verify the required parameter "queue_id" is set
      if @api_client.config.client_side_validation && queue_id.nil?
        raise ArgumentError.new("Missing the required parameter 'queue_id' when calling RealTimeEventsApi.get_events")
      end
      # resource path
      local_var_path = "/events"

      # query parameters
      query_params = Hash(String, String).new
      query_params["queue_id"] = queue_id
      query_params["last_event_id"] = last_event_id
      query_params["dont_block"] = dont_block

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RealTimeEventsApi.get_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RealTimeEventsApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # (Ignored) 
    # @return [nil]
    def real_time_post(event_types : Array(String)?, narrow : Array(Array(String))?, all_public_streams : Bool?)
      real_time_post_with_http_info(event_types, narrow, all_public_streams)
      nil
    end

    # (Ignored) 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def real_time_post_with_http_info(event_types : Array(String)?, narrow : Array(Array(String))?, all_public_streams : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RealTimeEventsApi.real_time_post ..."}
      end
      # resource path
      local_var_path = "/real-time"

      # query parameters
      query_params = Hash(String, String).new
      query_params["event_types"] = @api_client.build_collection_param(event_types, :multi)
      query_params["narrow"] = @api_client.build_collection_param(narrow, :multi)
      query_params["all_public_streams"] = all_public_streams

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RealTimeEventsApi.real_time_post",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RealTimeEventsApi#real_time_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Register an event queue
    # `POST {{ api_url }}/v1/register`  This powerful endpoint can be used to register a Zulip \"event queue\" (subscribed to certain types of \"events\", or updates to the messages and other Zulip data the current user has access to), as well as to fetch the current state of that data.  (`register` also powers the `call_on_each_event` Python API, and is intended primarily for complex applications for which the more convenient `call_on_each_event` API is insufficient).  This endpoint returns a `queue_id` and a `last_event_id`; these can be used in subsequent calls to the [\"events\" endpoint](/api/get-events) to request events from the Zulip server using long-polling.  The server will queue events for up to 10 minutes of inactivity. After 10 minutes, your event queue will be garbage-collected.  The server will send `heartbeat` events every minute, which makes it easy to implement a robust client that does not miss events unless the client loses network connectivity with the Zulip server for 10 minutes or longer.  Once the server garbage-collects your event queue, the server will [return an error](/api/get-events#bad_event_queue_id-errors) with a code of `BAD_EVENT_QUEUE_ID` if you try to fetch events from the event queue.  Your software will need to handle that error condition by re-initializing itself (e.g. this is what triggers your browser reloading the Zulip web app when your laptop comes back online after being offline for more than 10 minutes).  When prototyping with this API, we recommend first calling `register` with no `event_types` parameter to see all the available data from all supported event types.  Before using your client in production, you should set appropriate `event_types` and `fetch_event_types` filters so that your client only requests the data it needs.  A few minutes doing this often saves 90% of the total bandwidth and other resources consumed by a client using this API.  See the [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html) if you need deeper details about how the Zulip event queue system works, avoids clients needing to worry about large classes of potentially messy races, etc. 
    # @return [JsonSuccessBase]
    def register_queue(apply_markdown : Bool?, client_gravatar : Bool?, slim_presence : Bool?, event_types : Array(String)?, all_public_streams : Bool?, include_subscribers : Bool?, client_capabilities : Object?, fetch_event_types : Array(String)?, narrow : Array(Array(String))?)
      data, _status_code, _headers = register_queue_with_http_info(apply_markdown, client_gravatar, slim_presence, event_types, all_public_streams, include_subscribers, client_capabilities, fetch_event_types, narrow)
      data
    end

    # Register an event queue
    # &#x60;POST {{ api_url }}/v1/register&#x60;  This powerful endpoint can be used to register a Zulip \&quot;event queue\&quot; (subscribed to certain types of \&quot;events\&quot;, or updates to the messages and other Zulip data the current user has access to), as well as to fetch the current state of that data.  (&#x60;register&#x60; also powers the &#x60;call_on_each_event&#x60; Python API, and is intended primarily for complex applications for which the more convenient &#x60;call_on_each_event&#x60; API is insufficient).  This endpoint returns a &#x60;queue_id&#x60; and a &#x60;last_event_id&#x60;; these can be used in subsequent calls to the [\&quot;events\&quot; endpoint](/api/get-events) to request events from the Zulip server using long-polling.  The server will queue events for up to 10 minutes of inactivity. After 10 minutes, your event queue will be garbage-collected.  The server will send &#x60;heartbeat&#x60; events every minute, which makes it easy to implement a robust client that does not miss events unless the client loses network connectivity with the Zulip server for 10 minutes or longer.  Once the server garbage-collects your event queue, the server will [return an error](/api/get-events#bad_event_queue_id-errors) with a code of &#x60;BAD_EVENT_QUEUE_ID&#x60; if you try to fetch events from the event queue.  Your software will need to handle that error condition by re-initializing itself (e.g. this is what triggers your browser reloading the Zulip web app when your laptop comes back online after being offline for more than 10 minutes).  When prototyping with this API, we recommend first calling &#x60;register&#x60; with no &#x60;event_types&#x60; parameter to see all the available data from all supported event types.  Before using your client in production, you should set appropriate &#x60;event_types&#x60; and &#x60;fetch_event_types&#x60; filters so that your client only requests the data it needs.  A few minutes doing this often saves 90% of the total bandwidth and other resources consumed by a client using this API.  See the [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html) if you need deeper details about how the Zulip event queue system works, avoids clients needing to worry about large classes of potentially messy races, etc. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def register_queue_with_http_info(apply_markdown : Bool?, client_gravatar : Bool?, slim_presence : Bool?, event_types : Array(String)?, all_public_streams : Bool?, include_subscribers : Bool?, client_capabilities : Object?, fetch_event_types : Array(String)?, narrow : Array(Array(String))?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RealTimeEventsApi.register_queue ..."}
      end
      # resource path
      local_var_path = "/register"

      # query parameters
      query_params = Hash(String, String).new
      query_params["apply_markdown"] = apply_markdown
      query_params["client_gravatar"] = client_gravatar
      query_params["slim_presence"] = slim_presence
      query_params["event_types"] = @api_client.build_collection_param(event_types, :multi)
      query_params["all_public_streams"] = all_public_streams
      query_params["include_subscribers"] = include_subscribers
      query_params["client_capabilities"] = client_capabilities
      query_params["fetch_event_types"] = @api_client.build_collection_param(fetch_event_types, :multi)
      query_params["narrow"] = @api_client.build_collection_param(narrow, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RealTimeEventsApi.register_queue",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RealTimeEventsApi#register_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Error handling
    # Common error to many endpoints 
    # @return [nil]
    def rest_error_handling()
      rest_error_handling_with_http_info()
      nil
    end

    # Error handling
    # Common error to many endpoints 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def rest_error_handling_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: RealTimeEventsApi.rest_error_handling ..."}
      end
      # resource path
      local_var_path = "/rest-error-handling"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RealTimeEventsApi.rest_error_handling",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RealTimeEventsApi#rest_error_handling\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
