# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "uri"

module 
  class DraftsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create drafts
    # Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via `drafts` events.  `POST {{ api_url }}/v1/drafts` 
    # @return [JsonSuccess]
    def create_drafts(drafts : Array(Draft)?)
      data, _status_code, _headers = create_drafts_with_http_info(drafts)
      data
    end

    # Create drafts
    # Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def create_drafts_with_http_info(drafts : Array(Draft)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: DraftsApi.create_drafts ..."}
      end
      # resource path
      local_var_path = "/drafts"

      # query parameters
      query_params = Hash(String, String).new
      query_params["drafts"] = @api_client.build_collection_param(drafts, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"DraftsApi.create_drafts",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DraftsApi#create_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Delete a draft
    # Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a `drafts` event.  `DELETE {{ api_url }}/v1/drafts/{draft_id}` 
    # @param draft_id [Int32] The ID of the draft you want to delete. 
    # @return [JsonSuccess]
    def delete_draft(draft_id : Int32)
      data, _status_code, _headers = delete_draft_with_http_info(draft_id)
      data
    end

    # Delete a draft
    # Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    # @param draft_id [Int32] The ID of the draft you want to delete. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def delete_draft_with_http_info(draft_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: DraftsApi.delete_draft ..."}
      end
      # verify the required parameter "draft_id" is set
      if @api_client.config.client_side_validation && draft_id.nil?
        raise ArgumentError.new("Missing the required parameter 'draft_id' when calling DraftsApi.delete_draft")
      end
      # resource path
      local_var_path = "/drafts/{draft_id}".sub("{" + "draft_id" + "}", URI.encode(draft_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"DraftsApi.delete_draft",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DraftsApi#delete_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Edit a draft
    # Edit a draft on the server. The edit will be automatically synchronized to other clients via `drafts` events.  `PATCH {{ api_url }}/v1/drafts/{draft_id}` 
    # @param draft_id [Int32] The ID of the draft to be edited. 
    # @param draft [Draft] A JSON-encoded object containing a replacement draft object for this ID. 
    # @return [JsonSuccess]
    def edit_draft(draft_id : Int32, draft : Draft)
      data, _status_code, _headers = edit_draft_with_http_info(draft_id, draft)
      data
    end

    # Edit a draft
    # Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    # @param draft_id [Int32] The ID of the draft to be edited. 
    # @param draft [Draft] A JSON-encoded object containing a replacement draft object for this ID. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def edit_draft_with_http_info(draft_id : Int32, draft : Draft)
      if @api_client.config.debugging
        Log.debug {"Calling API: DraftsApi.edit_draft ..."}
      end
      # verify the required parameter "draft_id" is set
      if @api_client.config.client_side_validation && draft_id.nil?
        raise ArgumentError.new("Missing the required parameter 'draft_id' when calling DraftsApi.edit_draft")
      end
      # verify the required parameter "draft" is set
      if @api_client.config.client_side_validation && draft.nil?
        raise ArgumentError.new("Missing the required parameter 'draft' when calling DraftsApi.edit_draft")
      end
      # resource path
      local_var_path = "/drafts/{draft_id}".sub("{" + "draft_id" + "}", URI.encode(draft_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["draft"] = draft

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"DraftsApi.edit_draft",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DraftsApi#edit_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Get drafts
    # Fetch all drafts for the current user.  `GET {{ api_url }}/v1/drafts` 
    # @return [JsonSuccess]
    def get_drafts()
      data, _status_code, _headers = get_drafts_with_http_info()
      data
    end

    # Get drafts
    # Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def get_drafts_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: DraftsApi.get_drafts ..."}
      end
      # resource path
      local_var_path = "/drafts"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"DraftsApi.get_drafts",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: DraftsApi#get_drafts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end
  end
end
