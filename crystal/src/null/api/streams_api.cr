# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "uri"

module 
  class StreamsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive a stream
    # [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [JsonSuccess]
    def archive_stream(stream_id : Int32)
      data, _status_code, _headers = archive_stream_with_http_info(stream_id)
      data
    end

    # Archive a stream
    # [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def archive_stream_with_http_info(stream_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.archive_stream ..."}
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.archive_stream")
      end
      # resource path
      local_var_path = "/streams/{stream_id}".sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"StreamsApi.archive_stream",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#archive_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Create BigBlueButton video call
    # Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
    # @return [JsonSuccessBase]
    def create_big_blue_button_video_call()
      data, _status_code, _headers = create_big_blue_button_video_call_with_http_info()
      data
    end

    # Create BigBlueButton video call
    # Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def create_big_blue_button_video_call_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.create_big_blue_button_video_call ..."}
      end
      # resource path
      local_var_path = "/calls/bigbluebutton/create"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.create_big_blue_button_video_call",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#create_big_blue_button_video_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Delete a topic
    # Delete all messages in a topic.  `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @param topic_name [String] The name of the topic to delete. 
    # @return [JsonSuccess]
    def delete_topic(stream_id : Int32, topic_name : String)
      data, _status_code, _headers = delete_topic_with_http_info(stream_id, topic_name)
      data
    end

    # Delete a topic
    # Delete all messages in a topic.  &#x60;POST {{ api_url }}/v1/streams/{stream_id}/delete_topic&#x60;  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @param topic_name [String] The name of the topic to delete. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def delete_topic_with_http_info(stream_id : Int32, topic_name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.delete_topic ..."}
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.delete_topic")
      end
      # verify the required parameter "topic_name" is set
      if @api_client.config.client_side_validation && topic_name.nil?
        raise ArgumentError.new("Missing the required parameter 'topic_name' when calling StreamsApi.delete_topic")
      end
      # resource path
      local_var_path = "/streams/{stream_id}/delete_topic".sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["topic_name"] = topic_name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"StreamsApi.delete_topic",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#delete_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Get stream ID
    # Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 
    # @param stream [String] The name of the stream to access. 
    # @return [JsonSuccessBase]
    def get_stream_id(stream : String)
      data, _status_code, _headers = get_stream_id_with_http_info(stream)
      data
    end

    # Get stream ID
    # Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
    # @param stream [String] The name of the stream to access. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_stream_id_with_http_info(stream : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_stream_id ..."}
      end
      # verify the required parameter "stream" is set
      if @api_client.config.client_side_validation && stream.nil?
        raise ArgumentError.new("Missing the required parameter 'stream' when calling StreamsApi.get_stream_id")
      end
      # resource path
      local_var_path = "/get_stream_id"

      # query parameters
      query_params = Hash(String, String).new
      query_params["stream"] = stream

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_stream_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Get topics in a stream
    # Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [JsonSuccessBase]
    def get_stream_topics(stream_id : Int32)
      data, _status_code, _headers = get_stream_topics_with_http_info(stream_id)
      data
    end

    # Get topics in a stream
    # Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_stream_topics_with_http_info(stream_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_stream_topics ..."}
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.get_stream_topics")
      end
      # resource path
      local_var_path = "/users/me/{stream_id}/topics".sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_stream_topics",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_stream_topics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Get all streams
    # Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 
    # @return [JsonSuccessBase]
    def get_streams(include_public : Bool?, include_web_public : Bool?, include_subscribed : Bool?, include_all_active : Bool?, include_default : Bool?, include_owner_subscribed : Bool?)
      data, _status_code, _headers = get_streams_with_http_info(include_public, include_web_public, include_subscribed, include_all_active, include_default, include_owner_subscribed)
      data
    end

    # Get all streams
    # Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_streams_with_http_info(include_public : Bool?, include_web_public : Bool?, include_subscribed : Bool?, include_all_active : Bool?, include_default : Bool?, include_owner_subscribed : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_streams ..."}
      end
      # resource path
      local_var_path = "/streams"

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_public"] = include_public
      query_params["include_web_public"] = include_web_public
      query_params["include_subscribed"] = include_subscribed
      query_params["include_all_active"] = include_all_active
      query_params["include_default"] = include_default
      query_params["include_owner_subscribed"] = include_owner_subscribed

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_streams",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Get the subscribers of a stream
    # Get all users subscribed to a stream.  `Get {{ api_url }}/v1/streams/{stream_id}/members` 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [JsonSuccessBase]
    def get_subscribers(stream_id : Int32)
      data, _status_code, _headers = get_subscribers_with_http_info(stream_id)
      data
    end

    # Get the subscribers of a stream
    # Get all users subscribed to a stream.  &#x60;Get {{ api_url }}/v1/streams/{stream_id}/members&#x60; 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscribers_with_http_info(stream_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_subscribers ..."}
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.get_subscribers")
      end
      # resource path
      local_var_path = "/streams/{stream_id}/members".sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_subscribers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_subscribers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Get subscription status
    # Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 
    # @param user_id [Int32] The target user&#39;s ID. 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [JsonSuccessBase]
    def get_subscription_status(user_id : Int32, stream_id : Int32)
      data, _status_code, _headers = get_subscription_status_with_http_info(user_id, stream_id)
      data
    end

    # Get subscription status
    # Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
    # @param user_id [Int32] The target user&#39;s ID. 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscription_status_with_http_info(user_id : Int32, stream_id : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_subscription_status ..."}
      end
      # verify the required parameter "user_id" is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError.new("Missing the required parameter 'user_id' when calling StreamsApi.get_subscription_status")
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.get_subscription_status")
      end
      # resource path
      local_var_path = "/users/{user_id}/subscriptions/{stream_id}".sub("{" + "user_id" + "}", URI.encode(user_id.to_s)).sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_subscription_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_subscription_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Get subscribed streams
    # Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 
    # @return [JsonSuccessBase]
    def get_subscriptions(include_subscribers : Bool?)
      data, _status_code, _headers = get_subscriptions_with_http_info(include_subscribers)
      data
    end

    # Get subscribed streams
    # Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def get_subscriptions_with_http_info(include_subscribers : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.get_subscriptions ..."}
      end
      # resource path
      local_var_path = "/users/me/subscriptions"

      # query parameters
      query_params = Hash(String, String).new
      query_params["include_subscribers"] = include_subscribers

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"StreamsApi.get_subscriptions",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#get_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Topic muting
    # This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 
    # @param topic [String] The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
    # @param op [String] Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
    # @return [JsonSuccess]
    def mute_topic(topic : String, op : String, stream : String?, stream_id : Int32?)
      data, _status_code, _headers = mute_topic_with_http_info(topic, op, stream, stream_id)
      data
    end

    # Topic muting
    # This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
    # @param topic [String] The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
    # @param op [String] Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def mute_topic_with_http_info(topic : String, op : String, stream : String?, stream_id : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.mute_topic ..."}
      end
      # verify the required parameter "topic" is set
      if @api_client.config.client_side_validation && topic.nil?
        raise ArgumentError.new("Missing the required parameter 'topic' when calling StreamsApi.mute_topic")
      end
      # verify the required parameter "op" is set
      if @api_client.config.client_side_validation && op.nil?
        raise ArgumentError.new("Missing the required parameter 'op' when calling StreamsApi.mute_topic")
      end
      # verify enum value
      allowable_values = ["add", "remove"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(op)
        raise ArgumentError.new("invalid value for \"op\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/users/me/subscriptions/muted_topics"

      # query parameters
      query_params = Hash(String, String).new
      query_params["stream"] = stream
      query_params["stream_id"] = stream_id
      query_params["topic"] = topic
      query_params["op"] = op

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"StreamsApi.mute_topic",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#mute_topic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Subscribe to a stream
    # Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 
    # @param subscriptions [Array(Object)] A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
    # @return [OneOfobjectobject]
    def subscribe(subscriptions : Array(Object), principals : Array(OneOfstringinteger)?, authorization_errors_fatal : Bool?, announce : Bool?, invite_only : Bool?, history_public_to_subscribers : Bool?, stream_post_policy : Int32?, message_retention_days : OneOfstringinteger?)
      data, _status_code, _headers = subscribe_with_http_info(subscriptions, principals, authorization_errors_fatal, announce, invite_only, history_public_to_subscribers, stream_post_policy, message_retention_days)
      data
    end

    # Subscribe to a stream
    # Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
    # @param subscriptions [Array(Object)] A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
    # @return [Array<(OneOfobjectobject, Integer, Hash)>] OneOfobjectobject data, response status code and response headers
    def subscribe_with_http_info(subscriptions : Array(Object), principals : Array(OneOfstringinteger)?, authorization_errors_fatal : Bool?, announce : Bool?, invite_only : Bool?, history_public_to_subscribers : Bool?, stream_post_policy : Int32?, message_retention_days : OneOfstringinteger?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.subscribe ..."}
      end
      # verify the required parameter "subscriptions" is set
      if @api_client.config.client_side_validation && subscriptions.nil?
        raise ArgumentError.new("Missing the required parameter 'subscriptions' when calling StreamsApi.subscribe")
      end
      # resource path
      local_var_path = "/users/me/subscriptions"

      # query parameters
      query_params = Hash(String, String).new
      query_params["subscriptions"] = @api_client.build_collection_param(subscriptions, :multi)
      query_params["principals"] = @api_client.build_collection_param(principals, :multi)
      query_params["authorization_errors_fatal"] = authorization_errors_fatal
      query_params["announce"] = announce
      query_params["invite_only"] = invite_only
      query_params["history_public_to_subscribers"] = history_public_to_subscribers
      query_params["stream_post_policy"] = stream_post_policy
      query_params["message_retention_days"] = message_retention_days

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OneOfobjectobject"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"StreamsApi.subscribe",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#subscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OneOfobjectobject.from_json(data), status_code, headers
    end

    # Unsubscribe from a stream
    # Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 
    # @param subscriptions [Array(String)] A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
    # @return [JsonSuccessBase]
    def unsubscribe(subscriptions : Array(String), principals : Array(OneOfstringinteger)?)
      data, _status_code, _headers = unsubscribe_with_http_info(subscriptions, principals)
      data
    end

    # Unsubscribe from a stream
    # Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
    # @param subscriptions [Array(String)] A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def unsubscribe_with_http_info(subscriptions : Array(String), principals : Array(OneOfstringinteger)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.unsubscribe ..."}
      end
      # verify the required parameter "subscriptions" is set
      if @api_client.config.client_side_validation && subscriptions.nil?
        raise ArgumentError.new("Missing the required parameter 'subscriptions' when calling StreamsApi.unsubscribe")
      end
      # resource path
      local_var_path = "/users/me/subscriptions"

      # query parameters
      query_params = Hash(String, String).new
      query_params["subscriptions"] = @api_client.build_collection_param(subscriptions, :multi)
      query_params["principals"] = @api_client.build_collection_param(principals, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"StreamsApi.unsubscribe",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#unsubscribe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Update a stream
    # Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [JsonSuccess]
    def update_stream(stream_id : Int32, description : String?, new_name : String?, is_private : Bool?, is_announcement_only : Bool?, stream_post_policy : Int32?, history_public_to_subscribers : Bool?, message_retention_days : OneOfstringinteger?)
      data, _status_code, _headers = update_stream_with_http_info(stream_id, description, new_name, is_private, is_announcement_only, stream_post_policy, history_public_to_subscribers, message_retention_days)
      data
    end

    # Update a stream
    # Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
    # @param stream_id [Int32] The ID of the stream to access. 
    # @return [Array<(JsonSuccess, Integer, Hash)>] JsonSuccess data, response status code and response headers
    def update_stream_with_http_info(stream_id : Int32, description : String?, new_name : String?, is_private : Bool?, is_announcement_only : Bool?, stream_post_policy : Int32?, history_public_to_subscribers : Bool?, message_retention_days : OneOfstringinteger?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.update_stream ..."}
      end
      # verify the required parameter "stream_id" is set
      if @api_client.config.client_side_validation && stream_id.nil?
        raise ArgumentError.new("Missing the required parameter 'stream_id' when calling StreamsApi.update_stream")
      end
      # resource path
      local_var_path = "/streams/{stream_id}".sub("{" + "stream_id" + "}", URI.encode(stream_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["description"] = description
      query_params["new_name"] = new_name
      query_params["is_private"] = is_private
      query_params["is_announcement_only"] = is_announcement_only
      query_params["stream_post_policy"] = stream_post_policy
      query_params["history_public_to_subscribers"] = history_public_to_subscribers
      query_params["message_retention_days"] = message_retention_days

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccess"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"StreamsApi.update_stream",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#update_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccess.from_json(data), status_code, headers
    end

    # Update subscription settings
    # This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 
    # @param subscription_data [Array(Object)] A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
    # @return [JsonSuccessBase]
    def update_subscription_settings(subscription_data : Array(Object))
      data, _status_code, _headers = update_subscription_settings_with_http_info(subscription_data)
      data
    end

    # Update subscription settings
    # This endpoint is used to update the user&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
    # @param subscription_data [Array(Object)] A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_subscription_settings_with_http_info(subscription_data : Array(Object))
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.update_subscription_settings ..."}
      end
      # verify the required parameter "subscription_data" is set
      if @api_client.config.client_side_validation && subscription_data.nil?
        raise ArgumentError.new("Missing the required parameter 'subscription_data' when calling StreamsApi.update_subscription_settings")
      end
      # resource path
      local_var_path = "/users/me/subscriptions/properties"

      # query parameters
      query_params = Hash(String, String).new
      query_params["subscription_data"] = @api_client.build_collection_param(subscription_data, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"StreamsApi.update_subscription_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#update_subscription_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end

    # Update subscriptions
    # Update which streams you are are subscribed to. 
    # @return [JsonSuccessBase]
    def update_subscriptions(delete : Array(String)?, add : Array(Object)?)
      data, _status_code, _headers = update_subscriptions_with_http_info(delete, add)
      data
    end

    # Update subscriptions
    # Update which streams you are are subscribed to. 
    # @return [Array<(JsonSuccessBase, Integer, Hash)>] JsonSuccessBase data, response status code and response headers
    def update_subscriptions_with_http_info(delete : Array(String)?, add : Array(Object)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: StreamsApi.update_subscriptions ..."}
      end
      # resource path
      local_var_path = "/users/me/subscriptions"

      # query parameters
      query_params = Hash(String, String).new
      query_params["delete"] = @api_client.build_collection_param(delete, :multi)
      query_params["add"] = @api_client.build_collection_param(add, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JsonSuccessBase"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"StreamsApi.update_subscriptions",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: StreamsApi#update_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JsonSuccessBase.from_json(data), status_code, headers
    end
  end
end
