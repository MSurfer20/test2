# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "json"
require "time"

module 
  # A dictionary containing basic data on a given Zulip user. 
  class UserBase
    include JSON::Serializable

    # The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
    @[JSON::Field(key: email, type: String)]
    property email : String

    # A boolean specifying whether the user is a bot or full account. 
    @[JSON::Field(key: is_bot, type: Bool)]
    property is_bot : Bool

    # URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 
    @[JSON::Field(key: avatar_url, type: String, nilable: true, emit_null: true)]
    property avatar_url : String

    # Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 
    @[JSON::Field(key: avatar_version, type: Int32)]
    property avatar_version : Int32

    # Full name of the user or bot, used for all display purposes. 
    @[JSON::Field(key: full_name, type: String)]
    property full_name : String

    # A boolean specifying whether the user is an organization administrator. 
    @[JSON::Field(key: is_admin, type: Bool)]
    property is_admin : Bool

    # A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
    @[JSON::Field(key: is_owner, type: Bool)]
    property is_owner : Bool

    # A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
    @[JSON::Field(key: is_billing_admin, type: Bool)]
    property is_billing_admin : Bool

    # [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 
    @[JSON::Field(key: role, type: Int32)]
    property role : Int32

    # An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
    @[JSON::Field(key: bot_type, type: Int32, nilable: true, emit_null: true)]
    property bot_type : Int32

    # The unique ID of the user. 
    @[JSON::Field(key: user_id, type: Int32)]
    property user_id : Int32

    # If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 
    @[JSON::Field(key: bot_owner_id, type: Int32, nilable: true, emit_null: true)]
    property bot_owner_id : Int32

    # A boolean specifying whether the user account has been deactivated. 
    @[JSON::Field(key: is_active, type: Bool)]
    property is_active : Bool

    # A boolean specifying whether the user is a guest user. 
    @[JSON::Field(key: is_guest, type: Bool)]
    property is_guest : Bool

    # The time zone of the user. 
    @[JSON::Field(key: timezone, type: String)]
    property timezone : String

    # The time the user account was created. 
    @[JSON::Field(key: date_joined, type: String)]
    property date_joined : String

    # The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
    @[JSON::Field(key: delivery_email, type: String)]
    property delivery_email : String

    # A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 
    @[JSON::Field(key: profile_data, type: Hash(String, Object))]
    property profile_data : Hash(String, Object)

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@email : String | Nil, @is_bot : Bool | Nil, @avatar_url : String | Nil, @avatar_version : Int32 | Nil, @full_name : String | Nil, @is_admin : Bool | Nil, @is_owner : Bool | Nil, @is_billing_admin : Bool | Nil, @role : Int32 | Nil, @bot_type : Int32 | Nil, @user_id : Int32 | Nil, @bot_owner_id : Int32 | Nil, @is_active : Bool | Nil, @is_guest : Bool | Nil, @timezone : String | Nil, @date_joined : String | Nil, @delivery_email : String | Nil, @profile_data : Hash(String, Object) | Nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      role_validator = EnumAttributeValidator.new("Int32", ["100", "200", "300", "400", "600"])
      return false unless role_validator.valid?(@role)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new("Int32", ["100", "200", "300", "400", "600"])
      unless validator.valid?(role)
        raise ArgumentError.new("invalid value for \"role\", must be one of #{validator.allowable_values}.")
      end
      @role = role
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          is_bot == o.is_bot &&
          avatar_url == o.avatar_url &&
          avatar_version == o.avatar_version &&
          full_name == o.full_name &&
          is_admin == o.is_admin &&
          is_owner == o.is_owner &&
          is_billing_admin == o.is_billing_admin &&
          role == o.role &&
          bot_type == o.bot_type &&
          user_id == o.user_id &&
          bot_owner_id == o.bot_owner_id &&
          is_active == o.is_active &&
          is_guest == o.is_guest &&
          timezone == o.timezone &&
          date_joined == o.date_joined &&
          delivery_email == o.delivery_email &&
          profile_data == o.profile_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [email, is_bot, avatar_url, avatar_version, full_name, is_admin, is_owner, is_billing_admin, role, bot_type, user_id, bot_owner_id, is_active, is_guest, timezone, date_joined, delivery_email, profile_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
