# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "json"
require "time"

module 
  class GetMessagesAllOf
    include JSON::Serializable

    @[JSON::Field(key: avatar_url, type: AnyType, nilable: true, emit_null: true)]
    property avatar_url : AnyType

    @[JSON::Field(key: client, type: AnyType, nilable: true, emit_null: true)]
    property client : AnyType

    @[JSON::Field(key: content, type: AnyType, nilable: true, emit_null: true)]
    property content : AnyType

    @[JSON::Field(key: content_type, type: AnyType, nilable: true, emit_null: true)]
    property content_type : AnyType

    @[JSON::Field(key: display_recipient, type: AnyType, nilable: true, emit_null: true)]
    property display_recipient : AnyType

    @[JSON::Field(key: id, type: AnyType, nilable: true, emit_null: true)]
    property id : AnyType

    @[JSON::Field(key: is_me_message, type: AnyType, nilable: true, emit_null: true)]
    property is_me_message : AnyType

    @[JSON::Field(key: reactions, type: AnyType, nilable: true, emit_null: true)]
    property reactions : AnyType

    @[JSON::Field(key: recipient_id, type: AnyType, nilable: true, emit_null: true)]
    property recipient_id : AnyType

    @[JSON::Field(key: sender_email, type: AnyType, nilable: true, emit_null: true)]
    property sender_email : AnyType

    @[JSON::Field(key: sender_full_name, type: AnyType, nilable: true, emit_null: true)]
    property sender_full_name : AnyType

    @[JSON::Field(key: sender_id, type: AnyType, nilable: true, emit_null: true)]
    property sender_id : AnyType

    @[JSON::Field(key: sender_realm_str, type: AnyType, nilable: true, emit_null: true)]
    property sender_realm_str : AnyType

    @[JSON::Field(key: stream_id, type: AnyType, nilable: true, emit_null: true)]
    property stream_id : AnyType

    @[JSON::Field(key: subject, type: AnyType, nilable: true, emit_null: true)]
    property subject : AnyType

    @[JSON::Field(key: topic_links, type: AnyType, nilable: true, emit_null: true)]
    property topic_links : AnyType

    @[JSON::Field(key: submessages, type: AnyType, nilable: true, emit_null: true)]
    property submessages : AnyType

    @[JSON::Field(key: timestamp, type: AnyType, nilable: true, emit_null: true)]
    property timestamp : AnyType

    @[JSON::Field(key: type, type: AnyType, nilable: true, emit_null: true)]
    property _type : AnyType

    # The user's [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags 
    @[JSON::Field(key: flags, type: Array(String))]
    property flags : Array(String)

    # The UNIX timestamp for when the message was last edited, in UTC seconds. 
    @[JSON::Field(key: last_edit_timestamp, type: Int32)]
    property last_edit_timestamp : Int32

    # Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords. 
    @[JSON::Field(key: match_content, type: String)]
    property match_content : String

    # Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords. 
    @[JSON::Field(key: match_subject, type: String)]
    property match_subject : String

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@avatar_url : AnyType | Nil, @client : AnyType | Nil, @content : AnyType | Nil, @content_type : AnyType | Nil, @display_recipient : AnyType | Nil, @id : AnyType | Nil, @is_me_message : AnyType | Nil, @reactions : AnyType | Nil, @recipient_id : AnyType | Nil, @sender_email : AnyType | Nil, @sender_full_name : AnyType | Nil, @sender_id : AnyType | Nil, @sender_realm_str : AnyType | Nil, @stream_id : AnyType | Nil, @subject : AnyType | Nil, @topic_links : AnyType | Nil, @submessages : AnyType | Nil, @timestamp : AnyType | Nil, @_type : AnyType | Nil, @flags : Array(String) | Nil, @last_edit_timestamp : Int32 | Nil, @match_content : String | Nil, @match_subject : String | Nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          avatar_url == o.avatar_url &&
          client == o.client &&
          content == o.content &&
          content_type == o.content_type &&
          display_recipient == o.display_recipient &&
          id == o.id &&
          is_me_message == o.is_me_message &&
          reactions == o.reactions &&
          recipient_id == o.recipient_id &&
          sender_email == o.sender_email &&
          sender_full_name == o.sender_full_name &&
          sender_id == o.sender_id &&
          sender_realm_str == o.sender_realm_str &&
          stream_id == o.stream_id &&
          subject == o.subject &&
          topic_links == o.topic_links &&
          submessages == o.submessages &&
          timestamp == o.timestamp &&
          _type == o._type &&
          flags == o.flags &&
          last_edit_timestamp == o.last_edit_timestamp &&
          match_content == o.match_content &&
          match_subject == o.match_subject
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [avatar_url, client, content, content_type, display_recipient, id, is_me_message, reactions, recipient_id, sender_email, sender_full_name, sender_id, sender_realm_str, stream_id, subject, topic_links, submessages, timestamp, _type, flags, last_edit_timestamp, match_content, match_subject].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
