# #Zulip REST API
#
##Powerful open source group chat 
#
#The version of the OpenAPI document: 1.0.0
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.2.0
#

require "json"
require "time"

module 
  class Subscriptions
    include JSON::Serializable

    # The unique ID of a stream. 
    @[JSON::Field(key: stream_id, type: Int32)]
    property stream_id : Int32

    # The name of a stream. 
    @[JSON::Field(key: name, type: String)]
    property name : String

    # The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 
    @[JSON::Field(key: description, type: String)]
    property description : String

    # A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
    @[JSON::Field(key: rendered_description, type: String)]
    property rendered_description : String

    # The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
    @[JSON::Field(key: date_created, type: Int32)]
    property date_created : Int32

    # Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
    @[JSON::Field(key: invite_only, type: Bool)]
    property invite_only : Bool

    # A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`. 
    @[JSON::Field(key: subscribers, type: Array(Int32))]
    property subscribers : Array(Int32)

    # A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream. 
    @[JSON::Field(key: desktop_notifications, type: Bool, nilable: true, emit_null: true)]
    property desktop_notifications : Bool

    # A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream. 
    @[JSON::Field(key: email_notifications, type: Bool, nilable: true, emit_null: true)]
    property email_notifications : Bool

    # A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream. 
    @[JSON::Field(key: wildcard_mentions_notify, type: Bool, nilable: true, emit_null: true)]
    property wildcard_mentions_notify : Bool

    # A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream. 
    @[JSON::Field(key: push_notifications, type: Bool, nilable: true, emit_null: true)]
    property push_notifications : Bool

    # A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream. 
    @[JSON::Field(key: audible_notifications, type: Bool, nilable: true, emit_null: true)]
    property audible_notifications : Bool

    # A boolean specifying whether the given stream has been pinned to the top. 
    @[JSON::Field(key: pin_to_top, type: Bool)]
    property pin_to_top : Bool

    # Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email). 
    @[JSON::Field(key: email_address, type: String)]
    property email_address : String

    # Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`). 
    @[JSON::Field(key: is_muted, type: Bool)]
    property is_muted : Bool

    # Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available. 
    @[JSON::Field(key: in_home_view, type: Bool)]
    property in_home_view : Bool

    # Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 
    @[JSON::Field(key: is_announcement_only, type: Bool)]
    property is_announcement_only : Bool

    # Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
    @[JSON::Field(key: is_web_public, type: Bool)]
    property is_web_public : Bool

    # The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31). 
    @[JSON::Field(key: role, type: Int32)]
    property role : Int32

    # The user's personal color for the stream. 
    @[JSON::Field(key: color, type: String)]
    property color : String

    # Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
    @[JSON::Field(key: stream_post_policy, type: Int32)]
    property stream_post_policy : Int32

    # Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    @[JSON::Field(key: message_retention_days, type: Int32, nilable: true, emit_null: true)]
    property message_retention_days : Int32

    # Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 
    @[JSON::Field(key: history_public_to_subscribers, type: Bool)]
    property history_public_to_subscribers : Bool

    # The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
    @[JSON::Field(key: first_message_id, type: Int32, nilable: true, emit_null: true)]
    property first_message_id : Int32

    # The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic. 
    @[JSON::Field(key: stream_weekly_traffic, type: Int32, nilable: true, emit_null: true)]
    property stream_weekly_traffic : Int32

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@stream_id : Int32 | Nil, @name : String | Nil, @description : String | Nil, @rendered_description : String | Nil, @date_created : Int32 | Nil, @invite_only : Bool | Nil, @subscribers : Array(Int32) | Nil, @desktop_notifications : Bool | Nil, @email_notifications : Bool | Nil, @wildcard_mentions_notify : Bool | Nil, @push_notifications : Bool | Nil, @audible_notifications : Bool | Nil, @pin_to_top : Bool | Nil, @email_address : String | Nil, @is_muted : Bool | Nil, @in_home_view : Bool | Nil, @is_announcement_only : Bool | Nil, @is_web_public : Bool | Nil, @role : Int32 | Nil, @color : String | Nil, @stream_post_policy : Int32 | Nil, @message_retention_days : Int32 | Nil, @history_public_to_subscribers : Bool | Nil, @first_message_id : Int32 | Nil, @stream_weekly_traffic : Int32 | Nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      role_validator = EnumAttributeValidator.new("Int32", ["20", "50"])
      return false unless role_validator.valid?(@role)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new("Int32", ["20", "50"])
      unless validator.valid?(role)
        raise ArgumentError.new("invalid value for \"role\", must be one of #{validator.allowable_values}.")
      end
      @role = role
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          stream_id == o.stream_id &&
          name == o.name &&
          description == o.description &&
          rendered_description == o.rendered_description &&
          date_created == o.date_created &&
          invite_only == o.invite_only &&
          subscribers == o.subscribers &&
          desktop_notifications == o.desktop_notifications &&
          email_notifications == o.email_notifications &&
          wildcard_mentions_notify == o.wildcard_mentions_notify &&
          push_notifications == o.push_notifications &&
          audible_notifications == o.audible_notifications &&
          pin_to_top == o.pin_to_top &&
          email_address == o.email_address &&
          is_muted == o.is_muted &&
          in_home_view == o.in_home_view &&
          is_announcement_only == o.is_announcement_only &&
          is_web_public == o.is_web_public &&
          role == o.role &&
          color == o.color &&
          stream_post_policy == o.stream_post_policy &&
          message_retention_days == o.message_retention_days &&
          history_public_to_subscribers == o.history_public_to_subscribers &&
          first_message_id == o.first_message_id &&
          stream_weekly_traffic == o.stream_weekly_traffic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [stream_id, name, description, rendered_description, date_created, invite_only, subscribers, desktop_notifications, email_notifications, wildcard_mentions_notify, push_notifications, audible_notifications, pin_to_top, email_address, is_muted, in_home_view, is_announcement_only, is_web_public, role, color, stream_post_policy, message_retention_days, history_public_to_subscribers, first_message_id, stream_weekly_traffic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
