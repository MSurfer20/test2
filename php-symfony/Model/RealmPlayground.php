<?php
/**
 * RealmPlayground
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RealmPlayground model.
 *
 * Object containing details about a realm playground.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class RealmPlayground 
{
        /**
     * The unique ID for the realm playground.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $id;

    /**
     * The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49).
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * The name of the Pygments language lexer for that programming language.
     *
     * @var string|null
     * @SerializedName("pygments_language")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $pygmentsLanguage;

    /**
     * The url prefix for the playground.
     *
     * @var string|null
     * @SerializedName("url_prefix")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $urlPrefix;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->pygmentsLanguage = isset($data['pygmentsLanguage']) ? $data['pygmentsLanguage'] : null;
        $this->urlPrefix = isset($data['urlPrefix']) ? $data['urlPrefix'] : null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id  The unique ID for the realm playground.
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49).
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets pygmentsLanguage.
     *
     * @return string|null
     */
    public function getPygmentsLanguage()
    {
        return $this->pygmentsLanguage;
    }

    /**
     * Sets pygmentsLanguage.
     *
     * @param string|null $pygmentsLanguage  The name of the Pygments language lexer for that programming language.
     *
     * @return $this
     */
    public function setPygmentsLanguage($pygmentsLanguage = null)
    {
        $this->pygmentsLanguage = $pygmentsLanguage;

        return $this;
    }

    /**
     * Gets urlPrefix.
     *
     * @return string|null
     */
    public function getUrlPrefix()
    {
        return $this->urlPrefix;
    }

    /**
     * Sets urlPrefix.
     *
     * @param string|null $urlPrefix  The url prefix for the playground.
     *
     * @return $this
     */
    public function setUrlPrefix($urlPrefix = null)
    {
        $this->urlPrefix = $urlPrefix;

        return $this;
    }
}


