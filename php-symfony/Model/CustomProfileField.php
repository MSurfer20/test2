<?php
/**
 * CustomProfileField
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CustomProfileField model.
 *
 * Dictionary containing the details of a custom profile field configured for this organization.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class CustomProfileField 
{
        /**
     * The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $id;

    /**
     * An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account
     *
     * @var int|null
     * @SerializedName("type")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $type;

    /**
     * Custom profile fields are displayed in both settings UI and UI showing users&#39; profiles in increasing &#x60;order&#x60;.
     *
     * @var int|null
     * @SerializedName("order")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $order;

    /**
     * The name of the custom profile field.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.
     *
     * @var string|null
     * @SerializedName("hint")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $hint;

    /**
     * Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.
     *
     * @var string|null
     * @SerializedName("field_data")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $fieldData;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->order = isset($data['order']) ? $data['order'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->hint = isset($data['hint']) ? $data['hint'] : null;
        $this->fieldData = isset($data['fieldData']) ? $data['fieldData'] : null;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id  The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return int|null
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param int|null $type  An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account
     *
     * @return $this
     */
    public function setType($type = null)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets order.
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->order;
    }

    /**
     * Sets order.
     *
     * @param int|null $order  Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.
     *
     * @return $this
     */
    public function setOrder($order = null)
    {
        $this->order = $order;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  The name of the custom profile field.
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets hint.
     *
     * @return string|null
     */
    public function getHint()
    {
        return $this->hint;
    }

    /**
     * Sets hint.
     *
     * @param string|null $hint  The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.
     *
     * @return $this
     */
    public function setHint($hint = null)
    {
        $this->hint = $hint;

        return $this;
    }

    /**
     * Gets fieldData.
     *
     * @return string|null
     */
    public function getFieldData()
    {
        return $this->fieldData;
    }

    /**
     * Sets fieldData.
     *
     * @param string|null $fieldData  Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.
     *
     * @return $this
     */
    public function setFieldData($fieldData = null)
    {
        $this->fieldData = $fieldData;

        return $this;
    }
}


