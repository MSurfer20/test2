<?php
/**
 * BasicStreamBase
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BasicStreamBase model.
 *
 * Object containing basic details about the stream.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class BasicStreamBase 
{
        /**
     * The unique ID of the stream.
     *
     * @var int|null
     * @SerializedName("stream_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $streamId;

    /**
     * The name of the stream.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description.
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $description;

    /**
     * The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
     *
     * @var int|null
     * @SerializedName("date_created")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $dateCreated;

    /**
     * Specifies whether the stream is private or not. Only people who have been invited can access a private stream.
     *
     * @var bool|null
     * @SerializedName("invite_only")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $inviteOnly;

    /**
     * The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
     *
     * @var string|null
     * @SerializedName("rendered_description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $renderedDescription;

    /**
     * Whether the stream has been configured to allow unauthenticated access to its message history from the web.
     *
     * @var bool|null
     * @SerializedName("is_web_public")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isWebPublic;

    /**
     * Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.
     *
     * @var int|null
     * @SerializedName("stream_post_policy")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $streamPostPolicy;

    /**
     * Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).
     *
     * @var int|null
     * @SerializedName("message_retention_days")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $messageRetentionDays;

    /**
     * Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future.
     *
     * @var bool|null
     * @SerializedName("history_public_to_subscribers")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $historyPublicToSubscribers;

    /**
     * The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.
     *
     * @var int|null
     * @SerializedName("first_message_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $firstMessageId;

    /**
     * Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead.
     *
     * @var bool|null
     * @SerializedName("is_announcement_only")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isAnnouncementOnly;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->streamId = isset($data['streamId']) ? $data['streamId'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->dateCreated = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->inviteOnly = isset($data['inviteOnly']) ? $data['inviteOnly'] : null;
        $this->renderedDescription = isset($data['renderedDescription']) ? $data['renderedDescription'] : null;
        $this->isWebPublic = isset($data['isWebPublic']) ? $data['isWebPublic'] : null;
        $this->streamPostPolicy = isset($data['streamPostPolicy']) ? $data['streamPostPolicy'] : null;
        $this->messageRetentionDays = isset($data['messageRetentionDays']) ? $data['messageRetentionDays'] : null;
        $this->historyPublicToSubscribers = isset($data['historyPublicToSubscribers']) ? $data['historyPublicToSubscribers'] : null;
        $this->firstMessageId = isset($data['firstMessageId']) ? $data['firstMessageId'] : null;
        $this->isAnnouncementOnly = isset($data['isAnnouncementOnly']) ? $data['isAnnouncementOnly'] : null;
    }

    /**
     * Gets streamId.
     *
     * @return int|null
     */
    public function getStreamId()
    {
        return $this->streamId;
    }

    /**
     * Sets streamId.
     *
     * @param int|null $streamId  The unique ID of the stream.
     *
     * @return $this
     */
    public function setStreamId($streamId = null)
    {
        $this->streamId = $streamId;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  The name of the stream.
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets dateCreated.
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->dateCreated;
    }

    /**
     * Sets dateCreated.
     *
     * @param int|null $dateCreated  The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
     *
     * @return $this
     */
    public function setDateCreated($dateCreated = null)
    {
        $this->dateCreated = $dateCreated;

        return $this;
    }

    /**
     * Gets inviteOnly.
     *
     * @return bool|null
     */
    public function isInviteOnly()
    {
        return $this->inviteOnly;
    }

    /**
     * Sets inviteOnly.
     *
     * @param bool|null $inviteOnly  Specifies whether the stream is private or not. Only people who have been invited can access a private stream.
     *
     * @return $this
     */
    public function setInviteOnly($inviteOnly = null)
    {
        $this->inviteOnly = $inviteOnly;

        return $this;
    }

    /**
     * Gets renderedDescription.
     *
     * @return string|null
     */
    public function getRenderedDescription()
    {
        return $this->renderedDescription;
    }

    /**
     * Sets renderedDescription.
     *
     * @param string|null $renderedDescription  The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
     *
     * @return $this
     */
    public function setRenderedDescription($renderedDescription = null)
    {
        $this->renderedDescription = $renderedDescription;

        return $this;
    }

    /**
     * Gets isWebPublic.
     *
     * @return bool|null
     */
    public function isIsWebPublic()
    {
        return $this->isWebPublic;
    }

    /**
     * Sets isWebPublic.
     *
     * @param bool|null $isWebPublic  Whether the stream has been configured to allow unauthenticated access to its message history from the web.
     *
     * @return $this
     */
    public function setIsWebPublic($isWebPublic = null)
    {
        $this->isWebPublic = $isWebPublic;

        return $this;
    }

    /**
     * Gets streamPostPolicy.
     *
     * @return int|null
     */
    public function getStreamPostPolicy()
    {
        return $this->streamPostPolicy;
    }

    /**
     * Sets streamPostPolicy.
     *
     * @param int|null $streamPostPolicy  Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.
     *
     * @return $this
     */
    public function setStreamPostPolicy($streamPostPolicy = null)
    {
        $this->streamPostPolicy = $streamPostPolicy;

        return $this;
    }

    /**
     * Gets messageRetentionDays.
     *
     * @return int|null
     */
    public function getMessageRetentionDays()
    {
        return $this->messageRetentionDays;
    }

    /**
     * Sets messageRetentionDays.
     *
     * @param int|null $messageRetentionDays  Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).
     *
     * @return $this
     */
    public function setMessageRetentionDays($messageRetentionDays = null)
    {
        $this->messageRetentionDays = $messageRetentionDays;

        return $this;
    }

    /**
     * Gets historyPublicToSubscribers.
     *
     * @return bool|null
     */
    public function isHistoryPublicToSubscribers()
    {
        return $this->historyPublicToSubscribers;
    }

    /**
     * Sets historyPublicToSubscribers.
     *
     * @param bool|null $historyPublicToSubscribers  Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.
     *
     * @return $this
     */
    public function setHistoryPublicToSubscribers($historyPublicToSubscribers = null)
    {
        $this->historyPublicToSubscribers = $historyPublicToSubscribers;

        return $this;
    }

    /**
     * Gets firstMessageId.
     *
     * @return int|null
     */
    public function getFirstMessageId()
    {
        return $this->firstMessageId;
    }

    /**
     * Sets firstMessageId.
     *
     * @param int|null $firstMessageId  The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.
     *
     * @return $this
     */
    public function setFirstMessageId($firstMessageId = null)
    {
        $this->firstMessageId = $firstMessageId;

        return $this;
    }

    /**
     * Gets isAnnouncementOnly.
     *
     * @return bool|null
     */
    public function isIsAnnouncementOnly()
    {
        return $this->isAnnouncementOnly;
    }

    /**
     * Sets isAnnouncementOnly.
     *
     * @param bool|null $isAnnouncementOnly  Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.
     *
     * @return $this
     */
    public function setIsAnnouncementOnly($isAnnouncementOnly = null)
    {
        $this->isAnnouncementOnly = $isAnnouncementOnly;

        return $this;
    }
}


