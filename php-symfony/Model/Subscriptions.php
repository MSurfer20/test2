<?php
/**
 * Subscriptions
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Subscriptions model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Subscriptions 
{
        /**
     * The unique ID of a stream.
     *
     * @var int|null
     * @SerializedName("stream_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $streamId;

    /**
     * The name of a stream.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description.
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $description;

    /**
     * A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
     *
     * @var string|null
     * @SerializedName("rendered_description")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $renderedDescription;

    /**
     * The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
     *
     * @var int|null
     * @SerializedName("date_created")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $dateCreated;

    /**
     * Specifies whether the stream is private or not. Only people who have been invited can access a private stream.
     *
     * @var bool|null
     * @SerializedName("invite_only")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $inviteOnly;

    /**
     * A list of user IDs of users who are also subscribed to a given stream. Included only if &#x60;include_subscribers&#x60; is &#x60;true&#x60;.
     *
     * @var int[]|null
     * @SerializedName("subscribers")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    protected $subscribers;

    /**
     * A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream.
     *
     * @var bool|null
     * @SerializedName("desktop_notifications")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $desktopNotifications;

    /**
     * A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream.
     *
     * @var bool|null
     * @SerializedName("email_notifications")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $emailNotifications;

    /**
     * A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream.
     *
     * @var bool|null
     * @SerializedName("wildcard_mentions_notify")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $wildcardMentionsNotify;

    /**
     * A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream.
     *
     * @var bool|null
     * @SerializedName("push_notifications")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $pushNotifications;

    /**
     * A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream.
     *
     * @var bool|null
     * @SerializedName("audible_notifications")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $audibleNotifications;

    /**
     * A boolean specifying whether the given stream has been pinned to the top.
     *
     * @var bool|null
     * @SerializedName("pin_to_top")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $pinToTop;

    /**
     * Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email).
     *
     * @var string|null
     * @SerializedName("email_address")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $emailAddress;

    /**
     * Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in &#x60;All messages&#x60; view (previously known as &#x60;Home&#x60; view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named &#x60;in_home_view&#x60; (with the opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;).
     *
     * @var bool|null
     * @SerializedName("is_muted")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isMuted;

    /**
     * Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available.
     *
     * @var bool|null
     * @SerializedName("in_home_view")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $inHomeView;

    /**
     * Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead.
     *
     * @var bool|null
     * @SerializedName("is_announcement_only")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isAnnouncementOnly;

    /**
     * Whether the stream has been configured to allow unauthenticated access to its message history from the web.
     *
     * @var bool|null
     * @SerializedName("is_web_public")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isWebPublic;

    /**
     * The user&#39;s role within the stream (distinct from the user&#39;s [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 &#x3D;&gt; Stream administrator. * 50 &#x3D;&gt; Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31).
     *
     * @var int|null
     * @SerializedName("role")
     * @Assert\Choice({ 20, 50 })
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $role;

    /**
     * The user&#39;s personal color for the stream.
     *
     * @var string|null
     * @SerializedName("color")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $color;

    /**
     * Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.
     *
     * @var int|null
     * @SerializedName("stream_post_policy")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $streamPostPolicy;

    /**
     * Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).
     *
     * @var int|null
     * @SerializedName("message_retention_days")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $messageRetentionDays;

    /**
     * Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future.
     *
     * @var bool|null
     * @SerializedName("history_public_to_subscribers")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $historyPublicToSubscribers;

    /**
     * The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.
     *
     * @var int|null
     * @SerializedName("first_message_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $firstMessageId;

    /**
     * The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic.
     *
     * @var int|null
     * @SerializedName("stream_weekly_traffic")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $streamWeeklyTraffic;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->streamId = isset($data['streamId']) ? $data['streamId'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->renderedDescription = isset($data['renderedDescription']) ? $data['renderedDescription'] : null;
        $this->dateCreated = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->inviteOnly = isset($data['inviteOnly']) ? $data['inviteOnly'] : null;
        $this->subscribers = isset($data['subscribers']) ? $data['subscribers'] : null;
        $this->desktopNotifications = isset($data['desktopNotifications']) ? $data['desktopNotifications'] : null;
        $this->emailNotifications = isset($data['emailNotifications']) ? $data['emailNotifications'] : null;
        $this->wildcardMentionsNotify = isset($data['wildcardMentionsNotify']) ? $data['wildcardMentionsNotify'] : null;
        $this->pushNotifications = isset($data['pushNotifications']) ? $data['pushNotifications'] : null;
        $this->audibleNotifications = isset($data['audibleNotifications']) ? $data['audibleNotifications'] : null;
        $this->pinToTop = isset($data['pinToTop']) ? $data['pinToTop'] : null;
        $this->emailAddress = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->isMuted = isset($data['isMuted']) ? $data['isMuted'] : null;
        $this->inHomeView = isset($data['inHomeView']) ? $data['inHomeView'] : null;
        $this->isAnnouncementOnly = isset($data['isAnnouncementOnly']) ? $data['isAnnouncementOnly'] : null;
        $this->isWebPublic = isset($data['isWebPublic']) ? $data['isWebPublic'] : null;
        $this->role = isset($data['role']) ? $data['role'] : null;
        $this->color = isset($data['color']) ? $data['color'] : null;
        $this->streamPostPolicy = isset($data['streamPostPolicy']) ? $data['streamPostPolicy'] : null;
        $this->messageRetentionDays = isset($data['messageRetentionDays']) ? $data['messageRetentionDays'] : null;
        $this->historyPublicToSubscribers = isset($data['historyPublicToSubscribers']) ? $data['historyPublicToSubscribers'] : null;
        $this->firstMessageId = isset($data['firstMessageId']) ? $data['firstMessageId'] : null;
        $this->streamWeeklyTraffic = isset($data['streamWeeklyTraffic']) ? $data['streamWeeklyTraffic'] : null;
    }

    /**
     * Gets streamId.
     *
     * @return int|null
     */
    public function getStreamId()
    {
        return $this->streamId;
    }

    /**
     * Sets streamId.
     *
     * @param int|null $streamId  The unique ID of a stream.
     *
     * @return $this
     */
    public function setStreamId($streamId = null)
    {
        $this->streamId = $streamId;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  The name of a stream.
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description  The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets renderedDescription.
     *
     * @return string|null
     */
    public function getRenderedDescription()
    {
        return $this->renderedDescription;
    }

    /**
     * Sets renderedDescription.
     *
     * @param string|null $renderedDescription  A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.
     *
     * @return $this
     */
    public function setRenderedDescription($renderedDescription = null)
    {
        $this->renderedDescription = $renderedDescription;

        return $this;
    }

    /**
     * Gets dateCreated.
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->dateCreated;
    }

    /**
     * Sets dateCreated.
     *
     * @param int|null $dateCreated  The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).
     *
     * @return $this
     */
    public function setDateCreated($dateCreated = null)
    {
        $this->dateCreated = $dateCreated;

        return $this;
    }

    /**
     * Gets inviteOnly.
     *
     * @return bool|null
     */
    public function isInviteOnly()
    {
        return $this->inviteOnly;
    }

    /**
     * Sets inviteOnly.
     *
     * @param bool|null $inviteOnly  Specifies whether the stream is private or not. Only people who have been invited can access a private stream.
     *
     * @return $this
     */
    public function setInviteOnly($inviteOnly = null)
    {
        $this->inviteOnly = $inviteOnly;

        return $this;
    }

    /**
     * Gets subscribers.
     *
     * @return int[]|null
     */
    public function getSubscribers(): ?array
    {
        return $this->subscribers;
    }

    /**
     * Sets subscribers.
     *
     * @param int[]|null $subscribers  A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`.
     *
     * @return $this
     */
    public function setSubscribers(array $subscribers = null)
    {
        $this->subscribers = $subscribers;

        return $this;
    }

    /**
     * Gets desktopNotifications.
     *
     * @return bool|null
     */
    public function isDesktopNotifications()
    {
        return $this->desktopNotifications;
    }

    /**
     * Sets desktopNotifications.
     *
     * @param bool|null $desktopNotifications  A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream.
     *
     * @return $this
     */
    public function setDesktopNotifications($desktopNotifications = null)
    {
        $this->desktopNotifications = $desktopNotifications;

        return $this;
    }

    /**
     * Gets emailNotifications.
     *
     * @return bool|null
     */
    public function isEmailNotifications()
    {
        return $this->emailNotifications;
    }

    /**
     * Sets emailNotifications.
     *
     * @param bool|null $emailNotifications  A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream.
     *
     * @return $this
     */
    public function setEmailNotifications($emailNotifications = null)
    {
        $this->emailNotifications = $emailNotifications;

        return $this;
    }

    /**
     * Gets wildcardMentionsNotify.
     *
     * @return bool|null
     */
    public function isWildcardMentionsNotify()
    {
        return $this->wildcardMentionsNotify;
    }

    /**
     * Sets wildcardMentionsNotify.
     *
     * @param bool|null $wildcardMentionsNotify  A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream.
     *
     * @return $this
     */
    public function setWildcardMentionsNotify($wildcardMentionsNotify = null)
    {
        $this->wildcardMentionsNotify = $wildcardMentionsNotify;

        return $this;
    }

    /**
     * Gets pushNotifications.
     *
     * @return bool|null
     */
    public function isPushNotifications()
    {
        return $this->pushNotifications;
    }

    /**
     * Sets pushNotifications.
     *
     * @param bool|null $pushNotifications  A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream.
     *
     * @return $this
     */
    public function setPushNotifications($pushNotifications = null)
    {
        $this->pushNotifications = $pushNotifications;

        return $this;
    }

    /**
     * Gets audibleNotifications.
     *
     * @return bool|null
     */
    public function isAudibleNotifications()
    {
        return $this->audibleNotifications;
    }

    /**
     * Sets audibleNotifications.
     *
     * @param bool|null $audibleNotifications  A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream.
     *
     * @return $this
     */
    public function setAudibleNotifications($audibleNotifications = null)
    {
        $this->audibleNotifications = $audibleNotifications;

        return $this;
    }

    /**
     * Gets pinToTop.
     *
     * @return bool|null
     */
    public function isPinToTop()
    {
        return $this->pinToTop;
    }

    /**
     * Sets pinToTop.
     *
     * @param bool|null $pinToTop  A boolean specifying whether the given stream has been pinned to the top.
     *
     * @return $this
     */
    public function setPinToTop($pinToTop = null)
    {
        $this->pinToTop = $pinToTop;

        return $this;
    }

    /**
     * Gets emailAddress.
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->emailAddress;
    }

    /**
     * Sets emailAddress.
     *
     * @param string|null $emailAddress  Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email).
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress = null)
    {
        $this->emailAddress = $emailAddress;

        return $this;
    }

    /**
     * Gets isMuted.
     *
     * @return bool|null
     */
    public function isIsMuted()
    {
        return $this->isMuted;
    }

    /**
     * Sets isMuted.
     *
     * @param bool|null $isMuted  Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`).
     *
     * @return $this
     */
    public function setIsMuted($isMuted = null)
    {
        $this->isMuted = $isMuted;

        return $this;
    }

    /**
     * Gets inHomeView.
     *
     * @return bool|null
     */
    public function isInHomeView()
    {
        return $this->inHomeView;
    }

    /**
     * Sets inHomeView.
     *
     * @param bool|null $inHomeView  Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available.
     *
     * @return $this
     */
    public function setInHomeView($inHomeView = null)
    {
        $this->inHomeView = $inHomeView;

        return $this;
    }

    /**
     * Gets isAnnouncementOnly.
     *
     * @return bool|null
     */
    public function isIsAnnouncementOnly()
    {
        return $this->isAnnouncementOnly;
    }

    /**
     * Sets isAnnouncementOnly.
     *
     * @param bool|null $isAnnouncementOnly  Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.
     *
     * @return $this
     */
    public function setIsAnnouncementOnly($isAnnouncementOnly = null)
    {
        $this->isAnnouncementOnly = $isAnnouncementOnly;

        return $this;
    }

    /**
     * Gets isWebPublic.
     *
     * @return bool|null
     */
    public function isIsWebPublic()
    {
        return $this->isWebPublic;
    }

    /**
     * Sets isWebPublic.
     *
     * @param bool|null $isWebPublic  Whether the stream has been configured to allow unauthenticated access to its message history from the web.
     *
     * @return $this
     */
    public function setIsWebPublic($isWebPublic = null)
    {
        $this->isWebPublic = $isWebPublic;

        return $this;
    }

    /**
     * Gets role.
     *
     * @return int|null
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Sets role.
     *
     * @param int|null $role  The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31).
     *
     * @return $this
     */
    public function setRole($role = null)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Gets color.
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->color;
    }

    /**
     * Sets color.
     *
     * @param string|null $color  The user's personal color for the stream.
     *
     * @return $this
     */
    public function setColor($color = null)
    {
        $this->color = $color;

        return $this;
    }

    /**
     * Gets streamPostPolicy.
     *
     * @return int|null
     */
    public function getStreamPostPolicy()
    {
        return $this->streamPostPolicy;
    }

    /**
     * Sets streamPostPolicy.
     *
     * @param int|null $streamPostPolicy  Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.
     *
     * @return $this
     */
    public function setStreamPostPolicy($streamPostPolicy = null)
    {
        $this->streamPostPolicy = $streamPostPolicy;

        return $this;
    }

    /**
     * Gets messageRetentionDays.
     *
     * @return int|null
     */
    public function getMessageRetentionDays()
    {
        return $this->messageRetentionDays;
    }

    /**
     * Sets messageRetentionDays.
     *
     * @param int|null $messageRetentionDays  Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).
     *
     * @return $this
     */
    public function setMessageRetentionDays($messageRetentionDays = null)
    {
        $this->messageRetentionDays = $messageRetentionDays;

        return $this;
    }

    /**
     * Gets historyPublicToSubscribers.
     *
     * @return bool|null
     */
    public function isHistoryPublicToSubscribers()
    {
        return $this->historyPublicToSubscribers;
    }

    /**
     * Sets historyPublicToSubscribers.
     *
     * @param bool|null $historyPublicToSubscribers  Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.
     *
     * @return $this
     */
    public function setHistoryPublicToSubscribers($historyPublicToSubscribers = null)
    {
        $this->historyPublicToSubscribers = $historyPublicToSubscribers;

        return $this;
    }

    /**
     * Gets firstMessageId.
     *
     * @return int|null
     */
    public function getFirstMessageId()
    {
        return $this->firstMessageId;
    }

    /**
     * Sets firstMessageId.
     *
     * @param int|null $firstMessageId  The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.
     *
     * @return $this
     */
    public function setFirstMessageId($firstMessageId = null)
    {
        $this->firstMessageId = $firstMessageId;

        return $this;
    }

    /**
     * Gets streamWeeklyTraffic.
     *
     * @return int|null
     */
    public function getStreamWeeklyTraffic()
    {
        return $this->streamWeeklyTraffic;
    }

    /**
     * Sets streamWeeklyTraffic.
     *
     * @param int|null $streamWeeklyTraffic  The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic.
     *
     * @return $this
     */
    public function setStreamWeeklyTraffic($streamWeeklyTraffic = null)
    {
        $this->streamWeeklyTraffic = $streamWeeklyTraffic;

        return $this;
    }
}


