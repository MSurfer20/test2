<?php
/**
 * AddSubscriptionsResponse
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AddSubscriptionsResponse model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class AddSubscriptionsResponse 
{
        /**
     * @var AnyType
     * @SerializedName("result")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("AnyType")
     * @Type("AnyType")
     */
    protected $result;

    /**
     * @var AnyType
     * @SerializedName("msg")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("AnyType")
     * @Type("AnyType")
     */
    protected $msg;

    /**
     * A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.
     *
     * @var string[]|null
     * @SerializedName("subscribed")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string, string>")
     */
    protected $subscribed;

    /**
     * A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.
     *
     * @var string[]|null
     * @SerializedName("already_subscribed")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string, string>")
     */
    protected $alreadySubscribed;

    /**
     * A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;.
     *
     * @var string[]|null
     * @SerializedName("unauthorized")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    protected $unauthorized;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->result = isset($data['result']) ? $data['result'] : null;
        $this->msg = isset($data['msg']) ? $data['msg'] : null;
        $this->subscribed = isset($data['subscribed']) ? $data['subscribed'] : null;
        $this->alreadySubscribed = isset($data['alreadySubscribed']) ? $data['alreadySubscribed'] : null;
        $this->unauthorized = isset($data['unauthorized']) ? $data['unauthorized'] : null;
    }

    /**
     * Gets result.
     *
     * @return AnyType
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Sets result.
     *
     * @param AnyType $result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->result = $result;

        return $this;
    }

    /**
     * Gets msg.
     *
     * @return AnyType
     */
    public function getMsg()
    {
        return $this->msg;
    }

    /**
     * Sets msg.
     *
     * @param AnyType $msg
     *
     * @return $this
     */
    public function setMsg($msg)
    {
        $this->msg = $msg;

        return $this;
    }

    /**
     * Gets subscribed.
     *
     * @return string[]|null
     */
    public function getSubscribed(): ?array
    {
        return $this->subscribed;
    }

    /**
     * Sets subscribed.
     *
     * @param string[]|null $subscribed  A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.
     *
     * @return $this
     */
    public function setSubscribed(array $subscribed = null)
    {
        $this->subscribed = $subscribed;

        return $this;
    }

    /**
     * Gets alreadySubscribed.
     *
     * @return string[]|null
     */
    public function getAlreadySubscribed(): ?array
    {
        return $this->alreadySubscribed;
    }

    /**
     * Sets alreadySubscribed.
     *
     * @param string[]|null $alreadySubscribed  A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.
     *
     * @return $this
     */
    public function setAlreadySubscribed(array $alreadySubscribed = null)
    {
        $this->alreadySubscribed = $alreadySubscribed;

        return $this;
    }

    /**
     * Gets unauthorized.
     *
     * @return string[]|null
     */
    public function getUnauthorized(): ?array
    {
        return $this->unauthorized;
    }

    /**
     * Sets unauthorized.
     *
     * @param string[]|null $unauthorized  A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`.
     *
     * @return $this
     */
    public function setUnauthorized(array $unauthorized = null)
    {
        $this->unauthorized = $unauthorized;

        return $this;
    }
}


