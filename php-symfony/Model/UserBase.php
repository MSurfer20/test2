<?php
/**
 * UserBase
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the UserBase model.
 *
 * A dictionary containing basic data on a given Zulip user.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class UserBase 
{
        /**
     * The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else.
     *
     * @var string|null
     * @SerializedName("email")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $email;

    /**
     * A boolean specifying whether the user is a bot or full account.
     *
     * @var bool|null
     * @SerializedName("is_bot")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isBot;

    /**
     * URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion.
     *
     * @var string|null
     * @SerializedName("avatar_url")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $avatarUrl;

    /**
     * Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;.
     *
     * @var int|null
     * @SerializedName("avatar_version")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $avatarVersion;

    /**
     * Full name of the user or bot, used for all display purposes.
     *
     * @var string|null
     * @SerializedName("full_name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $fullName;

    /**
     * A boolean specifying whether the user is an organization administrator.
     *
     * @var bool|null
     * @SerializedName("is_admin")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isAdmin;

    /**
     * A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8).
     *
     * @var bool|null
     * @SerializedName("is_owner")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isOwner;

    /**
     * A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73).
     *
     * @var bool|null
     * @SerializedName("is_billing_admin")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isBillingAdmin;

    /**
     * [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59).
     *
     * @var int|null
     * @SerializedName("role")
     * @Assert\Choice({ 100, 200, 300, 400, 600 })
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $role;

    /**
     * An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot.
     *
     * @var int|null
     * @SerializedName("bot_type")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $botType;

    /**
     * The unique ID of the user.
     *
     * @var int|null
     * @SerializedName("user_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $userId;

    /**
     * If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner.
     *
     * @var int|null
     * @SerializedName("bot_owner_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $botOwnerId;

    /**
     * A boolean specifying whether the user account has been deactivated.
     *
     * @var bool|null
     * @SerializedName("is_active")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isActive;

    /**
     * A boolean specifying whether the user is a guest user.
     *
     * @var bool|null
     * @SerializedName("is_guest")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $isGuest;

    /**
     * The time zone of the user.
     *
     * @var string|null
     * @SerializedName("timezone")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $timezone;

    /**
     * The time the user account was created.
     *
     * @var string|null
     * @SerializedName("date_joined")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $dateJoined;

    /**
     * The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy.
     *
     * @var string|null
     * @SerializedName("delivery_email")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $deliveryEmail;

    /**
     * A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present.
     *
     * @var array[]|null
     * @SerializedName("profile_data")
     * @Assert\All({
     *   @Assert\Type("array")
     * })
     * @Type("array<string, array>")
     */
    protected $profileData;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->email = isset($data['email']) ? $data['email'] : null;
        $this->isBot = isset($data['isBot']) ? $data['isBot'] : null;
        $this->avatarUrl = isset($data['avatarUrl']) ? $data['avatarUrl'] : null;
        $this->avatarVersion = isset($data['avatarVersion']) ? $data['avatarVersion'] : null;
        $this->fullName = isset($data['fullName']) ? $data['fullName'] : null;
        $this->isAdmin = isset($data['isAdmin']) ? $data['isAdmin'] : null;
        $this->isOwner = isset($data['isOwner']) ? $data['isOwner'] : null;
        $this->isBillingAdmin = isset($data['isBillingAdmin']) ? $data['isBillingAdmin'] : null;
        $this->role = isset($data['role']) ? $data['role'] : null;
        $this->botType = isset($data['botType']) ? $data['botType'] : null;
        $this->userId = isset($data['userId']) ? $data['userId'] : null;
        $this->botOwnerId = isset($data['botOwnerId']) ? $data['botOwnerId'] : null;
        $this->isActive = isset($data['isActive']) ? $data['isActive'] : null;
        $this->isGuest = isset($data['isGuest']) ? $data['isGuest'] : null;
        $this->timezone = isset($data['timezone']) ? $data['timezone'] : null;
        $this->dateJoined = isset($data['dateJoined']) ? $data['dateJoined'] : null;
        $this->deliveryEmail = isset($data['deliveryEmail']) ? $data['deliveryEmail'] : null;
        $this->profileData = isset($data['profileData']) ? $data['profileData'] : null;
    }

    /**
     * Gets email.
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Sets email.
     *
     * @param string|null $email  The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else.
     *
     * @return $this
     */
    public function setEmail($email = null)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Gets isBot.
     *
     * @return bool|null
     */
    public function isIsBot()
    {
        return $this->isBot;
    }

    /**
     * Sets isBot.
     *
     * @param bool|null $isBot  A boolean specifying whether the user is a bot or full account.
     *
     * @return $this
     */
    public function setIsBot($isBot = null)
    {
        $this->isBot = $isBot;

        return $this;
    }

    /**
     * Gets avatarUrl.
     *
     * @return string|null
     */
    public function getAvatarUrl()
    {
        return $this->avatarUrl;
    }

    /**
     * Sets avatarUrl.
     *
     * @param string|null $avatarUrl  URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion.
     *
     * @return $this
     */
    public function setAvatarUrl($avatarUrl = null)
    {
        $this->avatarUrl = $avatarUrl;

        return $this;
    }

    /**
     * Gets avatarVersion.
     *
     * @return int|null
     */
    public function getAvatarVersion()
    {
        return $this->avatarVersion;
    }

    /**
     * Sets avatarVersion.
     *
     * @param int|null $avatarVersion  Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.
     *
     * @return $this
     */
    public function setAvatarVersion($avatarVersion = null)
    {
        $this->avatarVersion = $avatarVersion;

        return $this;
    }

    /**
     * Gets fullName.
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->fullName;
    }

    /**
     * Sets fullName.
     *
     * @param string|null $fullName  Full name of the user or bot, used for all display purposes.
     *
     * @return $this
     */
    public function setFullName($fullName = null)
    {
        $this->fullName = $fullName;

        return $this;
    }

    /**
     * Gets isAdmin.
     *
     * @return bool|null
     */
    public function isIsAdmin()
    {
        return $this->isAdmin;
    }

    /**
     * Sets isAdmin.
     *
     * @param bool|null $isAdmin  A boolean specifying whether the user is an organization administrator.
     *
     * @return $this
     */
    public function setIsAdmin($isAdmin = null)
    {
        $this->isAdmin = $isAdmin;

        return $this;
    }

    /**
     * Gets isOwner.
     *
     * @return bool|null
     */
    public function isIsOwner()
    {
        return $this->isOwner;
    }

    /**
     * Sets isOwner.
     *
     * @param bool|null $isOwner  A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8).
     *
     * @return $this
     */
    public function setIsOwner($isOwner = null)
    {
        $this->isOwner = $isOwner;

        return $this;
    }

    /**
     * Gets isBillingAdmin.
     *
     * @return bool|null
     */
    public function isIsBillingAdmin()
    {
        return $this->isBillingAdmin;
    }

    /**
     * Sets isBillingAdmin.
     *
     * @param bool|null $isBillingAdmin  A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73).
     *
     * @return $this
     */
    public function setIsBillingAdmin($isBillingAdmin = null)
    {
        $this->isBillingAdmin = $isBillingAdmin;

        return $this;
    }

    /**
     * Gets role.
     *
     * @return int|null
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Sets role.
     *
     * @param int|null $role  [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59).
     *
     * @return $this
     */
    public function setRole($role = null)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Gets botType.
     *
     * @return int|null
     */
    public function getBotType()
    {
        return $this->botType;
    }

    /**
     * Sets botType.
     *
     * @param int|null $botType  An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot.
     *
     * @return $this
     */
    public function setBotType($botType = null)
    {
        $this->botType = $botType;

        return $this;
    }

    /**
     * Gets userId.
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->userId;
    }

    /**
     * Sets userId.
     *
     * @param int|null $userId  The unique ID of the user.
     *
     * @return $this
     */
    public function setUserId($userId = null)
    {
        $this->userId = $userId;

        return $this;
    }

    /**
     * Gets botOwnerId.
     *
     * @return int|null
     */
    public function getBotOwnerId()
    {
        return $this->botOwnerId;
    }

    /**
     * Sets botOwnerId.
     *
     * @param int|null $botOwnerId  If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner.
     *
     * @return $this
     */
    public function setBotOwnerId($botOwnerId = null)
    {
        $this->botOwnerId = $botOwnerId;

        return $this;
    }

    /**
     * Gets isActive.
     *
     * @return bool|null
     */
    public function isIsActive()
    {
        return $this->isActive;
    }

    /**
     * Sets isActive.
     *
     * @param bool|null $isActive  A boolean specifying whether the user account has been deactivated.
     *
     * @return $this
     */
    public function setIsActive($isActive = null)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Gets isGuest.
     *
     * @return bool|null
     */
    public function isIsGuest()
    {
        return $this->isGuest;
    }

    /**
     * Sets isGuest.
     *
     * @param bool|null $isGuest  A boolean specifying whether the user is a guest user.
     *
     * @return $this
     */
    public function setIsGuest($isGuest = null)
    {
        $this->isGuest = $isGuest;

        return $this;
    }

    /**
     * Gets timezone.
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->timezone;
    }

    /**
     * Sets timezone.
     *
     * @param string|null $timezone  The time zone of the user.
     *
     * @return $this
     */
    public function setTimezone($timezone = null)
    {
        $this->timezone = $timezone;

        return $this;
    }

    /**
     * Gets dateJoined.
     *
     * @return string|null
     */
    public function getDateJoined()
    {
        return $this->dateJoined;
    }

    /**
     * Sets dateJoined.
     *
     * @param string|null $dateJoined  The time the user account was created.
     *
     * @return $this
     */
    public function setDateJoined($dateJoined = null)
    {
        $this->dateJoined = $dateJoined;

        return $this;
    }

    /**
     * Gets deliveryEmail.
     *
     * @return string|null
     */
    public function getDeliveryEmail()
    {
        return $this->deliveryEmail;
    }

    /**
     * Sets deliveryEmail.
     *
     * @param string|null $deliveryEmail  The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy.
     *
     * @return $this
     */
    public function setDeliveryEmail($deliveryEmail = null)
    {
        $this->deliveryEmail = $deliveryEmail;

        return $this;
    }

    /**
     * Gets profileData.
     *
     * @return array[]|null
     */
    public function getProfileData(): ?array
    {
        return $this->profileData;
    }

    /**
     * Sets profileData.
     *
     * @param array[]|null $profileData  A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present.
     *
     * @return $this
     */
    public function setProfileData(array $profileData = null)
    {
        $this->profileData = $profileData;

        return $this;
    }
}


