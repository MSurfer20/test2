<?php
/**
 * Presence
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Presence model.
 *
 * &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Presence 
{
        /**
     * The client&#39;s platform name.
     *
     * @var string|null
     * @SerializedName("client")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $client;

    /**
     * The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;.
     *
     * @var string|null
     * @SerializedName("status")
     * @Assert\Choice({ "idle", "active" })
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $status;

    /**
     * The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second.
     *
     * @var int|null
     * @SerializedName("timestamp")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $timestamp;

    /**
     * Whether the client is capable of showing mobile/push notifications to the user.
     *
     * @var bool|null
     * @SerializedName("pushable")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $pushable;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->client = isset($data['client']) ? $data['client'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->timestamp = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->pushable = isset($data['pushable']) ? $data['pushable'] : null;
    }

    /**
     * Gets client.
     *
     * @return string|null
     */
    public function getClient()
    {
        return $this->client;
    }

    /**
     * Sets client.
     *
     * @param string|null $client  The client's platform name.
     *
     * @return $this
     */
    public function setClient($client = null)
    {
        $this->client = $client;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string|null $status  The status of the user on this client. It is either `idle` or `active`.
     *
     * @return $this
     */
    public function setStatus($status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets timestamp.
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Sets timestamp.
     *
     * @param int|null $timestamp  The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.
     *
     * @return $this
     */
    public function setTimestamp($timestamp = null)
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    /**
     * Gets pushable.
     *
     * @return bool|null
     */
    public function isPushable()
    {
        return $this->pushable;
    }

    /**
     * Sets pushable.
     *
     * @param bool|null $pushable  Whether the client is capable of showing mobile/push notifications to the user.
     *
     * @return $this
     */
    public function setPushable($pushable = null)
    {
        $this->pushable = $pushable;

        return $this;
    }
}


