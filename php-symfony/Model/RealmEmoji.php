<?php
/**
 * RealmEmoji
 *
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RealmEmoji model.
 *
 * &#x60;{emoji_id}&#x60;: Object containing details about the emoji with  the specified ID. It has the following properties:
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class RealmEmoji 
{
        /**
     * The ID for this emoji, same as the object&#39;s key.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $id;

    /**
     * The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (&#x60;:name  :&#x60;).
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $name;

    /**
     * The path relative to the organization&#39;s URL where the emoji&#39;s image can be found.
     *
     * @var string|null
     * @SerializedName("source_url")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $sourceUrl;

    /**
     * Whether the emoji has been deactivated or not.
     *
     * @var bool|null
     * @SerializedName("deactivated")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected $deactivated;

    /**
     * The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and &#x60;author&#x60; object with an &#x60;id&#x60; field.
     *
     * @var int|null
     * @SerializedName("author_id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected $authorId;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->name = isset($data['name']) ? $data['name'] : null;
        $this->sourceUrl = isset($data['sourceUrl']) ? $data['sourceUrl'] : null;
        $this->deactivated = isset($data['deactivated']) ? $data['deactivated'] : null;
        $this->authorId = isset($data['authorId']) ? $data['authorId'] : null;
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param string|null $id  The ID for this emoji, same as the object's key.
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Sets name.
     *
     * @param string|null $name  The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name  :`).
     *
     * @return $this
     */
    public function setName($name = null)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Gets sourceUrl.
     *
     * @return string|null
     */
    public function getSourceUrl()
    {
        return $this->sourceUrl;
    }

    /**
     * Sets sourceUrl.
     *
     * @param string|null $sourceUrl  The path relative to the organization's URL where the emoji's image can be found.
     *
     * @return $this
     */
    public function setSourceUrl($sourceUrl = null)
    {
        $this->sourceUrl = $sourceUrl;

        return $this;
    }

    /**
     * Gets deactivated.
     *
     * @return bool|null
     */
    public function isDeactivated()
    {
        return $this->deactivated;
    }

    /**
     * Sets deactivated.
     *
     * @param bool|null $deactivated  Whether the emoji has been deactivated or not.
     *
     * @return $this
     */
    public function setDeactivated($deactivated = null)
    {
        $this->deactivated = $deactivated;

        return $this;
    }

    /**
     * Gets authorId.
     *
     * @return int|null
     */
    public function getAuthorId()
    {
        return $this->authorId;
    }

    /**
     * Sets authorId.
     *
     * @param int|null $authorId  The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and `author` object with an `id` field.
     *
     * @return $this
     */
    public function setAuthorId($authorId = null)
    {
        $this->authorId = $authorId;

        return $this;
    }
}


