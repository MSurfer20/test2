<?php
/**
 * StreamsApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\CodedError;
use OpenAPI\Server\Model\JsonError;
use OpenAPI\Server\Model\JsonSuccess;
use OpenAPI\Server\Model\JsonSuccessBase;
use OpenAPI\Server\Model\NonExistingStreamError;
use OpenAPI\Server\Model\OneOfObjectObject;
use OpenAPI\Server\Model\OneOfStringInteger;

/**
 * StreamsApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface StreamsApiInterface
{

    /**
     * Operation archiveStream
     *
     * Archive a stream
     *
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function archiveStream($streamId, &$responseCode, array &$responseHeaders);

    /**
     * Operation createBigBlueButtonVideoCall
     *
     * Create BigBlueButton video call
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function createBigBlueButtonVideoCall(&$responseCode, array &$responseHeaders);

    /**
     * Operation getStreamId
     *
     * Get stream ID
     *
     * @param  string $stream  The name of the stream to access. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getStreamId($stream, &$responseCode, array &$responseHeaders);

    /**
     * Operation getStreamTopics
     *
     * Get topics in a stream
     *
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getStreamTopics($streamId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getStreams
     *
     * Get all streams
     *
     * @param  bool $includePublic  Include all public streams. (optional, default to true)
     * @param  bool $includeWebPublic  Include all web public streams. (optional, default to false)
     * @param  bool $includeSubscribed  Include all streams that the user is subscribed to. (optional, default to true)
     * @param  bool $includeAllActive  Include all active streams. The user must have administrative privileges to use this parameter. (optional, default to false)
     * @param  bool $includeDefault  Include all default streams for the user&#39;s realm. (optional, default to false)
     * @param  bool $includeOwnerSubscribed  If the user is a bot, include all streams that the bot&#39;s owner is subscribed to. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getStreams($includePublic = true, $includeWebPublic = false, $includeSubscribed = true, $includeAllActive = false, $includeDefault = false, $includeOwnerSubscribed = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation getSubscriptionStatus
     *
     * Get subscription status
     *
     * @param  int $userId  The target user&#39;s ID. (required)
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getSubscriptionStatus($userId, $streamId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getSubscriptions
     *
     * Get subscribed streams
     *
     * @param  bool $includeSubscribers  Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getSubscriptions($includeSubscribers = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation muteTopic
     *
     * Topic muting
     *
     * @param  string $topic  The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. (required)
     * @param  string $op  Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. (required)
     * @param  string $stream  The name of the stream to access. (optional)
     * @param  int $streamId  The ID of the stream to access. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function muteTopic($topic, $op, $stream = null, $streamId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation subscribe
     *
     * Subscribe to a stream
     *
     * @param  array[] $subscriptions  A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. (required)
     * @param  OneOfStringInteger[] $principals  A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). (optional)
     * @param  bool $authorizationErrorsFatal  A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. (optional, default to true)
     * @param  bool $announce  If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation. (optional, default to false)
     * @param  bool $inviteOnly  As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. (optional, default to false)
     * @param  bool $historyPublicToSubscribers  Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. (optional)
     * @param  int $streamPostPolicy  Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. (optional, default to 1)
     * @param  OneOfStringInteger $messageRetentionDays  Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return OneOfObjectObject
     *
     */
    public function subscribe(array $subscriptions, array $principals = null, $authorizationErrorsFatal = true, $announce = false, $inviteOnly = false, $historyPublicToSubscribers = null, $streamPostPolicy = 1, $messageRetentionDays = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation unsubscribe
     *
     * Unsubscribe from a stream
     *
     * @param  string[] $subscriptions  A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. (required)
     * @param  OneOfStringInteger[] $principals  A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function unsubscribe(array $subscriptions, array $principals = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateStream
     *
     * Update a stream
     *
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  string $description  The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). (optional)
     * @param  string $newName  The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). (optional)
     * @param  bool $isPrivate  Change whether the stream is a private stream. (optional)
     * @param  bool $isAnnouncementOnly  Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. (optional)
     * @param  int $streamPostPolicy  Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. (optional, default to 1)
     * @param  bool $historyPublicToSubscribers  Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. (optional)
     * @param  OneOfStringInteger $messageRetentionDays  Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateStream($streamId, $description = null, $newName = null, $isPrivate = null, $isAnnouncementOnly = null, $streamPostPolicy = 1, $historyPublicToSubscribers = null, $messageRetentionDays = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateSubscriptionSettings
     *
     * Update subscription settings
     *
     * @param  array[] $subscriptionData  A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function updateSubscriptionSettings(array $subscriptionData, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateSubscriptions
     *
     * Update subscriptions
     *
     * @param  string[] $delete  A list of stream names to unsubscribe from. (optional)
     * @param  array[] $add  A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function updateSubscriptions(array $delete = null, array $add = null, &$responseCode, array &$responseHeaders);
}
