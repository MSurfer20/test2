<?php
/**
 * UsersApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\AnyType;
use OpenAPI\Server\Model\CodedError;
use OpenAPI\Server\Model\JsonError;
use OpenAPI\Server\Model\JsonSuccess;
use OpenAPI\Server\Model\JsonSuccessBase;
use OpenAPI\Server\Model\OneOfObjectObject;
use OpenAPI\Server\Model\OneOfObjectObjectObject;
use OpenAPI\Server\Model\OneOfObjectObjectObjectObjectObjectObject;

/**
 * UsersApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface UsersApiInterface
{

    /**
     * Operation createUser
     *
     * Create a user
     *
     * @param  string $email  The email address of the new user. (required)
     * @param  string $password  The password of the new user. (required)
     * @param  string $fullName  The full name of the new user. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function createUser($email, $password, $fullName, &$responseCode, array &$responseHeaders);

    /**
     * Operation createUserGroup
     *
     * Create a user group
     *
     * @param  string $name  The name of the user group. (required)
     * @param  string $description  The description of the user group. (required)
     * @param  int[] $members  An array containing the user IDs of the initial members for the new user group. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function createUserGroup($name, $description, array $members, &$responseCode, array &$responseHeaders);

    /**
     * Operation deactivateOwnUser
     *
     * Deactivate own user
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function deactivateOwnUser(&$responseCode, array &$responseHeaders);

    /**
     * Operation deactivateUser
     *
     * Deactivate a user
     *
     * @param  int $userId  The target user&#39;s ID. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function deactivateUser($userId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getAttachments
     *
     * Get attachments
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getAttachments(&$responseCode, array &$responseHeaders);

    /**
     * Operation getOwnUser
     *
     * Get own user
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getOwnUser(&$responseCode, array &$responseHeaders);

    /**
     * Operation getUser
     *
     * Get a user
     *
     * @param  int $userId  The target user&#39;s ID. (required)
     * @param  bool $clientGravatar  Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. (optional, default to false)
     * @param  bool $includeCustomProfileFields  Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getUser($userId, $clientGravatar = false, $includeCustomProfileFields = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation getUserByEmail
     *
     * Get a user by email
     *
     * @param  string $email  The email address of the user whose details you want to fetch. (required)
     * @param  bool $clientGravatar  Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. (optional, default to false)
     * @param  bool $includeCustomProfileFields  Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getUserByEmail($email, $clientGravatar = false, $includeCustomProfileFields = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation getUserGroups
     *
     * Get user groups
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getUserGroups(&$responseCode, array &$responseHeaders);

    /**
     * Operation getUserPresence
     *
     * Get user presence
     *
     * @param  string $userIdOrEmail  The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getUserPresence($userIdOrEmail, &$responseCode, array &$responseHeaders);

    /**
     * Operation getUsers
     *
     * Get all users
     *
     * @param  bool $clientGravatar  Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. (optional, default to false)
     * @param  bool $includeCustomProfileFields  Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getUsers($clientGravatar = false, $includeCustomProfileFields = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation muteUser
     *
     * Mute a user
     *
     * @param  int $mutedUserId  The ID of the user to mute/un-mute. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function muteUser($mutedUserId, &$responseCode, array &$responseHeaders);

    /**
     * Operation reactivateUser
     *
     * Reactivate a user
     *
     * @param  int $userId  The target user&#39;s ID. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return AnyType
     *
     */
    public function reactivateUser($userId, &$responseCode, array &$responseHeaders);

    /**
     * Operation removeUserGroup
     *
     * Delete a user group
     *
     * @param  int $userGroupId  The ID of the target user group. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function removeUserGroup($userGroupId, &$responseCode, array &$responseHeaders);

    /**
     * Operation setTypingStatus
     *
     * Set \"typing\" status
     *
     * @param  string $op  Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type. (required)
     * @param  int[] $to  For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). (required)
     * @param  string $type  Type of the message being composed. (optional, default to 'private')
     * @param  string $topic  Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function setTypingStatus($op, array $to, $type = 'private', $topic = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation unmuteUser
     *
     * Unmute a user
     *
     * @param  int $mutedUserId  The ID of the user to mute/un-mute. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function unmuteUser($mutedUserId, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateSettings
     *
     * Update settings
     *
     * @param  string $fullName  A new display name for the user. (optional)
     * @param  string $email  Asks the server to initiate a confirmation sequence to change the user&#39;s email address to the indicated value. The user will need to demonstrate control of the new email address by clicking a confirmation link sent to that address. (optional)
     * @param  string $oldPassword  The user&#39;s old Zulip password (or LDAP password, if LDAP authentication is in use).  Required only when sending the &#x60;new_password&#x60; parameter. (optional)
     * @param  string $newPassword  The user&#39;s new Zulip password (or LDAP password, if LDAP authentication is in use).  The &#x60;old_password&#x60; parameter must be included in the request. (optional)
     * @param  bool $twentyFourHourTime  Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  bool $denseMode  This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  bool $starredMessageCounts  Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  bool $fluidLayoutWidth  Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  bool $highContrastMode  This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  int $colorScheme  Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  bool $enableDraftsSynchronization  A boolean parameter to control whether synchronizing drafts is enabled for the user. When synchronization is disabled, all drafts stored in the server will be automatically deleted from the server.  This does not do anything (like sending events) to delete local copies of drafts stored in clients.  **Changes**: New in Zulip 5.0 (feature level 87). (optional)
     * @param  bool $translateEmoticons  Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  string $defaultLanguage  What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). (optional)
     * @param  string $defaultView  The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). (optional)
     * @param  bool $leftSideUserlist  Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  string $emojiset  The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). (optional)
     * @param  int $demoteInactiveStreams  Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint. (optional)
     * @param  string $timezone  The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/display&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64). (optional)
     * @param  bool $enableStreamDesktopNotifications  Enable visual desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableStreamEmailNotifications  Enable email notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableStreamPushNotifications  Enable mobile notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableStreamAudibleNotifications  Enable audible desktop notifications for stream messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  string $notificationSound  Notification sound name.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint.  Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63). (optional)
     * @param  bool $enableDesktopNotifications  Enable visual desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableSounds  Enable audible desktop notifications for private messages and @-mentions.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  int $emailNotificationsBatchingPeriodSeconds  The duration (in seconds) for which the server should wait to batch email notifications before sending them.  **Changes**: New in Zulip 5.0 (feature level 82) (optional)
     * @param  bool $enableOfflineEmailNotifications  Enable email notifications for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableOfflinePushNotifications  Enable mobile notification for private messages and @-mentions received when the user is offline.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableOnlinePushNotifications  Enable mobile notification for private messages and @-mentions received when the user is online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableDigestEmails  Enable digest emails when the user is away.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableMarketingEmails  Enable marketing emails. Has no function outside Zulip Cloud.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enableLoginEmails  Enable email notifications for new logins to account.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $messageContentInEmailNotifications  Include the message&#39;s content in email notifications for new messages.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $pmContentInDesktopNotifications  Include content of private messages in desktop notifications.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $wildcardMentionsNotify  Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  int $desktopIconCountDisplay  Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $realmNameInNotifications  Include organization name in subject of message notification emails.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $presenceEnabled  Display the presence status to other users when online.  **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by the &#x60;PATCH /settings/notifications&#x60; endpoint. (optional)
     * @param  bool $enterSends  Whether pressing Enter in the compose box sends a message (or saves a message edit).  **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by the &#x60;POST /users/me/enter-sends&#x60; endpoint, with the same parameter format. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function updateSettings($fullName = null, $email = null, $oldPassword = null, $newPassword = null, $twentyFourHourTime = null, $denseMode = null, $starredMessageCounts = null, $fluidLayoutWidth = null, $highContrastMode = null, $colorScheme = null, $enableDraftsSynchronization = null, $translateEmoticons = null, $defaultLanguage = null, $defaultView = null, $leftSideUserlist = null, $emojiset = null, $demoteInactiveStreams = null, $timezone = null, $enableStreamDesktopNotifications = null, $enableStreamEmailNotifications = null, $enableStreamPushNotifications = null, $enableStreamAudibleNotifications = null, $notificationSound = null, $enableDesktopNotifications = null, $enableSounds = null, $emailNotificationsBatchingPeriodSeconds = null, $enableOfflineEmailNotifications = null, $enableOfflinePushNotifications = null, $enableOnlinePushNotifications = null, $enableDigestEmails = null, $enableMarketingEmails = null, $enableLoginEmails = null, $messageContentInEmailNotifications = null, $pmContentInDesktopNotifications = null, $wildcardMentionsNotify = null, $desktopIconCountDisplay = null, $realmNameInNotifications = null, $presenceEnabled = null, $enterSends = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateStatus
     *
     * Update your status
     *
     * @param  string $statusText  The text content of the status message. Sending the empty string will clear the user&#39;s status.  **Note**: The limit on the size of the message is 60 characters. (optional)
     * @param  bool $away  Whether the user should be marked as \&quot;away\&quot;. (optional)
     * @param  string $emojiName  The name for the emoji to associate with this status. (optional)
     * @param  string $emojiCode  A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For example, for &#x60;unicode_emoji&#x60;, this will be an encoding of the Unicode codepoint; for &#x60;realm_emoji&#x60;, it&#39;ll be the ID of the realm emoji. (optional)
     * @param  string $reactionType  One of the following values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode   codepoint). * &#x60;realm_emoji&#x60;: [Custom emoji](/help/add-custom-emoji).   (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to   namespace the &#x60;zulip&#x60; emoji. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateStatus($statusText = null, $away = null, $emojiName = null, $emojiCode = null, $reactionType = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateUser
     *
     * Update a user
     *
     * @param  int $userId  The target user&#39;s ID. (required)
     * @param  string $fullName  The user&#39;s full name. (optional)
     * @param  int $role  New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). (optional)
     * @param  array[] $profileData  A dictionary containing the to be updated custom profile field data for the user. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateUser($userId, $fullName = null, $role = null, array $profileData = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateUserGroup
     *
     * Update a user group
     *
     * @param  int $userGroupId  The ID of the target user group. (required)
     * @param  string $name  The new name of the group. (required)
     * @param  string $description  The new description of the group. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateUserGroup($userGroupId, $name, $description, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateUserGroupMembers
     *
     * Update user group members
     *
     * @param  int $userGroupId  The ID of the target user group. (required)
     * @param  int[] $delete  The list of user ids to be removed from the user group. (optional)
     * @param  int[] $add  The list of user ids to be added to the user group. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateUserGroupMembers($userGroupId, array $delete = null, array $add = null, &$responseCode, array &$responseHeaders);
}
