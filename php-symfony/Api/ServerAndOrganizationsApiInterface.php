<?php
/**
 * ServerAndOrganizationsApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\JsonSuccess;
use OpenAPI\Server\Model\JsonSuccessBase;

/**
 * ServerAndOrganizationsApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface ServerAndOrganizationsApiInterface
{

    /**
     * Operation addCodePlayground
     *
     * Add a code playground
     *
     * @param  string $name  The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. (required)
     * @param  string $pygmentsLanguage  The name of the Pygments language lexer for that programming language. (required)
     * @param  string $urlPrefix  The url prefix for the playground. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function addCodePlayground($name, $pygmentsLanguage, $urlPrefix, &$responseCode, array &$responseHeaders);

    /**
     * Operation addLinkifier
     *
     * Add a linkifier
     *
     * @param  string $pattern  The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. (required)
     * @param  string $urlFormatString  The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function addLinkifier($pattern, $urlFormatString, &$responseCode, array &$responseHeaders);

    /**
     * Operation createCustomProfileField
     *
     * Create a custom profile field
     *
     * @param  int $fieldType  The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account (required)
     * @param  string $name  The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile. (optional)
     * @param  string $hint  The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. (optional)
     * @param  array $fieldData  Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function createCustomProfileField($fieldType, $name = null, $hint = null, array $fieldData = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation getCustomEmoji
     *
     * Get all custom emoji
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getCustomEmoji(&$responseCode, array &$responseHeaders);

    /**
     * Operation getCustomProfileFields
     *
     * Get all custom profile fields
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getCustomProfileFields(&$responseCode, array &$responseHeaders);

    /**
     * Operation getLinkifiers
     *
     * Get linkifiers
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getLinkifiers(&$responseCode, array &$responseHeaders);

    /**
     * Operation getServerSettings
     *
     * Get server settings
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getServerSettings(&$responseCode, array &$responseHeaders);

    /**
     * Operation removeCodePlayground
     *
     * Remove a code playground
     *
     * @param  int $playgroundId  The ID of the playground that you want to remove. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function removeCodePlayground($playgroundId, &$responseCode, array &$responseHeaders);

    /**
     * Operation removeLinkifier
     *
     * Remove a linkifier
     *
     * @param  int $filterId  The ID of the linkifier that you want to remove. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function removeLinkifier($filterId, &$responseCode, array &$responseHeaders);

    /**
     * Operation reorderCustomProfileFields
     *
     * Reorder custom profile fields
     *
     * @param  int[] $order  A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function reorderCustomProfileFields(array $order, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateLinkifier
     *
     * Update a linkifier
     *
     * @param  int $filterId  The ID of the linkifier that you want to update. (required)
     * @param  string $pattern  The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. (required)
     * @param  string $urlFormatString  The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateLinkifier($filterId, $pattern, $urlFormatString, &$responseCode, array &$responseHeaders);

    /**
     * Operation uploadCustomEmoji
     *
     * Upload custom emoji
     *
     * @param  string $emojiName  The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). (required)
     * @param  UploadedFile $filename   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function uploadCustomEmoji($emojiName, UploadedFile $filename = null, &$responseCode, array &$responseHeaders);
}
