<?php
/**
 * AuthenticationApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\ApiKeyResponse;

/**
 * AuthenticationApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface AuthenticationApiInterface
{

    /**
     * Operation devFetchApiKey
     *
     * Fetch an API key (development only)
     *
     * @param  string $username  The email address for the user that owns the API key. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ApiKeyResponse
     *
     */
    public function devFetchApiKey($username, &$responseCode, array &$responseHeaders);

    /**
     * Operation fetchApiKey
     *
     * Fetch an API key (production)
     *
     * @param  string $username  The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the &#x60;require_email_format_usernames&#x60; parameter documented in [GET /server_settings](/api/get-server-settings) for details. (required)
     * @param  string $password  The user&#39;s Zulip password (or LDAP password, if LDAP authentication is in use). (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return ApiKeyResponse
     *
     */
    public function fetchApiKey($username, $password, &$responseCode, array &$responseHeaders);
}
