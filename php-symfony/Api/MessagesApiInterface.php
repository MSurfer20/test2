<?php
/**
 * MessagesApiInterface
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Api;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use OpenAPI\Server\Model\AnyType;
use OpenAPI\Server\Model\CodedError;
use OpenAPI\Server\Model\InvalidMessageError;
use OpenAPI\Server\Model\JsonSuccess;
use OpenAPI\Server\Model\JsonSuccessBase;
use OpenAPI\Server\Model\OneOfObjectObject;
use OpenAPI\Server\Model\OneOfStringInteger;

/**
 * MessagesApiInterface Interface Doc Comment
 *
 * @category Interface
 * @package  OpenAPI\Server\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
interface MessagesApiInterface
{

    /**
     * Operation addReaction
     *
     * Add an emoji reaction
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  string $emojiName  The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. (required)
     * @param  string $emojiCode  A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. (optional)
     * @param  string $reactionType  If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function addReaction($messageId, $emojiName, $emojiCode = null, $reactionType = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation checkMessagesMatchNarrow
     *
     * Check if messages match a narrow
     *
     * @param  int[] $msgIds  List of IDs for the messages to check. (required)
     * @param  array[] $narrow  A structure defining the narrow to check against. See how to [construct a narrow](/api/construct-narrow). (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return AnyType
     *
     */
    public function checkMessagesMatchNarrow(array $msgIds, array $narrow, &$responseCode, array &$responseHeaders);

    /**
     * Operation deleteMessage
     *
     * Delete a message
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function deleteMessage($messageId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getFileTemporaryUrl
     *
     * Get public temporary URL
     *
     * @param  int $realmIdStr  The realm id. (required)
     * @param  string $filename  Path to the URL. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getFileTemporaryUrl($realmIdStr, $filename, &$responseCode, array &$responseHeaders);

    /**
     * Operation getMessageHistory
     *
     * Get a message's edit history
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getMessageHistory($messageId, &$responseCode, array &$responseHeaders);

    /**
     * Operation getMessages
     *
     * Get messages
     *
     * @param  int $numBefore  The number of messages with IDs less than the anchor to retrieve. (required)
     * @param  int $numAfter  The number of messages with IDs greater than the anchor to retrieve. (required)
     * @param  OneOfStringInteger $anchor  Integer message ID to anchor fetching of new messages. Supports special string values for when the client wants the server to compute the anchor to use:  * &#x60;newest&#x60;: The most recent message. * &#x60;oldest&#x60;: The oldest message. * &#x60;first_unread&#x60;: The oldest unread message matching the   query, if any; otherwise, the most recent message.  The special values of &#x60;&#39;newest&#39;&#x60; and &#x60;&#39;oldest&#39;&#x60; are also supported for anchoring the query at the most recent or oldest messages.  **Changes**: String values are new in Zulip 3.0 (feature level 1).  The   &#x60;first_unread&#x60; functionality was supported in Zulip 2.1.x   and older by not sending anchor and using use_first_unread_anchor.    In Zulip 2.1.x and older, &#x60;oldest&#x60; can be emulated with   &#x60;anchor&#x3D;0&#x60;, and &#x60;newest&#x60; with &#x60;anchor&#x3D;10000000000000000&#x60;   (that specific large value works around a bug in Zulip   2.1.x and older in the &#x60;found_newest&#x60; return value). (optional)
     * @param  array[] $narrow  The narrow where you want to fetch the messages from. See how to [construct a narrow](/api/construct-narrow). (optional)
     * @param  bool $clientGravatar  Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars. (optional, default to false)
     * @param  bool $applyMarkdown  If &#x60;true&#x60;, message content is returned in the rendered HTML format. If &#x60;false&#x60;, message content is returned in the raw Markdown-format text that user entered. (optional, default to true)
     * @param  bool $useFirstUnreadAnchor  Legacy way to specify &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; in Zulip 2.1.x and older.  Whether to use the (computed by the server) first unread message matching the narrow as the &#x60;anchor&#x60;.  Mutually exclusive with &#x60;anchor&#x60;.  **Changes**: Deprecated in Zulip 3.0, replaced by &#x60;anchor&#x3D;\&quot;first_unread\&quot;&#x60; instead. (optional, default to false)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getMessages($numBefore, $numAfter, $anchor = null, array $narrow = null, $clientGravatar = false, $applyMarkdown = true, $useFirstUnreadAnchor = false, &$responseCode, array &$responseHeaders);

    /**
     * Operation getRawMessage
     *
     * Get a message's raw Markdown
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function getRawMessage($messageId, &$responseCode, array &$responseHeaders);

    /**
     * Operation markAllAsRead
     *
     * Mark all messages as read
     *
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function markAllAsRead(&$responseCode, array &$responseHeaders);

    /**
     * Operation markStreamAsRead
     *
     * Mark messages in a stream as read
     *
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function markStreamAsRead($streamId, &$responseCode, array &$responseHeaders);

    /**
     * Operation markTopicAsRead
     *
     * Mark messages in a topic as read
     *
     * @param  int $streamId  The ID of the stream to access. (required)
     * @param  string $topicName  The name of the topic whose messages should be marked as read. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function markTopicAsRead($streamId, $topicName, &$responseCode, array &$responseHeaders);

    /**
     * Operation removeReaction
     *
     * Remove an emoji reaction
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  string $emojiName  The target emoji&#39;s human-readable name.  To find an emoji&#39;s name, hover over a message to reveal three icons on the right, then click the smiley face icon. Images of available reaction emojis appear. Hover over the emoji you want, and note that emoji&#39;s text name. (optional)
     * @param  string $emojiCode  A unique identifier, defining the specific emoji codepoint requested, within the namespace of the &#x60;reaction_type&#x60;.  For most API clients, you won&#39;t need this, but it&#39;s important for Zulip apps to handle rare corner cases when adding/removing votes on an emoji reaction added previously by another user.  If the existing reaction was added when the Zulip server was using a previous version of the emoji data mapping between Unicode codepoints and human-readable names, sending the &#x60;emoji_code&#x60; in the data for the original reaction allows the Zulip server to correctly interpret your upvote as an upvote rather than a reaction with a \&quot;diffenent\&quot; emoji. (optional)
     * @param  string $reactionType  If an app is adding/removing a vote on an existing reaction, it should pass this parameter using the value the server provided for the existing reaction for specificity.  Supported values:  * &#x60;unicode_emoji&#x60;: Unicode emoji (&#x60;emoji_code&#x60; will be its Unicode codepoint). * &#x60;realm_emoji&#x60;: Custom emoji. (&#x60;emoji_code&#x60; will be its ID). * &#x60;zulip_extra_emoji&#x60;: Special emoji included with Zulip.  Exists to    namespace the &#x60;zulip&#x60; emoji.  **Changes**: In Zulip 3.0 (feature level 2), this become optional for [custom emoji](/help/add-custom-emoji); previously, this endpoint assumed &#x60;unicode_emoji&#x60; if this parameter was not specified. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function removeReaction($messageId, $emojiName = null, $emojiCode = null, $reactionType = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation renderMessage
     *
     * Render message
     *
     * @param  string $content  The content of the message. Maximum message size of 10000 bytes. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function renderMessage($content, &$responseCode, array &$responseHeaders);

    /**
     * Operation sendMessage
     *
     * Send a message
     *
     * @param  string $type  The type of message to be sent. &#x60;private&#x60; for a private message and &#x60;stream&#x60; for a stream message. (required)
     * @param  int[] $to  For stream messages, either the name or integer ID of the stream. For private messages, either a list containing integer user IDs or a list containing string email addresses.  **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0. (required)
     * @param  string $content  The content of the message. Maximum message size of 10000 bytes. (required)
     * @param  string $topic  The topic of the message. Only required for stream messages (&#x60;type&#x3D;\&quot;stream\&quot;&#x60;), ignored otherwise.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. (optional)
     * @param  string $queueId  For clients supporting [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo), the [event queue](/api/register-queue) ID for the client.  If passed, &#x60;local_id&#x60; is required.  If the message is successfully sent, the server will include &#x60;local_id&#x60; in the &#x60;message&#x60; event that the client with this &#x60;queue_id&#x60; will receive notifying it of the new message via [&#x60;GET /events&#x60;](/api/get-events).  This lets the client know unambiguously that it should replace the locally echoed message, rather than adding this new message (which would be correct if the user had sent the new message from another device). (optional)
     * @param  string $localId  For clients supporting local echo, a unique string-format identifier chosen freely by the client; the server will pass it back to the client without inspecting it, as described in the &#x60;queue_id&#x60; description. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function sendMessage($type, array $to, $content, $topic = null, $queueId = null, $localId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateMessage
     *
     * Edit a message
     *
     * @param  int $messageId  The target message&#39;s ID. (required)
     * @param  string $topic  The topic to move the message(s) to, to request changing the topic. Should only be sent when changing the topic, and will throw an error if the target message is not a stream message.  Maximum length of 60 characters.  **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded this as &#x60;subject&#x60;, which is currently a deprecated alias. (optional)
     * @param  string $propagateMode  Which message(s) should be edited: just the one indicated in &#x60;message_id&#x60;, messages in the same topic that had been sent after this one, or all of them.  Only the default value of &#x60;change_one&#x60; is valid when editing only the content of a message.  This parameter determines both which messages get moved and also whether clients that are currently narrowed to the topic containing the message should navigate or adjust their compose box recipient to point to the post-edit stream/topic. (optional, default to 'change_one')
     * @param  bool $sendNotificationToOldThread  Whether to send breadcrumb message to the old thread to notify users where the messages were moved to.  **Changes**: New in Zulip 3.0 (feature level 9). (optional, default to true)
     * @param  bool $sendNotificationToNewThread  Whether to send a notification message to the new thread to notify users where the messages came from.  **Changes**: New in Zulip 3.0 (feature level 9). (optional, default to true)
     * @param  string $content  The content of the message. Maximum message size of 10000 bytes. (optional)
     * @param  int $streamId  The stream ID to move the message(s) to, to request moving messages to another stream.  Should only be sent when changing the stream, and will throw an error if the target message is not a stream message. (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccess
     *
     */
    public function updateMessage($messageId, $topic = null, $propagateMode = 'change_one', $sendNotificationToOldThread = true, $sendNotificationToNewThread = true, $content = null, $streamId = null, &$responseCode, array &$responseHeaders);

    /**
     * Operation updateMessageFlags
     *
     * Update personal message flags
     *
     * @param  int[] $messages  An array containing the IDs of the target messages. (required)
     * @param  string $op  Whether to &#x60;add&#x60; the flag or &#x60;remove&#x60; it. (required)
     * @param  string $flag  The flag that should be added/removed. (required)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function updateMessageFlags(array $messages, $op, $flag, &$responseCode, array &$responseHeaders);

    /**
     * Operation uploadFile
     *
     * Upload a file
     *
     * @param  UploadedFile $filename   (optional)
     * @param  integer $responseCode     The HTTP response code to return
     * @param  array   $responseHeaders  Additional HTTP headers to return with the response ()
     *
     * @return JsonSuccessBase
     *
     */
    public function uploadFile(UploadedFile $filename = null, &$responseCode, array &$responseHeaders);
}
