<?php
/**
 * MessagesApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * MessagesApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class MessagesApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for addReaction
     *
     * Add an emoji reaction.
     *
     */
    public function testAddReaction()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}/reactions';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for checkMessagesMatchNarrow
     *
     * Check if messages match a narrow.
     *
     */
    public function testCheckMessagesMatchNarrow()
    {
        $client = static::createClient();

        $path = '/messages/matches_narrow';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for deleteMessage
     *
     * Delete a message.
     *
     */
    public function testDeleteMessage()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for getFileTemporaryUrl
     *
     * Get public temporary URL.
     *
     */
    public function testGetFileTemporaryUrl()
    {
        $client = static::createClient();

        $path = '/user_uploads/{realm_id_str}/{filename}';
        $pattern = '{realmIdStr}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{filename}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getMessageHistory
     *
     * Get a message's edit history.
     *
     */
    public function testGetMessageHistory()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}/history';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getMessages
     *
     * Get messages.
     *
     */
    public function testGetMessages()
    {
        $client = static::createClient();

        $path = '/messages';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getRawMessage
     *
     * Get a message's raw Markdown.
     *
     */
    public function testGetRawMessage()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for markAllAsRead
     *
     * Mark all messages as read.
     *
     */
    public function testMarkAllAsRead()
    {
        $client = static::createClient();

        $path = '/mark_all_as_read';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for markStreamAsRead
     *
     * Mark messages in a stream as read.
     *
     */
    public function testMarkStreamAsRead()
    {
        $client = static::createClient();

        $path = '/mark_stream_as_read';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for markTopicAsRead
     *
     * Mark messages in a topic as read.
     *
     */
    public function testMarkTopicAsRead()
    {
        $client = static::createClient();

        $path = '/mark_topic_as_read';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for removeReaction
     *
     * Remove an emoji reaction.
     *
     */
    public function testRemoveReaction()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}/reactions';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for renderMessage
     *
     * Render message.
     *
     */
    public function testRenderMessage()
    {
        $client = static::createClient();

        $path = '/messages/render';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for sendMessage
     *
     * Send a message.
     *
     */
    public function testSendMessage()
    {
        $client = static::createClient();

        $path = '/messages';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for updateMessage
     *
     * Edit a message.
     *
     */
    public function testUpdateMessage()
    {
        $client = static::createClient();

        $path = '/messages/{message_id}';
        $pattern = '{messageId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path);
    }

    /**
     * Test case for updateMessageFlags
     *
     * Update personal message flags.
     *
     */
    public function testUpdateMessageFlags()
    {
        $client = static::createClient();

        $path = '/messages/flags';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for uploadFile
     *
     * Upload a file.
     *
     */
    public function testUploadFile()
    {
        $client = static::createClient();

        $path = '/user_uploads';

        $crawler = $client->request('POST', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
