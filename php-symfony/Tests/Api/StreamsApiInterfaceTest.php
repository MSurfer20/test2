<?php
/**
 * StreamsApiInterfaceTest
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use OpenAPI\Server\Configuration;
use OpenAPI\Server\ApiClient;
use OpenAPI\Server\ApiException;
use OpenAPI\Server\ObjectSerializer;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * StreamsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */
class StreamsApiInterfaceTest extends WebTestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for archiveStream
     *
     * Archive a stream.
     *
     */
    public function testArchiveStream()
    {
        $client = static::createClient();

        $path = '/streams/{stream_id}';
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for createBigBlueButtonVideoCall
     *
     * Create BigBlueButton video call.
     *
     */
    public function testCreateBigBlueButtonVideoCall()
    {
        $client = static::createClient();

        $path = '/calls/bigbluebutton/create';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for deleteTopic
     *
     * Delete a topic.
     *
     */
    public function testDeleteTopic()
    {
        $client = static::createClient();

        $path = '/streams/{stream_id}/delete_topic';
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for getStreamId
     *
     * Get stream ID.
     *
     */
    public function testGetStreamId()
    {
        $client = static::createClient();

        $path = '/get_stream_id';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getStreamTopics
     *
     * Get topics in a stream.
     *
     */
    public function testGetStreamTopics()
    {
        $client = static::createClient();

        $path = '/users/me/{stream_id}/topics';
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getStreams
     *
     * Get all streams.
     *
     */
    public function testGetStreams()
    {
        $client = static::createClient();

        $path = '/streams';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSubscribers
     *
     * Get the subscribers of a stream.
     *
     */
    public function testGetSubscribers()
    {
        $client = static::createClient();

        $path = '/streams/{stream_id}/members';
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSubscriptionStatus
     *
     * Get subscription status.
     *
     */
    public function testGetSubscriptionStatus()
    {
        $client = static::createClient();

        $path = '/users/{user_id}/subscriptions/{stream_id}';
        $pattern = '{userId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for getSubscriptions
     *
     * Get subscribed streams.
     *
     */
    public function testGetSubscriptions()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions';

        $crawler = $client->request('GET', $path);
    }

    /**
     * Test case for muteTopic
     *
     * Topic muting.
     *
     */
    public function testMuteTopic()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions/muted_topics';

        $crawler = $client->request('PATCH', $path);
    }

    /**
     * Test case for subscribe
     *
     * Subscribe to a stream.
     *
     */
    public function testSubscribe()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for unsubscribe
     *
     * Unsubscribe from a stream.
     *
     */
    public function testUnsubscribe()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions';

        $crawler = $client->request('DELETE', $path);
    }

    /**
     * Test case for updateStream
     *
     * Update a stream.
     *
     */
    public function testUpdateStream()
    {
        $client = static::createClient();

        $path = '/streams/{stream_id}';
        $pattern = '{streamId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PATCH', $path);
    }

    /**
     * Test case for updateSubscriptionSettings
     *
     * Update subscription settings.
     *
     */
    public function testUpdateSubscriptionSettings()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions/properties';

        $crawler = $client->request('POST', $path);
    }

    /**
     * Test case for updateSubscriptions
     *
     * Update subscriptions.
     *
     */
    public function testUpdateSubscriptions()
    {
        $client = static::createClient();

        $path = '/users/me/subscriptions';

        $crawler = $client->request('PATCH', $path);
    }

    protected function genTestData($regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast); 
    }
}
