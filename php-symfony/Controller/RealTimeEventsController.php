<?php

/**
 * RealTimeEventsController
 * PHP version 7.1.3
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Zulip REST API
 *
 * Powerful open source group chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\RealTimeEventsApiInterface;
use OpenAPI\Server\Model\BadEventQueueIdError;
use OpenAPI\Server\Model\JsonSuccess;
use OpenAPI\Server\Model\JsonSuccessBase;
use OpenAPI\Server\Model\OneOfInvalidApiKeyErrorMissingArgumentErrorUserNotAuthorizedError;
use OpenAPI\Server\Model\OneOfRateLimitedError;
use OpenAPI\Server\Model\OneOfUserDeactivatedErrorRealmDeactivatedError;

/**
 * RealTimeEventsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class RealTimeEventsController extends Controller
{

    /**
     * Operation deleteQueue
     *
     * Delete an event queue
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deleteQueueAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $queueId = $request->query->get('queueId');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $queueId = $this->deserialize($queueId, 'string', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($queueId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->deleteQueue($queueId, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Success.';
                    break;
                case 400:
                    $message = 'Bad request.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getEvents
     *
     * Get events from an event queue
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getEventsAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $queueId = $request->query->get('queueId');
        $lastEventId = $request->query->get('lastEventId');
        $dontBlock = $request->query->get('dontBlock');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $queueId = $this->deserialize($queueId, 'string', 'string');
            $lastEventId = $this->deserialize($lastEventId, 'int', 'string');
            $dontBlock = $this->deserialize($dontBlock, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($queueId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($lastEventId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($dontBlock, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->getEvents($queueId, $lastEventId, $dontBlock, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Success.';
                    break;
                case 400:
                    $message = 'Bad request.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation realTimePost
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function realTimePostAction(Request $request)
    {
        // Handle authentication

        // Read out all input parameter values into variables
        $eventTypes = $request->query->get('eventTypes');
        $narrow = $request->query->get('narrow');
        $allPublicStreams = $request->query->get('allPublicStreams');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $eventTypes = $this->deserialize($eventTypes, 'array<multi,string>', 'string');
            $narrow = $this->deserialize($narrow, 'array<multi,string>', 'string');
            $allPublicStreams = $this->deserialize($allPublicStreams, 'bool', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($eventTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($narrow, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($allPublicStreams, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->realTimePost($eventTypes, $narrow, $allPublicStreams, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Success';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation registerQueue
     *
     * Register an event queue
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function registerQueueAction(Request $request)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication

        // Read out all input parameter values into variables
        $applyMarkdown = $request->query->get('applyMarkdown');
        $clientGravatar = $request->query->get('clientGravatar');
        $slimPresence = $request->query->get('slimPresence');
        $eventTypes = $request->query->get('eventTypes');
        $allPublicStreams = $request->query->get('allPublicStreams');
        $includeSubscribers = $request->query->get('includeSubscribers');
        $clientCapabilities = $request->query->get('clientCapabilities');
        $fetchEventTypes = $request->query->get('fetchEventTypes');
        $narrow = $request->query->get('narrow');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $applyMarkdown = $this->deserialize($applyMarkdown, 'bool', 'string');
            $clientGravatar = $this->deserialize($clientGravatar, 'bool', 'string');
            $slimPresence = $this->deserialize($slimPresence, 'bool', 'string');
            $eventTypes = $this->deserialize($eventTypes, 'array<multi,string>', 'string');
            $allPublicStreams = $this->deserialize($allPublicStreams, 'bool', 'string');
            $includeSubscribers = $this->deserialize($includeSubscribers, 'bool', 'string');
            $clientCapabilities = $this->deserialize($clientCapabilities, 'array', 'string');
            $fetchEventTypes = $this->deserialize($fetchEventTypes, 'array<multi,string>', 'string');
            $narrow = $this->deserialize($narrow, 'array<multi,string>', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($applyMarkdown, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($clientGravatar, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($slimPresence, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($eventTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($allPublicStreams, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($includeSubscribers, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("array");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($clientCapabilities, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($fetchEventTypes, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($narrow, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];
            $result = $handler->registerQueue($applyMarkdown, $clientGravatar, $slimPresence, $eventTypes, $allPublicStreams, $includeSubscribers, $clientCapabilities, $fetchEventTypes, $narrow, $responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 200:
                    $message = 'Success.';
                    break;
            }

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation restErrorHandling
     *
     * Error handling
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function restErrorHandlingAction(Request $request)
    {
        // Handle authentication

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Validate the input values


        try {
            $handler = $this->getApiHandler();

            
            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];
            $result = $handler->restErrorHandling($responseCode, $responseHeaders);

            // Find default response message
            $message = '';

            // Find a more specific message, if available
            switch ($responseCode) {
                case 400:
                    $message = 'Bad request.';
                    break;
                case 401:
                    $message = 'Unauthorized.';
                    break;
                case 429:
                    $message = 'Rate limit exceeded.';
                    break;
            }

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return RealTimeEventsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('realTimeEvents');
    }
}
