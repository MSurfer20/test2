/*
  Zulip REST API
 
  Powerful open source group chat 
 
  The version of the OpenAPI document: 1.0.0
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/coded_error.proto";
import public "models/json_error.proto";
import public "models/json_success.proto";
import public "models/json_success_base.proto";
import public "models/non_existing_stream_error.proto";
import public "models/one_ofobjectobject.proto";
import public "models/one_ofstringinteger.proto";
import public "models/todo_object_mapping.proto";

service StreamsService {
  rpc ArchiveStream (ArchiveStreamRequest) returns (JsonSuccess);

  rpc CreateBigBlueButtonVideoCall (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc DeleteTopic (DeleteTopicRequest) returns (JsonSuccess);

  rpc GetStreamId (GetStreamIdRequest) returns (JsonSuccessBase);

  rpc GetStreamTopics (GetStreamTopicsRequest) returns (JsonSuccessBase);

  rpc GetStreams (GetStreamsRequest) returns (JsonSuccessBase);

  rpc GetSubscribers (GetSubscribersRequest) returns (JsonSuccessBase);

  rpc GetSubscriptionStatus (GetSubscriptionStatusRequest) returns (JsonSuccessBase);

  rpc GetSubscriptions (GetSubscriptionsRequest) returns (JsonSuccessBase);

  rpc MuteTopic (MuteTopicRequest) returns (JsonSuccess);

  rpc Subscribe (SubscribeRequest) returns (OneOfobjectobject);

  rpc Unsubscribe (UnsubscribeRequest) returns (JsonSuccessBase);

  rpc UpdateStream (UpdateStreamRequest) returns (JsonSuccess);

  rpc UpdateSubscriptionSettings (UpdateSubscriptionSettingsRequest) returns (JsonSuccessBase);

  rpc UpdateSubscriptions (UpdateSubscriptionsRequest) returns (JsonSuccessBase);

}

message ArchiveStreamRequest {
  // The ID of the stream to access. 
  int32 streamId = 1;

}

message DeleteTopicRequest {
  // The ID of the stream to access. 
  int32 streamId = 1;
  // The name of the topic to delete. 
  string topicName = 2;

}

message GetStreamIdRequest {
  // The name of the stream to access. 
  string stream = 1;

}

message GetStreamTopicsRequest {
  // The ID of the stream to access. 
  int32 streamId = 1;

}

message GetStreamsRequest {
  // Include all public streams. 
  bool includePublic = 1;
  // Include all web public streams. 
  bool includeWebPublic = 2;
  // Include all streams that the user is subscribed to. 
  bool includeSubscribed = 3;
  // Include all active streams. The user must have administrative privileges to use this parameter. 
  bool includeAllActive = 4;
  // Include all default streams for the user's realm. 
  bool includeDefault = 5;
  // If the user is a bot, include all streams that the bot's owner is subscribed to. 
  bool includeOwnerSubscribed = 6;

}

message GetSubscribersRequest {
  // The ID of the stream to access. 
  int32 streamId = 1;

}

message GetSubscriptionStatusRequest {
  // The target user's ID. 
  int32 userId = 1;
  // The ID of the stream to access. 
  int32 streamId = 2;

}

message GetSubscriptionsRequest {
  // Whether each returned stream object should include a `subscribers` field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
  bool includeSubscribers = 1;

}

message MuteTopicRequest {
  // The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
  string topic = 1;
  // Whether to mute (`add`) or unmute (`remove`) the provided topic. 
  string op = 2;
  // The name of the stream to access. 
  string stream = 3;
  // The ID of the stream to access. 
  int32 streamId = 4;

}

message SubscribeRequest {
  // A list of dictionaries containing the key `name` and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key `description` with an appropriate value. 
  repeated TODO_OBJECT_MAPPING subscriptions = 1;
  // A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
  repeated OneOfstringinteger principals = 2;
  // A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When `True`, an authorization error is reported as such. When set to `False`, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the `unauthorized` key. 
  bool authorizationErrorsFatal = 3;
  // If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream's creation. 
  bool announce = 4;
  // As described above, this endpoint will create a new stream if passed a stream name that doesn't already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
  bool inviteOnly = 5;
  // Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
  bool historyPublicToSubscribers = 6;
  // Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
  int32 streamPostPolicy = 7;
  // Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
  OneOfstringinteger messageRetentionDays = 8;

}

message UnsubscribeRequest {
  // A list of stream names to unsubscribe from. This parameter is called `streams` in our Python API. 
  repeated string subscriptions = 1;
  // A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the `subscriptions` parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
  repeated OneOfstringinteger principals = 2;

}

message UpdateStreamRequest {
  // The ID of the stream to access. 
  int32 streamId = 1;
  // The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
  string description = 2;
  // The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
  string newName = 3;
  // Change whether the stream is a private stream. 
  bool isPrivate = 4;
  // Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   `stream_post_policy` instead. 
  bool isAnnouncementOnly = 5;
  // Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
  int32 streamPostPolicy = 6;
  // Whether the stream's message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
  bool historyPublicToSubscribers = 7;
  // Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \"realm_default\" => Return to the organization-level setting. * \"forever\" => Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
  OneOfstringinteger messageRetentionDays = 8;

}

message UpdateSubscriptionSettingsRequest {
  // A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a `stream_id` key that identifies the stream, as well as the `property` being modified and its new `value`.  The possible values for each `property` and `value` pairs are:  * `color` (string): the hex value of the user's display color for the stream. * `is_muted` (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named `in_home_view` (with the   opposite value, `in_home_view=!is_muted`); for   backwards-compatibility, modern Zulip still accepts that value. * `pin_to_top` (boolean): whether to pin the stream at the top of the stream list. * `desktop_notifications` (boolean): whether to show desktop notifications     for all messages sent to the stream. * `audible_notifications` (boolean): whether to play a sound   notification for all messages sent to the stream. * `push_notifications` (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * `email_notifications` (boolean): whether to trigger an email     notification for all messages sent to the stream. 
  repeated TODO_OBJECT_MAPPING subscriptionData = 1;

}

message UpdateSubscriptionsRequest {
  // A list of stream names to unsubscribe from. 
  repeated string delete = 1;
  // A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
  repeated TODO_OBJECT_MAPPING add = 2;

}

