/*
  Zulip REST API
 
  Powerful open source group chat 
 
  The version of the OpenAPI document: 1.0.0
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/json_success.proto";
import public "models/json_success_base.proto";
import public "models/todo_object_mapping.proto";

service ServerAndOrganizationsService {
  rpc AddCodePlayground (AddCodePlaygroundRequest) returns (JsonSuccessBase);

  rpc AddLinkifier (AddLinkifierRequest) returns (JsonSuccessBase);

  rpc CreateCustomProfileField (CreateCustomProfileFieldRequest) returns (JsonSuccessBase);

  rpc GetCustomEmoji (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetCustomProfileFields (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetLinkifiers (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetServerSettings (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc RemoveCodePlayground (RemoveCodePlaygroundRequest) returns (JsonSuccess);

  rpc RemoveLinkifier (RemoveLinkifierRequest) returns (JsonSuccess);

  rpc ReorderCustomProfileFields (ReorderCustomProfileFieldsRequest) returns (JsonSuccess);

  rpc UpdateLinkifier (UpdateLinkifierRequest) returns (JsonSuccess);

  rpc UploadCustomEmoji (UploadCustomEmojiRequest) returns (JsonSuccess);

}

message AddCodePlaygroundRequest {
  // The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
  string name = 1;
  // The name of the Pygments language lexer for that programming language. 
  string pygmentsLanguage = 2;
  // The url prefix for the playground. 
  string urlPrefix = 3;

}

message AddLinkifierRequest {
  // The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  string pattern = 1;
  // The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  string urlFormatString = 2;

}

message CreateCustomProfileFieldRequest {
  // The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
  int32 fieldType = 1;
  // The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user's profile. 
  string name = 2;
  // The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
  string hint = 3;
  // Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
  TODO_OBJECT_MAPPING fieldData = 4;

}

message RemoveCodePlaygroundRequest {
  // The ID of the playground that you want to remove. 
  int32 playgroundId = 1;

}

message RemoveLinkifierRequest {
  // The ID of the linkifier that you want to remove. 
  int32 filterId = 1;

}

message ReorderCustomProfileFieldsRequest {
  // A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
  repeated int32 order = 1;

}

message UpdateLinkifierRequest {
  // The ID of the linkifier that you want to update. 
  int32 filterId = 1;
  // The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
  string pattern = 2;
  // The URL used for the link. If you used named groups for the `pattern`, you can insert their content here with `%(name_of_the_capturing_group)s`. 
  string urlFormatString = 3;

}

message UploadCustomEmojiRequest {
  // The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
  string emojiName = 1;
  string filename = 2;

}

