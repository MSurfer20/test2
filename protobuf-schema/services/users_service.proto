/*
  Zulip REST API
 
  Powerful open source group chat 
 
  The version of the OpenAPI document: 1.0.0
  
  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package ;

import "google/protobuf/empty.proto";
import public "models/any_type.proto";
import public "models/coded_error.proto";
import public "models/json_error.proto";
import public "models/json_success.proto";
import public "models/json_success_base.proto";
import public "models/one_ofobjectobject.proto";
import public "models/one_ofobjectobjectobject.proto";
import public "models/todo_object_mapping.proto";

service UsersService {
  rpc CreateUser (CreateUserRequest) returns (JsonSuccessBase);

  rpc CreateUserGroup (CreateUserGroupRequest) returns (JsonSuccess);

  rpc DeactivateOwnUser (google.protobuf.Empty) returns (JsonSuccess);

  rpc DeactivateUser (DeactivateUserRequest) returns (JsonSuccess);

  rpc GetAttachments (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetOwnUser (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetUser (GetUserRequest) returns (JsonSuccessBase);

  rpc GetUserByEmail (GetUserByEmailRequest) returns (JsonSuccessBase);

  rpc GetUserGroups (google.protobuf.Empty) returns (JsonSuccessBase);

  rpc GetUserPresence (GetUserPresenceRequest) returns (JsonSuccessBase);

  rpc GetUsers (GetUsersRequest) returns (JsonSuccessBase);

  rpc MuteUser (MuteUserRequest) returns (JsonSuccess);

  rpc ReactivateUser (ReactivateUserRequest) returns (AnyType);

  rpc RemoveUserGroup (RemoveUserGroupRequest) returns (JsonSuccess);

  rpc SetTypingStatus (SetTypingStatusRequest) returns (JsonSuccess);

  rpc UnmuteUser (UnmuteUserRequest) returns (JsonSuccess);

  rpc UpdateDisplaySettings (UpdateDisplaySettingsRequest) returns (JsonSuccessBase);

  rpc UpdateNotificationSettings (UpdateNotificationSettingsRequest) returns (JsonSuccessBase);

  rpc UpdateUser (UpdateUserRequest) returns (JsonSuccess);

  rpc UpdateUserGroup (UpdateUserGroupRequest) returns (JsonSuccess);

  rpc UpdateUserGroupMembers (UpdateUserGroupMembersRequest) returns (JsonSuccess);

}

message CreateUserRequest {
  // The email address of the new user. 
  string email = 1;
  // The password of the new user. 
  string password = 2;
  // The full name of the new user. 
  string fullName = 3;

}

message CreateUserGroupRequest {
  // The name of the user group. 
  string name = 1;
  // The description of the user group. 
  string description = 2;
  // An array containing the user IDs of the initial members for the new user group. 
  repeated int32 members = 3;

}

message DeactivateUserRequest {
  // The target user's ID. 
  int32 userId = 1;

}

message GetUserRequest {
  // The target user's ID. 
  int32 userId = 1;
  // Whether the client supports computing gravatars URLs.  If enabled, `avatar_url` will be included in the response only if there is a Zulip avatar, and will be `null` for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The `client_gravatar` field is set to `true` if clients can compute their own gravatars. 
  bool clientGravatar = 2;
  // Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
  bool includeCustomProfileFields = 3;

}

message GetUserByEmailRequest {
  // The email address of the user whose details you want to fetch. 
  string email = 1;
  // Whether the client supports computing gravatars URLs.  If enabled, `avatar_url` will be included in the response only if there is a Zulip avatar, and will be `null` for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The `client_gravatar` field is set to `true` if clients can compute their own gravatars. 
  bool clientGravatar = 2;
  // Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
  bool includeCustomProfileFields = 3;

}

message GetUserPresenceRequest {
  // The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email. 
  string userIdOrEmail = 1;

}

message GetUsersRequest {
  // Whether the client supports computing gravatars URLs.  If enabled, `avatar_url` will be included in the response only if there is a Zulip avatar, and will be `null` for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The `client_gravatar` field is set to `true` if clients can compute their own gravatars. 
  bool clientGravatar = 1;
  // Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API. 
  bool includeCustomProfileFields = 2;

}

message MuteUserRequest {
  // The ID of the user to mute/un-mute. 
  int32 mutedUserId = 1;

}

message ReactivateUserRequest {
  // The target user's ID. 
  int32 userId = 1;

}

message RemoveUserGroupRequest {
  // The ID of the target user group. 
  int32 userGroupId = 1;

}

message SetTypingStatusRequest {
  // Whether the user has started (`start`) or stopped (`stop`) to type. 
  string op = 1;
  // For 'private' type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For 'stream' type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11). 
  repeated int32 to = 2;
  // Type of the message being composed. 
  string type = 3;
  // Topic to which message is being typed. Required for the 'stream' type. Ignored in case of 'private' type. 
  string topic = 4;

}

message UnmuteUserRequest {
  // The ID of the user to mute/un-mute. 
  int32 mutedUserId = 1;

}

message UpdateDisplaySettingsRequest {
  // Whether time should be [displayed in 24-hour notation](/help/change-the-time-format). 
  bool twentyFourHourTime = 1;
  // This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip. 
  bool denseMode = 2;
  // Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages). 
  bool starredMessageCounts = 3;
  // Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app's center panel (message feed, recent topics) on wide screens. 
  bool fluidLayoutWidth = 4;
  // This setting is reserved for use to control variations in Zulip's design to help visually impaired users. 
  bool highContrastMode = 5;
  // Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard `prefers-color-scheme` media query. 
  int32 colorScheme = 6;
  // Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends. 
  bool translateEmoticons = 7;
  // What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, `\"en\"` for English or `\"de\"` for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
  string defaultLanguage = 8;
  // The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.  * \"recent_topics\" - Recent topics view * \"all_messages\" - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
  string defaultView = 9;
  // Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked. 
  bool leftSideUserlist = 10;
  // The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \"google\" - Google modern * \"google-blob\" - Google classic * \"twitter\" - Twitter * \"text\" - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
  string emojiset = 11;
  // Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never 
  int32 demoteInactiveStreams = 12;
  // The user's [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64). 
  string timezone = 13;

}

message UpdateNotificationSettingsRequest {
  // Enable visual desktop notifications for stream messages. 
  bool enableStreamDesktopNotifications = 1;
  // Enable email notifications for stream messages. 
  bool enableStreamEmailNotifications = 2;
  // Enable mobile notifications for stream messages. 
  bool enableStreamPushNotifications = 3;
  // Enable audible desktop notifications for stream messages. 
  bool enableStreamAudibleNotifications = 4;
  // Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63). 
  string notificationSound = 5;
  // Enable visual desktop notifications for private messages and @-mentions. 
  bool enableDesktopNotifications = 6;
  // Enable audible desktop notifications for private messages and @-mentions. 
  bool enableSounds = 7;
  // Enable email notifications for private messages and @-mentions received when the user is offline. 
  bool enableOfflineEmailNotifications = 8;
  // Enable mobile notification for private messages and @-mentions received when the user is offline. 
  bool enableOfflinePushNotifications = 9;
  // Enable mobile notification for private messages and @-mentions received when the user is online. 
  bool enableOnlinePushNotifications = 10;
  // Enable digest emails when the user is away. 
  bool enableDigestEmails = 11;
  // Enable marketing emails. Has no function outside Zulip Cloud. 
  bool enableMarketingEmails = 12;
  // Enable email notifications for new logins to account. 
  bool enableLoginEmails = 13;
  // Include the message's content in email notifications for new messages. 
  bool messageContentInEmailNotifications = 14;
  // Include content of private messages in desktop notifications. 
  bool pmContentInDesktopNotifications = 15;
  // Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention. 
  bool wildcardMentionsNotify = 16;
  // Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None 
  int32 desktopIconCountDisplay = 17;
  // Include organization name in subject of message notification emails. 
  bool realmNameInNotifications = 18;
  // Display the presence status to other users when online. 
  bool presenceEnabled = 19;

}

message UpdateUserRequest {
  // The target user's ID. 
  int32 userId = 1;
  // The user's full name. 
  string fullName = 2;
  // New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of `is_admin` and `is_guest` boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60). 
  int32 role = 3;
  // A dictionary containing the to be updated custom profile field data for the user. 
  repeated TODO_OBJECT_MAPPING profileData = 4;

}

message UpdateUserGroupRequest {
  // The ID of the target user group. 
  int32 userGroupId = 1;
  // The new name of the group. 
  string name = 2;
  // The new description of the group. 
  string description = 3;

}

message UpdateUserGroupMembersRequest {
  // The ID of the target user group. 
  int32 userGroupId = 1;
  // The list of user ids to be removed from the user group. 
  repeated int32 delete = 2;
  // The list of user ids to be added to the user group. 
  repeated int32 add = 3;

}

