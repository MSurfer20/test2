/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object containing details of the newly added domain. 
 * @param domain The new allowed domain. 
 * @param allowSubdomains Whether subdomains are allowed for this domain. 
 */
object RealmDomains : BaseTable<RealmDomain>("RealmDomain") {
    val domain = text("domain") /* null */ /* The new allowed domain.  */
    val allowSubdomains = boolean("allow_subdomains") /* null */ /* Whether subdomains are allowed for this domain.  */

    /**
     * Create an entity of type RealmDomain from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RealmDomain(
        domain = row[domain]  /* kotlin.String? */ /* The new allowed domain.  */,
        allowSubdomains = row[allowSubdomains]  /* kotlin.Boolean? */ /* Whether subdomains are allowed for this domain.  */
    )

    /**
    * Assign all the columns from the entity of type RealmDomain to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RealmDomain()
    * database.update(RealmDomains, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RealmDomain) {
        this.apply {
            set(RealmDomains.domain, entity.domain)
            set(RealmDomains.allowSubdomains, entity.allowSubdomains)
        }
    }

}


