/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object containing details of the message. 
 * @param avatarUrl The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
 * @param client A Zulip \"client\" string, describing what Zulip client sent the message. 
 * @param content The content/body of the message. 
 * @param contentType The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
 * @param displayRecipient Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
 * @param id The unique message ID.  Messages should always be displayed sorted by ID. 
 * @param isMeMessage Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
 * @param reactions Data on any reactions to the message. 
 * @param recipientId A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
 * @param senderEmail The Zulip display email address of the message's sender. 
 * @param senderFullName The full name of the message's sender. 
 * @param senderId The user ID of the message's sender. 
 * @param senderRealmStr A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
 * @param streamId Only present for stream messages; the ID of the stream. 
 * @param subject The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
 * @param topicLinks Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
 * @param submessages Data used for certain experimental Zulip integrations. 
 * @param timestamp The UNIX timestamp for when the message was sent, in UTC seconds. 
 * @param type The type of the message: `stream` or `private`. 
 */
object MessagesBases : BaseTable<MessagesBase>("MessagesBase") {
    val avatarUrl = text("avatar_url") /* null */ /* The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user.  */
    val client = text("client") /* null */ /* A Zulip \"client\" string, describing what Zulip client sent the message.  */
    val content = text("content") /* null */ /* The content/body of the message.  */
    val contentType = text("content_type") /* null */ /* The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  */
    val displayRecipient = long("display_recipient") /* null */ /* Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */
    val id = int("id") /* null */ /* The unique message ID.  Messages should always be displayed sorted by ID.  */
    val isMeMessage = boolean("is_me_message") /* null */ /* Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */
    val recipientId = int("recipient_id") /* null */ /* A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */
    val senderEmail = text("sender_email") /* null */ /* The Zulip display email address of the message's sender.  */
    val senderFullName = text("sender_full_name") /* null */ /* The full name of the message's sender.  */
    val senderId = int("sender_id") /* null */ /* The user ID of the message's sender.  */
    val senderRealmStr = text("sender_realm_str") /* null */ /* A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.  */
    val streamId = int("stream_id") /* null */ /* Only present for stream messages; the ID of the stream.  */
    val subject = text("subject") /* null */ /* The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  */
    val timestamp = int("timestamp") /* null */ /* The UNIX timestamp for when the message was sent, in UTC seconds.  */
    val type = text("type") /* null */ /* The type of the message: `stream` or `private`.  */

    /**
     * Create an entity of type MessagesBase from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = MessagesBase(
        avatarUrl = row[avatarUrl]  /* kotlin.String? */ /* The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user.  */,
        client = row[client]  /* kotlin.String? */ /* A Zulip \"client\" string, describing what Zulip client sent the message.  */,
        content = row[content]  /* kotlin.String? */ /* The content/body of the message.  */,
        contentType = row[contentType]  /* kotlin.String? */ /* The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  */,
        displayRecipient = OneOfLessThanStringCommaArrayGreaterThans.createEntity(row, withReferences) /* OneOfLessThanStringCommaArrayGreaterThan? */ /* Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */,
        id = row[id]  /* kotlin.Int? */ /* The unique message ID.  Messages should always be displayed sorted by ID.  */,
        isMeMessage = row[isMeMessage]  /* kotlin.Boolean? */ /* Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */,
        reactions = emptyList() /* kotlin.Array<EmojiReaction>? */ /* Data on any reactions to the message.  */,
        recipientId = row[recipientId]  /* kotlin.Int? */ /* A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */,
        senderEmail = row[senderEmail]  /* kotlin.String? */ /* The Zulip display email address of the message's sender.  */,
        senderFullName = row[senderFullName]  /* kotlin.String? */ /* The full name of the message's sender.  */,
        senderId = row[senderId]  /* kotlin.Int? */ /* The user ID of the message's sender.  */,
        senderRealmStr = row[senderRealmStr]  /* kotlin.String? */ /* A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.  */,
        streamId = row[streamId]  /* kotlin.Int? */ /* Only present for stream messages; the ID of the stream.  */,
        subject = row[subject]  /* kotlin.String? */ /* The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  */,
        topicLinks = emptyList() /* kotlin.Array<MessagesBaseTopicLinks>? */ /* Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.  */,
        submessages = emptyList() /* kotlin.Array<kotlin.String>? */ /* Data used for certain experimental Zulip integrations.  */,
        timestamp = row[timestamp]  /* kotlin.Int? */ /* The UNIX timestamp for when the message was sent, in UTC seconds.  */,
        type = row[type]  /* kotlin.String? */ /* The type of the message: `stream` or `private`.  */
    )

    /**
    * Assign all the columns from the entity of type MessagesBase to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = MessagesBase()
    * database.update(MessagesBases, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: MessagesBase) {
        this.apply {
            set(MessagesBases.avatarUrl, entity.avatarUrl)
            set(MessagesBases.client, entity.client)
            set(MessagesBases.content, entity.content)
            set(MessagesBases.contentType, entity.contentType)
            set(MessagesBases.displayRecipient, entity.displayRecipient)
            set(MessagesBases.id, entity.id)
            set(MessagesBases.isMeMessage, entity.isMeMessage)
            set(MessagesBases.recipientId, entity.recipientId)
            set(MessagesBases.senderEmail, entity.senderEmail)
            set(MessagesBases.senderFullName, entity.senderFullName)
            set(MessagesBases.senderId, entity.senderId)
            set(MessagesBases.senderRealmStr, entity.senderRealmStr)
            set(MessagesBases.streamId, entity.streamId)
            set(MessagesBases.subject, entity.subject)
            set(MessagesBases.timestamp, entity.timestamp)
            set(MessagesBases.type, entity.type)
        }
    }

}


object MessagesBaseEmojiReaction : BaseTable<Pair<kotlin.Long, kotlin.Long>>("MessagesBaseEmojiReaction") {
    val messagesBase = long("messagesBase")
    val emojiReaction = long("emojiReaction")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[messagesBase] ?: 0, row[emojiReaction] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(MessagesBaseEmojiReaction.messagesBase, entity.first)
            set(MessagesBaseEmojiReaction.emojiReaction, entity.second)
        }
    }

}

object MessagesBaseMessagesBaseTopicLinks : BaseTable<Pair<kotlin.Long, kotlin.Long>>("MessagesBaseMessagesBaseTopicLinks") {
    val messagesBase = long("messagesBase")
    val messagesBaseTopicLinks = long("messagesBaseTopicLinks")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[messagesBase] ?: 0, row[messagesBaseTopicLinks] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(MessagesBaseMessagesBaseTopicLinks.messagesBase, entity.first)
            set(MessagesBaseMessagesBaseTopicLinks.messagesBaseTopicLinks, entity.second)
        }
    }

}

object MessagesBaseSubmessages : BaseTable<Pair<kotlin.Long, kotlin.String>>("MessagesBaseSubmessages") {
    val messagesBase = long("messagesBase")
    val submessages = text("submessages")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[messagesBase] ?: 0, row[submessages] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(MessagesBaseSubmessages.messagesBase, entity.first)
            set(MessagesBaseSubmessages.submessages, entity.second)
        }
    }

}

