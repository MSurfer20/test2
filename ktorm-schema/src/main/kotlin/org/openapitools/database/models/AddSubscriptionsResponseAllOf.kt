/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param result 
 * @param msg 
 * @param subscribed A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
 * @param alreadySubscribed A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
 * @param unauthorized A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`. 
 */
object AddSubscriptionsResponseAllOfs : BaseTable<AddSubscriptionsResponseAllOf>("AddSubscriptionsResponse_allOf") {
    val result = blob("result") /* null */
    val msg = blob("msg") /* null */
    val subscribed = blob("subscribed") /* null */ /* A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.  */
    val alreadySubscribed = blob("already_subscribed") /* null */ /* A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.  */

    /**
     * Create an entity of type AddSubscriptionsResponseAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = AddSubscriptionsResponseAllOf(
        result = row[result]  /* kotlin.Any? */,
        msg = row[msg]  /* kotlin.Any? */,
        subscribed = row[subscribed]  /* kotlin.collections.Map<kotlin.String, kotlin.Array<kotlin.String>>? */ /* A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query.  */,
        alreadySubscribed = row[alreadySubscribed]  /* kotlin.collections.Map<kotlin.String, kotlin.Array<kotlin.String>>? */ /* A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to.  */,
        unauthorized = emptyList() /* kotlin.Array<kotlin.String>? */ /* A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if `authorization_errors_fatal=false`.  */
    )

    /**
    * Assign all the columns from the entity of type AddSubscriptionsResponseAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = AddSubscriptionsResponseAllOf()
    * database.update(AddSubscriptionsResponseAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: AddSubscriptionsResponseAllOf) {
        this.apply {
            set(AddSubscriptionsResponseAllOfs.result, entity.result)
            set(AddSubscriptionsResponseAllOfs.msg, entity.msg)
            set(AddSubscriptionsResponseAllOfs.subscribed, entity.subscribed)
            set(AddSubscriptionsResponseAllOfs.alreadySubscribed, entity.alreadySubscribed)
        }
    }

}


object AddSubscriptionsResponseAllOfUnauthorized : BaseTable<Pair<kotlin.Long, kotlin.String>>("AddSubscriptionsResponseAllOfUnauthorized") {
    val addSubscriptionsResponseAllOf = long("addSubscriptionsResponseAllOf")
    val unauthorized = text("unauthorized")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[addSubscriptionsResponseAllOf] ?: 0, row[unauthorized] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(AddSubscriptionsResponseAllOfUnauthorized.addSubscriptionsResponseAllOf, entity.first)
            set(AddSubscriptionsResponseAllOfUnauthorized.unauthorized, entity.second)
        }
    }

}

