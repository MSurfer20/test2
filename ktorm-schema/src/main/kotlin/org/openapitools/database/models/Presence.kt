/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * `{client_name}`: Object containing the details of the user's presence on a particular platform with the client's platform name being the object key. 
 * @param client The client's platform name. 
 * @param status The status of the user on this client. It is either `idle` or `active`. 
 * @param timestamp The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second. 
 * @param pushable Whether the client is capable of showing mobile/push notifications to the user. 
 */
object Presences : BaseTable<Presence>("Presence") {
    val client = text("client") /* null */ /* The client's platform name.  */
    val status = text("status").transform({ Presence.Status.valueOf(it ?: "idle") }, { it.value }) /* null */ /* The status of the user on this client. It is either `idle` or `active`.  */

    val timestamp = int("timestamp") /* null */ /* The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.  */
    val pushable = boolean("pushable") /* null */ /* Whether the client is capable of showing mobile/push notifications to the user.  */

    /**
     * Create an entity of type Presence from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Presence(
        client = row[client]  /* kotlin.String? */ /* The client's platform name.  */,
        status = row[status]  /* kotlin.String? */ /* The status of the user on this client. It is either `idle` or `active`.  */,
        timestamp = row[timestamp]  /* kotlin.Int? */ /* The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second.  */,
        pushable = row[pushable]  /* kotlin.Boolean? */ /* Whether the client is capable of showing mobile/push notifications to the user.  */
    )

    /**
    * Assign all the columns from the entity of type Presence to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Presence()
    * database.update(Presences, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Presence) {
        this.apply {
            set(Presences.client, entity.client)
            set(Presences.status, entity.status)
            set(Presences.timestamp, entity.timestamp)
            set(Presences.pushable, entity.pushable)
        }
    }

}


