/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param result 
 * @param msg 
 * @param code 
 */
object CodedErrorAllOfs : BaseTable<CodedErrorAllOf>("CodedError_allOf") {
    val result = blob("result") /* null */
    val msg = blob("msg") /* null */
    val code = blob("code") /* null */

    /**
     * Create an entity of type CodedErrorAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CodedErrorAllOf(
        result = row[result]  /* kotlin.Any? */,
        msg = row[msg]  /* kotlin.Any? */,
        code = row[code]  /* kotlin.Any? */
    )

    /**
    * Assign all the columns from the entity of type CodedErrorAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CodedErrorAllOf()
    * database.update(CodedErrorAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CodedErrorAllOf) {
        this.apply {
            set(CodedErrorAllOfs.result, entity.result)
            set(CodedErrorAllOfs.msg, entity.msg)
            set(CodedErrorAllOfs.code, entity.code)
        }
    }

}


