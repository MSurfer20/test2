/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param avatarUrl 
 * @param client 
 * @param content 
 * @param contentType 
 * @param displayRecipient 
 * @param id 
 * @param isMeMessage 
 * @param reactions 
 * @param recipientId 
 * @param senderEmail 
 * @param senderFullName 
 * @param senderId 
 * @param senderRealmStr 
 * @param streamId 
 * @param subject 
 * @param topicLinks 
 * @param submessages 
 * @param timestamp 
 * @param type 
 */
object Messagess : BaseTable<Messages>("Messages") {
    val avatarUrl = blob("avatar_url") /* null */
    val client = blob("client") /* null */
    val content = blob("content") /* null */
    val contentType = blob("content_type") /* null */
    val displayRecipient = blob("display_recipient") /* null */
    val id = blob("id") /* null */
    val isMeMessage = blob("is_me_message") /* null */
    val reactions = blob("reactions") /* null */
    val recipientId = blob("recipient_id") /* null */
    val senderEmail = blob("sender_email") /* null */
    val senderFullName = blob("sender_full_name") /* null */
    val senderId = blob("sender_id") /* null */
    val senderRealmStr = blob("sender_realm_str") /* null */
    val streamId = blob("stream_id") /* null */
    val subject = blob("subject") /* null */
    val topicLinks = blob("topic_links") /* null */
    val submessages = blob("submessages") /* null */
    val timestamp = blob("timestamp") /* null */
    val type = blob("type") /* null */

    /**
     * Create an entity of type Messages from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Messages(
        avatarUrl = row[avatarUrl]  /* kotlin.Any? */,
        client = row[client]  /* kotlin.Any? */,
        content = row[content]  /* kotlin.Any? */,
        contentType = row[contentType]  /* kotlin.Any? */,
        displayRecipient = row[displayRecipient]  /* kotlin.Any? */,
        id = row[id]  /* kotlin.Any? */,
        isMeMessage = row[isMeMessage]  /* kotlin.Any? */,
        reactions = row[reactions]  /* kotlin.Any? */,
        recipientId = row[recipientId]  /* kotlin.Any? */,
        senderEmail = row[senderEmail]  /* kotlin.Any? */,
        senderFullName = row[senderFullName]  /* kotlin.Any? */,
        senderId = row[senderId]  /* kotlin.Any? */,
        senderRealmStr = row[senderRealmStr]  /* kotlin.Any? */,
        streamId = row[streamId]  /* kotlin.Any? */,
        subject = row[subject]  /* kotlin.Any? */,
        topicLinks = row[topicLinks]  /* kotlin.Any? */,
        submessages = row[submessages]  /* kotlin.Any? */,
        timestamp = row[timestamp]  /* kotlin.Any? */,
        type = row[type]  /* kotlin.Any? */
    )

    /**
    * Assign all the columns from the entity of type Messages to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Messages()
    * database.update(Messagess, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Messages) {
        this.apply {
            set(Messagess.avatarUrl, entity.avatarUrl)
            set(Messagess.client, entity.client)
            set(Messagess.content, entity.content)
            set(Messagess.contentType, entity.contentType)
            set(Messagess.displayRecipient, entity.displayRecipient)
            set(Messagess.id, entity.id)
            set(Messagess.isMeMessage, entity.isMeMessage)
            set(Messagess.reactions, entity.reactions)
            set(Messagess.recipientId, entity.recipientId)
            set(Messagess.senderEmail, entity.senderEmail)
            set(Messagess.senderFullName, entity.senderFullName)
            set(Messagess.senderId, entity.senderId)
            set(Messagess.senderRealmStr, entity.senderRealmStr)
            set(Messagess.streamId, entity.streamId)
            set(Messagess.subject, entity.subject)
            set(Messagess.topicLinks, entity.topicLinks)
            set(Messagess.submessages, entity.submessages)
            set(Messagess.timestamp, entity.timestamp)
            set(Messagess.type, entity.type)
        }
    }

}


