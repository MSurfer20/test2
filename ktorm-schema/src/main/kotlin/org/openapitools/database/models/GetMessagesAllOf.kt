/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param avatarUrl 
 * @param client 
 * @param content 
 * @param contentType 
 * @param displayRecipient 
 * @param id 
 * @param isMeMessage 
 * @param reactions 
 * @param recipientId 
 * @param senderEmail 
 * @param senderFullName 
 * @param senderId 
 * @param senderRealmStr 
 * @param streamId 
 * @param subject 
 * @param topicLinks 
 * @param submessages 
 * @param timestamp 
 * @param type 
 * @param flags The user's [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags 
 * @param lastEditTimestamp The UNIX timestamp for when the message was last edited, in UTC seconds. 
 * @param matchContent Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords. 
 * @param matchSubject Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords. 
 */
object GetMessagesAllOfs : BaseTable<GetMessagesAllOf>("GetMessages_allOf") {
    val avatarUrl = blob("avatar_url") /* null */
    val client = blob("client") /* null */
    val content = blob("content") /* null */
    val contentType = blob("content_type") /* null */
    val displayRecipient = blob("display_recipient") /* null */
    val id = blob("id") /* null */
    val isMeMessage = blob("is_me_message") /* null */
    val reactions = blob("reactions") /* null */
    val recipientId = blob("recipient_id") /* null */
    val senderEmail = blob("sender_email") /* null */
    val senderFullName = blob("sender_full_name") /* null */
    val senderId = blob("sender_id") /* null */
    val senderRealmStr = blob("sender_realm_str") /* null */
    val streamId = blob("stream_id") /* null */
    val subject = blob("subject") /* null */
    val topicLinks = blob("topic_links") /* null */
    val submessages = blob("submessages") /* null */
    val timestamp = blob("timestamp") /* null */
    val type = blob("type") /* null */
    val lastEditTimestamp = int("last_edit_timestamp") /* null */ /* The UNIX timestamp for when the message was last edited, in UTC seconds.  */
    val matchContent = text("match_content") /* null */ /* Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.  */
    val matchSubject = text("match_subject") /* null */ /* Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.  */

    /**
     * Create an entity of type GetMessagesAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GetMessagesAllOf(
        avatarUrl = row[avatarUrl]  /* kotlin.Any? */,
        client = row[client]  /* kotlin.Any? */,
        content = row[content]  /* kotlin.Any? */,
        contentType = row[contentType]  /* kotlin.Any? */,
        displayRecipient = row[displayRecipient]  /* kotlin.Any? */,
        id = row[id]  /* kotlin.Any? */,
        isMeMessage = row[isMeMessage]  /* kotlin.Any? */,
        reactions = row[reactions]  /* kotlin.Any? */,
        recipientId = row[recipientId]  /* kotlin.Any? */,
        senderEmail = row[senderEmail]  /* kotlin.Any? */,
        senderFullName = row[senderFullName]  /* kotlin.Any? */,
        senderId = row[senderId]  /* kotlin.Any? */,
        senderRealmStr = row[senderRealmStr]  /* kotlin.Any? */,
        streamId = row[streamId]  /* kotlin.Any? */,
        subject = row[subject]  /* kotlin.Any? */,
        topicLinks = row[topicLinks]  /* kotlin.Any? */,
        submessages = row[submessages]  /* kotlin.Any? */,
        timestamp = row[timestamp]  /* kotlin.Any? */,
        type = row[type]  /* kotlin.Any? */,
        flags = emptyList() /* kotlin.Array<kotlin.String>? */ /* The user's [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags  */,
        lastEditTimestamp = row[lastEditTimestamp]  /* kotlin.Int? */ /* The UNIX timestamp for when the message was last edited, in UTC seconds.  */,
        matchContent = row[matchContent]  /* kotlin.String? */ /* Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.  */,
        matchSubject = row[matchSubject]  /* kotlin.String? */ /* Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with `<span class=\"highlight\">` elements wrapping the matches for the search keywords.  */
    )

    /**
    * Assign all the columns from the entity of type GetMessagesAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GetMessagesAllOf()
    * database.update(GetMessagesAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GetMessagesAllOf) {
        this.apply {
            set(GetMessagesAllOfs.avatarUrl, entity.avatarUrl)
            set(GetMessagesAllOfs.client, entity.client)
            set(GetMessagesAllOfs.content, entity.content)
            set(GetMessagesAllOfs.contentType, entity.contentType)
            set(GetMessagesAllOfs.displayRecipient, entity.displayRecipient)
            set(GetMessagesAllOfs.id, entity.id)
            set(GetMessagesAllOfs.isMeMessage, entity.isMeMessage)
            set(GetMessagesAllOfs.reactions, entity.reactions)
            set(GetMessagesAllOfs.recipientId, entity.recipientId)
            set(GetMessagesAllOfs.senderEmail, entity.senderEmail)
            set(GetMessagesAllOfs.senderFullName, entity.senderFullName)
            set(GetMessagesAllOfs.senderId, entity.senderId)
            set(GetMessagesAllOfs.senderRealmStr, entity.senderRealmStr)
            set(GetMessagesAllOfs.streamId, entity.streamId)
            set(GetMessagesAllOfs.subject, entity.subject)
            set(GetMessagesAllOfs.topicLinks, entity.topicLinks)
            set(GetMessagesAllOfs.submessages, entity.submessages)
            set(GetMessagesAllOfs.timestamp, entity.timestamp)
            set(GetMessagesAllOfs.type, entity.type)
            set(GetMessagesAllOfs.lastEditTimestamp, entity.lastEditTimestamp)
            set(GetMessagesAllOfs.matchContent, entity.matchContent)
            set(GetMessagesAllOfs.matchSubject, entity.matchSubject)
        }
    }

}


object GetMessagesAllOfFlags : BaseTable<Pair<kotlin.Long, kotlin.String>>("GetMessagesAllOfFlags") {
    val getMessagesAllOf = long("getMessagesAllOf")
    val flags = text("flags")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[getMessagesAllOf] ?: 0, row[flags] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(GetMessagesAllOfFlags.getMessagesAllOf, entity.first)
            set(GetMessagesAllOfFlags.flags, entity.second)
        }
    }

}

