/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param email 
 * @param isBot 
 * @param avatarUrl 
 * @param avatarVersion 
 * @param fullName 
 * @param isAdmin 
 * @param isOwner 
 * @param isBillingAdmin 
 * @param role 
 * @param botType 
 * @param userId 
 * @param botOwnerId 
 * @param isActive 
 * @param isGuest 
 * @param timezone 
 * @param dateJoined 
 * @param deliveryEmail 
 * @param profileData 
 */
object UserAllOfs : BaseTable<UserAllOf>("User_allOf") {
    val email = blob("email") /* null */
    val isBot = blob("is_bot") /* null */
    val avatarUrl = blob("avatar_url") /* null */
    val avatarVersion = blob("avatar_version") /* null */
    val fullName = blob("full_name") /* null */
    val isAdmin = blob("is_admin") /* null */
    val isOwner = blob("is_owner") /* null */
    val isBillingAdmin = blob("is_billing_admin") /* null */
    val role = blob("role") /* null */
    val botType = blob("bot_type") /* null */
    val userId = blob("user_id") /* null */
    val botOwnerId = blob("bot_owner_id") /* null */
    val isActive = blob("is_active") /* null */
    val isGuest = blob("is_guest") /* null */
    val timezone = blob("timezone") /* null */
    val dateJoined = blob("date_joined") /* null */
    val deliveryEmail = blob("delivery_email") /* null */
    val profileData = blob("profile_data") /* null */

    /**
     * Create an entity of type UserAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UserAllOf(
        email = row[email]  /* kotlin.Any? */,
        isBot = row[isBot]  /* kotlin.Any? */,
        avatarUrl = row[avatarUrl]  /* kotlin.Any? */,
        avatarVersion = row[avatarVersion]  /* kotlin.Any? */,
        fullName = row[fullName]  /* kotlin.Any? */,
        isAdmin = row[isAdmin]  /* kotlin.Any? */,
        isOwner = row[isOwner]  /* kotlin.Any? */,
        isBillingAdmin = row[isBillingAdmin]  /* kotlin.Any? */,
        role = row[role]  /* kotlin.Any? */,
        botType = row[botType]  /* kotlin.Any? */,
        userId = row[userId]  /* kotlin.Any? */,
        botOwnerId = row[botOwnerId]  /* kotlin.Any? */,
        isActive = row[isActive]  /* kotlin.Any? */,
        isGuest = row[isGuest]  /* kotlin.Any? */,
        timezone = row[timezone]  /* kotlin.Any? */,
        dateJoined = row[dateJoined]  /* kotlin.Any? */,
        deliveryEmail = row[deliveryEmail]  /* kotlin.Any? */,
        profileData = row[profileData]  /* kotlin.Any? */
    )

    /**
    * Assign all the columns from the entity of type UserAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UserAllOf()
    * database.update(UserAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UserAllOf) {
        this.apply {
            set(UserAllOfs.email, entity.email)
            set(UserAllOfs.isBot, entity.isBot)
            set(UserAllOfs.avatarUrl, entity.avatarUrl)
            set(UserAllOfs.avatarVersion, entity.avatarVersion)
            set(UserAllOfs.fullName, entity.fullName)
            set(UserAllOfs.isAdmin, entity.isAdmin)
            set(UserAllOfs.isOwner, entity.isOwner)
            set(UserAllOfs.isBillingAdmin, entity.isBillingAdmin)
            set(UserAllOfs.role, entity.role)
            set(UserAllOfs.botType, entity.botType)
            set(UserAllOfs.userId, entity.userId)
            set(UserAllOfs.botOwnerId, entity.botOwnerId)
            set(UserAllOfs.isActive, entity.isActive)
            set(UserAllOfs.isGuest, entity.isGuest)
            set(UserAllOfs.timezone, entity.timezone)
            set(UserAllOfs.dateJoined, entity.dateJoined)
            set(UserAllOfs.deliveryEmail, entity.deliveryEmail)
            set(UserAllOfs.profileData, entity.profileData)
        }
    }

}


