/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param streamId 
 * @param name 
 * @param description 
 * @param dateCreated 
 * @param inviteOnly 
 * @param renderedDescription 
 * @param isWebPublic 
 * @param streamPostPolicy 
 * @param messageRetentionDays 
 * @param historyPublicToSubscribers 
 * @param firstMessageId 
 * @param isAnnouncementOnly 
 */
object BasicStreams : BaseTable<BasicStream>("BasicStream") {
    val streamId = blob("stream_id") /* null */
    val name = blob("name") /* null */
    val description = blob("description") /* null */
    val dateCreated = blob("date_created") /* null */
    val inviteOnly = blob("invite_only") /* null */
    val renderedDescription = blob("rendered_description") /* null */
    val isWebPublic = blob("is_web_public") /* null */
    val streamPostPolicy = blob("stream_post_policy") /* null */
    val messageRetentionDays = blob("message_retention_days") /* null */
    val historyPublicToSubscribers = blob("history_public_to_subscribers") /* null */
    val firstMessageId = blob("first_message_id") /* null */
    val isAnnouncementOnly = blob("is_announcement_only") /* null */

    /**
     * Create an entity of type BasicStream from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BasicStream(
        streamId = row[streamId]  /* kotlin.Any? */,
        name = row[name]  /* kotlin.Any? */,
        description = row[description]  /* kotlin.Any? */,
        dateCreated = row[dateCreated]  /* kotlin.Any? */,
        inviteOnly = row[inviteOnly]  /* kotlin.Any? */,
        renderedDescription = row[renderedDescription]  /* kotlin.Any? */,
        isWebPublic = row[isWebPublic]  /* kotlin.Any? */,
        streamPostPolicy = row[streamPostPolicy]  /* kotlin.Any? */,
        messageRetentionDays = row[messageRetentionDays]  /* kotlin.Any? */,
        historyPublicToSubscribers = row[historyPublicToSubscribers]  /* kotlin.Any? */,
        firstMessageId = row[firstMessageId]  /* kotlin.Any? */,
        isAnnouncementOnly = row[isAnnouncementOnly]  /* kotlin.Any? */
    )

    /**
    * Assign all the columns from the entity of type BasicStream to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BasicStream()
    * database.update(BasicStreams, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BasicStream) {
        this.apply {
            set(BasicStreams.streamId, entity.streamId)
            set(BasicStreams.name, entity.name)
            set(BasicStreams.description, entity.description)
            set(BasicStreams.dateCreated, entity.dateCreated)
            set(BasicStreams.inviteOnly, entity.inviteOnly)
            set(BasicStreams.renderedDescription, entity.renderedDescription)
            set(BasicStreams.isWebPublic, entity.isWebPublic)
            set(BasicStreams.streamPostPolicy, entity.streamPostPolicy)
            set(BasicStreams.messageRetentionDays, entity.messageRetentionDays)
            set(BasicStreams.historyPublicToSubscribers, entity.historyPublicToSubscribers)
            set(BasicStreams.firstMessageId, entity.firstMessageId)
            set(BasicStreams.isAnnouncementOnly, entity.isAnnouncementOnly)
        }
    }

}


