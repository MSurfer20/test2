/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Object containing the user group's attributes. 
 * @param name The name of the user group. 
 * @param description The description of the user group. 
 * @param members Array containing the id of the users who are members of this user group. 
 * @param id The ID of the user group. 
 */
object UserGroups : BaseTable<UserGroup>("UserGroup") {
    val name = text("name") /* null */ /* The name of the user group.  */
    val description = text("description") /* null */ /* The description of the user group.  */
    val id = int("id") /* null */ /* The ID of the user group.  */

    /**
     * Create an entity of type UserGroup from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UserGroup(
        name = row[name]  /* kotlin.String? */ /* The name of the user group.  */,
        description = row[description]  /* kotlin.String? */ /* The description of the user group.  */,
        members = emptyList() /* kotlin.Array<kotlin.Int>? */ /* Array containing the id of the users who are members of this user group.  */,
        id = row[id]  /* kotlin.Int? */ /* The ID of the user group.  */
    )

    /**
    * Assign all the columns from the entity of type UserGroup to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UserGroup()
    * database.update(UserGroups, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UserGroup) {
        this.apply {
            set(UserGroups.name, entity.name)
            set(UserGroups.description, entity.description)
            set(UserGroups.id, entity.id)
        }
    }

}


object UserGroupMembers : BaseTable<Pair<kotlin.Long, kotlin.Int>>("UserGroupMembers") {
    val userGroup = long("userGroup")
    val members = int("members")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Int> =
        Pair(row[userGroup] ?: 0, row[members] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Int>) {
        this.apply {
            set(UserGroupMembers.userGroup, entity.first)
            set(UserGroupMembers.members, entity.second)
        }
    }

}

