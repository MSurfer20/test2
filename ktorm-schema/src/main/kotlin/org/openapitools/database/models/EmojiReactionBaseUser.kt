/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * Dictionary with data on the user who added the reaction, including the user ID as the `id` field.  **Note**: In the [events API](/api/get-events), this `user` dictionary confusing had the user ID in a field called `user_id` instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the `user_id` field. 
 * @param id ID of the user. 
 * @param email Email of the user. 
 * @param fullName Full name of the user. 
 * @param isMirrorDummy Whether the user is a mirror dummy. 
 */
@Deprecated(message = "This schema is deprecated.")
object EmojiReactionBaseUsers : BaseTable<EmojiReactionBaseUser>("EmojiReactionBase_user") {
    val id = int("id") /* null */ /* ID of the user.  */
    val email = text("email") /* null */ /* Email of the user.  */
    val fullName = text("full_name") /* null */ /* Full name of the user.  */
    val isMirrorDummy = boolean("is_mirror_dummy") /* null */ /* Whether the user is a mirror dummy.  */

    /**
     * Create an entity of type EmojiReactionBaseUser from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = EmojiReactionBaseUser(
        id = row[id]  /* kotlin.Int? */ /* ID of the user.  */,
        email = row[email]  /* kotlin.String? */ /* Email of the user.  */,
        fullName = row[fullName]  /* kotlin.String? */ /* Full name of the user.  */,
        isMirrorDummy = row[isMirrorDummy]  /* kotlin.Boolean? */ /* Whether the user is a mirror dummy.  */
    )

    /**
    * Assign all the columns from the entity of type EmojiReactionBaseUser to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = EmojiReactionBaseUser()
    * database.update(EmojiReactionBaseUsers, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: EmojiReactionBaseUser) {
        this.apply {
            set(EmojiReactionBaseUsers.id, entity.id)
            set(EmojiReactionBaseUsers.email, entity.email)
            set(EmojiReactionBaseUsers.fullName, entity.fullName)
            set(EmojiReactionBaseUsers.isMirrorDummy, entity.isMirrorDummy)
        }
    }

}


