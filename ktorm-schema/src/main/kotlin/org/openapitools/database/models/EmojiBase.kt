/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param emojiCode A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji. 
 * @param emojiName Name of the emoji. 
 * @param reactionType One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 
 */
object EmojiBases : BaseTable<EmojiBase>("EmojiBase") {
    val emojiCode = text("emoji_code") /* null */ /* A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.  */
    val emojiName = text("emoji_name") /* null */ /* Name of the emoji.  */
    val reactionType = text("reaction_type") /* null */ /* One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji.  */

    /**
     * Create an entity of type EmojiBase from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = EmojiBase(
        emojiCode = row[emojiCode]  /* kotlin.String? */ /* A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.  */,
        emojiName = row[emojiName]  /* kotlin.String? */ /* Name of the emoji.  */,
        reactionType = row[reactionType]  /* kotlin.String? */ /* One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji.  */
    )

    /**
    * Assign all the columns from the entity of type EmojiBase to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = EmojiBase()
    * database.update(EmojiBases, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: EmojiBase) {
        this.apply {
            set(EmojiBases.emojiCode, entity.emojiCode)
            set(EmojiBases.emojiName, entity.emojiName)
            set(EmojiBases.reactionType, entity.reactionType)
        }
    }

}


