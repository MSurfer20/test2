/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param userId The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 
 * @param user 
 */
object EmojiReactionBaseAllOfs : BaseTable<EmojiReactionBaseAllOf>("EmojiReactionBase_allOf") {
    val userId = int("user_id") /* null */ /* The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future.  */
    @Deprecated(message = "This property is deprecated.")
    val user = long("user") /* null */

    /**
     * Create an entity of type EmojiReactionBaseAllOf from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = EmojiReactionBaseAllOf(
        userId = row[userId]  /* kotlin.Int? */ /* The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future.  */,
        user = EmojiReactionBaseAllOfUsers.createEntity(row, withReferences) /* EmojiReactionBaseAllOfUser? */
    )

    /**
    * Assign all the columns from the entity of type EmojiReactionBaseAllOf to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = EmojiReactionBaseAllOf()
    * database.update(EmojiReactionBaseAllOfs, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: EmojiReactionBaseAllOf) {
        this.apply {
            set(EmojiReactionBaseAllOfs.userId, entity.userId)
            set(EmojiReactionBaseAllOfs.user, entity.user)
        }
    }

}


