/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * `{emoji_id}`: Object containing details about the emoji with  the specified ID. It has the following properties: 
 * @param id The ID for this emoji, same as the object's key. 
 * @param name The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name  :`). 
 * @param sourceUrl The path relative to the organization's URL where the emoji's image can be found. 
 * @param deactivated Whether the emoji has been deactivated or not. 
 * @param authorId The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and `author` object with an `id` field. 
 */
object RealmEmojis : BaseTable<RealmEmoji>("RealmEmoji") {
    val id = text("id") /* null */ /* The ID for this emoji, same as the object's key.  */
    val name = text("name") /* null */ /* The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name  :`).  */
    val sourceUrl = text("source_url") /* null */ /* The path relative to the organization's URL where the emoji's image can be found.  */
    val deactivated = boolean("deactivated") /* null */ /* Whether the emoji has been deactivated or not.  */
    val authorId = int("author_id") /* null */ /* The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and `author` object with an `id` field.  */

    /**
     * Create an entity of type RealmEmoji from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = RealmEmoji(
        id = row[id]  /* kotlin.String? */ /* The ID for this emoji, same as the object's key.  */,
        name = row[name]  /* kotlin.String? */ /* The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name  :`).  */,
        sourceUrl = row[sourceUrl]  /* kotlin.String? */ /* The path relative to the organization's URL where the emoji's image can be found.  */,
        deactivated = row[deactivated]  /* kotlin.Boolean? */ /* Whether the emoji has been deactivated or not.  */,
        authorId = row[authorId]  /* kotlin.Int? */ /* The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and `author` object with an `id` field.  */
    )

    /**
    * Assign all the columns from the entity of type RealmEmoji to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = RealmEmoji()
    * database.update(RealmEmojis, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: RealmEmoji) {
        this.apply {
            set(RealmEmojis.id, entity.id)
            set(RealmEmojis.name, entity.name)
            set(RealmEmojis.sourceUrl, entity.sourceUrl)
            set(RealmEmojis.deactivated, entity.deactivated)
            set(RealmEmojis.authorId, entity.authorId)
        }
    }

}


