/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * A dictionary containing basic data on a given Zulip user. 
 * @param email The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
 * @param isBot A boolean specifying whether the user is a bot or full account. 
 * @param avatarUrl URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion. 
 * @param avatarVersion Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`. 
 * @param fullName Full name of the user or bot, used for all display purposes. 
 * @param isAdmin A boolean specifying whether the user is an organization administrator. 
 * @param isOwner A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
 * @param isBillingAdmin A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
 * @param role [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59). 
 * @param botType An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot. 
 * @param userId The unique ID of the user. 
 * @param botOwnerId If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner. 
 * @param isActive A boolean specifying whether the user account has been deactivated. 
 * @param isGuest A boolean specifying whether the user is a guest user. 
 * @param timezone The time zone of the user. 
 * @param dateJoined The time the user account was created. 
 * @param deliveryEmail The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
 * @param profileData A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present. 
 */
object UserBases : BaseTable<UserBase>("UserBase") {
    val email = text("email") /* null */ /* The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else.  */
    val isBot = boolean("is_bot") /* null */ /* A boolean specifying whether the user is a bot or full account.  */
    val avatarUrl = text("avatar_url") /* null */ /* URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion.  */
    val avatarVersion = int("avatar_version") /* null */ /* Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.  */
    val fullName = text("full_name") /* null */ /* Full name of the user or bot, used for all display purposes.  */
    val isAdmin = boolean("is_admin") /* null */ /* A boolean specifying whether the user is an organization administrator.  */
    val isOwner = boolean("is_owner") /* null */ /* A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8).  */
    val isBillingAdmin = boolean("is_billing_admin") /* null */ /* A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73).  */
    val role = int("role").transform({ UserBase.Role.valueOf(it ?: 100) }, { it.value }) /* null */ /* [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59).  */

    val botType = int("bot_type") /* null */ /* An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot.  */
    val userId = int("user_id") /* null */ /* The unique ID of the user.  */
    val botOwnerId = int("bot_owner_id") /* null */ /* If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner.  */
    val isActive = boolean("is_active") /* null */ /* A boolean specifying whether the user account has been deactivated.  */
    val isGuest = boolean("is_guest") /* null */ /* A boolean specifying whether the user is a guest user.  */
    val timezone = text("timezone") /* null */ /* The time zone of the user.  */
    val dateJoined = text("date_joined") /* null */ /* The time the user account was created.  */
    val deliveryEmail = text("delivery_email") /* null */ /* The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy.  */
    val profileData = blob("profile_data") /* null */ /* A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present.  */

    /**
     * Create an entity of type UserBase from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = UserBase(
        email = row[email]  /* kotlin.String? */ /* The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else.  */,
        isBot = row[isBot]  /* kotlin.Boolean? */ /* A boolean specifying whether the user is a bot or full account.  */,
        avatarUrl = row[avatarUrl]  /* kotlin.String? */ /* URL for the user's avatar.  Will be `null` if the `client_gravatar` query parameter was set to `True` and the user's avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the `user_avatar_url_field_optional` capability, this will be missing at the server's sole discretion.  */,
        avatarVersion = row[avatarVersion]  /* kotlin.Int? */ /* Version for the user's avatar.  Used for cache-busting requests for the user's avatar.  Clients generally shouldn't need to use this; most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.  */,
        fullName = row[fullName]  /* kotlin.String? */ /* Full name of the user or bot, used for all display purposes.  */,
        isAdmin = row[isAdmin]  /* kotlin.Boolean? */ /* A boolean specifying whether the user is an organization administrator.  */,
        isOwner = row[isOwner]  /* kotlin.Boolean? */ /* A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8).  */,
        isBillingAdmin = row[isBillingAdmin]  /* kotlin.Boolean? */ /* A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73).  */,
        role = row[role]  /* kotlin.Int? */ /* [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner => 100 * Organization administrator => 200 * Organization moderator => 300 * Member => 400 * Guest => 600  **Changes**: New in Zulip 4.0 (feature level 59).  */,
        botType = row[botType]  /* kotlin.Int? */ /* An integer describing the type of bot: * `null` if the user isn't a bot. * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot.  */,
        userId = row[userId]  /* kotlin.Int? */ /* The unique ID of the user.  */,
        botOwnerId = row[botOwnerId]  /* kotlin.Int? */ /* If the user is a bot (i.e. `is_bot` is `True`), `bot_owner` is the user ID of the bot's owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a `bot_owner` field containing the email address of the bot's owner.  */,
        isActive = row[isActive]  /* kotlin.Boolean? */ /* A boolean specifying whether the user account has been deactivated.  */,
        isGuest = row[isGuest]  /* kotlin.Boolean? */ /* A boolean specifying whether the user is a guest user.  */,
        timezone = row[timezone]  /* kotlin.String? */ /* The time zone of the user.  */,
        dateJoined = row[dateJoined]  /* kotlin.String? */ /* The time the user account was created.  */,
        deliveryEmail = row[deliveryEmail]  /* kotlin.String? */ /* The user's real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy.  */,
        profileData = row[profileData]  /* kotlin.collections.Map<kotlin.String, kotlin.Any>? */ /* A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user's data for that field.  Generally the data includes just a single `value` key; for those custom profile fields supporting Markdown, a `rendered_value` key will also be present.  */
    )

    /**
    * Assign all the columns from the entity of type UserBase to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = UserBase()
    * database.update(UserBases, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: UserBase) {
        this.apply {
            set(UserBases.email, entity.email)
            set(UserBases.isBot, entity.isBot)
            set(UserBases.avatarUrl, entity.avatarUrl)
            set(UserBases.avatarVersion, entity.avatarVersion)
            set(UserBases.fullName, entity.fullName)
            set(UserBases.isAdmin, entity.isAdmin)
            set(UserBases.isOwner, entity.isOwner)
            set(UserBases.isBillingAdmin, entity.isBillingAdmin)
            set(UserBases.role, entity.role)
            set(UserBases.botType, entity.botType)
            set(UserBases.userId, entity.userId)
            set(UserBases.botOwnerId, entity.botOwnerId)
            set(UserBases.isActive, entity.isActive)
            set(UserBases.isGuest, entity.isGuest)
            set(UserBases.timezone, entity.timezone)
            set(UserBases.dateJoined, entity.dateJoined)
            set(UserBases.deliveryEmail, entity.deliveryEmail)
            set(UserBases.profileData, entity.profileData)
        }
    }

}


