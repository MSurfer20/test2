/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * This is an example of the JSON payload that the Zulip server will `POST` to your server 
 * @param botEmail Email of the bot user. 
 * @param botFullName The full name of the bot user. 
 * @param data The message content, in raw Markdown format (not rendered to HTML). 
 * @param trigger What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`. 
 * @param token A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot. 
 * @param message A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages). 
 */
object InlineResponse200s : BaseTable<InlineResponse200>("inline_response_200") {
    val botEmail = text("bot_email") /* null */ /* Email of the bot user.  */
    val botFullName = text("bot_full_name") /* null */ /* The full name of the bot user.  */
    val data = text("data") /* null */ /* The message content, in raw Markdown format (not rendered to HTML).  */
    val trigger = text("trigger") /* null */ /* What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`.  */
    val token = text("token") /* null */ /* A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot.  */
    val message = long("message") /* null */ /* A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).  */

    /**
     * Create an entity of type InlineResponse200 from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = InlineResponse200(
        botEmail = row[botEmail]  /* kotlin.String? */ /* Email of the bot user.  */,
        botFullName = row[botFullName]  /* kotlin.String? */ /* The full name of the bot user.  */,
        data = row[data]  /* kotlin.String? */ /* The message content, in raw Markdown format (not rendered to HTML).  */,
        trigger = row[trigger]  /* kotlin.String? */ /* What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`.  */,
        token = row[token]  /* kotlin.String? */ /* A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot.  */,
        message = MessagesBases.createEntity(row, withReferences) /* MessagesBase? */ /* A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).  */
    )

    /**
    * Assign all the columns from the entity of type InlineResponse200 to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = InlineResponse200()
    * database.update(InlineResponse200s, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: InlineResponse200) {
        this.apply {
            set(InlineResponse200s.botEmail, entity.botEmail)
            set(InlineResponse200s.botFullName, entity.botFullName)
            set(InlineResponse200s.data, entity.data)
            set(InlineResponse200s.trigger, entity.trigger)
            set(InlineResponse200s.token, entity.token)
            set(InlineResponse200s.message, entity.message)
        }
    }

}


