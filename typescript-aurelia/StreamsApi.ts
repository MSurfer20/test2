/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AddSubscriptionsResponse,
  string | number,
  JsonSuccessBase &amp; object,
  JsonSuccess,
} from './models';

/**
 * archiveStream - parameters interface
 */
export interface IArchiveStreamParams {
  streamId: number;
}

/**
 * createBigBlueButtonVideoCall - parameters interface
 */
export interface ICreateBigBlueButtonVideoCallParams {
}

/**
 * getStreamId - parameters interface
 */
export interface IGetStreamIdParams {
  stream: string;
}

/**
 * getStreamTopics - parameters interface
 */
export interface IGetStreamTopicsParams {
  streamId: number;
}

/**
 * getStreams - parameters interface
 */
export interface IGetStreamsParams {
  includePublic?: boolean;
  includeWebPublic?: boolean;
  includeSubscribed?: boolean;
  includeAllActive?: boolean;
  includeDefault?: boolean;
  includeOwnerSubscribed?: boolean;
}

/**
 * getSubscriptionStatus - parameters interface
 */
export interface IGetSubscriptionStatusParams {
  userId: number;
  streamId: number;
}

/**
 * getSubscriptions - parameters interface
 */
export interface IGetSubscriptionsParams {
  includeSubscribers?: boolean;
}

/**
 * muteTopic - parameters interface
 */
export interface IMuteTopicParams {
  topic: string;
  op: 'add' | 'remove';
  stream?: string;
  streamId?: number;
}

/**
 * subscribe - parameters interface
 */
export interface ISubscribeParams {
  subscriptions: Array<object>;
  principals?: Array<string | number>;
  authorizationErrorsFatal?: boolean;
  announce?: boolean;
  inviteOnly?: boolean;
  historyPublicToSubscribers?: boolean;
  streamPostPolicy?: number;
  messageRetentionDays?: string | number;
}

/**
 * unsubscribe - parameters interface
 */
export interface IUnsubscribeParams {
  subscriptions: Array<string>;
  principals?: Array<string | number>;
}

/**
 * updateStream - parameters interface
 */
export interface IUpdateStreamParams {
  streamId: number;
  description?: string;
  newName?: string;
  isPrivate?: boolean;
  isAnnouncementOnly?: boolean;
  streamPostPolicy?: number;
  historyPublicToSubscribers?: boolean;
  messageRetentionDays?: string | number;
}

/**
 * updateSubscriptionSettings - parameters interface
 */
export interface IUpdateSubscriptionSettingsParams {
  subscriptionData: Array<object>;
}

/**
 * updateSubscriptions - parameters interface
 */
export interface IUpdateSubscriptionsParams {
  _delete?: Array<string>;
  add?: Array<object>;
}

/**
 * StreamsApi - API class
 */
@autoinject()
export class StreamsApi extends Api {

  /**
   * Creates a new StreamsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Archive a stream
   * [Archive the stream](/help/archive-a-stream) with the ID &#x60;stream_id&#x60;.  &#x60;DELETE {{ api_url }}/v1/streams/{stream_id}&#x60; 
   * @param params.streamId The ID of the stream to access. 
   */
  async archiveStream(params: IArchiveStreamParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('archiveStream', params, 'streamId');

    // Create URL to call
    const url = `${this.basePath}/streams/{stream_id}`
      .replace(`{${'stream_id'}}`, encodeURIComponent(`${params['streamId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create BigBlueButton video call
   * Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
   */
  async createBigBlueButtonVideoCall(): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/calls/bigbluebutton/create`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get stream ID
   * Get the unique ID of a given stream.  &#x60;GET {{ api_url }}/v1/get_stream_id&#x60; 
   * @param params.stream The name of the stream to access. 
   */
  async getStreamId(params: IGetStreamIdParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('getStreamId', params, 'stream');

    // Create URL to call
    const url = `${this.basePath}/get_stream_id`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'stream': params['stream'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get topics in a stream
   * Get all the topics in a specific stream  &#x60;GET {{ api_url }}/v1/users/me/{stream_id}/topics&#x60; 
   * @param params.streamId The ID of the stream to access. 
   */
  async getStreamTopics(params: IGetStreamTopicsParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('getStreamTopics', params, 'streamId');

    // Create URL to call
    const url = `${this.basePath}/users/me/{stream_id}/topics`
      .replace(`{${'stream_id'}}`, encodeURIComponent(`${params['streamId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get all streams
   * Get all streams that the user has access to.  &#x60;GET {{ api_url }}/v1/streams&#x60; 
   * @param params.includePublic Include all public streams. 
   * @param params.includeWebPublic Include all web public streams. 
   * @param params.includeSubscribed Include all streams that the user is subscribed to. 
   * @param params.includeAllActive Include all active streams. The user must have administrative privileges to use this parameter. 
   * @param params.includeDefault Include all default streams for the user\&#39;s realm. 
   * @param params.includeOwnerSubscribed If the user is a bot, include all streams that the bot\&#39;s owner is subscribed to. 
   */
  async getStreams(params: IGetStreamsParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/streams`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'include_public': params['includePublic'],
        'include_web_public': params['includeWebPublic'],
        'include_subscribed': params['includeSubscribed'],
        'include_all_active': params['includeAllActive'],
        'include_default': params['includeDefault'],
        'include_owner_subscribed': params['includeOwnerSubscribed'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get subscription status
   * Check whether a user is subscribed to a stream.  &#x60;GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}&#x60;  **Changes**: New in Zulip 3.0 (feature level 11). 
   * @param params.userId The target user\&#39;s ID. 
   * @param params.streamId The ID of the stream to access. 
   */
  async getSubscriptionStatus(params: IGetSubscriptionStatusParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSubscriptionStatus', params, 'userId');
    this.ensureParamIsSet('getSubscriptionStatus', params, 'streamId');

    // Create URL to call
    const url = `${this.basePath}/users/{user_id}/subscriptions/{stream_id}`
      .replace(`{${'user_id'}}`, encodeURIComponent(`${params['userId']}`))
      .replace(`{${'stream_id'}}`, encodeURIComponent(`${params['streamId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get subscribed streams
   * Get all streams that the user is subscribed to.  &#x60;GET {{ api_url }}/v1/users/me/subscriptions&#x60; 
   * @param params.includeSubscribers Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0. 
   */
  async getSubscriptions(params: IGetSubscriptionsParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'include_subscribers': params['includeSubscribers'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Topic muting
   * This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user\&#39;s unread count totals.  &#x60;PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics&#x60; 
   * @param params.topic The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic. 
   * @param params.op Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic. 
   * @param params.stream The name of the stream to access. 
   * @param params.streamId The ID of the stream to access. 
   */
  async muteTopic(params: IMuteTopicParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('muteTopic', params, 'topic');
    this.ensureParamIsSet('muteTopic', params, 'op');

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions/muted_topics`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'stream': params['stream'],
        'stream_id': params['streamId'],
        'topic': params['topic'],
        'op': params['op'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Subscribe to a stream
   * Subscribe one or more users to one or more streams.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions&#x60;  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like &#x60;invite_only&#x60; detailed below. 
   * @param params.subscriptions A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value. 
   * @param params.principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
   * @param params.authorizationErrorsFatal A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key. 
   * @param params.announce If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream\&#39;s creation. 
   * @param params.inviteOnly As described above, this endpoint will create a new stream if passed a stream name that doesn\&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams. 
   * @param params.historyPublicToSubscribers Whether the stream\&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
   * @param params.streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
   * @param params.messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
   */
  async subscribe(params: ISubscribeParams): Promise<AddSubscriptionsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('subscribe', params, 'subscriptions');

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'subscriptions': params['subscriptions'],
        'principals': params['principals'],
        'authorization_errors_fatal': params['authorizationErrorsFatal'],
        'announce': params['announce'],
        'invite_only': params['inviteOnly'],
        'history_public_to_subscribers': params['historyPublicToSubscribers'],
        'stream_post_policy': params['streamPostPolicy'],
        'message_retention_days': params['messageRetentionDays'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Unsubscribe from a stream
   * Unsubscribe yourself or other users from one or more streams.  &#x60;DELETE {{ api_url }}/v1/users/me/subscriptions&#x60; 
   * @param params.subscriptions A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API. 
   * @param params.principals A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9). 
   */
  async unsubscribe(params: IUnsubscribeParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('unsubscribe', params, 'subscriptions');

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Set query parameters
      .withParams({ 
        'subscriptions': params['subscriptions'],
        'principals': params['principals'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update a stream
   * Configure the stream with the ID &#x60;stream_id&#x60;.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  &#x60;PATCH {{ api_url }}/v1/streams/{stream_id}&#x60; 
   * @param params.streamId The ID of the stream to access. 
   * @param params.description The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
   * @param params.newName The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64). 
   * @param params.isPrivate Change whether the stream is a private stream. 
   * @param params.isAnnouncementOnly Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead. 
   * @param params.streamPostPolicy Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
   * @param params.historyPublicToSubscribers Whether the stream\&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation. 
   * @param params.messageRetentionDays Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
   */
  async updateStream(params: IUpdateStreamParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateStream', params, 'streamId');

    // Create URL to call
    const url = `${this.basePath}/streams/{stream_id}`
      .replace(`{${'stream_id'}}`, encodeURIComponent(`${params['streamId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'description': params['description'],
        'new_name': params['newName'],
        'is_private': params['isPrivate'],
        'is_announcement_only': params['isAnnouncementOnly'],
        'stream_post_policy': params['streamPostPolicy'],
        'history_public_to_subscribers': params['historyPublicToSubscribers'],
        'message_retention_days': params['messageRetentionDays'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update subscription settings
   * This endpoint is used to update the user\&#39;s personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  &#x60;POST {{ api_url }}/v1/users/me/subscriptions/properties&#x60; 
   * @param params.subscriptionData A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user\&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream. 
   */
  async updateSubscriptionSettings(params: IUpdateSubscriptionSettingsParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateSubscriptionSettings', params, 'subscriptionData');

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions/properties`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'subscription_data': params['subscriptionData'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update subscriptions
   * Update which streams you are are subscribed to. 
   * @param params._delete A list of stream names to unsubscribe from. 
   * @param params.add A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description. 
   */
  async updateSubscriptions(params: IUpdateSubscriptionsParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/users/me/subscriptions`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'delete': params['_delete'],
        'add': params['add'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

