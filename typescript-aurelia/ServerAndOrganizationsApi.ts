/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  JsonSuccessBase &amp; object,
  object,
  JsonSuccess,
} from './models';

/**
 * addCodePlayground - parameters interface
 */
export interface IAddCodePlaygroundParams {
  name: string;
  pygmentsLanguage: string;
  urlPrefix: string;
}

/**
 * addLinkifier - parameters interface
 */
export interface IAddLinkifierParams {
  pattern: string;
  urlFormatString: string;
}

/**
 * createCustomProfileField - parameters interface
 */
export interface ICreateCustomProfileFieldParams {
  fieldType: number;
  name?: string;
  hint?: string;
  fieldData?: object;
}

/**
 * getCustomEmoji - parameters interface
 */
export interface IGetCustomEmojiParams {
}

/**
 * getCustomProfileFields - parameters interface
 */
export interface IGetCustomProfileFieldsParams {
}

/**
 * getLinkifiers - parameters interface
 */
export interface IGetLinkifiersParams {
}

/**
 * getServerSettings - parameters interface
 */
export interface IGetServerSettingsParams {
}

/**
 * removeCodePlayground - parameters interface
 */
export interface IRemoveCodePlaygroundParams {
  playgroundId: number;
}

/**
 * removeLinkifier - parameters interface
 */
export interface IRemoveLinkifierParams {
  filterId: number;
}

/**
 * reorderCustomProfileFields - parameters interface
 */
export interface IReorderCustomProfileFieldsParams {
  order: Array<number>;
}

/**
 * updateLinkifier - parameters interface
 */
export interface IUpdateLinkifierParams {
  filterId: number;
  pattern: string;
  urlFormatString: string;
}

/**
 * uploadCustomEmoji - parameters interface
 */
export interface IUploadCustomEmojiParams {
  emojiName: string;
  filename?: any;
}

/**
 * ServerAndOrganizationsApi - API class
 */
@autoinject()
export class ServerAndOrganizationsApi extends Api {

  /**
   * Creates a new ServerAndOrganizationsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Add a code playground
   * Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  &#x60;POST {{ api_url }}/v1/realm/playgrounds&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
   * @param params.name The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language. 
   * @param params.pygmentsLanguage The name of the Pygments language lexer for that programming language. 
   * @param params.urlPrefix The url prefix for the playground. 
   */
  async addCodePlayground(params: IAddCodePlaygroundParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('addCodePlayground', params, 'name');
    this.ensureParamIsSet('addCodePlayground', params, 'pygmentsLanguage');
    this.ensureParamIsSet('addCodePlayground', params, 'urlPrefix');

    // Create URL to call
    const url = `${this.basePath}/realm/playgrounds`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'name': params['name'],
        'pygments_language': params['pygmentsLanguage'],
        'url_prefix': params['urlPrefix'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add a linkifier
   * Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;POST {{ api_url }}/v1/realm/filters&#x60; 
   * @param params.pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
   * @param params.urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
   */
  async addLinkifier(params: IAddLinkifierParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('addLinkifier', params, 'pattern');
    this.ensureParamIsSet('addLinkifier', params, 'urlFormatString');

    // Create URL to call
    const url = `${this.basePath}/realm/filters`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'pattern': params['pattern'],
        'url_format_string': params['urlFormatString'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a custom profile field
   * [Create a custom profile field](/help/add-custom-profile-fields) in the user\&#39;s organization.  &#x60;POST {{ api_url }}/v1/realm/profile_fields&#x60; 
   * @param params.fieldType The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account 
   * @param params.name The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user\&#39;s profile. 
   * @param params.hint The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields. 
   * @param params.fieldData Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized. 
   */
  async createCustomProfileField(params: ICreateCustomProfileFieldParams): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set
    this.ensureParamIsSet('createCustomProfileField', params, 'fieldType');

    // Create URL to call
    const url = `${this.basePath}/realm/profile_fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'name': params['name'],
        'hint': params['hint'],
        'field_type': params['fieldType'],
        'field_data': params['fieldData'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get all custom emoji
   * Get all the custom emoji in the user\&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/emoji&#x60; 
   */
  async getCustomEmoji(): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/realm/emoji`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get all custom profile fields
   * Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user\&#39;s organization.  &#x60;GET {{ api_url }}/v1/realm/profile_fields&#x60; 
   */
  async getCustomProfileFields(): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/realm/profile_fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get linkifiers
   * List all of an organization\&#39;s configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;GET {{ api_url }}/v1/realm/linkifiers&#x60;  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar &#x60;GET /realm/filters&#x60; endpoint was available with each entry in a &#x60;[pattern, url_format, id]&#x60; tuple format. 
   */
  async getLinkifiers(): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/realm/linkifiers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get server settings
   * Fetch global settings for a Zulip server.  &#x60;GET {{ api_url }}/v1/server_settings&#x60;  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it\&#39;s running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
   */
  async getServerSettings(): Promise<JsonSuccessBase & object> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/server_settings`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove a code playground
   * Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  &#x60;DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 49). 
   * @param params.playgroundId The ID of the playground that you want to remove. 
   */
  async removeCodePlayground(params: IRemoveCodePlaygroundParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('removeCodePlayground', params, 'playgroundId');

    // Create URL to call
    const url = `${this.basePath}/realm/playgrounds/{playground_id}`
      .replace(`{${'playground_id'}}`, encodeURIComponent(`${params['playgroundId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Remove a linkifier
   * Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;DELETE {{ api_url }}/v1/realm/filters/{filter_id}&#x60; 
   * @param params.filterId The ID of the linkifier that you want to remove. 
   */
  async removeLinkifier(params: IRemoveLinkifierParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('removeLinkifier', params, 'filterId');

    // Create URL to call
    const url = `${this.basePath}/realm/filters/{filter_id}`
      .replace(`{${'filter_id'}}`, encodeURIComponent(`${params['filterId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Reorder custom profile fields
   * Reorder the custom profile fields in the user\&#39;s organization.  &#x60;PATCH {{ api_url }}/v1/realm/profile_fields&#x60;  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
   * @param params.order A list of the IDs of all the custom profile fields defined in this organization, in the desired new order. 
   */
  async reorderCustomProfileFields(params: IReorderCustomProfileFieldsParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('reorderCustomProfileFields', params, 'order');

    // Create URL to call
    const url = `${this.basePath}/realm/profile_fields`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'order': params['order'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Update a linkifier
   * Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  &#x60;PATCH {{ api_url }}/v1/realm/filters/{filter_id}&#x60;  **Changes**: New in Zulip 4.0 (feature level 57). 
   * @param params.filterId The ID of the linkifier that you want to update. 
   * @param params.pattern The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier. 
   * @param params.urlFormatString The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;. 
   */
  async updateLinkifier(params: IUpdateLinkifierParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateLinkifier', params, 'filterId');
    this.ensureParamIsSet('updateLinkifier', params, 'pattern');
    this.ensureParamIsSet('updateLinkifier', params, 'urlFormatString');

    // Create URL to call
    const url = `${this.basePath}/realm/filters/{filter_id}`
      .replace(`{${'filter_id'}}`, encodeURIComponent(`${params['filterId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPatch()
      // Set query parameters
      .withParams({ 
        'pattern': params['pattern'],
        'url_format_string': params['urlFormatString'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Upload custom emoji
   * This endpoint is used to upload a custom emoji for use in the user\&#39;s organization.  Access to this endpoint depends on the [organization\&#39;s configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  &#x60;POST {{ api_url }}/v1/realm/emoji/{emoji_name}&#x60; 
   * @param params.emojiName The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji). 
   * @param params.filename 
   */
  async uploadCustomEmoji(params: IUploadCustomEmojiParams): Promise<JsonSuccess> {
    // Verify required parameters are set
    this.ensureParamIsSet('uploadCustomEmoji', params, 'emojiName');

    // Create URL to call
    const url = `${this.basePath}/realm/emoji/{emoji_name}`
      .replace(`{${'emoji_name'}}`, encodeURIComponent(`${params['emojiName']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode form parameters
      .withHeader('content-type', 'application/x-www-form-urlencoded')
      .withContent(this.queryString({ 
        'filename': params['filename'],
      }))

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

