//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

import 'package:built_collection/built_collection.dart';
import 'package:openapi/src/model/messages_base_topic_links.dart';
import 'package:openapi/src/model/one_ofstringarray.dart';
import 'package:openapi/src/model/emoji_reaction.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'messages_base.g.dart';

/// Object containing details of the message. 
///
/// Properties:
/// * [avatarUrl] - The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
/// * [client] - A Zulip \"client\" string, describing what Zulip client sent the message. 
/// * [content] - The content/body of the message. 
/// * [contentType] - The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
/// * [displayRecipient] - Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
/// * [id] - The unique message ID.  Messages should always be displayed sorted by ID. 
/// * [isMeMessage] - Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
/// * [reactions] - Data on any reactions to the message. 
/// * [recipientId] - A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
/// * [senderEmail] - The Zulip display email address of the message's sender. 
/// * [senderFullName] - The full name of the message's sender. 
/// * [senderId] - The user ID of the message's sender. 
/// * [senderRealmStr] - A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
/// * [streamId] - Only present for stream messages; the ID of the stream. 
/// * [subject] - The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
/// * [topicLinks] - Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
/// * [submessages] - Data used for certain experimental Zulip integrations. 
/// * [timestamp] - The UNIX timestamp for when the message was sent, in UTC seconds. 
/// * [type] - The type of the message: `stream` or `private`. 
abstract class MessagesBase implements Built<MessagesBase, MessagesBaseBuilder> {
    /// The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
    @BuiltValueField(wireName: r'avatar_url')
    String? get avatarUrl;

    /// A Zulip \"client\" string, describing what Zulip client sent the message. 
    @BuiltValueField(wireName: r'client')
    String? get client;

    /// The content/body of the message. 
    @BuiltValueField(wireName: r'content')
    String? get content;

    /// The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
    @BuiltValueField(wireName: r'content_type')
    String? get contentType;

    /// Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
    @BuiltValueField(wireName: r'display_recipient')
    OneOfstringarray? get displayRecipient;

    /// The unique message ID.  Messages should always be displayed sorted by ID. 
    @BuiltValueField(wireName: r'id')
    int? get id;

    /// Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
    @BuiltValueField(wireName: r'is_me_message')
    bool? get isMeMessage;

    /// Data on any reactions to the message. 
    @BuiltValueField(wireName: r'reactions')
    BuiltList<EmojiReaction>? get reactions;

    /// A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
    @BuiltValueField(wireName: r'recipient_id')
    int? get recipientId;

    /// The Zulip display email address of the message's sender. 
    @BuiltValueField(wireName: r'sender_email')
    String? get senderEmail;

    /// The full name of the message's sender. 
    @BuiltValueField(wireName: r'sender_full_name')
    String? get senderFullName;

    /// The user ID of the message's sender. 
    @BuiltValueField(wireName: r'sender_id')
    int? get senderId;

    /// A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
    @BuiltValueField(wireName: r'sender_realm_str')
    String? get senderRealmStr;

    /// Only present for stream messages; the ID of the stream. 
    @BuiltValueField(wireName: r'stream_id')
    int? get streamId;

    /// The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
    @BuiltValueField(wireName: r'subject')
    String? get subject;

    /// Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
    @BuiltValueField(wireName: r'topic_links')
    BuiltList<MessagesBaseTopicLinks>? get topicLinks;

    /// Data used for certain experimental Zulip integrations. 
    @BuiltValueField(wireName: r'submessages')
    BuiltList<String>? get submessages;

    /// The UNIX timestamp for when the message was sent, in UTC seconds. 
    @BuiltValueField(wireName: r'timestamp')
    int? get timestamp;

    /// The type of the message: `stream` or `private`. 
    @BuiltValueField(wireName: r'type')
    String? get type;

    MessagesBase._();

    static void _initializeBuilder(MessagesBaseBuilder b) => b;

    factory MessagesBase([void updates(MessagesBaseBuilder b)]) = _$MessagesBase;

    @BuiltValueSerializer(custom: true)
    static Serializer<MessagesBase> get serializer => _$MessagesBaseSerializer();
}

class _$MessagesBaseSerializer implements StructuredSerializer<MessagesBase> {
    @override
    final Iterable<Type> types = const [MessagesBase, _$MessagesBase];

    @override
    final String wireName = r'MessagesBase';

    @override
    Iterable<Object?> serialize(Serializers serializers, MessagesBase object,
        {FullType specifiedType = FullType.unspecified}) {
        final result = <Object?>[];
        if (object.avatarUrl != null) {
            result
                ..add(r'avatar_url')
                ..add(serializers.serialize(object.avatarUrl,
                    specifiedType: const FullType(String)));
        }
        if (object.client != null) {
            result
                ..add(r'client')
                ..add(serializers.serialize(object.client,
                    specifiedType: const FullType(String)));
        }
        if (object.content != null) {
            result
                ..add(r'content')
                ..add(serializers.serialize(object.content,
                    specifiedType: const FullType(String)));
        }
        if (object.contentType != null) {
            result
                ..add(r'content_type')
                ..add(serializers.serialize(object.contentType,
                    specifiedType: const FullType(String)));
        }
        if (object.displayRecipient != null) {
            result
                ..add(r'display_recipient')
                ..add(serializers.serialize(object.displayRecipient,
                    specifiedType: const FullType(OneOfstringarray)));
        }
        if (object.id != null) {
            result
                ..add(r'id')
                ..add(serializers.serialize(object.id,
                    specifiedType: const FullType(int)));
        }
        if (object.isMeMessage != null) {
            result
                ..add(r'is_me_message')
                ..add(serializers.serialize(object.isMeMessage,
                    specifiedType: const FullType(bool)));
        }
        if (object.reactions != null) {
            result
                ..add(r'reactions')
                ..add(serializers.serialize(object.reactions,
                    specifiedType: const FullType(BuiltList, [FullType(EmojiReaction)])));
        }
        if (object.recipientId != null) {
            result
                ..add(r'recipient_id')
                ..add(serializers.serialize(object.recipientId,
                    specifiedType: const FullType(int)));
        }
        if (object.senderEmail != null) {
            result
                ..add(r'sender_email')
                ..add(serializers.serialize(object.senderEmail,
                    specifiedType: const FullType(String)));
        }
        if (object.senderFullName != null) {
            result
                ..add(r'sender_full_name')
                ..add(serializers.serialize(object.senderFullName,
                    specifiedType: const FullType(String)));
        }
        if (object.senderId != null) {
            result
                ..add(r'sender_id')
                ..add(serializers.serialize(object.senderId,
                    specifiedType: const FullType(int)));
        }
        if (object.senderRealmStr != null) {
            result
                ..add(r'sender_realm_str')
                ..add(serializers.serialize(object.senderRealmStr,
                    specifiedType: const FullType(String)));
        }
        if (object.streamId != null) {
            result
                ..add(r'stream_id')
                ..add(serializers.serialize(object.streamId,
                    specifiedType: const FullType(int)));
        }
        if (object.subject != null) {
            result
                ..add(r'subject')
                ..add(serializers.serialize(object.subject,
                    specifiedType: const FullType(String)));
        }
        if (object.topicLinks != null) {
            result
                ..add(r'topic_links')
                ..add(serializers.serialize(object.topicLinks,
                    specifiedType: const FullType(BuiltList, [FullType(MessagesBaseTopicLinks)])));
        }
        if (object.submessages != null) {
            result
                ..add(r'submessages')
                ..add(serializers.serialize(object.submessages,
                    specifiedType: const FullType(BuiltList, [FullType(String)])));
        }
        if (object.timestamp != null) {
            result
                ..add(r'timestamp')
                ..add(serializers.serialize(object.timestamp,
                    specifiedType: const FullType(int)));
        }
        if (object.type != null) {
            result
                ..add(r'type')
                ..add(serializers.serialize(object.type,
                    specifiedType: const FullType(String)));
        }
        return result;
    }

    @override
    MessagesBase deserialize(Serializers serializers, Iterable<Object?> serialized,
        {FullType specifiedType = FullType.unspecified}) {
        final result = MessagesBaseBuilder();

        final iterator = serialized.iterator;
        while (iterator.moveNext()) {
            final key = iterator.current as String;
            iterator.moveNext();
            final Object? value = iterator.current;
            switch (key) {
                case r'avatar_url':
                    result.avatarUrl = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'client':
                    result.client = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'content':
                    result.content = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'content_type':
                    result.contentType = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'display_recipient':
                    result.displayRecipient.replace(serializers.deserialize(value,
                        specifiedType: const FullType(OneOfstringarray)) as OneOfstringarray);
                    break;
                case r'id':
                    result.id = serializers.deserialize(value,
                        specifiedType: const FullType(int)) as int;
                    break;
                case r'is_me_message':
                    result.isMeMessage = serializers.deserialize(value,
                        specifiedType: const FullType(bool)) as bool;
                    break;
                case r'reactions':
                    result.reactions.replace(serializers.deserialize(value,
                        specifiedType: const FullType(BuiltList, [FullType(EmojiReaction)])) as BuiltList<EmojiReaction>);
                    break;
                case r'recipient_id':
                    result.recipientId = serializers.deserialize(value,
                        specifiedType: const FullType(int)) as int;
                    break;
                case r'sender_email':
                    result.senderEmail = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'sender_full_name':
                    result.senderFullName = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'sender_id':
                    result.senderId = serializers.deserialize(value,
                        specifiedType: const FullType(int)) as int;
                    break;
                case r'sender_realm_str':
                    result.senderRealmStr = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'stream_id':
                    result.streamId = serializers.deserialize(value,
                        specifiedType: const FullType(int)) as int;
                    break;
                case r'subject':
                    result.subject = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
                case r'topic_links':
                    result.topicLinks.replace(serializers.deserialize(value,
                        specifiedType: const FullType(BuiltList, [FullType(MessagesBaseTopicLinks)])) as BuiltList<MessagesBaseTopicLinks>);
                    break;
                case r'submessages':
                    result.submessages.replace(serializers.deserialize(value,
                        specifiedType: const FullType(BuiltList, [FullType(String)])) as BuiltList<String>);
                    break;
                case r'timestamp':
                    result.timestamp = serializers.deserialize(value,
                        specifiedType: const FullType(int)) as int;
                    break;
                case r'type':
                    result.type = serializers.deserialize(value,
                        specifiedType: const FullType(String)) as String;
                    break;
            }
        }
        return result.build();
    }
}

