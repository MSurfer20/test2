//
// ServerAndOrganizationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ServerAndOrganizationsAPI {

    /**
     Add a code playground
     
     - parameter name: (query) The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language.  
     - parameter pygmentsLanguage: (query) The name of the Pygments language lexer for that programming language.  
     - parameter urlPrefix: (query) The url prefix for the playground.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCodePlayground(name: String, pygmentsLanguage: String, urlPrefix: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        addCodePlaygroundWithRequestBuilder(name: name, pygmentsLanguage: pygmentsLanguage, urlPrefix: urlPrefix).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a code playground
     - POST /realm/playgrounds
     - Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.  `POST {{ api_url }}/v1/realm/playgrounds`  **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was fixed in Zulip 4.0 (feature level 57). 
     - parameter name: (query) The user-visible display name of the playground which can be used to pick the target playground, especially when multiple playground options exist for that programming language.  
     - parameter pygmentsLanguage: (query) The name of the Pygments language lexer for that programming language.  
     - parameter urlPrefix: (query) The url prefix for the playground.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func addCodePlaygroundWithRequestBuilder(name: String, pygmentsLanguage: String, urlPrefix: String) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/playgrounds"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "pygments_language": pygmentsLanguage.encodeToJSON(),
            "url_prefix": urlPrefix.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Add a linkifier
     
     - parameter pattern: (query) The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     - parameter urlFormatString: (query) The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addLinkifier(pattern: String, urlFormatString: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        addLinkifierWithRequestBuilder(pattern: pattern, urlFormatString: urlFormatString).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a linkifier
     - POST /realm/filters
     - Configure [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `POST {{ api_url }}/v1/realm/filters` 
     - parameter pattern: (query) The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     - parameter urlFormatString: (query) The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func addLinkifierWithRequestBuilder(pattern: String, urlFormatString: String) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/filters"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pattern": pattern.encodeToJSON(),
            "url_format_string": urlFormatString.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a custom profile field
     
     - parameter fieldType: (query) The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  
     - parameter name: (query) The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional)
     - parameter hint: (query) The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional)
     - parameter fieldData: (query) Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCustomProfileField(fieldType: Int, name: String? = nil, hint: String? = nil, fieldData: AnyCodable? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        createCustomProfileFieldWithRequestBuilder(fieldType: fieldType, name: name, hint: hint, fieldData: fieldData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a custom profile field
     - POST /realm/profile_fields
     - [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.  `POST {{ api_url }}/v1/realm/profile_fields` 
     - parameter fieldType: (query) The field type can be any of the supported custom profile field types. See the [custom profile fields documentation](/help/add-custom-profile-fields) more details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  
     - parameter name: (query) The name of the custom profile field, which will appear both in user-facing settings UI for configuring custom profile fields and in UI displaying a user&#39;s profile.  (optional)
     - parameter hint: (query) The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  (optional)
     - parameter fieldData: (query) Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the &#x60;field_data&#x60; attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  (optional)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func createCustomProfileFieldWithRequestBuilder(fieldType: Int, name: String? = nil, hint: String? = nil, fieldData: AnyCodable? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/profile_fields"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "hint": hint?.encodeToJSON(),
            "field_type": fieldType.encodeToJSON(),
            "field_data": fieldData?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all custom emoji
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomEmoji(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getCustomEmojiWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all custom emoji
     - GET /realm/emoji
     - Get all the custom emoji in the user's organization.  `GET {{ api_url }}/v1/realm/emoji` 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getCustomEmojiWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/emoji"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all custom profile fields
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCustomProfileFields(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getCustomProfileFieldsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all custom profile fields
     - GET /realm/profile_fields
     - Get all the [custom profile fields](/help/add-custom-profile-fields) configured for the user's organization.  `GET {{ api_url }}/v1/realm/profile_fields` 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getCustomProfileFieldsWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/profile_fields"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get linkifiers
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLinkifiers(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getLinkifiersWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get linkifiers
     - GET /realm/linkifiers
     - List all of an organization's configured [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `GET {{ api_url }}/v1/realm/linkifiers`  **Changes**: New in Zulip 4.0 (feature level 54). On older versions, a similar `GET /realm/filters` endpoint was available with each entry in a `[pattern, url_format, id]` tuple format. 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getLinkifiersWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/realm/linkifiers"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get server settings
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getServerSettings(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getServerSettingsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get server settings
     - GET /server_settings
     - Fetch global settings for a Zulip server.  `GET {{ api_url }}/v1/server_settings`  **Note:** this endpoint does not require any authentication at all, and you can use it to check:  * If this is a Zulip server, and if so, what version of Zulip it's running. * What a Zulip client (e.g. a mobile app or [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to know in order to display a login prompt for the server (e.g. what authentication methods are available). 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getServerSettingsWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/server_settings"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a code playground
     
     - parameter playgroundId: (path) The ID of the playground that you want to remove.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeCodePlayground(playgroundId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        removeCodePlaygroundWithRequestBuilder(playgroundId: playgroundId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a code playground
     - DELETE /realm/playgrounds/{playground_id}
     - Remove a [code playground](/help/code-blocks#code-playgrounds) previously configured for an organization.  `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`  **Changes**: New in Zulip 4.0 (feature level 49). 
     - parameter playgroundId: (path) The ID of the playground that you want to remove.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func removeCodePlaygroundWithRequestBuilder(playgroundId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/realm/playgrounds/{playground_id}"
        let playgroundIdPreEscape = "\(APIHelper.mapValueToPathItem(playgroundId))"
        let playgroundIdPostEscape = playgroundIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playground_id}", with: playgroundIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a linkifier
     
     - parameter filterId: (path) The ID of the linkifier that you want to remove.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeLinkifier(filterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        removeLinkifierWithRequestBuilder(filterId: filterId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a linkifier
     - DELETE /realm/filters/{filter_id}
     - Remove [linkifiers](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `DELETE {{ api_url }}/v1/realm/filters/{filter_id}` 
     - parameter filterId: (path) The ID of the linkifier that you want to remove.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func removeLinkifierWithRequestBuilder(filterId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/realm/filters/{filter_id}"
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filter_id}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reorder custom profile fields
     
     - parameter order: (query) A list of the IDs of all the custom profile fields defined in this organization, in the desired new order.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reorderCustomProfileFields(order: [Int], apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        reorderCustomProfileFieldsWithRequestBuilder(order: order).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reorder custom profile fields
     - PATCH /realm/profile_fields
     - Reorder the custom profile fields in the user's organization.  `PATCH {{ api_url }}/v1/realm/profile_fields`  Custom profile fields are displayed in Zulip UI widgets in order; this endpoint allows administrative settings UI to change the field ordering.  This endpoint is used to implement the dragging feature described in the [custom profile fields documentation](/help/add-custom-profile-fields). 
     - parameter order: (query) A list of the IDs of all the custom profile fields defined in this organization, in the desired new order.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func reorderCustomProfileFieldsWithRequestBuilder(order: [Int]) -> RequestBuilder<JsonSuccess> {
        let localVariablePath = "/realm/profile_fields"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a linkifier
     
     - parameter filterId: (path) The ID of the linkifier that you want to update.  
     - parameter pattern: (query) The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     - parameter urlFormatString: (query) The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateLinkifier(filterId: Int, pattern: String, urlFormatString: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        updateLinkifierWithRequestBuilder(filterId: filterId, pattern: pattern, urlFormatString: urlFormatString).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a linkifier
     - PATCH /realm/filters/{filter_id}
     - Update a [linkifier](/help/add-a-custom-linkifier), regular expression patterns that are automatically linkified when they appear in messages and topics.  `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`  **Changes**: New in Zulip 4.0 (feature level 57). 
     - parameter filterId: (path) The ID of the linkifier that you want to update.  
     - parameter pattern: (query) The [Python regular expression](https://docs.python.org/3/howto/regex.html) that should trigger the linkifier.  
     - parameter urlFormatString: (query) The URL used for the link. If you used named groups for the &#x60;pattern&#x60;, you can insert their content here with &#x60;%(name_of_the_capturing_group)s&#x60;.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func updateLinkifierWithRequestBuilder(filterId: Int, pattern: String, urlFormatString: String) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/realm/filters/{filter_id}"
        let filterIdPreEscape = "\(APIHelper.mapValueToPathItem(filterId))"
        let filterIdPostEscape = filterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filter_id}", with: filterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pattern": pattern.encodeToJSON(),
            "url_format_string": urlFormatString.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Upload custom emoji
     
     - parameter emojiName: (path) The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji).  
     - parameter filename: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadCustomEmoji(emojiName: String, filename: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        uploadCustomEmojiWithRequestBuilder(emojiName: emojiName, filename: filename).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Upload custom emoji
     - POST /realm/emoji/{emoji_name}
     - This endpoint is used to upload a custom emoji for use in the user's organization.  Access to this endpoint depends on the [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).  `POST {{ api_url }}/v1/realm/emoji/{emoji_name}` 
     - parameter emojiName: (path) The name that should be associated with the uploaded emoji image/gif. The emoji name can only contain letters, numbers, dashes, and spaces. Upper and lower case letters are treated the same, and underscores (_) are treated the same as spaces (consistent with how the Zulip UI handles emoji).  
     - parameter filename: (form)  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func uploadCustomEmojiWithRequestBuilder(emojiName: String, filename: URL? = nil) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/realm/emoji/{emoji_name}"
        let emojiNamePreEscape = "\(APIHelper.mapValueToPathItem(emojiName))"
        let emojiNamePostEscape = emojiNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emoji_name}", with: emojiNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "filename": filename?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
