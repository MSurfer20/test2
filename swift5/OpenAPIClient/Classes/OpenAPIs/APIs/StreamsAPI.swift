//
// StreamsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StreamsAPI {

    /**
     Archive a stream
     
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func archiveStream(streamId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        archiveStreamWithRequestBuilder(streamId: streamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Archive a stream
     - DELETE /streams/{stream_id}
     - [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.  `DELETE {{ api_url }}/v1/streams/{stream_id}` 
     - parameter streamId: (path) The ID of the stream to access.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func archiveStreamWithRequestBuilder(streamId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/streams/{stream_id}"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create BigBlueButton video call
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createBigBlueButtonVideoCall(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        createBigBlueButtonVideoCallWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create BigBlueButton video call
     - GET /calls/bigbluebutton/create
     - Create a video call URL for a BigBlueButton video call. Requires BigBlueButton to be configured on the Zulip server. 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func createBigBlueButtonVideoCallWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/calls/bigbluebutton/create"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete a topic
     
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter topicName: (query) The name of the topic to delete.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTopic(streamId: Int, topicName: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        deleteTopicWithRequestBuilder(streamId: streamId, topicName: topicName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a topic
     - POST /streams/{stream_id}/delete_topic
     - Delete all messages in a topic.  `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`  Topics are a field on messages (not an independent data structure), so deleting all the messages in the topic deletes the topic from Zulip. 
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter topicName: (query) The name of the topic to delete.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func deleteTopicWithRequestBuilder(streamId: Int, topicName: String) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/streams/{stream_id}/delete_topic"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "topic_name": topicName.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get stream ID
     
     - parameter stream: (query) The name of the stream to access.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStreamId(stream: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getStreamIdWithRequestBuilder(stream: stream).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get stream ID
     - GET /get_stream_id
     - Get the unique ID of a given stream.  `GET {{ api_url }}/v1/get_stream_id` 
     - parameter stream: (query) The name of the stream to access.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getStreamIdWithRequestBuilder(stream: String) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/get_stream_id"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "stream": stream.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get topics in a stream
     
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStreamTopics(streamId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getStreamTopicsWithRequestBuilder(streamId: streamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get topics in a stream
     - GET /users/me/{stream_id}/topics
     - Get all the topics in a specific stream  `GET {{ api_url }}/v1/users/me/{stream_id}/topics` 
     - parameter streamId: (path) The ID of the stream to access.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getStreamTopicsWithRequestBuilder(streamId: Int) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/users/me/{stream_id}/topics"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all streams
     
     - parameter includePublic: (query) Include all public streams.  (optional, default to true)
     - parameter includeWebPublic: (query) Include all web public streams.  (optional, default to false)
     - parameter includeSubscribed: (query) Include all streams that the user is subscribed to.  (optional, default to true)
     - parameter includeAllActive: (query) Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
     - parameter includeDefault: (query) Include all default streams for the user&#39;s realm.  (optional, default to false)
     - parameter includeOwnerSubscribed: (query) If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStreams(includePublic: Bool? = nil, includeWebPublic: Bool? = nil, includeSubscribed: Bool? = nil, includeAllActive: Bool? = nil, includeDefault: Bool? = nil, includeOwnerSubscribed: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getStreamsWithRequestBuilder(includePublic: includePublic, includeWebPublic: includeWebPublic, includeSubscribed: includeSubscribed, includeAllActive: includeAllActive, includeDefault: includeDefault, includeOwnerSubscribed: includeOwnerSubscribed).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all streams
     - GET /streams
     - Get all streams that the user has access to.  `GET {{ api_url }}/v1/streams` 
     - parameter includePublic: (query) Include all public streams.  (optional, default to true)
     - parameter includeWebPublic: (query) Include all web public streams.  (optional, default to false)
     - parameter includeSubscribed: (query) Include all streams that the user is subscribed to.  (optional, default to true)
     - parameter includeAllActive: (query) Include all active streams. The user must have administrative privileges to use this parameter.  (optional, default to false)
     - parameter includeDefault: (query) Include all default streams for the user&#39;s realm.  (optional, default to false)
     - parameter includeOwnerSubscribed: (query) If the user is a bot, include all streams that the bot&#39;s owner is subscribed to.  (optional, default to false)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getStreamsWithRequestBuilder(includePublic: Bool? = nil, includeWebPublic: Bool? = nil, includeSubscribed: Bool? = nil, includeAllActive: Bool? = nil, includeDefault: Bool? = nil, includeOwnerSubscribed: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/streams"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_public": includePublic?.encodeToJSON(),
            "include_web_public": includeWebPublic?.encodeToJSON(),
            "include_subscribed": includeSubscribed?.encodeToJSON(),
            "include_all_active": includeAllActive?.encodeToJSON(),
            "include_default": includeDefault?.encodeToJSON(),
            "include_owner_subscribed": includeOwnerSubscribed?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the subscribers of a stream
     
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscribers(streamId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getSubscribersWithRequestBuilder(streamId: streamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the subscribers of a stream
     - GET /streams/{stream_id}/members
     - Get all users subscribed to a stream.  `Get {{ api_url }}/v1/streams/{stream_id}/members` 
     - parameter streamId: (path) The ID of the stream to access.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getSubscribersWithRequestBuilder(streamId: Int) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/streams/{stream_id}/members"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get subscription status
     
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscriptionStatus(userId: Int, streamId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getSubscriptionStatusWithRequestBuilder(userId: userId, streamId: streamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get subscription status
     - GET /users/{user_id}/subscriptions/{stream_id}
     - Check whether a user is subscribed to a stream.  `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`  **Changes**: New in Zulip 3.0 (feature level 11). 
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter streamId: (path) The ID of the stream to access.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getSubscriptionStatusWithRequestBuilder(userId: Int, streamId: Int) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/users/{user_id}/subscriptions/{stream_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get subscribed streams
     
     - parameter includeSubscribers: (query) Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSubscriptions(includeSubscribers: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getSubscriptionsWithRequestBuilder(includeSubscribers: includeSubscribers).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get subscribed streams
     - GET /users/me/subscriptions
     - Get all streams that the user is subscribed to.  `GET {{ api_url }}/v1/users/me/subscriptions` 
     - parameter includeSubscribers: (query) Whether each returned stream object should include a &#x60;subscribers&#x60; field containing a list of the user IDs of its subscribers.  (This may be significantly slower in organizations with thousands of users subscribed to many streams.)  **Changes**: New in Zulip 2.1.0.  (optional, default to false)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getSubscriptionsWithRequestBuilder(includeSubscribers: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users/me/subscriptions"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include_subscribers": includeSubscribers?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter op
     */
    public enum Op_muteTopic: String, CaseIterable {
        case add = "add"
        case remove = "remove"
    }

    /**
     Topic muting
     
     - parameter topic: (query) The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  
     - parameter op: (query) Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  
     - parameter stream: (query) The name of the stream to access.  (optional)
     - parameter streamId: (query) The ID of the stream to access.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func muteTopic(topic: String, op: Op_muteTopic, stream: String? = nil, streamId: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        muteTopicWithRequestBuilder(topic: topic, op: op, stream: stream, streamId: streamId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Topic muting
     - PATCH /users/me/subscriptions/muted_topics
     - This endpoint mutes/unmutes a topic within a stream that the current user is subscribed to.  Muted topics are displayed faded in the Zulip UI, and are not included in the user's unread count totals.  `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics` 
     - parameter topic: (query) The topic to (un)mute. Note that the request will succeed regardless of whether any messages have been sent to the specified topic.  
     - parameter op: (query) Whether to mute (&#x60;add&#x60;) or unmute (&#x60;remove&#x60;) the provided topic.  
     - parameter stream: (query) The name of the stream to access.  (optional)
     - parameter streamId: (query) The ID of the stream to access.  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func muteTopicWithRequestBuilder(topic: String, op: Op_muteTopic, stream: String? = nil, streamId: Int? = nil) -> RequestBuilder<JsonSuccess> {
        let localVariablePath = "/users/me/subscriptions/muted_topics"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "stream": stream?.encodeToJSON(),
            "stream_id": streamId?.encodeToJSON(),
            "topic": topic.encodeToJSON(),
            "op": op.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Subscribe to a stream
     
     - parameter subscriptions: (query) A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  
     - parameter principals: (query) A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     - parameter authorizationErrorsFatal: (query) A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
     - parameter announce: (query) If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
     - parameter inviteOnly: (query) As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
     - parameter historyPublicToSubscribers: (query) Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     - parameter streamPostPolicy: (query) Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     - parameter messageRetentionDays: (query) Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subscribe(subscriptions: [AnyCodable], principals: [OneOfstringinteger]? = nil, authorizationErrorsFatal: Bool? = nil, announce: Bool? = nil, inviteOnly: Bool? = nil, historyPublicToSubscribers: Bool? = nil, streamPostPolicy: Int? = nil, messageRetentionDays: OneOfstringinteger? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Subscribe200?, _ error: Error?) -> Void)) {
        subscribeWithRequestBuilder(subscriptions: subscriptions, principals: principals, authorizationErrorsFatal: authorizationErrorsFatal, announce: announce, inviteOnly: inviteOnly, historyPublicToSubscribers: historyPublicToSubscribers, streamPostPolicy: streamPostPolicy, messageRetentionDays: messageRetentionDays).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Subscribe to a stream
     - POST /users/me/subscriptions
     - Subscribe one or more users to one or more streams.  `POST {{ api_url }}/v1/users/me/subscriptions`  If any of the specified streams do not exist, they are automatically created.  The initial [stream settings](/api/update-stream) will be determined by the optional parameters like `invite_only` detailed below. 
     - parameter subscriptions: (query) A list of dictionaries containing the key &#x60;name&#x60; and value specifying the name of the stream to subscribe. If the stream does not exist a new stream is created. The description of the stream created can be specified by setting the dictionary key &#x60;description&#x60; with an appropriate value.  
     - parameter principals: (query) A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     - parameter authorizationErrorsFatal: (query) A boolean specifying whether authorization errors (such as when the requesting user is not authorized to access a private stream) should be considered fatal or not. When &#x60;True&#x60;, an authorization error is reported as such. When set to &#x60;False&#x60;, the response will be a 200 and any streams where the request encountered an authorization error will be listed in the &#x60;unauthorized&#x60; key.  (optional, default to true)
     - parameter announce: (query) If one of the streams specified did not exist previously and is thus craeted by this call, this determines whether [notification bot](/help/configure-notification-bot) will send an announcement about the new stream&#39;s creation.  (optional, default to false)
     - parameter inviteOnly: (query) As described above, this endpoint will create a new stream if passed a stream name that doesn&#39;t already exist.  This parameters and the ones that follow are used to request an initial configuration of a created stream; they are ignored for streams that already exist.  This parameter determines whether any newly created streams will be private streams.  (optional, default to false)
     - parameter historyPublicToSubscribers: (query) Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     - parameter streamPostPolicy: (query) Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     - parameter messageRetentionDays: (query) Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     - returns: RequestBuilder<Subscribe200> 
     */
    open class func subscribeWithRequestBuilder(subscriptions: [AnyCodable], principals: [OneOfstringinteger]? = nil, authorizationErrorsFatal: Bool? = nil, announce: Bool? = nil, inviteOnly: Bool? = nil, historyPublicToSubscribers: Bool? = nil, streamPostPolicy: Int? = nil, messageRetentionDays: OneOfstringinteger? = nil) -> RequestBuilder<Subscribe200> {
        let localVariablePath = "/users/me/subscriptions"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subscriptions": subscriptions.encodeToJSON(),
            "principals": principals?.encodeToJSON(),
            "authorization_errors_fatal": authorizationErrorsFatal?.encodeToJSON(),
            "announce": announce?.encodeToJSON(),
            "invite_only": inviteOnly?.encodeToJSON(),
            "history_public_to_subscribers": historyPublicToSubscribers?.encodeToJSON(),
            "stream_post_policy": streamPostPolicy?.encodeToJSON(),
            "message_retention_days": messageRetentionDays?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subscribe200>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unsubscribe from a stream
     
     - parameter subscriptions: (query) A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
     - parameter principals: (query) A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unsubscribe(subscriptions: [String], principals: [OneOfstringinteger]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        unsubscribeWithRequestBuilder(subscriptions: subscriptions, principals: principals).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unsubscribe from a stream
     - DELETE /users/me/subscriptions
     - Unsubscribe yourself or other users from one or more streams.  `DELETE {{ api_url }}/v1/users/me/subscriptions` 
     - parameter subscriptions: (query) A list of stream names to unsubscribe from. This parameter is called &#x60;streams&#x60; in our Python API.  
     - parameter principals: (query) A list of user ids (preferred) or Zulip display email addresses of the users to be subscribed to or unsubscribed from the streams specified in the &#x60;subscriptions&#x60; parameter. If not provided, then the requesting user/bot is subscribed.  **Changes**: The integer format is new in Zulip 3.0 (feature level 9).  (optional)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func unsubscribeWithRequestBuilder(subscriptions: [String], principals: [OneOfstringinteger]? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users/me/subscriptions"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subscriptions": subscriptions.encodeToJSON(),
            "principals": principals?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a stream
     
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter description: (query) The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter newName: (query) The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter isPrivate: (query) Change whether the stream is a private stream.  (optional)
     - parameter isAnnouncementOnly: (query) Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
     - parameter streamPostPolicy: (query) Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     - parameter historyPublicToSubscribers: (query) Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     - parameter messageRetentionDays: (query) Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateStream(streamId: Int, description: String? = nil, newName: String? = nil, isPrivate: Bool? = nil, isAnnouncementOnly: Bool? = nil, streamPostPolicy: Int? = nil, historyPublicToSubscribers: Bool? = nil, messageRetentionDays: OneOfstringinteger? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        updateStreamWithRequestBuilder(streamId: streamId, description: description, newName: newName, isPrivate: isPrivate, isAnnouncementOnly: isAnnouncementOnly, streamPostPolicy: streamPostPolicy, historyPublicToSubscribers: historyPublicToSubscribers, messageRetentionDays: messageRetentionDays).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a stream
     - PATCH /streams/{stream_id}
     - Configure the stream with the ID `stream_id`.  This endpoint supports an organization administrator editing any property of a stream, including:  * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description) * Stream [permissions](/help/stream-permissions), including [privacy](/help/change-the-privacy-of-a-stream) and [who can send](/help/stream-sending-policy).  `PATCH {{ api_url }}/v1/streams/{stream_id}` 
     - parameter streamId: (path) The ID of the stream to access.  
     - parameter description: (query) The new description for the stream. Limited Zulip markdown is allowed in this field.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter newName: (query) The new name for the stream.  **Changes**: Removed unnecessary JSON-encoding of this parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter isPrivate: (query) Change whether the stream is a private stream.  (optional)
     - parameter isAnnouncementOnly: (query) Whether the stream is limited to announcements.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use   &#x60;stream_post_policy&#x60; instead.  (optional)
     - parameter streamPostPolicy: (query) Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean.  (optional, default to 1)
     - parameter historyPublicToSubscribers: (query) Whether the stream&#39;s message history should be available to newly subscribed members, or users can only access messages they actually received while subscribed to the stream.  Corresponds to the [shared history](/help/stream-permissions) option in documentation.  (optional)
     - parameter messageRetentionDays: (query) Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  Two special string format values are supported:  * \&quot;realm_default\&quot; &#x3D;&gt; Return to the organization-level setting. * \&quot;forever\&quot; &#x3D;&gt; Retain messages forever.  **Changes**: New in Zulip 3.0 (feature level 17).  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func updateStreamWithRequestBuilder(streamId: Int, description: String? = nil, newName: String? = nil, isPrivate: Bool? = nil, isAnnouncementOnly: Bool? = nil, streamPostPolicy: Int? = nil, historyPublicToSubscribers: Bool? = nil, messageRetentionDays: OneOfstringinteger? = nil) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/streams/{stream_id}"
        let streamIdPreEscape = "\(APIHelper.mapValueToPathItem(streamId))"
        let streamIdPostEscape = streamIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{stream_id}", with: streamIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "description": description?.encodeToJSON(),
            "new_name": newName?.encodeToJSON(),
            "is_private": isPrivate?.encodeToJSON(),
            "is_announcement_only": isAnnouncementOnly?.encodeToJSON(),
            "stream_post_policy": streamPostPolicy?.encodeToJSON(),
            "history_public_to_subscribers": historyPublicToSubscribers?.encodeToJSON(),
            "message_retention_days": messageRetentionDays?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update subscription settings
     
     - parameter subscriptionData: (query) A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSubscriptionSettings(subscriptionData: [AnyCodable], apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        updateSubscriptionSettingsWithRequestBuilder(subscriptionData: subscriptionData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update subscription settings
     - POST /users/me/subscriptions/properties
     - This endpoint is used to update the user's personal settings for the streams they are subscribed to, including muting, color, pinning, and per-stream notification settings.  `POST {{ api_url }}/v1/users/me/subscriptions/properties` 
     - parameter subscriptionData: (query) A list of objects that describe the changes that should be applied in each subscription. Each object represents a subscription, and must have a &#x60;stream_id&#x60; key that identifies the stream, as well as the &#x60;property&#x60; being modified and its new &#x60;value&#x60;.  The possible values for each &#x60;property&#x60; and &#x60;value&#x60; pairs are:  * &#x60;color&#x60; (string): the hex value of the user&#39;s display color for the stream. * &#x60;is_muted&#x60; (boolean): whether the stream is   [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was   represented by the more confusingly named &#x60;in_home_view&#x60; (with the   opposite value, &#x60;in_home_view&#x3D;!is_muted&#x60;); for   backwards-compatibility, modern Zulip still accepts that value. * &#x60;pin_to_top&#x60; (boolean): whether to pin the stream at the top of the stream list. * &#x60;desktop_notifications&#x60; (boolean): whether to show desktop notifications     for all messages sent to the stream. * &#x60;audible_notifications&#x60; (boolean): whether to play a sound   notification for all messages sent to the stream. * &#x60;push_notifications&#x60; (boolean): whether to trigger a mobile push     notification for all messages sent to the stream. * &#x60;email_notifications&#x60; (boolean): whether to trigger an email     notification for all messages sent to the stream.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func updateSubscriptionSettingsWithRequestBuilder(subscriptionData: [AnyCodable]) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users/me/subscriptions/properties"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subscription_data": subscriptionData.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update subscriptions
     
     - parameter delete: (query) A list of stream names to unsubscribe from.  (optional)
     - parameter add: (query) A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateSubscriptions(delete: [String]? = nil, add: [AnyCodable]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        updateSubscriptionsWithRequestBuilder(delete: delete, add: add).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update subscriptions
     - PATCH /users/me/subscriptions
     - Update which streams you are are subscribed to. 
     - parameter delete: (query) A list of stream names to unsubscribe from.  (optional)
     - parameter add: (query) A list of objects describing which streams to subscribe to, optionally including per-user subscription parameters (e.g. color) and if the stream is to be created, its description.  (optional)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func updateSubscriptionsWithRequestBuilder(delete: [String]? = nil, add: [AnyCodable]? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users/me/subscriptions"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "delete": delete?.encodeToJSON(),
            "add": add?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
