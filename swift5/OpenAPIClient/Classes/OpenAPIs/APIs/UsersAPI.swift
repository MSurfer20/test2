//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Create a user
     
     - parameter email: (query) The email address of the new user.  
     - parameter password: (query) The password of the new user.  
     - parameter fullName: (query) The full name of the new user.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(email: String, password: String, fullName: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        createUserWithRequestBuilder(email: email, password: password, fullName: fullName).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a user
     - POST /users
     - {!can-create-users-only.md!}  Create a new user account via the API.  `POST {{ api_url }}/v1/users` 
     - parameter email: (query) The email address of the new user.  
     - parameter password: (query) The password of the new user.  
     - parameter fullName: (query) The full name of the new user.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func createUserWithRequestBuilder(email: String, password: String, fullName: String) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email.encodeToJSON(),
            "password": password.encodeToJSON(),
            "full_name": fullName.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a user group
     
     - parameter name: (query) The name of the user group.  
     - parameter description: (query) The description of the user group.  
     - parameter members: (query) An array containing the user IDs of the initial members for the new user group.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserGroup(name: String, description: String, members: [Int], apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        createUserGroupWithRequestBuilder(name: name, description: description, members: members).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a user group
     - POST /user_groups/create
     - Create a new [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/create` 
     - parameter name: (query) The name of the user group.  
     - parameter description: (query) The description of the user group.  
     - parameter members: (query) An array containing the user IDs of the initial members for the new user group.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func createUserGroupWithRequestBuilder(name: String, description: String, members: [Int]) -> RequestBuilder<JsonSuccess> {
        let localVariablePath = "/user_groups/create"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "description": description.encodeToJSON(),
            "members": members.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Deactivate own user
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateOwnUser(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        deactivateOwnUserWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deactivate own user
     - DELETE /users/me
     - Deactivates the user's account.  See also the administrative endpoint for [deactivating another user](/api/deactivate-user).  `DELETE {{ api_url }}/v1/users/me`  This endpoint is primarily useful to Zulip clients providing a user settings UI. 
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func deactivateOwnUserWithRequestBuilder() -> RequestBuilder<JsonSuccess> {
        let localVariablePath = "/users/me"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Deactivate a user
     
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deactivateUser(userId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        deactivateUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deactivate a user
     - DELETE /users/{user_id}
     - [Deactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `DELETE {{ api_url }}/v1/users/{user_id}` 
     - parameter userId: (path) The target user&#39;s ID.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func deactivateUserWithRequestBuilder(userId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get attachments
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAttachments(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getAttachmentsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get attachments
     - GET /attachments
     - Fetch metadata on files uploaded by the requesting user.  `GET {{ api_url }}/v1/attachments` 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getAttachmentsWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/attachments"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get own user
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOwnUser(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getOwnUserWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get own user
     - GET /users/me
     - Get basic data about the user/bot that requests this endpoint.  `GET {{ api_url }}/v1/users/me` 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getOwnUserWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users/me"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a user
     
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userId: Int, clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getUserWithRequestBuilder(userId: userId, clientGravatar: clientGravatar, includeCustomProfileFields: includeCustomProfileFields).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a user
     - GET /users/{user_id}
     - Fetch details for a single user in the organization.  `GET {{ api_url }}/v1/users/{user_id}`  You can also fetch details on [all users in the organization](/api/get-users) or [by email](/api/get-user-by-email).  *This endpoint is new in Zulip Server 3.0 (feature level 1).* 
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getUserWithRequestBuilder(userId: Int, clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_gravatar": clientGravatar?.encodeToJSON(),
            "include_custom_profile_fields": includeCustomProfileFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a user by email
     
     - parameter email: (path) The email address of the user whose details you want to fetch.  
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserByEmail(email: String, clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getUserByEmailWithRequestBuilder(email: email, clientGravatar: clientGravatar, includeCustomProfileFields: includeCustomProfileFields).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a user by email
     - GET /users/{email}
     - Fetch details for a single user in the organization given a Zulip display email address.  `GET {{ api_url }}/v1/users/{email}`  Note that this endpoint uses Zulip display emails addresses for organizations that have configured limited [email address visibility](/help/restrict-visibility-of-email-addresses).  You can also fetch details on [all users in the organization](/api/get-users) or [by user ID](/api/get-user).  Fetching by user ID is generally recommended when possible, as users can [change their email address](/help/change-your-email-address).  *This endpoint is new in Zulip Server 4.0 (feature level 39).* 
     - parameter email: (path) The email address of the user whose details you want to fetch.  
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getUserByEmailWithRequestBuilder(email: String, clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/users/{email}"
        let emailPreEscape = "\(APIHelper.mapValueToPathItem(email))"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_gravatar": clientGravatar?.encodeToJSON(),
            "include_custom_profile_fields": includeCustomProfileFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get user groups
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserGroups(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getUserGroupsWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user groups
     - GET /user_groups
     - {!api-members-only.md!}  Fetches all of the user groups in the organization.  `GET {{ api_url }}/v1/user_groups` 
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getUserGroupsWithRequestBuilder() -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/user_groups"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get user presence
     
     - parameter userIdOrEmail: (path) The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserPresence(userIdOrEmail: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getUserPresenceWithRequestBuilder(userIdOrEmail: userIdOrEmail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get user presence
     - GET /users/{user_id_or_email}/presence
     - Get the presence status for a specific user.  This endpoint is most useful for embedding data about a user's presence status in other sites (E.g. an employee directory).  Full Zulip clients like mobile/desktop apps will want to use the main presence endpoint, which returns data for all active users in the organization, instead.  `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`  See [Zulip's developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html) for details on the data model for presence in Zulip. 
     - parameter userIdOrEmail: (path) The user_id or Zulip display email address of the user whose presence you want to fetch.  **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported identifying the user by Zulip display email.  
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getUserPresenceWithRequestBuilder(userIdOrEmail: String) -> RequestBuilder<JsonSuccessBase> {
        var localVariablePath = "/users/{user_id_or_email}/presence"
        let userIdOrEmailPreEscape = "\(APIHelper.mapValueToPathItem(userIdOrEmail))"
        let userIdOrEmailPostEscape = userIdOrEmailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id_or_email}", with: userIdOrEmailPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get all users
     
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(clientGravatar: clientGravatar, includeCustomProfileFields: includeCustomProfileFields).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all users
     - GET /users
     - Retrieve details on all users in the organization.  Optionally includes values of [custom profile field](/help/add-custom-profile-fields).  `GET {{ api_url }}/v1/users`  You can also [fetch details on a single user](/api/get-user). 
     - parameter clientGravatar: (query) Whether the client supports computing gravatars URLs.  If enabled, &#x60;avatar_url&#x60; will be included in the response only if there is a Zulip avatar, and will be &#x60;null&#x60; for users who are using gravatar as their avatar.  This option significantly reduces the compressed size of user data, since gravatar URLs are long, random strings and thus do not compress well. The &#x60;client_gravatar&#x60; field is set to &#x60;true&#x60; if clients can compute their own gravatars.  (optional, default to false)
     - parameter includeCustomProfileFields: (query) Whether the client wants [custom profile field](/help/add-custom-profile-fields) data to be included in the response.  **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these data via the API.  (optional, default to false)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func getUsersWithRequestBuilder(clientGravatar: Bool? = nil, includeCustomProfileFields: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/users"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_gravatar": clientGravatar?.encodeToJSON(),
            "include_custom_profile_fields": includeCustomProfileFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Mute a user
     
     - parameter mutedUserId: (path) The ID of the user to mute/un-mute.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func muteUser(mutedUserId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        muteUserWithRequestBuilder(mutedUserId: mutedUserId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mute a user
     - POST /users/me/muted_users/{muted_user_id}
     - This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users you've muted will be automatically marked as read and hidden.  `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  Muted users should be implemented by clients as follows:  * The server will immediately mark all messages sent by the muted   user as read.  This will automatically clear any existing mobile   push notifications related to the muted user. * The server will mark any new messages sent by the muted user as read   for your account, which prevents all email and mobile push notifications. * Clients should exclude muted users from presence lists or other UI   for viewing or composing 1:1 private messages. 1:1 private messages sent by   muted users should be hidden everywhere in the Zulip UI. * Stream messages and group private messages sent by the muted   user should avoid displaying the content and name/avatar,   but should display that N messages by a muted user were   hidden (so that it is possible to interpret the messages by   other users who are talking with the muted user). * Group private message conversations including the muted user   should display muted users as \"Muted user\", rather than   showing their name, in lists of such conversations, along with using   a blank grey avatar where avatars are displayed. * Administrative/settings UI elements for showing \"All users that exist   on this stream or realm\", e.g. for organization   administration or showing stream subscribers, should display   the user's name as normal.  **Changes**: New in Zulip 4.0 (feature level 48). 
     - parameter mutedUserId: (path) The ID of the user to mute/un-mute.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func muteUserWithRequestBuilder(mutedUserId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/users/me/muted_users/{muted_user_id}"
        let mutedUserIdPreEscape = "\(APIHelper.mapValueToPathItem(mutedUserId))"
        let mutedUserIdPostEscape = mutedUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{muted_user_id}", with: mutedUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Reactivate a user
     
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactivateUser(userId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        reactivateUserWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reactivate a user
     - POST /users/{user_id}/reactivate
     - [Reactivates a user](https://zulip.com/help/deactivate-or-reactivate-a-user) given their user ID.  `POST {{ api_url }}/v1/users/{user_id}/reactivate` 
     - parameter userId: (path) The target user&#39;s ID.  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func reactivateUserWithRequestBuilder(userId: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/users/{user_id}/reactivate"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete a user group
     
     - parameter userGroupId: (path) The ID of the target user group.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeUserGroup(userGroupId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        removeUserGroupWithRequestBuilder(userGroupId: userGroupId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a user group
     - DELETE /user_groups/{user_group_id}
     - Delete a [user group](/help/user-groups).  `DELETE {{ api_url }}/v1/user_groups/{user_group_id}` 
     - parameter userGroupId: (path) The ID of the target user group.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func removeUserGroupWithRequestBuilder(userGroupId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/user_groups/{user_group_id}"
        let userGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(userGroupId))"
        let userGroupIdPostEscape = userGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_group_id}", with: userGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter op
     */
    public enum Op_setTypingStatus: String, CaseIterable {
        case start = "start"
        case stop = "stop"
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_setTypingStatus: String, CaseIterable {
        case _private = "private"
        case stream = "stream"
    }

    /**
     Set \"typing\" status
     
     - parameter op: (query) Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  
     - parameter to: (query) For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  
     - parameter type: (query) Type of the message being composed.  (optional, default to ._private)
     - parameter topic: (query) Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func setTypingStatus(op: Op_setTypingStatus, to: [Int], type: ModelType_setTypingStatus? = nil, topic: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        setTypingStatusWithRequestBuilder(op: op, to: to, type: type, topic: topic).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set \"typing\" status
     - POST /typing
     - Notify other users whether the current user is typing a message.  `POST {{ api_url }}/v1/typing`  Clients implementing Zulip's typing notifications protocol should work as follows:  * Send a request to this endpoint with `op=\"start\"` when a user starts typing a message,   and also every `TYPING_STARTED_WAIT_PERIOD=10` seconds that the user continues to   actively type or otherwise interact with the compose UI (E.g. interacting with the   compose box emoji picker). * Send a request to this endpoint with `op=\"stop\"` when a user pauses using the   compose UI for at least `TYPING_STOPPED_WAIT_PERIOD=5` seconds or cancels   the compose action (if it had previously sent a \"start\" operation for that   compose action). * Start displaying \"Sender is typing\" for a given conversation when the client   receives an `op=\"start\"` event from the [events API](/api/get-events). * Continue displaying \"Sender is typing\" until they receive an `op=\"stop\"` event   from the [events API](/api/get-events) or `TYPING_STARTED_EXPIRY_PERIOD=15`   seconds have passed without a new `op=\"start\"` event for that conversation. * Clients that support displaying stream typing notifications (new in Zulip 4.0)   should indicate they support processing stream typing events via the   `stream_typing_notifications` in the `client_capabilities` parameter to `/register`.  This protocol is designed to allow the server-side typing notifications implementation to be stateless while being resilient; network failures cannot result in a user being incorrectly displayed as perpetually typing.  See [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html) for additional design details on Zulip's typing notifications protocol. 
     - parameter op: (query) Whether the user has started (&#x60;start&#x60;) or stopped (&#x60;stop&#x60;) to type.  
     - parameter to: (query) For &#39;private&#39; type it is the user_ids of the recipients of the message being typed. Send a JSON-encoded list of user_ids. (Use a list even if there is only one recipient.)  For &#39;stream&#39; type it is a single element list containing ID of stream in which the message is being typed.  **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded list of email addresses.  Support for the email address-based format was removed in Zulip 3.0 (feature level 11).  
     - parameter type: (query) Type of the message being composed.  (optional, default to ._private)
     - parameter topic: (query) Topic to which message is being typed. Required for the &#39;stream&#39; type. Ignored in case of &#39;private&#39; type.  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func setTypingStatusWithRequestBuilder(op: Op_setTypingStatus, to: [Int], type: ModelType_setTypingStatus? = nil, topic: String? = nil) -> RequestBuilder<JsonSuccess> {
        let localVariablePath = "/typing"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type?.encodeToJSON(),
            "op": op.encodeToJSON(),
            "to": to.encodeToJSON(),
            "topic": topic?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unmute a user
     
     - parameter mutedUserId: (path) The ID of the user to mute/un-mute.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unmuteUser(mutedUserId: Int, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        unmuteUserWithRequestBuilder(mutedUserId: mutedUserId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unmute a user
     - DELETE /users/me/muted_users/{muted_user_id}
     - This endpoint unmutes a user.  `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`  **Changes**: New in Zulip 4.0 (feature level 48). 
     - parameter mutedUserId: (path) The ID of the user to mute/un-mute.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func unmuteUserWithRequestBuilder(mutedUserId: Int) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/users/me/muted_users/{muted_user_id}"
        let mutedUserIdPreEscape = "\(APIHelper.mapValueToPathItem(mutedUserId))"
        let mutedUserIdPostEscape = mutedUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{muted_user_id}", with: mutedUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter colorScheme
     */
    public enum ColorScheme_updateDisplaySettings: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     * enum for parameter demoteInactiveStreams
     */
    public enum DemoteInactiveStreams_updateDisplaySettings: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Update display settings
     
     - parameter twentyFourHourTime: (query) Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
     - parameter denseMode: (query) This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
     - parameter starredMessageCounts: (query) Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
     - parameter fluidLayoutWidth: (query) Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
     - parameter highContrastMode: (query) This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
     - parameter colorScheme: (query) Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
     - parameter translateEmoticons: (query) Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
     - parameter defaultLanguage: (query) What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     - parameter defaultView: (query) The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter leftSideUserlist: (query) Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
     - parameter emojiset: (query) The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter demoteInactiveStreams: (query) Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
     - parameter timezone: (query) The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateDisplaySettings(twentyFourHourTime: Bool? = nil, denseMode: Bool? = nil, starredMessageCounts: Bool? = nil, fluidLayoutWidth: Bool? = nil, highContrastMode: Bool? = nil, colorScheme: ColorScheme_updateDisplaySettings? = nil, translateEmoticons: Bool? = nil, defaultLanguage: String? = nil, defaultView: String? = nil, leftSideUserlist: Bool? = nil, emojiset: String? = nil, demoteInactiveStreams: DemoteInactiveStreams_updateDisplaySettings? = nil, timezone: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        updateDisplaySettingsWithRequestBuilder(twentyFourHourTime: twentyFourHourTime, denseMode: denseMode, starredMessageCounts: starredMessageCounts, fluidLayoutWidth: fluidLayoutWidth, highContrastMode: highContrastMode, colorScheme: colorScheme, translateEmoticons: translateEmoticons, defaultLanguage: defaultLanguage, defaultView: defaultView, leftSideUserlist: leftSideUserlist, emojiset: emojiset, demoteInactiveStreams: demoteInactiveStreams, timezone: timezone).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update display settings
     - PATCH /settings/display
     - This endpoint is used to edit the current user's user interface settings.  `PATCH {{ api_url }}/v1/settings/display` 
     - parameter twentyFourHourTime: (query) Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).  (optional)
     - parameter denseMode: (query) This setting has no effect at present.  It is reserved for use in controlling the default font size in Zulip.  (optional)
     - parameter starredMessageCounts: (query) Whether clients should display the [number of starred messages](/help/star-a-message#display-the-number-of-starred-messages).  (optional)
     - parameter fluidLayoutWidth: (query) Whether to use the [maximum available screen width](/help/enable-full-width-display) for the web app&#39;s center panel (message feed, recent topics) on wide screens.  (optional)
     - parameter highContrastMode: (query) This setting is reserved for use to control variations in Zulip&#39;s design to help visually impaired users.  (optional)
     - parameter colorScheme: (query) Controls which [color theme](/help/night-mode) to use.  * 1 - Automatic * 2 - Night mode * 3 - Day mode  Automatic detection is implementing using the standard &#x60;prefers-color-scheme&#x60; media query.  (optional)
     - parameter translateEmoticons: (query) Whether to [translate emoticons to emoji](/help/enable-emoticon-translations) in messages the user sends.  (optional)
     - parameter defaultLanguage: (query) What [default language](/help/change-your-language) to use for the account.  This controls both the Zulip UI as well as email notifications sent to the user.  The value needs to be a standard language code that the Zulip server has translation data for; for example, &#x60;\&quot;en\&quot;&#x60; for English or &#x60;\&quot;de\&quot;&#x60; for German.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     - parameter defaultView: (query) The [default view](/help/change-default-view) used when opening a new Zulip web app window or hitting the &#x60;Esc&#x60; keyboard shortcut repeatedly.  * \&quot;recent_topics\&quot; - Recent topics view * \&quot;all_messages\&quot; - All messages view  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter leftSideUserlist: (query) Whether the users list on left sidebar in narrow windows.  This feature is not heavily used and is likely to be reworked.  (optional)
     - parameter emojiset: (query) The user&#39;s configured [emoji set](/help/emoji-and-emoticons#use-emoticons), used to display emoji to the user everything they appear in the UI.  * \&quot;google\&quot; - Google modern * \&quot;google-blob\&quot; - Google classic * \&quot;twitter\&quot; - Twitter * \&quot;text\&quot; - Plain text  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - parameter demoteInactiveStreams: (query) Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.  * 1 - Automatic * 2 - Always * 3 - Never  (optional)
     - parameter timezone: (query) The user&#39;s [configured timezone](/help/change-your-timezone).  Timezone values supported by the server are served at [/static/generated/timezones.json](/static/generated/timezones.json).  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 64).  (optional)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func updateDisplaySettingsWithRequestBuilder(twentyFourHourTime: Bool? = nil, denseMode: Bool? = nil, starredMessageCounts: Bool? = nil, fluidLayoutWidth: Bool? = nil, highContrastMode: Bool? = nil, colorScheme: ColorScheme_updateDisplaySettings? = nil, translateEmoticons: Bool? = nil, defaultLanguage: String? = nil, defaultView: String? = nil, leftSideUserlist: Bool? = nil, emojiset: String? = nil, demoteInactiveStreams: DemoteInactiveStreams_updateDisplaySettings? = nil, timezone: String? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/settings/display"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "twenty_four_hour_time": twentyFourHourTime?.encodeToJSON(),
            "dense_mode": denseMode?.encodeToJSON(),
            "starred_message_counts": starredMessageCounts?.encodeToJSON(),
            "fluid_layout_width": fluidLayoutWidth?.encodeToJSON(),
            "high_contrast_mode": highContrastMode?.encodeToJSON(),
            "color_scheme": colorScheme?.encodeToJSON(),
            "translate_emoticons": translateEmoticons?.encodeToJSON(),
            "default_language": defaultLanguage?.encodeToJSON(),
            "default_view": defaultView?.encodeToJSON(),
            "left_side_userlist": leftSideUserlist?.encodeToJSON(),
            "emojiset": emojiset?.encodeToJSON(),
            "demote_inactive_streams": demoteInactiveStreams?.encodeToJSON(),
            "timezone": timezone?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter desktopIconCountDisplay
     */
    public enum DesktopIconCountDisplay_updateNotificationSettings: Int, CaseIterable {
        case _1 = 1
        case _2 = 2
        case _3 = 3
    }

    /**
     Update notification settings
     
     - parameter enableStreamDesktopNotifications: (query) Enable visual desktop notifications for stream messages.  (optional)
     - parameter enableStreamEmailNotifications: (query) Enable email notifications for stream messages.  (optional)
     - parameter enableStreamPushNotifications: (query) Enable mobile notifications for stream messages.  (optional)
     - parameter enableStreamAudibleNotifications: (query) Enable audible desktop notifications for stream messages.  (optional)
     - parameter notificationSound: (query) Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     - parameter enableDesktopNotifications: (query) Enable visual desktop notifications for private messages and @-mentions.  (optional)
     - parameter enableSounds: (query) Enable audible desktop notifications for private messages and @-mentions.  (optional)
     - parameter enableOfflineEmailNotifications: (query) Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
     - parameter enableOfflinePushNotifications: (query) Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
     - parameter enableOnlinePushNotifications: (query) Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
     - parameter enableDigestEmails: (query) Enable digest emails when the user is away.  (optional)
     - parameter enableMarketingEmails: (query) Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
     - parameter enableLoginEmails: (query) Enable email notifications for new logins to account.  (optional)
     - parameter messageContentInEmailNotifications: (query) Include the message&#39;s content in email notifications for new messages.  (optional)
     - parameter pmContentInDesktopNotifications: (query) Include content of private messages in desktop notifications.  (optional)
     - parameter wildcardMentionsNotify: (query) Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
     - parameter desktopIconCountDisplay: (query) Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
     - parameter realmNameInNotifications: (query) Include organization name in subject of message notification emails.  (optional)
     - parameter presenceEnabled: (query) Display the presence status to other users when online.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateNotificationSettings(enableStreamDesktopNotifications: Bool? = nil, enableStreamEmailNotifications: Bool? = nil, enableStreamPushNotifications: Bool? = nil, enableStreamAudibleNotifications: Bool? = nil, notificationSound: String? = nil, enableDesktopNotifications: Bool? = nil, enableSounds: Bool? = nil, enableOfflineEmailNotifications: Bool? = nil, enableOfflinePushNotifications: Bool? = nil, enableOnlinePushNotifications: Bool? = nil, enableDigestEmails: Bool? = nil, enableMarketingEmails: Bool? = nil, enableLoginEmails: Bool? = nil, messageContentInEmailNotifications: Bool? = nil, pmContentInDesktopNotifications: Bool? = nil, wildcardMentionsNotify: Bool? = nil, desktopIconCountDisplay: DesktopIconCountDisplay_updateNotificationSettings? = nil, realmNameInNotifications: Bool? = nil, presenceEnabled: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccessBase?, _ error: Error?) -> Void)) {
        updateNotificationSettingsWithRequestBuilder(enableStreamDesktopNotifications: enableStreamDesktopNotifications, enableStreamEmailNotifications: enableStreamEmailNotifications, enableStreamPushNotifications: enableStreamPushNotifications, enableStreamAudibleNotifications: enableStreamAudibleNotifications, notificationSound: notificationSound, enableDesktopNotifications: enableDesktopNotifications, enableSounds: enableSounds, enableOfflineEmailNotifications: enableOfflineEmailNotifications, enableOfflinePushNotifications: enableOfflinePushNotifications, enableOnlinePushNotifications: enableOnlinePushNotifications, enableDigestEmails: enableDigestEmails, enableMarketingEmails: enableMarketingEmails, enableLoginEmails: enableLoginEmails, messageContentInEmailNotifications: messageContentInEmailNotifications, pmContentInDesktopNotifications: pmContentInDesktopNotifications, wildcardMentionsNotify: wildcardMentionsNotify, desktopIconCountDisplay: desktopIconCountDisplay, realmNameInNotifications: realmNameInNotifications, presenceEnabled: presenceEnabled).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update notification settings
     - PATCH /settings/notifications
     - This endpoint is used to edit the user's global notification settings. See [this endpoint](/api/update-subscription-settings) for per-stream notification settings.  `PATCH {{ api_url }}/v1/settings/notifications` 
     - parameter enableStreamDesktopNotifications: (query) Enable visual desktop notifications for stream messages.  (optional)
     - parameter enableStreamEmailNotifications: (query) Enable email notifications for stream messages.  (optional)
     - parameter enableStreamPushNotifications: (query) Enable mobile notifications for stream messages.  (optional)
     - parameter enableStreamAudibleNotifications: (query) Enable audible desktop notifications for stream messages.  (optional)
     - parameter notificationSound: (query) Notification sound name.  **Changes**: Removed unnecessary JSON-encoding of parameter in Zulip 4.0 (feature level 63).  (optional)
     - parameter enableDesktopNotifications: (query) Enable visual desktop notifications for private messages and @-mentions.  (optional)
     - parameter enableSounds: (query) Enable audible desktop notifications for private messages and @-mentions.  (optional)
     - parameter enableOfflineEmailNotifications: (query) Enable email notifications for private messages and @-mentions received when the user is offline.  (optional)
     - parameter enableOfflinePushNotifications: (query) Enable mobile notification for private messages and @-mentions received when the user is offline.  (optional)
     - parameter enableOnlinePushNotifications: (query) Enable mobile notification for private messages and @-mentions received when the user is online.  (optional)
     - parameter enableDigestEmails: (query) Enable digest emails when the user is away.  (optional)
     - parameter enableMarketingEmails: (query) Enable marketing emails. Has no function outside Zulip Cloud.  (optional)
     - parameter enableLoginEmails: (query) Enable email notifications for new logins to account.  (optional)
     - parameter messageContentInEmailNotifications: (query) Include the message&#39;s content in email notifications for new messages.  (optional)
     - parameter pmContentInDesktopNotifications: (query) Include content of private messages in desktop notifications.  (optional)
     - parameter wildcardMentionsNotify: (query) Whether wildcard mentions (E.g. @**all**) should send notifications like a personal mention.  (optional)
     - parameter desktopIconCountDisplay: (query) Unread count summary (appears in desktop sidebar and browser tab)  * 1 - All unreads * 2 - Private messages and mentions * 3 - None  (optional)
     - parameter realmNameInNotifications: (query) Include organization name in subject of message notification emails.  (optional)
     - parameter presenceEnabled: (query) Display the presence status to other users when online.  (optional)
     - returns: RequestBuilder<JsonSuccessBase> 
     */
    open class func updateNotificationSettingsWithRequestBuilder(enableStreamDesktopNotifications: Bool? = nil, enableStreamEmailNotifications: Bool? = nil, enableStreamPushNotifications: Bool? = nil, enableStreamAudibleNotifications: Bool? = nil, notificationSound: String? = nil, enableDesktopNotifications: Bool? = nil, enableSounds: Bool? = nil, enableOfflineEmailNotifications: Bool? = nil, enableOfflinePushNotifications: Bool? = nil, enableOnlinePushNotifications: Bool? = nil, enableDigestEmails: Bool? = nil, enableMarketingEmails: Bool? = nil, enableLoginEmails: Bool? = nil, messageContentInEmailNotifications: Bool? = nil, pmContentInDesktopNotifications: Bool? = nil, wildcardMentionsNotify: Bool? = nil, desktopIconCountDisplay: DesktopIconCountDisplay_updateNotificationSettings? = nil, realmNameInNotifications: Bool? = nil, presenceEnabled: Bool? = nil) -> RequestBuilder<JsonSuccessBase> {
        let localVariablePath = "/settings/notifications"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "enable_stream_desktop_notifications": enableStreamDesktopNotifications?.encodeToJSON(),
            "enable_stream_email_notifications": enableStreamEmailNotifications?.encodeToJSON(),
            "enable_stream_push_notifications": enableStreamPushNotifications?.encodeToJSON(),
            "enable_stream_audible_notifications": enableStreamAudibleNotifications?.encodeToJSON(),
            "notification_sound": notificationSound?.encodeToJSON(),
            "enable_desktop_notifications": enableDesktopNotifications?.encodeToJSON(),
            "enable_sounds": enableSounds?.encodeToJSON(),
            "enable_offline_email_notifications": enableOfflineEmailNotifications?.encodeToJSON(),
            "enable_offline_push_notifications": enableOfflinePushNotifications?.encodeToJSON(),
            "enable_online_push_notifications": enableOnlinePushNotifications?.encodeToJSON(),
            "enable_digest_emails": enableDigestEmails?.encodeToJSON(),
            "enable_marketing_emails": enableMarketingEmails?.encodeToJSON(),
            "enable_login_emails": enableLoginEmails?.encodeToJSON(),
            "message_content_in_email_notifications": messageContentInEmailNotifications?.encodeToJSON(),
            "pm_content_in_desktop_notifications": pmContentInDesktopNotifications?.encodeToJSON(),
            "wildcard_mentions_notify": wildcardMentionsNotify?.encodeToJSON(),
            "desktop_icon_count_display": desktopIconCountDisplay?.encodeToJSON(),
            "realm_name_in_notifications": realmNameInNotifications?.encodeToJSON(),
            "presence_enabled": presenceEnabled?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccessBase>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a user
     
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter fullName: (query) The user&#39;s full name.  (optional)
     - parameter role: (query) New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
     - parameter profileData: (query) A dictionary containing the to be updated custom profile field data for the user.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(userId: Int, fullName: String? = nil, role: Int? = nil, profileData: [AnyCodable]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(userId: userId, fullName: fullName, role: role, profileData: profileData).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a user
     - PATCH /users/{user_id}
     - Administrative endpoint to update the details of another user in the organization.  `PATCH {{ api_url }}/v1/users/{user_id}`  Supports everything an administrator can do to edit details of another user's account, including editing full name, [role](/help/roles-and-permissions), and [custom profile fields](/help/add-custom-profile-fields). 
     - parameter userId: (path) The target user&#39;s ID.  
     - parameter fullName: (query) The user&#39;s full name.  (optional)
     - parameter role: (query) New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:  * Organization owner: 100 * Organization administrator: 200 * Organization moderator: 300 * Member: 400 * Guest: 600  Only organization owners can add or remove the owner role.  The owner role cannot be removed from the only organization owner.  **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous pair of &#x60;is_admin&#x60; and &#x60;is_guest&#x60; boolean parameters. Organization moderator role added in Zulip 4.0 (feature level 60).  (optional)
     - parameter profileData: (query) A dictionary containing the to be updated custom profile field data for the user.  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func updateUserWithRequestBuilder(userId: Int, fullName: String? = nil, role: Int? = nil, profileData: [AnyCodable]? = nil) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/users/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "full_name": fullName?.encodeToJSON(),
            "role": role?.encodeToJSON(),
            "profile_data": profileData?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a user group
     
     - parameter userGroupId: (path) The ID of the target user group.  
     - parameter name: (query) The new name of the group.  
     - parameter description: (query) The new description of the group.  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserGroup(userGroupId: Int, name: String, description: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        updateUserGroupWithRequestBuilder(userGroupId: userGroupId, name: name, description: description).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a user group
     - PATCH /user_groups/{user_group_id}
     - Update the name or description of a [user group](/help/user-groups).  `PATCH {{ api_url }}/v1/user_groups/{user_group_id}` 
     - parameter userGroupId: (path) The ID of the target user group.  
     - parameter name: (query) The new name of the group.  
     - parameter description: (query) The new description of the group.  
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func updateUserGroupWithRequestBuilder(userGroupId: Int, name: String, description: String) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/user_groups/{user_group_id}"
        let userGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(userGroupId))"
        let userGroupIdPostEscape = userGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_group_id}", with: userGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "description": description.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update user group members
     
     - parameter userGroupId: (path) The ID of the target user group.  
     - parameter delete: (query) The list of user ids to be removed from the user group.  (optional)
     - parameter add: (query) The list of user ids to be added to the user group.  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUserGroupMembers(userGroupId: Int, delete: [Int]? = nil, add: [Int]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: JsonSuccess?, _ error: Error?) -> Void)) {
        updateUserGroupMembersWithRequestBuilder(userGroupId: userGroupId, delete: delete, add: add).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update user group members
     - POST /user_groups/{user_group_id}/members
     - Update the members of a [user group](/help/user-groups).  `POST {{ api_url }}/v1/user_groups/{user_group_id}/members` 
     - parameter userGroupId: (path) The ID of the target user group.  
     - parameter delete: (query) The list of user ids to be removed from the user group.  (optional)
     - parameter add: (query) The list of user ids to be added to the user group.  (optional)
     - returns: RequestBuilder<JsonSuccess> 
     */
    open class func updateUserGroupMembersWithRequestBuilder(userGroupId: Int, delete: [Int]? = nil, add: [Int]? = nil) -> RequestBuilder<JsonSuccess> {
        var localVariablePath = "/user_groups/{user_group_id}/members"
        let userGroupIdPreEscape = "\(APIHelper.mapValueToPathItem(userGroupId))"
        let userGroupIdPostEscape = userGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_group_id}", with: userGroupIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "delete": delete?.encodeToJSON(),
            "add": add?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JsonSuccess>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
