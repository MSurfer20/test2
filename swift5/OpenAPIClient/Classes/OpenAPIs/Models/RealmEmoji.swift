//
// RealmEmoji.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** &#x60;{emoji_id}&#x60;: Object containing details about the emoji with  the specified ID. It has the following properties:  */
public struct RealmEmoji: Codable, Hashable {

    /** The ID for this emoji, same as the object's key.  */
    public var id: String?
    /** The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (`:name  :`).  */
    public var name: String?
    /** The path relative to the organization's URL where the emoji's image can be found.  */
    public var sourceUrl: String?
    /** Whether the emoji has been deactivated or not.  */
    public var deactivated: Bool?
    /** The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and `author` object with an `id` field.  */
    public var authorId: Int?

    public init(id: String? = nil, name: String? = nil, sourceUrl: String? = nil, deactivated: Bool? = nil, authorId: Int? = nil) {
        self.id = id
        self.name = name
        self.sourceUrl = sourceUrl
        self.deactivated = deactivated
        self.authorId = authorId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case sourceUrl = "source_url"
        case deactivated
        case authorId = "author_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(sourceUrl, forKey: .sourceUrl)
        try container.encodeIfPresent(deactivated, forKey: .deactivated)
        try container.encodeIfPresent(authorId, forKey: .authorId)
    }
}

