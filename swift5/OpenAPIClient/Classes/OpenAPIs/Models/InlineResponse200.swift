//
// InlineResponse200.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server  */
public struct InlineResponse200: Codable, Hashable {

    /** Email of the bot user.  */
    public var botEmail: String?
    /** The full name of the bot user.  */
    public var botFullName: String?
    /** The message content, in raw Markdown format (not rendered to HTML).  */
    public var data: String?
    /** What aspect of the message triggered the outgoing webhook notification. Possible values include `private_message` and `mention`.  */
    public var trigger: String?
    /** A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the `zuliprc` file downloaded when creating the bot.  */
    public var token: String?
    /** A dict containing details on the message that triggered the outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).  */
    public var message: MessagesBase?

    public init(botEmail: String? = nil, botFullName: String? = nil, data: String? = nil, trigger: String? = nil, token: String? = nil, message: MessagesBase? = nil) {
        self.botEmail = botEmail
        self.botFullName = botFullName
        self.data = data
        self.trigger = trigger
        self.token = token
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case botEmail = "bot_email"
        case botFullName = "bot_full_name"
        case data
        case trigger
        case token
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(botEmail, forKey: .botEmail)
        try container.encodeIfPresent(botFullName, forKey: .botFullName)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(trigger, forKey: .trigger)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(message, forKey: .message)
    }
}

