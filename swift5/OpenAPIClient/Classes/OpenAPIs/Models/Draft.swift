//
// Draft.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A dictionary for representing a message draft.  */
public struct Draft: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case empty = ""
        case stream = "stream"
        case _private = "private"
    }
    /** The unique ID of the draft. It will only used whenever the drafts are fetched. This field should not be specified when the draft is being created or edited.  */
    public var id: Int?
    /** The type of the draft. Either unaddressed (empty string), \"stream\", or \"private\" (for PMs and private group messages).  */
    public var type: ModelType
    /** An array of the tentative target audience IDs. For \"stream\" messages, this should contain exactly 1 ID, the ID of the target stream. For private messages, this should be an array of target user IDs. For unaddressed drafts, this is ignored, and clients should send an empty array.  */
    public var to: [Int]
    /** For stream message drafts, the tentative topic name. For private or unaddressed messages, this will be ignored and should ideally be the empty string. Should not contain null bytes.  */
    public var topic: String
    /** The body of the draft. Should not contain null bytes.  */
    public var content: String
    /** A Unix timestamp (seconds only) representing when the draft was last edited. When creating a draft, this key need not be present and it will be filled in automatically by the server.  */
    public var timestamp: Double?

    public init(id: Int? = nil, type: ModelType, to: [Int], topic: String, content: String, timestamp: Double? = nil) {
        self.id = id
        self.type = type
        self.to = to
        self.topic = topic
        self.content = content
        self.timestamp = timestamp
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case to
        case topic
        case content
        case timestamp
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try container.encode(to, forKey: .to)
        try container.encode(topic, forKey: .topic)
        try container.encode(content, forKey: .content)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
    }
}

