//
// MessagesBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object containing details of the message.  */
public struct MessagesBase: Codable, Hashable {

    /** The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user.  */
    public var avatarUrl: String?
    /** A Zulip \"client\" string, describing what Zulip client sent the message.  */
    public var client: String?
    /** The content/body of the message.  */
    public var content: String?
    /** The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  */
    public var contentType: String?
    /** Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */
    public var displayRecipient: MessagesBaseDisplayRecipientOneOf?
    /** The unique message ID.  Messages should always be displayed sorted by ID.  */
    public var id: Int?
    /** Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */
    public var isMeMessage: Bool?
    /** Data on any reactions to the message.  */
    public var reactions: [EmojiReaction]?
    /** A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */
    public var recipientId: Int?
    /** The Zulip display email address of the message's sender.  */
    public var senderEmail: String?
    /** The full name of the message's sender.  */
    public var senderFullName: String?
    /** The user ID of the message's sender.  */
    public var senderId: Int?
    /** A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.  */
    public var senderRealmStr: String?
    /** Only present for stream messages; the ID of the stream.  */
    public var streamId: Int?
    /** The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  */
    public var subject: String?
    /** Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.  */
    public var topicLinks: [MessagesBaseTopicLinks]?
    /** Data used for certain experimental Zulip integrations.  */
    public var submessages: [String]?
    /** The UNIX timestamp for when the message was sent, in UTC seconds.  */
    public var timestamp: Int?
    /** The type of the message: `stream` or `private`.  */
    public var type: String?

    public init(avatarUrl: String? = nil, client: String? = nil, content: String? = nil, contentType: String? = nil, displayRecipient: MessagesBaseDisplayRecipientOneOf? = nil, id: Int? = nil, isMeMessage: Bool? = nil, reactions: [EmojiReaction]? = nil, recipientId: Int? = nil, senderEmail: String? = nil, senderFullName: String? = nil, senderId: Int? = nil, senderRealmStr: String? = nil, streamId: Int? = nil, subject: String? = nil, topicLinks: [MessagesBaseTopicLinks]? = nil, submessages: [String]? = nil, timestamp: Int? = nil, type: String? = nil) {
        self.avatarUrl = avatarUrl
        self.client = client
        self.content = content
        self.contentType = contentType
        self.displayRecipient = displayRecipient
        self.id = id
        self.isMeMessage = isMeMessage
        self.reactions = reactions
        self.recipientId = recipientId
        self.senderEmail = senderEmail
        self.senderFullName = senderFullName
        self.senderId = senderId
        self.senderRealmStr = senderRealmStr
        self.streamId = streamId
        self.subject = subject
        self.topicLinks = topicLinks
        self.submessages = submessages
        self.timestamp = timestamp
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case avatarUrl = "avatar_url"
        case client
        case content
        case contentType = "content_type"
        case displayRecipient = "display_recipient"
        case id
        case isMeMessage = "is_me_message"
        case reactions
        case recipientId = "recipient_id"
        case senderEmail = "sender_email"
        case senderFullName = "sender_full_name"
        case senderId = "sender_id"
        case senderRealmStr = "sender_realm_str"
        case streamId = "stream_id"
        case subject
        case topicLinks = "topic_links"
        case submessages
        case timestamp
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(client, forKey: .client)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(displayRecipient, forKey: .displayRecipient)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isMeMessage, forKey: .isMeMessage)
        try container.encodeIfPresent(reactions, forKey: .reactions)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(senderEmail, forKey: .senderEmail)
        try container.encodeIfPresent(senderFullName, forKey: .senderFullName)
        try container.encodeIfPresent(senderId, forKey: .senderId)
        try container.encodeIfPresent(senderRealmStr, forKey: .senderRealmStr)
        try container.encodeIfPresent(streamId, forKey: .streamId)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(topicLinks, forKey: .topicLinks)
        try container.encodeIfPresent(submessages, forKey: .submessages)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

