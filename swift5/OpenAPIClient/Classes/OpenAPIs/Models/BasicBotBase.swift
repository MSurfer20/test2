//
// BasicBotBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BasicBotBase: Codable, Hashable {

    /** The user id of the bot.  */
    public var userId: Int?
    /** The full name of the bot.  */
    public var fullName: String?
    /** The API key of the bot which it uses to make API requests.  */
    public var apiKey: String?
    /** The default sending stream of the bot. Null if the bot doesn't have a default sending stream.  */
    public var defaultSendingStream: String?
    /** The default stream for which the bot receives events/register data. Null if the bot doesn't have such a default stream.  */
    public var defaultEventsRegisterStream: String?
    /** Whether the bot can send messages to all streams by default.  */
    public var defaultAllPublicStreams: Bool?
    /** The URL of the bot's avatar.  */
    public var avatarUrl: String?
    /** The user id of the bot's owner.  Null if the bot has no owner.  */
    public var ownerId: Int?
    /** The \"Services\" array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change.  */
    public var services: [BasicBotBaseServicesOneOf]?

    public init(userId: Int? = nil, fullName: String? = nil, apiKey: String? = nil, defaultSendingStream: String? = nil, defaultEventsRegisterStream: String? = nil, defaultAllPublicStreams: Bool? = nil, avatarUrl: String? = nil, ownerId: Int? = nil, services: [BasicBotBaseServicesOneOf]? = nil) {
        self.userId = userId
        self.fullName = fullName
        self.apiKey = apiKey
        self.defaultSendingStream = defaultSendingStream
        self.defaultEventsRegisterStream = defaultEventsRegisterStream
        self.defaultAllPublicStreams = defaultAllPublicStreams
        self.avatarUrl = avatarUrl
        self.ownerId = ownerId
        self.services = services
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case fullName = "full_name"
        case apiKey = "api_key"
        case defaultSendingStream = "default_sending_stream"
        case defaultEventsRegisterStream = "default_events_register_stream"
        case defaultAllPublicStreams = "default_all_public_streams"
        case avatarUrl = "avatar_url"
        case ownerId = "owner_id"
        case services
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(defaultSendingStream, forKey: .defaultSendingStream)
        try container.encodeIfPresent(defaultEventsRegisterStream, forKey: .defaultEventsRegisterStream)
        try container.encodeIfPresent(defaultAllPublicStreams, forKey: .defaultAllPublicStreams)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(services, forKey: .services)
    }
}

