//
// UserAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserAllOf: Codable, Hashable {

    public var email: AnyCodable?
    public var isBot: AnyCodable?
    public var avatarUrl: AnyCodable?
    public var avatarVersion: AnyCodable?
    public var fullName: AnyCodable?
    public var isAdmin: AnyCodable?
    public var isOwner: AnyCodable?
    public var isBillingAdmin: AnyCodable?
    public var role: AnyCodable?
    public var botType: AnyCodable?
    public var userId: AnyCodable?
    public var botOwnerId: AnyCodable?
    public var isActive: AnyCodable?
    public var isGuest: AnyCodable?
    public var timezone: AnyCodable?
    public var dateJoined: AnyCodable?
    public var deliveryEmail: AnyCodable?
    public var profileData: AnyCodable?

    public init(email: AnyCodable? = nil, isBot: AnyCodable? = nil, avatarUrl: AnyCodable? = nil, avatarVersion: AnyCodable? = nil, fullName: AnyCodable? = nil, isAdmin: AnyCodable? = nil, isOwner: AnyCodable? = nil, isBillingAdmin: AnyCodable? = nil, role: AnyCodable? = nil, botType: AnyCodable? = nil, userId: AnyCodable? = nil, botOwnerId: AnyCodable? = nil, isActive: AnyCodable? = nil, isGuest: AnyCodable? = nil, timezone: AnyCodable? = nil, dateJoined: AnyCodable? = nil, deliveryEmail: AnyCodable? = nil, profileData: AnyCodable? = nil) {
        self.email = email
        self.isBot = isBot
        self.avatarUrl = avatarUrl
        self.avatarVersion = avatarVersion
        self.fullName = fullName
        self.isAdmin = isAdmin
        self.isOwner = isOwner
        self.isBillingAdmin = isBillingAdmin
        self.role = role
        self.botType = botType
        self.userId = userId
        self.botOwnerId = botOwnerId
        self.isActive = isActive
        self.isGuest = isGuest
        self.timezone = timezone
        self.dateJoined = dateJoined
        self.deliveryEmail = deliveryEmail
        self.profileData = profileData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case isBot = "is_bot"
        case avatarUrl = "avatar_url"
        case avatarVersion = "avatar_version"
        case fullName = "full_name"
        case isAdmin = "is_admin"
        case isOwner = "is_owner"
        case isBillingAdmin = "is_billing_admin"
        case role
        case botType = "bot_type"
        case userId = "user_id"
        case botOwnerId = "bot_owner_id"
        case isActive = "is_active"
        case isGuest = "is_guest"
        case timezone
        case dateJoined = "date_joined"
        case deliveryEmail = "delivery_email"
        case profileData = "profile_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(isBot, forKey: .isBot)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(avatarVersion, forKey: .avatarVersion)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(isOwner, forKey: .isOwner)
        try container.encodeIfPresent(isBillingAdmin, forKey: .isBillingAdmin)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(botType, forKey: .botType)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(botOwnerId, forKey: .botOwnerId)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(isGuest, forKey: .isGuest)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(dateJoined, forKey: .dateJoined)
        try container.encodeIfPresent(deliveryEmail, forKey: .deliveryEmail)
        try container.encodeIfPresent(profileData, forKey: .profileData)
    }
}

