//
// CustomProfileField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Dictionary containing the details of a custom profile field configured for this organization.  */
public struct CustomProfileField: Codable, Hashable {

    /** The ID of the custom profile field.  This will be referenced in custom the profile fields section of user objects.  */
    public var id: Int?
    /** An integer indicating the type of the custom profile field, which determines how it is configured and displayed to users.  See the [Add custom profile fields](/help/add-custom-profile-fields) article for details on what each type means.  * **1**: Short text * **2**: Long text * **3**: List of options * **4**: Date picker * **5**: Link * **6**: Person picker * **7**: External account  */
    public var type: Int?
    /** Custom profile fields are displayed in both settings UI and UI showing users' profiles in increasing `order`.  */
    public var order: Int?
    /** The name of the custom profile field.  */
    public var name: String?
    /** The help text to be displayed for the custom profile field in user-facing settings UI for configuring custom profile fields.  */
    public var hint: String?
    /** Field types 3 (List of options) and 7 (External account) support storing additional configuration for the field type in the `field_data` attribute.  For field type 3 (List of options), this attribute is a JSON dictionary defining the choices and the order they will be displayed in the dropdown UI for individual users to select an option.  The interface for field type 7 is not yet stabilized.  */
    public var fieldData: String?

    public init(id: Int? = nil, type: Int? = nil, order: Int? = nil, name: String? = nil, hint: String? = nil, fieldData: String? = nil) {
        self.id = id
        self.type = type
        self.order = order
        self.name = name
        self.hint = hint
        self.fieldData = fieldData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case order
        case name
        case hint
        case fieldData = "field_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(hint, forKey: .hint)
        try container.encodeIfPresent(fieldData, forKey: .fieldData)
    }
}

