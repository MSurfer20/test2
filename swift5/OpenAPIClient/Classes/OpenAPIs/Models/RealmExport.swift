//
// RealmExport.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Object containing details about a realm export.  */
public struct RealmExport: Codable, Hashable {

    /** The id of the export.  */
    public var id: Int?
    /** The id of the user who did the export.  */
    public var actingUserId: Int?
    /** The UNIX timestamp of when the export was made.  */
    public var exportTime: Double?
    /** The timestamp of when the export was deleted. Null if it wasn't.  */
    public var deletedTimestamp: Double?
    /** The timestamp of when the export failed. Null if it didn't.  */
    public var failedTimestamp: Double?
    /** The URL of the export. `null` if there's no URL.  */
    public var exportUrl: String?
    /** Whether the export is pending or not.  */
    public var pending: Bool?

    public init(id: Int? = nil, actingUserId: Int? = nil, exportTime: Double? = nil, deletedTimestamp: Double? = nil, failedTimestamp: Double? = nil, exportUrl: String? = nil, pending: Bool? = nil) {
        self.id = id
        self.actingUserId = actingUserId
        self.exportTime = exportTime
        self.deletedTimestamp = deletedTimestamp
        self.failedTimestamp = failedTimestamp
        self.exportUrl = exportUrl
        self.pending = pending
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case actingUserId = "acting_user_id"
        case exportTime = "export_time"
        case deletedTimestamp = "deleted_timestamp"
        case failedTimestamp = "failed_timestamp"
        case exportUrl = "export_url"
        case pending
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(actingUserId, forKey: .actingUserId)
        try container.encodeIfPresent(exportTime, forKey: .exportTime)
        try container.encodeIfPresent(deletedTimestamp, forKey: .deletedTimestamp)
        try container.encodeIfPresent(failedTimestamp, forKey: .failedTimestamp)
        try container.encodeIfPresent(exportUrl, forKey: .exportUrl)
        try container.encodeIfPresent(pending, forKey: .pending)
    }
}

