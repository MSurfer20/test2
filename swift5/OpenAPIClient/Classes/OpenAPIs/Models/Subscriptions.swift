//
// Subscriptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Subscriptions: Codable, Hashable {

    public enum Role: Int, Codable, CaseIterable {
        case _20 = 20
        case _50 = 50
    }
    /** The unique ID of a stream.  */
    public var streamId: Int?
    /** The name of a stream.  */
    public var name: String?
    /** The short description of a stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description.  */
    public var description: String?
    /** A short description of a stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message.  */
    public var renderedDescription: String?
    /** The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30).  */
    public var dateCreated: Int?
    /** Specifies whether the stream is private or not. Only people who have been invited can access a private stream.  */
    public var inviteOnly: Bool?
    /** A list of user IDs of users who are also subscribed to a given stream. Included only if `include_subscribers` is `true`.  */
    public var subscribers: [Int]?
    /** A boolean specifying whether desktop notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_desktop_notifications, for this stream.  */
    public var desktopNotifications: Bool?
    /** A boolean specifying whether email notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_email_notifications, for this stream.  */
    public var emailNotifications: Bool?
    /** A boolean specifying whether wildcard mentions trigger notifications as though they were personal mentions in this stream.  A null value means the value of this setting should be inherited from the user-level default setting, wildcard_mentions_notify, for this stream.  */
    public var wildcardMentionsNotify: Bool?
    /** A boolean specifying whether push notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_push_notifications, for this stream.  */
    public var pushNotifications: Bool?
    /** A boolean specifying whether audible notifications are enabled for the given stream.  A null value means the value of this setting should be inherited from the user-level default setting, enable_stream_audible_notifications, for this stream.  */
    public var audibleNotifications: Bool?
    /** A boolean specifying whether the given stream has been pinned to the top.  */
    public var pinToTop: Bool?
    /** Email address of the given stream, used for [sending emails to the stream](/help/message-a-stream-by-email).  */
    public var emailAddress: String?
    /** Whether the user has muted the stream. Muted streams do not count towards your total unread count and do not show up in `All messages` view (previously known as `Home` view).  **Changes**: Prior to Zulip 2.1, this feature was represented by the more confusingly named `in_home_view` (with the opposite value, `in_home_view=!is_muted`).  */
    public var isMuted: Bool?
    /** Legacy property for if the given stream is muted, with inverted meeting.  **Deprecated**; clients should use is_muted where available.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var inHomeView: Bool?
    /** Whether only organization administrators can post to the stream.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead.  */
    @available(*, deprecated, message: "This property is deprecated.")
    public var isAnnouncementOnly: Bool?
    /** Whether the stream has been configured to allow unauthenticated access to its message history from the web.  */
    public var isWebPublic: Bool?
    /** The user's role within the stream (distinct from the user's [organization-level role](/help/roles-and-permissions)). Valid values are:  * 20 => Stream administrator. * 50 => Subscriber.  **Changes**: New in Zulip 4.0 (feature level 31).  */
    public var role: Role?
    /** The user's personal color for the stream.  */
    public var color: String?
    /** Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean.  */
    public var streamPostPolicy: Int?
    /** Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17).  */
    public var messageRetentionDays: Int?
    /** Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future.  */
    public var historyPublicToSubscribers: Bool?
    /** The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history.  */
    public var firstMessageId: Int?
    /** The average number of messages sent to the stream in recent weeks, rounded to the nearest integer.  Null means the stream was recently created and there is insufficient data to estimate the average traffic.  */
    public var streamWeeklyTraffic: Int?

    public init(streamId: Int? = nil, name: String? = nil, description: String? = nil, renderedDescription: String? = nil, dateCreated: Int? = nil, inviteOnly: Bool? = nil, subscribers: [Int]? = nil, desktopNotifications: Bool? = nil, emailNotifications: Bool? = nil, wildcardMentionsNotify: Bool? = nil, pushNotifications: Bool? = nil, audibleNotifications: Bool? = nil, pinToTop: Bool? = nil, emailAddress: String? = nil, isMuted: Bool? = nil, inHomeView: Bool? = nil, isAnnouncementOnly: Bool? = nil, isWebPublic: Bool? = nil, role: Role? = nil, color: String? = nil, streamPostPolicy: Int? = nil, messageRetentionDays: Int? = nil, historyPublicToSubscribers: Bool? = nil, firstMessageId: Int? = nil, streamWeeklyTraffic: Int? = nil) {
        self.streamId = streamId
        self.name = name
        self.description = description
        self.renderedDescription = renderedDescription
        self.dateCreated = dateCreated
        self.inviteOnly = inviteOnly
        self.subscribers = subscribers
        self.desktopNotifications = desktopNotifications
        self.emailNotifications = emailNotifications
        self.wildcardMentionsNotify = wildcardMentionsNotify
        self.pushNotifications = pushNotifications
        self.audibleNotifications = audibleNotifications
        self.pinToTop = pinToTop
        self.emailAddress = emailAddress
        self.isMuted = isMuted
        self.inHomeView = inHomeView
        self.isAnnouncementOnly = isAnnouncementOnly
        self.isWebPublic = isWebPublic
        self.role = role
        self.color = color
        self.streamPostPolicy = streamPostPolicy
        self.messageRetentionDays = messageRetentionDays
        self.historyPublicToSubscribers = historyPublicToSubscribers
        self.firstMessageId = firstMessageId
        self.streamWeeklyTraffic = streamWeeklyTraffic
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case streamId = "stream_id"
        case name
        case description
        case renderedDescription = "rendered_description"
        case dateCreated = "date_created"
        case inviteOnly = "invite_only"
        case subscribers
        case desktopNotifications = "desktop_notifications"
        case emailNotifications = "email_notifications"
        case wildcardMentionsNotify = "wildcard_mentions_notify"
        case pushNotifications = "push_notifications"
        case audibleNotifications = "audible_notifications"
        case pinToTop = "pin_to_top"
        case emailAddress = "email_address"
        case isMuted = "is_muted"
        case inHomeView = "in_home_view"
        case isAnnouncementOnly = "is_announcement_only"
        case isWebPublic = "is_web_public"
        case role
        case color
        case streamPostPolicy = "stream_post_policy"
        case messageRetentionDays = "message_retention_days"
        case historyPublicToSubscribers = "history_public_to_subscribers"
        case firstMessageId = "first_message_id"
        case streamWeeklyTraffic = "stream_weekly_traffic"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(streamId, forKey: .streamId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(renderedDescription, forKey: .renderedDescription)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(inviteOnly, forKey: .inviteOnly)
        try container.encodeIfPresent(subscribers, forKey: .subscribers)
        try container.encodeIfPresent(desktopNotifications, forKey: .desktopNotifications)
        try container.encodeIfPresent(emailNotifications, forKey: .emailNotifications)
        try container.encodeIfPresent(wildcardMentionsNotify, forKey: .wildcardMentionsNotify)
        try container.encodeIfPresent(pushNotifications, forKey: .pushNotifications)
        try container.encodeIfPresent(audibleNotifications, forKey: .audibleNotifications)
        try container.encodeIfPresent(pinToTop, forKey: .pinToTop)
        try container.encodeIfPresent(emailAddress, forKey: .emailAddress)
        try container.encodeIfPresent(isMuted, forKey: .isMuted)
        try container.encodeIfPresent(inHomeView, forKey: .inHomeView)
        try container.encodeIfPresent(isAnnouncementOnly, forKey: .isAnnouncementOnly)
        try container.encodeIfPresent(isWebPublic, forKey: .isWebPublic)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(streamPostPolicy, forKey: .streamPostPolicy)
        try container.encodeIfPresent(messageRetentionDays, forKey: .messageRetentionDays)
        try container.encodeIfPresent(historyPublicToSubscribers, forKey: .historyPublicToSubscribers)
        try container.encodeIfPresent(firstMessageId, forKey: .firstMessageId)
        try container.encodeIfPresent(streamWeeklyTraffic, forKey: .streamWeeklyTraffic)
    }
}

