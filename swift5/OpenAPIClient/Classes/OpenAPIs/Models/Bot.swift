//
// Bot.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Bot: Codable, Hashable {

    public var userId: AnyCodable?
    public var fullName: AnyCodable?
    public var apiKey: AnyCodable?
    public var defaultSendingStream: AnyCodable?
    public var defaultEventsRegisterStream: AnyCodable?
    public var defaultAllPublicStreams: AnyCodable?
    public var avatarUrl: AnyCodable?
    public var ownerId: AnyCodable?
    public var services: AnyCodable?
    /** The email of the bot.  */
    public var email: String?
    /** An integer describing the type of bot: * `1` for a `Generic` bot. * `2` for an `Incoming webhook` bot. * `3` for an `Outgoing webhook` bot. * `4` for an `Embedded` bot.  */
    public var botType: Int?
    /** A boolean describing whether the user account has been deactivated.  */
    public var isActive: Bool?

    public init(userId: AnyCodable? = nil, fullName: AnyCodable? = nil, apiKey: AnyCodable? = nil, defaultSendingStream: AnyCodable? = nil, defaultEventsRegisterStream: AnyCodable? = nil, defaultAllPublicStreams: AnyCodable? = nil, avatarUrl: AnyCodable? = nil, ownerId: AnyCodable? = nil, services: AnyCodable? = nil, email: String? = nil, botType: Int? = nil, isActive: Bool? = nil) {
        self.userId = userId
        self.fullName = fullName
        self.apiKey = apiKey
        self.defaultSendingStream = defaultSendingStream
        self.defaultEventsRegisterStream = defaultEventsRegisterStream
        self.defaultAllPublicStreams = defaultAllPublicStreams
        self.avatarUrl = avatarUrl
        self.ownerId = ownerId
        self.services = services
        self.email = email
        self.botType = botType
        self.isActive = isActive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId = "user_id"
        case fullName = "full_name"
        case apiKey = "api_key"
        case defaultSendingStream = "default_sending_stream"
        case defaultEventsRegisterStream = "default_events_register_stream"
        case defaultAllPublicStreams = "default_all_public_streams"
        case avatarUrl = "avatar_url"
        case ownerId = "owner_id"
        case services
        case email
        case botType = "bot_type"
        case isActive = "is_active"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(apiKey, forKey: .apiKey)
        try container.encodeIfPresent(defaultSendingStream, forKey: .defaultSendingStream)
        try container.encodeIfPresent(defaultEventsRegisterStream, forKey: .defaultEventsRegisterStream)
        try container.encodeIfPresent(defaultAllPublicStreams, forKey: .defaultAllPublicStreams)
        try container.encodeIfPresent(avatarUrl, forKey: .avatarUrl)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(services, forKey: .services)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(botType, forKey: .botType)
        try container.encodeIfPresent(isActive, forKey: .isActive)
    }
}

