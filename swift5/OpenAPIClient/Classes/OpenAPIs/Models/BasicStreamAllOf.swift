//
// BasicStreamAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BasicStreamAllOf: Codable, Hashable {

    public var streamId: AnyCodable?
    public var name: AnyCodable?
    public var description: AnyCodable?
    public var dateCreated: AnyCodable?
    public var inviteOnly: AnyCodable?
    public var renderedDescription: AnyCodable?
    public var isWebPublic: AnyCodable?
    public var streamPostPolicy: AnyCodable?
    public var messageRetentionDays: AnyCodable?
    public var historyPublicToSubscribers: AnyCodable?
    public var firstMessageId: AnyCodable?
    public var isAnnouncementOnly: AnyCodable?

    public init(streamId: AnyCodable? = nil, name: AnyCodable? = nil, description: AnyCodable? = nil, dateCreated: AnyCodable? = nil, inviteOnly: AnyCodable? = nil, renderedDescription: AnyCodable? = nil, isWebPublic: AnyCodable? = nil, streamPostPolicy: AnyCodable? = nil, messageRetentionDays: AnyCodable? = nil, historyPublicToSubscribers: AnyCodable? = nil, firstMessageId: AnyCodable? = nil, isAnnouncementOnly: AnyCodable? = nil) {
        self.streamId = streamId
        self.name = name
        self.description = description
        self.dateCreated = dateCreated
        self.inviteOnly = inviteOnly
        self.renderedDescription = renderedDescription
        self.isWebPublic = isWebPublic
        self.streamPostPolicy = streamPostPolicy
        self.messageRetentionDays = messageRetentionDays
        self.historyPublicToSubscribers = historyPublicToSubscribers
        self.firstMessageId = firstMessageId
        self.isAnnouncementOnly = isAnnouncementOnly
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case streamId = "stream_id"
        case name
        case description
        case dateCreated = "date_created"
        case inviteOnly = "invite_only"
        case renderedDescription = "rendered_description"
        case isWebPublic = "is_web_public"
        case streamPostPolicy = "stream_post_policy"
        case messageRetentionDays = "message_retention_days"
        case historyPublicToSubscribers = "history_public_to_subscribers"
        case firstMessageId = "first_message_id"
        case isAnnouncementOnly = "is_announcement_only"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(streamId, forKey: .streamId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(inviteOnly, forKey: .inviteOnly)
        try container.encodeIfPresent(renderedDescription, forKey: .renderedDescription)
        try container.encodeIfPresent(isWebPublic, forKey: .isWebPublic)
        try container.encodeIfPresent(streamPostPolicy, forKey: .streamPostPolicy)
        try container.encodeIfPresent(messageRetentionDays, forKey: .messageRetentionDays)
        try container.encodeIfPresent(historyPublicToSubscribers, forKey: .historyPublicToSubscribers)
        try container.encodeIfPresent(firstMessageId, forKey: .firstMessageId)
        try container.encodeIfPresent(isAnnouncementOnly, forKey: .isAnnouncementOnly)
    }
}

