//
// Attachments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Dictionary containing details of a file uploaded by a user.  */
public struct Attachments: Codable, Hashable {

    /** The unique ID for the attachment.  */
    public var id: Int?
    /** Name of the uploaded file.  */
    public var name: String?
    /** A representation of the path of the file within the repository of user-uploaded files.  If the `path_id` of a file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be: `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.  */
    public var pathId: String?
    /** Size of the file in bytes.  */
    public var size: Int?
    /** Time when the attachment was uploaded as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously a floating point number.  */
    public var createTime: Int?
    /** Contains basic details on any Zulip messages that have been sent referencing this [uploaded file](/api/upload-file). This includes messages sent by any user in the Zulip organization who sent a message containing a link to the uploaded file.  */
    public var messages: [AttachmentsMessages]?

    public init(id: Int? = nil, name: String? = nil, pathId: String? = nil, size: Int? = nil, createTime: Int? = nil, messages: [AttachmentsMessages]? = nil) {
        self.id = id
        self.name = name
        self.pathId = pathId
        self.size = size
        self.createTime = createTime
        self.messages = messages
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case pathId = "path_id"
        case size
        case createTime = "create_time"
        case messages
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(pathId, forKey: .pathId)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(createTime, forKey: .createTime)
        try container.encodeIfPresent(messages, forKey: .messages)
    }
}

