//
// EmojiReactionBaseUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field.  */
@available(*, deprecated, message: "This schema is deprecated.")
public struct EmojiReactionBaseUser: Codable, Hashable {

    /** ID of the user.  */
    public var id: Int?
    /** Email of the user.  */
    public var email: String?
    /** Full name of the user.  */
    public var fullName: String?
    /** Whether the user is a mirror dummy.  */
    public var isMirrorDummy: Bool?

    public init(id: Int? = nil, email: String? = nil, fullName: String? = nil, isMirrorDummy: Bool? = nil) {
        self.id = id
        self.email = email
        self.fullName = fullName
        self.isMirrorDummy = isMirrorDummy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case fullName = "full_name"
        case isMirrorDummy = "is_mirror_dummy"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(isMirrorDummy, forKey: .isMirrorDummy)
    }
}

