/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DraftsApi {
    protected basePath = 'https://example.zulipchat.com/api/v1';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via `drafts` events.  `POST {{ api_url }}/v1/drafts` 
     * @summary Create drafts
     * @param drafts A JSON-encoded list of containing new draft objects. 
     */
    public createDrafts (drafts?: Array<models.Draft>, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.models.JsonSuccess & object> {
        const localVarPath = this.basePath + '/drafts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (drafts !== undefined) {
            queryParameters['drafts'] = drafts;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a `drafts` event.  `DELETE {{ api_url }}/v1/drafts/{draft_id}` 
     * @summary Delete a draft
     * @param draftId The ID of the draft you want to delete. 
     */
    public deleteDraft (draftId: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.models.JsonSuccess> {
        const localVarPath = this.basePath + '/drafts/{draft_id}'
            .replace('{' + 'draft_id' + '}', encodeURIComponent(String(draftId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'draftId' is not null or undefined
        if (draftId === null || draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling deleteDraft.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Edit a draft on the server. The edit will be automatically synchronized to other clients via `drafts` events.  `PATCH {{ api_url }}/v1/drafts/{draft_id}` 
     * @summary Edit a draft
     * @param draftId The ID of the draft to be edited. 
     * @param draft A JSON-encoded object containing a replacement draft object for this ID. 
     */
    public editDraft (draftId: number, draft: models.Draft, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.models.JsonSuccess> {
        const localVarPath = this.basePath + '/drafts/{draft_id}'
            .replace('{' + 'draft_id' + '}', encodeURIComponent(String(draftId)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'draftId' is not null or undefined
        if (draftId === null || draftId === undefined) {
            throw new Error('Required parameter draftId was null or undefined when calling editDraft.');
        }

        // verify required parameter 'draft' is not null or undefined
        if (draft === null || draft === undefined) {
            throw new Error('Required parameter draft was null or undefined when calling editDraft.');
        }

        if (draft !== undefined) {
            queryParameters['draft'] = draft;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Fetch all drafts for the current user.  `GET {{ api_url }}/v1/drafts` 
     * @summary Get drafts
     */
    public getDrafts (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.models.JsonSuccess & object> {
        const localVarPath = this.basePath + '/drafts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
