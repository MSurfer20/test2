/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. 
    /// </summary>
    [DataContract(Name = "Presence")]
    public partial class Presence : IEquatable<Presence>, IValidatableObject
    {
        /// <summary>
        /// The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. 
        /// </summary>
        /// <value>The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Idle for value: idle
            /// </summary>
            [EnumMember(Value = "idle")]
            Idle = 1,

            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 2

        }


        /// <summary>
        /// The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. 
        /// </summary>
        /// <value>The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. </value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Presence" /> class.
        /// </summary>
        /// <param name="_client">The client&#39;s platform name. .</param>
        /// <param name="status">The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. .</param>
        /// <param name="timestamp">The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. .</param>
        /// <param name="pushable">Whether the client is capable of showing mobile/push notifications to the user. .</param>
        public Presence(string _client = default(string), StatusEnum? status = default(StatusEnum?), int timestamp = default(int), bool pushable = default(bool))
        {
            this._Client = _client;
            this.Status = status;
            this.Timestamp = timestamp;
            this.Pushable = pushable;
        }

        /// <summary>
        /// The client&#39;s platform name. 
        /// </summary>
        /// <value>The client&#39;s platform name. </value>
        [DataMember(Name = "client", EmitDefaultValue = false)]
        public string _Client { get; set; }

        /// <summary>
        /// The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. 
        /// </summary>
        /// <value>The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. </value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public int Timestamp { get; set; }

        /// <summary>
        /// Whether the client is capable of showing mobile/push notifications to the user. 
        /// </summary>
        /// <value>Whether the client is capable of showing mobile/push notifications to the user. </value>
        [DataMember(Name = "pushable", EmitDefaultValue = true)]
        public bool Pushable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Presence {\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Pushable: ").Append(Pushable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Presence);
        }

        /// <summary>
        /// Returns true if Presence instances are equal
        /// </summary>
        /// <param name="input">Instance of Presence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Presence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.Pushable == input.Pushable ||
                    this.Pushable.Equals(input.Pushable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                hashCode = hashCode * 59 + this.Pushable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
