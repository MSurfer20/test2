/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object containing basic details about the stream. 
    /// </summary>
    [DataContract(Name = "BasicStreamBase")]
    public partial class BasicStreamBase : IEquatable<BasicStreamBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicStreamBase" /> class.
        /// </summary>
        /// <param name="streamId">The unique ID of the stream. .</param>
        /// <param name="name">The name of the stream. .</param>
        /// <param name="description">The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. .</param>
        /// <param name="dateCreated">The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). .</param>
        /// <param name="inviteOnly">Specifies whether the stream is private or not. Only people who have been invited can access a private stream. .</param>
        /// <param name="renderedDescription">The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. .</param>
        /// <param name="isWebPublic">Whether the stream has been configured to allow unauthenticated access to its message history from the web. .</param>
        /// <param name="streamPostPolicy">Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. .</param>
        /// <param name="messageRetentionDays">Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). .</param>
        /// <param name="historyPublicToSubscribers">Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. .</param>
        /// <param name="firstMessageId">The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. .</param>
        /// <param name="isAnnouncementOnly">Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. .</param>
        public BasicStreamBase(int streamId = default(int), string name = default(string), string description = default(string), int dateCreated = default(int), bool inviteOnly = default(bool), string renderedDescription = default(string), bool isWebPublic = default(bool), int streamPostPolicy = default(int), int? messageRetentionDays = default(int?), bool historyPublicToSubscribers = default(bool), int? firstMessageId = default(int?), bool isAnnouncementOnly = default(bool))
        {
            this.StreamId = streamId;
            this.Name = name;
            this.Description = description;
            this.DateCreated = dateCreated;
            this.InviteOnly = inviteOnly;
            this.RenderedDescription = renderedDescription;
            this.IsWebPublic = isWebPublic;
            this.StreamPostPolicy = streamPostPolicy;
            this.MessageRetentionDays = messageRetentionDays;
            this.HistoryPublicToSubscribers = historyPublicToSubscribers;
            this.FirstMessageId = firstMessageId;
            this.IsAnnouncementOnly = isAnnouncementOnly;
        }

        /// <summary>
        /// The unique ID of the stream. 
        /// </summary>
        /// <value>The unique ID of the stream. </value>
        [DataMember(Name = "stream_id", EmitDefaultValue = false)]
        public int StreamId { get; set; }

        /// <summary>
        /// The name of the stream. 
        /// </summary>
        /// <value>The name of the stream. </value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. 
        /// </summary>
        /// <value>The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. </value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
        /// </summary>
        /// <value>The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). </value>
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        public int DateCreated { get; set; }

        /// <summary>
        /// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
        /// </summary>
        /// <value>Specifies whether the stream is private or not. Only people who have been invited can access a private stream. </value>
        [DataMember(Name = "invite_only", EmitDefaultValue = true)]
        public bool InviteOnly { get; set; }

        /// <summary>
        /// The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
        /// </summary>
        /// <value>The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. </value>
        [DataMember(Name = "rendered_description", EmitDefaultValue = false)]
        public string RenderedDescription { get; set; }

        /// <summary>
        /// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
        /// </summary>
        /// <value>Whether the stream has been configured to allow unauthenticated access to its message history from the web. </value>
        [DataMember(Name = "is_web_public", EmitDefaultValue = true)]
        public bool IsWebPublic { get; set; }

        /// <summary>
        /// Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
        /// </summary>
        /// <value>Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. </value>
        [DataMember(Name = "stream_post_policy", EmitDefaultValue = false)]
        public int StreamPostPolicy { get; set; }

        /// <summary>
        /// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
        /// </summary>
        /// <value>Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). </value>
        [DataMember(Name = "message_retention_days", EmitDefaultValue = true)]
        public int? MessageRetentionDays { get; set; }

        /// <summary>
        /// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. 
        /// </summary>
        /// <value>Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. </value>
        [DataMember(Name = "history_public_to_subscribers", EmitDefaultValue = true)]
        public bool HistoryPublicToSubscribers { get; set; }

        /// <summary>
        /// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
        /// </summary>
        /// <value>The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. </value>
        [DataMember(Name = "first_message_id", EmitDefaultValue = true)]
        public int? FirstMessageId { get; set; }

        /// <summary>
        /// Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. 
        /// </summary>
        /// <value>Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. </value>
        [DataMember(Name = "is_announcement_only", EmitDefaultValue = true)]
        public bool IsAnnouncementOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicStreamBase {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  InviteOnly: ").Append(InviteOnly).Append("\n");
            sb.Append("  RenderedDescription: ").Append(RenderedDescription).Append("\n");
            sb.Append("  IsWebPublic: ").Append(IsWebPublic).Append("\n");
            sb.Append("  StreamPostPolicy: ").Append(StreamPostPolicy).Append("\n");
            sb.Append("  MessageRetentionDays: ").Append(MessageRetentionDays).Append("\n");
            sb.Append("  HistoryPublicToSubscribers: ").Append(HistoryPublicToSubscribers).Append("\n");
            sb.Append("  FirstMessageId: ").Append(FirstMessageId).Append("\n");
            sb.Append("  IsAnnouncementOnly: ").Append(IsAnnouncementOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicStreamBase);
        }

        /// <summary>
        /// Returns true if BasicStreamBase instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicStreamBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicStreamBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreamId == input.StreamId ||
                    this.StreamId.Equals(input.StreamId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    this.DateCreated.Equals(input.DateCreated)
                ) && 
                (
                    this.InviteOnly == input.InviteOnly ||
                    this.InviteOnly.Equals(input.InviteOnly)
                ) && 
                (
                    this.RenderedDescription == input.RenderedDescription ||
                    (this.RenderedDescription != null &&
                    this.RenderedDescription.Equals(input.RenderedDescription))
                ) && 
                (
                    this.IsWebPublic == input.IsWebPublic ||
                    this.IsWebPublic.Equals(input.IsWebPublic)
                ) && 
                (
                    this.StreamPostPolicy == input.StreamPostPolicy ||
                    this.StreamPostPolicy.Equals(input.StreamPostPolicy)
                ) && 
                (
                    this.MessageRetentionDays == input.MessageRetentionDays ||
                    (this.MessageRetentionDays != null &&
                    this.MessageRetentionDays.Equals(input.MessageRetentionDays))
                ) && 
                (
                    this.HistoryPublicToSubscribers == input.HistoryPublicToSubscribers ||
                    this.HistoryPublicToSubscribers.Equals(input.HistoryPublicToSubscribers)
                ) && 
                (
                    this.FirstMessageId == input.FirstMessageId ||
                    (this.FirstMessageId != null &&
                    this.FirstMessageId.Equals(input.FirstMessageId))
                ) && 
                (
                    this.IsAnnouncementOnly == input.IsAnnouncementOnly ||
                    this.IsAnnouncementOnly.Equals(input.IsAnnouncementOnly)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.StreamId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                hashCode = hashCode * 59 + this.InviteOnly.GetHashCode();
                if (this.RenderedDescription != null)
                    hashCode = hashCode * 59 + this.RenderedDescription.GetHashCode();
                hashCode = hashCode * 59 + this.IsWebPublic.GetHashCode();
                hashCode = hashCode * 59 + this.StreamPostPolicy.GetHashCode();
                if (this.MessageRetentionDays != null)
                    hashCode = hashCode * 59 + this.MessageRetentionDays.GetHashCode();
                hashCode = hashCode * 59 + this.HistoryPublicToSubscribers.GetHashCode();
                if (this.FirstMessageId != null)
                    hashCode = hashCode * 59 + this.FirstMessageId.GetHashCode();
                hashCode = hashCode * 59 + this.IsAnnouncementOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
