/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EmojiReaction
    /// </summary>
    [DataContract(Name = "EmojiReaction")]
    public partial class EmojiReaction : IEquatable<EmojiReaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmojiReaction" /> class.
        /// </summary>
        /// <param name="emojiCode">emojiCode.</param>
        /// <param name="emojiName">emojiName.</param>
        /// <param name="reactionType">reactionType.</param>
        /// <param name="userId">userId.</param>
        /// <param name="user">user.</param>
        public EmojiReaction(Object emojiCode = default(Object), Object emojiName = default(Object), Object reactionType = default(Object), Object userId = default(Object), Object user = default(Object))
        {
            this.EmojiCode = emojiCode;
            this.EmojiName = emojiName;
            this.ReactionType = reactionType;
            this.UserId = userId;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets EmojiCode
        /// </summary>
        [DataMember(Name = "emoji_code", EmitDefaultValue = true)]
        public Object EmojiCode { get; set; }

        /// <summary>
        /// Gets or Sets EmojiName
        /// </summary>
        [DataMember(Name = "emoji_name", EmitDefaultValue = true)]
        public Object EmojiName { get; set; }

        /// <summary>
        /// Gets or Sets ReactionType
        /// </summary>
        [DataMember(Name = "reaction_type", EmitDefaultValue = true)]
        public Object ReactionType { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public Object UserId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public Object User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmojiReaction {\n");
            sb.Append("  EmojiCode: ").Append(EmojiCode).Append("\n");
            sb.Append("  EmojiName: ").Append(EmojiName).Append("\n");
            sb.Append("  ReactionType: ").Append(ReactionType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmojiReaction);
        }

        /// <summary>
        /// Returns true if EmojiReaction instances are equal
        /// </summary>
        /// <param name="input">Instance of EmojiReaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmojiReaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmojiCode == input.EmojiCode ||
                    (this.EmojiCode != null &&
                    this.EmojiCode.Equals(input.EmojiCode))
                ) && 
                (
                    this.EmojiName == input.EmojiName ||
                    (this.EmojiName != null &&
                    this.EmojiName.Equals(input.EmojiName))
                ) && 
                (
                    this.ReactionType == input.ReactionType ||
                    (this.ReactionType != null &&
                    this.ReactionType.Equals(input.ReactionType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmojiCode != null)
                    hashCode = hashCode * 59 + this.EmojiCode.GetHashCode();
                if (this.EmojiName != null)
                    hashCode = hashCode * 59 + this.EmojiName.GetHashCode();
                if (this.ReactionType != null)
                    hashCode = hashCode * 59 + this.ReactionType.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
