/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
    /// </summary>
    [DataContract(Name = "EmojiReactionBase_user")]
    public partial class EmojiReactionBaseUser : IEquatable<EmojiReactionBaseUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmojiReactionBaseUser" /> class.
        /// </summary>
        /// <param name="id">ID of the user. .</param>
        /// <param name="email">Email of the user. .</param>
        /// <param name="fullName">Full name of the user. .</param>
        /// <param name="isMirrorDummy">Whether the user is a mirror dummy. .</param>
        public EmojiReactionBaseUser(int id = default(int), string email = default(string), string fullName = default(string), bool isMirrorDummy = default(bool))
        {
            this.Id = id;
            this.Email = email;
            this.FullName = fullName;
            this.IsMirrorDummy = isMirrorDummy;
        }

        /// <summary>
        /// ID of the user. 
        /// </summary>
        /// <value>ID of the user. </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Email of the user. 
        /// </summary>
        /// <value>Email of the user. </value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Full name of the user. 
        /// </summary>
        /// <value>Full name of the user. </value>
        [DataMember(Name = "full_name", EmitDefaultValue = false)]
        public string FullName { get; set; }

        /// <summary>
        /// Whether the user is a mirror dummy. 
        /// </summary>
        /// <value>Whether the user is a mirror dummy. </value>
        [DataMember(Name = "is_mirror_dummy", EmitDefaultValue = true)]
        public bool IsMirrorDummy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmojiReactionBaseUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  IsMirrorDummy: ").Append(IsMirrorDummy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmojiReactionBaseUser);
        }

        /// <summary>
        /// Returns true if EmojiReactionBaseUser instances are equal
        /// </summary>
        /// <param name="input">Instance of EmojiReactionBaseUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmojiReactionBaseUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.IsMirrorDummy == input.IsMirrorDummy ||
                    this.IsMirrorDummy.Equals(input.IsMirrorDummy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                hashCode = hashCode * 59 + this.IsMirrorDummy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
