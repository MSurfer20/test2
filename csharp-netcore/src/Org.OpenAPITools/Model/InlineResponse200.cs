/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This is an example of the JSON payload that the Zulip server will &#x60;POST&#x60; to your server 
    /// </summary>
    [DataContract(Name = "inline_response_200")]
    public partial class InlineResponse200 : IEquatable<InlineResponse200>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200" /> class.
        /// </summary>
        /// <param name="botEmail">Email of the bot user. .</param>
        /// <param name="botFullName">The full name of the bot user. .</param>
        /// <param name="data">The message content, in raw Markdown format (not rendered to HTML). .</param>
        /// <param name="trigger">What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. .</param>
        /// <param name="token">A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. .</param>
        /// <param name="message">A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). .</param>
        public InlineResponse200(string botEmail = default(string), string botFullName = default(string), string data = default(string), string trigger = default(string), string token = default(string), MessagesBase message = default(MessagesBase))
        {
            this.BotEmail = botEmail;
            this.BotFullName = botFullName;
            this.Data = data;
            this.Trigger = trigger;
            this.Token = token;
            this.Message = message;
        }

        /// <summary>
        /// Email of the bot user. 
        /// </summary>
        /// <value>Email of the bot user. </value>
        [DataMember(Name = "bot_email", EmitDefaultValue = false)]
        public string BotEmail { get; set; }

        /// <summary>
        /// The full name of the bot user. 
        /// </summary>
        /// <value>The full name of the bot user. </value>
        [DataMember(Name = "bot_full_name", EmitDefaultValue = false)]
        public string BotFullName { get; set; }

        /// <summary>
        /// The message content, in raw Markdown format (not rendered to HTML). 
        /// </summary>
        /// <value>The message content, in raw Markdown format (not rendered to HTML). </value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. 
        /// </summary>
        /// <value>What aspect of the message triggered the outgoing webhook notification. Possible values include &#x60;private_message&#x60; and &#x60;mention&#x60;. </value>
        [DataMember(Name = "trigger", EmitDefaultValue = false)]
        public string Trigger { get; set; }

        /// <summary>
        /// A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. 
        /// </summary>
        /// <value>A string of alphanumeric characters that can be used to authenticate the webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot in the &#x60;zuliprc&#x60; file downloaded when creating the bot. </value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). 
        /// </summary>
        /// <value>A dict containing details on the message that triggered the outgoing webhook, in the format used by [&#x60;GET /messages&#x60;](/api/get-messages). </value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public MessagesBase Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  BotEmail: ").Append(BotEmail).Append("\n");
            sb.Append("  BotFullName: ").Append(BotFullName).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BotEmail == input.BotEmail ||
                    (this.BotEmail != null &&
                    this.BotEmail.Equals(input.BotEmail))
                ) && 
                (
                    this.BotFullName == input.BotFullName ||
                    (this.BotFullName != null &&
                    this.BotFullName.Equals(input.BotFullName))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BotEmail != null)
                    hashCode = hashCode * 59 + this.BotEmail.GetHashCode();
                if (this.BotFullName != null)
                    hashCode = hashCode * 59 + this.BotFullName.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
