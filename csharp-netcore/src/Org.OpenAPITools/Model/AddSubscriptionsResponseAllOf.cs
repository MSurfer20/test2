/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AddSubscriptionsResponseAllOf
    /// </summary>
    [DataContract(Name = "AddSubscriptionsResponse_allOf")]
    public partial class AddSubscriptionsResponseAllOf : IEquatable<AddSubscriptionsResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddSubscriptionsResponseAllOf" /> class.
        /// </summary>
        /// <param name="result">result.</param>
        /// <param name="msg">msg.</param>
        /// <param name="subscribed">A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. .</param>
        /// <param name="alreadySubscribed">A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. .</param>
        /// <param name="unauthorized">A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. .</param>
        public AddSubscriptionsResponseAllOf(Object result = default(Object), Object msg = default(Object), Dictionary<string, List<string>> subscribed = default(Dictionary<string, List<string>>), Dictionary<string, List<string>> alreadySubscribed = default(Dictionary<string, List<string>>), List<string> unauthorized = default(List<string>))
        {
            this.Result = result;
            this.Msg = msg;
            this.Subscribed = subscribed;
            this.AlreadySubscribed = alreadySubscribed;
            this.Unauthorized = unauthorized;
        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result { get; set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [DataMember(Name = "msg", EmitDefaultValue = true)]
        public Object Msg { get; set; }

        /// <summary>
        /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. 
        /// </summary>
        /// <value>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that were subscribed to as a result of the query. </value>
        [DataMember(Name = "subscribed", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> Subscribed { get; set; }

        /// <summary>
        /// A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. 
        /// </summary>
        /// <value>A dictionary where the key is the email address of the user/bot and the value is a list of the names of the streams that the user/bot is already subscribed to. </value>
        [DataMember(Name = "already_subscribed", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> AlreadySubscribed { get; set; }

        /// <summary>
        /// A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. 
        /// </summary>
        /// <value>A list of names of streams that the requesting user/bot was not authorized to subscribe to.  Only present if &#x60;authorization_errors_fatal&#x3D;false&#x60;. </value>
        [DataMember(Name = "unauthorized", EmitDefaultValue = false)]
        public List<string> Unauthorized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddSubscriptionsResponseAllOf {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Subscribed: ").Append(Subscribed).Append("\n");
            sb.Append("  AlreadySubscribed: ").Append(AlreadySubscribed).Append("\n");
            sb.Append("  Unauthorized: ").Append(Unauthorized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddSubscriptionsResponseAllOf);
        }

        /// <summary>
        /// Returns true if AddSubscriptionsResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AddSubscriptionsResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddSubscriptionsResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Subscribed == input.Subscribed ||
                    this.Subscribed != null &&
                    input.Subscribed != null &&
                    this.Subscribed.SequenceEqual(input.Subscribed)
                ) && 
                (
                    this.AlreadySubscribed == input.AlreadySubscribed ||
                    this.AlreadySubscribed != null &&
                    input.AlreadySubscribed != null &&
                    this.AlreadySubscribed.SequenceEqual(input.AlreadySubscribed)
                ) && 
                (
                    this.Unauthorized == input.Unauthorized ||
                    this.Unauthorized != null &&
                    input.Unauthorized != null &&
                    this.Unauthorized.SequenceEqual(input.Unauthorized)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                if (this.Subscribed != null)
                    hashCode = hashCode * 59 + this.Subscribed.GetHashCode();
                if (this.AlreadySubscribed != null)
                    hashCode = hashCode * 59 + this.AlreadySubscribed.GetHashCode();
                if (this.Unauthorized != null)
                    hashCode = hashCode * 59 + this.Unauthorized.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
