/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object containing details of the newly added domain. 
    /// </summary>
    [DataContract(Name = "RealmDomain")]
    public partial class RealmDomain : IEquatable<RealmDomain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealmDomain" /> class.
        /// </summary>
        /// <param name="domain">The new allowed domain. .</param>
        /// <param name="allowSubdomains">Whether subdomains are allowed for this domain. .</param>
        public RealmDomain(string domain = default(string), bool allowSubdomains = default(bool))
        {
            this.Domain = domain;
            this.AllowSubdomains = allowSubdomains;
        }

        /// <summary>
        /// The new allowed domain. 
        /// </summary>
        /// <value>The new allowed domain. </value>
        [DataMember(Name = "domain", EmitDefaultValue = false)]
        public string Domain { get; set; }

        /// <summary>
        /// Whether subdomains are allowed for this domain. 
        /// </summary>
        /// <value>Whether subdomains are allowed for this domain. </value>
        [DataMember(Name = "allow_subdomains", EmitDefaultValue = true)]
        public bool AllowSubdomains { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealmDomain {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  AllowSubdomains: ").Append(AllowSubdomains).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealmDomain);
        }

        /// <summary>
        /// Returns true if RealmDomain instances are equal
        /// </summary>
        /// <param name="input">Instance of RealmDomain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmDomain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Domain == input.Domain ||
                    (this.Domain != null &&
                    this.Domain.Equals(input.Domain))
                ) && 
                (
                    this.AllowSubdomains == input.AllowSubdomains ||
                    this.AllowSubdomains.Equals(input.AllowSubdomains)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Domain != null)
                    hashCode = hashCode * 59 + this.Domain.GetHashCode();
                hashCode = hashCode * 59 + this.AllowSubdomains.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
