/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetMessagesAllOf
    /// </summary>
    [DataContract(Name = "GetMessages_allOf")]
    public partial class GetMessagesAllOf : IEquatable<GetMessagesAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMessagesAllOf" /> class.
        /// </summary>
        /// <param name="avatarUrl">avatarUrl.</param>
        /// <param name="_client">_client.</param>
        /// <param name="content">content.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="displayRecipient">displayRecipient.</param>
        /// <param name="id">id.</param>
        /// <param name="isMeMessage">isMeMessage.</param>
        /// <param name="reactions">reactions.</param>
        /// <param name="recipientId">recipientId.</param>
        /// <param name="senderEmail">senderEmail.</param>
        /// <param name="senderFullName">senderFullName.</param>
        /// <param name="senderId">senderId.</param>
        /// <param name="senderRealmStr">senderRealmStr.</param>
        /// <param name="streamId">streamId.</param>
        /// <param name="subject">subject.</param>
        /// <param name="topicLinks">topicLinks.</param>
        /// <param name="submessages">submessages.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="type">type.</param>
        /// <param name="flags">The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags .</param>
        /// <param name="lastEditTimestamp">The UNIX timestamp for when the message was last edited, in UTC seconds. .</param>
        /// <param name="matchContent">Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. .</param>
        /// <param name="matchSubject">Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. .</param>
        public GetMessagesAllOf(Object avatarUrl = default(Object), Object _client = default(Object), Object content = default(Object), Object contentType = default(Object), Object displayRecipient = default(Object), Object id = default(Object), Object isMeMessage = default(Object), Object reactions = default(Object), Object recipientId = default(Object), Object senderEmail = default(Object), Object senderFullName = default(Object), Object senderId = default(Object), Object senderRealmStr = default(Object), Object streamId = default(Object), Object subject = default(Object), Object topicLinks = default(Object), Object submessages = default(Object), Object timestamp = default(Object), Object type = default(Object), List<string> flags = default(List<string>), int lastEditTimestamp = default(int), string matchContent = default(string), string matchSubject = default(string))
        {
            this.AvatarUrl = avatarUrl;
            this._Client = _client;
            this.Content = content;
            this.ContentType = contentType;
            this.DisplayRecipient = displayRecipient;
            this.Id = id;
            this.IsMeMessage = isMeMessage;
            this.Reactions = reactions;
            this.RecipientId = recipientId;
            this.SenderEmail = senderEmail;
            this.SenderFullName = senderFullName;
            this.SenderId = senderId;
            this.SenderRealmStr = senderRealmStr;
            this.StreamId = streamId;
            this.Subject = subject;
            this.TopicLinks = topicLinks;
            this.Submessages = submessages;
            this.Timestamp = timestamp;
            this.Type = type;
            this.Flags = flags;
            this.LastEditTimestamp = lastEditTimestamp;
            this.MatchContent = matchContent;
            this.MatchSubject = matchSubject;
        }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name = "avatar_url", EmitDefaultValue = true)]
        public Object AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name = "client", EmitDefaultValue = true)]
        public Object _Client { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = true)]
        public Object Content { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "content_type", EmitDefaultValue = true)]
        public Object ContentType { get; set; }

        /// <summary>
        /// Gets or Sets DisplayRecipient
        /// </summary>
        [DataMember(Name = "display_recipient", EmitDefaultValue = true)]
        public Object DisplayRecipient { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Object Id { get; set; }

        /// <summary>
        /// Gets or Sets IsMeMessage
        /// </summary>
        [DataMember(Name = "is_me_message", EmitDefaultValue = true)]
        public Object IsMeMessage { get; set; }

        /// <summary>
        /// Gets or Sets Reactions
        /// </summary>
        [DataMember(Name = "reactions", EmitDefaultValue = true)]
        public Object Reactions { get; set; }

        /// <summary>
        /// Gets or Sets RecipientId
        /// </summary>
        [DataMember(Name = "recipient_id", EmitDefaultValue = true)]
        public Object RecipientId { get; set; }

        /// <summary>
        /// Gets or Sets SenderEmail
        /// </summary>
        [DataMember(Name = "sender_email", EmitDefaultValue = true)]
        public Object SenderEmail { get; set; }

        /// <summary>
        /// Gets or Sets SenderFullName
        /// </summary>
        [DataMember(Name = "sender_full_name", EmitDefaultValue = true)]
        public Object SenderFullName { get; set; }

        /// <summary>
        /// Gets or Sets SenderId
        /// </summary>
        [DataMember(Name = "sender_id", EmitDefaultValue = true)]
        public Object SenderId { get; set; }

        /// <summary>
        /// Gets or Sets SenderRealmStr
        /// </summary>
        [DataMember(Name = "sender_realm_str", EmitDefaultValue = true)]
        public Object SenderRealmStr { get; set; }

        /// <summary>
        /// Gets or Sets StreamId
        /// </summary>
        [DataMember(Name = "stream_id", EmitDefaultValue = true)]
        public Object StreamId { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = true)]
        public Object Subject { get; set; }

        /// <summary>
        /// Gets or Sets TopicLinks
        /// </summary>
        [DataMember(Name = "topic_links", EmitDefaultValue = true)]
        public Object TopicLinks { get; set; }

        /// <summary>
        /// Gets or Sets Submessages
        /// </summary>
        [DataMember(Name = "submessages", EmitDefaultValue = true)]
        public Object Submessages { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public Object Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public Object Type { get; set; }

        /// <summary>
        /// The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags 
        /// </summary>
        /// <value>The user&#39;s [message flags][message-flags] for the message.  [message-flags]: /api/update-message-flags#available-flags </value>
        [DataMember(Name = "flags", EmitDefaultValue = false)]
        public List<string> Flags { get; set; }

        /// <summary>
        /// The UNIX timestamp for when the message was last edited, in UTC seconds. 
        /// </summary>
        /// <value>The UNIX timestamp for when the message was last edited, in UTC seconds. </value>
        [DataMember(Name = "last_edit_timestamp", EmitDefaultValue = false)]
        public int LastEditTimestamp { get; set; }

        /// <summary>
        /// Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
        /// </summary>
        /// <value>Only present if keyword search was included among the narrow parameters. HTML content of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </value>
        [DataMember(Name = "match_content", EmitDefaultValue = false)]
        public string MatchContent { get; set; }

        /// <summary>
        /// Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. 
        /// </summary>
        /// <value>Only present if keyword search was included among the narrow parameters. HTML-escaped topic of a queried message that matches the narrow, with &#x60;&lt;span class&#x3D;\&quot;highlight\&quot;&gt;&#x60; elements wrapping the matches for the search keywords. </value>
        [DataMember(Name = "match_subject", EmitDefaultValue = false)]
        public string MatchSubject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetMessagesAllOf {\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  DisplayRecipient: ").Append(DisplayRecipient).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsMeMessage: ").Append(IsMeMessage).Append("\n");
            sb.Append("  Reactions: ").Append(Reactions).Append("\n");
            sb.Append("  RecipientId: ").Append(RecipientId).Append("\n");
            sb.Append("  SenderEmail: ").Append(SenderEmail).Append("\n");
            sb.Append("  SenderFullName: ").Append(SenderFullName).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  SenderRealmStr: ").Append(SenderRealmStr).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TopicLinks: ").Append(TopicLinks).Append("\n");
            sb.Append("  Submessages: ").Append(Submessages).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  LastEditTimestamp: ").Append(LastEditTimestamp).Append("\n");
            sb.Append("  MatchContent: ").Append(MatchContent).Append("\n");
            sb.Append("  MatchSubject: ").Append(MatchSubject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMessagesAllOf);
        }

        /// <summary>
        /// Returns true if GetMessagesAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMessagesAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMessagesAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AvatarUrl == input.AvatarUrl ||
                    (this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(input.AvatarUrl))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.DisplayRecipient == input.DisplayRecipient ||
                    (this.DisplayRecipient != null &&
                    this.DisplayRecipient.Equals(input.DisplayRecipient))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsMeMessage == input.IsMeMessage ||
                    (this.IsMeMessage != null &&
                    this.IsMeMessage.Equals(input.IsMeMessage))
                ) && 
                (
                    this.Reactions == input.Reactions ||
                    (this.Reactions != null &&
                    this.Reactions.Equals(input.Reactions))
                ) && 
                (
                    this.RecipientId == input.RecipientId ||
                    (this.RecipientId != null &&
                    this.RecipientId.Equals(input.RecipientId))
                ) && 
                (
                    this.SenderEmail == input.SenderEmail ||
                    (this.SenderEmail != null &&
                    this.SenderEmail.Equals(input.SenderEmail))
                ) && 
                (
                    this.SenderFullName == input.SenderFullName ||
                    (this.SenderFullName != null &&
                    this.SenderFullName.Equals(input.SenderFullName))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.SenderRealmStr == input.SenderRealmStr ||
                    (this.SenderRealmStr != null &&
                    this.SenderRealmStr.Equals(input.SenderRealmStr))
                ) && 
                (
                    this.StreamId == input.StreamId ||
                    (this.StreamId != null &&
                    this.StreamId.Equals(input.StreamId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TopicLinks == input.TopicLinks ||
                    (this.TopicLinks != null &&
                    this.TopicLinks.Equals(input.TopicLinks))
                ) && 
                (
                    this.Submessages == input.Submessages ||
                    (this.Submessages != null &&
                    this.Submessages.Equals(input.Submessages))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Flags == input.Flags ||
                    this.Flags != null &&
                    input.Flags != null &&
                    this.Flags.SequenceEqual(input.Flags)
                ) && 
                (
                    this.LastEditTimestamp == input.LastEditTimestamp ||
                    this.LastEditTimestamp.Equals(input.LastEditTimestamp)
                ) && 
                (
                    this.MatchContent == input.MatchContent ||
                    (this.MatchContent != null &&
                    this.MatchContent.Equals(input.MatchContent))
                ) && 
                (
                    this.MatchSubject == input.MatchSubject ||
                    (this.MatchSubject != null &&
                    this.MatchSubject.Equals(input.MatchSubject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AvatarUrl != null)
                    hashCode = hashCode * 59 + this.AvatarUrl.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ContentType != null)
                    hashCode = hashCode * 59 + this.ContentType.GetHashCode();
                if (this.DisplayRecipient != null)
                    hashCode = hashCode * 59 + this.DisplayRecipient.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsMeMessage != null)
                    hashCode = hashCode * 59 + this.IsMeMessage.GetHashCode();
                if (this.Reactions != null)
                    hashCode = hashCode * 59 + this.Reactions.GetHashCode();
                if (this.RecipientId != null)
                    hashCode = hashCode * 59 + this.RecipientId.GetHashCode();
                if (this.SenderEmail != null)
                    hashCode = hashCode * 59 + this.SenderEmail.GetHashCode();
                if (this.SenderFullName != null)
                    hashCode = hashCode * 59 + this.SenderFullName.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.SenderRealmStr != null)
                    hashCode = hashCode * 59 + this.SenderRealmStr.GetHashCode();
                if (this.StreamId != null)
                    hashCode = hashCode * 59 + this.StreamId.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TopicLinks != null)
                    hashCode = hashCode * 59 + this.TopicLinks.GetHashCode();
                if (this.Submessages != null)
                    hashCode = hashCode * 59 + this.Submessages.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                hashCode = hashCode * 59 + this.LastEditTimestamp.GetHashCode();
                if (this.MatchContent != null)
                    hashCode = hashCode * 59 + this.MatchContent.GetHashCode();
                if (this.MatchSubject != null)
                    hashCode = hashCode * 59 + this.MatchSubject.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
