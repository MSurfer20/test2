openapi: 3.0.1
info:
  contact:
    url: https://zulip.com
  description: |
    Powerful open source group chat
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Zulip REST API
  version: 1.0.0
servers:
- url: https://{subdomain}.zulipchat.com/api/v1
  variables:
    subdomain:
      default: example
- url: '{server}/api/v1'
  variables:
    server:
      default: https://
- url: https://chat.zulip.org/api/v1
- url: http://localhost:9991/api/v1
security:
- basicAuth: []
paths:
  /fetch_api_key:
    post:
      description: |
        This API endpoint is used by clients such as the Zulip mobile and
        terminal apps to implement password-based authentication.  Given the
        user's Zulip login credentials, it returns a Zulip API key that the client
        can use to make requests requests as the user.

        This endpoint is only useful for Zulip servers/organizations with
        EmailAuthBackend or LDAPAuthBackend enabled.

        The Zulip mobile apps also support SSO/social authentication (GitHub
        auth, Google auth, SAML, etc.) that does not use this endpoint.  Instead,
        the mobile apps reuse the web login flow passing the `mobile_flow_otp` in
        a webview, and the credentials are returned to the app (encrypted) via a redirect
        to a `zulip://` URL.

        !!! warn ""
            **Note:** If you signed up using passwordless authentication and
            never had a password, you can [reset your password](/help/change-your-password).

            See the [API keys](/api/api-keys) documentation for
            more details on how to download API key manually.

        In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html),
        see also [the unauthenticated variant](/api/dev-fetch-api-key).
      operationId: fetch-api-key
      parameters:
      - description: |
          The username to be used for authentication (typically, the email
          address, but depending on configuration, it could be an LDAP username).

          See the `require_email_format_usernames` parameter documented in
          [GET /server_settings](/api/get-server-settings) for details.
        example: iago@zulip.com
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      - description: |
          The user's Zulip password (or LDAP password, if LDAP authentication is in use).
        example: abcd1234
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiKeyResponse'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Valid credentials the client can use to access the Zulip API.
      security: []
      summary: Fetch an API key (production)
      tags:
      - authentication
  /dev_fetch_api_key:
    post:
      description: |
        For easy testing of mobile apps and other clients and against Zulip
        development servers, we support fetching a Zulip API key for any user
        on the development server without authentication (so that they can
        implement analogues of the one-click login process available for Zulip
        development servers on the web).

        **Note:** This endpoint is only available on Zulip development
        servers; for obvious security reasons it will always return an error
        in a Zulip production server.

        `POST {{ api_url }}/v1/dev_fetch_api_key`
      operationId: dev-fetch-api-key
      parameters:
      - description: |
          The email address for the user that owns the API key.
        example: iago@zulip.com
        explode: true
        in: query
        name: username
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiKeyResponse'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      security: []
      summary: Fetch an API key (development only)
      tags:
      - authentication
  /events:
    delete:
      description: |
        Delete a previously registered queue.

        `DELETE {{ api_url }}/v1/events`
      operationId: delete-queue
      parameters:
      - description: |
          The ID of an event queue that was previously registered via `POST
          /api/v1/register` (see [Register a queue](/api/register-queue)).
        example: 1375801870:2942
        explode: true
        in: query
        name: queue_id
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/BadEventQueueIdError'
                - description: |
                    A typical JSON response for when the `queue_id` is non-existent or the
                    associated queue has already been deleted
          description: Bad request.
      summary: Delete an event queue
      tags:
      - real_time_events
    get:
      description: |
        `GET {{ api_url }}/v1/events`

        This endpoint allows you to receive new events from
        [a registered event queue](/api/register-queue).

        Long-lived clients should use the
        `event_queue_longpoll_timeout_seconds` property returned by
        `POST /register` as the client-side HTTP request timeout for
        calls to this endpoint.  It is guaranteed to be higher than
        heartbeat frequency and should be respected by clients to
        avoid breaking when heartbeat frequency increases.
      operationId: get-events
      parameters:
      - description: |
          The ID of an event queue that was previously registered via `POST
          /api/v1/register` (see [Register a queue](/api/register-queue)).
        example: 1375801870:2942
        explode: true
        in: query
        name: queue_id
        required: true
        schema:
          type: string
        style: form
      - description: |
          The highest event ID in this queue that you've received and
          wish to acknowledge. See the [code for
          `call_on_each_event`](https://github.com/zulip/python-zulip-api/blob/master/zulip/zulip/__init__.py)
          in the [zulip Python
          module](https://github.com/zulip/python-zulip-api) for an
          example implementation of correctly processing each event
          exactly once.
        example: -1
        explode: true
        in: query
        name: last_event_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Set to `true` if the client is requesting a nonblocking reply. If not
          specified, the request will block until either a new event is available
          or a few minutes have passed, in which case the server will send the
          client a heartbeat event.
        example: true
        explode: true
        in: query
        name: dont_block
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    queue_id: 1375801870:2942
                    events:
                    - id: 0
                      message:
                        avatar_url: https://url/for/othello-bots/avatar
                        client: website
                        content: I come not, friends, to steal away your hearts.
                        content_type: text/x-markdown
                        display_recipient: Denmark
                        id: 12345678
                        recipient_id: 12314
                        sender_email: othello-bot@example.com
                        sender_full_name: Othello Bot
                        sender_id: 13215
                        sender_realm_str: example
                        topic_links: []
                        timestamp: 1375978403
                        type: stream
                      type: message
                    - id: 1
                      message:
                        avatar_url: https://url/for/othello-bots/avatar
                        client: website
                        content: With mirth and laughter let old wrinkles come.
                        content_type: text/x-markdown
                        display_recipient:
                        - email: hamlet@example.com
                          full_name: Hamlet of Denmark
                          id: 31572
                        id: 12345679
                        recipient_id: 18391
                        sender_email: othello-bot@example.com
                        sender_full_name: Othello Bot
                        sender_id: 13215
                        sender_realm_str: example
                        subject: ""
                        topic_links: []
                        timestamp: 1375978404
                        type: private
                      type: message
                    msg: ""
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    events:
                      description: |
                        An array of `event` objects (possibly zero-length if `dont_block` is
                        set) with IDs newer than `last_event_id`. Event IDs are
                        guaranteed to be increasing, but they are not guaranteed to be
                        consecutive.
                      items:
                        oneOf:
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user's set of configured
                            [alert words](/help/add-an-alert-word) have changed.
                          example:
                            type: alert_words
                            alert_words:
                            - alert_word
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - alert_words
                                type: string
                            alert_words:
                              description: |
                                Array of strings, each a configured alert word.
                              items:
                                type: string
                              type: array
                          type: object
                        - additionalProperties: false
                          deprecated: true
                          description: |
                            Event sent to clients that that have requested the
                            `update_display_settings` event type and did not include
                            `user_settings_object` in their `client_capabilities` when
                            registering the event queue.

                            **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                            connecting to newer servers should declare the `user_settings_object`
                            client capability and process the `user_settings` event type instead.
                          example:
                            type: update_display_settings
                            setting_name: high_contrast_mode
                            setting: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - update_display_settings
                                type: string
                            setting_name:
                              description: |
                                Name of the changed display setting.
                              type: string
                            setting:
                              description: |
                                New value of the changed setting.
                              oneOf:
                              - type: boolean
                              - type: integer
                              - type: string
                            language_name:
                              description: |
                                Present only if the setting to be changed is
                                `default_language`. Contains the name of the
                                new default language in English.
                              type: string
                          type: object
                        - additionalProperties: false
                          deprecated: true
                          description: |
                            Event sent to a user's clients when that user's [notification
                            settings](/api/update-settings) have changed with an additional
                            rule that it is only sent to clients that did not include
                            `user_settings_object` in their `client_capabilities` when
                            registering the event queue.

                            **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                            connecting to newer servers should declare the `user_settings_object`
                            client capability and process the `user_settings` event type instead.
                          example:
                            type: update_global_notifications
                            notification_name: enable_sounds
                            setting: true
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - update_global_notifications
                                type: string
                            notification_name:
                              description: |
                                Name of the changed notification setting.
                              type: string
                            setting:
                              description: |
                                New value of the changed setting.
                              oneOf:
                              - type: boolean
                              - type: integer
                              - type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user's settings
                            have changed.

                            **Changes**: New in Zulip 5.0 (feature level 89), replacing the
                            previous `update_display_settings` and `update_global_notifications`
                            event types, which are still present for backwards compatibility reasons.
                          example:
                            type: user_settings
                            op: update
                            property: high_contrast_mode
                            value: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_settings
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            property:
                              description: |
                                Name of the changed setting.
                              type: string
                            value:
                              description: |
                                New value of the changed setting.
                              oneOf:
                              - type: boolean
                              - type: integer
                              - type: string
                            language_name:
                              description: |
                                Present only if the setting to be changed is
                                `default_language`. Contains the name of the
                                new default language in English.
                              type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent generally to all users in an organization for changes
                            in the set of users or those users metadata.
                          example:
                            type: realm_user
                            op: update
                            person:
                              avatar_source: G
                              avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=3
                              avatar_url_medium: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&s=500&version=3
                              avatar_version: 3
                              user_id: 10
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_user
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            person:
                              description: |
                                Object containing the changed details of the user.
                                It has multiple forms depending on the value changed.
                              oneOf:
                              - additionalProperties: false
                                description: |
                                  When a user changes their full name.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of modified user.
                                    type: integer
                                  full_name:
                                    description: |
                                      The new full name for the user.
                                    type: string
                                type: object
                              - additionalProperties: false
                                description: |
                                  When a user changes their avatar.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user who is affected by this change.
                                    type: integer
                                  avatar_url:
                                    description: |
                                      The URL of the new avatar for the user.
                                    type: string
                                  avatar_source:
                                    description: |
                                      The new avatar data source type for the user.

                                      Value values are `G` (gravatar) and `U` (uploaded by user).
                                    type: string
                                  avatar_url_medium:
                                    description: |
                                      The new medium-size avatar URL for user.
                                    type: string
                                  avatar_version:
                                    description: |
                                      The version number for the user's avatar.  This is useful
                                      for cache-busting.
                                    type: integer
                                type: object
                              - additionalProperties: false
                                description: |
                                  When a user changes their timezone setting.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of modified user.
                                    type: integer
                                  email:
                                    deprecated: true
                                    description: |
                                      The email of the user.

                                      **Deprecated**: This field will be removed in a future
                                      release as it is redundant with the `user_id`.
                                    type: string
                                  timezone:
                                    description: |
                                      The new timezone of the user.
                                    type: string
                                type: object
                              - additionalProperties: false
                                description: |
                                  When the owner of a bot changes.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user/bot whose owner has changed.
                                    type: integer
                                  bot_owner_id:
                                    description: |
                                      The user id of the new bot owner.
                                    type: integer
                                type: object
                              - additionalProperties: false
                                description: |
                                  When the role of a user changes.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user affected by this change.
                                    type: integer
                                  role:
                                    description: |
                                      The new role of the user in integer.
                                    enum:
                                    - 100
                                    - 200
                                    - 300
                                    - 400
                                    - 600
                                    type: integer
                                type: object
                              - additionalProperties: false
                                description: |
                                  When billing role of a user changes.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user affected by this change.
                                    type: integer
                                  is_billing_admin:
                                    description: |
                                      A boolean specifying whether the user is now a billing administrator.

                                      **Changes**: New in Zulip 5.0 (feature level 73).
                                    type: boolean
                                type: object
                              - additionalProperties: false
                                description: |
                                  When the delivery email of a user changes.

                                  Note: This event is only visible to admins.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user affected by this change.
                                    type: integer
                                  delivery_email:
                                    description: |
                                      The new delivery email of the user.
                                    type: string
                                type: object
                              - additionalProperties: false
                                description: |
                                  When the user updates one of their custom profile
                                  fields.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user affected by this change.
                                    type: integer
                                  custom_profile_field:
                                    additionalProperties: false
                                    description: |
                                      Object containing details about the custom
                                      profile data change.
                                    properties:
                                      id:
                                        description: |
                                          The ID of the custom profile field which user updated.
                                        type: integer
                                      value:
                                        description: |
                                          User's personal value for this custom profile field.
                                        type: string
                                      rendered_value:
                                        description: |
                                          The `value` rendered in HTML.  Will only be present for
                                          custom profile field types that support Markdown rendering.

                                          This user-generated HTML content should be rendered
                                          using the same CSS and client-side security protections
                                          as are used for message content.
                                        type: string
                                    type: object
                                type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user's stream subscriptions
                            have changed (either the set of subscriptions or their properties).
                          example:
                            type: subscription
                            op: add
                            subscriptions:
                            - name: test_stream
                              stream_id: 9
                              description: ""
                              rendered_description: ""
                              invite_only: false
                              is_web_public: false
                              stream_post_policy: 1
                              history_public_to_subscribers: true
                              first_message_id: null
                              message_retention_days: null
                              is_announcement_only: false
                              color: '#76ce90'
                              is_muted: false
                              pin_to_top: false
                              audible_notifications: null
                              desktop_notifications: null
                              email_notifications: null
                              push_notifications: null
                              wildcard_mentions_notify: null
                              in_home_view: true
                              email_address: test_stream.af64447e9e39374841063747ade8e6b0.show-sender@testserver
                              stream_weekly_traffic: null
                              subscribers:
                              - 10
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - subscription
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            subscriptions:
                              description: |
                                A list of dictionaries where each dictionary contains
                                information about one of the subscribed streams.
                              items:
                                $ref: '#/components/schemas/Subscriptions'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user has been unsubscribed
                            from one or more streams.
                          example:
                            type: subscription
                            op: remove
                            subscriptions:
                            - name: test_stream
                              stream_id: 9
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - subscription
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            subscriptions:
                              description: |
                                A list of dictionaries, where each dictionary contains
                                information about one of the newly unsubscribed streams.
                              items:
                                additionalProperties: false
                                description: |
                                  Dictionary containing details about the unsubscribed stream.
                                properties:
                                  stream_id:
                                    description: |
                                      The ID of the stream.
                                    type: integer
                                  name:
                                    description: |
                                      The name of the stream.
                                    type: string
                                type: object
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when a property of the user's
                            subscription to a stream has been updated.  This event is used
                            only for personal properties like `is_muted`; see the `stream` event
                            for global properties of a stream.
                          example:
                            op: update
                            type: subscription
                            property: pin_to_top
                            value: true
                            stream_id: 11
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - subscription
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            stream_id:
                              description: |
                                The ID of the stream whose subscription details have changed.
                              type: integer
                            property:
                              description: |
                                The property of the subscription which has changed. See
                                [/users/me/subscriptions/properties GET](/api/update-subscription-settings)
                                for details on the various properties of a stream.

                                Clients should generally handle an unknown property received here without
                                crashing, since that will naturally happen when connecting to a Zulip
                                server running a new version that adds a new subscription property.
                              type: string
                            value:
                              description: |
                                The new value of the changed property.
                              oneOf:
                              - type: integer
                              - type: boolean
                              - type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to other users when users have been subscribed to
                            streams. Sent to all users if the stream is public or to only
                            the existing subscribers if the stream is private.
                          example:
                            type: subscription
                            op: peer_add
                            stream_id: 9
                            user_id: 12
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - subscription
                                type: string
                            op:
                              enum:
                              - peer_add
                              type: string
                            stream_ids:
                              description: |
                                The IDs of the streams to which the user has subscribed.
                              items:
                                type: integer
                              type: array
                            user_ids:
                              description: |
                                The IDs of the users who subscribed.
                              items:
                                type: integer
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to other users when users have been unsubscribed
                            from streams. Sent to all users if the stream is public or to only
                            the existing subscribers if the stream is private.
                          example:
                            type: subscription
                            op: peer_remove
                            stream_id: 9
                            user_id: 12
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - subscription
                                type: string
                            op:
                              enum:
                              - peer_remove
                              type: string
                            stream_ids:
                              description: |
                                The IDs of the streams from which the users have been
                                unsubscribed from.
                              items:
                                type: integer
                              type: array
                            user_ids:
                              description: |
                                The IDs of the users who have been unsubscribed.
                              items:
                                type: integer
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event type for messages.
                          example:
                            type: message
                            message:
                              id: 31
                              sender_id: 10
                              content: <p>First message ...<a href="user_uploads/2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt">zulip.txt</a></p>
                              recipient_id: 23
                              timestamp: 1594825416
                              client: test suite
                              subject: test
                              topic_links: []
                              is_me_message: false
                              reactions: []
                              submessages: []
                              sender_full_name: King Hamlet
                              sender_short_name: hamlet
                              sender_email: user10@zulip.testserver
                              sender_realm_str: zulip
                              display_recipient: Denmark
                              type: stream
                              stream_id: 1
                              avatar_url: null
                              content_type: text/html
                            flags: []
                            id: 1
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - message
                                type: string
                            message:
                              $ref: '#/components/schemas/Messages'
                            flags:
                              description: |
                                The user's [message flags][message-flags] for the message.

                                Clients should inspect the flags field rather than assuming that
                                new messages are unread; [muted users](/api/mute-user), messages
                                sent by the current user, and more subtle scenarios can result
                                in a new message that the server has already marked as read for
                                the user.

                                [message-flags]: /api/update-message-flags#available-flags
                              items:
                                type: string
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when the user completes the
                            OAuth flow for the [Zoom integration](/help/start-a-call).  Clients need
                            to know whether initiating Zoom OAuth is required before creating a Zoom call.
                          example:
                            type: has_zoom_token
                            value: true
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - has_zoom_token
                                type: string
                            value:
                              description: |
                                A boolean specifying whether the user has zoom
                                token or not.
                              type: boolean
                          type: object
                        - additionalProperties: false
                          description: |
                            A simple event sent to organization administrators when the
                            set of invitations changes; this tells clients they need to refetch
                            data from `GET /invites` if they are displaying UI containing active
                            invitations.
                          example:
                            type: invites_changed
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - invites_changed
                                type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when a new
                            user joins.  Processing this event is important to being able
                            to display basic details on other users given only their ID.
                          example:
                            type: realm_user
                            op: add
                            person:
                              email: foo@zulip.com
                              user_id: 38
                              avatar_version: 1
                              is_admin: false
                              is_owner: false
                              is_guest: false
                              is_billing_admin: false
                              role: 400
                              is_bot: false
                              full_name: full name
                              timezone: ""
                              is_active: true
                              date_joined: 2020-07-15T15:04:02.030833+00:00
                              avatar_url: https://secure.gravatar.com/avatar/c6b5578d4964bd9c5fae593c6868912a?d=identicon&version=1
                              profile_data: {}
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_user
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            person:
                              $ref: '#/components/schemas/User'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when
                            a user is deactivated.
                          example:
                            type: realm_user
                            op: remove
                            person:
                              user_id: 35
                              full_name: Foo Bot
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_user
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            person:
                              additionalProperties: false
                              description: |
                                Object containing details of the deactivated user.
                              properties:
                                user_id:
                                  description: |
                                    The ID of the deactivated user.
                                  type: integer
                                full_name:
                                  deprecated: true
                                  description: |
                                    The full name of the user.

                                    **Deprecated**: We expect to remove this field in the future.
                                  type: string
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in an organization when a user comes
                            back online after being long offline.  While most presence updates happen
                            done via polling the main presence endpoint, this event is important
                            to avoid confusing users when someone comes online and then immediately sends
                            a message (one wouldn't want them to still appear offline at that point!).
                          example:
                            type: presence
                            user_id: 10
                            email: user10@zulip.testserver
                            server_timestamp: 1.5948254453200784E9
                            presence:
                              ZulipAndroid/1.0:
                                client: ZulipAndroid/1.0
                                status: idle
                                timestamp: 1594825445
                                pushable: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - presence
                                type: string
                            user_id:
                              description: |
                                The ID of modified user.
                              type: integer
                            email:
                              deprecated: true
                              description: |
                                The email of the user.

                                **Deprecated**: This field will be removed in a future
                                release as it is redundant with the `user_id`.
                              type: string
                            server_timestamp:
                              description: |
                                The timestamp of when the Zulip server received the user's
                                presence as a UNIX timestamp.
                              type: number
                            presence:
                              additionalProperties:
                                $ref: '#/components/schemas/Presence'
                              description: |
                                An object contatining a set of objects which describe the
                                the user's presence on various platforms.
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a new stream is created to users who can see
                            the new stream exists (for private streams, only subscribers and
                            organization administrators will receive this event).

                            Note that organization administrators who are not subscribed will
                            not be able to see content on the stream; just that it exists.
                          example:
                            type: stream
                            op: create
                            streams:
                            - name: private
                              stream_id: 12
                              description: ""
                              rendered_description: ""
                              invite_only: true
                              is_web_public: false
                              stream_post_policy: 1
                              history_public_to_subscribers: false
                              first_message_id: null
                              message_retention_days: null
                              is_announcement_only: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - stream
                                type: string
                            op:
                              enum:
                              - create
                              type: string
                            streams:
                              description: |
                                Array of stream objects, each containing
                                details about the newly added stream(s).
                              items:
                                $ref: '#/components/schemas/BasicStream'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users who can see a stream when it is deactivated.
                          example:
                            type: stream
                            op: delete
                            streams:
                            - name: private
                              stream_id: 12
                              description: ""
                              rendered_description: ""
                              invite_only: true
                              is_web_public: false
                              stream_post_policy: 1
                              history_public_to_subscribers: false
                              first_message_id: null
                              message_retention_days: null
                              is_announcement_only: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - stream
                                type: string
                            op:
                              enum:
                              - delete
                              type: string
                            streams:
                              description: |
                                Array of stream objects, each contatining
                                details about a stream that was deleted.
                              items:
                                $ref: '#/components/schemas/BasicStream'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users who can see that a stream exists
                            when a property of that stream changes.
                          example:
                            op: update
                            type: stream
                            property: invite_only
                            value: true
                            history_public_to_subscribers: true
                            is_web_public: false
                            stream_id: 11
                            name: test_stream
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - stream
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            stream_id:
                              description: |
                                The ID of the stream whose details have changed.
                              type: integer
                            name:
                              description: |
                                The name of the stream whose details have changed.
                              type: string
                            property:
                              description: |
                                The property of the stream which has changed. See
                                [/stream GET](/api/get-streams) for details on the various
                                properties of a stream.

                                Clients should handle an "unknown" property received here without
                                crashing, since that can happen when connecting to a server running a
                                newer version of Zulip with new features.
                              type: string
                            value:
                              description: |
                                The new value of the changed property.
                              oneOf:
                              - type: integer
                              - type: boolean
                              - type: string
                            rendered_description:
                              description: |
                                Note: Only present if the changed property was `description`.

                                The short description of the stream rendered as HTML, intended to
                                be used when displaying the stream description in a UI.

                                One should use the standard Zulip rendered_markdown CSS when
                                displaying this content so that emoji, LaTeX, and other syntax
                                work correctly.  And any client-side security logic for
                                user-generated message content should be applied when displaying
                                this HTML as though it were the body of a Zulip message.
                              type: string
                            history_public_to_subscribers:
                              description: |
                                Note: Only present if the changed property was `invite_only`.

                                Whether the history of the stream is public to its subscribers.

                                Currently always true for public streams (i.e. invite_only=False implies
                                history_public_to_subscribers=True), but clients should not make that
                                assumption, as we may change that behavior in the future.
                              type: boolean
                            is_web_public:
                              description: |
                                Note: Only present if the changed property was `invite_only`.

                                Whether the stream's history is now readable by web-public spectators.

                                **Changes**: New in Zulip 5.0 (feature level 71).
                              type: boolean
                          type: object
                        - allOf:
                          - $ref: '#/components/schemas/EmojiReactionBase'
                          - additionalProperties: false
                            example:
                              type: reaction
                              op: add
                              user_id: 10
                              user:
                                user_id: 10
                                email: user10@zulip.testserver
                                full_name: King Hamlet
                              message_id: 32
                              emoji_name: tada
                              emoji_code: 1f389
                              reaction_type: unicode_emoji
                              id: 0
                            properties:
                              emoji_code: {}
                              emoji_name: {}
                              reaction_type: {}
                              user_id: {}
                              user: {}
                              id:
                                $ref: '#/components/schemas/EventIdSchema'
                              type:
                                allOf:
                                - $ref: '#/components/schemas/EventTypeSchema'
                                - enum:
                                  - reaction
                                  type: string
                              op:
                                enum:
                                - add
                                type: string
                              message_id:
                                description: |
                                  The ID of the message to which a reaction was
                                  added.
                                type: integer
                            type: object
                          description: |
                            Event sent when a reaction is added to a message.
                            Sent to all users who were recipients of the message.
                        - allOf:
                          - $ref: '#/components/schemas/EmojiReactionBase'
                          - additionalProperties: false
                            example:
                              type: reaction
                              op: remove
                              user_id: 10
                              user:
                                user_id: 10
                                email: user10@zulip.testserver
                                full_name: King Hamlet
                              message_id: 52
                              emoji_name: tada
                              emoji_code: 1f389
                              reaction_type: unicode_emoji
                              id: 0
                            properties:
                              emoji_code: {}
                              emoji_name: {}
                              reaction_type: {}
                              user_id: {}
                              user: {}
                              id:
                                $ref: '#/components/schemas/EventIdSchema'
                              type:
                                allOf:
                                - $ref: '#/components/schemas/EventTypeSchema'
                                - enum:
                                  - reaction
                                  type: string
                              op:
                                enum:
                                - remove
                                type: string
                              message_id:
                                description: |
                                  The ID of the message from which the reaction was
                                  removed.
                                type: integer
                            type: object
                          description: |
                            Event sent when a reaction is removed from a message.
                            Sent to all users who were recipients of the message.
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when the user uploads a new file
                            in a Zulip message.  Useful to implement live update in UI showing all files
                            the current user has uploaded.
                          example:
                            type: attachment
                            op: add
                            attachment:
                              id: 1
                              name: zulip.txt
                              path_id: 2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt
                              size: 6
                              create_time: 1594825414000
                              messages: []
                            upload_space_used: 6
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - attachment
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            attachment:
                              $ref: '#/components/schemas/Attachments'
                            upload_space_used:
                              description: |
                                The total size of all files uploaded by in the organization,
                                in bytes.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent sent to a user's clients when details of a file that user
                            uploaded are changed.  Most updates will be changes in the list of
                            messages that reference the uploaded file.
                          example:
                            type: attachment
                            op: update
                            attachment:
                              id: 1
                              name: zulip.txt
                              path_id: 2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt
                              size: 6
                              create_time: 1594825414000
                              messages: []
                            upload_space_used: 6
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - attachment
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            attachment:
                              $ref: '#/components/schemas/Attachments'
                            upload_space_used:
                              description: |
                                The total size of all files uploaded by in the organization,
                                in bytes.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when the user deletes a file
                            they had uploaded.  Useful primarily for UI showing all the files
                            the current user has uploaded.
                          example:
                            type: attachment
                            op: remove
                            attachment:
                              id: 1
                            upload_space_used: 0
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - attachment
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            attachment:
                              additionalProperties: false
                              description: |
                                Dictionary containing the id of the deleted attachment.
                              properties:
                                id:
                                  description: |
                                    The ID of the deleted attachment.
                                  type: integer
                              type: object
                            upload_space_used:
                              description: |
                                The total size of all files uploaded by in the organization,
                                in bytes.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a submessage is added to a message.

                            Submessages are an **experimental** API used for widgets such as the
                            `/poll` widget in Zulip.
                          example:
                            type: submessage
                            msg_type: widget
                            message_id: 970461
                            submessage_id: 4737
                            sender_id: 58
                            content: '{"type":"vote","key":"58,1","vote":1}'
                            id: 28
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - submessage
                                type: string
                            msg_type:
                              description: |
                                The type of the message.
                              type: string
                            content:
                              description: |
                                The new content of the submessage.
                              type: string
                            message_id:
                              description: |
                                The ID of the message to which the submessage has been added.
                              type: integer
                            sender_id:
                              description: |
                                The ID of the user who sent the message.
                              type: integer
                            submessage_id:
                              description: |
                                The ID of the submessage.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            status of a user changes.
                          example:
                            type: user_status
                            user_id: 10
                            away: true
                            status_text: out to lunch
                            emoji_name: car
                            emoji_code: 1f697
                            reaction_type: unicode_emoji
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_status
                                type: string
                            away:
                              description: |
                                Whether the user has marked themself "away" with this status.
                              type: boolean
                            status_text:
                              description: |
                                The text content of the status message.
                              type: string
                            emoji_name:
                              description: |
                                The [emoji name](/api/add-reaction#parameters) for the emoji
                                the user selected for their new status.

                                This will be "" for users who set a status without selecting
                                an emoji.

                                **Changes**; New in Zulip 5.0 (feature level 86).
                              type: string
                            emoji_code:
                              description: |
                                The [emoji code](/api/add-reaction#parameters) for the emoji
                                the user selected for their new status.

                                This will be "" for users who set a status without selecting
                                an emoji.

                                **Changes**; New in Zulip 5.0 (feature level 86).
                              type: string
                            reaction_type:
                              description: |
                                The [emoji type](/api/add-reaction#parameters) for the emoji
                                the user selected for their new status.

                                This will be "" for users who set a status without selecting
                                an emoji.

                                **Changes**; New in Zulip 5.0 (feature level 86).
                              type: string
                            user_id:
                              description: |
                                The ID of the user whose status changed.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when new custom
                            profile field types are configured for that Zulip organization.
                          example:
                            type: custom_profile_fields
                            fields:
                            - id: 1
                              name: Phone number
                              type: 1
                              hint: ""
                              field_data: ""
                              order: 1
                            - id: 2
                              name: Biography
                              type: 2
                              hint: What are you known for?
                              field_data: ""
                              order: 2
                            - id: 3
                              name: Favorite food
                              type: 1
                              hint: Or drink, if you'd prefer
                              field_data: ""
                              order: 3
                            - id: 4
                              name: Favorite editor
                              type: 3
                              hint: ""
                              field_data: '{"vim":{"text":"Vim","order":"1"},"emacs":{"text":"Emacs","order":"2"}}'
                              order: 4
                            - id: 5
                              name: Birthday
                              type: 4
                              hint: ""
                              field_data: ""
                              order: 5
                            - id: 6
                              name: Favorite website
                              type: 5
                              hint: Or your personal blog's URL
                              field_data: ""
                              order: 6
                            - id: 7
                              name: Mentor
                              type: 6
                              hint: ""
                              field_data: ""
                              order: 7
                            - id: 8
                              name: GitHub
                              type: 7
                              hint: Enter your GitHub username
                              field_data: '{"subtype":"github"}'
                              order: 8
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - custom_profile_fields
                                type: string
                            fields:
                              description: |
                                An array of dictionaries where each dictionary contains
                                details of a single new custom profile field for the Zulip
                                organization.
                              items:
                                $ref: '#/components/schemas/CustomProfileField'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when an organization
                            administrator changes the organization's configured default stream groups.

                            Default stream groups are an **experimental** feature that is not yet
                            stabilized.
                          example:
                            type: default_stream_groups
                            default_stream_groups:
                            - name: group1
                              id: 2
                              description: New description
                              streams:
                              - name: Scotland
                                stream_id: 3
                                description: Located in the United Kingdom
                                rendered_description: <p>Located in the United Kingdom</p>
                                invite_only: false
                                is_web_public: false
                                stream_post_policy: 1
                                history_public_to_subscribers: true
                                first_message_id: 1
                                message_retention_days: null
                                is_announcement_only: false
                              - name: Denmark
                                stream_id: 1
                                description: A Scandinavian country
                                rendered_description: <p>A Scandinavian country</p>
                                invite_only: false
                                is_web_public: false
                                stream_post_policy: 1
                                history_public_to_subscribers: true
                                first_message_id: 4
                                message_retention_days: null
                                is_announcement_only: false
                              - name: Verona
                                stream_id: 5
                                description: A city in Italy
                                rendered_description: <p>A city in Italy</p>
                                invite_only: false
                                is_web_public: false
                                stream_post_policy: 1
                                history_public_to_subscribers: true
                                first_message_id: 6
                                message_retention_days: null
                                is_announcement_only: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - default_stream_groups
                                type: string
                            default_stream_groups:
                              description: |
                                An array of dictionaries where each dictionary
                                contains details about a single default stream group.
                              items:
                                $ref: '#/components/schemas/DefaultStreamGroup'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            default streams in the organization are changed by an
                            organization administrator.
                          example:
                            type: default_streams
                            default_streams:
                            - name: Scotland
                              stream_id: 3
                              description: Located in the United Kingdom
                              rendered_description: <p>Located in the United Kingdom</p>
                              invite_only: false
                              is_web_public: false
                              stream_post_policy: 1
                              history_public_to_subscribers: true
                              first_message_id: 1
                              message_retention_days: null
                              is_announcement_only: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - default_streams
                                type: string
                            default_streams:
                              description: |
                                An array of dictionaries where each dictionary
                                contains details about a single default stream.
                              items:
                                $ref: '#/components/schemas/BasicStream'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a message has been deleted.
                            Sent to all users who received the message.

                            **Changes**: Before Zulip 5.0 (feature level 77), events
                            for private messages contained additional `sender_id` and
                            `recipient_id` fields.
                          example:
                            type: delete_message
                            message_type: private
                            message_id: 37
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - delete_message
                                type: string
                            message_ids:
                              description: |
                                The `message_ids` property will be present for clients that support
                                the `bulk_message_deletion` client capability.

                                An containing the IDs of the newly deleted messages.
                              items:
                                type: integer
                              type: array
                            message_id:
                              description: |
                                The `message_id` property will be present for clients that do not support
                                the `bulk_message_deletion` client capability.

                                The ID of the newly deleted message.
                              type: integer
                            message_type:
                              description: |
                                The type of message. Either 'stream' or 'private'.  The other keys
                                present in the event, necessary to update various frontend data structures
                                that might be tracking the message, depend on the message type.
                              enum:
                              - private
                              - stream
                              type: string
                            stream_id:
                              description: |
                                Only present for stream messages.

                                The ID of the stream to which the message was sent.
                              type: integer
                            topic:
                              description: |
                                Only present for stream messages.

                                The topic to which the message was sent.
                              type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user's set of
                            configured muted topics have changed.
                          example:
                            type: muted_topics
                            muted_topics:
                            - - Denmark
                              - topic
                              - 1594825442
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - muted_topics
                                type: string
                            muted_topics:
                              description: |
                                Array of tuples, where each tuple describes a muted topic.
                                The first element of tuple is the stream name in which the topic
                                has to be muted, the second element is the topic name to be muted
                                and the third element is an integer UNIX timestamp representing
                                when the topic was muted.
                              items:
                                items:
                                  oneOf:
                                  - type: string
                                  - type: integer
                                type: array
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user's clients when that user's set of
                            configured [muted users](/api/mute-user) have changed.

                            **Changes**: New in Zulip 4.0 (feature level 48).
                          example:
                            type: muted_users
                            muted_users:
                            - id: 1
                              timestamp: 1594825442
                            - id: 22
                              timestamp: 1654865392
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - muted_users
                                type: string
                            muted_users:
                              description: |
                                A list of dictionaries where each dictionary describes
                                a muted user.
                              items:
                                additionalProperties: false
                                description: |
                                  Object containing the user id and timestamp of a muted user.
                                properties:
                                  id:
                                    description: |
                                      The ID of the muted user.
                                    type: integer
                                  timestamp:
                                    description: |
                                      An integer UNIX timestamp representing when the user was muted.
                                    type: integer
                                type: object
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Heartbeat events are sent by the server to avoid
                            longpolling connections being affected by networks that
                            kill idle HTTP connections.

                            Clients do not need to do anything to process these
                            events, beyond the common `last_event_id` accounting.
                          example:
                            type: heartbeat
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - heartbeat
                                type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when the set of onboarding "hotspots" to show for
                            the current user have changed (E.g. because the user dismissed one).

                            Clients that feature a similar tutorial experience to the Zulip
                            web app may want to handle these events.
                          example:
                            type: hotspots
                            hotspots:
                            - name: intro_streams
                              title: Catch up on a stream
                              description: Messages sent to a stream are seen by everyone
                                subscribed to that stream. Try clicking on one of
                                the stream links below.
                              delay: 0.5
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - hotspots
                                type: string
                            hotspots:
                              description: |
                                An array of dictionaries where each
                                dictionary contains details about a single hotspot.
                              items:
                                $ref: '#/components/schemas/Hotspot'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a message has been edited.
                            Sent to all users who had received the original
                            message.
                          example:
                            type: update_message
                            user_id: 10
                            edit_timestamp: 1594825451
                            message_id: 58
                            stream_name: Verona
                            orig_content: hello
                            orig_rendered_content: <p>hello</p>
                            content: new content
                            rendered_content: <p>new content</p>
                            prev_rendered_content_version: 1
                            is_me_message: false
                            propagate_mode: change_all
                            stream_id: 5
                            orig_subject: test
                            subject: new_topic
                            topic_links: []
                            message_ids:
                            - 58
                            - 57
                            flags: []
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - update_message
                                type: string
                            user_id:
                              description: |
                                The ID of the user who sent the message.
                              type: integer
                            message_id:
                              description: |
                                The ID of the message which was edited.

                                This field should be used to apply content edits to the client's
                                cached message history.  If the stream or topic was changed, the
                                set of moved messages is encoded in the separate `message_ids`
                                field, which is guaranteed to include `message_id`.
                              type: integer
                            message_ids:
                              description: |
                                The list of IDs of messages to which any stream or topic changes
                                encoded in this event should be applied.

                                These messages are guaranteed to have all been previously sent
                                to stream `stream_id` with topic `orig_subject`, and have been
                                moved to `new_stream_id` with topic `subject` (if those fields
                                are present in the event).

                                Clients processing these events should update all cached message
                                history associated with the moved messages (including adjusting
                                `unread_msgs` data structures, where the client may not have the
                                message itself in its history) to reflect the new stream and
                                topic.

                                Content changes should be applied only to the single message
                                indicated by `message_id`.
                              items:
                                type: integer
                              type: array
                            edit_timestamp:
                              description: |
                                The time when this message edit operation was processed by the
                                server.
                              type: integer
                            stream_name:
                              description: |
                                Only present if the message was originally sent to a stream.

                                The name of the stream that the message was sent to.  Clients
                                are recommended to use the `stream_id` field instead.
                              type: string
                            stream_id:
                              description: |
                                Only present if the message was originally sent to a stream.

                                The pre-edit stream for all of the messages with IDs in
                                `message_ids`.
                              type: integer
                            new_stream_id:
                              description: |
                                Note: Only present if message(s) were moved to a different stream.

                                The post-edit stream for all of the messages with IDs in
                                `message_ids`.
                              type: integer
                            propagate_mode:
                              description: |
                                The choice the editing user made about which messages should be
                                affected by a stream/topic edit: just the one indicated in
                                `message_id`, messages in the same topic that had been sent
                                after this one, or all messages in that topic.

                                This parameter should be used to decide whether to change
                                navigation and compose box state in response to the edit.  For
                                example, if the user was previously in topic narrow, and the
                                topic was edited with `change_later` or `change_all`, the Zulip
                                web app will automatically navigate to the new topic narrow.
                                Similarly, a message being composed to the old topic should
                                have its recipient changed to the new topic.

                                This navigation makes it much more convenient to move content
                                between topics without disruption or messages continuing
                                to be sent to the pre-edit topic by accident.
                              enum:
                              - change_one
                              - change_later
                              - change_all
                              type: string
                            orig_subject:
                              description: |
                                The pre-edit topic for all of the messages with IDs in
                                `message_ids`.

                                Only present if this event moved messages to a different
                                topic.
                              type: string
                            subject:
                              description: |
                                The post-edit topic for all of the messages with IDs in
                                `message_ids`.

                                Only present if this event moved messages to a different
                                topic.
                              type: string
                            topic_links:
                              description: |
                                Data on any links to be included in the `topic`
                                line (these are generated by
                                [custom linkification filter](/help/add-a-custom-linkifier)
                                that match content in the message's topic.), corresponding
                                to the post-edit topic.

                                Only present if this event moved messages to a different
                                topic.

                                **Changes**: This field contained a list of urls before
                                  Zulip 4.0 (feature level 46).

                                New in Zulip 3.0 (feature level 1).  Previously, this field
                                was called `subject_links`; clients are recommended to
                                rename `subject_links` to `topic_links` if present for
                                compatibility with older Zulip servers.
                              items:
                                additionalProperties: false
                                properties:
                                  text:
                                    description: |
                                      The original link text present in the topic.
                                    type: string
                                  url:
                                    description: |
                                      The expanded target url which the link points to.
                                    type: string
                                type: object
                              type: array
                            orig_content:
                              description: |
                                The original content of the message with ID `message_id`
                                immediately prior to this edit, in the original markdown.
                              type: string
                            orig_rendered_content:
                              description: |
                                The original content of the message with ID `message_id`
                                immediately prior to this edit, rendered as HTML.
                              type: string
                            prev_rendered_content_version:
                              description: |
                                The Markdown processor version number for the pre-edit message.

                                Clients should ignore this field.
                              type: integer
                            content:
                              description: |
                                The new content of the message with ID `message_id`, in the
                                original Markdown.
                              type: string
                            rendered_content:
                              description: |
                                The new content of the message with ID `message_id`,
                                rendered in HTML.
                              type: string
                            is_me_message:
                              description: |
                                Whether the message with ID `message_id` is now a
                                [/me status message][status-messages].

                                [status-messages]: /help/format-your-message-using-markdown#status-messages
                              type: boolean
                            flags:
                              description: |
                                The user's personal [message flags][message-flags] for the
                                message with ID `message_id` following the edit.

                                A client application should compare these to the original flags
                                to identify cases where a mention or alert word was added by the
                                edit.

                                [message-flags]: /api/update-message-flags#available-flags
                              items:
                                type: string
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a user starts typing a message.

                            Sent to all clients for users who would receive the
                            message being typed, with the additional rule that typing
                            notifications for stream messages are only sent to clients
                            that included `stream_typing_notifications` in their
                            `client_capabilities` when registering the event queue.

                            **Changes**: Typing notifications for stream messages are new in
                            Zulip 4.0 (feature level 58).

                            See the [typing endpoint docs](/api/set-typing-status) for more details.
                          example:
                            type: typing
                            op: start
                            sender:
                              user_id: 10
                              email: user10@zulip.testserver
                            recipients:
                            - user_id: 8
                              email: user8@zulip.testserver
                            - user_id: 10
                              email: user10@zulip.testserver
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - typing
                                type: string
                            op:
                              enum:
                              - start
                              type: string
                            message_type:
                              description: |
                                Type of message being composed.  Must be "stream" or "private",
                                as with sending a message.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                all typing notifications were implicitly private `private`.
                              enum:
                              - private
                              - stream
                              type: string
                            sender:
                              additionalProperties: false
                              description: |
                                Object describing the "sender" (i.e. the user who is typing a message).
                              properties:
                                user_id:
                                  description: |
                                    The user's ID.
                                  type: integer
                                email:
                                  description: |
                                    The Zulip display email address for the user.
                                  type: string
                              type: object
                            recipients:
                              description: |
                                Only present if `message_type` is `private`.

                                Array of dictionaries describing the set of users who would be recipients
                                of the message being typed.  Each dictionary contains details on one
                                one of the recipients users; the sending user is guaranteed to appear
                                among the recipients.
                              items:
                                additionalProperties: false
                                description: |
                                  Object containing the user id and email of a recipient.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user.
                                    type: integer
                                  email:
                                    description: |
                                      The Zulip display email address for the user.
                                    type: string
                                type: object
                              type: array
                            stream_id:
                              description: |
                                Only present if `message_type` is `stream`.

                                The unique ID of the stream to which message is being typed.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                typing notifications were only for private messages.
                              type: integer
                            topic:
                              description: |
                                Only present if `message_type` is `stream`.

                                Topic within the stream where the message is being typed.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                typing notifications were only for private messages.
                              type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent when a user stops typing a message.

                            Sent to all clients for users who would receive the message
                            that was previously being typed, with the additional rule
                            that typing notifications for stream messages are only sent to
                            clients that included `stream_typing_notifications` in their
                            `client_capabilities` when registering the event queue.

                            **Changes**: Typing notifications for stream messages are new in
                            Zulip 4.0 (feature level 58).

                            See the [typing endpoint docs](/api/set-typing-status) for more details.
                          example:
                            type: typing
                            op: stop
                            sender:
                              user_id: 10
                              email: user10@zulip.testserver
                            recipients:
                            - user_id: 8
                              email: user8@zulip.testserver
                            - user_id: 10
                              email: user10@zulip.testserver
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - typing
                                type: string
                            op:
                              enum:
                              - stop
                              type: string
                            message_type:
                              description: |
                                Type of message being composed.  Must be "stream" or "private",
                                as with sending a message.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                all typing notifications were implicitly private `private`.
                              enum:
                              - private
                              - stream
                              type: string
                            sender:
                              additionalProperties: false
                              description: |
                                Object describing the "sender" (i.e. the user who was previously
                                typing a message).
                              properties:
                                user_id:
                                  description: |
                                    The user's ID.
                                  type: integer
                                email:
                                  description: |
                                    The Zulip display email address for the user.
                                  type: string
                              type: object
                            recipients:
                              description: |
                                Only present for typing notifications for (group) private messages.

                                Array of dictionaries describing the set of users who would be recipients
                                of the message that stopped being typed.  Each dictionary contains
                                details on one one of the recipients users; the sending user is
                                guaranteed to appear among the recipients.
                              items:
                                additionalProperties: false
                                description: |
                                  Object containing the user id and email of a recipient.
                                properties:
                                  user_id:
                                    description: |
                                      The ID of the user.
                                    type: integer
                                  email:
                                    description: |
                                      The Zulip display email address for the user.
                                    type: string
                                type: object
                              type: array
                            stream_id:
                              description: |
                                Only present if `message_type` is `stream`.

                                The unique ID of the stream to which message is being typed.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                typing notifications were only for private messages.
                              type: integer
                            topic:
                              description: |
                                Only present if `message_type` is `stream`.

                                Topic within the stream where the message is being typed.

                                **Changes**: New in Zulip 4.0 (feature level 58).  Previously,
                                typing notifications were only for private messages.
                              type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user when [message flags][message-flags] are added
                            to a message.

                            [message-flags]: /api/update-message-flags#available-flags
                          example:
                            type: update_message_flags
                            op: add
                            operation: add
                            flag: starred
                            messages:
                            - 63
                            all: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - update_message_flags
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            operation:
                              deprecated: true
                              description: |
                                Old name for `op` for this event type.

                                **Deprecated**: This is deprecated; please use `op` instead
                                starting with Zulip 4.0 (feature level 32).
                              enum:
                              - add
                              type: string
                            flag:
                              description: |
                                The flag that was added.
                              type: string
                            messages:
                              description: |
                                Array containing the ids of all messages to which
                                the flag was added.
                              items:
                                type: integer
                              type: array
                            all:
                              description: |
                                Whether the flag was added to all messages (E.g. all messages
                                were marked as read).
                                If this is true, then the `messages` array will be empty.
                              type: boolean
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to a user when [message flags][message-flags] are
                            removed from a message.

                            [message-flags]: /api/update-message-flags#available-flags
                          example:
                            type: update_message_flags
                            op: remove
                            operation: remove
                            flag: starred
                            messages:
                            - 63
                            all: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - update_message_flags
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            operation:
                              deprecated: true
                              description: |
                                Old name for `op` for this event type.

                                **Deprecated**: This is deprecated; please use `op` instead
                                starting with Zulip 4.0 (feature level 32).
                              enum:
                              - remove
                              type: string
                            flag:
                              description: |
                                The flag to be removed.
                              type: string
                            messages:
                              description: |
                                Array containing the IDs of the messages from which the flag
                                was removed.
                              items:
                                type: integer
                              type: array
                            all:
                              description: |
                                Whether the flag was removed from all messages.
                                If this is true then the `messages` array will be empty.
                              type: boolean
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to users in an organization when a [user group](/help/user-groups) is created.
                          example:
                            type: user_group
                            op: add
                            group:
                              name: backend
                              members:
                              - 12
                              description: Backend team
                              id: 2
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_group
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            group:
                              $ref: '#/components/schemas/UserGroup'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization
                            when a property of a user group is changed.
                          example:
                            type: user_group
                            op: update
                            group_id: 2
                            data:
                              description: Mention this group to get the security
                                team's attention.
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_group
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            group_id:
                              description: |
                                The ID of the user group whose details have changed.
                              type: integer
                            data:
                              additionalProperties: false
                              description: |
                                Dictionary containing the changed details of the user group.
                              properties:
                                name:
                                  description: |
                                    The new name of the user group. Only present if the group's name changed.
                                  type: string
                                description:
                                  description: |
                                    The new description of the group. Only present if the description
                                    changed.
                                  type: string
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users when users have been added to a user group.
                          example:
                            type: user_group
                            op: add_members
                            group_id: 2
                            user_ids:
                            - 10
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_group
                                type: string
                            op:
                              enum:
                              - add_members
                              type: string
                            group_id:
                              description: |
                                The ID of the user group with new members.
                              type: integer
                            user_ids:
                              description: |
                                Array containing the IDs of the users who have been added
                                to the user group.
                              items:
                                type: integer
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users when users have been removed from
                            a user group.
                          example:
                            type: user_group
                            op: remove_members
                            group_id: 2
                            user_ids:
                            - 10
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_group
                                type: string
                            op:
                              enum:
                              - remove_members
                              type: string
                            group_id:
                              description: |
                                The ID of the user group whose details have changed.
                              type: integer
                            user_ids:
                              description: |
                                Array containing the IDs of the users who have been removed
                                from the user group.
                              items:
                                type: integer
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users when a user group has been deleted.
                          example:
                            type: user_group
                            op: remove
                            group_id: 2
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - user_group
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            group_id:
                              description: |
                                The ID of the group which has been deleted.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            set of configured [linkifiers](/help/add-a-custom-linkifier)
                            for the organization has changed.

                            Processing this event is important to doing Markdown local echo
                            correctly.

                            **Changes**: New in Zulip 4.0 (feature level 54), replacing the
                            previous `realm_filters` event type, which is still sent for
                            backwards compatibility reasons.

                            Clients should migrate to requesting and processing the
                            `realm_linkifiers` event type when possible, since we plan to remove
                            the legacy `realm_filters` logic entirely in a future release.
                          example:
                            type: realm_linkifiers
                            realm_linkifiers:
                            - pattern: '#(?P<id>[123])'
                              url_format: https://realm.com/my_realm_filter/%(id)s
                              id: 1
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_linkifiers
                                type: string
                            realm_linkifiers:
                              description: |
                                Array of dictionaries where each dictionary contains details about
                                a single realm linkifier.
                              items:
                                additionalProperties: false
                                properties:
                                  pattern:
                                    description: |
                                      The string regex pattern which represents the pattern that
                                      should be linkified by this linkifier.
                                    type: string
                                  url_format:
                                    description: |
                                      The URL format string to be used for linkifying matches.
                                    type: string
                                  id:
                                    description: |
                                      The ID of the linkifier.
                                    type: integer
                                type: object
                              type: array
                          type: object
                        - additionalProperties: false
                          deprecated: true
                          description: |
                            Legacy event type. Sent to all users in a Zulip organization
                            when the set of configured [linkifiers](/help/add-a-custom-linkifier)
                            for the organization has changed.

                            **Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by
                            the `realm_linkifiers` event type, which has a clearer name and format,
                            instead.
                          example:
                            type: realm_filters
                            realm_filters:
                            - - '#(?P<id>[123])'
                              - https://realm.com/my_realm_filter/%(id)s
                              - 1
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_filters
                                type: string
                            realm_filters:
                              description: |
                                An array of tuples, where each tuple describes a linkifier.
                                The first element of the tuple is a
                                string regex pattern which represents the pattern that should
                                be linkified on matching. The second element is the URL with which the
                                pattern matching string should be linkified with and the third element
                                is the ID of the realm filter.
                              items:
                                items:
                                  oneOf:
                                  - type: integer
                                  - type: string
                                type: array
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            set of configured [code playgrounds](/help/code-blocks#code-playgrounds)
                            for the organization has changed.

                            **Changes**: New in Zulip 4.0 (feature level 49).
                          example:
                            type: realm_playgrounds
                            realm_playgrounds:
                            - id: 1
                              name: Python playground
                              pygments_language: Python
                              url_prefix: https://python.example.com
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_playgrounds
                                type: string
                            realm_playgrounds:
                              description: |
                                An array of dictionaries where each dictionary contains
                                data about a single playground entry.
                              items:
                                $ref: '#/components/schemas/RealmPlayground'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when
                            a [custom emoji](/help/add-custom-emoji) has been updated,
                            typically when a new emoji has been added or an old one
                            has been deactivated. The event contains all custom emoji
                            configured for the organization, not just the updated
                            custom emoji.
                          example:
                            type: realm_emoji
                            op: update
                            realm_emoji:
                              "2":
                                id: "2"
                                name: my_emoji
                                source_url: /user_avatars/2/emoji/images/2.png
                                deactivated: true
                                author_id: 11
                              "1":
                                id: "1"
                                name: green_tick
                                source_url: /user_avatars/2/emoji/images/1.png
                                deactivated: false
                                author_id: 11
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_emoji
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            realm_emoji:
                              additionalProperties:
                                $ref: '#/components/schemas/RealmEmoji'
                              description: |
                                An object in which each key describes a realm emoji.
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the set of
                            [allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)
                            has changed.
                          example:
                            type: realm_domains
                            op: add
                            realm_domain:
                              domain: zulip.org
                              allow_subdomains: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_domains
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            realm_domain:
                              $ref: '#/components/schemas/RealmDomain'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the set of
                            [allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)
                            has changed.
                          example:
                            type: realm_domains
                            op: change
                            realm_domain:
                              domain: zulip.org
                              allow_subdomains: true
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_domains
                                type: string
                            op:
                              enum:
                              - change
                              type: string
                            realm_domain:
                              additionalProperties: false
                              description: |
                                Object containing details of the edited domain.
                              properties:
                                domain:
                                  description: |
                                    The domain whose settings have changed.
                                  type: string
                                allow_subdomains:
                                  description: |
                                    Whether subdomains are allowed for this domain.
                                  type: boolean
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the set of
                            [allowed domains for new users](/help/allow-anyone-to-join-without-an-invitation)
                            has changed.
                          example:
                            type: realm_domains
                            op: remove
                            domain: zulip.org
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_domains
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            domain:
                              description: |
                                The domain to be removed.
                              type: string
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to the user who requested a [data export](/help/export-your-organization)
                            when the status of the export changes.
                          example:
                            type: realm_export
                            exports:
                            - id: 107
                              export_time: 1.594825443656797E9
                              acting_user_id: 10
                              export_url: null
                              deleted_timestamp: null
                              failed_timestamp: 1.594825444436336E9
                              pending: false
                            id: 1
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_export
                                type: string
                            exports:
                              description: |
                                An array of dictionaries where each dictionary contains
                                data about a single organization export request.
                              items:
                                $ref: '#/components/schemas/RealmExport'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to users who can administer a newly created bot
                            user.  Clients will also receive a `realm_user` event that
                            contains basic details (but not the API key).

                            The `realm_user` events are sufficient for clients that
                            only need to interact with the bot; this `realm_bot` event
                            type is relevant only for administering bots.

                            Only organization administrators and the user who owns the bot will
                            receive this event.
                          example:
                            type: realm_bot
                            op: add
                            bot:
                              email: test-bot@zulip.testserver
                              user_id: 36
                              full_name: Foo Bot
                              bot_type: 1
                              is_active: true
                              api_key: 6hc6MC9mpNFvoo0gSOWnZEq4aJEn8UNK
                              default_sending_stream: null
                              default_events_register_stream: null
                              default_all_public_streams: false
                              avatar_url: https://secure.gravatar.com/avatar/af8abc2537d283b212a6bd4d1289956d?d=identicon&version=1
                              services: []
                              owner_id: 10
                            id: 1
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_bot
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            bot:
                              $ref: '#/components/schemas/Bot'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to users who can administer a bot user when the bot is
                            configured.  Clients may also receive a `realm_user` event that
                            for changes in public data about the bot (name, etc.).

                            The `realm_user` events are sufficient for clients that
                            only need to interact with the bot; this `realm_bot` event
                            type is relevant only for administering bots.

                            Only organization administrators and the user who owns the bot will
                            receive this event.
                          example:
                            type: realm_bot
                            op: update
                            bot:
                              user_id: 37
                              services:
                              - base_url: http://hostname.domain2.com
                                interface: 2
                                token: grr8I2APXRmVL0FRTMRYAE4DRPQ5Wlaw
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_bot
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            bot:
                              allOf:
                              - description: |
                                  Object containing details about the changed bot.
                                  It contains two properties: the user id of the bot and
                                  the property to be changed. The changed property is one
                                  of the remaining properties listed below.
                              - $ref: '#/components/schemas/BasicBot'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users when a bot has been deactivated.
                          example:
                            type: realm_bot
                            op: remove
                            bot:
                              user_id: 35
                              full_name: Foo Bot
                            id: 1
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_bot
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            bot:
                              additionalProperties: false
                              description: |
                                Object containing details about the deactivated bot.
                              properties:
                                user_id:
                                  description: |
                                    The user ID of the deactivated bot.
                                  type: integer
                                full_name:
                                  description: |
                                    The full name of the deactivated bot.
                                  type: string
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users when a bot has been deactivated.
                            Note that this is very similar to the bot_remove event
                            and one of them will be removed soon.
                          example:
                            type: realm_bot
                            op: delete
                            bot:
                              user_id: 35
                              full_name: Foo Bot
                            id: 1
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm_bot
                                type: string
                            op:
                              enum:
                              - delete
                              type: string
                            bot:
                              additionalProperties: false
                              description: |
                                Object containing details about the deactivated bot.
                              properties:
                                user_id:
                                  description: |
                                    The user ID of the deactivated bot.
                                  type: integer
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            configuration of the organization (realm) has changed.
                          example:
                            type: realm
                            op: update
                            property: disallow_disposable_email_addresses
                            value: false
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            property:
                              description: |
                                The name of the property that was changed.
                              type: string
                            value:
                              description: |
                                The new value of the property.
                              oneOf:
                              - type: string
                              - type: boolean
                              - type: integer
                            extra_data:
                              additionalProperties: false
                              description: |
                                Object containing extra data related to the changed
                                property.
                              properties:
                                upload_quota:
                                  description: |
                                    Note: Only present if changed property is `plan_type`.

                                    The new upload quota for the Zulip organization.
                                  type: integer
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            organization (realm) is deactivated.  Its main purpose is to
                            flush active longpolling connections so clients can immediately
                            show the organization as deactivated.

                            Clients cannot rely on receiving this event, because they will
                            no longer be able to authenticate to the Zulip API due to the
                            deactivation, and thus can miss it if they did not have an active
                            longpolling connection at the moment of deactivation.

                            Correct handling of realm deactivations requires that clients
                            parse authentication errors from GET /events; if that is done
                            correctly, the client can ignore this event type and rely on its
                            handling of the `GET /events` request it will do immediately
                            after processing this batch of events.
                          example:
                            type: realm
                            op: deactivated
                            realm_id: 2
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm
                                type: string
                            op:
                              enum:
                              - deactivated
                              type: string
                            realm_id:
                              description: |
                                The ID of the deactivated realm.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all the users whenever the Zulip server restarts.

                            Specifically, this event is sent whenever the Tornado process
                            for the user is restarted; in particular, this will always happen
                            when the Zulip server is upgraded.

                            Clients can use this event to know when they should get a new
                            event queue after a server upgrade.  Clients doing so must implement
                            a random delay strategy to spread such restarts over 10 minutes or
                            more to avoid creating a synchronized thundering herd effect.
                          example:
                            id: 0
                            immediate: true
                            server_generation: 1619334181
                            type: restart
                            zulip_feature_level: 57
                            zulip_version: 5.0-dev-1650-gc3fd37755f
                            zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - restart
                                type: string
                            zulip_version:
                              description: |
                                The Zulip version number, in the format where this appears
                                in the [server_settings](/api/get-server-settings) and
                                [register](/api/register-queue) responses.

                                **Changes**: New in Zulip 4.0 (feature level 59).
                              type: string
                            zulip_merge_base:
                              description: |
                                The Zulip merge base number, in the format where this appears
                                in the [server_settings](/api/get-server-settings) and
                                [register](/api/register-queue) responses.

                                **Changes**: New in Zulip 5.0 (feature level 88).
                              type: string
                            zulip_feature_level:
                              description: |
                                The [Zulip feature level](/api/changelog) of the server
                                after the restart.

                                Clients can safely avoid refetching their state and
                                creating a new event queue when the API feature level has not
                                changed, or when they know the specific feature level change
                                is not relevant to the client (E.g. it just adds a new endpoint
                                that the client doesn't use).

                                **Changes**: New in Zulip 4.0 (feature level 59).
                              type: integer
                            immediate:
                              description: |
                                Whether the client should fetch a new event queue immediately,
                                rather than using a backoff strategy to avoid thundering herds.
                                A Zulip development server uses this parameter to reload
                                clients immediately.
                              type: boolean
                            server_generation:
                              description: |
                                The timestamp at which the server started.
                              type: integer
                          type: object
                        - additionalProperties: false
                          description: |
                            Event sent to all users in a Zulip organization when the
                            configuration of the organization (realm) has changed.

                            Unlike realm / update, supports multiple properties being changed
                            in a single event.
                          example:
                            type: realm
                            op: update_dict
                            property: default
                            data:
                              allow_message_editing: false
                              message_content_edit_limit_seconds: 0
                              edit_topic_policy: 2
                            id: 0
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - realm
                                type: string
                            op:
                              enum:
                              - update_dict
                              type: string
                            property:
                              description: |
                                Always `"default"`.  Present for backwards-compatibility with older
                                clients that predate the `update_dict` event style.
                              type: string
                            data:
                              additionalProperties: false
                              description: |
                                An object containing the properties that have changed.
                              properties:
                                allow_edit_history:
                                  description: |
                                    Whether this organization is configured to allow users to access
                                    [message edit history](/help/view-a-messages-edit-history).
                                  type: boolean
                                bot_creation_policy:
                                  description: |
                                    The policy for which users can create bot users in this organization.
                                  type: integer
                                create_stream_policy:
                                  description: |
                                    The policy for which users can create streams in this organization.
                                  type: integer
                                invite_to_stream_policy:
                                  description: |
                                    The policy for which users can add other users to streams in this
                                    organization.
                                  type: integer
                                move_messages_between_streams_policy:
                                  description: |
                                    The policy for which users can move messages from one stream to another.

                                    * 1 = Members only
                                    * 2 = Administrators only
                                    * 3 = Full members only
                                    * 4 = Moderators only

                                    **Changes**: New in Zulip 4.0 (feature level 56)
                                  type: integer
                                wildcard_mention_policy:
                                  description: |
                                    The policy for who can use wildcard mentions in large streams.

                                    * 1 => Any user can use wildcard mentions in large streams.
                                    * 2 => Only members can use wildcard mentions in large streams.
                                    * 3 => Only full members can use wildcard mentions in large streams.
                                    * 4 => Only stream and organization administrators can use wildcard mentions in large streams.
                                    * 5 => Only organization administrators can use wildcard mentions in large streams.
                                    * 6 => Nobody can use wildcard mentions in large streams.
                                    * 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.

                                    All users will receive a warning/reminder when using
                                    mentions in large streams, even when permitted to do so.

                                    **Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in
                                    Zulip 4.0 (feature level 62).
                                  type: integer
                                description:
                                  description: |
                                    The description of the organization, used on login and registration pages.
                                  type: string
                                realm_giphy_rating:
                                  description: |
                                    Maximum rating of the GIFs that will be retrieved from GIPHY.

                                    **Changes**: New in Zulip 4.0 (feature level 55).
                                  type: integer
                                digest_emails_enabled:
                                  description: |
                                    Whether the organization has enabled [weekly digest emails](/help/digest-emails).
                                  type: boolean
                                disallow_disposable_email_addresses:
                                  description: |
                                    Whether the organization disallows disposable email
                                    addresses.
                                  type: boolean
                                email_address_visibility:
                                  description: |
                                    The policy for which users in this organization can see the
                                    real email addresses of other users.

                                    * 1 = everyone
                                    * 2 = members only
                                    * 3 = administrators only
                                    * 4 = nobody (though note that administrators can change this setting).
                                    * 5 = moderators only
                                  type: integer
                                email_changes_disabled:
                                  description: |
                                    Whether users are allowed to change their own email address in this
                                    organization.  This is typically disabled for organizations that
                                    synchronize accounts from LDAP or a similar corporate database.
                                  type: boolean
                                invite_required:
                                  description: |
                                    Whether an invitation is required to join this organization.
                                  type: boolean
                                inline_image_preview:
                                  description: |
                                    Whether this organization has been configured to enable
                                    [previews of linked images](/help/allow-image-link-previews).
                                  type: boolean
                                inline_url_embed_preview:
                                  description: |
                                    Whether this organization has been configured to enable
                                    [previews of linked websites](/help/allow-image-link-previews).
                                  type: boolean
                                mandatory_topics:
                                  description: |
                                    Whether [topics are required](/help/require-topics) for messages in this organization.
                                  type: boolean
                                message_retention_days:
                                  description: |
                                    The default [message retention policy](/help/message-retention-policy)
                                    for this organization.  Pass `"forever"` to request that messages
                                    by retained forever (the default).
                                  type: integer
                                realm_name:
                                  description: |
                                    The name of the organization, used in login pages etc.
                                  type: string
                                name_changes_disabled:
                                  description: |
                                    Indicates whether users are
                                    [allowed to change](/help/restrict-name-and-email-changes) their name
                                    via the Zulip UI in this organization.  Typically disabled
                                    in organizations syncing this this type of account information
                                    an external user database like LDAP.
                                  type: boolean
                                avatar_changes_disabled:
                                  description: |
                                    Indicates whether users are
                                    [allowed to change](/help/restrict-name-and-email-changes) their avatar
                                    via the Zulip UI in this organization.  Typically disabled
                                    in organizations syncing this this type of account information
                                    an external user database like LDAP.
                                  type: boolean
                                emails_restricted_to_domains:
                                  description: |
                                    Whether [new users joining](/help/allow-anyone-to-join-without-an-invitation)
                                    this organization are required to have an email
                                    address in one of the `realm_domains` configured for the organization.
                                  type: boolean
                                send_welcome_emails:
                                  description: |
                                    Whether or not this organization is configured to send the standard Zulip
                                    [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
                                  type: boolean
                                message_content_allowed_in_email_notifications:
                                  description: |
                                    Whether notification emails in this organization are allowed to
                                    contain Zulip the message content, or simply indicate that a new
                                    message was sent.
                                  type: boolean
                                video_chat_provider:
                                  description: |
                                    The configured video call provider for the organization.
                                  type: integer
                                waiting_period_threshold:
                                  description: |
                                    Members whose accounts have been created at least this many days ago
                                    will be treated as [full members](/help/restrict-permissions-of-new-members)
                                    for the purpose of settings that restrict access to new members.
                                  type: integer
                                digest_weekday:
                                  description: |
                                    The day of the week when the organization will send
                                    its weekly digest email to inactive users.
                                  type: integer
                                private_message_policy:
                                  description: |
                                    Policy for [who can send private messages](/help/restrict-private-messages)
                                    in this organization.

                                    * 1 = Everyone
                                    * 2 = Nobody
                                  type: integer
                                user_group_edit_policy:
                                  description: |
                                    The organization's policy for [who can manage user groups
                                    ](/help/restrict-user-group-management).

                                    * 1 = All members can create and edit user groups
                                    * 2 = Only organization administrators can create and edit user groups
                                    * 3 = Only full members can create and edit user groups
                                    * 4 = Only organization administrators and moderators can create and edit user groups
                                  type: integer
                                default_code_block_language:
                                  description: |
                                    The default pygments language code to be used for a code blocks
                                    in this organization.  Null if no default has been set.
                                  nullable: true
                                  type: string
                                message_content_delete_limit_seconds:
                                  description: |
                                    Messages sent more than this many seconds ago cannot be deleted
                                    with this organization's
                                    [message deletion policy](/help/configure-message-editing-and-deletion).
                                  type: integer
                                authentication_methods:
                                  additionalProperties:
                                    description: |
                                      Boolean describing whether the authentication method (i.e its key)
                                      is enabled in this organization.
                                    type: boolean
                                  description: |
                                    Dictionary of 'authentication_method_name': 'boolean' with each
                                    entry describing whether the authentication name can be used for
                                    authenticating into the organization.
                                  type: object
                                allow_message_editing:
                                  description: |
                                    Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)
                                    allows editing the content of messages.
                                  type: boolean
                                edit_topic_policy:
                                  description: |
                                    The policy for which users can edit topics of any message.

                                    * 1 = members only
                                    * 2 = admins only
                                    * 3 = full members only
                                    * 4 = moderators only
                                    * 5 = everyone

                                    **Changes**: New in Zulip 5.0 (feature level 75), replacing the
                                    previous `allow_community_topic_editing` boolean.
                                  type: integer
                                message_content_edit_limit_seconds:
                                  description: |
                                    Messages sent more than this many seconds ago cannot be edited
                                    with this organization's
                                    [message edit policy](/help/configure-message-editing-and-deletion).
                                  type: integer
                                community_topic_editing_limit_seconds:
                                  description: |
                                    Messages sent more than this many seconds ago cannot have
                                    their topics edited by other users with this organization's
                                    [message edit policy](/help/configure-message-editing-and-deletion).

                                    **Changes**: New in Zulip 3.0 (feature level 11).  Previously this
                                    value was hardcoded to 86400 seconds (1 day).
                                  type: integer
                                icon_url:
                                  description: |
                                    The URL of the organization's [profile icon](/help/create-your-organization-profile).
                                  type: string
                                icon_source:
                                  description: |
                                    String indicating whether the organization's
                                    [profile icon](/help/create-your-organization-profile) was uploaded
                                    by a user or is the default.  Useful for UI allowing editing the organization's icon.

                                    * "G" means generated by Gravatar (the default).
                                    * "U" means uploaded by an organization administrator.
                                  type: string
                                icon_file_size:
                                  description: |
                                    The maximum file size allowed for the organization's
                                    icon.  Useful for UI allowing editing the organization's icon.
                                  type: integer
                                logo_url:
                                  description: |
                                    The URL of the organization's wide logo configured in the
                                    [organization profile](/help/create-your-organization-profile).
                                  type: string
                                logo_source:
                                  description: |
                                    String indicating whether the organization's
                                    [profile wide logo](/help/create-your-organization-profile) was uploaded
                                    by a user or is the default.  Useful for UI allowing editing the
                                    organization's wide logo.

                                    * "D" means the logo is the default Zulip logo.
                                    * "U" means uploaded by an organization administrator.
                                  type: string
                                night_logo_url:
                                  description: |
                                    The URL of the organization's night theme wide-format logo configured in the
                                    [organization profile](/help/create-your-organization-profile).
                                  type: string
                                night_logo_source:
                                  description: |
                                    String indicating whether the organization's night theme
                                    [profile wide logo](/help/create-your-organization-profile) was uploaded
                                    by a user or is the default.  Useful for UI allowing editing the
                                    organization's wide logo.

                                    * "D" means the logo is the default Zulip logo.
                                    * "U" means uploaded by an organization administrator.
                                  type: string
                                bot_domain:
                                  description: |
                                    The fake email domain that will be used for new bots created this
                                    organization.  Useful for UI for creating bots.
                                  type: string
                                realm_uri:
                                  description: |
                                    The URL for the organization.
                                  type: string
                                available_video_chat_providers:
                                  additionalProperties:
                                    additionalProperties: false
                                    description: |
                                      `{provider_name}`: Dictionary containing the details of the
                                      video call provider with the name of the chat provider as
                                      the key.
                                    properties:
                                      name:
                                        description: |
                                          The name of the video call provider.
                                        type: string
                                      id:
                                        description: |
                                          The ID of the video call provider.
                                        type: integer
                                    type: object
                                  description: |
                                    Dictionary where each entry describes a supported
                                    [video call provider](/help/start-a-call)
                                    that is configured on this server and could be selected by an
                                    organization administrator.

                                    Useful for administrative settings UI that allows changing the
                                    video call provider.
                                  type: object
                                presence_disabled:
                                  description: |
                                    Whether online presence of other users is shown in this
                                    organization.
                                  type: boolean
                                settings_send_digest_emails:
                                  description: |
                                    Whether this Zulip server is configured to allow organizations to
                                    enable [digest emails](/help/digest-emails).

                                    Relevant for administrative settings UI that can change the digest
                                    email settings.
                                  type: boolean
                                is_zephyr_mirror_realm:
                                  description: |
                                    Whether the organization is a Zephyr mirror realm.
                                  type: boolean
                                email_auth_enabled:
                                  description: |
                                    Whether the organization has enabled Zulip's default email and password
                                    authentication feature.  Determines whether Zulip stores a password
                                    for the user and clients should offer any UI for changing the user's
                                    Zulip password.
                                  type: boolean
                                password_auth_enabled:
                                  description: |
                                    Whether the organization allows any sort of password-based
                                    authentication (whether via EmailAuthBackend or LDAP passwords).

                                    Determines whether a client might ever need to display a password prompt
                                    (clients will primarily look at this attribute in [server_settings](/api/get-server-settings)
                                    before presenting a login page).
                                  type: boolean
                                push_notifications_enabled:
                                  description: |
                                    Whether push notifications are enabled for this organization.  Typically
                                    `false` for self-hosted servers that have not configured the
                                    [Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).
                                  type: boolean
                                upload_quota:
                                  description: |
                                    The total quota for uploaded files in this organization.

                                    Clients are not responsible for checking this quota; it is included
                                    in the API only for display purposes.

                                    Null if there is no limit.
                                  nullable: true
                                  type: integer
                                plan_type:
                                  description: |
                                    The plan type of the organization.

                                    * 1 = Self-hosted organization (SELF_HOSTED)
                                    * 2 = Zulip Cloud free plan (LIMITED)
                                    * 3 = Zulip Cloud Standard plan (STANDARD)
                                    * 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
                                  type: integer
                                zulip_plan_is_not_limited:
                                  description: |
                                    Whether the organization is using a limited (Zulip Cloud Free) plan.
                                  type: boolean
                                upgrade_text_for_wide_organization_logo:
                                  description: |
                                    Text to use when displaying UI for wide organization logos, a feature
                                    that is currently not available on the Zulip Cloud Free plan.

                                    Useful only for clients supporting administrative UI for uploading
                                    a new wide organization logo to brand the organization.
                                  type: string
                                default_external_accounts:
                                  additionalProperties:
                                    additionalProperties: false
                                    description: |
                                      `{site_name}`: Dictionary containing the details of the
                                      default external account provider with the name of the
                                      website as the key.
                                    properties:
                                      name:
                                        description: |
                                          The name of the external account provider
                                        type: string
                                      text:
                                        description: |
                                          The text describing the external account.
                                        type: string
                                      hint:
                                        description: |
                                          The help text to be displayed for the
                                          custom profile field in user-facing
                                          settings UI for configuring custom
                                          profile fields for this account.
                                        type: string
                                      url_pattern:
                                        description: |
                                          The regex pattern of the URL of a profile page
                                          on the external site.
                                        type: string
                                    type: object
                                  description: |
                                    Dictionary where each entry describes a default external
                                    account type that can be configured with Zulip's custom
                                    profile fields feature.
                                  type: object
                                jitsi_server_url:
                                  description: |
                                    The base URL the organization uses to create Jitsi video calls.
                                  type: string
                                development_environment:
                                  description: |
                                    Whether this Zulip server is a development environment.  Used
                                    to control certain features or UI (such as error popups)
                                    that should only apply when connected to a Zulip development
                                    environment.
                                  type: boolean
                                server_generation:
                                  description: |
                                    A timestamp indicating when the process hosting this
                                    event queue was started.  Clients will likely only find
                                    this value useful for inclusion in detailed error reports.
                                  type: integer
                                password_min_length:
                                  description: |
                                    This Zulip server's configured minimum required length for passwords.
                                    Necessary for password change UI to show whether the password
                                    will be accepted.
                                  type: integer
                                password_min_guesses:
                                  description: |
                                    This Zulip server's configured minimum `zxcvbn` minimum guesses.
                                    Necessary for password change UI to show whether the password
                                    will be accepted.
                                  type: integer
                                max_file_upload_size_mib:
                                  description: |
                                    The maximum file size that can be uploaded to this Zulip server.
                                  type: integer
                                max_avatar_file_size_mib:
                                  description: |
                                    The maximum avatar size that can be uploaded to this Zulip server.
                                  type: integer
                                server_inline_image_preview:
                                  description: |
                                    Whether the server is configured with support for inline image previews.
                                    Clients containing administrative UI for changing
                                    `realm_inline_image_preview` should consult this field before offering
                                    that feature.
                                  type: boolean
                                server_inline_url_embed_preview:
                                  description: |
                                    Whether the server is configured with support for inline URL previews.
                                    Clients containing administrative UI for changing
                                    `realm_inline_url_embed_preview` should consult this field before offering
                                    that feature.
                                  type: boolean
                                server_avatar_changes_disabled:
                                  description: |
                                    Whether the server allows avatar changes.  Similar to
                                    `realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`
                                    Zulip server level setting.
                                  type: boolean
                                server_name_changes_disabled:
                                  description: |
                                    Whether the server allows name changes.  Similar to
                                    `realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`
                                    Zulip server level setting.
                                  type: boolean
                                notifications_stream_id:
                                  description: |
                                    The ID of the stream to which notifications announcing the
                                    creation of new streams are sent. -1 if such notifications are disabled.

                                    Since these notifications are sent by the server, this field is
                                    primarily relevant to clients containing UI for changing it.
                                  type: integer
                                signup_notifications_stream_id:
                                  description: |
                                    The ID of the stream to which notifications announcing
                                    that new users have joined the organization are sent.
                                    -1 if such notifications are disabled.

                                    Since these notifications are sent by the server, this field is
                                    primarily relevant to clients containing UI for changing it.
                                  type: integer
                              type: object
                          type: object
                        - additionalProperties: false
                          description: |
                            Event containing details of newly created drafts.
                          example:
                            type: drafts
                            op: add
                            drafts:
                            - id: 17
                              type: private
                              to:
                              - 6
                              topic: ""
                              content: Hello there!
                              timestamp: 15954790200
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - drafts
                                type: string
                            op:
                              enum:
                              - add
                              type: string
                            drafts:
                              description: |
                                An array containing objects for the newly created drafts.
                              items:
                                $ref: '#/components/schemas/Draft'
                              type: array
                          type: object
                        - additionalProperties: false
                          description: |
                            Event containing details for an edited draft.
                          example:
                            type: drafts
                            op: update
                            draft:
                              id: 17
                              type: private
                              to:
                              - 6
                              - 7
                              - 8
                              - 9
                              - 10
                              topic: ""
                              content: Hello everyone!
                              timestamp: 15954790200
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - drafts
                                type: string
                            op:
                              enum:
                              - update
                              type: string
                            draft:
                              $ref: '#/components/schemas/Draft'
                          type: object
                        - additionalProperties: false
                          description: |
                            Event containing the id of a deleted draft.
                          example:
                            type: drafts
                            op: update
                            draft_id: 17
                          properties:
                            id:
                              $ref: '#/components/schemas/EventIdSchema'
                            type:
                              allOf:
                              - $ref: '#/components/schemas/EventTypeSchema'
                              - enum:
                                - drafts
                                type: string
                            op:
                              enum:
                              - remove
                              type: string
                            draft_id:
                              description: |
                                The ID of the draft that was just deleted.
                              type: integer
                          type: object
                      type: array
                    queue_id:
                      description: |
                        The ID of the registered queue.
                      type: string
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/BadEventQueueIdError'
                - description: |
                    #### BAD_EVENT_QUEUE_ID errors

                    This error occurs if the target event queue has been garbage collected.
                    A compliant client will handle this error by re-initializing itself
                    (e.g. a Zulip web app browser window will reload in this case).

                    See [the /register endpoint docs](/api/register-queue) for details on how to
                    handle these correctly.

                    The following is the error response in such case
          description: Bad request.
      summary: Get events from an event queue
      tags:
      - real_time_events
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - queue_id
            - last_event_id
      x-parameter-description: |
        **Note**: The parameters documented above are optional in the sense that
        even if you haven't registered a queue by explicitly requesting the
        `{{ api_url}}/v1/register` endpoint, you could pass the parameters for
        [the `{{ api_url}}/v1/register` endpoint](/api/register-queue) to this
        endpoint and a queue would be registered in the absence of a `queue_id`.
      x-python-examples-extra-imports:
      - sys
  /get_stream_id:
    get:
      description: |
        Get the unique ID of a given stream.

        `GET {{ api_url }}/v1/get_stream_id`
      operationId: get-stream-id
      parameters:
      - description: |
          The name of the stream to access.
        example: Denmark
        explode: true
        in: query
        name: stream
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    stream_id: 15
                  properties:
                    result: {}
                    msg: {}
                    stream_id:
                      description: |
                        The ID of the given stream.
                      type: integer
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: An example JSON response for when the supplied stream
                    does not exist
                  example:
                    code: BAD_REQUEST
                    msg: Invalid stream name 'nonexistent'
                    result: error
          description: Bad request.
      summary: Get stream ID
      tags:
      - streams
  /mark_all_as_read:
    post:
      description: |
        Marks all of the current user's unread messages as read.

        `POST {{ api_url }}/v1/mark_all_as_read`
      operationId: mark-all-as-read
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Mark all messages as read
      tags:
      - messages
  /mark_stream_as_read:
    post:
      description: |
        Mark all the unread messages in a stream as read.
      operationId: mark-stream-as-read
      parameters:
      - description: |
          The ID of the stream to access.
        example: 42
        explode: true
        in: query
        name: stream_id
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Mark messages in a stream as read
      tags:
      - messages
  /mark_topic_as_read:
    post:
      description: |
        Mark all the unread messages in a topic as read.
      operationId: mark-topic-as-read
      parameters:
      - description: |
          The ID of the stream to access.
        example: 42
        explode: true
        in: query
        name: stream_id
        required: true
        schema:
          type: integer
        style: form
      - description: |
          The name of the topic whose messages should be marked as read.
        example: new coffee machine
        explode: true
        in: query
        name: topic_name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Mark messages in a topic as read
      tags:
      - messages
  /attachments:
    get:
      description: |
        Fetch metadata on files uploaded by the requesting user.

        `GET {{ api_url }}/v1/attachments`
      operationId: get-attachments
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    attachments:
                    - id: 1
                      name: 166050.jpg
                      path_id: 2/ce/DfOkzwdg_IwlrN3myw3KGtiJ/166050.jpg
                      size: 571946
                      create_time: 1588145417000
                      messages:
                      - id: 102
                        date_sent: 1588145424000
                      - id: 103
                        date_sent: 1588145448000
                    upload_space_used: 571946
                  properties:
                    result: {}
                    msg: {}
                    attachments:
                      description: |
                        A list of `attachment` objects, each containing
                        details about a file uploaded by the user.
                      items:
                        $ref: '#/components/schemas/Attachments'
                      type: array
                    upload_space_used:
                      description: |
                        The total size of all files uploaded by in the organization,
                        in bytes.
                      type: integer
                  type: object
          description: Success.
      summary: Get attachments
      tags:
      - users
  /drafts:
    get:
      description: |
        Fetch all drafts for the current user.

        `GET {{ api_url }}/v1/drafts`
      operationId: get-drafts
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    count: 3
                    drafts:
                    - id: 1
                      type: stream
                      to:
                      - 3
                      topic: sync drafts
                      content: Let's add backend support for syncing drafts.
                      timestamp: 1.59547901943915E9
                    - id: 2
                      type: private
                      to:
                      - 4
                      topic: ""
                      content: What if we made it possible to sync drafts in Zulip?
                      timestamp: 1.59547902043916E9
                    - id: 3
                      type: private
                      to:
                      - 4
                      - 10
                      topic: ""
                      content: What if we made it possible to sync drafts in Zulip?
                      timestamp: 1.59547902143916E9
                  properties:
                    count:
                      description: |
                        The number of drafts the user currently has. Also the
                        number of drafts returned under "drafts".
                      example: 3
                      type: integer
                    drafts:
                      description: |
                        Returns all of the current user's drafts, in order of last edit time
                        (with the most recently edited draft appearing first).
                      items:
                        $ref: '#/components/schemas/Draft'
                      type: array
                  type: object
          description: Success.
      summary: Get drafts
      tags:
      - drafts
    post:
      description: |
        Create one or more drafts on the server. These drafts will be automatically
        synchronized to other clients via `drafts` events.

        `POST {{ api_url }}/v1/drafts`
      operationId: create-drafts
      parameters:
      - content:
          application/json:
            example:
            - type: stream
              to:
              - 1
              topic: questions
              content: What are the contribution guidelines for this project?
              timestamp: 1595479019
            schema:
              items:
                $ref: '#/components/schemas/Draft'
              type: array
        description: |
          A JSON-encoded list of containing new draft objects.
        explode: true
        in: query
        name: drafts
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - additionalProperties: false
                  description: |
                    When all of the drafts in the request are valid, this endpoint will return
                    an array of the IDs for the drafts that were just created in the same
                    order as they were requested. If any of the drafts failed the validation
                    step, then none of the drafts will be created and we would not get this
                    status code.
                  example:
                    result: success
                    msg: ""
                    ids:
                    - 1
                    - 2
                    - 3
                  properties:
                    ids:
                      description: |
                        An array of the IDs for the drafts that were just created in the same
                        order as they were submitted.
                      items:
                        type: integer
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: |
                    JSON response for when a draft targeted towards a stream does not specify
                    exactly one stream ID.
                  example:
                    code: BAD_REQUEST
                    msg: Must specify exactly 1 stream ID for stream messages
                    result: error
          description: Bad request.
      summary: Create drafts
      tags:
      - drafts
  /drafts/{draft_id}:
    delete:
      description: |
        Delete a single draft from the server. The deletion will be automatically
        synchronized to other clients via a `drafts` event.

        `DELETE {{ api_url }}/v1/drafts/{draft_id}`
      operationId: delete-draft
      parameters:
      - description: |
          The ID of the draft you want to delete.
        example: 1
        explode: false
        in: path
        name: draft_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    JSON response for when no draft exists with the provided ID.
                  example:
                    result: error
                    msg: Draft does not exist
          description: Not Found.
      summary: Delete a draft
      tags:
      - drafts
    patch:
      description: |
        Edit a draft on the server. The edit will be automatically
        synchronized to other clients via `drafts` events.

        `PATCH {{ api_url }}/v1/drafts/{draft_id}`
      operationId: edit-draft
      parameters:
      - description: |
          The ID of the draft to be edited.
        example: 2
        explode: false
        in: path
        name: draft_id
        required: true
        schema:
          type: integer
        style: simple
      - content:
          application/json:
            example:
              type: stream
              to:
              - 1
              topic: questions
              content: how tough is a Lamy Safari?
              timestamp: 1595479019
            schema:
              $ref: '#/components/schemas/Draft'
        description: |
          A JSON-encoded object containing a replacement draft object for this ID.
        explode: true
        in: query
        name: draft
        required: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "404":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    JSON response for when no draft exists with the provided ID.
                  example:
                    result: error
                    msg: Draft does not exist
          description: Not Found.
      summary: Edit a draft
      tags:
      - drafts
  /messages:
    get:
      description: |
        Fetch message history from a Zulip server.

        `GET {{ api_url }}/v1/messages`

        This `GET /api/v1/messages` endpoint is the primary way to fetch
        message history from a Zulip server.  It is useful both for Zulip
        clients (e.g. the web, desktop, mobile, and terminal clients) as well
        as bots, API clients, backup scripts, etc.

        By specifying a [narrow filter](/api/construct-narrow), you can use
        this endpoint to fetch the messages matching any search query that is
        supported by Zulip's powerful full-text search backend.

        When a narrow is not specified, it can be used to fetch a user's
        message history. (We recommend paginating to 1000 messages at a time.)

        In either case, you specify an `anchor` message (or ask the server to
        calculate the first unread message for you and use that as the
        anchor), as well as a number of messages before and after the anchor
        message.  The server returns those messages, sorted by message ID, as
        well as some metadata that makes it easy for a client to determine
        whether there are more messages matching the query that were not
        returned due to the `num_before` and `num_after` limits.

        We recommend using `num_before <= 1000` and `num_after <= 1000` to
        avoid generating very large HTTP responses. A maximum of 5000 messages
        can be obtained per request; attempting to exceed this will result in an
        error.
      operationId: get-messages
      parameters:
      - description: |
          Integer message ID to anchor fetching of new messages. Supports special
          string values for when the client wants the server to compute the anchor
          to use:

          * `newest`: The most recent message.
          * `oldest`: The oldest message.
          * `first_unread`: The oldest unread message matching the
            query, if any; otherwise, the most recent message.

          The special values of `'newest'` and `'oldest'` are also supported
          for anchoring the query at the most recent or oldest messages.

          **Changes**: String values are new in Zulip 3.0 (feature level 1).  The
            `first_unread` functionality was supported in Zulip 2.1.x
            and older by not sending anchor and using use_first_unread_anchor.

            In Zulip 2.1.x and older, `oldest` can be emulated with
            `anchor=0`, and `newest` with `anchor=10000000000000000`
            (that specific large value works around a bug in Zulip
            2.1.x and older in the `found_newest` return value).
        example: 42
        explode: true
        in: query
        name: anchor
        required: false
        schema:
          oneOf:
          - type: string
          - type: integer
        style: form
      - description: |
          The number of messages with IDs less than the anchor to retrieve.
        example: 4
        explode: true
        in: query
        name: num_before
        required: true
        schema:
          minimum: 0
          type: integer
        style: form
      - description: |
          The number of messages with IDs greater than the anchor to retrieve.
        example: 8
        explode: true
        in: query
        name: num_after
        required: true
        schema:
          minimum: 0
          type: integer
        style: form
      - content:
          application/json:
            example:
            - operand: Denmark
              operator: stream
            schema:
              default: []
              items:
                type: object
              type: array
        description: |
          The narrow where you want to fetch the messages from. See how to
          [construct a narrow](/api/construct-narrow).
        explode: true
        in: query
        name: narrow
        required: false
        style: form
      - description: |
          Whether the client supports computing gravatars URLs.  If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar.  This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.
        example: true
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          If `true`, message content is returned in the rendered HTML
          format. If `false`, message content is returned in the raw
          Markdown-format text that user entered.
        example: false
        explode: true
        in: query
        name: apply_markdown
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - deprecated: true
        description: |
          Legacy way to specify `anchor="first_unread"` in Zulip 2.1.x and older.

          Whether to use the (computed by the server) first unread message
          matching the narrow as the `anchor`.  Mutually exclusive with `anchor`.

          **Changes**: Deprecated in Zulip 3.0, replaced by
          `anchor="first_unread"` instead.
        example: true
        explode: true
        in: query
        name: use_first_unread_anchor
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - additionalProperties: false
                  description: |
                    When a request is successful, this endpoint returns a dictionary
                    containing the following (in addition to the `msg` and `result` keys
                    present in all Zulip API responses).
                    A typical successful JSON response may look like
                  example:
                    anchor: 21
                    found_newest: true
                    found_anchor: true
                    result: success
                    msg: ""
                    messages:
                    - subject: ""
                      sender_realm_str: zulip
                      type: private
                      content: <p>Security experts agree that relational algorithms
                        are an interesting new topic in the field of networking, and
                        scholars concur.</p>
                      flags:
                      - read
                      id: 16
                      display_recipient:
                      - id: 4
                        is_mirror_dummy: false
                        email: hamlet@zulip.com
                        full_name: King Hamlet
                      - id: 5
                        is_mirror_dummy: false
                        email: iago@zulip.com
                        full_name: Iago
                      - id: 8
                        is_mirror_dummy: false
                        email: prospero@zulip.com
                        full_name: Prospero from The Tempest
                      content_type: text/html
                      is_me_message: false
                      timestamp: 1527921326
                      sender_id: 4
                      sender_full_name: King Hamlet
                      recipient_id: 27
                      topic_links: []
                      client: populate_db
                      avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
                      submessages: []
                      sender_email: hamlet@zulip.com
                      reactions: []
                    - subject: Verona3
                      stream_id: 5
                      sender_realm_str: zulip
                      type: stream
                      content: <p>Wait, is this from the frontend js code or backend
                        python code</p>
                      flags:
                      - read
                      id: 21
                      display_recipient: Verona
                      content_type: text/html
                      is_me_message: false
                      timestamp: 1527939746
                      sender_id: 4
                      sender_full_name: King Hamlet
                      recipient_id: 20
                      topic_links: []
                      client: populate_db
                      avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
                      submessages: []
                      sender_email: hamlet@zulip.com
                      reactions: []
                  properties:
                    result: {}
                    msg: {}
                    anchor:
                      description: |
                        The same `anchor` specified in the request (or the computed one, if
                        `use_first_unread_anchor` is `true`).
                      type: integer
                    found_newest:
                      description: |
                        Whether the `messages` list includes the very newest messages matching
                        the narrow (used by clients that paginate their requests to decide
                        whether there are more messages to fetch).
                      type: boolean
                    found_oldest:
                      description: |
                        Whether the `messages` list includes the very oldest messages matching
                        the narrow (used by clients that paginate their requests to decide
                        whether there are more messages to fetch).
                      type: boolean
                    found_anchor:
                      description: |
                        Whether the anchor message is included in the
                        response. If the message with the ID specified
                        in the request does not exist or did not match
                        the narrow, this will be false.
                      type: boolean
                    history_limited:
                      description: |
                        Whether the message history was limited due to
                        plan restrictions. This flag is set to `true`
                        only when the oldest messages(`found_oldest`)
                        matching the narrow is fetched.
                      type: boolean
                    messages:
                      description: |
                        an array of `message` objects, each containing the following
                        fields:
                      items:
                        $ref: '#/components/schemas/GetMessages'
                      type: array
                  type: object
          description: Success.
      summary: Get messages
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - client_gravatar
            - apply_markdown
            - use_first_unread_anchor
    post:
      description: |
        Send a stream or a private message.

        `POST {{ api_url }}/v1/messages`
      operationId: send-message
      parameters:
      - description: |
          The type of message to be sent. `private` for a private message and
          `stream` for a stream message.
        example: private
        explode: true
        in: query
        name: type
        required: true
        schema:
          enum:
          - private
          - stream
          type: string
        style: form
      - content:
          application/json:
            example:
            - 9
            - 10
            schema:
              items:
                type: integer
              type: array
        description: |
          For stream messages, either the name or integer ID of the stream. For
          private messages, either a list containing integer user IDs or a list
          containing string email addresses.

          **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.
        explode: true
        in: query
        name: to
        required: true
        style: form
      - description: |
          The content of the message. Maximum message size of 10000 bytes.
        example: Hello
        explode: true
        in: query
        name: content
        required: true
        schema:
          type: string
        style: form
      - description: |
          The topic of the message. Only required for stream messages
          (`type="stream"`), ignored otherwise.

          Maximum length of 60 characters.

          **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded
          this as `subject`, which is currently a deprecated alias.
        example: Castle
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      - description: |
          For clients supporting
          [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo),
          the [event queue](/api/register-queue)
          ID for the client.  If passed, `local_id` is required.  If the message is
          successfully sent, the server will include `local_id` in the `message` event
          that the client with this `queue_id` will receive notifying it of the new message
          via [`GET /events`](/api/get-events).  This lets the client know unambiguously
          that it should replace the locally echoed message, rather than adding this new
          message (which would be correct if the user had sent the new message from another
          device).
        example: 1593114627:0
        explode: true
        in: query
        name: queue_id
        required: false
        schema:
          type: string
        style: form
      - description: |
          For clients supporting local echo, a unique string-format identifier
          chosen freely by the client; the server will pass it back to the client without
          inspecting it, as described in the `queue_id` description.
        example: "100.01"
        explode: true
        in: query
        name: local_id
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    id: 42
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    id:
                      description: |
                        The unique ID assigned to the sent message.
                      type: integer
                    deliver_at:
                      description: |
                        Present for scheduled messages, encodes the time when the message will
                        be sent.  Note that scheduled messages ("Send later") is a beta API and
                        may change before it's a finished feature.
                      example: 2020-06-24 11:19:54.337533+00:00
                      type: string
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/NonExistingStreamError'
                  - description: |
                      A typical failed JSON response for when a stream message is sent to a stream
                      that does not exist
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      A typical failed JSON response for when a private message is sent to a user
                      that does not exist
                    example:
                      code: BAD_REQUEST
                      msg: Invalid email 'eeshan@zulip.com'
                      result: error
          description: Bad request.
      summary: Send a message
      tags:
      - messages
  /messages/{message_id}/history:
    get:
      description: |
        Fetch the message edit history of a previously edited message.

        `GET {{ api_url }}/v1/messages/{message_id}/history`

        Note that edit history may be disabled in some organizations; see the
        [Zulip Help Center documentation on editing messages][edit-settings].

        [edit-settings]: /help/view-a-messages-edit-history
      operationId: get-message-history
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    message_history:
                    - content: Hello!
                      topic: party at my houz
                      rendered_content: <p>Hello!</p>
                      timestamp: 1530129122
                      user_id: 5
                    - topic: party at my house
                      content: Howdy!
                      prev_content: Hello!
                      rendered_content: <p>Howdy!</p>
                      user_id: 5
                      prev_rendered_content: <p>Hello!</p>
                      content_html_diff: <div><p><span class="highlight_text_inserted">Howdy!</span></p>
                        <p><span class="highlight_text_deleted">Hello!</span></p></div>
                      prev_topic: party at my houz
                      timestamp: 1530129134
                    msg: ""
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    message_history:
                      description: |
                        A chronologically sorted array of `snapshot`
                        objects, each one with the values of the
                        message after the edit.
                      items:
                        additionalProperties: false
                        properties:
                          topic:
                            description: |
                              the topic for the message.
                            type: string
                          prev_topic:
                            description: |
                              the topic for the message before being edited.
                            type: string
                          content:
                            description: |
                              the body of the message.
                            type: string
                          rendered_content:
                            description: |
                              the already rendered, HTML version of `content`.
                            type: string
                          prev_content:
                            description: |
                              the body of the message before being edited.
                            type: string
                          prev_rendered_content:
                            description: |
                              the already rendered, HTML version of
                              `prev_content`.
                            type: string
                          user_id:
                            description: |
                              the ID of the user that made the edit.
                            type: integer
                          content_html_diff:
                            description: |
                              an HTML diff between this version of the message
                              and the previous one.
                            type: string
                          timestamp:
                            description: |
                              the UNIX timestamp for this edit.
                            type: integer
                        type: object
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/InvalidMessageError'
                - description: An example JSON response for when the specified message
                    does not exist
          description: Bad request.
      summary: Get a message's edit history
      tags:
      - messages
      x-response-description: |
        Please note that the original message's snapshot only contains the fields
        `topic`, `content`, `rendered_content`, `timestamp` and `user_id`. This
        snapshot will be the only one present if the message has never been edited.

        Also note that if a message's content was edited (but not the topic)
        or the topic was edited (but not the content), the snapshot object
        will only contain data for the modified fields (e.g. if only the topic
        was edited, `prev_content`, `prev_rendered_content`, and
        `content_html_diff` will not appear).
  /messages/flags:
    post:
      description: |
        Add or remove personal message flags like `read` and `starred`
        on a collection of message IDs.

        `POST {{ api_url }}/v1/messages/flags`

        For updating the `read` flag on common collections of messages, see also
        the
        [special endpoints for marking message as read in bulk](/api/mark-all-as-read).
      operationId: update-message-flags
      parameters:
      - content:
          application/json:
            example:
            - 4
            - 8
            - 15
            schema:
              items:
                type: integer
              type: array
        description: |
          An array containing the IDs of the target messages.
        explode: true
        in: query
        name: messages
        required: true
        style: form
      - description: |
          Whether to `add` the flag or `remove` it.
        example: add
        explode: true
        in: query
        name: op
        required: true
        schema:
          enum:
          - add
          - remove
          type: string
        style: form
      - description: |
          The flag that should be added/removed.
        example: read
        explode: true
        in: query
        name: flag
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    messages:
                    - 4
                    - 18
                    - 15
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    messages:
                      description: |
                        An array with the IDs of the modified messages.
                      items:
                        type: integer
                      type: array
                  type: object
          description: Success.
      summary: Update personal message flags
      tags:
      - messages
      x-parameter-description: |
        ## Available flags
        <div>
            <table>
                <thead>
                    <tr>
                        <th style="width:30%">Flag</th>
                        <th style="width:70%">Purpose</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>read</code></td>
                        <td>
                            Whether the user has read the message.  Messages
                            start out unread (except for messages the user
                            themself sent using a non-API client) and can
                            later be marked as read.
                        </td>
                    </tr>
                    <tr>
                        <td><code>starred</code></td>
                        <td>Whether the user has <a href="/help/star-a-message">starred this message</a>.</td>
                    </tr>
                    <tr>
                        <td><code>collapsed</code></td>
                        <td>Whether the user has <a href="/help/collapse-a-message">collapsed this message</a>.</td>
                    </tr>
                    <tr>
                        <td><code>mentioned</code></td>
                        <td>
                            Whether the current user
                            <a href="/help/mention-a-user-or-group">was mentioned</a>
                            by this message, either directly or via a user
                            group. Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            a mention of the current user.
                        </td>
                    </tr>
                    <tr>
                        <td><code>wildcard_mentioned</code></td>
                        <td>
                            Whether this message contained
                            <a href="/help/mention-a-user-or-group#mention-everyone-on-a-stream">wildcard mention</a>
                            like @**all**. Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            a wildcard mention.
                        </td>
                    </tr>
                    <tr>
                        <td><code>has_alert_word</code></td>
                        <td>
                            Whether the message contains any of the current user's
                            <a href="/help/add-an-alert-word">configured alert words</a>.
                            Cannot be changed by the user directly, but
                            can change if the message is edited to add/remove
                            one of the current user's alert words.
                        </td>
                    </tr>
                    <tr>
                        <td><code>historical</code></td>
                        <td>
                            True for messages that the user did not receive
                            at the time they were sent but later was added to
                            the user's history (E.g. because they starred or
                            reacted to a message sent to a public stream
                            before they subscribed to that stream). Cannot be
                            changed by the user directly.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
  /messages/render:
    post:
      description: |
        Render a message to HTML.

        `POST {{ api_url }}/v1/messages/render`
      operationId: render-message
      parameters:
      - description: |
          The content of the message. Maximum message size of 10000 bytes.
        example: Hello
        explode: true
        in: query
        name: content
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    rendered: <p><strong>foo</strong></p>
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    rendered:
                      description: |
                        The rendered HTML.
                      type: string
                  type: object
          description: Success.
      summary: Render message
      tags:
      - messages
  /messages/{message_id}/reactions:
    delete:
      description: |
        Remove an [emoji reaction](/help/emoji-reactions) from a message.

        `DELETE {{ api_url }}/v1/messages/{message_id}/reactions`
      operationId: remove-reaction
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The target emoji's human-readable name.

          To find an emoji's name, hover over a message to reveal
          three icons on the right, then click the smiley face icon.
          Images of available reaction emojis appear. Hover over the
          emoji you want, and note that emoji's text name.
        example: octopus
        explode: true
        in: query
        name: emoji_name
        required: false
        schema:
          type: string
        style: form
      - description: |
          A unique identifier, defining the specific emoji codepoint requested,
          within the namespace of the `reaction_type`.

          For most API clients, you won't need this, but it's important
          for Zulip apps to handle rare corner cases when
          adding/removing votes on an emoji reaction added previously by
          another user.

          If the existing reaction was added when the Zulip server was
          using a previous version of the emoji data mapping between
          Unicode codepoints and human-readable names, sending the
          `emoji_code` in the data for the original reaction allows the
          Zulip server to correctly interpret your upvote as an upvote
          rather than a reaction with a "diffenent" emoji.
        example: 1f419
        explode: true
        in: query
        name: emoji_code
        required: false
        schema:
          type: string
        style: form
      - description: |
          If an app is adding/removing a vote on an existing reaction,
          it should pass this parameter using the value the server provided
          for the existing reaction for specificity.  Supported values:

          * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode codepoint).
          * `realm_emoji`: Custom emoji. (`emoji_code` will be its ID).
          * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to
             namespace the `zulip` emoji.

          **Changes**: In Zulip 3.0 (feature level 2), this become
          optional for [custom emoji](/help/add-custom-emoji);
          previously, this endpoint assumed `unicode_emoji` if this
          parameter was not specified.
        example: unicode_emoji
        explode: true
        in: query
        name: reaction_type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: An example JSON error response for when the emoji code
                    is invalid
                  example:
                    result: error
                    msg: Invalid message(s)
                    code: BAD_REQUEST
          description: Bad request.
      summary: Remove an emoji reaction
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - emoji_code
            - reaction_type
    post:
      description: |
        Add an [emoji reaction](/help/emoji-reactions) to a message.

        `POST {{ api_url }}/v1/messages/{message_id}/reactions`
      operationId: add-reaction
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The target emoji's human-readable name.

          To find an emoji's name, hover over a message to reveal
          three icons on the right, then click the smiley face icon.
          Images of available reaction emojis appear. Hover over the
          emoji you want, and note that emoji's text name.
        example: octopus
        explode: true
        in: query
        name: emoji_name
        required: true
        schema:
          type: string
        style: form
      - description: |
          A unique identifier, defining the specific emoji codepoint requested,
          within the namespace of the `reaction_type`.

          For most API clients, you won't need this, but it's important
          for Zulip apps to handle rare corner cases when
          adding/removing votes on an emoji reaction added previously by
          another user.

          If the existing reaction was added when the Zulip server was
          using a previous version of the emoji data mapping between
          Unicode codepoints and human-readable names, sending the
          `emoji_code` in the data for the original reaction allows the
          Zulip server to correctly interpret your upvote as an upvote
          rather than a reaction with a "diffenent" emoji.
        example: 1f419
        explode: true
        in: query
        name: emoji_code
        required: false
        schema:
          type: string
        style: form
      - description: |
          If an app is adding/removing a vote on an existing reaction,
          it should pass this parameter using the value the server provided
          for the existing reaction for specificity.  Supported values:

          * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode codepoint).
          * `realm_emoji`: Custom emoji. (`emoji_code` will be its ID).
          * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to
             namespace the `zulip` emoji.

          **Changes**: In Zulip 3.0 (feature level 2), this become
          optional for [custom emoji](/help/add-custom-emoji);
          previously, this endpoint assumed `unicode_emoji` if this
          parameter was not specified.
        example: unicode_emoji
        explode: true
        in: query
        name: reaction_type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: An example JSON error response for when the emoji code
                    is invalid
                  example:
                    result: error
                    msg: Invalid emoji code
                    code: BAD_REQUEST
          description: Bad request.
      summary: Add an emoji reaction
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - emoji_code
            - reaction_type
  /messages/matches_narrow:
    get:
      description: |
        Check whether a set of messages match a [narrow](/api/construct-narrow).

        `GET {{ api_url }}/v1/messages/matches_narrow`

        For many common narrows (E.g. a topic), clients can write an
        efficient client-side check to determine whether a
        newly arrived message belongs in the view.

        This endpoint is designed to allow clients to handle more complex narrows
        for which the client does not (or in the case of full-text search,
        cannot) implement this check.

        The format of the `match_subject` and `match_content` objects is designed to match
        those of `GET /messages`, so that a client can splice these fields into a
        `message` object received from `GET /events` and end up with an extended message
        object identical to how a `GET /messages` for the current narrow would have
        returned the message.
      operationId: check-messages-match-narrow
      parameters:
      - content:
          application/json:
            example:
            - 31
            - 32
            schema:
              items:
                type: integer
              type: array
        description: List of IDs for the messages to check.
        explode: true
        in: query
        name: msg_ids
        required: true
        style: form
      - content:
          application/json:
            example:
            - operator: has
              operand: link
            schema:
              items:
                type: object
              type: array
        description: A structure defining the narrow to check against. See how to
          [construct a narrow](/api/construct-narrow).
        explode: true
        in: query
        name: narrow
        required: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/SuccessDescription'
                - $ref: '#/components/schemas/JsonSuccessBase'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    messages:
                      "31":
                        match_content: <p><a href="http://foo.com" target="_blank"
                          title="http://foo.com">http://foo.com</a></p>
                        match_subject: test_topic
                  properties:
                    result: {}
                    msg: {}
                    messages:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `message_id`: The ID of the message that matches the narrow.  No record will be returned
                          for queried messages that do not match the narrow.
                        properties:
                          match_content:
                            description: |
                              HTML content of a queried message that matches the narrow.  If the
                              narrow is a search narrow, `<span class="highlight">` elements
                              will be included, wrapping the matches for the search keywords.
                            type: string
                          match_subject:
                            description: |
                              HTML-escaped topic of a queried message that matches the narrow.  If the
                              narrow is a search narrow, `<span class="highlight">` elements
                              will be included wrapping the matches for the search keywords.
                            type: string
                        type: object
                      description: |
                        A dictionary with a key for each queried message that matches the narrow,
                        with message IDs as keys and search rendering data as values.
                      type: object
                  type: object
          description: Success.
      summary: Check if messages match a narrow
      tags:
      - messages
  /messages/{message_id}:
    delete:
      description: |
        Permanently delete a message.

        `DELETE {{ api_url }}/v1/messages/{msg_id}`

        This API corresponds to the
        [delete a message completely][delete-completely] feature documented in
        the Zulip Help Center.

        [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely
      operationId: delete-message
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/InvalidMessageError'
                  - description: An example JSON response for when the specified message
                      does not exist
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON response for when the user making the query does not
                      have permission to delete the message
                    example:
                      code: BAD_REQUEST
                      msg: You don't have permission to delete this message
                      result: error
          description: Bad request.
      summary: Delete a message
      tags:
      - messages
      x-requires-administrator: true
    get:
      description: |
        Get the raw content of a message.

        `GET {{ api_url }}/v1/messages/{msg_id}`

        This is a rarely-used endpoint relevant for clients that primarily
        work with HTML-rendered messages but might need to occasionally fetch
        the message's raw Markdown (e.g. for pre-filling a message-editing
        UI).
      operationId: get-raw-message
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    raw_content: '**Don''t** forget your towel!'
                    result: success
                    msg: ""
                  properties:
                    result: {}
                    msg: {}
                    raw_content:
                      description: |
                        The raw content of the message.
                      type: string
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/InvalidMessageError'
                - description: |
                    An example JSON response for when the specified message does not exist or it
                    is not visible to the user making the query (e.g. it was a PM between other
                    two users)
          description: Bad request.
      summary: Get a message's raw Markdown
      tags:
      - messages
    patch:
      description: |
        Edit/update the content or topic of a message.

        `PATCH {{ api_url }}/v1/messages/{msg_id}`

        `{msg_id}` in the above URL should be replaced with the ID of the
        message you wish you update.

        You can [resolve topics](/help/resolve-a-topic) by editing the
        topic to `✔ {original_topic}`.

        **Note**: See [configuring message
        editing][config-message-editing] for detailed documentation on
        when users are allowed to edit topics.

        [config-message-editing]: /help/configure-message-editing-and-deletion
      operationId: update-message
      parameters:
      - description: |
          The target message's ID.
        example: 42
        explode: false
        in: path
        name: message_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The topic to move the message(s) to, to request changing the topic.
          Should only be sent when changing the topic, and will throw an error
          if the target message is not a stream message.

          Maximum length of 60 characters.

          **Changes**: New in Zulip 2.0.  Previous Zulip releases encoded
          this as `subject`, which is currently a deprecated alias.
        example: Castle
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      - description: |
          Which message(s) should be edited: just the one indicated in
          `message_id`, messages in the same topic that had been sent after this
          one, or all of them.

          Only the default value of `change_one` is valid when
          editing only the content of a message.

          This parameter determines both which messages get moved and also whether
          clients that are currently narrowed to the topic containing the message
          should navigate or adjust their compose box recipient to point to the
          post-edit stream/topic.
        example: change_all
        explode: true
        in: query
        name: propagate_mode
        required: false
        schema:
          default: change_one
          enum:
          - change_one
          - change_later
          - change_all
          type: string
        style: form
      - description: |
          Whether to send breadcrumb message to the old thread to
          notify users where the messages were moved to.

          **Changes**: New in Zulip 3.0 (feature level 9).
        example: true
        explode: true
        in: query
        name: send_notification_to_old_thread
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Whether to send a notification message to the new thread to
          notify users where the messages came from.

          **Changes**: New in Zulip 3.0 (feature level 9).
        example: true
        explode: true
        in: query
        name: send_notification_to_new_thread
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          The content of the message. Maximum message size of 10000 bytes.
        example: Hello
        explode: true
        in: query
        name: content
        required: false
        schema:
          type: string
        style: form
      - description: |
          The stream ID to move the message(s) to, to request moving
          messages to another stream.

          Should only be sent when changing the stream, and will throw an error
          if the target message is not a stream message.
        example: 42
        explode: true
        in: query
        name: stream_id
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: |
                    A typical JSON response for when one doesn't have the permission to
                    edit a particular message
                  example:
                    code: BAD_REQUEST
                    msg: You don't have permission to edit this message
                    result: error
                  properties:
                    msg:
                      enum:
                      - Your organization has turned off message editing
                      - You don't have permission to edit this message
                      - The time limit for editing this message has past
                      - Nothing to change
                      - Topic can't be empty
                      type: string
          description: Bad request.
      summary: Edit a message
      tags:
      - messages
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - stream_id
  /user_uploads:
    post:
      description: |
        Upload a single file and get the corresponding URI.

        `POST {{ api_url }}/v1/user_uploads`

        Initially, only you will be able to access the link.  To share the
        uploaded file, you'll need to [send a message][send-message]
        containing the resulting link.  Users who can already access the link
        can reshare it with other users by sending additional Zulip messages
        containing the link.

        [uploaded-files]: /help/manage-your-uploaded-files
        [send-message]: /api/send-message
      operationId: upload-file
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          multipart/form-data:
            schema:
              properties:
                filename:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    uri: /user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
                  properties:
                    result: {}
                    msg: {}
                    uri:
                      description: |
                        The URI of the uploaded file.
                      type: string
                  type: object
          description: Success.
      summary: Upload a file
      tags:
      - messages
      x-parameter-description: |
        As described above, the file to upload must be provided in the
        request's body.

        ## Maximum file size

        The maximum file size for uploads can be configured by the
        administrator of the Zulip server by setting `MAX_FILE_UPLOAD_SIZE`
        in the [server's settings][1]. `MAX_FILE_UPLOAD_SIZE` defaults
        to 25MB.

        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings
  /user_uploads/{realm_id_str}/{filename}:
    get:
      description: |
        Get a temporary URL for access to the file that doesn't require authentication.
      operationId: get-file-temporary-url
      parameters:
      - description: |
          The realm id.
        example: 1
        explode: false
        in: path
        name: realm_id_str
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Path to the URL.
        example: 4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
        explode: false
        in: path
        name: filename
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    url: /user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55
                  properties:
                    result: {}
                    msg: {}
                    url:
                      description: |
                        A temporary URL that can be used to access the uploaded file
                        without Zulip's normal API authentication.
                      type: string
                  type: object
          description: Success.
      summary: Get public temporary URL
      tags:
      - messages
  /users:
    get:
      description: |
        Retrieve details on all users in the organization.  Optionally
        includes values of [custom profile field](/help/add-custom-profile-fields).

        `GET {{ api_url }}/v1/users`

        You can also [fetch details on a single user](/api/get-user).
      operationId: get-users
      parameters:
      - description: |
          Whether the client supports computing gravatars URLs.  If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar.  This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.
        example: true
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/add-custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    members:
                    - is_active: true
                      email: AARON@zulip.com
                      is_admin: false
                      is_owner: false
                      is_billing_admin: false
                      role: 400
                      avatar_url: https://secure.gravatar.com/avatar/818c212b9f8830dfef491b3f7da99a14?d=identicon&version=1
                      bot_type: null
                      timezone: ""
                      is_bot: false
                      user_id: 7
                      profile_data: {}
                      is_guest: false
                      date_joined: 2019-10-20T07:50:53.728864+00:00
                      full_name: aaron
                    - date_joined: 2019-10-20T07:50:53.729659+00:00
                      full_name: King Hamlet
                      is_guest: false
                      profile_data:
                        "4":
                          value: vim
                        "2":
                          value: |-
                            I am:
                            * The prince of Denmark
                            * Nephew to the usurping Claudius
                          rendered_value: |-
                            <p>I am:</p>
                            <ul>
                            <li>The prince of Denmark</li>
                            <li>Nephew to the usurping Claudius</li>
                            </ul>
                        "5":
                          value: 1900-01-01
                        "7":
                          value: '[11]'
                        "6":
                          value: https://blog.zulig.org
                        "1":
                          value: +0-11-23-456-7890
                          rendered_value: <p>+0-11-23-456-7890</p>
                        "8":
                          value: zulipbot
                        "3":
                          rendered_value: <p>Dark chocolate</p>
                          value: Dark chocolate
                      user_id: 10
                      is_bot: false
                      bot_type: null
                      timezone: ""
                      is_admin: false
                      is_owner: false
                      is_billing_admin: false
                      role: 400
                      avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
                      is_active: true
                      email: hamlet@zulip.com
                    - bot_owner_id: 11
                      is_guest: false
                      date_joined: 2019-10-20T12:52:17.862053+00:00
                      full_name: Iago's Bot
                      email: iago-bot@zulipdev.com
                      is_active: true
                      avatar_url: https://secure.gravatar.com/avatar/7328586831cdbb1627649bd857b1ee8c?d=identicon&version=1
                      is_admin: false
                      is_owner: false
                      is_billing_admin: false
                      role: 400
                      user_id: 23
                      bot_type: 1
                      timezone: ""
                      is_bot: true
                  properties:
                    result: {}
                    msg: {}
                    members:
                      description: |
                        A list of `user` objects, each containing details about a user in the
                        organization.
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                  type: object
          description: Success.
      summary: Get all users
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` query parameter as follows:
    post:
      description: |
        {!can-create-users-only.md!}

        Create a new user account via the API.

        `POST {{ api_url }}/v1/users`
      operationId: create-user
      parameters:
      - description: |
          The email address of the new user.
        example: username@example.com
        explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      - description: |
          The password of the new user.
        example: abcd1234
        explode: true
        in: query
        name: password
        required: true
        schema:
          type: string
        style: form
      - description: |
          The full name of the new user.
        example: New User
        explode: true
        in: query
        name: full_name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    user_id: 25
                  properties:
                    result: {}
                    msg: {}
                    user_id:
                      description: |
                        The ID assigned to the newly created user.

                        **Changes**: New in Zulip 4.0 (feature level 30).
                      type: integer
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    A typical JSON response for when another user with the same
                    email address already exists in the realm
                  example:
                    msg: Email 'newbie@zulip.com' already in use
                    result: error
          description: Bad request.
      summary: Create a user
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id}/reactivate:
    post:
      description: |
        [Reactivates a
        user](https://zulip.com/help/deactivate-or-reactivate-a-user)
        given their user ID.

        `POST {{ api_url }}/v1/users/{user_id}/reactivate`
      operationId: reactivate-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/SuccessDescription'
                - $ref: '#/components/schemas/JsonSuccess'
                - example:
                    msg: ""
                    result: success
          description: Success
      summary: Reactivate a user
      tags:
      - users
      x-requires-administrator: true
  /users/{user_id_or_email}/presence:
    get:
      description: |
        Get the presence status for a specific user.

        This endpoint is most useful for embedding data about a user's
        presence status in other sites (E.g. an employee directory).  Full
        Zulip clients like mobile/desktop apps will want to use the main
        presence endpoint, which returns data for all active users in the
        organization, instead.

        `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`

        See
        [Zulip's developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)
        for details on the data model for presence in Zulip.
      operationId: get-user-presence
      parameters:
      - description: |
          The user_id or Zulip display email address of the user whose presence you want to fetch.

          **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported
          identifying the user by Zulip display email.
        example: iago@zulip.com
        explode: false
        in: path
        name: user_id_or_email
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    presence:
                      website:
                        timestamp: 1532697622
                        status: active
                      ZulipMobile:
                        timestamp: 1522687421
                        status: active
                      aggregated:
                        timestamp: 1532697622
                        status: active
                    result: success
                    msg: ""
                  properties:
                    result: {}
                    msg: {}
                    presence:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{client_name}` or `aggregated`: the keys for these objects are
                          the names of the different clients where this user is logged in,
                          like `website`, `ZulipDesktop`, `ZulipTerminal`, or
                          `ZulipMobile`. There is also an `aggregated` key, which matches
                          the contents of the object that has been updated most
                          recently. For most applications, you'll just want to look at the
                          `aggregated` key.
                        properties:
                          timestamp:
                            description: |
                              when this update was received; if the timestamp
                              is more than a few minutes in the past, the user is offline.
                            type: integer
                          status:
                            description: |
                              either `active` or `idle`: whether the user had
                              recently interacted with Zulip at the time in the timestamp
                              (this distinguishes orange vs. green dots in the Zulip web
                              UI; orange/idle means we don't know whether the user is
                              actually at their computer or just left the Zulip app open
                              on their desktop).
                            type: string
                        type: object
                      description: |
                        An object containing the presence details for every client the user has
                        logged into.
                      type: object
                  type: object
          description: Success.
      summary: Get user presence
      tags:
      - users
  /users/me:
    delete:
      description: |
        Deactivates the user's account.  See also the administrative endpoint for
        [deactivating another user](/api/deactivate-user).

        `DELETE {{ api_url }}/v1/users/me`

        This endpoint is primarily useful to Zulip clients providing a user settings UI.
      operationId: deactivate-own-user
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    An example JSON error response when attempting to deactivate the only
                    organization owner in an organization
                  example:
                    msg: Cannot deactivate the only organization owner
                    result: error
          description: Bad request.
      summary: Deactivate own user
      tags:
      - users
    get:
      description: |
        Get basic data about the user/bot that requests this endpoint.

        `GET {{ api_url }}/v1/users/me`
      operationId: get-own-user
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    avatar_url: https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon&version=1
                    avatar_version: 1
                    email: iago@zulip.com
                    full_name: Iago
                    is_admin: true
                    is_owner: false
                    role: 200
                    is_guest: false
                    is_billing_admin: false
                    is_bot: false
                    is_active: true
                    timezone: ""
                    date_joined: 2019-10-20T07:50:53.728864+00:00
                    max_message_id: 30
                    msg: ""
                    result: success
                    user_id: 5
                    profile_data:
                      "5":
                        value: 2000-01-01
                      "4":
                        value: emacs
                      "7":
                        value: '[10]'
                      "1":
                        value: +1-234-567-8901
                        rendered_value: <p>+1-234-567-8901</p>
                      "2":
                        rendered_value: <p>Betrayer of Othello.</p>
                        value: Betrayer of Othello.
                      "8":
                        value: zulip
                      "3":
                        value: Apples
                        rendered_value: <p>Apples</p>
                      "6":
                        value: https://zulip.readthedocs.io/en/latest/
                  properties:
                    result: {}
                    msg: {}
                    avatar_url:
                      description: |
                        URL for the user's avatar.

                        **Changes**: New in Zulip 2.1.0.
                      example: x
                      type: string
                    avatar_version:
                      description: |
                        Version for the user's avatar.  Used for cache-busting requests
                        for the user's avatar.  Clients generally shouldn't need to use this;
                        most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.

                        **Changes**: New in Zulip 3.0 (feature level 10). Previous
                        versions do not return this field.
                      example: 1
                      type: integer
                    email:
                      description: |
                        Email of the requesting user.
                      example: iago@zulip.com
                      type: string
                    full_name:
                      description: |
                        Full name of the requesting user.
                      example: Iago
                      type: string
                    is_admin:
                      description: |
                        A boolean indicating if the requesting user is an admin.
                      example: true
                      type: boolean
                    is_owner:
                      description: |
                        A boolean indicating if the requesting user is
                        an organization owner.

                        **Changes**: New in Zulip 3.0 (feature level 8).
                      example: false
                      type: boolean
                    is_billing_admin:
                      description: |
                        A boolean indicating if the requesting user is
                        a billing administrator.

                        **Changes**: New in Zulip 5.0 (feature level 73).
                      example: false
                      type: boolean
                    role:
                      description: |
                        [Organization-level role](/help/roles-and-permissions)) of the user.
                        Poosible values are:

                        * Organization owner => 100
                        * Organization administrator => 200
                        * Organization moderator => 300
                        * Member => 400
                        * Guest => 600

                        **Changes**: New in Zulip 4.0 (feature level 59).
                      enum:
                      - 100
                      - 200
                      - 300
                      - 400
                      - 600
                      type: integer
                    is_guest:
                      description: |
                        A boolean indicating if the requesting user is a guest.

                        **Changes**: New in Zulip 3.0 (feature level 10). Previous
                        versions do not return this field.
                      example: false
                      type: boolean
                    is_bot:
                      description: |
                        A boolean indicating if the requesting user is a bot.
                      example: false
                      type: boolean
                    is_active:
                      description: |
                        A boolean specifying whether the user account has been deactivated.

                        **Changes**: New in Zulip 3.0 (feature level 10). Previous
                        versions do not return this field.
                      example: true
                      type: boolean
                    timezone:
                      description: |
                        The time zone of the user.

                        **Changes**: New in Zulip 3.0 (feature level 10). Previous
                        versions do not return this field.
                      example: ""
                      type: string
                    date_joined:
                      description: |
                        The time the user account was created.

                        **Changes**: New in Zulip 3.0 (feature level 10). Previous
                        versions do not return this field.
                      example: 2019-10-20T07:50:53.728864+00:00
                      type: string
                    max_message_id:
                      deprecated: true
                      description: |
                        The integer ID of the last message received by your account.

                        **Deprecated**.  We plan to remove this in favor of recommending
                        using `GET /messages` with `anchor="newest"`.
                      example: 30
                      type: integer
                    user_id:
                      description: |
                        The user's ID.
                      example: 1
                      type: integer
                    delivery_email:
                      description: |
                        The user's real email address.  This field is present only if
                        [email address visibility](/help/restrict-visibility-of-email-addresses) is
                        limited and you are an administrator with access to real email addresses
                        under the configured policy.
                      type: string
                    profile_data:
                      $ref: '#/components/schemas/profile_data'
                  type: object
          description: Success
      summary: Get own user
      tags:
      - users
  /users/me/status:
    post:
      description: |
        Change your [status](/help/status-and-availability).

        `POST {{ api_url }}/v1/users/me/status`

        A request to this endpoint will only change the parameters passed.
        For example, passing just `status_text` requests a change in the status
        text, but will leave the status emoji unchanged.

        Clients that wish to set the user's status to a specific value should
        pass all supported parameters.
      operationId: update-status
      parameters:
      - allowEmptyValue: true
        description: |
          The text content of the status message. Sending the empty string
          will clear the user's status.

          **Note**: The limit on the size of the message is 60 characters.
        example: on vacation
        explode: true
        in: query
        name: status_text
        required: false
        schema:
          type: string
        style: form
      - description: |
          Whether the user should be marked as "away".
        example: true
        explode: true
        in: query
        name: away
        required: false
        schema:
          type: boolean
        style: form
      - allowEmptyValue: true
        description: |
          The name for the emoji to associate with this status.
        example: car
        explode: true
        in: query
        name: emoji_name
        required: false
        schema:
          type: string
        style: form
      - description: |
          A unique identifier, defining the specific emoji codepoint requested,
          within the namespace of the `reaction_type`.

          For example, for `unicode_emoji`, this will be an encoding of the
          Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.
        example: 1f697
        explode: true
        in: query
        name: emoji_code
        required: false
        schema:
          type: string
        style: form
      - description: |
          One of the following values:

          * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode
            codepoint).
          * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).
            (`emoji_code` will be its ID).
          * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to
            namespace the `zulip` emoji.
        example: unicode_emoji
        explode: true
        in: query
        name: reaction_type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when no changes were requested
                    example:
                      result: error
                      msg: Client did not pass any new values.
                      code: BAD_REQUEST
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when the
                      `status_text` message exceeds the limit of
                      60 characters
                    example:
                      result: error
                      msg: 'status_text is too long (limit: 60 characters)'
                      code: BAD_REQUEST
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when `emoji_name` is not specified
                      but `emoji_code` or `reaction_type` is specified
                    example:
                      result: error
                      msg: Client must pass emoji_name if they pass either emoji_code
                        or reaction_type.
                      code: BAD_REQUEST
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when the emoji name does not exist
                    example:
                      result: error
                      msg: Emoji 'invalid' does not exist
                      code: BAD_REQUEST
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when the emoji name is invalid
                    example:
                      result: error
                      msg: Invalid emoji name.
                      code: BAD_REQUEST
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - description: |
                      An example JSON error response when the custom emoji is invalid
                    example:
                      result: error
                      msg: Invalid custom emoji.
                      code: BAD_REQUEST
          description: Success.
      summary: Update your status
      tags:
      - users
  /users/me/{stream_id}/topics:
    get:
      description: |
        Get all the topics in a specific stream

        `GET {{ api_url }}/v1/users/me/{stream_id}/topics`
      operationId: get-stream-topics
      parameters:
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    topics:
                    - max_id: 26
                      name: Denmark3
                    - max_id: 23
                      name: Denmark1
                    - max_id: 6
                      name: Denmark2
                  properties:
                    result: {}
                    msg: {}
                    topics:
                      description: |
                        An array of `topic` objects.
                      items:
                        additionalProperties: false
                        properties:
                          max_id:
                            description: |
                              The message ID of the last message sent to this topic.
                            type: integer
                          name:
                            description: |
                              The name of the topic.
                            type: string
                        type: object
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    An example JSON response for when the user is attempting to fetch the topics
                    of a non-existing stream (or also a private stream they don't have access to)
                  example:
                    code: BAD_REQUEST
                    msg: Invalid stream id
                    result: error
          description: Bad request.
      summary: Get topics in a stream
      tags:
      - streams
  /users/me/subscriptions:
    delete:
      description: |
        Unsubscribe yourself or other users from one or more streams.

        `DELETE {{ api_url }}/v1/users/me/subscriptions`
      operationId: unsubscribe
      parameters:
      - content:
          application/json:
            example:
            - Verona
            - Denmark
            schema:
              items:
                type: string
              type: array
        description: |
          A list of stream names to unsubscribe from. This parameter is called
          `streams` in our Python API.
        explode: true
        in: query
        name: subscriptions
        required: true
        style: form
      - content:
          application/json:
            example:
            - ZOE@zulip.com
            schema:
              items:
                oneOf:
                - type: string
                - type: integer
              type: array
        description: |
          A list of user ids (preferred) or Zulip display email
          addresses of the users to be subscribed to or unsubscribed
          from the streams specified in the `subscriptions` parameter. If
          not provided, then the requesting user/bot is subscribed.

          **Changes**: The integer format is new in Zulip 3.0 (feature level 9).
        explode: true
        in: query
        name: principals
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    not_removed: []
                    removed:
                    - new stream
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    not_removed:
                      description: |
                        A list of the names of streams that the user is already unsubscribed
                        from, and hence doesn't need to be unsubscribed.
                      items:
                        type: string
                      type: array
                    removed:
                      description: |
                        A list of the names of streams which were unsubscribed from as a result
                        of the query.
                      items:
                        type: string
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/NonExistingStreamError'
                - description: A typical failed JSON response for when the target
                    stream does not exist
          description: Bad request.
      summary: Unsubscribe from a stream
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: include
          description: |
            **Note**: Unsubscribing another user from a stream requires
            administrative privileges.
          parameters:
            enum:
            - subscriptions
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may specify the `principals` parameter like so:
    get:
      description: |
        Get all streams that the user is subscribed to.

        `GET {{ api_url }}/v1/users/me/subscriptions`
      operationId: get-subscriptions
      parameters:
      - description: |
          Whether each returned stream object should include a `subscribers`
          field containing a list of the user IDs of its subscribers.

          (This may be significantly slower in organizations with
          thousands of users subscribed to many streams.)

          **Changes**: New in Zulip 2.1.0.
        example: true
        explode: true
        in: query
        name: include_subscribers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    subscriptions:
                    - audible_notifications: true
                      color: '#e79ab5'
                      description: A Scandinavian country
                      desktop_notifications: true
                      email_address: Denmark+187b4125ed36d6af8b5d03ef4f65c0cf@zulipdev.com:9981
                      is_muted: false
                      invite_only: false
                      name: Denmark
                      pin_to_top: false
                      push_notifications: false
                      role: 20
                      stream_id: 1
                      subscribers:
                      - 7
                      - 10
                      - 11
                      - 12
                      - 14
                    - audible_notifications: true
                      color: '#e79ab5'
                      description: Located in the United Kingdom
                      desktop_notifications: true
                      email_address: Scotland+f5786390183e60a1ccb18374f9d05649@zulipdev.com:9981
                      is_muted: false
                      invite_only: false
                      name: Scotland
                      pin_to_top: false
                      push_notifications: false
                      role: 50
                      stream_id: 3
                      subscribers:
                      - 7
                      - 11
                      - 12
                      - 14
                  properties:
                    result: {}
                    msg: {}
                    subscriptions:
                      description: |
                        A list of dictionaries where each dictionary contains
                        information about one of the subscribed streams.
                      items:
                        $ref: '#/components/schemas/Subscriptions'
                      type: array
                  required:
                  - subscriptions
                  type: object
          description: Success.
      summary: Get subscribed streams
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          description: |
            You may pass the `include_subscribers` query parameter as follows:
          parameters:
            enum:
            - ""
    patch:
      description: |
        Update which streams you are are subscribed to.
      operationId: update-subscriptions
      parameters:
      - content:
          application/json:
            example:
            - Verona
            - Denmark
            schema:
              items:
                type: string
              type: array
        description: |
          A list of stream names to unsubscribe from.
        explode: true
        in: query
        name: delete
        required: false
        style: form
      - content:
          application/json:
            example:
            - name: Verona
            - name: Denmark
              color: '#e79ab5'
              description: A Scandinavian country
            schema:
              items:
                additionalProperties: false
                properties:
                  name:
                    type: string
                  color:
                    type: string
                  description:
                    type: string
                type: object
              type: array
        description: |
          A list of objects describing which streams to subscribe to, optionally
          including per-user subscription parameters (e.g. color) and if the
          stream is to be created, its description.
        explode: true
        in: query
        name: add
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    subscribed: {}
                    already_subscribed:
                      iago@zulip.com:
                      - Verona
                    not_removed: []
                    removed:
                    - new stream
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    subscribed:
                      additionalProperties:
                        description: |
                          `{email_id}`: A list of the names of streams that
                          the user was subscribed to as a result of the query.
                        items:
                          type: string
                        type: array
                      description: |
                        A dictionary where the key is the email
                        address of the user/bot and the value is a
                        list of the names of the streams that were
                        subscribed to as a result of the query.
                      type: object
                    already_subscribed:
                      additionalProperties:
                        description: |
                          `{email_id}`: A list of the names of streams that
                          the user was already subscribed to.
                        items:
                          type: string
                        type: array
                      description: |
                        A dictionary where the key is the email
                        address of the user/bot and the value is a
                        list of the names of the streams that the
                        user/bot is already subscribed to.
                      type: object
                    not_removed:
                      description: |
                        A list of the names of streams that the user
                        is already unsubscribed from, and hence
                        doesn't need to be unsubscribed.
                      items:
                        type: string
                      type: array
                    removed:
                      description: |
                        A list of the names of streams which were unsubscribed
                        from as a result of the query.
                      items:
                        type: string
                      type: array
                  required:
                  - already_subscribed
                  - removed
                  - subscribed
                  type: object
          description: Success.
      summary: Update subscriptions
      tags:
      - streams
    post:
      description: |
        Subscribe one or more users to one or more streams.

        `POST {{ api_url }}/v1/users/me/subscriptions`

        If any of the specified streams do not exist, they are automatically
        created.  The initial [stream settings](/api/update-stream) will be determined
        by the optional parameters like `invite_only` detailed below.
      operationId: subscribe
      parameters:
      - content:
          application/json:
            example:
            - name: Verona
              description: Italian city
            schema:
              items:
                type: object
              type: array
        description: |
          A list of dictionaries containing the key `name` and value
          specifying the name of the stream to subscribe. If the stream does not
          exist a new stream is created. The description of the stream created can
          be specified by setting the dictionary key `description` with an
          appropriate value.
        explode: true
        in: query
        name: subscriptions
        required: true
        style: form
      - content:
          application/json:
            example:
            - ZOE@zulip.com
            schema:
              items:
                oneOf:
                - type: string
                - type: integer
              type: array
        description: |
          A list of user ids (preferred) or Zulip display email
          addresses of the users to be subscribed to or unsubscribed
          from the streams specified in the `subscriptions` parameter. If
          not provided, then the requesting user/bot is subscribed.

          **Changes**: The integer format is new in Zulip 3.0 (feature level 9).
        explode: true
        in: query
        name: principals
        required: false
        style: form
      - description: |
          A boolean specifying whether authorization errors (such as when the
          requesting user is not authorized to access a private stream) should be
          considered fatal or not. When `True`, an authorization error is reported
          as such. When set to `False`, the response will be a 200 and any streams
          where the request encountered an authorization error will be listed
          in the `unauthorized` key.
        example: false
        explode: true
        in: query
        name: authorization_errors_fatal
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          If one of the streams specified did not exist previously and is thus craeted
          by this call, this determines whether [notification bot](/help/configure-notification-bot)
          will send an announcement about the new stream's creation.
        example: true
        explode: true
        in: query
        name: announce
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          As described above, this endpoint will create a new stream if passed
          a stream name that doesn't already exist.  This parameters and the ones
          that follow are used to request an initial configuration of a created
          stream; they are ignored for streams that already exist.

          This parameter determines whether any newly created streams will be
          private streams.
        example: true
        explode: true
        in: query
        name: invite_only
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether the stream's message history should be available to
          newly subscribed members, or users can only access messages
          they actually received while subscribed to the stream.

          Corresponds to the [shared history](/help/stream-permissions)
          option in documentation.
        example: false
        explode: true
        in: query
        name: history_public_to_subscribers
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Policy for which users can post messages to the stream.

          * 1 => Any user can post.
          * 2 => Only administrators can post.
          * 3 => Only full members can post.
          * 4 => Only moderators can post.

          **Changes**: New in Zulip 3.0, replacing the previous
          `is_announcement_only` boolean.
        example: 2
        explode: true
        in: query
        name: stream_post_policy
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: |
          Number of days that messages sent to this stream will be stored
          before being automatically deleted by the [message retention
          policy](/help/message-retention-policy).  Two special string format
          values are supported:

          * "realm_default" => Return to the organization-level setting.
          * "forever" => Retain messages forever.

          **Changes**: New in Zulip 3.0 (feature level 17).
        example: "20"
        explode: true
        in: query
        name: message_retention_days
        required: false
        schema:
          oneOf:
          - type: string
          - type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - $ref: '#/components/schemas/SuccessDescription'
                  - example:
                      already_subscribed: {}
                      msg: ""
                      result: success
                      subscribed:
                        iago@zulip.com:
                        - new stream
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - description: |
                      A typical successful JSON response when the user is already subscribed to
                      the streams specified
                    example:
                      already_subscribed:
                        newbie@zulip.com:
                        - new stream
                      msg: ""
                      result: success
                      subscribed: {}
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - description: |
                      A typical response for when the requesting user does not have access to
                      a private stream and `authorization_errors_fatal` is `True`
                    example:
                      msg: Unable to access stream (private_stream).
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - description: |
                      A typical response for when the requesting user does not have access to
                      a private stream and `authorization_errors_fatal` is `False`
                    example:
                      already_subscribed: {}
                      msg: ""
                      result: success
                      subscribed: {}
                      unauthorized:
                      - private_stream
          description: Success.
      summary: Subscribe to a stream
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - subscriptions
        - type: include
          description: |
            To subscribe another user to a stream, you may pass in
            the `principals` parameter, like so:
          parameters:
            enum:
            - subscriptions
            - principals
  /users/me/subscriptions/muted_topics:
    patch:
      description: |
        This endpoint mutes/unmutes a topic within a stream that the current
        user is subscribed to.  Muted topics are displayed faded in the Zulip
        UI, and are not included in the user's unread count totals.

        `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics`
      operationId: mute-topic
      parameters:
      - description: |
          The name of the stream to access.
        example: Denmark
        explode: true
        in: query
        name: stream
        required: false
        schema:
          type: string
        style: form
      - description: |
          The ID of the stream to access.
        example: 42
        explode: true
        in: query
        name: stream_id
        required: false
        schema:
          type: integer
        style: form
      - description: |
          The topic to (un)mute. Note that the request will succeed regardless of
          whether any messages have been sent to the specified topic.
        example: dinner
        explode: true
        in: query
        name: topic
        required: true
        schema:
          type: string
        style: form
      - description: |
          Whether to mute (`add`) or unmute (`remove`) the provided topic.
        example: add
        explode: true
        in: query
        name: op
        required: true
        schema:
          enum:
          - add
          - remove
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: |
                      An example JSON response for when an `add` operation is requested for a topic
                      that has already been muted
                    example:
                      msg: Topic already muted
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: |
                      An example JSON response for when a `remove` operation is requested for a
                      topic that had not been previously muted
                    example:
                      msg: Topic is not muted
                      result: error
          description: Bad request.
      summary: Topic muting
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - stream_id
  /users/me/muted_users/{muted_user_id}:
    delete:
      description: |
        This endpoint unmutes a user.

        `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`

        **Changes**: New in Zulip 4.0 (feature level 48).
      operationId: unmute-user
      parameters:
      - description: |
          The ID of the user to mute/un-mute.
        example: 10
        explode: false
        in: path
        name: muted_user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: An example JSON response for when the user is nonexistent
                      or inaccessible
                    example:
                      msg: No such user
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: An example JSON response for when the user is not
                      previously muted
                    example:
                      msg: User is not muted
                      result: error
          description: Bad request.
      summary: Unmute a user
      tags:
      - users
    post:
      description: |
        This endpoint [mutes a user](/help/mute-a-user).  Messages sent by users
        you've muted will be automatically marked as read and hidden.

        `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`

        Muted users should be implemented by clients as follows:

        * The server will immediately mark all messages sent by the muted
          user as read.  This will automatically clear any existing mobile
          push notifications related to the muted user.
        * The server will mark any new messages sent by the muted user as read
          for your account, which prevents all email and mobile push notifications.
        * Clients should exclude muted users from presence lists or other UI
          for viewing or composing 1:1 private messages. 1:1 private messages sent by
          muted users should be hidden everywhere in the Zulip UI.
        * Stream messages and group private messages sent by the muted
          user should avoid displaying the content and name/avatar,
          but should display that N messages by a muted user were
          hidden (so that it is possible to interpret the messages by
          other users who are talking with the muted user).
        * Group private message conversations including the muted user
          should display muted users as "Muted user", rather than
          showing their name, in lists of such conversations, along with using
          a blank grey avatar where avatars are displayed.
        * Administrative/settings UI elements for showing "All users that exist
          on this stream or realm", e.g. for organization
          administration or showing stream subscribers, should display
          the user's name as normal.

        **Changes**: New in Zulip 4.0 (feature level 48).
      operationId: mute-user
      parameters:
      - description: |
          The ID of the user to mute/un-mute.
        example: 10
        explode: false
        in: path
        name: muted_user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: An example JSON response for when the user is yourself
                    example:
                      msg: Cannot mute self
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: An example JSON response for when the user is nonexistent
                      or inaccessible
                    example:
                      msg: No such user
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - description: An example JSON response for when the user is already
                      muted
                    example:
                      msg: User already muted
                      result: error
          description: Bad request.
      summary: Mute a user
      tags:
      - users
  /users/{user_id}/subscriptions/{stream_id}:
    get:
      description: |
        Check whether a user is subscribed to a stream.

        `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`

        **Changes**: New in Zulip 3.0 (feature level 11).
      operationId: get-subscription-status
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  description: MANUALLY
                  example:
                    msg: ""
                    result: success
                    is_subscribed: false
                  properties:
                    result: {}
                    msg: {}
                    is_subscribed:
                      description: |
                        Whether the user is subscribed to the stream.
                      type: boolean
                  type: object
          description: Success
      summary: Get subscription status
      tags:
      - streams
  /realm/emoji/{emoji_name}:
    post:
      description: |
        This endpoint is used to upload a custom emoji for use in the user's
        organization.  Access to this endpoint depends on the
        [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).

        `POST {{ api_url }}/v1/realm/emoji/{emoji_name}`
      operationId: upload-custom-emoji
      parameters:
      - description: |
          The name that should be associated with the uploaded emoji image/gif.
          The emoji name can only contain letters, numbers, dashes, and spaces.
          Upper and lower case letters are treated the same, and underscores (_)
          are treated the same as spaces (consistent with how the Zulip UI
          handles emoji).
        example: smile
        explode: false
        in: path
        name: emoji_name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object_1'
        content:
          multipart/form-data:
            schema:
              properties:
                filename:
                  format: binary
                  type: string
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Upload custom emoji
      tags:
      - server_and_organizations
      x-parameter-description: |
        As described above, the image file to upload must be provided in the
        request's body.

        ## Maximum file size

        The maximum file size for uploads can be configured by the
        administrator of the Zulip server by setting `MAX_EMOJI_FILE_SIZE_MIB`
        in the [server's settings][1]. `MAX_EMOJI_FILE_SIZE_MIB` defaults
        to 5MB.

        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings
  /realm/emoji:
    get:
      description: |
        Get all the custom emoji in the user's organization.

        `GET {{ api_url }}/v1/realm/emoji`
      operationId: get-custom-emoji
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    emoji:
                      "1":
                        id: "1"
                        name: green_tick
                        source_url: /user_avatars/1/emoji/images/1.png
                        deactivated: false
                        author_id: 5
                  properties:
                    result: {}
                    msg: {}
                    emoji:
                      additionalProperties:
                        $ref: '#/components/schemas/RealmEmoji'
                      description: |
                        An object that contains `emoji` objects, each identified with their
                        emoji ID as the key.
                      type: object
                  type: object
          description: Success.
      summary: Get all custom emoji
      tags:
      - server_and_organizations
  /realm/profile_fields:
    get:
      description: |
        Get all the [custom profile fields](/help/add-custom-profile-fields)
        configured for the user's organization.

        `GET {{ api_url }}/v1/realm/profile_fields`
      operationId: get-custom-profile-fields
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    custom_fields:
                    - id: 1
                      name: Phone number
                      type: 1
                      hint: ""
                      field_data: ""
                      order: 1
                    - id: 2
                      name: Biography
                      type: 2
                      hint: What are you known for?
                      field_data: ""
                      order: 2
                    - id: 3
                      name: Favorite food
                      type: 1
                      hint: Or drink, if you'd prefer
                      field_data: ""
                      order: 3
                    - id: 4
                      name: Favorite editor
                      type: 3
                      hint: ""
                      field_data: '{"vim":{"text":"Vim","order":"1"},"emacs":{"text":"Emacs","order":"2"}}'
                      order: 4
                    - id: 5
                      name: Birthday
                      type: 4
                      hint: ""
                      field_data: ""
                      order: 5
                    - id: 6
                      name: Favorite website
                      type: 5
                      hint: Or your personal blog's URL
                      field_data: ""
                      order: 6
                    - id: 7
                      name: Mentor
                      type: 6
                      hint: ""
                      field_data: ""
                      order: 7
                    - id: 8
                      name: GitHub
                      type: 7
                      hint: Enter your GitHub username
                      field_data: '{"subtype":"github"}'
                      order: 8
                  properties:
                    result: {}
                    msg: {}
                    custom_fields:
                      description: |
                        An array containing all the custom profile fields defined in this
                        Zulip organization.
                      items:
                        $ref: '#/components/schemas/CustomProfileField'
                      type: array
                  type: object
          description: Success.
      summary: Get all custom profile fields
      tags:
      - server_and_organizations
    patch:
      description: |
        Reorder the custom profile fields in the user's organization.

        `PATCH {{ api_url }}/v1/realm/profile_fields`

        Custom profile fields are displayed in Zulip UI widgets in order; this
        endpoint allows administrative settings UI to change the field ordering.

        This endpoint is used to implement the dragging feature described in the
        [custom profile fields documentation](/help/add-custom-profile-fields).
      operationId: reorder-custom-profile-fields
      parameters:
      - content:
          application/json:
            example:
            - 10
            - 9
            - 8
            - 7
            - 6
            - 5
            - 4
            - 3
            - 2
            - 1
            schema:
              items:
                type: integer
              type: array
        description: |
          A list of the IDs of all the custom profile fields defined in this
          organization, in the desired new order.
        explode: true
        in: query
        name: order
        required: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Reorder custom profile fields
      tags:
      - server_and_organizations
      x-requires-administrator: true
    post:
      description: |
        [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.

        `POST {{ api_url }}/v1/realm/profile_fields`
      operationId: create-custom-profile-field
      parameters:
      - description: |
          The name of the custom profile field, which will appear both in
          user-facing settings UI for configuring custom profile fields and
          in UI displaying a user's profile.
        example: Favorite programming language
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |
          The help text to be displayed for the custom profile field in user-facing
          settings UI for configuring custom profile fields.
        example: Your favorite programming language.
        explode: true
        in: query
        name: hint
        required: false
        schema:
          type: string
        style: form
      - description: |
          The field type can be any of the supported custom profile field types. See the
          [custom profile fields documentation](/help/add-custom-profile-fields)
          more details on what each type means.

          * **1**: Short text
          * **2**: Long text
          * **3**: List of options
          * **4**: Date picker
          * **5**: Link
          * **6**: Person picker
          * **7**: External account
        example: 3
        explode: true
        in: query
        name: field_type
        required: true
        schema:
          type: integer
        style: form
      - content:
          application/json:
            example:
              python:
                text: Python
                order: "1"
              java:
                text: Java
                order: "2"
            schema:
              type: object
        description: |
          Field types 3 (List of options) and 7 (External account) support storing
          additional configuration for the field type in the `field_data` attribute.

          For field type 3 (List of options), this attribute is a JSON dictionary
          defining the choices and the order they will be displayed in the
          dropdown UI for individual users to select an option.

          The interface for field type 7 is not yet stabilized.
        explode: true
        in: query
        name: field_data
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    id: 9
                  properties:
                    result: {}
                    msg: {}
                    id:
                      description: |
                        The ID for the custom profile field.
                      type: integer
                  type: object
          description: Success.
      summary: Create a custom profile field
      tags:
      - server_and_organizations
      x-requires-administrator: true
  /users/me/subscriptions/properties:
    post:
      description: |
        This endpoint is used to update the user's personal settings for the
        streams they are subscribed to, including muting, color, pinning, and
        per-stream notification settings.

        `POST {{ api_url }}/v1/users/me/subscriptions/properties`
      operationId: update-subscription-settings
      parameters:
      - content:
          application/json:
            example:
            - stream_id: 1
              property: pin_to_top
              value: true
            - stream_id: 3
              property: color
              value: '#f00f00'
            schema:
              items:
                type: object
              type: array
        description: |
          A list of objects that describe the changes that should be applied in
          each subscription. Each object represents a subscription, and must have
          a `stream_id` key that identifies the stream, as well as the `property`
          being modified and its new `value`.

          The possible values for each `property` and `value` pairs are:

          * `color` (string): the hex value of the user's display color for the stream.
          * `is_muted` (boolean): whether the stream is
            [muted](/help/mute-a-stream).  Prior to Zulip 2.1, this feature was
            represented by the more confusingly named `in_home_view` (with the
            opposite value, `in_home_view=!is_muted`); for
            backwards-compatibility, modern Zulip still accepts that value.
          * `pin_to_top` (boolean): whether to pin the stream at the top of the stream list.
          * `desktop_notifications` (boolean): whether to show desktop notifications
              for all messages sent to the stream.
          * `audible_notifications` (boolean): whether to play a sound
            notification for all messages sent to the stream.
          * `push_notifications` (boolean): whether to trigger a mobile push
              notification for all messages sent to the stream.
          * `email_notifications` (boolean): whether to trigger an email
              notification for all messages sent to the stream.
        explode: true
        in: query
        name: subscription_data
        required: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    subscription_data:
                    - property: pin_to_top
                      value: true
                      stream_id: 1
                    - property: color
                      value: '#f00f00'
                      stream_id: 3
                    result: success
                    msg: ""
                  properties:
                    result: {}
                    msg: {}
                    subscription_data:
                      description: |
                        The same `subscription_data` array sent by the client for the request.
                      items:
                        additionalProperties: false
                        properties:
                          property:
                            description: |
                              The property to be changed. It is one of:

                              * `color`: The hex value of the user's personal display color for the stream.<br>
                              * `is_muted`: Whether the stream is [muted](/help/mute-a-stream).<br>
                              **Changes**: Prior to Zulip 2.1, this feature was
                              represented by the more confusingly named `in_home_view` (with the
                              opposite value, `in_home_view=!is_muted`); for
                              backwards-compatibility, modern Zulip still accepts that value.<br>
                              * `pin_to_top`: Whether to pin the stream at the top of the stream list.
                              * `desktop_notifications`: Whether to show desktop notifications for all
                              messages sent to the stream.<br>
                              * `audible_notifications`: Whether to play a sound notification for all
                              messages sent to the stream.<br>
                              * `push_notifications`: Whether to trigger a mobile push notification for
                              all messages sent to the stream.<br>
                              * `email_notifications`: Whether to trigger an email notification for all
                              messages sent to the stream.<br>
                              * `in_home_view`: Whether to mute the stream (legacy property)<br>
                              * `wildcard_mentions_notify`: whether wildcard mentions trigger notifications
                              as though they were personal mentions in this stream.<br>
                              A null value means the value of this setting
                              should be inherited from the user-level default
                              setting, wildcard_mentions_notify, for
                              this stream.
                            enum:
                            - color
                            - push_notifications
                            - is_muted
                            - pin_to_top
                            - desktop_notifications
                            - audible_notifications
                            - push_notifications
                            - email_notifications
                            - in_home_view
                            - wildcard_mentions_notify
                            type: string
                          value:
                            description: |
                              The desired value of the property
                            oneOf:
                            - type: boolean
                            - type: string
                          stream_id:
                            description: |
                              The desired value of the property
                            type: integer
                        type: object
                      type: array
                  type: object
          description: Success.
      summary: Update subscription settings
      tags:
      - streams
  /users/{email}:
    get:
      description: |
        Fetch details for a single user in the organization given a Zulip display
        email address.

        `GET {{ api_url }}/v1/users/{email}`

        Note that this endpoint uses Zulip display emails addresses
        for organizations that have configured limited [email address
        visibility](/help/restrict-visibility-of-email-addresses).

        You can also fetch details on [all users in the organization](/api/get-users) or
        [by user ID](/api/get-user).  Fetching by user ID is generally recommended
        when possible, as users can
        [change their email address](/help/change-your-email-address).

        *This endpoint is new in Zulip Server 4.0 (feature level 39).*
      operationId: get-user-by-email
      parameters:
      - description: |
          The email address of the user whose details you want to fetch.
        example: iago@zulip.com
        explode: false
        in: path
        name: email
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Whether the client supports computing gravatars URLs.  If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar.  This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.
        example: true
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/add-custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    user:
                      date_joined: 2019-10-20T07:50:53.729659+00:00
                      full_name: King Hamlet
                      is_guest: false
                      profile_data:
                        "4":
                          value: vim
                        "2":
                          value: |-
                            I am:
                            * The prince of Denmark
                            * Nephew to the usurping Claudius
                          rendered_value: |-
                            <p>I am:</p>
                            <ul>
                            <li>The prince of Denmark</li>
                            <li>Nephew to the usurping Claudius</li>
                            </ul>
                        "5":
                          value: 1900-01-01
                        "7":
                          value: '[11]'
                        "6":
                          value: https://blog.zulig.org
                        "1":
                          value: +0-11-23-456-7890
                          rendered_value: <p>+0-11-23-456-7890</p>
                        "8":
                          value: zulipbot
                        "3":
                          rendered_value: <p>Dark chocolate</p>
                          value: Dark chocolate
                      user_id: 10
                      is_bot: false
                      bot_type: null
                      timezone: ""
                      is_admin: false
                      is_owner: false
                      is_billing_admin: false
                      role: 400
                      avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
                      is_active: true
                      email: hamlet@zulip.com
                  properties:
                    result: {}
                    msg: {}
                    user:
                      $ref: '#/components/schemas/User'
                  type: object
          description: Success.
      summary: Get a user by email
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:
  /users/{user_id}:
    delete:
      description: |
        [Deactivates a
        user](https://zulip.com/help/deactivate-or-reactivate-a-user)
        given their user ID.

        `DELETE {{ api_url }}/v1/users/{user_id}`
      operationId: deactivate-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    An example JSON error response when attempting to deactivate the only
                    organization owner in an organization
                  example:
                    msg: Cannot deactivate the only organization owner
                    result: error
          description: Bad request
      summary: Deactivate a user
      tags:
      - users
      x-requires-administrator: true
    get:
      description: |
        Fetch details for a single user in the organization.

        `GET {{ api_url }}/v1/users/{user_id}`

        You can also fetch details on [all users in the organization](/api/get-users)
        or [by email](/api/get-user-by-email).

        *This endpoint is new in Zulip Server 3.0 (feature level 1).*
      operationId: get-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          Whether the client supports computing gravatars URLs.  If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar.  This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.
        example: true
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether the client wants [custom profile field](/help/add-custom-profile-fields)
          data to be included in the response.

          **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
          data via the API.
        example: true
        explode: true
        in: query
        name: include_custom_profile_fields
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    user:
                      date_joined: 2019-10-20T07:50:53.729659+00:00
                      full_name: King Hamlet
                      is_guest: false
                      profile_data:
                        "4":
                          value: vim
                        "2":
                          value: |-
                            I am:
                            * The prince of Denmark
                            * Nephew to the usurping Claudius
                          rendered_value: |-
                            <p>I am:</p>
                            <ul>
                            <li>The prince of Denmark</li>
                            <li>Nephew to the usurping Claudius</li>
                            </ul>
                        "5":
                          value: 1900-01-01
                        "7":
                          value: '[11]'
                        "6":
                          value: https://blog.zulig.org
                        "1":
                          value: +0-11-23-456-7890
                          rendered_value: <p>+0-11-23-456-7890</p>
                        "8":
                          value: zulipbot
                        "3":
                          rendered_value: <p>Dark chocolate</p>
                          value: Dark chocolate
                      user_id: 10
                      is_bot: false
                      bot_type: null
                      timezone: ""
                      is_admin: false
                      is_owner: false
                      is_billing_admin: false
                      role: 400
                      avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
                      is_active: true
                      email: hamlet@zulip.com
                  properties:
                    result: {}
                    msg: {}
                    user:
                      $ref: '#/components/schemas/User'
                  type: object
          description: Success.
      summary: Get a user
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: exclude
          parameters:
            enum:
            - ""
          description: |
            You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:
    patch:
      description: |
        Administrative endpoint to update the details of another user in the organization.

        `PATCH {{ api_url }}/v1/users/{user_id}`

        Supports everything an administrator can do to edit details of another
        user's account, including editing full name,
        [role](/help/roles-and-permissions), and [custom profile
        fields](/help/add-custom-profile-fields).
      operationId: update-user
      parameters:
      - description: |
          The target user's ID.
        example: 12
        explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: integer
        style: simple
      - content:
          application/json:
            example: NewName
            schema:
              type: string
        description: |
          The user's full name.
        explode: true
        in: query
        name: full_name
        required: false
        style: form
      - description: |
          New [role](/help/roles-and-permissions) for the user.  Roles are encoded as:

          * Organization owner: 100
          * Organization administrator: 200
          * Organization moderator: 300
          * Member: 400
          * Guest: 600

          Only organization owners can add or remove the owner role.

          The owner role cannot be removed from the only organization owner.

          **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous
          pair of `is_admin` and `is_guest` boolean parameters. Organization moderator
          role added in Zulip 4.0 (feature level 60).
        example: 400
        explode: true
        in: query
        name: role
        required: false
        schema:
          type: integer
        style: form
      - content:
          application/json:
            example:
            - id: 4
              value: vim
            - id: 5
              value: 1909-04-05
            schema:
              items:
                type: object
              type: array
        description: |
          A dictionary containing the to be updated custom profile field data for the user.
        explode: true
        in: query
        name: profile_data
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: A typical unsuccessful JSON response
                  example:
                    result: error
                    msg: Guests cannot be organization administrators
                    code: BAD_REQUEST
          description: Bad request.
      summary: Update a user
      tags:
      - users
      x-requires-administrator: true
  /realm/linkifiers:
    get:
      description: |
        List all of an organization's configured
        [linkifiers](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.

        `GET {{ api_url }}/v1/realm/linkifiers`

        **Changes**: New in Zulip 4.0 (feature level 54). On older versions,
        a similar `GET /realm/filters` endpoint was available with each entry in
        a `[pattern, url_format, id]` tuple format.
      operationId: get-linkifiers
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    linkifiers:
                    - pattern: '#(?P<id>[0-9]+)'
                      url_format: https://github.com/zulip/zulip/issues/%(id)s
                      id: 1
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    linkifiers:
                      description: |
                        An array of objects, where each object describes a linkifier.
                      items:
                        additionalProperties: false
                        properties:
                          pattern:
                            description: |
                              The string regex pattern which represents the pattern that
                              should be linkified by this linkifier.
                            type: string
                          url_format:
                            description: |
                              The URL format string to be used for linkifying matches.
                            type: string
                          id:
                            description: |
                              The ID of the linkifier.
                            type: integer
                        type: object
                      type: array
                  type: object
          description: Success.
      summary: Get linkifiers
      tags:
      - server_and_organizations
  /realm/filters:
    post:
      description: |
        Configure [linkifiers](/help/add-a-custom-linkifier),
        regular expression patterns that are automatically linkified when they
        appear in messages and topics.

        `POST {{ api_url }}/v1/realm/filters`
      operationId: add-linkifier
      parameters:
      - description: |
          The [Python regular
          expression](https://docs.python.org/3/howto/regex.html) that should
          trigger the linkifier.
        example: '#(?P<id>[0-9]+)'
        explode: true
        in: query
        name: pattern
        required: true
        schema:
          type: string
        style: form
      - description: |
          The URL used for the link. If you used named groups for the `pattern`,
          you can insert their content here with
          `%(name_of_the_capturing_group)s`.
        example: https://github.com/zulip/zulip/issues/%(id)s
        explode: true
        in: query
        name: url_format_string
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    id: 42
                    result: success
                    msg: ""
                  properties:
                    result: {}
                    msg: {}
                    id:
                      description: |
                        The numeric ID assigned to this filter.
                      type: integer
                  type: object
          description: Success.
      summary: Add a linkifier
      tags:
      - server_and_organizations
  /realm/filters/{filter_id}:
    delete:
      description: |
        Remove [linkifiers](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.

        `DELETE {{ api_url }}/v1/realm/filters/{filter_id}`
      operationId: remove-linkifier
      parameters:
      - description: |
          The ID of the linkifier that you want to remove.
        example: 42
        explode: false
        in: path
        name: filter_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Remove a linkifier
      tags:
      - server_and_organizations
    patch:
      description: |
        Update a [linkifier](/help/add-a-custom-linkifier), regular
        expression patterns that are automatically linkified when they appear
        in messages and topics.

        `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`

        **Changes**: New in Zulip 4.0 (feature level 57).
      operationId: update-linkifier
      parameters:
      - description: |
          The ID of the linkifier that you want to update.
        example: 2
        explode: false
        in: path
        name: filter_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The [Python regular
          expression](https://docs.python.org/3/howto/regex.html) that should
          trigger the linkifier.
        example: '#(?P<id>[0-9]+)'
        explode: true
        in: query
        name: pattern
        required: true
        schema:
          type: string
        style: form
      - description: |
          The URL used for the link. If you used named groups for the `pattern`,
          you can insert their content here with
          `%(name_of_the_capturing_group)s`.
        example: https://github.com/zulip/zulip/issues/%(id)s
        explode: true
        in: query
        name: url_format_string
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Update a linkifier
      tags:
      - server_and_organizations
  /realm/playgrounds:
    post:
      description: |
        Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.

        `POST {{ api_url }}/v1/realm/playgrounds`

        **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was
        fixed in Zulip 4.0 (feature level 57).
      operationId: add-code-playground
      parameters:
      - description: |
          The user-visible display name of the playground which can be
          used to pick the target playground, especially when multiple
          playground options exist for that programming language.
        example: Python playground
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: |
          The name of the Pygments language lexer for that
          programming language.
        example: Python
        explode: true
        in: query
        name: pygments_language
        required: true
        schema:
          type: string
        style: form
      - description: |
          The url prefix for the playground.
        example: https://python.example.com
        explode: true
        in: query
        name: url_prefix
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    id: 1
                    result: success
                    msg: ""
                  properties:
                    result: {}
                    msg: {}
                    id:
                      description: |
                        The numeric ID assigned to this playground.
                      type: integer
                  type: object
          description: Success.
      summary: Add a code playground
      tags:
      - server_and_organizations
  /realm/playgrounds/{playground_id}:
    delete:
      description: |
        Remove a [code playground](/help/code-blocks#code-playgrounds) previously
        configured for an organization.

        `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`

        **Changes**: New in Zulip 4.0 (feature level 49).
      operationId: remove-code-playground
      parameters:
      - description: |
          The ID of the playground that you want to remove.
        example: 1
        explode: false
        in: path
        name: playground_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Remove a code playground
      tags:
      - server_and_organizations
  /register:
    post:
      description: |
        `POST {{ api_url }}/v1/register`

        This powerful endpoint can be used to register a Zulip "event queue"
        (subscribed to certain types of "events", or updates to the messages
        and other Zulip data the current user has access to), as well as to
        fetch the current state of that data.

        (`register` also powers the `call_on_each_event` Python API, and is
        intended primarily for complex applications for which the more convenient
        `call_on_each_event` API is insufficient).

        This endpoint returns a `queue_id` and a `last_event_id`; these can be
        used in subsequent calls to the
        ["events" endpoint](/api/get-events) to request events from
        the Zulip server using long-polling.

        The server will queue events for up to 10 minutes of inactivity.
        After 10 minutes, your event queue will be garbage-collected.  The
        server will send `heartbeat` events every minute, which makes it easy
        to implement a robust client that does not miss events unless the
        client loses network connectivity with the Zulip server for 10 minutes
        or longer.

        Once the server garbage-collects your event queue, the server will
        [return an error](/api/get-events#bad_event_queue_id-errors)
        with a code of `BAD_EVENT_QUEUE_ID` if you try to fetch events from
        the event queue.  Your software will need to handle that error
        condition by re-initializing itself (e.g. this is what triggers your
        browser reloading the Zulip web app when your laptop comes back online
        after being offline for more than 10 minutes).

        When prototyping with this API, we recommend first calling `register`
        with no `event_types` parameter to see all the available data from all
        supported event types.  Before using your client in production, you
        should set appropriate `event_types` and `fetch_event_types` filters
        so that your client only requests the data it needs.  A few minutes
        doing this often saves 90% of the total bandwidth and other resources
        consumed by a client using this API.

        See the
        [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html)
        if you need deeper details about how the Zulip event queue system
        works, avoids clients needing to worry about large classes of
        potentially messy races, etc.
      operationId: register-queue
      parameters:
      - description: |
          Set to `true` if you would like the content to be rendered in HTML
          format (otherwise the API will return the raw text that the user
          entered)
        example: true
        explode: true
        in: query
        name: apply_markdown
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether the client supports computing gravatars URLs.  If
          enabled, `avatar_url` will be included in the response only
          if there is a Zulip avatar, and will be `null` for users who
          are using gravatar as their avatar.  This option
          significantly reduces the compressed size of user data,
          since gravatar URLs are long, random strings and thus do not
          compress well. The `client_gravatar` field is set to `true` if
          clients can compute their own gravatars.
        example: true
        explode: true
        in: query
        name: client_gravatar
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Setting this to `true` will make presence dictionaries be keyed by
          user_id instead of email.

          **Changes**: New in Zulip 3.0 (Unstable with no feature level yet).
        example: true
        explode: true
        in: query
        name: slim_presence
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - content:
          application/json:
            example:
            - message
            schema:
              items:
                type: string
              type: array
        description: |
          A JSON-encoded array indicating which types of events you're interested
          in. Values that you might find useful include:

            * **message** (messages)
            * **subscription** (changes in your subscriptions)
            * **realm_user** (changes to users in the organization and
              their properties, such as their name).

          If you do not specify this parameter, you will receive all
          events, and have to filter out the events not relevant to
          your client in your client code.  For most applications, one
          is only interested in messages, so one specifies:
          `event_types=['message']`

          Event types not supported by the server are ignored, in order to simplify
          the implementation of client apps that support multiple server versions.
        explode: true
        in: query
        name: event_types
        required: false
        style: form
      - description: |
          Whether you would like to request message events from all public
          streams.  Useful for workflow bots that you'd like to see all new messages
          sent to public streams.  (You can also subscribe the user to private streams).
        example: true
        explode: true
        in: query
        name: all_public_streams
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Whether each returned stream object should include a `subscribers`
          field containing a list of the user IDs of its subscribers.

          (This may be significantly slower in organizations with
          thousands of users subscribed to many streams.)

          **Changes**: New in Zulip 2.1.0.
        example: true
        explode: true
        in: query
        name: include_subscribers
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - content:
          application/json:
            example:
              notification_settings_null: true
            schema:
              type: object
        description: |
          Dictionary containing details on features the client supports that are
          relevant to the format of responses sent by the server.

          * `notification_settings_null`: Boolean for whether the
            client can handle the current API with null values for
            stream-level notification settings (which means the stream
            is not customized and should inherit the user's global
            notification settings for stream messages).
            <br />
            New in Zulip 2.1.0; in earlier Zulip releases, stream-level
            notification settings were simple booleans.

          * `bulk_message_deletion`: Boolean for whether the client's
             handler for the `delete_message` event type has been
             updated to process the new bulk format (with a
             `message_ids`, rather than a singleton `message_id`).
             Otherwise, the server will send `delete_message` events
             in a loop.
             <br />
             New in Zulip 3.0 (feature level 13).  This
             capability is for backwards-compatibility; it will be
             required in a future server release.

          * `user_avatar_url_field_optional`: Boolean for whether the
             client required avatar URLs for all users, or supports
             using `GET /avatar/{user_id}` to access user avatars.  If the
             client has this capability, the server may skip sending a
             `avatar_url` field in the `realm_user` at its sole discretion
             to optimize network performance.  This is an important optimization
             in organizations with 10,000s of users.
             <br />
             New in Zulip 3.0 (feature level 18).

          * `stream_typing_notifications`: Boolean for whether the client
            supports stream typing notifications.
            <br />
            New in Zulip 4.0 (feature level 58).  This capability is
            for backwards-compatibility; it will be required in a
            future server release.

          * `user_settings_object`: Boolean for whether the client supports the modern
            `user_settings` event type. If False, the server will additionally send the
            legacy `update_display_settings` and `update_global_notifications` event
            types for backwards-compatibility with clients that predate this API migration.
            <br />
            <br />
            Because the feature level 89 API changes were merged together, clients can
            safely make a request with this client capability and requesting all of the
            `user_settings`, `update_display_settings`, and
            `update_global_notifications` event types, and get exactly one copy of
            settings data on any server version. (And then use the `zulip_feature_level`
            in the `/register` response or the presence/absence of a `user_settings` key
            to determine where to look).
            <br />
            New in Zulip 5.0 (feature level 89).  This capability is for
            backwards-compatibility; it will be removed in a future server release.
        explode: true
        in: query
        name: client_capabilities
        required: false
        style: form
      - content:
          application/json:
            example:
            - message
            schema:
              items:
                type: string
              type: array
        description: |
          Same as the `event_types` parameter except that the values in
          `fetch_event_types` are used to fetch initial data. If
          `fetch_event_types` is not provided, `event_types` is used and if
          `event_types` is not provided, this parameter defaults to `None`.

          Event types not supported by the server are ignored, in order to simplify
          the implementation of client apps that support multiple server versions.
        explode: true
        in: query
        name: fetch_event_types
        required: false
        style: form
      - content:
          application/json:
            example:
            - - stream
              - Denmark
            schema:
              default: []
              items:
                items:
                  type: string
                type: array
              type: array
        description: |
          A JSON-encoded array of arrays of length 2 indicating the
          narrow for which you'd like to receive events for. For
          instance, to receive events for the stream `Denmark`, you
          would specify `narrow=[['stream', 'Denmark']]`.  Another
          example is `narrow=[['is', 'private']]` for private messages.
          Default is `[]`.
        explode: true
        in: query
        name: narrow
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    last_event_id: -1
                    msg: ""
                    queue_id: 1517975029:0
                    realm_emoji:
                      "1":
                        author_id: 5
                        deactivated: false
                        id: "1"
                        name: green_tick
                        source_url: /user_avatars/1/emoji/images/1.png
                    result: success
                    zulip_feature_level: 2
                    zulip_version: 5.0-dev-1650-gc3fd37755f
                    zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
                  properties:
                    result: {}
                    msg: {}
                    queue_id:
                      description: |
                        The ID of the queue that has been allocated for your client.
                      type: string
                    last_event_id:
                      description: |
                        The initial value of `last_event_id` to pass to `GET /api/v1/events`.
                      type: integer
                    zulip_feature_level:
                      description: |
                        The server's current [Zulip feature level](/api/changelog).
                      type: integer
                    zulip_version:
                      description: |
                        The server's version number.  This is often a release version number,
                        like `2.1.7`. But for a server running a [version from Git][git-release],
                        it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.

                        [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
                      type: string
                    zulip_merge_base:
                      description: |
                        The `git merge-base` between `zulip_verson` and official branches
                        in the public
                        [Zulip server and web app repository](https://github.com/zulip/zulip),
                        in the same format as `zulip_version`. This will equal
                        `zulip_version` if the server is not running a fork of the Zulip server.

                        This will be `""` if the server does not know its `merge-base`.

                        **Changes**: New in Zulip 5.0 (feature level 88).
                      type: string
                    alert_words:
                      description: |
                        Present if `alert_words` is present in `fetch_event_types`.

                        An array of strings, each an [alert word](/help/add-an-alert-word)
                        that the current user has configured.
                      items:
                        type: string
                      type: array
                    custom_profile_fields:
                      description: |
                        Present if `custom_profile_fields` is present in `fetch_event_types`.

                         An array of dictionaries where each dictionary contains the
                         details of a single custom profile field that is available to users
                         in this Zulip organization.  This must be combined with the custom profile
                         field values on individual user objects to display users' full profiles.
                      items:
                        $ref: '#/components/schemas/CustomProfileField'
                      type: array
                    custom_profile_field_types:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{FIELD_TYPE}`: Dictionary which contains the details
                          of the field type with the field type as the name of the
                          property itself. The current supported field types are as follows:
                          * `SHORT_TEXT`
                          * `LONG_TEXT`
                          * `DATE` for date-based fields.
                          * `CHOICE` for a list of options.
                          * `URL` for links.
                          * `EXTERNAL_ACCOUNT` for external accounts.
                          * `USER` for selecting a user for the field.
                        properties:
                          id:
                            description: |
                              The id of the custom profile field type.
                            type: integer
                          name:
                            description: |
                              The name of the custom profile field type.
                            type: string
                        type: object
                      description: |
                        Present if `custom_profile_fields` is present in `fetch_event_types`.

                         An array of objects; each object describes a type of custom profile field
                         that could be configured on this Zulip server.  Each custom profile type
                         has a id and the `type` property of a custom profile field is equal
                         to one of these ids.

                         This attribute is only useful for clients containing UI for changing
                         the set of configured custom profile fields in a Zulip organization.
                      type: object
                    drafts:
                      description: |
                        An array containing draft objects for the user. These drafts are being
                        stored on the backend for the purpose of syncing across devices. This
                        array will be empty if `enable_drafts_synchronization` is set to `false`.
                      items:
                        $ref: '#/components/schemas/Draft'
                      type: array
                    hotspots:
                      description: |
                        Present if `hotspots` is present in `fetch_event_types`.

                         An array of dictionaries, where each dictionary contains details about
                         a single onboarding hotspot that should be shown to new users.

                         We expect that only official Zulip clients will interact with these data.
                      items:
                        $ref: '#/components/schemas/Hotspot'
                      type: array
                    max_message_id:
                      deprecated: true
                      description: |
                        Present if `message` is present in `fetch_event_types`.

                        The highest message ID among all messages the user has received as of the
                        moment of this request.

                        **Deprecated**: This field may be removed in future versions as it no
                        longer has a clear purpose.  Clients wishing to fetch the latest messages
                        should pass `anchor="latest"` to `GET /messages`.
                      type: integer
                    max_stream_name_length:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum allowed length for a stream name.  Clients should use
                        these properties rather than hardcoding field sizes, as they may
                        change in a future Zulip release.

                        **Changes**: New in Zulip 4.0 (feature level 53).  Previously,
                        this required `stream` in `fetch_event_types`, was called
                        `stream_name_max_length`, and always had value 60.
                      type: integer
                    max_stream_description_length:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum allowed length for a stream description.  Clients should use
                        these properties rather than hardcoding field sizes, as they may
                        change in a future Zulip release.

                        **Changes**: New in Zulip 4.0 (feature level 53).  Previously,
                        this required `stream` in `fetch_event_types`, was called
                        `stream_description_max_length`, and always had value 1024.
                      type: integer
                    max_topic_length:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum allowed length for a topic.  Clients should use
                        these properties rather than hardcoding field sizes, as they may
                        change in a future Zulip release.

                        **Changes**: New in Zulip 4.0 (feature level 53).  Previously,
                        this always had value 60.
                      type: integer
                    max_message_length:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum allowed length for a message.  Clients should use
                        these properties rather than hardcoding field sizes, as they may
                        change in a future Zulip release.

                        **Changes**: New in Zulip 4.0 (feature level 53).  Previously,
                        this always had value 10000.
                      type: integer
                    muted_topics:
                      description: |
                        Present if `muted_topics` is present in `fetch_event_types`.

                        Array of tuples, where each tuple describes a muted topic.
                        The first element of tuple is the stream name in which the topic
                        has to be muted, the second element is the topic name to be muted
                        and the third element is an integer UNIX timestamp representing
                        when the topic was muted.
                      items:
                        items:
                          oneOf:
                          - type: string
                          - type: integer
                        type: array
                      type: array
                    muted_users:
                      description: |
                        Present if `muted_users` is present in `fetch_event_types`.

                        A list of dictionaries where each dictionary describes
                        a [muted user](/api/mute-user).

                        **Changes**: New in Zulip 4.0 (feature level 48).
                      items:
                        additionalProperties: false
                        description: |
                          Object containing the user id and timestamp of a muted user.
                        properties:
                          id:
                            description: |
                              The ID of the muted user.
                            type: integer
                          timestamp:
                            description: |
                              An integer UNIX timestamp representing when the user was muted.
                            type: integer
                        type: object
                      type: array
                    presences:
                      additionalProperties:
                        additionalProperties:
                          $ref: '#/components/schemas/Presence'
                        description: |
                          `{user_id} or {user_email}`: Depending on the value of `slim_presence`.
                          Each entry contains the details of the presence of the user with the specific
                          id or email.
                        type: object
                      description: |
                        Present if `presence` is present in `fetch_event_types`.

                        A dictionary where each entry describes the presence details for another
                        user in the Zulip organization.

                        Users who have been offline for multiple weeks may not appear in this object.
                      type: object
                    server_timestamp:
                      description: |
                        Present if `presence` is present in `fetch_event_types`.

                        The time when the server fetched the
                        `presences` data included in the response.
                        Matches the similar field in presence
                        responses.

                        **Changes**: New in Zulip 5.0 (feature level 70).
                      type: number
                    realm_domains:
                      description: |
                        Present if `realm_domains` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes a domain within
                        which users can join the organization without and invitation.
                      items:
                        $ref: '#/components/schemas/RealmDomain'
                      type: array
                    realm_emoji:
                      description: |
                        Present if `realm_emoji` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes a custom
                        emoji that has been uploaded in this Zulip organization.
                      oneOf:
                      - additionalProperties:
                          $ref: '#/components/schemas/RealmEmoji'
                        type: object
                      - items:
                          type: integer
                        type: array
                    realm_linkifiers:
                      description: |
                        Present if `realm_linkifiers` is present in `fetch_event_types`.

                        Array of objects where each object describes a single
                        [linkifier](/help/add-a-custom-linkifier).

                        **Changes**: New in Zulip 4.0 (feature level 54). Clients can
                        access these data on older server versions via the previous
                        `realm_filters` key.
                      items:
                        additionalProperties: false
                        properties:
                          pattern:
                            description: |
                              The string regex pattern which represents the pattern that
                              should be linkified on matching.
                            type: string
                          url_format:
                            description: |
                              The URL with which the pattern matching string should be linkified.
                            type: string
                          id:
                            description: |
                              The ID of the linkifier.
                            type: integer
                        type: object
                      type: array
                    realm_filters:
                      deprecated: true
                      description: |
                        Legacy property for linkifiers. Present if `realm_filters` is
                        present in `fetch_event_types`.

                        An array of tuples (fixed-length arrays) where each tuple describes
                        a single [linkifier](/help/add-a-custom-linkifier).
                        The first element of the tuple is a string regex pattern which represents
                        the pattern that should be linkified on matching.

                        The second element is the URL with which the
                        pattern matching string should be linkified with and the third element
                        is the id of the realm filter.

                        **Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by
                        the `realm_linkifiers` key instead.
                      items:
                        items:
                          oneOf:
                          - type: integer
                          - type: string
                        type: array
                      type: array
                    realm_playgrounds:
                      description: |
                        Present if `realm_playgrounds` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes a
                        [code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.

                        **Changes**: New in Zulip 4.0 (feature level 49).
                      items:
                        $ref: '#/components/schemas/RealmPlayground'
                      type: array
                    realm_user_groups:
                      description: |
                        Present if `realm_user_groups` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes a
                        [user group](/help/user-groups) in the Zulip organization.
                      items:
                        $ref: '#/components/schemas/UserGroup'
                      type: array
                    realm_bots:
                      description: |
                        Present if `realm_bot` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes a bot that the
                        current user can administer.  If the current user is an organization
                        administrator, this will include all bots in the organization.  Otherwise,
                        it will only include bots owned by the user (either because the user created
                        the bot or an administrator transferred the bot's ownership to the user).
                      items:
                        $ref: '#/components/schemas/Bot'
                      type: array
                    realm_embedded_bots:
                      description: |
                        Present if `realm_embedded_bots` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes an type of embedded
                        bot that is available to be configured on this Zulip server.

                        Clients only need these data if they contain UI for creating or administering bots.
                      items:
                        additionalProperties: false
                        description: |
                          Object containing details of an embedded bot.  Embedded bots are an experimental
                          feature not enabled in production yet.
                        properties:
                          name:
                            description: |
                              The name of the bot.
                            type: string
                          config:
                            $ref: '#/components/schemas/Config'
                        type: object
                      type: array
                    realm_incoming_webhook_bots:
                      description: |
                        Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary describes an type of incoming webhook
                        integration that is available to be configured on this Zulip server.

                        Clients only need these data if they contain UI for creating or administering bots.
                      items:
                        additionalProperties: false
                        description: |
                          Object containing details of the bot.
                        properties:
                          name:
                            description: |
                              The name of the bot.
                            type: string
                          config:
                            $ref: '#/components/schemas/Config'
                        type: object
                      type: array
                    recent_private_conversations:
                      description: |
                        Present if `recent_private_conversations` is present in `fetch_event_types`.

                        An array of dictionaries containing data on all private message and group private message
                        conversations that the user has received (or sent) messages in, organized by
                        conversation.  This data set is designed to support UI elements such as the
                        "Private messages" widget in the web application showing recent private message
                        conversations that the user has participated in.

                        "Recent" is defined as the server's discretion; the original implementation
                        interpreted that as "the 1000 most recent private messages the user received".
                      items:
                        additionalProperties: false
                        description: |
                          Object describing a single recent private conversation in the user's history.
                        properties:
                          max_message_id:
                            description: |
                              The highest message id of the conversation, intended to support sorting
                              the conversations by recency.
                            type: integer
                          user_ids:
                            description: |
                              The list of users other than the current user in the private message
                              conversation.  This will be an empty list for private messages sent to
                              oneself.
                            items:
                              type: integer
                            type: array
                        type: object
                      type: array
                    subscriptions:
                      description: |
                        Present if `subscription` is present in `fetch_event_types`.

                        A array of dictionaries where each dictionary describes the properties
                        of a stream the user is subscribed to (as well as that user's
                        personal per-stream settings).
                      items:
                        $ref: '#/components/schemas/Subscriptions'
                      type: array
                    unsubscribed:
                      description: |
                        Present if `subscription` is present in `fetch_event_types`.

                        A array of dictionaries where each dictionary describes one of the
                        streams the user has unsubscribed from but was previously subscribed to
                        along with the subscription details.

                        Unlike `never_subscribed`, the user might have messages in their personal
                        message history that were sent to these streams.
                      items:
                        $ref: '#/components/schemas/Subscriptions'
                      type: array
                    never_subscribed:
                      description: |
                        Present if `subscription` is present in `fetch_event_types`.

                        A array of dictionaries where each dictionary describes one of the
                        streams that is visible to the user and the user has never been subscribed
                        to.

                        Important for clients containing UI where one can browse streams to subscribe
                        to.
                      items:
                        allOf:
                        - $ref: '#/components/schemas/BasicStreamBase'
                        - additionalProperties: false
                          properties:
                            stream_id: {}
                            name: {}
                            description: {}
                            date_created: {}
                            invite_only: {}
                            rendered_description: {}
                            is_web_public: {}
                            stream_post_policy: {}
                            message_retention_days: {}
                            history_public_to_subscribers: {}
                            first_message_id: {}
                            is_announcement_only: {}
                            stream_weekly_traffic:
                              description: |
                                The average number of messages sent to the stream in recent weeks,
                                rounded to the nearest integer.

                                Null means the stream was recently created and there is
                                insufficient data to estimate the average traffic.
                              nullable: true
                              type: integer
                            subscribers:
                              description: |
                                A list of user IDs of users who are subscribed
                                to the stream. Included only if `include_subscribers` is `true`.

                                If a user is not allowed to know the subscribers for
                                a stream, we will send an empty array.  API authors
                                should use other data to determine whether users like
                                guest users are forbidden to know the subscribers.
                              items:
                                type: integer
                              type: array
                          type: object
                      type: array
                    unread_msgs:
                      additionalProperties: false
                      description: |
                        Present if `message` and `update_message_flags` are both present in
                        `event_types`.

                        A set of data structures describing the conversations containing
                        the 50000 most recent unread messages the user has received.  This will usually
                        contain every unread message the user has received, but clients should support
                        users with even more unread messages (and not hardcode the number 50000).
                      items:
                        $ref: '#/components/schemas/BasicStream'
                      properties:
                        count:
                          description: |
                            The total number of unread messages to display; this includes private
                            and group private messages, as well as all messages to unmuted topics
                            on unmuted streams.
                          type: integer
                        pms:
                          description: |
                            An array of dictionaries where each entry contains details
                            of unread private messages with a specific user.
                          items:
                            additionalProperties: false
                            description: |
                              Object containing the details of a unread private
                              message with a specific user.
                            properties:
                              sender_id:
                                description: |
                                  The user id of the other participant in a PM conversation.
                                type: integer
                              message_ids:
                                description: |
                                  The message ids of the recent unread PM messages sent by the other user.
                                items:
                                  type: integer
                                type: array
                            type: object
                          type: array
                        streams:
                          description: |
                            An array of dictionaries where each dictionary contains
                            details of all unread messages of a single subscribed stream,
                            including muted streams.

                            **Changes**: Prior to Zulip 5.0 (feature level 90), the
                            dictionaries included an additional `sender_ids` key listing
                            the set of IDs of users who had sent the unread messages.
                          items:
                            additionalProperties: false
                            description: |
                              `{message_id}`: Object containing the details of a unread stream
                              message with the message_id as the key.
                            properties:
                              topic:
                                description: |
                                  The topic under which the message was sent.
                                type: string
                              stream_id:
                                description: |
                                  The id of the stream to which the message was sent.
                                type: integer
                              unread_message_ids:
                                description: |
                                  The message ids of the recent unread messages sent in this stream.
                                items:
                                  type: integer
                                type: array
                            type: object
                          type: array
                        huddles:
                          description: |
                            An array of dictionaries where each dictionary contains
                            details of all unread group private messages of a single
                            group.
                          items:
                            additionalProperties: false
                            description: |
                              Object containing the details of a unread group PM
                              messages of a single group.
                            properties:
                              user_ids_string:
                                description: |
                                  A string containing the ids of all users in the huddle(group PMs)
                                  separated by commas(,). Example: "1,2,3".
                                type: string
                              message_ids:
                                description: |
                                  The message ids of the recent unread messages which have been sent in
                                  this group.
                                items:
                                  type: integer
                                type: array
                            type: object
                          type: array
                        mentions:
                          description: |
                            Array containing the ids of all messages in which the user has been mentioned.
                            For muted streams, wildcard mentions will not be considered for this array.
                          items:
                            type: integer
                          type: array
                        old_unreads_missing:
                          description: |
                            True if this data set was truncated because the user has too many
                            unread messages.  When truncation occurs, only the most recent
                            `MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered
                            when forming this response.  When true, we recommend that clients
                            display a warning, as they are likely to produce erroneous results
                            until reloaded with the user having fewer than `MAX_UNREAD_MESSAGES`
                            unread messages.

                            **Changes**: New in Zulip 4.0 (feature level 44).
                          type: boolean
                      type: array
                    starred_messages:
                      description: |
                        Present if `starred_messages` is present in `fetch_event_types`.

                        Array containing the ids of all messages which have been
                        [starred](/help/star-a-message) by the user.
                      items:
                        type: integer
                      type: array
                    streams:
                      description: |
                        Present if `stream` is present in `fetch_event_types`.

                        Array of dictionaries where each dictionary contains details about
                        a single stream in the organization that is visible to the user.

                        For organization administrators, this will include all private streams
                        in the organization.
                      items:
                        $ref: '#/components/schemas/BasicStream'
                      type: array
                    realm_default_streams:
                      description: |
                        Present if `default_streams` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary contains details
                        about a single [default stream](/help/set-default-streams-for-new-users)
                        for the Zulip organization.
                      items:
                        $ref: '#/components/schemas/BasicStream'
                      type: array
                    realm_default_stream_groups:
                      description: |
                        Present if `default_stream_groups` is present in `fetch_event_types`.

                        An array of dictionaries where each dictionary contains details
                        about a single default stream group configured for this
                        Zulip organization.

                        Default stream groups are an experimental feature.
                      items:
                        $ref: '#/components/schemas/DefaultStreamGroup'
                      type: array
                    stop_words:
                      description: |
                        Present if `stop_words` is present in `fetch_event_types`.

                        An array containing the stop words used by the Zulip server's
                        full-text search implementation.  Useful for showing helpful
                        error messages when a search returns limited results because
                        a stop word in the query was ignored.
                      items:
                        type: string
                      type: array
                    user_status:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{user_id}`: Object containing the status details of a user
                          with the key of the object being the id of the user.
                        properties:
                          away:
                            description: |
                              Whether the user has marked themself "away".
                            type: boolean
                          status_text:
                            description: |
                              The text content of the status message.
                            type: string
                          emoji_name:
                            description: |
                              The [emoji name](/api/add-reaction#parameters) for the emoji associated with the new status.

                              **Changes**: New in Zulip 5.0 (feature level 86).
                            type: string
                          emoji_code:
                            description: |
                              The [emoji code](/api/add-reaction#parameters) for the emoji associated with the new status.

                              **Changes**: New in Zulip 5.0 (feature level 86).
                            type: string
                          reaction_type:
                            description: |
                              The [emoji type](/api/add-reaction#parameters) for the emoji associated with the new status.

                              **Changes**: New in Zulip 5.0 (feature level 86).
                            type: string
                        type: object
                      allOf:
                      - $ref: '#/components/schemas/EmojiBase'
                      description: |
                        Present if `user_status` is present in `fetch_event_types`.

                        A dictionary which contains the [status](/help/status-and-availability)
                        of all users in the Zulip organization who have set a status.

                        **Changes**: The emoji parameters are new in Zulip 5.0 (feature level 86).
                        Previously, Zulip did not support emoji associated with statuses.

                        A status that does not have an emoji associated with it is encoded
                        with `emoji_name=""`.
                    user_settings:
                      additionalProperties: false
                      description: |
                        Present if `user_settings` is present in `fetch_event_types`.

                        A dictionary containing the user's personal settings.

                        **Changes**: New in Zulip 5.0 (feature level 89). Previously,
                        these settings appeared in the top-level object, where they are
                        available for clients without the `user_settings_object` client
                        capability for backwards-compatibility.
                      properties:
                        twenty_four_hour_time:
                          description: |
                            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).
                          type: boolean
                        dense_mode:
                          description: |
                            This setting has no effect at present.  It is reserved for use in controlling
                            the default font size in Zulip.
                          type: boolean
                        starred_message_counts:
                          description: |
                            Whether clients should display the [number of starred
                            messages](/help/star-a-message#display-the-number-of-starred-messages).
                          type: boolean
                        fluid_layout_width:
                          description: |
                            Whether to use the [maximum available screen width](/help/enable-full-width-display)
                            for the web app's center panel (message feed, recent topics) on wide screens.
                          type: boolean
                        high_contrast_mode:
                          description: |
                            This setting is reserved for use to control variations in Zulip's design
                            to help visually impaired users.
                          type: boolean
                        color_scheme:
                          description: |
                            Controls which [color theme](/help/night-mode) to use.

                            * 1 - Automatic
                            * 2 - Night mode
                            * 3 - Day mode

                            Automatic detection is implementing using the standard `prefers-color-scheme`
                            media query.
                          type: integer
                        translate_emoticons:
                          description: |
                            Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)
                            in messages the user sends.
                          type: boolean
                        default_language:
                          description: |
                            What [default language](/help/change-your-language) to use for the account.

                            This controls both the Zulip UI as well as email notifications sent to the user.

                            The value needs to be a standard language code that the Zulip server has
                            translation data for; for example, `"en"` for English or `"de"` for German.
                          type: string
                        default_view:
                          description: |
                            The [default view](/help/change-default-view) used when opening a new
                            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

                            * "recent_topics" - Recent topics view
                            * "all_messages" - All messages view
                          type: string
                        left_side_userlist:
                          description: |
                            Whether the users list on left sidebar in narrow windows.

                            This feature is not heavily used and is likely to be reworked.
                          type: boolean
                        emojiset:
                          description: |
                            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
                            used to display emoji to the user everything they appear in the UI.

                            * "google" - Google modern
                            * "google-blob" - Google classic
                            * "twitter" - Twitter
                            * "text" - Plain text
                          type: string
                        demote_inactive_streams:
                          description: |
                            Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.

                            * 1 - Automatic
                            * 2 - Always
                            * 3 - Never
                          type: integer
                        timezone:
                          description: |
                            The user's [configured timezone](/help/change-your-timezone).

                            Timezone values supported by the server are served at
                            [/static/generated/timezones.json](/static/generated/timezones.json).
                          type: string
                        enter_sends:
                          description: |
                            Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)
                            in the compose box is enabled.
                          type: boolean
                        enable_drafts_synchronization:
                          description: |
                            A boolean parameter to control whether synchronizing drafts is enabled for
                            the user. When synchronization is disabled, all drafts stored in the server
                            will be automatically deleted from the server.

                            This does not do anything (like sending events) to delete local copies of
                            drafts stored in clients.
                          type: boolean
                        enable_stream_desktop_notifications:
                          description: |
                            Enable visual desktop notifications for stream messages.
                          type: boolean
                        enable_stream_email_notifications:
                          description: |
                            Enable email notifications for stream messages.
                          type: boolean
                        enable_stream_push_notifications:
                          description: |
                            Enable mobile notifications for stream messages.
                          type: boolean
                        enable_stream_audible_notifications:
                          description: |
                            Enable audible desktop notifications for stream messages.
                          type: boolean
                        notification_sound:
                          description: |
                            Notification sound name.
                          type: string
                        enable_desktop_notifications:
                          description: |
                            Enable visual desktop notifications for private messages and @-mentions.
                          type: boolean
                        enable_sounds:
                          description: |
                            Enable audible desktop notifications for private messages and
                            @-mentions.
                          type: boolean
                        email_notifications_batching_period_seconds:
                          description: |
                            The duration (in seconds) for which the server should wait to batch
                            email notifications before sending them.
                          type: integer
                        enable_offline_email_notifications:
                          description: |
                            Enable email notifications for private messages and @-mentions received
                            when the user is offline.
                          type: boolean
                        enable_offline_push_notifications:
                          description: |
                            Enable mobile notification for private messages and @-mentions received
                            when the user is offline.
                          type: boolean
                        enable_online_push_notifications:
                          description: |
                            Enable mobile notification for private messages and @-mentions received
                            when the user is online.
                          type: boolean
                        enable_digest_emails:
                          description: |
                            Enable digest emails when the user is away.
                          type: boolean
                        enable_marketing_emails:
                          description: |
                            Enable marketing emails. Has no function outside Zulip Cloud.
                          type: boolean
                        enable_login_emails:
                          description: |
                            Enable email notifications for new logins to account.
                          type: boolean
                        message_content_in_email_notifications:
                          description: |
                            Include the message's content in email notifications for new messages.
                          type: boolean
                        pm_content_in_desktop_notifications:
                          description: |
                            Include content of private messages in desktop notifications.
                          type: boolean
                        wildcard_mentions_notify:
                          description: |
                            Whether wildcard mentions (E.g. @**all**) should send notifications
                            like a personal mention.
                          type: boolean
                        desktop_icon_count_display:
                          description: |
                            Unread count summary (appears in desktop sidebar and browser tab)

                            * 1 - All unreads
                            * 2 - Private messages and mentions
                            * 3 - None
                          type: integer
                        realm_name_in_notifications:
                          description: |
                            Include organization name in subject of message notification emails.
                          type: boolean
                        presence_enabled:
                          description: |
                            Display the presence status to other users when online.
                          type: boolean
                        available_notification_sounds:
                          description: |
                            Array containing the names of the notification sound options
                            supported by this Zulip server.  Only relevant to support UI
                            for configuring notification sounds.
                          items:
                            type: string
                          type: array
                        emojiset_choices:
                          description: |
                            Array of dictionaries where each dictionary describes an emojiset
                            supported by this version of the Zulip server.

                            Only relevant to clients with configuration UI for choosing an emojiset;
                            the currently selected emojiset is available in the `emojiset` key.

                            See [PATCH /settings](/api/update-settings) for details on
                            the meaning of this setting.
                          items:
                            additionalProperties: false
                            description: |
                              Object describing a emojiset.
                            properties:
                              key:
                                description: |
                                  The key or the name of the emojiset which will be the value
                                  of `emojiset` if this emojiset is chosen.
                                type: string
                              text:
                                description: |
                                  The text describing the emojiset.
                                type: string
                            type: object
                          type: array
                      type: object
                    has_zoom_token:
                      description: |
                        Present if `video_calls` is present in `fetch_event_types`.

                        A boolean which signifies whether the user has a zoom token and has thus completed
                        OAuth flow for the [Zoom integration](/help/start-a-call).  Clients need
                        to know whether initiating Zoom OAuth is required before creating a Zoom call.
                      type: boolean
                    giphy_api_key:
                      description: |
                        Present if `giphy` is present in `fetch_event_types`.

                        GIPHY's client-side SDKs needs this API key to use the GIPHY API.
                        GIPHY API keys are not secret (their main purpose appears to be
                        allowing GIPHY to block a problematic app).  Please don't use our API
                        key for an app unrelated to Zulip.

                        Developers of clients should also read the
                        [GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-)
                        before using this API key.

                        **Changes**: Added in Zulip 4.0 (feature level 47).
                      type: string
                    enable_desktop_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_digest_emails:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_login_emails:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_marketing_emails:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    email_notifications_batching_period_seconds:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: integer
                    enable_offline_email_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_offline_push_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_online_push_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_sounds:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_stream_desktop_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_stream_email_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_stream_push_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    enable_stream_audible_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    wildcard_mentions_notify:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    message_content_in_email_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    notification_sound:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: string
                    pm_content_in_desktop_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    desktop_icon_count_display:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: integer
                    realm_name_in_notifications:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    presence_enabled:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        The current value of this global notification setting for the user.
                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    available_notification_sounds:
                      deprecated: true
                      description: |
                        Present if `update_global_notifications` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in their
                        client_capabilities` when registering the event queue.

                        Array containing the names of the notification sound options supported by
                        this Zulip server.  Only relevant to support UI for configuring notification
                        sounds.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      items:
                        type: string
                      type: array
                    color_scheme:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        The color scheme selected by the user.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: integer
                    default_language:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        The default language chosen by the user.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: string
                    demote_inactive_streams:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen to demote inactive streams.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: integer
                    dense_mode:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has switched on dense mode.  Dense mode is an experimental
                        feature that is only available in development environments.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    emojiset:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        The name of the emojiset that the user has chosen.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: string
                    enable_drafts_synchronization:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`.

                        Whether drafts synchronization is enabled for the user. If disabled,
                        clients will receive an error when trying to use the `drafts` endpoints.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.

                        New in Zulip 5.0 (feature level 87).
                      type: boolean
                    fluid_layout_width:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen for the layout width to be fluid.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    default_view:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        The [default view](/help/change-default-view) in Zulip, represented
                        as the URL suffix after `#` to be rendered when Zulip loads.

                        Currently supported values are `all_messages` and `recent_topics`.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: string
                    high_contrast_mode:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether has switched on high contrast mode.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    left_side_userlist:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen for the userlist to be displayed
                        on the left side of the screen (for desktop app and web app) in narrow
                        windows.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    starred_message_counts:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen the number of starred messages to
                        be displayed similar to unread counts.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    timezone:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        The timezone configured for the user.  This is used primarily to display
                        the user's timezone to other users.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: string
                    translate_emoticons:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen for emoticons to be translated into emoji
                        in the Zulip compose box.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    twenty_four_hour_time:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user has chosen a twenty four hour time display (true)
                        or a twelve hour one (false).

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      type: boolean
                    emojiset_choices:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Array of dictionaries where each dictionary describes an emojiset
                        supported by this version of the Zulip server.

                        Only relevant to clients with configuration UI for choosing an emojiset;
                        the currently selected emojiset is available in the `emojiset` key.

                        See [PATCH /settings](/api/update-settings) for details on
                        the meaning of this setting.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and access the `user_settings` object instead.
                      items:
                        additionalProperties: false
                        description: |
                          Object describing a emojiset.
                        properties:
                          key:
                            description: |
                              The key or the name of the emojiset which will be the value
                              of `emojiset` if this emojiset is chosen.
                            type: string
                          text:
                            description: |
                              The text describing the emojiset.
                            type: string
                        type: object
                      type: array
                    realm_add_custom_emoji_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can upload new custom emoji in this
                        organization.

                        * 1 = Members only
                        * 2 = Administrators only
                        * 3 = Full members only
                        * 4 = Moderators only

                        **Changes**: New in Zulip 5.0 (feature level 85) replacing the
                        previous `realm_add_emoji_by_admins_only` boolean.
                      type: integer
                    realm_allow_edit_history:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this organization is configured to allow users to access
                        [message edit history](/help/view-a-messages-edit-history).
                      type: boolean
                    realm_allow_message_deleting:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether messages can be deleted in this Zulip organization.
                      type: boolean
                    realm_bot_creation_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can create bot users in this organization.
                      type: integer
                    realm_create_stream_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can create streams in this organization.
                      type: integer
                    realm_invite_to_stream_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can add other users to streams in this
                        organization.
                      type: integer
                    realm_wildcard_mention_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for who can use wildcard mentions in large streams.

                        * 1 => Any user can use wildcard mentions in large streams.
                        * 2 => Only members can use wildcard mentions in large streams.
                        * 3 => Only full members can use wildcard mentions in large streams.
                        * 4 => Only stream and organization administrators can use wildcard mentions in large streams.
                        * 5 => Only organization administrators can use wildcard mentions in large streams.
                        * 6 => Nobody can use wildcard mentions in large streams.
                        * 7 => Only organization adminstartors and moderators can use wildcard mentions in large streams.

                        All users will receive a warning/reminder when using
                        mentions in large streams, even when permitted to do so.

                        **Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in
                        Zulip 4.0 (feature level 62).
                      type: integer
                    realm_default_language:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The default UI language for new users joining this organization.
                      type: string
                    realm_default_twenty_four_hour_time:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether new members of this organization will see times displayed in
                        24-hour time (true) or 12-hour time (false).
                      type: boolean
                    realm_description:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The description of the organization, used on login and registration pages.
                      type: string
                    realm_digest_emails_enabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization has enabled [weekly digest emails](/help/digest-emails).
                      type: boolean
                    realm_disallow_disposable_email_addresses:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization disallows disposable email
                        addresses.
                      type: boolean
                    realm_email_address_visibility:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users in this organization can see the
                        real email addresses of other users.

                        * 1 = everyone
                        * 2 = members only
                        * 3 = administrators only
                        * 4 = nobody (though note that administrators can change this setting).
                        * 5 = moderators only
                      type: integer
                    realm_email_changes_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether users are allowed to change their own email address in this
                        organization.  This is typically disabled for organizations that
                        synchronize accounts from LDAP or a similar corporate database.
                      type: boolean
                    realm_invite_required:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether an invitation is required to join this organization.
                      type: boolean
                    realm_invite_to_realm_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Policy for [who can invite new users](/help/invite-new-users#change-who-can-send-invitations)
                        to join the organization:

                        * 1 = Members only
                        * 2 = Administrators only
                        * 3 = Full members only
                        * 4 = Moderators only
                        * 6 = Nobody

                        **Changes**: New in Zulip 4.0 (feature level 50) replacing the
                        previous `realm_invite_by_admins_only` boolean.
                      type: integer
                    realm_move_messages_between_streams_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can move messages from one stream to another.

                        * 1 = Members only
                        * 2 = Administrators only
                        * 3 = Full members only
                        * 4 = Moderators only

                        **Changes**: New in Zulip 4.0 (feature level 56)
                      type: integer
                    realm_inline_image_preview:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this organization has been configured to enable
                        [previews of linked images](/help/allow-image-link-previews).
                      type: boolean
                    realm_inline_url_embed_preview:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this organization has been configured to enable
                        [previews of linked websites](/help/allow-image-link-previews).
                      type: boolean
                    realm_mandatory_topics:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether [topics are required](/help/require-topics) for messages in this organization.
                      type: boolean
                    realm_message_retention_days:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The default [message retention policy](/help/message-retention-policy)
                        for this organization.  Pass `"forever"` to request that messages
                        by retained forever (the default).
                      type: integer
                    realm_name:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The name of the organization, used in login pages etc.
                      type: string
                    realm_name_changes_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Indicates whether users are
                        [allowed to change](/help/restrict-name-and-email-changes) their name
                        via the Zulip UI in this organization.  Typically disabled
                        in organizations syncing this this type of account information
                        an external user database like LDAP.
                      type: boolean
                    realm_avatar_changes_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Indicates whether users are
                        [allowed to change](/help/restrict-name-and-email-changes) their avatar
                        via the Zulip UI in this organization.  Typically disabled
                        in organizations syncing this this type of account information
                        an external user database like LDAP.
                      type: boolean
                    realm_emails_restricted_to_domains:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether [new users joining](/help/allow-anyone-to-join-without-an-invitation)
                        this organization are required to have an email
                        address in one of the `realm_domains` configured for the organization.
                      type: boolean
                    realm_send_welcome_emails:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether or not this organization is configured to send the standard Zulip
                        [welcome emails](/help/disable-welcome-emails) to new users joining the organization.
                      type: boolean
                    realm_message_content_allowed_in_email_notifications:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether notification emails in this organization are allowed to
                        contain Zulip the message content, or simply indicate that a new
                        message was sent.
                      type: boolean
                    realm_video_chat_provider:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The configured video call provider for the organization.
                      type: integer
                    realm_giphy_rating:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The configured GIPHY rating for the organization.

                        **Changes**: New in Zulip 4.0 (feature level 55).
                      type: integer
                    realm_waiting_period_threshold:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Members whose accounts have been created at least this many days ago
                        will be treated as [full members](/help/restrict-permissions-of-new-members)
                        for the purpose of settings that restrict access to new members.
                      type: integer
                    realm_digest_weekday:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The day of the week when the organization will send
                        its weekly digest email to inactive users.
                      type: integer
                    realm_private_message_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Policy for [who can send private messages](/help/restrict-private-messages)
                        in this organization.

                        * 1 = Everyone
                        * 2 = Nobody
                      type: integer
                    realm_user_group_edit_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The organization's policy for [who can manage user groups
                        ](/help/restrict-user-group-management).

                        * 1 = All members can create and edit user groups
                        * 2 = Only organization administrators can create and edit user groups
                        * 3 = Only full members can create and edit user groups.
                        * 4 = Only organization administrators and moderators can create and edit user groups.
                      type: integer
                    realm_default_code_block_language:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The default pygments language code to be used for a code blocks
                        in this organization.  Null if no default has been set.
                      nullable: true
                      type: string
                    realm_message_content_delete_limit_seconds:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Messages sent more than this many seconds ago cannot be deleted
                        with this organization's
                        [message deletion policy](/help/configure-message-editing-and-deletion).
                      type: integer
                    realm_authentication_methods:
                      additionalProperties:
                        description: |
                          Boolean describing whether the authentication method (i.e its key)
                          is enabled in this organization.
                        type: boolean
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Dictionary of 'authentication_method_name': 'boolean' with each
                        entry describing whether the authentication name can be used for
                        authenticating into the organization.
                      type: object
                    realm_allow_message_editing:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)
                        allows editing the content of messages.
                      type: boolean
                    realm_edit_topic_policy:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The policy for which users can edit topics of any message.

                        * 1 = members only
                        * 2 = admins only
                        * 3 = full members only
                        * 4 = moderators only
                        * 5 = everyone

                        **Changes**: New in Zulip 5.0 (feature level 75), replacing the
                        previous `allow_community_topic_editing` boolean.
                      type: integer
                    realm_message_content_edit_limit_seconds:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Messages sent more than this many seconds ago cannot be edited
                        with this organization's
                        [message edit policy](/help/configure-message-editing-and-deletion).
                      type: integer
                    realm_community_topic_editing_limit_seconds:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Messages sent more than this many seconds ago cannot have
                        their topics edited by other users with this organization's
                        [message edit policy](/help/configure-message-editing-and-deletion).

                        **Changes**: New in Zulip 3.0 (feature level 11).  Previously this
                        value was hardcoded to 86400 seconds (1 day).
                      type: integer
                    realm_icon_url:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The URL of the organization's [profile icon](/help/create-your-organization-profile).
                      type: string
                    realm_icon_source:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        String indicating whether the organization's
                        [profile icon](/help/create-your-organization-profile) was uploaded
                        by a user or is the default.  Useful for UI allowing editing the organization's icon.

                        * "G" means generated by Gravatar (the default).
                        * "U" means uploaded by an organization administrator.
                      type: string
                    max_icon_file_size_mib:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum file size allowed for the organization's
                        icon.  Useful for UI allowing editing the organization's icon.

                        **Changes**: New in Zulip 5.0 (feature level 72).  Previously,
                        this was called `max_icon_file_size`.
                      type: integer
                    realm_logo_url:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The URL of the organization's wide logo configured in the
                        [organization profile](/help/create-your-organization-profile).
                      type: string
                    realm_logo_source:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        String indicating whether the organization's
                        [profile wide logo](/help/create-your-organization-profile) was uploaded
                        by a user or is the default.  Useful for UI allowing editing the
                        organization's wide logo.

                        * "D" means the logo is the default Zulip logo.
                        * "U" means uploaded by an organization administrator.
                      type: string
                    realm_night_logo_url:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The URL of the organization's night theme wide-format logo configured in the
                        [organization profile](/help/create-your-organization-profile).
                      type: string
                    realm_night_logo_source:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        String indicating whether the organization's night theme
                        [profile wide logo](/help/create-your-organization-profile) was uploaded
                        by a user or is the default.  Useful for UI allowing editing the
                        organization's wide logo.

                        * "D" means the logo is the default Zulip logo.
                        * "U" means uploaded by an organization administrator.
                      type: string
                    max_logo_file_size_mib:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum file size allowed for the uploaded organization logos.

                        **Changes**: New in Zulip 5.0 (feature level 72).  Previously,
                        this was called `max_logo_file_size`.
                      type: integer
                    realm_bot_domain:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The fake email domain that will be used for new bots created this
                        organization.  Useful for UI for creating bots.
                      type: string
                    realm_uri:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The URL for the organization.
                      type: string
                    realm_available_video_chat_providers:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{provider_name}`: Dictionary containing the details of the
                          video call provider with the name of the chat provider as
                          the key.
                        properties:
                          name:
                            description: |
                              The name of the video call provider.
                            type: string
                          id:
                            description: |
                              The ID of the video call provider.
                            type: integer
                        type: object
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Dictionary where each entry describes a supported
                        [video call provider](/help/start-a-call)
                        that is configured on this server and could be selected by an
                        organization administrator.

                        Useful for administrative settings UI that allows changing the
                        video call provider.
                      type: object
                    realm_presence_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether online presence of other users is shown in this
                        organization.
                      type: boolean
                    settings_send_digest_emails:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this Zulip server is configured to allow organizations to
                        enable [digest emails](/help/digest-emails).

                        Relevant for administrative settings UI that can change the digest
                        email settings.
                      type: boolean
                    realm_is_zephyr_mirror_realm:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization is a Zephyr mirror realm.
                      type: boolean
                    realm_email_auth_enabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization has enabled Zulip's default email and password
                        authentication feature.  Determines whether Zulip stores a password
                        for the user and clients should offer any UI for changing the user's
                        Zulip password.
                      type: boolean
                    realm_password_auth_enabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization allows any sort of password-based
                        authentication (whether via EmailAuthBackend or LDAP passwords).

                        Determines whether a client might ever need to display a password prompt
                        (clients will primarily look at this attribute in [server_settings](/api/get-server-settings)
                        before presenting a login page).
                      type: boolean
                    realm_push_notifications_enabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether push notifications are enabled for this organization.  Typically
                        `false` for self-hosted servers that have not configured the
                        [Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).
                      type: boolean
                    realm_upload_quota_mib:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The total quota for uploaded files in this organization.

                        Clients are not responsible for checking this quota; it is included
                        in the API only for display purposes.

                        Null if there is no limit.

                        **Changes**: New in Zulip 5.0 (feature level 72).  Previously,
                        this was called `realm_upload_quota`.
                      nullable: true
                      type: integer
                    realm_plan_type:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The plan type of the organization.

                        * 1 = Self-hosted organization (SELF_HOSTED)
                        * 2 = Zulip Cloud free plan (LIMITED)
                        * 3 = Zulip Cloud Standard plan (STANDARD)
                        * 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)
                      type: integer
                    zulip_plan_is_not_limited:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the organization is using a limited (Zulip Cloud Free) plan.
                      type: boolean
                    upgrade_text_for_wide_organization_logo:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Text to use when displaying UI for wide organization logos, a feature
                        that is currently not available on the Zulip Cloud Free plan.

                        Useful only for clients supporting administrative UI for uploading
                        a new wide organization logo to brand the organization.
                      type: string
                    realm_default_external_accounts:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{site_name}`: Dictionary containing the details of the
                          default external account provider with the name of the
                          website as the key.
                        properties:
                          name:
                            description: |
                              The name of the external account provider
                            type: string
                          text:
                            description: |
                              The text describing the external account.
                            type: string
                          hint:
                            description: |
                              The help text to be displayed for the
                              custom profile field in user-facing
                              settings UI for configuring custom
                              profile fields for this account.
                            type: string
                          url_pattern:
                            description: |
                              The regex pattern of the URL of a profile page
                              on the external site.
                            type: string
                        type: object
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Dictionary where each entry describes a default external
                        account type that can be configured with Zulip's custom
                        profile fields feature.
                      type: object
                    jitsi_server_url:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The base URL the organization uses to create Jitsi video calls.
                      type: string
                    development_environment:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether this Zulip server is a development environment.  Used
                        to control certain features or UI (such as error popups)
                        that should only apply when connected to a Zulip development
                        environment.
                      type: boolean
                    server_generation:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        A timestamp indicating when the process hosting this
                        event queue was started.  Clients will likely only find
                        this value useful for inclusion in detailed error reports.
                      type: integer
                    password_min_length:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        This Zulip server's configured minimum required length for passwords.
                        Necessary for password change UI to show whether the password
                        will be accepted.
                      type: integer
                    password_min_guesses:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        This Zulip server's configured minimum `zxcvbn` minimum guesses.
                        Necessary for password change UI to show whether the password
                        will be accepted.
                      type: integer
                    giphy_rating_options:
                      additionalProperties:
                        additionalProperties: false
                        description: |
                          `{rating_name}`: Dictionary containing the details of the
                          rating with the name of the rating as
                          the key.
                        properties:
                          name:
                            description: |
                              The description of the rating option.
                            type: string
                          id:
                            description: |
                              The ID of the rating option.
                            type: integer
                        type: object
                      description: |
                        Dictionary where each entry describes a valid rating
                        that is configured on this server and could be selected by an
                        organization administrator.

                        Useful for administrative settings UI that allows changing the
                        allowed rating of GIFs.
                      type: object
                    max_file_upload_size_mib:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum file size that can be uploaded to this Zulip server.
                      type: integer
                    max_avatar_file_size_mib:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The maximum avatar size that can be uploaded to this Zulip server.
                      type: integer
                    server_inline_image_preview:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the server is configured with support for inline image previews.
                        Clients containing administrative UI for changing
                        `realm_inline_image_preview` should consult this field before offering
                        that feature.
                      type: boolean
                    server_inline_url_embed_preview:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the server is configured with support for inline URL previews.
                        Clients containing administrative UI for changing
                        `realm_inline_url_embed_preview` should consult this field before offering
                        that feature.
                      type: boolean
                    server_avatar_changes_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the server allows avatar changes.  Similar to
                        `realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`
                        Zulip server level setting.
                      type: boolean
                    server_name_changes_disabled:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the server allows name changes.  Similar to
                        `realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`
                        Zulip server level setting.
                      type: boolean
                    server_needs_upgrade:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Whether the server is running an old version based on the Zulip
                        [server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag),
                        such that the web app will display to the current user a prominent warning.

                        **Changes**: New in Zulip 5.0 (feature level 74).
                      type: boolean
                    event_queue_longpoll_timeout_seconds:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        Recommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls.
                        This is guaranteed to be somewhat greater than the heartbeat frequency. It is important
                        that clients respect this parameter, so that increases in the heartbeat frequency do not
                        break clients.

                        **Changes**: New in Zulip 5.0 (feature level 74). Previously,
                        this was hardcoded to 90 seconds, and clients should use that as a fallback
                        value when interacting with servers where this field is not present.
                      type: integer
                    realm_notifications_stream_id:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The ID of the stream to which notifications announcing the
                        creation of new streams are sent. -1 if such notifications are disabled.

                        Since these notifications are sent by the server, this field is
                        primarily relevant to clients containing UI for changing it.
                      type: integer
                    realm_signup_notifications_stream_id:
                      description: |
                        Present if `realm` is present in `fetch_event_types`.

                        The ID of the stream to which notifications announcing
                        that new users have joined the organization are sent.
                        -1 if such notifications are disabled.

                        Since these notifications are sent by the server, this field is
                        primarily relevant to clients containing UI for changing it.
                      type: integer
                    realm_users:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        A array of dictionaries where each entry describes a user
                        whose account has not been deactivated. Note that unlike
                        the usual User dictionary, this does not contain the `is_active`
                        key, as all the users present in this array have active accounts.

                        See also `cross_realm_bots` and `realm_non_active_users`.
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                    realm_non_active_users:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        A array of dictionaries where each entry describes a user
                        whose account has been deactivated. Note that unlike
                        the usual User dictionary this does not contain the `is_active`
                        key as all the users present in this array have deactivated
                        accounts.
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                    avatar_source:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The avatar data source type for the current user.

                        Value values are `G` (gravatar) and `U` (uploaded by user).
                      type: string
                    avatar_url_medium:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The avatar URL for the current user at 500x500 resolution, appropriate
                        for use in settings UI showing the user's avatar.
                      type: string
                    avatar_url:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The URL of the avatar for the current user at 100x100
                        resolution.  See also `avatar_url_medium`.
                      type: string
                    can_create_streams:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is allowed to create streams with
                        the organization's [stream creation policy](/help/configure-who-can-create-streams).
                      type: boolean
                    can_subscribe_other_users:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is allowed to subscribe other users to streams with
                        the organization's [streams policy](/help/configure-who-can-invite-to-streams).
                      type: boolean
                    can_invite_others_to_realm:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user [is allowed to invite others]
                        (/help/invite-new-users#change-who-can-send-invitations) to the organization.

                        **Changes**: New in Zulip 4.0 (feature level 51).
                      type: boolean
                    is_admin:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is an [organization administrator](/help/roles-and-permissions).
                      type: boolean
                    is_owner:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is an [organization owner](/help/roles-and-permissions).
                      type: boolean
                    is_billing_admin:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is a billing administrator.

                        **Changes**: New in Zulip 5.0 (feature level 73).
                      type: boolean
                    is_moderator:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is an [organization moderator](/help/roles-and-permissions).

                        **Changes**: New in Zulip 4.0 (feature level 60).
                      type: boolean
                    is_guest:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Whether the current user is a [guest user](/help/roles-and-permissions).
                      type: boolean
                    enter_sends:
                      deprecated: true
                      description: |
                        Present if `update_display_settings` is present in `fetch_event_types`
                        and only for clients that did not include `user_settings_object` in
                        their client_capabilities` when registering the event queue.

                        Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)
                        in the compose box is enabled.

                        **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients
                        connecting to newer servers should declare the `user_settings_object`
                        client capability and process the `user_settings` event type instead.
                        Prior to Zulip 5.0 (feature level 84) this field was present
                        in response if 'realm_user' was present in `fetch_event_types`, not
                        `update_display_settings`.
                      type: boolean
                    user_id:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The unique ID for the current user.
                      type: integer
                    email:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The Zulip display email address for the current user.  See also
                        `delivery_email`; these may be the same or different depending
                        on the organization's `email_address_visibility` policy.
                      type: string
                    delivery_email:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The user's email address, appropriate for UI for changing
                        the user's email address.  See also `email`.
                      type: string
                    full_name:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        The full name of the current user.
                      type: string
                    cross_realm_bots:
                      description: |
                        Present if `realm_user` is present in `fetch_event_types`.

                        Array of dictionaries where each dictionary contains details of
                        a single cross realm bot.  Cross-realm bots are special system bot accounts
                        like Notification Bot.

                        Most clients will want to combine this with `realm_users` in many
                        contexts.
                      items:
                        allOf:
                        - $ref: '#/components/schemas/UserBase'
                        - additionalProperties: false
                          properties:
                            email: {}
                            is_bot: {}
                            avatar_url: {}
                            avatar_version: {}
                            full_name: {}
                            is_admin: {}
                            is_owner: {}
                            is_billing_admin: {}
                            role: {}
                            bot_type: {}
                            user_id: {}
                            bot_owner_id: {}
                            is_active: {}
                            is_guest: {}
                            timezone: {}
                            date_joined: {}
                            delivery_email: {}
                            profile_data: {}
                            is_system_bot:
                              description: |
                                Whether the user is a system bot.  System bots are special
                                bot user accounts that are managed by the system, rather than
                                the organization's administrators.

                                **Changes**: This field was called `is_cross_realm_bot`
                                before Zulip 5.0 (feature level 83).
                              type: boolean
                          type: object
                      type: array
                  type: object
          description: Success.
      summary: Register an event queue
      tags:
      - real_time_events
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - event_types
  /server_settings:
    get:
      description: |
        Fetch global settings for a Zulip server.

        `GET {{ api_url }}/v1/server_settings`

        **Note:** this endpoint does not require any authentication at all, and you can use it to check:

        * If this is a Zulip server, and if so, what version of Zulip it's running.
        * What a Zulip client (e.g. a mobile app or
        [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to
        know in order to display a login prompt for the server (e.g. what
        authentication methods are available).
      operationId: get-server-settings
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - additionalProperties: false
                  description: A typical successful JSON response for a single-organization
                    server may look like
                  example:
                    authentication_methods:
                      password: true
                      dev: true
                      email: true
                      ldap: false
                      remoteuser: false
                      github: true
                      azuread: false
                      google: true
                      saml: true
                    zulip_version: 5.0-dev-1650-gc3fd37755f
                    zulip_merge_base: 5.0-dev-1646-gea6b21cd8c
                    push_notifications_enabled: false
                    msg: ""
                    is_incompatible: false
                    email_auth_enabled: true
                    require_email_format_usernames: true
                    realm_uri: http://localhost:9991
                    realm_name: Zulip Dev
                    realm_icon: https://secure.gravatar.com/avatar/62429d594b6ffc712f54aee976a18b44?d=identicon
                    realm_description: <p>The Zulip development environment default
                      organization.  It's great for testing!</p>
                    result: success
                    external_authentication_methods:
                    - name: saml:idp_name
                      display_name: SAML
                      display_icon: null
                      login_url: /accounts/login/social/saml/idp_name
                      signup_url: /accounts/register/social/saml/idp_name
                    - name: google
                      display_name: Google
                      display_icon: /static/images/landing-page/logos/googl_e-icon.png
                      login_url: /accounts/login/social/google
                      signup_url: /accounts/register/social/google
                    - name: github
                      display_name: GitHub
                      display_icon: /static/images/landing-page/logos/github-icon.png
                      login_url: /accounts/login/social/github
                      signup_url: /accounts/register/social/github
                  properties:
                    result: {}
                    msg: {}
                    authentication_methods:
                      additionalProperties: false
                      deprecated: true
                      description: |
                        Each key-value pair in the object indicates whether the authentication
                        method is enabled on this server.

                        **Changes**: Deprecated in Zulip 2.1, in favor of the more expressive
                        `external_authentication_methods`.
                      properties:
                        password:
                          description: |
                            Whether the user can authenticate using password.
                          type: boolean
                        dev:
                          description: |
                            Whether the user can authenticate using development API key.
                          type: boolean
                        email:
                          description: |
                            Whether the user can authenticate using email.
                          type: boolean
                        ldap:
                          description: |
                            Whether the user can authenticate using LDAP.
                          type: boolean
                        remoteuser:
                          description: |
                            Whether the user can authenticate using REMOTE_USER.
                          type: boolean
                        github:
                          description: |
                            Whether the user can authenticate using their GitHub account.
                          type: boolean
                        azuread:
                          description: |
                            Whether the user can authenticate using their Azure Active Directory account.
                          type: boolean
                        gitlab:
                          description: |
                            Whether the user can authenticate using their GitLab account.
                          type: boolean
                        apple:
                          description: |
                            Whether the user can authenticate using their Apple account.
                          type: boolean
                        google:
                          description: |
                            Whether the user can authenticate using their Google account.
                          type: boolean
                        saml:
                          description: |
                            Whether the user can authenticate using SAML.
                          type: boolean
                        openid connect:
                          description: |
                            Whether the user can authenticate using OpenID Connect.
                          type: boolean
                      type: object
                    external_authentication_methods:
                      description: |
                        A list of dictionaries describing the available external
                        authentication methods (E.g. Google, GitHub, or SAML)
                        enabled for this organization.

                        The list is sorted in the order in which these
                        authentication methods should be displayed.

                        **Changes**: New in Zulip 2.1.
                      items:
                        additionalProperties: false
                        properties:
                          name:
                            description: |
                              A unique, table, machine-readable name for the authentication method,
                              intended to be used by clients with special behavior for specific
                              authentication methods to correctly identify the method.
                            type: string
                          display_name:
                            description: |
                              Display name of the authentication method, to be used in all buttons
                              for the authentication method.
                            type: string
                          display_icon:
                            description: |
                              URL for an image to be displayed as an icon in all buttons for
                              the external authentication method.

                              When null, no icon should be displayed.
                            nullable: true
                            type: string
                          login_url:
                            description: |
                              URL to be used to initiate authentication using this method.
                            type: string
                          signup_url:
                            description: |
                              URL to be used to initiate account registration using this method.
                            type: string
                        type: object
                      type: array
                    zulip_feature_level:
                      description: |
                        An integer indicating what features are
                        available on the server. The feature level increases monotonically;
                        a value of N means the server supports all API features introduced
                        before feature level N.  This is designed to provide a simple way
                        for client apps to decide whether the server supports a given
                        feature or API change.  See the [changelog](/api/changelog) for
                        details on what each feature level means.

                        **Changes**.  New in Zulip 3.0.  We recommend using an implied value
                        of 0 for Zulip servers that do not send this field.
                      type: integer
                    zulip_version:
                      description: |
                        The server's version number.  This is often a release version number,
                        like `2.1.7`. But for a server running a [version from Git][git-release],
                        it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.

                        [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions
                      type: string
                    zulip_merge_base:
                      description: |
                        The `git merge-base` between `zulip_verson` and official branches
                        in the public
                        [Zulip server and web app repository](https://github.com/zulip/zulip),
                        in the same format as `zulip_version`. This will equal
                        `zulip_version` if the server is not running a fork of the Zulip server.

                        This will be `""` if unavailable.

                        **Changes**: New in Zulip 5.0 (feature level 88).
                      type: string
                    push_notifications_enabled:
                      description: |
                        Whether mobile/push notifications are enabled.
                      type: boolean
                    is_incompatible:
                      description: |
                        Whether the Zulip client that has sent a request to this endpoint is
                        deemed incompatible with the server.
                      type: boolean
                    email_auth_enabled:
                      description: |
                        Setting for allowing users authenticate with an email-password
                        combination.
                      type: boolean
                    require_email_format_usernames:
                      description: |
                        Whether all valid usernames for authentication to this
                        organization will be email addresses. This is important
                        for clients to know whether to do client side validation
                        of email address format in a login prompt.

                        This value will be false if the server has [LDAP
                        authentication][ldap-auth] enabled with a username and
                        password combination.

                        [ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory
                      type: boolean
                    realm_uri:
                      description: |
                        The organization's canonical URL.
                      type: string
                    realm_name:
                      description: |
                        The organization's name (for display purposes).
                      type: string
                    realm_icon:
                      description: |
                        The URL for the organization's logo formatted as a square image,
                        used for identifying the organization in small locations in the
                        mobile and desktop apps.
                      type: string
                    realm_description:
                      description: |
                        HTML description of the organization, as configured by the [organization
                        profile](/help/create-your-organization-profile).
                      type: string
                  type: object
          description: Success.
      summary: Get server settings
      tags:
      - server_and_organizations
      x-response-description: |
        Please note that not all of these attributes are guaranteed to appear in a
        response, for two reasons:

        * This endpoint has evolved over time, so responses from older Zulip servers
          might be missing some keys (in which case a client should assume the
          appropriate default).
        * If a `/server_settings` request is made to the root domain of a
          multi-subdomain server, like the root domain of zulip.com, the settings
          that are realm-specific are not known and thus not provided.
  /settings:
    patch:
      description: |
        This endpoint is used to edit the current user's settings.

        `PATCH {{ api_url }}/v1/settings`

        **Changes**: Prior to Zulip 5.0 (feature level 80), this
        endpoint only supported the `full_name`, `email`,
        `old_password`, and `new_password` parameters. Notification
        settings were managed by `PATCH /settings/notifications`, and
        all other settings by `PATCH /settings/display`. The feature level
        80 migration to merge these endpoints did not change how request
        parameters are encoded. Note, however, that it did change the
        handling of any invalid parameters present in a request to change
        notification or display settings, since the merged endpoint uses
        the new response format that was introduced for `/settings` in
        Zulip 5.0 (feature level 78).

        The `/settings/display` and `/settings/notifications`
        endpoints are now deprecated aliases for this endpoint for
        backwards-compatibility, and will be removed once clients have
        migrated to use this endpoint.
      operationId: update-settings
      parameters:
      - description: |
          A new display name for the user.
        example: NewName
        explode: true
        in: query
        name: full_name
        required: false
        schema:
          type: string
        style: form
      - description: |
          Asks the server to initiate a confirmation sequence to change the user's email
          address to the indicated value. The user will need to demonstrate control of the
          new email address by clicking a confirmation link sent to that address.
        example: newname@example.com
        explode: true
        in: query
        name: email
        required: false
        schema:
          type: string
        style: form
      - description: |
          The user's old Zulip password (or LDAP password, if LDAP authentication is in use).

          Required only when sending the `new_password` parameter.
        example: old12345
        explode: true
        in: query
        name: old_password
        required: false
        schema:
          type: string
        style: form
      - description: |
          The user's new Zulip password (or LDAP password, if LDAP authentication is in use).

          The `old_password` parameter must be included in the request.
        example: new12345
        explode: true
        in: query
        name: new_password
        required: false
        schema:
          type: string
        style: form
      - description: |
          Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: twenty_four_hour_time
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          This setting has no effect at present.  It is reserved for use in controlling
          the default font size in Zulip.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: dense_mode
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether clients should display the [number of starred
          messages](/help/star-a-message#display-the-number-of-starred-messages).

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: starred_message_counts
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether to use the [maximum available screen width](/help/enable-full-width-display)
          for the web app's center panel (message feed, recent topics) on wide screens.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: fluid_layout_width
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          This setting is reserved for use to control variations in Zulip's design
          to help visually impaired users.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: high_contrast_mode
        required: false
        schema:
          type: boolean
        style: form
      - content:
          application/json:
            example: 1
            schema:
              enum:
              - 1
              - 2
              - 3
              type: integer
        description: |
          Controls which [color theme](/help/night-mode) to use.

          * 1 - Automatic
          * 2 - Night mode
          * 3 - Day mode

          Automatic detection is implementing using the standard `prefers-color-scheme`
          media query.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        explode: true
        in: query
        name: color_scheme
        required: false
        style: form
      - description: |
          A boolean parameter to control whether synchronizing drafts is enabled for
          the user. When synchronization is disabled, all drafts stored in the server
          will be automatically deleted from the server.

          This does not do anything (like sending events) to delete local copies of
          drafts stored in clients.

          **Changes**: New in Zulip 5.0 (feature level 87).
        example: true
        explode: true
        in: query
        name: enable_drafts_synchronization
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)
          in messages the user sends.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: translate_emoticons
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          What [default language](/help/change-your-language) to use for the account.

          This controls both the Zulip UI as well as email notifications sent to the user.

          The value needs to be a standard language code that the Zulip server has
          translation data for; for example, `"en"` for English or `"de"` for German.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.

          Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).
        example: en
        explode: true
        in: query
        name: default_language
        required: false
        schema:
          type: string
        style: form
      - description: |
          The [default view](/help/change-default-view) used when opening a new
          Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.

          * "recent_topics" - Recent topics view
          * "all_messages" - All messages view

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.

          Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
        example: all_messages
        explode: true
        in: query
        name: default_view
        required: false
        schema:
          type: string
        style: form
      - description: |
          Whether the users list on left sidebar in narrow windows.

          This feature is not heavily used and is likely to be reworked.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        example: true
        explode: true
        in: query
        name: left_side_userlist
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),
          used to display emoji to the user everything they appear in the UI.

          * "google" - Google modern
          * "google-blob" - Google classic
          * "twitter" - Twitter
          * "text" - Plain text

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.

          Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
        example: google
        explode: true
        in: query
        name: emojiset
        required: false
        schema:
          type: string
        style: form
      - content:
          application/json:
            example: 1
            schema:
              enum:
              - 1
              - 2
              - 3
              type: integer
        description: |
          Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.

          * 1 - Automatic
          * 2 - Always
          * 3 - Never

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.
        explode: true
        in: query
        name: demote_inactive_streams
        required: false
        style: form
      - description: |
          The user's [configured timezone](/help/change-your-timezone).

          Timezone values supported by the server are served at
          [/static/generated/timezones.json](/static/generated/timezones.json).

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/display` endpoint.

          Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).
        example: Asia/Kolkata
        explode: true
        in: query
        name: timezone
        required: false
        schema:
          type: string
        style: form
      - description: |
          Enable visual desktop notifications for stream messages.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_stream_desktop_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable email notifications for stream messages.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_stream_email_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable mobile notifications for stream messages.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_stream_push_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable audible desktop notifications for stream messages.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_stream_audible_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Notification sound name.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.

          Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).
        example: ding
        explode: true
        in: query
        name: notification_sound
        required: false
        schema:
          type: string
        style: form
      - description: |
          Enable visual desktop notifications for private messages and @-mentions.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_desktop_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable audible desktop notifications for private messages and
          @-mentions.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_sounds
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          The duration (in seconds) for which the server should wait to batch
          email notifications before sending them.

          **Changes**: New in Zulip 5.0 (feature level 82)
        example: 120
        explode: true
        in: query
        name: email_notifications_batching_period_seconds
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Enable email notifications for private messages and @-mentions received
          when the user is offline.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_offline_email_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable mobile notification for private messages and @-mentions received
          when the user is offline.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_offline_push_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable mobile notification for private messages and @-mentions received
          when the user is online.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_online_push_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable digest emails when the user is away.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_digest_emails
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable marketing emails. Has no function outside Zulip Cloud.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_marketing_emails
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Enable email notifications for new logins to account.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: enable_login_emails
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Include the message's content in email notifications for new messages.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: message_content_in_email_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Include content of private messages in desktop notifications.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: pm_content_in_desktop_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether wildcard mentions (E.g. @**all**) should send notifications
          like a personal mention.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: wildcard_mentions_notify
        required: false
        schema:
          type: boolean
        style: form
      - content:
          application/json:
            example: 1
            schema:
              enum:
              - 1
              - 2
              - 3
              type: integer
        description: |
          Unread count summary (appears in desktop sidebar and browser tab)

          * 1 - All unreads
          * 2 - Private messages and mentions
          * 3 - None

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        explode: true
        in: query
        name: desktop_icon_count_display
        required: false
        style: form
      - description: |
          Include organization name in subject of message notification emails.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: realm_name_in_notifications
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Display the presence status to other users when online.

          **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by
          the `PATCH /settings/notifications` endpoint.
        example: true
        explode: true
        in: query
        name: presence_enabled
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Whether pressing Enter in the compose box sends a message
          (or saves a message edit).

          **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by
          the `POST /users/me/enter-sends` endpoint, with the same parameter format.
        example: true
        explode: true
        in: query
        name: enter_sends
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    ignored_parameters_unsupported:
                    - name
                    - password
                    msg: ""
                    result: success
                  properties:
                    result: {}
                    msg: {}
                    ignored_parameters_unsupported:
                      description: |
                        This field lists any parameters sent in the request that are not
                        supported by the endpoint. While this can be expected, e.g. when sending
                        both current and legacy names for a parameter to a Zulip server of
                        unknown version, this often indicates a bug in the client
                        implementation or an attempt to configure a new feature, while
                        connected to an older Zulip server that does not support the feature.

                        **Changes**: New in Zulip 5.0 (feature level 78). Previously,
                        the `/settings` endpoint indicated which parameters it had
                        processed by including in the response object `"key": value`
                        entries for values successfully changed by the request.

                        The `/settings/notifications` and `/settings/display` endpoints
                        also had this behavior before they became aliases of `/settings`
                        in Zulip 5.0 (feature level 80).

                        Before those changes, request parameters that were not supported
                        or were unchanged were silently ignored.
                      items:
                        type: string
                      type: array
                  type: object
          description: Success
      summary: Update settings
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - left_side_userlist
            - emojiset
  /streams/{stream_id}/members:
    get:
      description: |
        Get all users subscribed to a stream.

        `Get {{ api_url }}/v1/streams/{stream_id}/members`
      operationId: get-subscribers
      parameters:
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    result: success
                    msg: ""
                    subscribers:
                    - 11
                    - 26
                  properties:
                    subscribers:
                      description: |
                        A list containing the IDs of all active users who are subscribed
                        to the stream.
                      items:
                        type: integer
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    An example JSON response for when the requested stream does not exist,
                    or where the user does not have permission to access the target stream:
                  example:
                    code: BAD_REQUEST
                    msg: Invalid stream id
                    result: error
          description: Bad request.
      summary: Get the subscribers of a stream
      tags:
      - streams
  /streams:
    get:
      description: |
        Get all streams that the user has access to.

        `GET {{ api_url }}/v1/streams`
      operationId: get-streams
      parameters:
      - description: |
          Include all public streams.
        example: false
        explode: true
        in: query
        name: include_public
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Include all web public streams.
        example: true
        explode: true
        in: query
        name: include_web_public
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all streams that the user is subscribed to.
        example: false
        explode: true
        in: query
        name: include_subscribed
        required: false
        schema:
          default: true
          type: boolean
        style: form
      - description: |
          Include all active streams. The user must have administrative privileges
          to use this parameter.
        example: true
        explode: true
        in: query
        name: include_all_active
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          Include all default streams for the user's realm.
        example: true
        explode: true
        in: query
        name: include_default
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: |
          If the user is a bot, include all streams that the bot's owner is
          subscribed to.
        example: true
        explode: true
        in: query
        name: include_owner_subscribed
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    streams:
                    - description: A Scandinavian country
                      invite_only: false
                      name: Denmark
                      stream_id: 1
                    - description: Yet another Italian city
                      invite_only: false
                      name: Rome
                      stream_id: 2
                    - description: Located in the United Kingdom
                      invite_only: false
                      name: Scotland
                      stream_id: 3
                    - description: A northeastern Italian city
                      invite_only: false
                      name: Venice
                      stream_id: 4
                    - description: A city in Italy
                      invite_only: false
                      name: Verona
                      stream_id: 5
                    - description: New stream for testing
                      invite_only: false
                      name: new stream
                      stream_id: 6
                  properties:
                    result: {}
                    msg: {}
                    streams:
                      description: |
                        A list of `stream` objects with details on the requested streams.
                      items:
                        allOf:
                        - $ref: '#/components/schemas/BasicStreamBase'
                        - additionalProperties: false
                          properties:
                            stream_id: {}
                            name: {}
                            description: {}
                            date_created: {}
                            invite_only: {}
                            rendered_description: {}
                            is_web_public: {}
                            stream_post_policy: {}
                            message_retention_days: {}
                            history_public_to_subscribers: {}
                            first_message_id: {}
                            is_announcement_only: {}
                            is_default:
                              description: |
                                Whether the given stream is a
                                [default stream](/help/set-default-streams-for-new-users).  Only
                                returned if the `include_default` parameter is `true`.
                              type: boolean
                          type: object
                      type: array
                  type: object
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/CodedError'
                - description: |
                    An example JSON response for when the user is not authorized to use the
                    `include_all_active` parameter (i.e. because they are not an organization
                    administrator)
                  example:
                    code: BAD_REQUEST
                    msg: User not authorized for this query
                    result: error
          description: Bad request.
      summary: Get all streams
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - ""
        - type: include
          parameters:
            enum:
            - include_public
          description: |
            You may pass in one or more of the parameters mentioned above
            as URL query parameters, like so:
  /streams/{stream_id}:
    delete:
      description: |
        [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.

        `DELETE {{ api_url }}/v1/streams/{stream_id}`
      operationId: archive-stream
      parameters:
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON response for when the supplied stream
                    does not exist
                  example:
                    code: BAD_REQUEST
                    msg: Invalid stream id
                    result: error
          description: Bad request.
      summary: Archive a stream
      tags:
      - streams
    patch:
      description: |
        Configure the stream with the ID `stream_id`.  This endpoint supports
        an organization administrator editing any property of a stream,
        including:

        * Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description)
        * Stream [permissions](/help/stream-permissions), including
        [privacy](/help/change-the-privacy-of-a-stream) and [who can
        send](/help/stream-sending-policy).

        `PATCH {{ api_url }}/v1/streams/{stream_id}`
      operationId: update-stream
      parameters:
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The new description for the stream. Limited Zulip markdown is allowed in this
          field.

          **Changes**: Removed unnecessary JSON-encoding of this parameter in
          Zulip 4.0 (feature level 64).
        example: Discuss Italian history and travel destinations.
        explode: true
        in: query
        name: description
        required: false
        schema:
          type: string
        style: form
      - description: |
          The new name for the stream.

          **Changes**: Removed unnecessary JSON-encoding of this parameter in
          Zulip 4.0 (feature level 64).
        example: Italy
        explode: true
        in: query
        name: new_name
        required: false
        schema:
          type: string
        style: form
      - description: |
          Change whether the stream is a private stream.
        example: true
        explode: true
        in: query
        name: is_private
        required: false
        schema:
          type: boolean
        style: form
      - deprecated: true
        description: |
          Whether the stream is limited to announcements.

          **Changes**: Deprecated in Zulip 3.0 (feature level 1), use
            `stream_post_policy` instead.
        example: true
        explode: true
        in: query
        name: is_announcement_only
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Policy for which users can post messages to the stream.

          * 1 => Any user can post.
          * 2 => Only administrators can post.
          * 3 => Only full members can post.
          * 4 => Only moderators can post.

          **Changes**: New in Zulip 3.0, replacing the previous
          `is_announcement_only` boolean.
        example: 2
        explode: true
        in: query
        name: stream_post_policy
        required: false
        schema:
          default: 1
          type: integer
        style: form
      - description: |
          Whether the stream's message history should be available to
          newly subscribed members, or users can only access messages
          they actually received while subscribed to the stream.

          Corresponds to the [shared history](/help/stream-permissions)
          option in documentation.
        example: false
        explode: true
        in: query
        name: history_public_to_subscribers
        required: false
        schema:
          type: boolean
        style: form
      - description: |
          Number of days that messages sent to this stream will be stored
          before being automatically deleted by the [message retention
          policy](/help/message-retention-policy).  Two special string format
          values are supported:

          * "realm_default" => Return to the organization-level setting.
          * "forever" => Retain messages forever.

          **Changes**: New in Zulip 3.0 (feature level 17).
        example: "20"
        explode: true
        in: query
        name: message_retention_days
        required: false
        schema:
          oneOf:
          - type: string
          - type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON response for when the supplied stream
                    does not exist
                  example:
                    code: BAD_REQUEST
                    msg: Invalid stream id
                    result: error
          description: Bad request.
      summary: Update a stream
      tags:
      - streams
      x-curl-examples-parameters:
        oneOf:
        - type: include
          parameters:
            enum:
            - new_name
            - description
            - is_private
  /streams/{stream_id}/delete_topic:
    post:
      description: |
        Delete all messages in a topic.

        `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`

        Topics are a field on messages (not an independent
        data structure), so deleting all the messages in the topic
        deletes the topic from Zulip.
      operationId: delete-topic
      parameters:
      - description: |
          The ID of the stream to access.
        example: 1
        explode: false
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The name of the topic to delete.
        example: new coffee machine
        explode: true
        in: query
        name: topic_name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: |
                    Error when the user does not have permission
                    to delete topics in this organization.
                  example:
                    result: error
                    msg: Must be an organization administrator
                    code: UNAUTHORIZED_PRINCIPAL
          description: Error.
      summary: Delete a topic
      tags:
      - streams
  /typing:
    post:
      description: |
        Notify other users whether the current user is typing a message.

        `POST {{ api_url }}/v1/typing`

        Clients implementing Zulip's typing notifications protocol should work as follows:

        * Send a request to this endpoint with `op="start"` when a user starts typing a message,
          and also every `TYPING_STARTED_WAIT_PERIOD=10` seconds that the user continues to
          actively type or otherwise interact with the compose UI (E.g. interacting with the
          compose box emoji picker).
        * Send a request to this endpoint with `op="stop"` when a user pauses using the
          compose UI for at least `TYPING_STOPPED_WAIT_PERIOD=5` seconds or cancels
          the compose action (if it had previously sent a "start" operation for that
          compose action).
        * Start displaying "Sender is typing" for a given conversation when the client
          receives an `op="start"` event from the [events API](/api/get-events).
        * Continue displaying "Sender is typing" until they receive an `op="stop"` event
          from the [events API](/api/get-events) or `TYPING_STARTED_EXPIRY_PERIOD=15`
          seconds have passed without a new `op="start"` event for that conversation.
        * Clients that support displaying stream typing notifications (new in Zulip 4.0)
          should indicate they support processing stream typing events via the
          `stream_typing_notifications` in the `client_capabilities` parameter to `/register`.

        This protocol is designed to allow the server-side typing notifications implementation
        to be stateless while being resilient; network failures cannot result in a user being
        incorrectly displayed as perpetually typing.

        See
        [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html)
        for additional design details on Zulip's typing notifications protocol.
      operationId: set-typing-status
      parameters:
      - description: |
          Type of the message being composed.
        example: private
        explode: true
        in: query
        name: type
        required: false
        schema:
          default: private
          enum:
          - private
          - stream
          type: string
        style: form
      - description: |
          Whether the user has started (`start`) or stopped (`stop`) to type.
        example: start
        explode: true
        in: query
        name: op
        required: true
        schema:
          enum:
          - start
          - stop
          type: string
        style: form
      - content:
          application/json:
            example:
            - 9
            - 10
            schema:
              items:
                type: integer
              type: array
        description: |
          For 'private' type it is the user_ids of the recipients of the message being typed.
          Send a JSON-encoded list of user_ids. (Use a list even if there is only one
          recipient.)

          For 'stream' type it is a single element list containing ID of stream in
          which the message is being typed.

          **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded
          list of email addresses.  Support for the email address-based format was
          removed in Zulip 3.0 (feature level 11).
        explode: true
        in: query
        name: to
        required: true
        style: form
      - description: |
          Topic to which message is being typed. Required for the 'stream' type.
          Ignored in case of 'private' type.
        example: typing notifications
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON error response for when user sends
                    to multiple streams
                  example:
                    code: BAD_REQUEST
                    msg: Cannot send to multiple streams
                    result: error
          description: Bad request.
      summary: Set "typing" status
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - topic
  /user_groups/create:
    post:
      description: |
        Create a new [user group](/help/user-groups).

        `POST {{ api_url }}/v1/user_groups/create`
      operationId: create-user-group
      parameters:
      - description: |
          The name of the user group.
        example: marketing
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: |
          The description of the user group.
        example: The marketing team.
        explode: true
        in: query
        name: description
        required: true
        schema:
          type: string
        style: form
      - content:
          application/json:
            example:
            - 1
            - 2
            - 3
            - 4
            schema:
              items:
                type: integer
              type: array
        description: |
          An array containing the user IDs of the initial members for the
          new user group.
        explode: true
        in: query
        name: members
        required: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    msg: ""
                    result: success
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON error response for when the one of
                    the users does not exist
                  example:
                    result: error
                    code: BAD_REQUEST
                    msg: 'Invalid user ID: 500'
          description: Bad request.
      summary: Create a user group
      tags:
      - users
  /user_groups/{user_group_id}/members:
    post:
      description: |
        Update the members of a [user group](/help/user-groups).

        `POST {{ api_url }}/v1/user_groups/{user_group_id}/members`
      operationId: update-user-group-members
      parameters:
      - description: |
          The ID of the target user group.
        example: 1
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      - content:
          application/json:
            example:
            - 10
            schema:
              items:
                type: integer
              type: array
        description: |
          The list of user ids to be removed from the user group.
        explode: true
        in: query
        name: delete
        required: false
        style: form
      - content:
          application/json:
            example:
            - 12
            - 13
            schema:
              items:
                type: integer
              type: array
        description: |
          The list of user ids to be added to the user group.
        explode: true
        in: query
        name: add
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
      summary: Update user group members
      tags:
      - users
      x-curl-examples-parameters:
        oneOf:
        - type: exclude
          parameters:
            enum:
            - delete
  /user_groups/{user_group_id}:
    delete:
      description: |
        Delete a [user group](/help/user-groups).

        `DELETE {{ api_url }}/v1/user_groups/{user_group_id}`
      operationId: remove-user-group
      parameters:
      - description: |
          The ID of the target user group.
        example: 1
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
                - example:
                    result: success
                    msg: ""
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON error response for an invalid user
                    group id
                  example:
                    code: BAD_REQUEST
                    msg: Invalid user group
                    result: error
          description: Bad request.
      summary: Delete a user group
      tags:
      - users
    patch:
      description: |
        Update the name or description of a [user group](/help/user-groups).

        `PATCH {{ api_url }}/v1/user_groups/{user_group_id}`
      operationId: update-user-group
      parameters:
      - description: |
          The ID of the target user group.
        example: 1
        explode: false
        in: path
        name: user_group_id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          The new name of the group.
        example: marketing team
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: |
          The new description of the group.
        example: The marketing team.
        explode: true
        in: query
        name: description
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccess'
                - $ref: '#/components/schemas/SuccessDescription'
          description: Success.
        "400":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonError'
                - description: An example JSON response when the user group ID is
                    invalid
                  example:
                    code: BAD_REQUEST
                    msg: Invalid user group
                    result: error
          description: Bad request.
      summary: Update a user group
      tags:
      - users
  /user_groups:
    get:
      description: |
        {!api-members-only.md!}

        Fetches all of the user groups in the organization.

        `GET {{ api_url }}/v1/user_groups`
      operationId: get-user-groups
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    user_groups:
                    - description: Characters of Hamlet
                      id: 1
                      name: hamletcharacters
                      members:
                      - 3
                      - 4
                    - description: Other users
                      id: 2
                      name: other users
                      members:
                      - 1
                      - 2
                  properties:
                    result: {}
                    msg: {}
                    user_groups:
                      description: |
                        A list of `user_group` objects, which contain a `description`, a `name`,
                        their `id` and the list of members of the user group.
                      items:
                        additionalProperties: false
                        properties:
                          description:
                            description: |
                              The human-readable description of the user group.
                            type: string
                          id:
                            description: |
                              The user group's integer id.
                            type: integer
                          members:
                            description: |
                              The integer user IDs of the user group members.
                            items:
                              type: integer
                            type: array
                          name:
                            description: |
                              User group name.
                            type: string
                        type: object
                      type: array
                  type: object
          description: Success.
      summary: Get user groups
      tags:
      - users
  /real-time:
    post:
      description: |
        (Ignored)
      parameters:
      - content:
          application/json:
            example:
            - message
            schema:
              items:
                type: string
              type: array
        description: |
          A JSON-encoded array indicating which types of events you're interested
          in. Values that you might find useful include:

            * **message** (messages)
            * **subscription** (changes in your subscriptions)
            * **realm_user** (changes to users in the organization and
              their properties, such as their name).

          If you do not specify this parameter, you will receive all
          events, and have to filter out the events not relevant to
          your client in your client code.  For most applications, one
          is only interested in messages, so one specifies:
          `event_types=['message']`

          Event types not supported by the server are ignored, in order to simplify
          the implementation of client apps that support multiple server versions.
        explode: true
        in: query
        name: event_types
        required: false
        style: form
      - content:
          application/json:
            example:
            - - stream
              - Denmark
            schema:
              default: []
              items:
                items:
                  type: string
                type: array
              type: array
        description: |
          A JSON-encoded array of arrays of length 2 indicating the
          narrow for which you'd like to receive events for. For
          instance, to receive events for the stream `Denmark`, you
          would specify `narrow=[['stream', 'Denmark']]`.  Another
          example is `narrow=[['is', 'private']]` for private messages.
          Default is `[]`.
        explode: true
        in: query
        name: narrow
        required: false
        style: form
      - description: |
          Whether you would like to request message events from all public
          streams.  Useful for workflow bots that you'd like to see all new messages
          sent to public streams.  (You can also subscribe the user to private streams).
        example: true
        explode: true
        in: query
        name: all_public_streams
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          description: Success
      security:
      - basicAuth: []
      tags:
      - real_time_events
  /rest-error-handling:
    post:
      description: |
        Common error to many endpoints
      operationId: rest-error-handling
      responses:
        "400":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/InvalidApiKeyError'
                - $ref: '#/components/schemas/MissingArgumentError'
                - $ref: '#/components/schemas/UserNotAuthorizedError'
          description: |
            Bad request.
        "401":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/UserDeactivatedError'
                - $ref: '#/components/schemas/RealmDeactivatedError'
          description: |
            Unauthorized.
        "429":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/RateLimitedError'
          description: |
            Rate limit exceeded.
      summary: Error handling
      tags:
      - real_time_events
  /zulip-outgoing-webhook:
    post:
      description: |
        Outgoing webhooks allows to build or set up Zulip integrations which are
        notified when certain types of messages are sent in Zulip.
      operationId: zulip-outgoing-webhooks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: |
            Success
      summary: Outgoing webhooks
      tags:
      - webhooks
  /calls/bigbluebutton/create:
    get:
      description: |
        Create a video call URL for a BigBlueButton video call.
        Requires BigBlueButton to be configured on the Zulip server.
      operationId: create-big-blue-button-video-call
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/JsonSuccessBase'
                - $ref: '#/components/schemas/SuccessDescription'
                - additionalProperties: false
                  example:
                    msg: ""
                    result: success
                    url: /calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22
                  properties:
                    result: {}
                    msg: {}
                    url:
                      description: |
                        The URL for the BigBlueButton video call.
                      example: /calls/bbb/join?meeting_id=%22zulip-something%22&password=%22something%22&checksum=%22somechecksum%22
                      type: string
                  type: object
          description: Success.
      summary: Create BigBlueButton video call
      tags:
      - streams
components:
  parameters:
    Event_types:
      content:
        application/json:
          example:
          - message
          schema:
            items:
              type: string
            type: array
      description: |
        A JSON-encoded array indicating which types of events you're interested
        in. Values that you might find useful include:

          * **message** (messages)
          * **subscription** (changes in your subscriptions)
          * **realm_user** (changes to users in the organization and
            their properties, such as their name).

        If you do not specify this parameter, you will receive all
        events, and have to filter out the events not relevant to
        your client in your client code.  For most applications, one
        is only interested in messages, so one specifies:
        `event_types=['message']`

        Event types not supported by the server are ignored, in order to simplify
        the implementation of client apps that support multiple server versions.
      explode: true
      in: query
      name: event_types
      required: false
      style: form
    Narrow:
      content:
        application/json:
          example:
          - - stream
            - Denmark
          schema:
            default: []
            items:
              items:
                type: string
              type: array
            type: array
      description: |
        A JSON-encoded array of arrays of length 2 indicating the
        narrow for which you'd like to receive events for. For
        instance, to receive events for the stream `Denmark`, you
        would specify `narrow=[['stream', 'Denmark']]`.  Another
        example is `narrow=[['is', 'private']]` for private messages.
        Default is `[]`.
      explode: true
      in: query
      name: narrow
      required: false
      style: form
    AllPublicStreams:
      description: |
        Whether you would like to request message events from all public
        streams.  Useful for workflow bots that you'd like to see all new messages
        sent to public streams.  (You can also subscribe the user to private streams).
      example: true
      explode: true
      in: query
      name: all_public_streams
      required: false
      schema:
        default: false
        type: boolean
      style: form
    UserGroupId:
      description: |
        The ID of the target user group.
      example: 1
      explode: false
      in: path
      name: user_group_id
      required: true
      schema:
        type: integer
      style: simple
    QueueId:
      description: |
        The ID of an event queue that was previously registered via `POST
        /api/v1/register` (see [Register a queue](/api/register-queue)).
      example: 1375801870:2942
      explode: true
      in: query
      name: queue_id
      required: true
      schema:
        type: string
      style: form
    StreamIdInPath:
      description: |
        The ID of the stream to access.
      example: 1
      explode: false
      in: path
      name: stream_id
      required: true
      schema:
        type: integer
      style: simple
    ClientGravatar:
      description: |
        Whether the client supports computing gravatars URLs.  If
        enabled, `avatar_url` will be included in the response only
        if there is a Zulip avatar, and will be `null` for users who
        are using gravatar as their avatar.  This option
        significantly reduces the compressed size of user data,
        since gravatar URLs are long, random strings and thus do not
        compress well. The `client_gravatar` field is set to `true` if
        clients can compute their own gravatars.
      example: true
      explode: true
      in: query
      name: client_gravatar
      required: false
      schema:
        default: false
        type: boolean
      style: form
    RequiredContent:
      description: |
        The content of the message. Maximum message size of 10000 bytes.
      example: Hello
      explode: true
      in: query
      name: content
      required: true
      schema:
        type: string
      style: form
    OptionalContent:
      description: |
        The content of the message. Maximum message size of 10000 bytes.
      example: Hello
      explode: true
      in: query
      name: content
      required: false
      schema:
        type: string
      style: form
    MessageId:
      description: |
        The target message's ID.
      example: 42
      explode: false
      in: path
      name: message_id
      required: true
      schema:
        type: integer
      style: simple
    UserId:
      description: |
        The target user's ID.
      example: 12
      explode: false
      in: path
      name: user_id
      required: true
      schema:
        type: integer
      style: simple
    MutedUserId:
      description: |
        The ID of the user to mute/un-mute.
      example: 10
      explode: false
      in: path
      name: muted_user_id
      required: true
      schema:
        type: integer
      style: simple
    StreamPostPolicy:
      description: |
        Policy for which users can post messages to the stream.

        * 1 => Any user can post.
        * 2 => Only administrators can post.
        * 3 => Only full members can post.
        * 4 => Only moderators can post.

        **Changes**: New in Zulip 3.0, replacing the previous
        `is_announcement_only` boolean.
      example: 2
      explode: true
      in: query
      name: stream_post_policy
      required: false
      schema:
        default: 1
        type: integer
      style: form
    HistoryPublicToSubscribers:
      description: |
        Whether the stream's message history should be available to
        newly subscribed members, or users can only access messages
        they actually received while subscribed to the stream.

        Corresponds to the [shared history](/help/stream-permissions)
        option in documentation.
      example: false
      explode: true
      in: query
      name: history_public_to_subscribers
      required: false
      schema:
        type: boolean
      style: form
    IncludeSubscribers:
      description: |
        Whether each returned stream object should include a `subscribers`
        field containing a list of the user IDs of its subscribers.

        (This may be significantly slower in organizations with
        thousands of users subscribed to many streams.)

        **Changes**: New in Zulip 2.1.0.
      example: true
      explode: true
      in: query
      name: include_subscribers
      required: false
      schema:
        default: false
        type: boolean
      style: form
    IncludeCustomProfileFields:
      description: |
        Whether the client wants [custom profile field](/help/add-custom-profile-fields)
        data to be included in the response.

        **Changes**: New in Zulip 2.1.0.  Previous versions do no offer these
        data via the API.
      example: true
      explode: true
      in: query
      name: include_custom_profile_fields
      required: false
      schema:
        default: false
        type: boolean
      style: form
    Principals:
      content:
        application/json:
          example:
          - ZOE@zulip.com
          schema:
            items:
              oneOf:
              - type: string
              - type: integer
            type: array
      description: |
        A list of user ids (preferred) or Zulip display email
        addresses of the users to be subscribed to or unsubscribed
        from the streams specified in the `subscriptions` parameter. If
        not provided, then the requesting user/bot is subscribed.

        **Changes**: The integer format is new in Zulip 3.0 (feature level 9).
      explode: true
      in: query
      name: principals
      required: false
      style: form
    ReactionType:
      description: |
        If an app is adding/removing a vote on an existing reaction,
        it should pass this parameter using the value the server provided
        for the existing reaction for specificity.  Supported values:

        * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode codepoint).
        * `realm_emoji`: Custom emoji. (`emoji_code` will be its ID).
        * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to
           namespace the `zulip` emoji.

        **Changes**: In Zulip 3.0 (feature level 2), this become
        optional for [custom emoji](/help/add-custom-emoji);
        previously, this endpoint assumed `unicode_emoji` if this
        parameter was not specified.
      example: unicode_emoji
      explode: true
      in: query
      name: reaction_type
      required: false
      schema:
        type: string
      style: form
    EmojiCode:
      description: |
        A unique identifier, defining the specific emoji codepoint requested,
        within the namespace of the `reaction_type`.

        For most API clients, you won't need this, but it's important
        for Zulip apps to handle rare corner cases when
        adding/removing votes on an emoji reaction added previously by
        another user.

        If the existing reaction was added when the Zulip server was
        using a previous version of the emoji data mapping between
        Unicode codepoints and human-readable names, sending the
        `emoji_code` in the data for the original reaction allows the
        Zulip server to correctly interpret your upvote as an upvote
        rather than a reaction with a "diffenent" emoji.
      example: 1f419
      explode: true
      in: query
      name: emoji_code
      required: false
      schema:
        type: string
      style: form
    MessageRetentionDays:
      description: |
        Number of days that messages sent to this stream will be stored
        before being automatically deleted by the [message retention
        policy](/help/message-retention-policy).  Two special string format
        values are supported:

        * "realm_default" => Return to the organization-level setting.
        * "forever" => Retain messages forever.

        **Changes**: New in Zulip 3.0 (feature level 17).
      example: "20"
      explode: true
      in: query
      name: message_retention_days
      required: false
      schema:
        oneOf:
        - type: string
        - type: integer
      style: form
    LinkifierPattern:
      description: |
        The [Python regular
        expression](https://docs.python.org/3/howto/regex.html) that should
        trigger the linkifier.
      example: '#(?P<id>[0-9]+)'
      explode: true
      in: query
      name: pattern
      required: true
      schema:
        type: string
      style: form
    LinkifierURLFormatString:
      description: |
        The URL used for the link. If you used named groups for the `pattern`,
        you can insert their content here with
        `%(name_of_the_capturing_group)s`.
      example: https://github.com/zulip/zulip/issues/%(id)s
      explode: true
      in: query
      name: url_format_string
      required: true
      schema:
        type: string
      style: form
  requestBodies:
    inline_object_1:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object_1'
    inline_object:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/inline_object'
  responses:
    SimpleSuccess:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/JsonSuccess'
            - $ref: '#/components/schemas/SuccessDescription'
      description: Success.
  schemas:
    EventIdSchema:
      description: |
        The ID of the event.  Events appear in increasing order but may not be consecutive.
      type: integer
    EventTypeSchema:
      description: |
        The event's type, relevant both for client-side dispatch and server-side
        filtering by event type in [POST /register](/api/register-queue).
      type: string
    Attachments:
      additionalProperties: false
      description: |
        Dictionary containing details of a file uploaded by a user.
      properties:
        id:
          description: |
            The unique ID for the attachment.
          type: integer
        name:
          description: |
            Name of the uploaded file.
          type: string
        path_id:
          description: |
            A representation of the path of the file within the
            repository of user-uploaded files.  If the `path_id` of a
            file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be:
            `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.
          type: string
        size:
          description: |
            Size of the file in bytes.
          type: integer
        create_time:
          description: |
            Time when the attachment was uploaded as a UNIX timestamp
            multiplied by 1000 (matching the format of getTime() in JavaScript).

            **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was
            previously a floating point number.
          type: integer
        messages:
          description: |
            Contains basic details on any Zulip messages that have been
            sent referencing this [uploaded file](/api/upload-file).
            This includes messages sent by any user in the Zulip
            organization who sent a message containing a link to the
            uploaded file.
          items:
            $ref: '#/components/schemas/Attachments_messages'
          type: array
      type: object
    BasicStream:
      allOf:
      - $ref: '#/components/schemas/BasicStreamBase'
      - $ref: '#/components/schemas/BasicStream_allOf'
    BasicStreamBase:
      additionalProperties: false
      description: |
        Object containing basic details about the stream.
      properties:
        stream_id:
          description: |
            The unique ID of the stream.
          type: integer
        name:
          description: |
            The name of the stream.
          type: string
        description:
          description: |
            The short description of the stream in text/markdown format,
            intended to be used to prepopulate UI for editing a stream's
            description.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the stream was created, in UTC seconds.

            **Changes**: New in Zulip 4.0 (feature level 30).
          type: integer
        invite_only:
          description: |
            Specifies whether the stream is private or not.
            Only people who have been invited can access a private stream.
          type: boolean
        rendered_description:
          description: |
            The short description of the stream rendered as HTML, intended to
            be used when displaying the stream description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly.  And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.
          type: string
        is_web_public:
          description: |
            Whether the stream has been configured to allow unauthenticated
            access to its message history from the web.
          type: boolean
        stream_post_policy:
          description: |
            Policy for which users can post messages to the stream.

            * 1 => Any user can post.
            * 2 => Only administrators can post.
            * 3 => Only full members can post.
            * 4 => Only moderators can post.

            **Changes**: New in Zulip 3.0, replacing the previous
            `is_announcement_only` boolean.
          type: integer
        message_retention_days:
          description: |
            Number of days that messages sent to this stream will be stored
            before being automatically deleted by the [message retention
            policy](/help/message-retention-policy).  There are two special values:

            * `null`, the default, means the stream will inherit the organization
              level setting.
            * `-1` encodes retaining messages in this stream forever.

            **Changes**: New in Zulip 3.0 (feature level 17).
          nullable: true
          type: integer
        history_public_to_subscribers:
          description: |
            Whether the history of the stream is public to its subscribers.

            Currently always true for public streams (i.e. invite_only=False implies
            history_public_to_subscribers=True), but clients should not make that
            assumption, as we may change that behavior in the future.
          type: boolean
        first_message_id:
          description: |
            The id of the first message in the stream.

            Intended to help clients determine whether they need to display
            UI like the "more topics" widget that would suggest the stream
            has older history that can be accessed.

            Null is used for streams with no message history.
          nullable: true
          type: integer
        is_announcement_only:
          deprecated: true
          description: |
            Whether the given stream is announcement only or not.

            **Changes**: Deprecated in Zulip 3.0 (feature level 1), use
            `stream_post_policy` instead.
          type: boolean
      type: object
    BasicBot:
      allOf:
      - $ref: '#/components/schemas/BasicBotBase'
      - $ref: '#/components/schemas/BasicBot_allOf'
    BasicBotBase:
      properties:
        user_id:
          description: |
            The user id of the bot.
          type: integer
        full_name:
          description: |
            The full name of the bot.
          type: string
        api_key:
          description: |
            The API key of the bot which it uses to make API requests.
          type: string
        default_sending_stream:
          description: |
            The default sending stream of the bot. Null if the bot doesn't
            have a default sending stream.
          nullable: true
          type: string
        default_events_register_stream:
          description: |
            The default stream for which the bot receives events/register data. Null if
            the bot doesn't have such a default stream.
          nullable: true
          type: string
        default_all_public_streams:
          description: |
            Whether the bot can send messages to all streams by default.
          type: boolean
        avatar_url:
          description: |
            The URL of the bot's avatar.
          type: string
        owner_id:
          description: |
            The user id of the bot's owner.

            Null if the bot has no owner.
          nullable: true
          type: integer
        services:
          description: |
            The "Services" array contains extra configuration fields only relevant
            for Outgoing webhook bots and Embedded bots.  It is always a single-element
            array.

            We consider this part of the Zulip API to be unstable; it is used only for
            UI elements for administering bots and is likely to change.
          items:
            description: |
              Object containing details extra details.  Which fields appear depend
              on the type of bot.
            oneOf:
            - additionalProperties: false
              description: |
                When the bot is an outgoing webhook bot.
              properties:
                base_url:
                  description: |
                    The URL the outgoing webhook is configured to post to.
                  type: string
                token:
                  description: |
                    A unique token that the third-party service can use to confirm
                    that the request is indeed coming from Zulip.
                  type: string
                interface:
                  description: |
                    Integer indicating what format requests are posted in:

                    * 1 = Zulip's native outgoing webhook format.
                    * 2 = Emulate the Slack outgoing webhook format.
                  type: integer
              type: object
            - additionalProperties: false
              description: |
                When the bot is an embedded bot.
              properties:
                service_name:
                  description: |
                    The name of the bot.
                  type: string
                config_data:
                  $ref: '#/components/schemas/Config'
              type: object
          type: array
      type: object
    Bot:
      allOf:
      - $ref: '#/components/schemas/BasicBotBase'
      - $ref: '#/components/schemas/Bot_allOf'
    Config:
      additionalProperties:
        description: |
          String describing the config data.
        type: string
      description: |
        A "string: string" dictionary which describes the configuration
        for the embedded bot (usually details like API keys).
      type: object
    CustomProfileField:
      additionalProperties: false
      description: |
        Dictionary containing the details of a custom profile field configured
        for this organization.
      properties:
        id:
          description: |
            The ID of the custom profile field.  This will be referenced in custom
            the profile fields section of user objects.
          type: integer
        type:
          description: |
            An integer indicating the type of the custom profile field, which determines
            how it is configured and displayed to users.

            See the [Add custom profile fields](/help/add-custom-profile-fields)
            article for details on what each type means.

            * **1**: Short text
            * **2**: Long text
            * **3**: List of options
            * **4**: Date picker
            * **5**: Link
            * **6**: Person picker
            * **7**: External account
          type: integer
        order:
          description: |
            Custom profile fields are displayed in both settings UI and
            UI showing users' profiles in increasing `order`.
          type: integer
        name:
          description: |
            The name of the custom profile field.
          type: string
        hint:
          description: |
            The help text to be displayed for the custom profile field in user-facing
            settings UI for configuring custom profile fields.
          type: string
        field_data:
          description: |
            Field types 3 (List of options) and 7 (External account) support storing
            additional configuration for the field type in the `field_data` attribute.

            For field type 3 (List of options), this attribute is a JSON dictionary
            defining the choices and the order they will be displayed in the
            dropdown UI for individual users to select an option.

            The interface for field type 7 is not yet stabilized.
          type: string
      type: object
    Hotspot:
      additionalProperties: false
      description: |
        Dictionary containing details of a single hotspot.
      properties:
        delay:
          description: |
            The delay after which the user should be shown the hotspot.
          type: number
        name:
          description: |
            The name of the hotspot.
          type: string
        title:
          description: |
            The title of the hotspot, as will be displayed to the user.
          type: string
        description:
          description: |
            The description of the hotspot, as will be displayed to the
            user.
          type: string
      type: object
    RealmEmoji:
      additionalProperties: false
      description: |
        `{emoji_id}`: Object containing details about the emoji with
         the specified ID. It has the following properties:
      properties:
        id:
          description: |
            The ID for this emoji, same as the object's key.
          type: string
        name:
          description: |
            The user-friendly name for this emoji. Users in the organization
            can use this emoji by writing this name between colons (`:name  :`).
          type: string
        source_url:
          description: |
            The path relative to the organization's URL where the
            emoji's image can be found.
          type: string
        deactivated:
          description: |
            Whether the emoji has been deactivated or not.
          type: boolean
        author_id:
          description: |
            The user ID of the user who uploaded the custom emoji.
            Will be null if the uploader is unknown.

            **Changes**: New in Zulip 3.0 (feature level 7).  Previously
            was accessible via and `author` object with an `id` field.
          nullable: true
          type: integer
      type: object
    RealmDomain:
      additionalProperties: false
      description: |
        Object containing details of the newly added domain.
      properties:
        domain:
          description: |
            The new allowed domain.
          type: string
        allow_subdomains:
          description: |
            Whether subdomains are allowed for this domain.
          type: boolean
      type: object
    RealmPlayground:
      additionalProperties: false
      description: |
        Object containing details about a realm playground.
      properties:
        id:
          description: |
            The unique ID for the realm playground.
          type: integer
        name:
          description: |
            The user-visible display name of the playground.  Clients
            should display this in UI for picking which playground to
            open a code block in, to differentiate between multiple
            configured playground options for a given pygments
            language.

            **Changes**: New in Zulip 4.0 (feature level 49).
          type: string
        pygments_language:
          description: |
            The name of the Pygments language lexer for that
            programming language.
          type: string
        url_prefix:
          description: |
            The url prefix for the playground.
          type: string
      type: object
    RealmExport:
      additionalProperties: false
      description: |
        Object containing details about a realm export.
      properties:
        id:
          description: |
            The id of the export.
          type: integer
        acting_user_id:
          description: |
            The id of the user who did the export.
          type: integer
        export_time:
          description: |
            The UNIX timestamp of when the export was made.
          type: number
        deleted_timestamp:
          description: |
            The timestamp of when the export was deleted.
            Null if it wasn't.
          nullable: true
          type: number
        failed_timestamp:
          description: |
            The timestamp of when the export failed.
            Null if it didn't.
          nullable: true
          type: number
        export_url:
          description: |
            The URL of the export. `null` if there's no URL.
          nullable: true
          type: string
        pending:
          description: |
            Whether the export is pending or not.
          type: boolean
      type: object
    UserGroup:
      additionalProperties: false
      description: |
        Object containing the user group's attributes.
      properties:
        name:
          description: |
            The name of the user group.
          type: string
        description:
          description: |
            The description of the user group.
          type: string
        members:
          description: |
            Array containing the id of the users who are
            members of this user group.
          items:
            type: integer
          type: array
        id:
          description: |
            The ID of the user group.
          type: integer
      type: object
    Subscriptions:
      additionalProperties: false
      properties:
        stream_id:
          description: |
            The unique ID of a stream.
          type: integer
        name:
          description: |
            The name of a stream.
          type: string
        description:
          description: |
            The short description of a stream in text/markdown format,
            intended to be used to prepopulate UI for editing a stream's
            description.
          type: string
        rendered_description:
          description: |
            A short description of a stream rendered as HTML, intended to
            be used when displaying the stream description in a UI.

            One should use the standard Zulip rendered_markdown CSS when
            displaying this content so that emoji, LaTeX, and other syntax
            work correctly.  And any client-side security logic for
            user-generated message content should be applied when displaying
            this HTML as though it were the body of a Zulip message.
          type: string
        date_created:
          description: |
            The UNIX timestamp for when the stream was created, in UTC seconds.

            **Changes**: New in Zulip 4.0 (feature level 30).
          type: integer
        invite_only:
          description: |
            Specifies whether the stream is private or not.
            Only people who have been invited can access a private stream.
          type: boolean
        subscribers:
          description: |
            A list of user IDs of users who are also subscribed
            to a given stream. Included only if `include_subscribers` is `true`.
          items:
            type: integer
          type: array
        desktop_notifications:
          description: |
            A boolean specifying whether desktop notifications
            are enabled for the given stream.

            A null value means the value of this setting
            should be inherited from the user-level default
            setting, enable_stream_desktop_notifications, for
            this stream.
          nullable: true
          type: boolean
        email_notifications:
          description: |
            A boolean specifying whether email notifications
            are enabled for the given stream.

            A null value means the value of this setting
            should be inherited from the user-level default
            setting, enable_stream_email_notifications, for
            this stream.
          nullable: true
          type: boolean
        wildcard_mentions_notify:
          description: |
            A boolean specifying whether wildcard mentions
            trigger notifications as though they were personal
            mentions in this stream.

            A null value means the value of this setting
            should be inherited from the user-level default
            setting, wildcard_mentions_notify, for
            this stream.
          nullable: true
          type: boolean
        push_notifications:
          description: |
            A boolean specifying whether push notifications
            are enabled for the given stream.

            A null value means the value of this setting
            should be inherited from the user-level default
            setting, enable_stream_push_notifications, for
            this stream.
          nullable: true
          type: boolean
        audible_notifications:
          description: |
            A boolean specifying whether audible notifications
            are enabled for the given stream.

            A null value means the value of this setting
            should be inherited from the user-level default
            setting, enable_stream_audible_notifications, for
            this stream.
          nullable: true
          type: boolean
        pin_to_top:
          description: |
            A boolean specifying whether the given stream has been pinned
            to the top.
          type: boolean
        email_address:
          description: |
            Email address of the given stream, used for
            [sending emails to the stream](/help/message-a-stream-by-email).
          type: string
        is_muted:
          description: |
            Whether the user has muted the stream. Muted streams do
            not count towards your total unread count and do not show up in
            `All messages` view (previously known as `Home` view).

            **Changes**: Prior to Zulip 2.1, this feature was
            represented by the more confusingly named `in_home_view` (with the
            opposite value, `in_home_view=!is_muted`).
          type: boolean
        in_home_view:
          deprecated: true
          description: |
            Legacy property for if the given stream is muted, with inverted meeting.

            **Deprecated**; clients should use is_muted where available.
          type: boolean
        is_announcement_only:
          deprecated: true
          description: |
            Whether only organization administrators can post to the stream.

            **Changes**: Deprecated in Zulip 3.0 (feature level 1), use
            `stream_post_policy` instead.
          type: boolean
        is_web_public:
          description: |
            Whether the stream has been configured to allow unauthenticated
            access to its message history from the web.
          type: boolean
        role:
          description: |
            The user's role within the stream (distinct from the user's
            [organization-level role](/help/roles-and-permissions)).
            Valid values are:

            * 20 => Stream administrator.
            * 50 => Subscriber.

            **Changes**: New in Zulip 4.0 (feature level 31).
          enum:
          - 20
          - 50
          type: integer
        color:
          description: |
            The user's personal color for the stream.
          type: string
        stream_post_policy:
          description: |
            Policy for which users can post messages to the stream.

            * 1 => Any user can post.
            * 2 => Only administrators can post.
            * 3 => Only full members can post.
            * 4 => Only moderators can post.

            **Changes**: New in Zulip 3.0, replacing the previous
            `is_announcement_only` boolean.
          type: integer
        message_retention_days:
          description: |
            Number of days that messages sent to this stream will be stored
            before being automatically deleted by the [message retention
            policy](/help/message-retention-policy).  There are two special values:

            * `null`, the default, means the stream will inherit the organization
              level setting.
            * `-1` encodes retaining messages in this stream forever.

            **Changes**: New in Zulip 3.0 (feature level 17).
          nullable: true
          type: integer
        history_public_to_subscribers:
          description: |
            Whether the history of the stream is public to its subscribers.

            Currently always true for public streams (i.e. invite_only=False implies
            history_public_to_subscribers=True), but clients should not make that
            assumption, as we may change that behavior in the future.
          type: boolean
        first_message_id:
          description: |
            The id of the first message in the stream.

            Intended to help clients determine whether they need to display
            UI like the "more topics" widget that would suggest the stream
            has older history that can be accessed.

            Null is used for streams with no message history.
          nullable: true
          type: integer
        stream_weekly_traffic:
          description: |
            The average number of messages sent to the stream in recent weeks,
            rounded to the nearest integer.

            Null means the stream was recently created and there is
            insufficient data to estimate the average traffic.
          nullable: true
          type: integer
      type: object
    DefaultStreamGroup:
      additionalProperties: false
      description: |
        Dictionary containing details of a default stream
        group.
      properties:
        name:
          description: |
            Name of the default stream group.
          type: string
        description:
          description: |
            Description of the default stream group.
          type: string
        id:
          description: |
            id of the default stream group.
          type: integer
        streams:
          description: |
            Array containing details about the streams
            in the default stream group.
          items:
            $ref: '#/components/schemas/BasicStream'
          type: array
      type: object
    EmojiReaction:
      allOf:
      - $ref: '#/components/schemas/EmojiReactionBase'
      - $ref: '#/components/schemas/EmojiReaction_allOf'
    EmojiBase:
      properties:
        emoji_code:
          description: |
            A unique identifier, defining the specific emoji codepoint requested,
            within the namespace of the `reaction_type`.

            For example, for `unicode_emoji`, this will be an encoding of the
            Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji.
          type: string
        emoji_name:
          description: |
            Name of the emoji.
          type: string
        reaction_type:
          description: |
            One of the following values:

            * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode
              codepoint).
            * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).
              (`emoji_code` will be its ID).
            * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to
              namespace the `zulip` emoji.
          type: string
      type: object
    EmojiReactionBase:
      allOf:
      - $ref: '#/components/schemas/EmojiBase'
      - $ref: '#/components/schemas/EmojiReactionBase_allOf'
    Messages:
      allOf:
      - $ref: '#/components/schemas/MessagesBase'
      - $ref: '#/components/schemas/Messages_allOf'
    MessagesBase:
      description: |
        Object containing details of the message.
      properties:
        avatar_url:
          description: |
            The URL of the user's avatar.  Can be null only if client_gravatar was passed,
            which means that the user has not uploaded an avatar in Zulip, and the
            client should compute the gravatar URL by hashing the
            user's email address itself for this user.
          nullable: true
          type: string
        client:
          description: |
            A Zulip "client" string, describing what Zulip client
            sent the message.
          type: string
        content:
          description: |
            The content/body of the message.
          type: string
        content_type:
          description: |
            The HTTP `content_type` for the message content.  This
            will be `text/html` or `text/x-markdown`, depending on
            whether `apply_markdown` was set.
          type: string
        display_recipient:
          description: |
            Data on the recipient of the message;
            either the name of a stream or a dictionary containing basic data on
            the users who received the message.
          oneOf:
          - type: string
          - items:
              additionalProperties: false
              properties:
                id:
                  description: |
                    ID of the user.
                  type: integer
                email:
                  description: |
                    Email of the user.
                  type: string
                full_name:
                  description: |
                    Full name of the user.
                  type: string
                is_mirror_dummy:
                  description: |
                    Whether the user is a mirror dummy.
                  type: boolean
              type: object
            type: array
        id:
          description: |
            The unique message ID.  Messages should always be
            displayed sorted by ID.
          type: integer
        is_me_message:
          description: |
            Whether the message is a [/me status message][status-messages]

            [status-messages]: /help/format-your-message-using-markdown#status-messages
          type: boolean
        reactions:
          description: |
            Data on any reactions to the message.
          items:
            $ref: '#/components/schemas/EmojiReaction'
          type: array
        recipient_id:
          description: |
            A unique ID for the set of users receiving the
            message (either a stream or group of users).  Useful primarily
            for hashing.
          type: integer
        sender_email:
          description: |
            The Zulip display email address of the message's sender.
          type: string
        sender_full_name:
          description: |
            The full name of the message's sender.
          type: string
        sender_id:
          description: |
            The user ID of the message's sender.
          type: integer
        sender_realm_str:
          description: |
            A string identifier for the realm the sender is in.  Unique only within
            the context of a given Zulip server.

            E.g. on `example.zulip.com`, this will be `example`.
          type: string
        stream_id:
          description: |
            Only present for stream messages; the ID of the stream.
          type: integer
        subject:
          description: |
            The `topic` of the message.  Currently always `""` for private messages,
            though this could change if Zulip adds support for topics in private
            message conversations.

            The field name is a legacy holdover from when topics were
            called "subjects" and will eventually change.
          type: string
        topic_links:
          description: |
            Data on any links to be included in the `topic`
            line (these are generated by [custom linkification
            filters](/help/add-a-custom-linkifier) that match content in the
            message's topic.)

            **Changes**: This field contained a list of urls before
              Zulip 4.0 (feature level 46).

            New in Zulip 3.0 (feature level 1): Previously, this field was called
            `subject_links`; clients are recommended to rename `subject_links` to `topic_links`
            if present for compatibility with older Zulip servers.
          items:
            $ref: '#/components/schemas/MessagesBase_topic_links'
          type: array
        submessages:
          description: |
            Data used for certain experimental Zulip integrations.
          items:
            type: string
          type: array
        timestamp:
          description: |
            The UNIX timestamp for when the message was sent,
            in UTC seconds.
          type: integer
        type:
          description: |
            The type of the message: `stream` or `private`.
          type: string
      type: object
    GetMessages:
      allOf:
      - $ref: '#/components/schemas/MessagesBase'
      - $ref: '#/components/schemas/GetMessages_allOf'
    Presence:
      additionalProperties: false
      description: |
        `{client_name}`: Object containing the details of the user's
        presence on a particular platform with the client's platform
        name being the object key.
      properties:
        client:
          description: |
            The client's platform name.
          type: string
        status:
          description: |
            The status of the user on this client. It is either `idle`
            or `active`.
          enum:
          - idle
          - active
          type: string
        timestamp:
          description: |
            The UNIX timestamp of when this client sent the user's presence
            to the server with the precision of a second.
          type: integer
        pushable:
          description: |
            Whether the client is capable of showing mobile/push notifications
            to the user.
          type: boolean
      type: object
    Draft:
      additionalProperties: false
      description: |
        A dictionary for representing a message draft.
      properties:
        id:
          description: |
            The unique ID of the draft. It will only used whenever the drafts are
            fetched. This field should not be specified when the draft is being
            created or edited.
          type: integer
        type:
          description: |
            The type of the draft. Either unaddressed (empty string), "stream",
            or "private" (for PMs and private group messages).
          enum:
          - ""
          - stream
          - private
          type: string
        to:
          description: |
            An array of the tentative target audience IDs. For "stream"
            messages, this should contain exactly 1 ID, the ID of the
            target stream. For private messages, this should be an array
            of target user IDs. For unaddressed drafts, this is ignored,
            and clients should send an empty array.
          items:
            type: integer
          type: array
        topic:
          description: |
            For stream message drafts, the tentative topic name. For private
            or unaddressed messages, this will be ignored and should ideally
            be the empty string. Should not contain null bytes.
          type: string
        content:
          description: |
            The body of the draft. Should not contain null bytes.
          type: string
        timestamp:
          description: |
            A Unix timestamp (seconds only) representing when the draft was
            last edited. When creating a draft, this key need not be present
            and it will be filled in automatically by the server.
          example: 1595479019
          type: number
      required:
      - content
      - to
      - topic
      - type
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/UserBase'
      - $ref: '#/components/schemas/User_allOf'
    UserBase:
      description: |
        A dictionary containing basic data on a given Zulip user.
      properties:
        email:
          description: |
            The Zulip API email address of the user or bot.

            If you do not have permission to view the email address of the target user,
            this will be a fake email address that is usable for the Zulip API but nothing else.
          type: string
        is_bot:
          description: |
            A boolean specifying whether the user is a bot or full account.
          type: boolean
        avatar_url:
          description: |
            URL for the user's avatar.  Will be `null` if the `client_gravatar`
            query parameter was set to `True` and the user's avatar is hosted by
            the Gravatar provider (i.e. the user has never uploaded an avatar).

            **Changes**: In Zulip 3.0 (feature level 18), if the client has the
            `user_avatar_url_field_optional` capability, this will be missing at
            the server's sole discretion.
          nullable: true
          type: string
        avatar_version:
          description: |
            Version for the user's avatar.  Used for cache-busting requests
            for the user's avatar.  Clients generally shouldn't need to use this;
            most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.
          type: integer
        full_name:
          description: |
            Full name of the user or bot, used for all display purposes.
          type: string
        is_admin:
          description: |
            A boolean specifying whether the user is an organization administrator.
          type: boolean
        is_owner:
          description: |
            A boolean specifying whether the user is an organization owner.
            If true, is_admin will also be true.

            **Changes**: New in Zulip 3.0 (feature level 8).
          type: boolean
        is_billing_admin:
          description: |
            A boolean specifying whether the user is a billing administrator.

            **Changes**: New in Zulip 5.0 (feature level 73).
          type: boolean
        role:
          description: |
            [Organization-level role](/help/roles-and-permissions)) of the user.
            Poosible values are:

            * Organization owner => 100
            * Organization administrator => 200
            * Organization moderator => 300
            * Member => 400
            * Guest => 600

            **Changes**: New in Zulip 4.0 (feature level 59).
          enum:
          - 100
          - 200
          - 300
          - 400
          - 600
          type: integer
        bot_type:
          description: |
            An integer describing the type of bot:
            * `null` if the user isn't a bot.
            * `1` for a `Generic` bot.
            * `2` for an `Incoming webhook` bot.
            * `3` for an `Outgoing webhook` bot.
            * `4` for an `Embedded` bot.
          nullable: true
          type: integer
        user_id:
          description: |
            The unique ID of the user.
          type: integer
        bot_owner_id:
          description: |
            If the user is a bot (i.e. `is_bot` is `True`),
            `bot_owner` is the user ID of the bot's owner (usually, whoever
            created the bot).

            Will be null for legacy bots that do not have an owner.

            **Changes**: New in Zulip 3.0 (feature level
            1).  In previous versions, there was a `bot_owner` field
            containing the email address of the bot's owner.
          nullable: true
          type: integer
        is_active:
          description: |
            A boolean specifying whether the user account has been deactivated.
          type: boolean
        is_guest:
          description: |
            A boolean specifying whether the user is a guest user.
          type: boolean
        timezone:
          description: |
            The time zone of the user.
          type: string
        date_joined:
          description: |
            The time the user account was created.
          type: string
        delivery_email:
          description: |
            The user's real email address.  This field is present only if
            [email address visibility](/help/restrict-visibility-of-email-addresses) is
            limited and you are an administrator with access to real email addresses
            under the configured policy.
          type: string
        profile_data:
          additionalProperties:
            additionalProperties: false
            description: |
              `{id}`: Object with data about what value user filled in the custom
                          profile field with id `id`.
            properties:
              value:
                description: |
                  User's personal value for this custom profile field.
                type: string
              rendered_value:
                description: |
                  The `value` rendered in HTML.  Will only be present for
                  custom profile field types that support Markdown rendering.

                  This user-generated HTML content should be rendered
                  using the same CSS and client-side security protections
                  as are used for message content.
                type: string
            type: object
          description: |
            A dictionary containing custom profile field data for the user. Each entry
            maps the integer ID of a custom profile field in the organization to a
            dictionary containing the user's data for that field.  Generally the data
            includes just a single `value` key; for those custom profile fields
            supporting Markdown, a `rendered_value` key will also be present.
          type: object
      type: object
    profile_data:
      additionalProperties:
        additionalProperties: false
        description: |
          `{id}`: Object with data about what value user filled in the custom
                      profile field with id `id`.
        properties:
          value:
            description: |
              User's personal value for this custom profile field.
            type: string
          rendered_value:
            description: |
              The `value` rendered in HTML.  Will only be present for
              custom profile field types that support Markdown rendering.

              This user-generated HTML content should be rendered
              using the same CSS and client-side security protections
              as are used for message content.
            type: string
        type: object
      description: |
        A dictionary containing custom profile field data for the user. Each entry
        maps the integer ID of a custom profile field in the organization to a
        dictionary containing the user's data for that field.  Generally the data
        includes just a single `value` key; for those custom profile fields
        supporting Markdown, a `rendered_value` key will also be present.
      type: object
    JsonResponseBase:
      properties:
        result:
          type: string
      type: object
    SuccessDescription:
      description: A typical successful JSON response may look like
    JsonSuccess:
      allOf:
      - $ref: '#/components/schemas/JsonSuccessBase'
      - $ref: '#/components/schemas/JsonSuccess_allOf'
    JsonSuccessBase:
      allOf:
      - $ref: '#/components/schemas/JsonResponseBase'
      - $ref: '#/components/schemas/JsonSuccessBase_allOf'
    JsonError:
      allOf:
      - $ref: '#/components/schemas/JsonErrorBase'
      - $ref: '#/components/schemas/JsonSuccess_allOf'
    JsonErrorBase:
      allOf:
      - $ref: '#/components/schemas/JsonResponseBase'
      - $ref: '#/components/schemas/JsonErrorBase_allOf'
    ApiKeyResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccessBase'
      - $ref: '#/components/schemas/ApiKeyResponse_allOf'
    CodedError:
      allOf:
      - $ref: '#/components/schemas/CodedErrorBase'
      - $ref: '#/components/schemas/CodedError_allOf'
    CodedErrorBase:
      allOf:
      - $ref: '#/components/schemas/JsonErrorBase'
      - $ref: '#/components/schemas/CodedErrorBase_allOf'
    BadEventQueueIdError:
      allOf:
      - $ref: '#/components/schemas/CodedErrorBase'
      - $ref: '#/components/schemas/BadEventQueueIdError_allOf'
    InvalidMessageError:
      allOf:
      - $ref: '#/components/schemas/JsonSuccessBase'
      - $ref: '#/components/schemas/InvalidMessageError_allOf'
    NonExistingStreamError:
      allOf:
      - $ref: '#/components/schemas/CodedErrorBase'
      - $ref: '#/components/schemas/NonExistingStreamError_allOf'
    AddSubscriptionsResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccessBase'
      - $ref: '#/components/schemas/AddSubscriptionsResponse_allOf'
    InvalidApiKeyError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - description: |
          ## Invalid API key

          A typical failed JSON response for when the API key is invalid
        example:
          msg: Invalid API key
          result: error
    MissingArgumentError:
      allOf:
      - $ref: '#/components/schemas/CodedErrorBase'
      - $ref: '#/components/schemas/MissingArgumentError_allOf'
    UserNotAuthorizedError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - description: |
          ## User not authorized for query

          A typical failed JSON response for when the user is not authorized for
          a query
        example:
          code: BAD_REQUEST
          msg: User not authorized for this query
          result: error
    UserDeactivatedError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - description: |
          ## User account deactivated

          **Changes**: These errors used the HTTP 403 status code
            before Zulip 5.0 (feature level 76).

          A typical failed json response for when user's account is deactivated
        example:
          code: USER_DEACTIVATED
          msg: Account is deactivated
          result: error
    RateLimitedError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - description: |
          ## Rate limit exceeded

          A typical failed JSON response for when a rate limit is exceeded:
        example:
          code: RATE_LIMIT_HIT
          msg: API usage exceeded rate limit
          result: error
          retry-after: 28.706807374954224
    RealmDeactivatedError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - description: |
          ## Realm deactivated

          **Changes**: These errors used the HTTP 403 status code
            before Zulip 5.0 (feature level 76).

          A typical failed json response for when user's organization is deactivated
        example:
          code: REALM_DEACTIVATED
          msg: This organization is deactivated
          result: error
    inline_object:
      properties:
        filename:
          format: binary
          type: string
      type: object
    inline_object_1:
      properties:
        filename:
          format: binary
          type: string
      type: object
    inline_response_200:
      description: |
        This is an example of the JSON payload that the Zulip server will `POST`
        to your server
      example:
        data: '@**Outgoing webhook test** Zulip is the world’s most productive group
          chat!'
        trigger: mention
        token: xvOzfurIutdRRVLzpXrIIHXJvNfaJLJ0
        message:
          subject: Verona2
          sender_email: iago@zulip.com
          timestamp: 1527876931
          client: website
          submessages: []
          recipient_id: 20
          topic_links: []
          sender_full_name: Iago
          avatar_url: https://secure.gravatar.com/avatar/1f4f1575bf002ae562fea8fc4b861b09?d=identicon&version=1
          rendered_content: <p><span class="user-mention" data-user-id="25">@Outgoing
            webhook test</span> Zulip is the world’s most productive group chat!</p>
          sender_id: 5
          stream_id: 5
          content: '@**Outgoing webhook test** Zulip is the world’s most productive
            group chat!'
          display_recipient: Verona
          type: stream
          id: 112
          is_me_message: false
          reactions: []
          sender_realm_str: zulip
        bot_email: outgoing-bot@localhost
        bot_full_name: Outgoing webhook test
      properties:
        bot_email:
          description: |
            Email of the bot user.
          type: string
        bot_full_name:
          description: |
            The full name of the bot user.
          type: string
        data:
          description: |
            The message content, in raw Markdown format (not rendered to HTML).
          type: string
        trigger:
          description: |
            What aspect of the message triggered the outgoing webhook notification.
            Possible values include `private_message` and `mention`.
          type: string
        token:
          description: |
            A string of alphanumeric characters that can be used to authenticate the
            webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot
            in the `zuliprc` file downloaded when creating the bot.
          type: string
        message:
          allOf:
          - $ref: '#/components/schemas/MessagesBase'
          - additionalProperties: false
            properties:
              avatar_url: {}
              client: {}
              content: {}
              content_type: {}
              display_recipient: {}
              id: {}
              is_me_message: {}
              reactions: {}
              recipient_id: {}
              sender_email: {}
              sender_full_name: {}
              sender_id: {}
              sender_realm_str: {}
              stream_id: {}
              subject: {}
              topic_links: {}
              submessages: {}
              timestamp: {}
              type: {}
              rendered_content:
                description: |
                  The content/body of the message rendered in HTML.
                type: string
            type: object
          description: |
            A dict containing details on the message that triggered the
            outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).
      type: object
    Attachments_messages:
      properties:
        date_sent:
          description: |
            Time when the message was sent as a UNIX timestamp
            multiplied by 1000 (matching the format of getTime() in JavaScript).

            **Changes**: Changed in Zulip 2.2 (feature level 22).  This
            field was previously strangely called `name` and was a floating
            point number.
          type: integer
        id:
          description: |
            The unique message ID.  Messages should always be
            displayed sorted by ID.
          type: integer
      type: object
    BasicStream_allOf:
      properties:
        stream_id: {}
        name: {}
        description: {}
        date_created: {}
        invite_only: {}
        rendered_description: {}
        is_web_public: {}
        stream_post_policy: {}
        message_retention_days: {}
        history_public_to_subscribers: {}
        first_message_id: {}
        is_announcement_only: {}
      type: object
    BasicBot_allOf:
      properties:
        user_id: {}
        full_name: {}
        api_key: {}
        default_sending_stream: {}
        default_events_register_stream: {}
        default_all_public_streams: {}
        avatar_url: {}
        owner_id: {}
        services: {}
      type: object
    Bot_allOf:
      description: |
        Object containing details of a bot.
      properties:
        user_id: {}
        full_name: {}
        api_key: {}
        default_sending_stream: {}
        default_events_register_stream: {}
        default_all_public_streams: {}
        avatar_url: {}
        owner_id: {}
        services: {}
        email:
          description: |
            The email of the bot.
          type: string
        bot_type:
          description: |
            An integer describing the type of bot:
            * `1` for a `Generic` bot.
            * `2` for an `Incoming webhook` bot.
            * `3` for an `Outgoing webhook` bot.
            * `4` for an `Embedded` bot.
          nullable: true
          type: integer
        is_active:
          description: |
            A boolean describing whether the user account has been deactivated.
          type: boolean
      type: object
    EmojiReaction_allOf:
      properties:
        emoji_code: {}
        emoji_name: {}
        reaction_type: {}
        user_id: {}
        user: {}
      type: object
    EmojiReactionBase_allOf_user:
      deprecated: true
      description: |
        Whether the user is a mirror dummy.
        Dictionary with data on the user who added the reaction, including
        the user ID as the `id` field.  **Note**: In the [events
        API](/api/get-events), this `user` dictionary
        confusing had the user ID in a field called `user_id`
        instead.  We recommend ignoring fields other than the user
        ID.  **Deprecated** and to be removed in a future release
        once core clients have migrated to use the `user_id` field.
      properties:
        id:
          description: |
            ID of the user.
          type: integer
        email:
          description: |
            Email of the user.
          type: string
        full_name:
          description: |
            Full name of the user.
          type: string
        is_mirror_dummy:
          description: |
            Whether the user is a mirror dummy.
          type: boolean
      type: object
    EmojiReactionBase_allOf:
      properties:
        user_id:
          description: |
            The ID of the user who added the reaction.

            **Changes**: New in Zulip 3.0 (feature level 2). The `user`
            object is deprecated and will be removed in the future.
          type: integer
        user:
          $ref: '#/components/schemas/EmojiReactionBase_allOf_user'
    Messages_allOf:
      properties:
        avatar_url: {}
        client: {}
        content: {}
        content_type: {}
        display_recipient: {}
        id: {}
        is_me_message: {}
        reactions: {}
        recipient_id: {}
        sender_email: {}
        sender_full_name: {}
        sender_id: {}
        sender_realm_str: {}
        stream_id: {}
        subject: {}
        topic_links: {}
        submessages: {}
        timestamp: {}
        type: {}
      type: object
    MessagesBase_topic_links:
      properties:
        text:
          description: |
            The original link text present in the topic.
          type: string
        url:
          description: |
            The expanded target url which the link points to.
          type: string
      type: object
    GetMessages_allOf:
      properties:
        avatar_url: {}
        client: {}
        content: {}
        content_type: {}
        display_recipient: {}
        id: {}
        is_me_message: {}
        reactions: {}
        recipient_id: {}
        sender_email: {}
        sender_full_name: {}
        sender_id: {}
        sender_realm_str: {}
        stream_id: {}
        subject: {}
        topic_links: {}
        submessages: {}
        timestamp: {}
        type: {}
        flags:
          description: |
            The user's [message flags][message-flags] for the message.

            [message-flags]: /api/update-message-flags#available-flags
          items:
            type: string
          type: array
        last_edit_timestamp:
          description: |
            The UNIX timestamp for when the message was last edited,
            in UTC seconds.
          type: integer
        match_content:
          description: |
            Only present if keyword search was included among the narrow parameters.
            HTML content of a queried message that matches the narrow, with
            `<span class="highlight">` elements wrapping the matches for the
            search keywords.
          type: string
        match_subject:
          description: |
            Only present if keyword search was included among the narrow parameters.
            HTML-escaped topic of a queried message that matches the narrow, with
            `<span class="highlight">` elements wrapping the matches for the
            search keywords.
          type: string
      type: object
    User_allOf:
      properties:
        email: {}
        is_bot: {}
        avatar_url: {}
        avatar_version: {}
        full_name: {}
        is_admin: {}
        is_owner: {}
        is_billing_admin: {}
        role: {}
        bot_type: {}
        user_id: {}
        bot_owner_id: {}
        is_active: {}
        is_guest: {}
        timezone: {}
        date_joined: {}
        delivery_email: {}
        profile_data: {}
      type: object
    JsonSuccess_allOf:
      properties:
        result: {}
        msg: {}
      type: object
    JsonSuccessBase_allOf:
      example:
        msg: ""
        result: success
      properties:
        result:
          enum:
          - success
          type: string
        msg:
          type: string
      required:
      - msg
      - result
    JsonErrorBase_allOf:
      properties:
        result:
          enum:
          - error
          type: string
        msg:
          type: string
      required:
      - msg
      - result
    ApiKeyResponse_allOf:
      example:
        api_key: gjA04ZYcqXKalvYMA8OeXSfzUOLrtbZv
        email: iago@zulip.com
        msg: ""
        result: success
      properties:
        result: {}
        msg: {}
        api_key:
          description: |
            The API key that can be used to authenticate as the requested user.
          type: string
        email:
          description: |
            The email address of the user who owns the API key
          type: string
      required:
      - api_key
      - email
      type: object
    CodedError_allOf:
      properties:
        result: {}
        msg: {}
        code: {}
      type: object
    CodedErrorBase_allOf:
      properties:
        result: {}
        msg: {}
        code:
          description: |
            A string that identifies the error.
          type: string
    BadEventQueueIdError_allOf:
      example:
        code: BAD_EVENT_QUEUE_ID
        msg: 'Bad event queue id: 1518820930:1'
        queue_id: 1518820930:1
        result: error
      properties:
        result: {}
        msg: {}
        code: {}
        queue_id:
          description: |
            The string that identifies the invalid event queue.
          type: string
      type: object
    InvalidMessageError_allOf:
      example:
        msg: Invalid message(s)
        code: BAD_REQUEST
        result: error
      properties:
        result: {}
        msg: {}
        raw_content:
          description: |
            The raw content of the message.
          type: string
      type: object
    NonExistingStreamError_allOf:
      example:
        code: STREAM_DOES_NOT_EXIST
        msg: Stream 'nonexistent_stream' does not exist
        result: error
        stream: nonexistent_stream
      properties:
        result: {}
        msg: {}
        code: {}
        stream:
          description: |
            The name of the stream that could not be found.
          type: string
      type: object
    AddSubscriptionsResponse_allOf:
      properties:
        result: {}
        msg: {}
        subscribed:
          additionalProperties:
            description: |
              `{email_address}`: List of the names of the streams that were subscribed
               to as a result of the query.
            items:
              type: string
            type: array
          description: |
            A dictionary where the key is the email address of the user/bot and the
            value is a list of the names of the streams that were subscribed to as a
            result of the query.
          type: object
        already_subscribed:
          additionalProperties:
            description: |
              `{email_address}`: List of the names of the streams that the user is
              already subscribed to.
            items:
              type: string
            type: array
          description: |
            A dictionary where the key is the email address of the user/bot and the
            value is a list of the names of the streams that the user/bot is already
            subscribed to.
          type: object
        unauthorized:
          description: |
            A list of names of streams that the requesting user/bot was not
            authorized to subscribe to.  Only present if `authorization_errors_fatal=false`.
          items:
            type: string
          type: array
      type: object
    MissingArgumentError_allOf:
      description: |
        ## Missing request parameter(s)

        A typical failed JSON response for when a required request parameter
        is not supplied
      example:
        code: REQUEST_VARIABLE_MISSING
        msg: Missing 'content' argument
        result: error
        var_name: content
      properties:
        result: {}
        msg: {}
        code: {}
        var_name:
          description: |
            It contains the information about the missing parameter.
          type: string
      type: object
  securitySchemes:
    BasicAuth:
      description: |
        Basic authentication, with the user's email as the username, and the API
        key as the password. The API key can be fetched using the
        `/fetch_api_key` or `/dev_fetch_api_key` endpoints.
      scheme: basic
      type: http
