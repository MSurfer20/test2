/**
* Zulip REST API
* Powerful open source group chat 
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models

import org.openapitools.client.models.EmojiReaction
import org.openapitools.client.models.MessagesBaseTopicLinks
import org.openapitools.client.models.OneOfLessThanStringCommaArrayGreaterThan

import com.squareup.moshi.Json

/**
 * Object containing details of the message. 
 * @param avatarUrl The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user. 
 * @param client A Zulip \"client\" string, describing what Zulip client sent the message. 
 * @param content The content/body of the message. 
 * @param contentType The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set. 
 * @param displayRecipient Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message. 
 * @param id The unique message ID.  Messages should always be displayed sorted by ID. 
 * @param isMeMessage Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages 
 * @param reactions Data on any reactions to the message. 
 * @param recipientId A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing. 
 * @param senderEmail The Zulip display email address of the message's sender. 
 * @param senderFullName The full name of the message's sender. 
 * @param senderId The user ID of the message's sender. 
 * @param senderRealmStr A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`. 
 * @param streamId Only present for stream messages; the ID of the stream. 
 * @param subject The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change. 
 * @param topicLinks Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers. 
 * @param submessages Data used for certain experimental Zulip integrations. 
 * @param timestamp The UNIX timestamp for when the message was sent, in UTC seconds. 
 * @param type The type of the message: `stream` or `private`. 
 */

data class MessagesBase (
    /* The URL of the user's avatar.  Can be null only if client_gravatar was passed, which means that the user has not uploaded an avatar in Zulip, and the client should compute the gravatar URL by hashing the user's email address itself for this user.  */
    @Json(name = "avatar_url")
    val avatarUrl: kotlin.String? = null,
    /* A Zulip \"client\" string, describing what Zulip client sent the message.  */
    @Json(name = "client")
    val client: kotlin.String? = null,
    /* The content/body of the message.  */
    @Json(name = "content")
    val content: kotlin.String? = null,
    /* The HTTP `content_type` for the message content.  This will be `text/html` or `text/x-markdown`, depending on whether `apply_markdown` was set.  */
    @Json(name = "content_type")
    val contentType: kotlin.String? = null,
    /* Data on the recipient of the message; either the name of a stream or a dictionary containing basic data on the users who received the message.  */
    @Json(name = "display_recipient")
    val displayRecipient: OneOfLessThanStringCommaArrayGreaterThan? = null,
    /* The unique message ID.  Messages should always be displayed sorted by ID.  */
    @Json(name = "id")
    val id: kotlin.Int? = null,
    /* Whether the message is a [/me status message][status-messages]  [status-messages]: /help/format-your-message-using-markdown#status-messages  */
    @Json(name = "is_me_message")
    val isMeMessage: kotlin.Boolean? = null,
    /* Data on any reactions to the message.  */
    @Json(name = "reactions")
    val reactions: kotlin.collections.List<EmojiReaction>? = null,
    /* A unique ID for the set of users receiving the message (either a stream or group of users).  Useful primarily for hashing.  */
    @Json(name = "recipient_id")
    val recipientId: kotlin.Int? = null,
    /* The Zulip display email address of the message's sender.  */
    @Json(name = "sender_email")
    val senderEmail: kotlin.String? = null,
    /* The full name of the message's sender.  */
    @Json(name = "sender_full_name")
    val senderFullName: kotlin.String? = null,
    /* The user ID of the message's sender.  */
    @Json(name = "sender_id")
    val senderId: kotlin.Int? = null,
    /* A string identifier for the realm the sender is in.  Unique only within the context of a given Zulip server.  E.g. on `example.zulip.com`, this will be `example`.  */
    @Json(name = "sender_realm_str")
    val senderRealmStr: kotlin.String? = null,
    /* Only present for stream messages; the ID of the stream.  */
    @Json(name = "stream_id")
    val streamId: kotlin.Int? = null,
    /* The `topic` of the message.  Currently always `\"\"` for private messages, though this could change if Zulip adds support for topics in private message conversations.  The field name is a legacy holdover from when topics were called \"subjects\" and will eventually change.  */
    @Json(name = "subject")
    val subject: kotlin.String? = null,
    /* Data on any links to be included in the `topic` line (these are generated by [custom linkification filters](/help/add-a-custom-linkifier) that match content in the message's topic.)  **Changes**: This field contained a list of urls before   Zulip 4.0 (feature level 46).  New in Zulip 3.0 (feature level 1): Previously, this field was called `subject_links`; clients are recommended to rename `subject_links` to `topic_links` if present for compatibility with older Zulip servers.  */
    @Json(name = "topic_links")
    val topicLinks: kotlin.collections.List<MessagesBaseTopicLinks>? = null,
    /* Data used for certain experimental Zulip integrations.  */
    @Json(name = "submessages")
    val submessages: kotlin.collections.List<kotlin.String>? = null,
    /* The UNIX timestamp for when the message was sent, in UTC seconds.  */
    @Json(name = "timestamp")
    val timestamp: kotlin.Int? = null,
    /* The type of the message: `stream` or `private`.  */
    @Json(name = "type")
    val type: kotlin.String? = null
)

