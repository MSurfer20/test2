/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDraftsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create drafts
        /// </summary>
        /// <remarks>
        /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <returns>JsonSuccess</returns>
        JsonSuccess CreateDrafts (List<Draft> drafts = default(List<Draft>));

        /// <summary>
        /// Create drafts
        /// </summary>
        /// <remarks>
        /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        ApiResponse<JsonSuccess> CreateDraftsWithHttpInfo (List<Draft> drafts = default(List<Draft>));
        /// <summary>
        /// Delete a draft
        /// </summary>
        /// <remarks>
        /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <returns>JsonSuccess</returns>
        JsonSuccess DeleteDraft (int draftId);

        /// <summary>
        /// Delete a draft
        /// </summary>
        /// <remarks>
        /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        ApiResponse<JsonSuccess> DeleteDraftWithHttpInfo (int draftId);
        /// <summary>
        /// Edit a draft
        /// </summary>
        /// <remarks>
        /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <returns>JsonSuccess</returns>
        JsonSuccess EditDraft (int draftId, Draft draft);

        /// <summary>
        /// Edit a draft
        /// </summary>
        /// <remarks>
        /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        ApiResponse<JsonSuccess> EditDraftWithHttpInfo (int draftId, Draft draft);
        /// <summary>
        /// Get drafts
        /// </summary>
        /// <remarks>
        /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>JsonSuccess</returns>
        JsonSuccess GetDrafts ();

        /// <summary>
        /// Get drafts
        /// </summary>
        /// <remarks>
        /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of JsonSuccess</returns>
        ApiResponse<JsonSuccess> GetDraftsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create drafts
        /// </summary>
        /// <remarks>
        /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        System.Threading.Tasks.Task<JsonSuccess> CreateDraftsAsync (List<Draft> drafts = default(List<Draft>), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create drafts
        /// </summary>
        /// <remarks>
        /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> CreateDraftsWithHttpInfoAsync (List<Draft> drafts = default(List<Draft>), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a draft
        /// </summary>
        /// <remarks>
        /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        System.Threading.Tasks.Task<JsonSuccess> DeleteDraftAsync (int draftId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a draft
        /// </summary>
        /// <remarks>
        /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> DeleteDraftWithHttpInfoAsync (int draftId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Edit a draft
        /// </summary>
        /// <remarks>
        /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        System.Threading.Tasks.Task<JsonSuccess> EditDraftAsync (int draftId, Draft draft, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Edit a draft
        /// </summary>
        /// <remarks>
        /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> EditDraftWithHttpInfoAsync (int draftId, Draft draft, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get drafts
        /// </summary>
        /// <remarks>
        /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        System.Threading.Tasks.Task<JsonSuccess> GetDraftsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get drafts
        /// </summary>
        /// <remarks>
        /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> GetDraftsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DraftsApi : IDraftsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DraftsApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DraftsApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DraftsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DraftsApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create drafts Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <returns>JsonSuccess</returns>
        public JsonSuccess CreateDrafts (List<Draft> drafts = default(List<Draft>))
        {
             ApiResponse<JsonSuccess> localVarResponse = CreateDraftsWithHttpInfo(drafts);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create drafts Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        public ApiResponse<JsonSuccess> CreateDraftsWithHttpInfo (List<Draft> drafts = default(List<Draft>))
        {

            var localVarPath = "/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (drafts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "drafts", drafts)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Create drafts Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        public async System.Threading.Tasks.Task<JsonSuccess> CreateDraftsAsync (List<Draft> drafts = default(List<Draft>), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<JsonSuccess> localVarResponse = await CreateDraftsWithHttpInfoAsync(drafts, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create drafts Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> CreateDraftsWithHttpInfoAsync (List<Draft> drafts = default(List<Draft>), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (drafts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "drafts", drafts)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Delete a draft Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <returns>JsonSuccess</returns>
        public JsonSuccess DeleteDraft (int draftId)
        {
             ApiResponse<JsonSuccess> localVarResponse = DeleteDraftWithHttpInfo(draftId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a draft Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        public ApiResponse<JsonSuccess> DeleteDraftWithHttpInfo (int draftId)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DeleteDraft");

            var localVarPath = "/drafts/{draft_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draft_id", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Delete a draft Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        public async System.Threading.Tasks.Task<JsonSuccess> DeleteDraftAsync (int draftId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<JsonSuccess> localVarResponse = await DeleteDraftWithHttpInfoAsync(draftId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a draft Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft you want to delete. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> DeleteDraftWithHttpInfoAsync (int draftId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->DeleteDraft");

            var localVarPath = "/drafts/{draft_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draft_id", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Edit a draft Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <returns>JsonSuccess</returns>
        public JsonSuccess EditDraft (int draftId, Draft draft)
        {
             ApiResponse<JsonSuccess> localVarResponse = EditDraftWithHttpInfo(draftId, draft);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit a draft Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <returns>ApiResponse of JsonSuccess</returns>
        public ApiResponse<JsonSuccess> EditDraftWithHttpInfo (int draftId, Draft draft)
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->EditDraft");
            // verify the required parameter 'draft' is set
            if (draft == null)
                throw new ApiException(400, "Missing required parameter 'draft' when calling DraftsApi->EditDraft");

            var localVarPath = "/drafts/{draft_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draft_id", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (draft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "draft", draft)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Edit a draft Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        public async System.Threading.Tasks.Task<JsonSuccess> EditDraftAsync (int draftId, Draft draft, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<JsonSuccess> localVarResponse = await EditDraftWithHttpInfoAsync(draftId, draft, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit a draft Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="draftId">The ID of the draft to be edited. </param>
        /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> EditDraftWithHttpInfoAsync (int draftId, Draft draft, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'draftId' is set
            if (draftId == null)
                throw new ApiException(400, "Missing required parameter 'draftId' when calling DraftsApi->EditDraft");
            // verify the required parameter 'draft' is set
            if (draft == null)
                throw new ApiException(400, "Missing required parameter 'draft' when calling DraftsApi->EditDraft");

            var localVarPath = "/drafts/{draft_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (draftId != null) localVarPathParams.Add("draft_id", this.Configuration.ApiClient.ParameterToString(draftId)); // path parameter
            if (draft != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "draft", draft)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDraft", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Get drafts Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>JsonSuccess</returns>
        public JsonSuccess GetDrafts ()
        {
             ApiResponse<JsonSuccess> localVarResponse = GetDraftsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get drafts Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of JsonSuccess</returns>
        public ApiResponse<JsonSuccess> GetDraftsWithHttpInfo ()
        {

            var localVarPath = "/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

        /// <summary>
        /// Get drafts Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of JsonSuccess</returns>
        public async System.Threading.Tasks.Task<JsonSuccess> GetDraftsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<JsonSuccess> localVarResponse = await GetDraftsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get drafts Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (JsonSuccess)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JsonSuccess>> GetDraftsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/drafts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDrafts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JsonSuccess>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (JsonSuccess) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(JsonSuccess)));
        }

    }
}
