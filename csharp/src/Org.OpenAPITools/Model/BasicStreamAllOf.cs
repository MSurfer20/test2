/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BasicStreamAllOf
    /// </summary>
    [DataContract]
    public partial class BasicStreamAllOf :  IEquatable<BasicStreamAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicStreamAllOf" /> class.
        /// </summary>
        /// <param name="streamId">streamId.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="inviteOnly">inviteOnly.</param>
        /// <param name="renderedDescription">renderedDescription.</param>
        /// <param name="isWebPublic">isWebPublic.</param>
        /// <param name="streamPostPolicy">streamPostPolicy.</param>
        /// <param name="messageRetentionDays">messageRetentionDays.</param>
        /// <param name="historyPublicToSubscribers">historyPublicToSubscribers.</param>
        /// <param name="firstMessageId">firstMessageId.</param>
        /// <param name="isAnnouncementOnly">isAnnouncementOnly.</param>
        public BasicStreamAllOf(Object streamId = default(Object), Object name = default(Object), Object description = default(Object), Object dateCreated = default(Object), Object inviteOnly = default(Object), Object renderedDescription = default(Object), Object isWebPublic = default(Object), Object streamPostPolicy = default(Object), Object messageRetentionDays = default(Object), Object historyPublicToSubscribers = default(Object), Object firstMessageId = default(Object), Object isAnnouncementOnly = default(Object))
        {
            this.StreamId = streamId;
            this.Name = name;
            this.Description = description;
            this.DateCreated = dateCreated;
            this.InviteOnly = inviteOnly;
            this.RenderedDescription = renderedDescription;
            this.IsWebPublic = isWebPublic;
            this.StreamPostPolicy = streamPostPolicy;
            this.MessageRetentionDays = messageRetentionDays;
            this.HistoryPublicToSubscribers = historyPublicToSubscribers;
            this.FirstMessageId = firstMessageId;
            this.IsAnnouncementOnly = isAnnouncementOnly;
            this.StreamId = streamId;
            this.Name = name;
            this.Description = description;
            this.DateCreated = dateCreated;
            this.InviteOnly = inviteOnly;
            this.RenderedDescription = renderedDescription;
            this.IsWebPublic = isWebPublic;
            this.StreamPostPolicy = streamPostPolicy;
            this.MessageRetentionDays = messageRetentionDays;
            this.HistoryPublicToSubscribers = historyPublicToSubscribers;
            this.FirstMessageId = firstMessageId;
            this.IsAnnouncementOnly = isAnnouncementOnly;
        }

        /// <summary>
        /// Gets or Sets StreamId
        /// </summary>
        [DataMember(Name="stream_id", EmitDefaultValue=true)]
        public Object StreamId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public Object Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public Object Description { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="date_created", EmitDefaultValue=true)]
        public Object DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets InviteOnly
        /// </summary>
        [DataMember(Name="invite_only", EmitDefaultValue=true)]
        public Object InviteOnly { get; set; }

        /// <summary>
        /// Gets or Sets RenderedDescription
        /// </summary>
        [DataMember(Name="rendered_description", EmitDefaultValue=true)]
        public Object RenderedDescription { get; set; }

        /// <summary>
        /// Gets or Sets IsWebPublic
        /// </summary>
        [DataMember(Name="is_web_public", EmitDefaultValue=true)]
        public Object IsWebPublic { get; set; }

        /// <summary>
        /// Gets or Sets StreamPostPolicy
        /// </summary>
        [DataMember(Name="stream_post_policy", EmitDefaultValue=true)]
        public Object StreamPostPolicy { get; set; }

        /// <summary>
        /// Gets or Sets MessageRetentionDays
        /// </summary>
        [DataMember(Name="message_retention_days", EmitDefaultValue=true)]
        public Object MessageRetentionDays { get; set; }

        /// <summary>
        /// Gets or Sets HistoryPublicToSubscribers
        /// </summary>
        [DataMember(Name="history_public_to_subscribers", EmitDefaultValue=true)]
        public Object HistoryPublicToSubscribers { get; set; }

        /// <summary>
        /// Gets or Sets FirstMessageId
        /// </summary>
        [DataMember(Name="first_message_id", EmitDefaultValue=true)]
        public Object FirstMessageId { get; set; }

        /// <summary>
        /// Gets or Sets IsAnnouncementOnly
        /// </summary>
        [DataMember(Name="is_announcement_only", EmitDefaultValue=true)]
        public Object IsAnnouncementOnly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicStreamAllOf {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  InviteOnly: ").Append(InviteOnly).Append("\n");
            sb.Append("  RenderedDescription: ").Append(RenderedDescription).Append("\n");
            sb.Append("  IsWebPublic: ").Append(IsWebPublic).Append("\n");
            sb.Append("  StreamPostPolicy: ").Append(StreamPostPolicy).Append("\n");
            sb.Append("  MessageRetentionDays: ").Append(MessageRetentionDays).Append("\n");
            sb.Append("  HistoryPublicToSubscribers: ").Append(HistoryPublicToSubscribers).Append("\n");
            sb.Append("  FirstMessageId: ").Append(FirstMessageId).Append("\n");
            sb.Append("  IsAnnouncementOnly: ").Append(IsAnnouncementOnly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicStreamAllOf);
        }

        /// <summary>
        /// Returns true if BasicStreamAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicStreamAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicStreamAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StreamId == input.StreamId ||
                    (this.StreamId != null &&
                    this.StreamId.Equals(input.StreamId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.InviteOnly == input.InviteOnly ||
                    (this.InviteOnly != null &&
                    this.InviteOnly.Equals(input.InviteOnly))
                ) && 
                (
                    this.RenderedDescription == input.RenderedDescription ||
                    (this.RenderedDescription != null &&
                    this.RenderedDescription.Equals(input.RenderedDescription))
                ) && 
                (
                    this.IsWebPublic == input.IsWebPublic ||
                    (this.IsWebPublic != null &&
                    this.IsWebPublic.Equals(input.IsWebPublic))
                ) && 
                (
                    this.StreamPostPolicy == input.StreamPostPolicy ||
                    (this.StreamPostPolicy != null &&
                    this.StreamPostPolicy.Equals(input.StreamPostPolicy))
                ) && 
                (
                    this.MessageRetentionDays == input.MessageRetentionDays ||
                    (this.MessageRetentionDays != null &&
                    this.MessageRetentionDays.Equals(input.MessageRetentionDays))
                ) && 
                (
                    this.HistoryPublicToSubscribers == input.HistoryPublicToSubscribers ||
                    (this.HistoryPublicToSubscribers != null &&
                    this.HistoryPublicToSubscribers.Equals(input.HistoryPublicToSubscribers))
                ) && 
                (
                    this.FirstMessageId == input.FirstMessageId ||
                    (this.FirstMessageId != null &&
                    this.FirstMessageId.Equals(input.FirstMessageId))
                ) && 
                (
                    this.IsAnnouncementOnly == input.IsAnnouncementOnly ||
                    (this.IsAnnouncementOnly != null &&
                    this.IsAnnouncementOnly.Equals(input.IsAnnouncementOnly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StreamId != null)
                    hashCode = hashCode * 59 + this.StreamId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.InviteOnly != null)
                    hashCode = hashCode * 59 + this.InviteOnly.GetHashCode();
                if (this.RenderedDescription != null)
                    hashCode = hashCode * 59 + this.RenderedDescription.GetHashCode();
                if (this.IsWebPublic != null)
                    hashCode = hashCode * 59 + this.IsWebPublic.GetHashCode();
                if (this.StreamPostPolicy != null)
                    hashCode = hashCode * 59 + this.StreamPostPolicy.GetHashCode();
                if (this.MessageRetentionDays != null)
                    hashCode = hashCode * 59 + this.MessageRetentionDays.GetHashCode();
                if (this.HistoryPublicToSubscribers != null)
                    hashCode = hashCode * 59 + this.HistoryPublicToSubscribers.GetHashCode();
                if (this.FirstMessageId != null)
                    hashCode = hashCode * 59 + this.FirstMessageId.GetHashCode();
                if (this.IsAnnouncementOnly != null)
                    hashCode = hashCode * 59 + this.IsAnnouncementOnly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
