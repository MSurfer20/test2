/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A dictionary containing basic data on a given Zulip user. 
    /// </summary>
    [DataContract]
    public partial class UserBase :  IEquatable<UserBase>, IValidatableObject
    {
        /// <summary>
        /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
        /// </summary>
        /// <value>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). </value>
        public enum RoleEnum
        {
            /// <summary>
            /// Enum NUMBER_100 for value: 100
            /// </summary>
            NUMBER_100 = 100,

            /// <summary>
            /// Enum NUMBER_200 for value: 200
            /// </summary>
            NUMBER_200 = 200,

            /// <summary>
            /// Enum NUMBER_300 for value: 300
            /// </summary>
            NUMBER_300 = 300,

            /// <summary>
            /// Enum NUMBER_400 for value: 400
            /// </summary>
            NUMBER_400 = 400,

            /// <summary>
            /// Enum NUMBER_600 for value: 600
            /// </summary>
            NUMBER_600 = 600

        }

        /// <summary>
        /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
        /// </summary>
        /// <value>[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). </value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBase" /> class.
        /// </summary>
        /// <param name="email">The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. .</param>
        /// <param name="isBot">A boolean specifying whether the user is a bot or full account. .</param>
        /// <param name="avatarUrl">URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. .</param>
        /// <param name="avatarVersion">Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. .</param>
        /// <param name="fullName">Full name of the user or bot, used for all display purposes. .</param>
        /// <param name="isAdmin">A boolean specifying whether the user is an organization administrator. .</param>
        /// <param name="isOwner">A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). .</param>
        /// <param name="isBillingAdmin">A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). .</param>
        /// <param name="role">[Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). .</param>
        /// <param name="botType">An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. .</param>
        /// <param name="userId">The unique ID of the user. .</param>
        /// <param name="botOwnerId">If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. .</param>
        /// <param name="isActive">A boolean specifying whether the user account has been deactivated. .</param>
        /// <param name="isGuest">A boolean specifying whether the user is a guest user. .</param>
        /// <param name="timezone">The time zone of the user. .</param>
        /// <param name="dateJoined">The time the user account was created. .</param>
        /// <param name="deliveryEmail">The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. .</param>
        /// <param name="profileData">A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. .</param>
        public UserBase(string email = default(string), bool isBot = default(bool), string avatarUrl = default(string), int avatarVersion = default(int), string fullName = default(string), bool isAdmin = default(bool), bool isOwner = default(bool), bool isBillingAdmin = default(bool), RoleEnum? role = default(RoleEnum?), int? botType = default(int?), int userId = default(int), int? botOwnerId = default(int?), bool isActive = default(bool), bool isGuest = default(bool), string timezone = default(string), string dateJoined = default(string), string deliveryEmail = default(string), Dictionary<string, Object> profileData = default(Dictionary<string, Object>))
        {
            this.AvatarUrl = avatarUrl;
            this.BotType = botType;
            this.BotOwnerId = botOwnerId;
            this.Email = email;
            this.IsBot = isBot;
            this.AvatarUrl = avatarUrl;
            this.AvatarVersion = avatarVersion;
            this.FullName = fullName;
            this.IsAdmin = isAdmin;
            this.IsOwner = isOwner;
            this.IsBillingAdmin = isBillingAdmin;
            this.Role = role;
            this.BotType = botType;
            this.UserId = userId;
            this.BotOwnerId = botOwnerId;
            this.IsActive = isActive;
            this.IsGuest = isGuest;
            this.Timezone = timezone;
            this.DateJoined = dateJoined;
            this.DeliveryEmail = deliveryEmail;
            this.ProfileData = profileData;
        }

        /// <summary>
        /// The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
        /// </summary>
        /// <value>The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. </value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a bot or full account. 
        /// </summary>
        /// <value>A boolean specifying whether the user is a bot or full account. </value>
        [DataMember(Name="is_bot", EmitDefaultValue=false)]
        public bool IsBot { get; set; }

        /// <summary>
        /// URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. 
        /// </summary>
        /// <value>URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. </value>
        [DataMember(Name="avatar_url", EmitDefaultValue=true)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. 
        /// </summary>
        /// <value>Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. </value>
        [DataMember(Name="avatar_version", EmitDefaultValue=false)]
        public int AvatarVersion { get; set; }

        /// <summary>
        /// Full name of the user or bot, used for all display purposes. 
        /// </summary>
        /// <value>Full name of the user or bot, used for all display purposes. </value>
        [DataMember(Name="full_name", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is an organization administrator. 
        /// </summary>
        /// <value>A boolean specifying whether the user is an organization administrator. </value>
        [DataMember(Name="is_admin", EmitDefaultValue=false)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
        /// </summary>
        /// <value>A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). </value>
        [DataMember(Name="is_owner", EmitDefaultValue=false)]
        public bool IsOwner { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
        /// </summary>
        /// <value>A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). </value>
        [DataMember(Name="is_billing_admin", EmitDefaultValue=false)]
        public bool IsBillingAdmin { get; set; }


        /// <summary>
        /// An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
        /// </summary>
        /// <value>An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. </value>
        [DataMember(Name="bot_type", EmitDefaultValue=true)]
        public int? BotType { get; set; }

        /// <summary>
        /// The unique ID of the user. 
        /// </summary>
        /// <value>The unique ID of the user. </value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int UserId { get; set; }

        /// <summary>
        /// If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. 
        /// </summary>
        /// <value>If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. </value>
        [DataMember(Name="bot_owner_id", EmitDefaultValue=true)]
        public int? BotOwnerId { get; set; }

        /// <summary>
        /// A boolean specifying whether the user account has been deactivated. 
        /// </summary>
        /// <value>A boolean specifying whether the user account has been deactivated. </value>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// A boolean specifying whether the user is a guest user. 
        /// </summary>
        /// <value>A boolean specifying whether the user is a guest user. </value>
        [DataMember(Name="is_guest", EmitDefaultValue=false)]
        public bool IsGuest { get; set; }

        /// <summary>
        /// The time zone of the user. 
        /// </summary>
        /// <value>The time zone of the user. </value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// The time the user account was created. 
        /// </summary>
        /// <value>The time the user account was created. </value>
        [DataMember(Name="date_joined", EmitDefaultValue=false)]
        public string DateJoined { get; set; }

        /// <summary>
        /// The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
        /// </summary>
        /// <value>The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. </value>
        [DataMember(Name="delivery_email", EmitDefaultValue=false)]
        public string DeliveryEmail { get; set; }

        /// <summary>
        /// A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. 
        /// </summary>
        /// <value>A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. </value>
        [DataMember(Name="profile_data", EmitDefaultValue=false)]
        public Dictionary<string, Object> ProfileData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserBase {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IsBot: ").Append(IsBot).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  AvatarVersion: ").Append(AvatarVersion).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("  IsBillingAdmin: ").Append(IsBillingAdmin).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  BotType: ").Append(BotType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  BotOwnerId: ").Append(BotOwnerId).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsGuest: ").Append(IsGuest).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  DateJoined: ").Append(DateJoined).Append("\n");
            sb.Append("  DeliveryEmail: ").Append(DeliveryEmail).Append("\n");
            sb.Append("  ProfileData: ").Append(ProfileData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserBase);
        }

        /// <summary>
        /// Returns true if UserBase instances are equal
        /// </summary>
        /// <param name="input">Instance of UserBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserBase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IsBot == input.IsBot ||
                    (this.IsBot != null &&
                    this.IsBot.Equals(input.IsBot))
                ) && 
                (
                    this.AvatarUrl == input.AvatarUrl ||
                    (this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(input.AvatarUrl))
                ) && 
                (
                    this.AvatarVersion == input.AvatarVersion ||
                    (this.AvatarVersion != null &&
                    this.AvatarVersion.Equals(input.AvatarVersion))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.IsAdmin == input.IsAdmin ||
                    (this.IsAdmin != null &&
                    this.IsAdmin.Equals(input.IsAdmin))
                ) && 
                (
                    this.IsOwner == input.IsOwner ||
                    (this.IsOwner != null &&
                    this.IsOwner.Equals(input.IsOwner))
                ) && 
                (
                    this.IsBillingAdmin == input.IsBillingAdmin ||
                    (this.IsBillingAdmin != null &&
                    this.IsBillingAdmin.Equals(input.IsBillingAdmin))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.BotType == input.BotType ||
                    (this.BotType != null &&
                    this.BotType.Equals(input.BotType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.BotOwnerId == input.BotOwnerId ||
                    (this.BotOwnerId != null &&
                    this.BotOwnerId.Equals(input.BotOwnerId))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.IsGuest == input.IsGuest ||
                    (this.IsGuest != null &&
                    this.IsGuest.Equals(input.IsGuest))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.DateJoined == input.DateJoined ||
                    (this.DateJoined != null &&
                    this.DateJoined.Equals(input.DateJoined))
                ) && 
                (
                    this.DeliveryEmail == input.DeliveryEmail ||
                    (this.DeliveryEmail != null &&
                    this.DeliveryEmail.Equals(input.DeliveryEmail))
                ) && 
                (
                    this.ProfileData == input.ProfileData ||
                    this.ProfileData != null &&
                    input.ProfileData != null &&
                    this.ProfileData.SequenceEqual(input.ProfileData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IsBot != null)
                    hashCode = hashCode * 59 + this.IsBot.GetHashCode();
                if (this.AvatarUrl != null)
                    hashCode = hashCode * 59 + this.AvatarUrl.GetHashCode();
                if (this.AvatarVersion != null)
                    hashCode = hashCode * 59 + this.AvatarVersion.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.IsAdmin != null)
                    hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
                if (this.IsOwner != null)
                    hashCode = hashCode * 59 + this.IsOwner.GetHashCode();
                if (this.IsBillingAdmin != null)
                    hashCode = hashCode * 59 + this.IsBillingAdmin.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.BotType != null)
                    hashCode = hashCode * 59 + this.BotType.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.BotOwnerId != null)
                    hashCode = hashCode * 59 + this.BotOwnerId.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.IsGuest != null)
                    hashCode = hashCode * 59 + this.IsGuest.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.DateJoined != null)
                    hashCode = hashCode * 59 + this.DateJoined.GetHashCode();
                if (this.DeliveryEmail != null)
                    hashCode = hashCode * 59 + this.DeliveryEmail.GetHashCode();
                if (this.ProfileData != null)
                    hashCode = hashCode * 59 + this.ProfileData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
