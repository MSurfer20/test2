/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Object containing details about a realm playground. 
    /// </summary>
    [DataContract]
    public partial class RealmPlayground :  IEquatable<RealmPlayground>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RealmPlayground" /> class.
        /// </summary>
        /// <param name="id">The unique ID for the realm playground. .</param>
        /// <param name="name">The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). .</param>
        /// <param name="pygmentsLanguage">The name of the Pygments language lexer for that programming language. .</param>
        /// <param name="urlPrefix">The url prefix for the playground. .</param>
        public RealmPlayground(int id = default(int), string name = default(string), string pygmentsLanguage = default(string), string urlPrefix = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.PygmentsLanguage = pygmentsLanguage;
            this.UrlPrefix = urlPrefix;
        }

        /// <summary>
        /// The unique ID for the realm playground. 
        /// </summary>
        /// <value>The unique ID for the realm playground. </value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int Id { get; set; }

        /// <summary>
        /// The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). 
        /// </summary>
        /// <value>The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). </value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The name of the Pygments language lexer for that programming language. 
        /// </summary>
        /// <value>The name of the Pygments language lexer for that programming language. </value>
        [DataMember(Name="pygments_language", EmitDefaultValue=false)]
        public string PygmentsLanguage { get; set; }

        /// <summary>
        /// The url prefix for the playground. 
        /// </summary>
        /// <value>The url prefix for the playground. </value>
        [DataMember(Name="url_prefix", EmitDefaultValue=false)]
        public string UrlPrefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RealmPlayground {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PygmentsLanguage: ").Append(PygmentsLanguage).Append("\n");
            sb.Append("  UrlPrefix: ").Append(UrlPrefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RealmPlayground);
        }

        /// <summary>
        /// Returns true if RealmPlayground instances are equal
        /// </summary>
        /// <param name="input">Instance of RealmPlayground to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RealmPlayground input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PygmentsLanguage == input.PygmentsLanguage ||
                    (this.PygmentsLanguage != null &&
                    this.PygmentsLanguage.Equals(input.PygmentsLanguage))
                ) && 
                (
                    this.UrlPrefix == input.UrlPrefix ||
                    (this.UrlPrefix != null &&
                    this.UrlPrefix.Equals(input.UrlPrefix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PygmentsLanguage != null)
                    hashCode = hashCode * 59 + this.PygmentsLanguage.GetHashCode();
                if (this.UrlPrefix != null)
                    hashCode = hashCode * 59 + this.UrlPrefix.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
