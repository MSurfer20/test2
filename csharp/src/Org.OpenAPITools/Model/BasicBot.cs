/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BasicBot
    /// </summary>
    [DataContract]
    public partial class BasicBot :  IEquatable<BasicBot>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasicBot" /> class.
        /// </summary>
        /// <param name="userId">userId.</param>
        /// <param name="fullName">fullName.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="defaultSendingStream">defaultSendingStream.</param>
        /// <param name="defaultEventsRegisterStream">defaultEventsRegisterStream.</param>
        /// <param name="defaultAllPublicStreams">defaultAllPublicStreams.</param>
        /// <param name="avatarUrl">avatarUrl.</param>
        /// <param name="ownerId">ownerId.</param>
        /// <param name="services">services.</param>
        public BasicBot(Object userId = default(Object), Object fullName = default(Object), Object apiKey = default(Object), Object defaultSendingStream = default(Object), Object defaultEventsRegisterStream = default(Object), Object defaultAllPublicStreams = default(Object), Object avatarUrl = default(Object), Object ownerId = default(Object), Object services = default(Object))
        {
            this.UserId = userId;
            this.FullName = fullName;
            this.ApiKey = apiKey;
            this.DefaultSendingStream = defaultSendingStream;
            this.DefaultEventsRegisterStream = defaultEventsRegisterStream;
            this.DefaultAllPublicStreams = defaultAllPublicStreams;
            this.AvatarUrl = avatarUrl;
            this.OwnerId = ownerId;
            this.Services = services;
            this.UserId = userId;
            this.FullName = fullName;
            this.ApiKey = apiKey;
            this.DefaultSendingStream = defaultSendingStream;
            this.DefaultEventsRegisterStream = defaultEventsRegisterStream;
            this.DefaultAllPublicStreams = defaultAllPublicStreams;
            this.AvatarUrl = avatarUrl;
            this.OwnerId = ownerId;
            this.Services = services;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=true)]
        public Object UserId { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="full_name", EmitDefaultValue=true)]
        public Object FullName { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="api_key", EmitDefaultValue=true)]
        public Object ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSendingStream
        /// </summary>
        [DataMember(Name="default_sending_stream", EmitDefaultValue=true)]
        public Object DefaultSendingStream { get; set; }

        /// <summary>
        /// Gets or Sets DefaultEventsRegisterStream
        /// </summary>
        [DataMember(Name="default_events_register_stream", EmitDefaultValue=true)]
        public Object DefaultEventsRegisterStream { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAllPublicStreams
        /// </summary>
        [DataMember(Name="default_all_public_streams", EmitDefaultValue=true)]
        public Object DefaultAllPublicStreams { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrl
        /// </summary>
        [DataMember(Name="avatar_url", EmitDefaultValue=true)]
        public Object AvatarUrl { get; set; }

        /// <summary>
        /// Gets or Sets OwnerId
        /// </summary>
        [DataMember(Name="owner_id", EmitDefaultValue=true)]
        public Object OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public Object Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasicBot {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  DefaultSendingStream: ").Append(DefaultSendingStream).Append("\n");
            sb.Append("  DefaultEventsRegisterStream: ").Append(DefaultEventsRegisterStream).Append("\n");
            sb.Append("  DefaultAllPublicStreams: ").Append(DefaultAllPublicStreams).Append("\n");
            sb.Append("  AvatarUrl: ").Append(AvatarUrl).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasicBot);
        }

        /// <summary>
        /// Returns true if BasicBot instances are equal
        /// </summary>
        /// <param name="input">Instance of BasicBot to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasicBot input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.DefaultSendingStream == input.DefaultSendingStream ||
                    (this.DefaultSendingStream != null &&
                    this.DefaultSendingStream.Equals(input.DefaultSendingStream))
                ) && 
                (
                    this.DefaultEventsRegisterStream == input.DefaultEventsRegisterStream ||
                    (this.DefaultEventsRegisterStream != null &&
                    this.DefaultEventsRegisterStream.Equals(input.DefaultEventsRegisterStream))
                ) && 
                (
                    this.DefaultAllPublicStreams == input.DefaultAllPublicStreams ||
                    (this.DefaultAllPublicStreams != null &&
                    this.DefaultAllPublicStreams.Equals(input.DefaultAllPublicStreams))
                ) && 
                (
                    this.AvatarUrl == input.AvatarUrl ||
                    (this.AvatarUrl != null &&
                    this.AvatarUrl.Equals(input.AvatarUrl))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.DefaultSendingStream != null)
                    hashCode = hashCode * 59 + this.DefaultSendingStream.GetHashCode();
                if (this.DefaultEventsRegisterStream != null)
                    hashCode = hashCode * 59 + this.DefaultEventsRegisterStream.GetHashCode();
                if (this.DefaultAllPublicStreams != null)
                    hashCode = hashCode * 59 + this.DefaultAllPublicStreams.GetHashCode();
                if (this.AvatarUrl != null)
                    hashCode = hashCode * 59 + this.AvatarUrl.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
