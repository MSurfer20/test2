/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ServerAndOrganizationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ServerAndOrganizationsApiTests
    {
        private ServerAndOrganizationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ServerAndOrganizationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ServerAndOrganizationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ServerAndOrganizationsApi
            //Assert.IsInstanceOf(typeof(ServerAndOrganizationsApi), instance);
        }

        
        /// <summary>
        /// Test AddCodePlayground
        /// </summary>
        [Test]
        public void AddCodePlaygroundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pygmentsLanguage = null;
            //string urlPrefix = null;
            //var response = instance.AddCodePlayground(name, pygmentsLanguage, urlPrefix);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test AddLinkifier
        /// </summary>
        [Test]
        public void AddLinkifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pattern = null;
            //string urlFormatString = null;
            //var response = instance.AddLinkifier(pattern, urlFormatString);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test CreateCustomProfileField
        /// </summary>
        [Test]
        public void CreateCustomProfileFieldTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int fieldType = null;
            //string name = null;
            //string hint = null;
            //Object fieldData = null;
            //var response = instance.CreateCustomProfileField(fieldType, name, hint, fieldData);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetCustomEmoji
        /// </summary>
        [Test]
        public void GetCustomEmojiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCustomEmoji();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetCustomProfileFields
        /// </summary>
        [Test]
        public void GetCustomProfileFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetCustomProfileFields();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetLinkifiers
        /// </summary>
        [Test]
        public void GetLinkifiersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetLinkifiers();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetServerSettings
        /// </summary>
        [Test]
        public void GetServerSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetServerSettings();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test RemoveCodePlayground
        /// </summary>
        [Test]
        public void RemoveCodePlaygroundTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int playgroundId = null;
            //var response = instance.RemoveCodePlayground(playgroundId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test RemoveLinkifier
        /// </summary>
        [Test]
        public void RemoveLinkifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int filterId = null;
            //var response = instance.RemoveLinkifier(filterId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test ReorderCustomProfileFields
        /// </summary>
        [Test]
        public void ReorderCustomProfileFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> order = null;
            //var response = instance.ReorderCustomProfileFields(order);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UpdateLinkifier
        /// </summary>
        [Test]
        public void UpdateLinkifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int filterId = null;
            //string pattern = null;
            //string urlFormatString = null;
            //var response = instance.UpdateLinkifier(filterId, pattern, urlFormatString);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UploadCustomEmoji
        /// </summary>
        [Test]
        public void UploadCustomEmojiTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string emojiName = null;
            //System.IO.Stream filename = null;
            //var response = instance.UploadCustomEmoji(emojiName, filename);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
    }

}
