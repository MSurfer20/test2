/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UsersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UsersApi
            //Assert.IsInstanceOf(typeof(UsersApi), instance);
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //string password = null;
            //string fullName = null;
            //var response = instance.CreateUser(email, password, fullName);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test CreateUserGroup
        /// </summary>
        [Test]
        public void CreateUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string description = null;
            //List<int> members = null;
            //var response = instance.CreateUserGroup(name, description, members);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test DeactivateOwnUser
        /// </summary>
        [Test]
        public void DeactivateOwnUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeactivateOwnUser();
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test DeactivateUser
        /// </summary>
        [Test]
        public void DeactivateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //var response = instance.DeactivateUser(userId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test GetAttachments
        /// </summary>
        [Test]
        public void GetAttachmentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAttachments();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetOwnUser
        /// </summary>
        [Test]
        public void GetOwnUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOwnUser();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //bool? clientGravatar = null;
            //bool? includeCustomProfileFields = null;
            //var response = instance.GetUser(userId, clientGravatar, includeCustomProfileFields);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetUserByEmail
        /// </summary>
        [Test]
        public void GetUserByEmailTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //bool? clientGravatar = null;
            //bool? includeCustomProfileFields = null;
            //var response = instance.GetUserByEmail(email, clientGravatar, includeCustomProfileFields);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetUserGroups
        /// </summary>
        [Test]
        public void GetUserGroupsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserGroups();
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetUserPresence
        /// </summary>
        [Test]
        public void GetUserPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userIdOrEmail = null;
            //var response = instance.GetUserPresence(userIdOrEmail);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? clientGravatar = null;
            //bool? includeCustomProfileFields = null;
            //var response = instance.GetUsers(clientGravatar, includeCustomProfileFields);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test MuteUser
        /// </summary>
        [Test]
        public void MuteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int mutedUserId = null;
            //var response = instance.MuteUser(mutedUserId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test ReactivateUser
        /// </summary>
        [Test]
        public void ReactivateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //var response = instance.ReactivateUser(userId);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test RemoveUserGroup
        /// </summary>
        [Test]
        public void RemoveUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userGroupId = null;
            //var response = instance.RemoveUserGroup(userGroupId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test SetTypingStatus
        /// </summary>
        [Test]
        public void SetTypingStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string op = null;
            //List<int> to = null;
            //string type = null;
            //string topic = null;
            //var response = instance.SetTypingStatus(op, to, type, topic);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UnmuteUser
        /// </summary>
        [Test]
        public void UnmuteUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int mutedUserId = null;
            //var response = instance.UnmuteUser(mutedUserId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UpdateDisplaySettings
        /// </summary>
        [Test]
        public void UpdateDisplaySettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? twentyFourHourTime = null;
            //bool? denseMode = null;
            //bool? starredMessageCounts = null;
            //bool? fluidLayoutWidth = null;
            //bool? highContrastMode = null;
            //int? colorScheme = null;
            //bool? translateEmoticons = null;
            //string defaultLanguage = null;
            //string defaultView = null;
            //bool? leftSideUserlist = null;
            //string emojiset = null;
            //int? demoteInactiveStreams = null;
            //string timezone = null;
            //var response = instance.UpdateDisplaySettings(twentyFourHourTime, denseMode, starredMessageCounts, fluidLayoutWidth, highContrastMode, colorScheme, translateEmoticons, defaultLanguage, defaultView, leftSideUserlist, emojiset, demoteInactiveStreams, timezone);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test UpdateNotificationSettings
        /// </summary>
        [Test]
        public void UpdateNotificationSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? enableStreamDesktopNotifications = null;
            //bool? enableStreamEmailNotifications = null;
            //bool? enableStreamPushNotifications = null;
            //bool? enableStreamAudibleNotifications = null;
            //string notificationSound = null;
            //bool? enableDesktopNotifications = null;
            //bool? enableSounds = null;
            //bool? enableOfflineEmailNotifications = null;
            //bool? enableOfflinePushNotifications = null;
            //bool? enableOnlinePushNotifications = null;
            //bool? enableDigestEmails = null;
            //bool? enableMarketingEmails = null;
            //bool? enableLoginEmails = null;
            //bool? messageContentInEmailNotifications = null;
            //bool? pmContentInDesktopNotifications = null;
            //bool? wildcardMentionsNotify = null;
            //int? desktopIconCountDisplay = null;
            //bool? realmNameInNotifications = null;
            //bool? presenceEnabled = null;
            //var response = instance.UpdateNotificationSettings(enableStreamDesktopNotifications, enableStreamEmailNotifications, enableStreamPushNotifications, enableStreamAudibleNotifications, notificationSound, enableDesktopNotifications, enableSounds, enableOfflineEmailNotifications, enableOfflinePushNotifications, enableOnlinePushNotifications, enableDigestEmails, enableMarketingEmails, enableLoginEmails, messageContentInEmailNotifications, pmContentInDesktopNotifications, wildcardMentionsNotify, desktopIconCountDisplay, realmNameInNotifications, presenceEnabled);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userId = null;
            //string fullName = null;
            //int? role = null;
            //List<Object> profileData = null;
            //var response = instance.UpdateUser(userId, fullName, role, profileData);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UpdateUserGroup
        /// </summary>
        [Test]
        public void UpdateUserGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userGroupId = null;
            //string name = null;
            //string description = null;
            //var response = instance.UpdateUserGroup(userGroupId, name, description);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UpdateUserGroupMembers
        /// </summary>
        [Test]
        public void UpdateUserGroupMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int userGroupId = null;
            //List<int> delete = null;
            //List<int> add = null;
            //var response = instance.UpdateUserGroupMembers(userGroupId, delete, add);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
    }

}
