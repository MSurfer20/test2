/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing MessagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MessagesApiTests
    {
        private MessagesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MessagesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessagesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MessagesApi
            //Assert.IsInstanceOf(typeof(MessagesApi), instance);
        }

        
        /// <summary>
        /// Test AddReaction
        /// </summary>
        [Test]
        public void AddReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //string emojiName = null;
            //string emojiCode = null;
            //string reactionType = null;
            //var response = instance.AddReaction(messageId, emojiName, emojiCode, reactionType);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test CheckMessagesMatchNarrow
        /// </summary>
        [Test]
        public void CheckMessagesMatchNarrowTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> msgIds = null;
            //List<Object> narrow = null;
            //var response = instance.CheckMessagesMatchNarrow(msgIds, narrow);
            //Assert.IsInstanceOf(typeof(Object), response, "response is Object");
        }
        
        /// <summary>
        /// Test DeleteMessage
        /// </summary>
        [Test]
        public void DeleteMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //var response = instance.DeleteMessage(messageId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test GetFileTemporaryUrl
        /// </summary>
        [Test]
        public void GetFileTemporaryUrlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int realmIdStr = null;
            //string filename = null;
            //var response = instance.GetFileTemporaryUrl(realmIdStr, filename);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetMessageHistory
        /// </summary>
        [Test]
        public void GetMessageHistoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //var response = instance.GetMessageHistory(messageId);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetMessages
        /// </summary>
        [Test]
        public void GetMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int numBefore = null;
            //int numAfter = null;
            //OneOfstringinteger anchor = null;
            //List<Object> narrow = null;
            //bool? clientGravatar = null;
            //bool? applyMarkdown = null;
            //bool? useFirstUnreadAnchor = null;
            //var response = instance.GetMessages(numBefore, numAfter, anchor, narrow, clientGravatar, applyMarkdown, useFirstUnreadAnchor);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test GetRawMessage
        /// </summary>
        [Test]
        public void GetRawMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //var response = instance.GetRawMessage(messageId);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test MarkAllAsRead
        /// </summary>
        [Test]
        public void MarkAllAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.MarkAllAsRead();
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test MarkStreamAsRead
        /// </summary>
        [Test]
        public void MarkStreamAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int streamId = null;
            //var response = instance.MarkStreamAsRead(streamId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test MarkTopicAsRead
        /// </summary>
        [Test]
        public void MarkTopicAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int streamId = null;
            //string topicName = null;
            //var response = instance.MarkTopicAsRead(streamId, topicName);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test RemoveReaction
        /// </summary>
        [Test]
        public void RemoveReactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //string emojiName = null;
            //string emojiCode = null;
            //string reactionType = null;
            //var response = instance.RemoveReaction(messageId, emojiName, emojiCode, reactionType);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test RenderMessage
        /// </summary>
        [Test]
        public void RenderMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string content = null;
            //var response = instance.RenderMessage(content);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //List<int> to = null;
            //string content = null;
            //string topic = null;
            //string queueId = null;
            //string localId = null;
            //var response = instance.SendMessage(type, to, content, topic, queueId, localId);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test UpdateMessage
        /// </summary>
        [Test]
        public void UpdateMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int messageId = null;
            //string topic = null;
            //string propagateMode = null;
            //bool? sendNotificationToOldThread = null;
            //bool? sendNotificationToNewThread = null;
            //string content = null;
            //int? streamId = null;
            //var response = instance.UpdateMessage(messageId, topic, propagateMode, sendNotificationToOldThread, sendNotificationToNewThread, content, streamId);
            //Assert.IsInstanceOf(typeof(JsonSuccess), response, "response is JsonSuccess");
        }
        
        /// <summary>
        /// Test UpdateMessageFlags
        /// </summary>
        [Test]
        public void UpdateMessageFlagsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int> messages = null;
            //string op = null;
            //string flag = null;
            //var response = instance.UpdateMessageFlags(messages, op, flag);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
        /// <summary>
        /// Test UploadFile
        /// </summary>
        [Test]
        public void UploadFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream filename = null;
            //var response = instance.UploadFile(filename);
            //Assert.IsInstanceOf(typeof(JsonSuccessBase), response, "response is JsonSuccessBase");
        }
        
    }

}
