/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmojiBase.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EmojiBase::EmojiBase()
{
    m_Emoji_code = utility::conversions::to_string_t("");
    m_Emoji_codeIsSet = false;
    m_Emoji_name = utility::conversions::to_string_t("");
    m_Emoji_nameIsSet = false;
    m_Reaction_type = utility::conversions::to_string_t("");
    m_Reaction_typeIsSet = false;
}

EmojiBase::~EmojiBase()
{
}

void EmojiBase::validate()
{
    // TODO: implement validation
}

web::json::value EmojiBase::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Emoji_codeIsSet)
    {
        val[utility::conversions::to_string_t("emoji_code")] = ModelBase::toJson(m_Emoji_code);
    }
    if(m_Emoji_nameIsSet)
    {
        val[utility::conversions::to_string_t("emoji_name")] = ModelBase::toJson(m_Emoji_name);
    }
    if(m_Reaction_typeIsSet)
    {
        val[utility::conversions::to_string_t("reaction_type")] = ModelBase::toJson(m_Reaction_type);
    }

    return val;
}

bool EmojiBase::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("emoji_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emoji_code"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emoji_code;
            ok &= ModelBase::fromJson(fieldValue, refVal_emoji_code);
            setEmojiCode(refVal_emoji_code);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emoji_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emoji_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emoji_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_emoji_name);
            setEmojiName(refVal_emoji_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reaction_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reaction_type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_reaction_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_reaction_type);
            setReactionType(refVal_reaction_type);
        }
    }
    return ok;
}

void EmojiBase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Emoji_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emoji_code"), m_Emoji_code));
    }
    if(m_Emoji_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emoji_name"), m_Emoji_name));
    }
    if(m_Reaction_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reaction_type"), m_Reaction_type));
    }
}

bool EmojiBase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("emoji_code")))
    {
        utility::string_t refVal_emoji_code;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emoji_code")), refVal_emoji_code );
        setEmojiCode(refVal_emoji_code);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emoji_name")))
    {
        utility::string_t refVal_emoji_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emoji_name")), refVal_emoji_name );
        setEmojiName(refVal_emoji_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reaction_type")))
    {
        utility::string_t refVal_reaction_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reaction_type")), refVal_reaction_type );
        setReactionType(refVal_reaction_type);
    }
    return ok;
}

utility::string_t EmojiBase::getEmojiCode() const
{
    return m_Emoji_code;
}

void EmojiBase::setEmojiCode(const utility::string_t& value)
{
    m_Emoji_code = value;
    m_Emoji_codeIsSet = true;
}

bool EmojiBase::emojiCodeIsSet() const
{
    return m_Emoji_codeIsSet;
}

void EmojiBase::unsetEmoji_code()
{
    m_Emoji_codeIsSet = false;
}
utility::string_t EmojiBase::getEmojiName() const
{
    return m_Emoji_name;
}

void EmojiBase::setEmojiName(const utility::string_t& value)
{
    m_Emoji_name = value;
    m_Emoji_nameIsSet = true;
}

bool EmojiBase::emojiNameIsSet() const
{
    return m_Emoji_nameIsSet;
}

void EmojiBase::unsetEmoji_name()
{
    m_Emoji_nameIsSet = false;
}
utility::string_t EmojiBase::getReactionType() const
{
    return m_Reaction_type;
}

void EmojiBase::setReactionType(const utility::string_t& value)
{
    m_Reaction_type = value;
    m_Reaction_typeIsSet = true;
}

bool EmojiBase::reactionTypeIsSet() const
{
    return m_Reaction_typeIsSet;
}

void EmojiBase::unsetReaction_type()
{
    m_Reaction_typeIsSet = false;
}
}
}
}
}


