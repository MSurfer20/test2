/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_


#include "../ModelBase.h"

#include "UserBase.h"
#include "User_allOf.h"
#include "AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsBot() const;
    bool isBotIsSet() const;
    void unsetIs_bot();

    void setIsBot(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();

    void setAvatarUrl(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarVersion() const;
    bool avatarVersionIsSet() const;
    void unsetAvatar_version();

    void setAvatarVersion(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getFullName() const;
    bool fullNameIsSet() const;
    void unsetFull_name();

    void setFullName(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsAdmin() const;
    bool isAdminIsSet() const;
    void unsetIs_admin();

    void setIsAdmin(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsOwner() const;
    bool isOwnerIsSet() const;
    void unsetIs_owner();

    void setIsOwner(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsBillingAdmin() const;
    bool isBillingAdminIsSet() const;
    void unsetIs_billing_admin();

    void setIsBillingAdmin(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRole() const;
    bool roleIsSet() const;
    void unsetRole();

    void setRole(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getBotType() const;
    bool botTypeIsSet() const;
    void unsetBot_type();

    void setBotType(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getBotOwnerId() const;
    bool botOwnerIdIsSet() const;
    void unsetBot_owner_id();

    void setBotOwnerId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsGuest() const;
    bool isGuestIsSet() const;
    void unsetIs_guest();

    void setIsGuest(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTimezone() const;
    bool timezoneIsSet() const;
    void unsetTimezone();

    void setTimezone(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDateJoined() const;
    bool dateJoinedIsSet() const;
    void unsetDate_joined();

    void setDateJoined(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDeliveryEmail() const;
    bool deliveryEmailIsSet() const;
    void unsetDelivery_email();

    void setDeliveryEmail(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getProfileData() const;
    bool profileDataIsSet() const;
    void unsetProfile_data();

    void setProfileData(const std::shared_ptr<AnyType>& value);


protected:
    std::shared_ptr<AnyType> m_Email;
    bool m_EmailIsSet;
    std::shared_ptr<AnyType> m_Is_bot;
    bool m_Is_botIsSet;
    std::shared_ptr<AnyType> m_Avatar_url;
    bool m_Avatar_urlIsSet;
    std::shared_ptr<AnyType> m_Avatar_version;
    bool m_Avatar_versionIsSet;
    std::shared_ptr<AnyType> m_Full_name;
    bool m_Full_nameIsSet;
    std::shared_ptr<AnyType> m_Is_admin;
    bool m_Is_adminIsSet;
    std::shared_ptr<AnyType> m_Is_owner;
    bool m_Is_ownerIsSet;
    std::shared_ptr<AnyType> m_Is_billing_admin;
    bool m_Is_billing_adminIsSet;
    std::shared_ptr<AnyType> m_Role;
    bool m_RoleIsSet;
    std::shared_ptr<AnyType> m_Bot_type;
    bool m_Bot_typeIsSet;
    std::shared_ptr<AnyType> m_User_id;
    bool m_User_idIsSet;
    std::shared_ptr<AnyType> m_Bot_owner_id;
    bool m_Bot_owner_idIsSet;
    std::shared_ptr<AnyType> m_Is_active;
    bool m_Is_activeIsSet;
    std::shared_ptr<AnyType> m_Is_guest;
    bool m_Is_guestIsSet;
    std::shared_ptr<AnyType> m_Timezone;
    bool m_TimezoneIsSet;
    std::shared_ptr<AnyType> m_Date_joined;
    bool m_Date_joinedIsSet;
    std::shared_ptr<AnyType> m_Delivery_email;
    bool m_Delivery_emailIsSet;
    std::shared_ptr<AnyType> m_Profile_data;
    bool m_Profile_dataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_ */
