/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CustomProfileField.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




CustomProfileField::CustomProfileField()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
    m_Order = 0;
    m_OrderIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Hint = utility::conversions::to_string_t("");
    m_HintIsSet = false;
    m_Field_data = utility::conversions::to_string_t("");
    m_Field_dataIsSet = false;
}

CustomProfileField::~CustomProfileField()
{
}

void CustomProfileField::validate()
{
    // TODO: implement validation
}

web::json::value CustomProfileField::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_OrderIsSet)
    {
        val[utility::conversions::to_string_t("order")] = ModelBase::toJson(m_Order);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_HintIsSet)
    {
        val[utility::conversions::to_string_t("hint")] = ModelBase::toJson(m_Hint);
    }
    if(m_Field_dataIsSet)
    {
        val[utility::conversions::to_string_t("field_data")] = ModelBase::toJson(m_Field_data);
    }

    return val;
}

bool CustomProfileField::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("order")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("order"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_order;
            ok &= ModelBase::fromJson(fieldValue, refVal_order);
            setOrder(refVal_order);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hint")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hint"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_hint;
            ok &= ModelBase::fromJson(fieldValue, refVal_hint);
            setHint(refVal_hint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("field_data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("field_data"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_field_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_field_data);
            setFieldData(refVal_field_data);
        }
    }
    return ok;
}

void CustomProfileField::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_OrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("order"), m_Order));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_HintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hint"), m_Hint));
    }
    if(m_Field_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("field_data"), m_Field_data));
    }
}

bool CustomProfileField::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        int32_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("order")))
    {
        int32_t refVal_order;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("order")), refVal_order );
        setOrder(refVal_order);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hint")))
    {
        utility::string_t refVal_hint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hint")), refVal_hint );
        setHint(refVal_hint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("field_data")))
    {
        utility::string_t refVal_field_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("field_data")), refVal_field_data );
        setFieldData(refVal_field_data);
    }
    return ok;
}

int32_t CustomProfileField::getId() const
{
    return m_Id;
}

void CustomProfileField::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CustomProfileField::idIsSet() const
{
    return m_IdIsSet;
}

void CustomProfileField::unsetId()
{
    m_IdIsSet = false;
}
int32_t CustomProfileField::getType() const
{
    return m_Type;
}

void CustomProfileField::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool CustomProfileField::typeIsSet() const
{
    return m_TypeIsSet;
}

void CustomProfileField::unsetType()
{
    m_TypeIsSet = false;
}
int32_t CustomProfileField::getOrder() const
{
    return m_Order;
}

void CustomProfileField::setOrder(int32_t value)
{
    m_Order = value;
    m_OrderIsSet = true;
}

bool CustomProfileField::orderIsSet() const
{
    return m_OrderIsSet;
}

void CustomProfileField::unsetOrder()
{
    m_OrderIsSet = false;
}
utility::string_t CustomProfileField::getName() const
{
    return m_Name;
}

void CustomProfileField::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CustomProfileField::nameIsSet() const
{
    return m_NameIsSet;
}

void CustomProfileField::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CustomProfileField::getHint() const
{
    return m_Hint;
}

void CustomProfileField::setHint(const utility::string_t& value)
{
    m_Hint = value;
    m_HintIsSet = true;
}

bool CustomProfileField::hintIsSet() const
{
    return m_HintIsSet;
}

void CustomProfileField::unsetHint()
{
    m_HintIsSet = false;
}
utility::string_t CustomProfileField::getFieldData() const
{
    return m_Field_data;
}

void CustomProfileField::setFieldData(const utility::string_t& value)
{
    m_Field_data = value;
    m_Field_dataIsSet = true;
}

bool CustomProfileField::fieldDataIsSet() const
{
    return m_Field_dataIsSet;
}

void CustomProfileField::unsetField_data()
{
    m_Field_dataIsSet = false;
}
}
}
}
}


