/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Messages_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Messages_allOf::Messages_allOf()
{
    m_Avatar_urlIsSet = false;
    m_ClientIsSet = false;
    m_ContentIsSet = false;
    m_Content_typeIsSet = false;
    m_Display_recipientIsSet = false;
    m_IdIsSet = false;
    m_Is_me_messageIsSet = false;
    m_ReactionsIsSet = false;
    m_Recipient_idIsSet = false;
    m_Sender_emailIsSet = false;
    m_Sender_full_nameIsSet = false;
    m_Sender_idIsSet = false;
    m_Sender_realm_strIsSet = false;
    m_Stream_idIsSet = false;
    m_SubjectIsSet = false;
    m_Topic_linksIsSet = false;
    m_SubmessagesIsSet = false;
    m_TimestampIsSet = false;
    m_TypeIsSet = false;
}

Messages_allOf::~Messages_allOf()
{
}

void Messages_allOf::validate()
{
    // TODO: implement validation
}

web::json::value Messages_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Avatar_urlIsSet)
    {
        val[utility::conversions::to_string_t("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    if(m_ClientIsSet)
    {
        val[utility::conversions::to_string_t("client")] = ModelBase::toJson(m_Client);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }
    if(m_Content_typeIsSet)
    {
        val[utility::conversions::to_string_t("content_type")] = ModelBase::toJson(m_Content_type);
    }
    if(m_Display_recipientIsSet)
    {
        val[utility::conversions::to_string_t("display_recipient")] = ModelBase::toJson(m_Display_recipient);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Is_me_messageIsSet)
    {
        val[utility::conversions::to_string_t("is_me_message")] = ModelBase::toJson(m_Is_me_message);
    }
    if(m_ReactionsIsSet)
    {
        val[utility::conversions::to_string_t("reactions")] = ModelBase::toJson(m_Reactions);
    }
    if(m_Recipient_idIsSet)
    {
        val[utility::conversions::to_string_t("recipient_id")] = ModelBase::toJson(m_Recipient_id);
    }
    if(m_Sender_emailIsSet)
    {
        val[utility::conversions::to_string_t("sender_email")] = ModelBase::toJson(m_Sender_email);
    }
    if(m_Sender_full_nameIsSet)
    {
        val[utility::conversions::to_string_t("sender_full_name")] = ModelBase::toJson(m_Sender_full_name);
    }
    if(m_Sender_idIsSet)
    {
        val[utility::conversions::to_string_t("sender_id")] = ModelBase::toJson(m_Sender_id);
    }
    if(m_Sender_realm_strIsSet)
    {
        val[utility::conversions::to_string_t("sender_realm_str")] = ModelBase::toJson(m_Sender_realm_str);
    }
    if(m_Stream_idIsSet)
    {
        val[utility::conversions::to_string_t("stream_id")] = ModelBase::toJson(m_Stream_id);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_Topic_linksIsSet)
    {
        val[utility::conversions::to_string_t("topic_links")] = ModelBase::toJson(m_Topic_links);
    }
    if(m_SubmessagesIsSet)
    {
        val[utility::conversions::to_string_t("submessages")] = ModelBase::toJson(m_Submessages);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool Messages_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("avatar_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_url"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_avatar_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_url);
            setAvatarUrl(refVal_avatar_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("client")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("client"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_client;
            ok &= ModelBase::fromJson(fieldValue, refVal_client);
            setClient(refVal_client);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("content"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_content;
            ok &= ModelBase::fromJson(fieldValue, refVal_content);
            setContent(refVal_content);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("content_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("content_type"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_content_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_content_type);
            setContentType(refVal_content_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("display_recipient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("display_recipient"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_display_recipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_display_recipient);
            setDisplayRecipient(refVal_display_recipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_me_message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_me_message"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_me_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_me_message);
            setIsMeMessage(refVal_is_me_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reactions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reactions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_reactions;
            ok &= ModelBase::fromJson(fieldValue, refVal_reactions);
            setReactions(refVal_reactions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipient_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recipient_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_recipient_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_recipient_id);
            setRecipientId(refVal_recipient_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender_email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender_email"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_sender_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender_email);
            setSenderEmail(refVal_sender_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender_full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender_full_name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_sender_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender_full_name);
            setSenderFullName(refVal_sender_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_sender_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender_id);
            setSenderId(refVal_sender_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender_realm_str")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender_realm_str"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_sender_realm_str;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender_realm_str);
            setSenderRealmStr(refVal_sender_realm_str);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stream_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_stream_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_id);
            setStreamId(refVal_stream_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topic_links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topic_links"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_topic_links;
            ok &= ModelBase::fromJson(fieldValue, refVal_topic_links);
            setTopicLinks(refVal_topic_links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("submessages")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("submessages"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_submessages;
            ok &= ModelBase::fromJson(fieldValue, refVal_submessages);
            setSubmessages(refVal_submessages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void Messages_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_url"), m_Avatar_url));
    }
    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("client"), m_Client));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
    }
    if(m_Content_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content_type"), m_Content_type));
    }
    if(m_Display_recipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("display_recipient"), m_Display_recipient));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Is_me_messageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_me_message"), m_Is_me_message));
    }
    if(m_ReactionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reactions"), m_Reactions));
    }
    if(m_Recipient_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipient_id"), m_Recipient_id));
    }
    if(m_Sender_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender_email"), m_Sender_email));
    }
    if(m_Sender_full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender_full_name"), m_Sender_full_name));
    }
    if(m_Sender_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender_id"), m_Sender_id));
    }
    if(m_Sender_realm_strIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender_realm_str"), m_Sender_realm_str));
    }
    if(m_Stream_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_id"), m_Stream_id));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_Topic_linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topic_links"), m_Topic_links));
    }
    if(m_SubmessagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("submessages"), m_Submessages));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool Messages_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("avatar_url")))
    {
        std::shared_ptr<AnyType> refVal_avatar_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_url")), refVal_avatar_url );
        setAvatarUrl(refVal_avatar_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("client")))
    {
        std::shared_ptr<AnyType> refVal_client;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("client")), refVal_client );
        setClient(refVal_client);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        std::shared_ptr<AnyType> refVal_content;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("content")), refVal_content );
        setContent(refVal_content);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("content_type")))
    {
        std::shared_ptr<AnyType> refVal_content_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("content_type")), refVal_content_type );
        setContentType(refVal_content_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("display_recipient")))
    {
        std::shared_ptr<AnyType> refVal_display_recipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("display_recipient")), refVal_display_recipient );
        setDisplayRecipient(refVal_display_recipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        std::shared_ptr<AnyType> refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_me_message")))
    {
        std::shared_ptr<AnyType> refVal_is_me_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_me_message")), refVal_is_me_message );
        setIsMeMessage(refVal_is_me_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reactions")))
    {
        std::shared_ptr<AnyType> refVal_reactions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reactions")), refVal_reactions );
        setReactions(refVal_reactions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recipient_id")))
    {
        std::shared_ptr<AnyType> refVal_recipient_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipient_id")), refVal_recipient_id );
        setRecipientId(refVal_recipient_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender_email")))
    {
        std::shared_ptr<AnyType> refVal_sender_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender_email")), refVal_sender_email );
        setSenderEmail(refVal_sender_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender_full_name")))
    {
        std::shared_ptr<AnyType> refVal_sender_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender_full_name")), refVal_sender_full_name );
        setSenderFullName(refVal_sender_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender_id")))
    {
        std::shared_ptr<AnyType> refVal_sender_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender_id")), refVal_sender_id );
        setSenderId(refVal_sender_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender_realm_str")))
    {
        std::shared_ptr<AnyType> refVal_sender_realm_str;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender_realm_str")), refVal_sender_realm_str );
        setSenderRealmStr(refVal_sender_realm_str);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stream_id")))
    {
        std::shared_ptr<AnyType> refVal_stream_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_id")), refVal_stream_id );
        setStreamId(refVal_stream_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        std::shared_ptr<AnyType> refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topic_links")))
    {
        std::shared_ptr<AnyType> refVal_topic_links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topic_links")), refVal_topic_links );
        setTopicLinks(refVal_topic_links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("submessages")))
    {
        std::shared_ptr<AnyType> refVal_submessages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("submessages")), refVal_submessages );
        setSubmessages(refVal_submessages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        std::shared_ptr<AnyType> refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        std::shared_ptr<AnyType> refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::shared_ptr<AnyType> Messages_allOf::getAvatarUrl() const
{
    return m_Avatar_url;
}

void Messages_allOf::setAvatarUrl(const std::shared_ptr<AnyType>& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}

bool Messages_allOf::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}

void Messages_allOf::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getClient() const
{
    return m_Client;
}

void Messages_allOf::setClient(const std::shared_ptr<AnyType>& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}

bool Messages_allOf::clientIsSet() const
{
    return m_ClientIsSet;
}

void Messages_allOf::unsetClient()
{
    m_ClientIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getContent() const
{
    return m_Content;
}

void Messages_allOf::setContent(const std::shared_ptr<AnyType>& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool Messages_allOf::contentIsSet() const
{
    return m_ContentIsSet;
}

void Messages_allOf::unsetContent()
{
    m_ContentIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getContentType() const
{
    return m_Content_type;
}

void Messages_allOf::setContentType(const std::shared_ptr<AnyType>& value)
{
    m_Content_type = value;
    m_Content_typeIsSet = true;
}

bool Messages_allOf::contentTypeIsSet() const
{
    return m_Content_typeIsSet;
}

void Messages_allOf::unsetContent_type()
{
    m_Content_typeIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getDisplayRecipient() const
{
    return m_Display_recipient;
}

void Messages_allOf::setDisplayRecipient(const std::shared_ptr<AnyType>& value)
{
    m_Display_recipient = value;
    m_Display_recipientIsSet = true;
}

bool Messages_allOf::displayRecipientIsSet() const
{
    return m_Display_recipientIsSet;
}

void Messages_allOf::unsetDisplay_recipient()
{
    m_Display_recipientIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getId() const
{
    return m_Id;
}

void Messages_allOf::setId(const std::shared_ptr<AnyType>& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Messages_allOf::idIsSet() const
{
    return m_IdIsSet;
}

void Messages_allOf::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getIsMeMessage() const
{
    return m_Is_me_message;
}

void Messages_allOf::setIsMeMessage(const std::shared_ptr<AnyType>& value)
{
    m_Is_me_message = value;
    m_Is_me_messageIsSet = true;
}

bool Messages_allOf::isMeMessageIsSet() const
{
    return m_Is_me_messageIsSet;
}

void Messages_allOf::unsetIs_me_message()
{
    m_Is_me_messageIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getReactions() const
{
    return m_Reactions;
}

void Messages_allOf::setReactions(const std::shared_ptr<AnyType>& value)
{
    m_Reactions = value;
    m_ReactionsIsSet = true;
}

bool Messages_allOf::reactionsIsSet() const
{
    return m_ReactionsIsSet;
}

void Messages_allOf::unsetReactions()
{
    m_ReactionsIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getRecipientId() const
{
    return m_Recipient_id;
}

void Messages_allOf::setRecipientId(const std::shared_ptr<AnyType>& value)
{
    m_Recipient_id = value;
    m_Recipient_idIsSet = true;
}

bool Messages_allOf::recipientIdIsSet() const
{
    return m_Recipient_idIsSet;
}

void Messages_allOf::unsetRecipient_id()
{
    m_Recipient_idIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSenderEmail() const
{
    return m_Sender_email;
}

void Messages_allOf::setSenderEmail(const std::shared_ptr<AnyType>& value)
{
    m_Sender_email = value;
    m_Sender_emailIsSet = true;
}

bool Messages_allOf::senderEmailIsSet() const
{
    return m_Sender_emailIsSet;
}

void Messages_allOf::unsetSender_email()
{
    m_Sender_emailIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSenderFullName() const
{
    return m_Sender_full_name;
}

void Messages_allOf::setSenderFullName(const std::shared_ptr<AnyType>& value)
{
    m_Sender_full_name = value;
    m_Sender_full_nameIsSet = true;
}

bool Messages_allOf::senderFullNameIsSet() const
{
    return m_Sender_full_nameIsSet;
}

void Messages_allOf::unsetSender_full_name()
{
    m_Sender_full_nameIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSenderId() const
{
    return m_Sender_id;
}

void Messages_allOf::setSenderId(const std::shared_ptr<AnyType>& value)
{
    m_Sender_id = value;
    m_Sender_idIsSet = true;
}

bool Messages_allOf::senderIdIsSet() const
{
    return m_Sender_idIsSet;
}

void Messages_allOf::unsetSender_id()
{
    m_Sender_idIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSenderRealmStr() const
{
    return m_Sender_realm_str;
}

void Messages_allOf::setSenderRealmStr(const std::shared_ptr<AnyType>& value)
{
    m_Sender_realm_str = value;
    m_Sender_realm_strIsSet = true;
}

bool Messages_allOf::senderRealmStrIsSet() const
{
    return m_Sender_realm_strIsSet;
}

void Messages_allOf::unsetSender_realm_str()
{
    m_Sender_realm_strIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getStreamId() const
{
    return m_Stream_id;
}

void Messages_allOf::setStreamId(const std::shared_ptr<AnyType>& value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}

bool Messages_allOf::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}

void Messages_allOf::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSubject() const
{
    return m_Subject;
}

void Messages_allOf::setSubject(const std::shared_ptr<AnyType>& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool Messages_allOf::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void Messages_allOf::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getTopicLinks() const
{
    return m_Topic_links;
}

void Messages_allOf::setTopicLinks(const std::shared_ptr<AnyType>& value)
{
    m_Topic_links = value;
    m_Topic_linksIsSet = true;
}

bool Messages_allOf::topicLinksIsSet() const
{
    return m_Topic_linksIsSet;
}

void Messages_allOf::unsetTopic_links()
{
    m_Topic_linksIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getSubmessages() const
{
    return m_Submessages;
}

void Messages_allOf::setSubmessages(const std::shared_ptr<AnyType>& value)
{
    m_Submessages = value;
    m_SubmessagesIsSet = true;
}

bool Messages_allOf::submessagesIsSet() const
{
    return m_SubmessagesIsSet;
}

void Messages_allOf::unsetSubmessages()
{
    m_SubmessagesIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getTimestamp() const
{
    return m_Timestamp;
}

void Messages_allOf::setTimestamp(const std::shared_ptr<AnyType>& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Messages_allOf::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Messages_allOf::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::shared_ptr<AnyType> Messages_allOf::getType() const
{
    return m_Type;
}

void Messages_allOf::setType(const std::shared_ptr<AnyType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Messages_allOf::typeIsSet() const
{
    return m_TypeIsSet;
}

void Messages_allOf::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


