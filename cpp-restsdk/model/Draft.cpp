/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Draft.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Draft::Draft()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_ToIsSet = false;
    m_Topic = utility::conversions::to_string_t("");
    m_TopicIsSet = false;
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
    m_Timestamp = 0.0;
    m_TimestampIsSet = false;
}

Draft::~Draft()
{
}

void Draft::validate()
{
    // TODO: implement validation
}

web::json::value Draft::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_TopicIsSet)
    {
        val[utility::conversions::to_string_t("topic")] = ModelBase::toJson(m_Topic);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t("content")] = ModelBase::toJson(m_Content);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool Draft::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("topic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("topic"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_topic;
            ok &= ModelBase::fromJson(fieldValue, refVal_topic);
            setTopic(refVal_topic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("content")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("content"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_content;
            ok &= ModelBase::fromJson(fieldValue, refVal_content);
            setContent(refVal_content);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            double refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    return ok;
}

void Draft::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_TopicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("topic"), m_Topic));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("content"), m_Content));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
}

bool Draft::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<int32_t> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("topic")))
    {
        utility::string_t refVal_topic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("topic")), refVal_topic );
        setTopic(refVal_topic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("content")))
    {
        utility::string_t refVal_content;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("content")), refVal_content );
        setContent(refVal_content);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        double refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    return ok;
}

int32_t Draft::getId() const
{
    return m_Id;
}

void Draft::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Draft::idIsSet() const
{
    return m_IdIsSet;
}

void Draft::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Draft::getType() const
{
    return m_Type;
}

void Draft::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Draft::typeIsSet() const
{
    return m_TypeIsSet;
}

void Draft::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<int32_t>& Draft::getTo()
{
    return m_To;
}

void Draft::setTo(std::vector<int32_t> value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool Draft::toIsSet() const
{
    return m_ToIsSet;
}

void Draft::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t Draft::getTopic() const
{
    return m_Topic;
}

void Draft::setTopic(const utility::string_t& value)
{
    m_Topic = value;
    m_TopicIsSet = true;
}

bool Draft::topicIsSet() const
{
    return m_TopicIsSet;
}

void Draft::unsetTopic()
{
    m_TopicIsSet = false;
}
utility::string_t Draft::getContent() const
{
    return m_Content;
}

void Draft::setContent(const utility::string_t& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool Draft::contentIsSet() const
{
    return m_ContentIsSet;
}

void Draft::unsetContent()
{
    m_ContentIsSet = false;
}
double Draft::getTimestamp() const
{
    return m_Timestamp;
}

void Draft::setTimestamp(double value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Draft::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Draft::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


