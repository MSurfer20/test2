/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicStream.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BasicStream::BasicStream()
{
    m_Stream_idIsSet = false;
    m_NameIsSet = false;
    m_DescriptionIsSet = false;
    m_Date_createdIsSet = false;
    m_Invite_onlyIsSet = false;
    m_Rendered_descriptionIsSet = false;
    m_Is_web_publicIsSet = false;
    m_Stream_post_policyIsSet = false;
    m_Message_retention_daysIsSet = false;
    m_History_public_to_subscribersIsSet = false;
    m_First_message_idIsSet = false;
    m_Is_announcement_onlyIsSet = false;
}

BasicStream::~BasicStream()
{
}

void BasicStream::validate()
{
    // TODO: implement validation
}

web::json::value BasicStream::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Stream_idIsSet)
    {
        val[utility::conversions::to_string_t("stream_id")] = ModelBase::toJson(m_Stream_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Date_createdIsSet)
    {
        val[utility::conversions::to_string_t("date_created")] = ModelBase::toJson(m_Date_created);
    }
    if(m_Invite_onlyIsSet)
    {
        val[utility::conversions::to_string_t("invite_only")] = ModelBase::toJson(m_Invite_only);
    }
    if(m_Rendered_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("rendered_description")] = ModelBase::toJson(m_Rendered_description);
    }
    if(m_Is_web_publicIsSet)
    {
        val[utility::conversions::to_string_t("is_web_public")] = ModelBase::toJson(m_Is_web_public);
    }
    if(m_Stream_post_policyIsSet)
    {
        val[utility::conversions::to_string_t("stream_post_policy")] = ModelBase::toJson(m_Stream_post_policy);
    }
    if(m_Message_retention_daysIsSet)
    {
        val[utility::conversions::to_string_t("message_retention_days")] = ModelBase::toJson(m_Message_retention_days);
    }
    if(m_History_public_to_subscribersIsSet)
    {
        val[utility::conversions::to_string_t("history_public_to_subscribers")] = ModelBase::toJson(m_History_public_to_subscribers);
    }
    if(m_First_message_idIsSet)
    {
        val[utility::conversions::to_string_t("first_message_id")] = ModelBase::toJson(m_First_message_id);
    }
    if(m_Is_announcement_onlyIsSet)
    {
        val[utility::conversions::to_string_t("is_announcement_only")] = ModelBase::toJson(m_Is_announcement_only);
    }

    return val;
}

bool BasicStream::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("stream_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_stream_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_id);
            setStreamId(refVal_stream_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_created"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_date_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_created);
            setDateCreated(refVal_date_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invite_only")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invite_only"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_invite_only;
            ok &= ModelBase::fromJson(fieldValue, refVal_invite_only);
            setInviteOnly(refVal_invite_only);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rendered_description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rendered_description"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_rendered_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_rendered_description);
            setRenderedDescription(refVal_rendered_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_web_public")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_web_public"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_web_public;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_web_public);
            setIsWebPublic(refVal_is_web_public);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stream_post_policy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_post_policy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_stream_post_policy;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_post_policy);
            setStreamPostPolicy(refVal_stream_post_policy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message_retention_days")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message_retention_days"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_message_retention_days;
            ok &= ModelBase::fromJson(fieldValue, refVal_message_retention_days);
            setMessageRetentionDays(refVal_message_retention_days);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("history_public_to_subscribers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("history_public_to_subscribers"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_history_public_to_subscribers;
            ok &= ModelBase::fromJson(fieldValue, refVal_history_public_to_subscribers);
            setHistoryPublicToSubscribers(refVal_history_public_to_subscribers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("first_message_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("first_message_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_first_message_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_first_message_id);
            setFirstMessageId(refVal_first_message_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_announcement_only")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_announcement_only"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_announcement_only;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_announcement_only);
            setIsAnnouncementOnly(refVal_is_announcement_only);
        }
    }
    return ok;
}

void BasicStream::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Stream_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_id"), m_Stream_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_Date_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_created"), m_Date_created));
    }
    if(m_Invite_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invite_only"), m_Invite_only));
    }
    if(m_Rendered_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rendered_description"), m_Rendered_description));
    }
    if(m_Is_web_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_web_public"), m_Is_web_public));
    }
    if(m_Stream_post_policyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_post_policy"), m_Stream_post_policy));
    }
    if(m_Message_retention_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message_retention_days"), m_Message_retention_days));
    }
    if(m_History_public_to_subscribersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("history_public_to_subscribers"), m_History_public_to_subscribers));
    }
    if(m_First_message_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("first_message_id"), m_First_message_id));
    }
    if(m_Is_announcement_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_announcement_only"), m_Is_announcement_only));
    }
}

bool BasicStream::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("stream_id")))
    {
        std::shared_ptr<AnyType> refVal_stream_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_id")), refVal_stream_id );
        setStreamId(refVal_stream_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        std::shared_ptr<AnyType> refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        std::shared_ptr<AnyType> refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_created")))
    {
        std::shared_ptr<AnyType> refVal_date_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_created")), refVal_date_created );
        setDateCreated(refVal_date_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invite_only")))
    {
        std::shared_ptr<AnyType> refVal_invite_only;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invite_only")), refVal_invite_only );
        setInviteOnly(refVal_invite_only);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rendered_description")))
    {
        std::shared_ptr<AnyType> refVal_rendered_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rendered_description")), refVal_rendered_description );
        setRenderedDescription(refVal_rendered_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_web_public")))
    {
        std::shared_ptr<AnyType> refVal_is_web_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_web_public")), refVal_is_web_public );
        setIsWebPublic(refVal_is_web_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stream_post_policy")))
    {
        std::shared_ptr<AnyType> refVal_stream_post_policy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_post_policy")), refVal_stream_post_policy );
        setStreamPostPolicy(refVal_stream_post_policy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message_retention_days")))
    {
        std::shared_ptr<AnyType> refVal_message_retention_days;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message_retention_days")), refVal_message_retention_days );
        setMessageRetentionDays(refVal_message_retention_days);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("history_public_to_subscribers")))
    {
        std::shared_ptr<AnyType> refVal_history_public_to_subscribers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("history_public_to_subscribers")), refVal_history_public_to_subscribers );
        setHistoryPublicToSubscribers(refVal_history_public_to_subscribers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("first_message_id")))
    {
        std::shared_ptr<AnyType> refVal_first_message_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("first_message_id")), refVal_first_message_id );
        setFirstMessageId(refVal_first_message_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_announcement_only")))
    {
        std::shared_ptr<AnyType> refVal_is_announcement_only;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_announcement_only")), refVal_is_announcement_only );
        setIsAnnouncementOnly(refVal_is_announcement_only);
    }
    return ok;
}

std::shared_ptr<AnyType> BasicStream::getStreamId() const
{
    return m_Stream_id;
}

void BasicStream::setStreamId(const std::shared_ptr<AnyType>& value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}

bool BasicStream::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}

void BasicStream::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getName() const
{
    return m_Name;
}

void BasicStream::setName(const std::shared_ptr<AnyType>& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool BasicStream::nameIsSet() const
{
    return m_NameIsSet;
}

void BasicStream::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getDescription() const
{
    return m_Description;
}

void BasicStream::setDescription(const std::shared_ptr<AnyType>& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool BasicStream::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void BasicStream::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getDateCreated() const
{
    return m_Date_created;
}

void BasicStream::setDateCreated(const std::shared_ptr<AnyType>& value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}

bool BasicStream::dateCreatedIsSet() const
{
    return m_Date_createdIsSet;
}

void BasicStream::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getInviteOnly() const
{
    return m_Invite_only;
}

void BasicStream::setInviteOnly(const std::shared_ptr<AnyType>& value)
{
    m_Invite_only = value;
    m_Invite_onlyIsSet = true;
}

bool BasicStream::inviteOnlyIsSet() const
{
    return m_Invite_onlyIsSet;
}

void BasicStream::unsetInvite_only()
{
    m_Invite_onlyIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getRenderedDescription() const
{
    return m_Rendered_description;
}

void BasicStream::setRenderedDescription(const std::shared_ptr<AnyType>& value)
{
    m_Rendered_description = value;
    m_Rendered_descriptionIsSet = true;
}

bool BasicStream::renderedDescriptionIsSet() const
{
    return m_Rendered_descriptionIsSet;
}

void BasicStream::unsetRendered_description()
{
    m_Rendered_descriptionIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getIsWebPublic() const
{
    return m_Is_web_public;
}

void BasicStream::setIsWebPublic(const std::shared_ptr<AnyType>& value)
{
    m_Is_web_public = value;
    m_Is_web_publicIsSet = true;
}

bool BasicStream::isWebPublicIsSet() const
{
    return m_Is_web_publicIsSet;
}

void BasicStream::unsetIs_web_public()
{
    m_Is_web_publicIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}

void BasicStream::setStreamPostPolicy(const std::shared_ptr<AnyType>& value)
{
    m_Stream_post_policy = value;
    m_Stream_post_policyIsSet = true;
}

bool BasicStream::streamPostPolicyIsSet() const
{
    return m_Stream_post_policyIsSet;
}

void BasicStream::unsetStream_post_policy()
{
    m_Stream_post_policyIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}

void BasicStream::setMessageRetentionDays(const std::shared_ptr<AnyType>& value)
{
    m_Message_retention_days = value;
    m_Message_retention_daysIsSet = true;
}

bool BasicStream::messageRetentionDaysIsSet() const
{
    return m_Message_retention_daysIsSet;
}

void BasicStream::unsetMessage_retention_days()
{
    m_Message_retention_daysIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}

void BasicStream::setHistoryPublicToSubscribers(const std::shared_ptr<AnyType>& value)
{
    m_History_public_to_subscribers = value;
    m_History_public_to_subscribersIsSet = true;
}

bool BasicStream::historyPublicToSubscribersIsSet() const
{
    return m_History_public_to_subscribersIsSet;
}

void BasicStream::unsetHistory_public_to_subscribers()
{
    m_History_public_to_subscribersIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getFirstMessageId() const
{
    return m_First_message_id;
}

void BasicStream::setFirstMessageId(const std::shared_ptr<AnyType>& value)
{
    m_First_message_id = value;
    m_First_message_idIsSet = true;
}

bool BasicStream::firstMessageIdIsSet() const
{
    return m_First_message_idIsSet;
}

void BasicStream::unsetFirst_message_id()
{
    m_First_message_idIsSet = false;
}
std::shared_ptr<AnyType> BasicStream::getIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}

void BasicStream::setIsAnnouncementOnly(const std::shared_ptr<AnyType>& value)
{
    m_Is_announcement_only = value;
    m_Is_announcement_onlyIsSet = true;
}

bool BasicStream::isAnnouncementOnlyIsSet() const
{
    return m_Is_announcement_onlyIsSet;
}

void BasicStream::unsetIs_announcement_only()
{
    m_Is_announcement_onlyIsSet = false;
}
}
}
}
}


