/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RealmExport.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RealmExport::RealmExport()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Acting_user_id = 0;
    m_Acting_user_idIsSet = false;
    m_Export_time = 0.0;
    m_Export_timeIsSet = false;
    m_Deleted_timestamp = 0.0;
    m_Deleted_timestampIsSet = false;
    m_Failed_timestamp = 0.0;
    m_Failed_timestampIsSet = false;
    m_Export_url = utility::conversions::to_string_t("");
    m_Export_urlIsSet = false;
    m_Pending = false;
    m_PendingIsSet = false;
}

RealmExport::~RealmExport()
{
}

void RealmExport::validate()
{
    // TODO: implement validation
}

web::json::value RealmExport::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Acting_user_idIsSet)
    {
        val[utility::conversions::to_string_t("acting_user_id")] = ModelBase::toJson(m_Acting_user_id);
    }
    if(m_Export_timeIsSet)
    {
        val[utility::conversions::to_string_t("export_time")] = ModelBase::toJson(m_Export_time);
    }
    if(m_Deleted_timestampIsSet)
    {
        val[utility::conversions::to_string_t("deleted_timestamp")] = ModelBase::toJson(m_Deleted_timestamp);
    }
    if(m_Failed_timestampIsSet)
    {
        val[utility::conversions::to_string_t("failed_timestamp")] = ModelBase::toJson(m_Failed_timestamp);
    }
    if(m_Export_urlIsSet)
    {
        val[utility::conversions::to_string_t("export_url")] = ModelBase::toJson(m_Export_url);
    }
    if(m_PendingIsSet)
    {
        val[utility::conversions::to_string_t("pending")] = ModelBase::toJson(m_Pending);
    }

    return val;
}

bool RealmExport::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("acting_user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("acting_user_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_acting_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_acting_user_id);
            setActingUserId(refVal_acting_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("export_time")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("export_time"));
        if(!fieldValue.is_null())
        {
            double refVal_export_time;
            ok &= ModelBase::fromJson(fieldValue, refVal_export_time);
            setExportTime(refVal_export_time);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deleted_timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deleted_timestamp"));
        if(!fieldValue.is_null())
        {
            double refVal_deleted_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_deleted_timestamp);
            setDeletedTimestamp(refVal_deleted_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("failed_timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("failed_timestamp"));
        if(!fieldValue.is_null())
        {
            double refVal_failed_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_failed_timestamp);
            setFailedTimestamp(refVal_failed_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("export_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("export_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_export_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_export_url);
            setExportUrl(refVal_export_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pending")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pending"));
        if(!fieldValue.is_null())
        {
            bool refVal_pending;
            ok &= ModelBase::fromJson(fieldValue, refVal_pending);
            setPending(refVal_pending);
        }
    }
    return ok;
}

void RealmExport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_Acting_user_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("acting_user_id"), m_Acting_user_id));
    }
    if(m_Export_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("export_time"), m_Export_time));
    }
    if(m_Deleted_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deleted_timestamp"), m_Deleted_timestamp));
    }
    if(m_Failed_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("failed_timestamp"), m_Failed_timestamp));
    }
    if(m_Export_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("export_url"), m_Export_url));
    }
    if(m_PendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pending"), m_Pending));
    }
}

bool RealmExport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("acting_user_id")))
    {
        int32_t refVal_acting_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("acting_user_id")), refVal_acting_user_id );
        setActingUserId(refVal_acting_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("export_time")))
    {
        double refVal_export_time;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("export_time")), refVal_export_time );
        setExportTime(refVal_export_time);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deleted_timestamp")))
    {
        double refVal_deleted_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deleted_timestamp")), refVal_deleted_timestamp );
        setDeletedTimestamp(refVal_deleted_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("failed_timestamp")))
    {
        double refVal_failed_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("failed_timestamp")), refVal_failed_timestamp );
        setFailedTimestamp(refVal_failed_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("export_url")))
    {
        utility::string_t refVal_export_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("export_url")), refVal_export_url );
        setExportUrl(refVal_export_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pending")))
    {
        bool refVal_pending;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pending")), refVal_pending );
        setPending(refVal_pending);
    }
    return ok;
}

int32_t RealmExport::getId() const
{
    return m_Id;
}

void RealmExport::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RealmExport::idIsSet() const
{
    return m_IdIsSet;
}

void RealmExport::unsetId()
{
    m_IdIsSet = false;
}
int32_t RealmExport::getActingUserId() const
{
    return m_Acting_user_id;
}

void RealmExport::setActingUserId(int32_t value)
{
    m_Acting_user_id = value;
    m_Acting_user_idIsSet = true;
}

bool RealmExport::actingUserIdIsSet() const
{
    return m_Acting_user_idIsSet;
}

void RealmExport::unsetActing_user_id()
{
    m_Acting_user_idIsSet = false;
}
double RealmExport::getExportTime() const
{
    return m_Export_time;
}

void RealmExport::setExportTime(double value)
{
    m_Export_time = value;
    m_Export_timeIsSet = true;
}

bool RealmExport::exportTimeIsSet() const
{
    return m_Export_timeIsSet;
}

void RealmExport::unsetExport_time()
{
    m_Export_timeIsSet = false;
}
double RealmExport::getDeletedTimestamp() const
{
    return m_Deleted_timestamp;
}

void RealmExport::setDeletedTimestamp(double value)
{
    m_Deleted_timestamp = value;
    m_Deleted_timestampIsSet = true;
}

bool RealmExport::deletedTimestampIsSet() const
{
    return m_Deleted_timestampIsSet;
}

void RealmExport::unsetDeleted_timestamp()
{
    m_Deleted_timestampIsSet = false;
}
double RealmExport::getFailedTimestamp() const
{
    return m_Failed_timestamp;
}

void RealmExport::setFailedTimestamp(double value)
{
    m_Failed_timestamp = value;
    m_Failed_timestampIsSet = true;
}

bool RealmExport::failedTimestampIsSet() const
{
    return m_Failed_timestampIsSet;
}

void RealmExport::unsetFailed_timestamp()
{
    m_Failed_timestampIsSet = false;
}
utility::string_t RealmExport::getExportUrl() const
{
    return m_Export_url;
}

void RealmExport::setExportUrl(const utility::string_t& value)
{
    m_Export_url = value;
    m_Export_urlIsSet = true;
}

bool RealmExport::exportUrlIsSet() const
{
    return m_Export_urlIsSet;
}

void RealmExport::unsetExport_url()
{
    m_Export_urlIsSet = false;
}
bool RealmExport::isPending() const
{
    return m_Pending;
}

void RealmExport::setPending(bool value)
{
    m_Pending = value;
    m_PendingIsSet = true;
}

bool RealmExport::pendingIsSet() const
{
    return m_PendingIsSet;
}

void RealmExport::unsetPending()
{
    m_PendingIsSet = false;
}
}
}
}
}


