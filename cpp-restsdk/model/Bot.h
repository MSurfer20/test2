/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Bot.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Bot_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Bot_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Bot_allOf.h"
#include "AnyType.h"
#include "BasicBotBase.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Bot
    : public ModelBase
{
public:
    Bot();
    virtual ~Bot();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Bot members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getFullName() const;
    bool fullNameIsSet() const;
    void unsetFull_name();

    void setFullName(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getApiKey() const;
    bool apiKeyIsSet() const;
    void unsetApi_key();

    void setApiKey(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultSendingStream() const;
    bool defaultSendingStreamIsSet() const;
    void unsetDefault_sending_stream();

    void setDefaultSendingStream(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultEventsRegisterStream() const;
    bool defaultEventsRegisterStreamIsSet() const;
    void unsetDefault_events_register_stream();

    void setDefaultEventsRegisterStream(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDefaultAllPublicStreams() const;
    bool defaultAllPublicStreamsIsSet() const;
    void unsetDefault_all_public_streams();

    void setDefaultAllPublicStreams(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();

    void setAvatarUrl(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwner_id();

    void setOwnerId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getServices() const;
    bool servicesIsSet() const;
    void unsetServices();

    void setServices(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// The email of the bot. 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// An integer describing the type of bot: * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
    /// </summary>
    int32_t getBotType() const;
    bool botTypeIsSet() const;
    void unsetBot_type();

    void setBotType(int32_t value);

    /// <summary>
    /// A boolean describing whether the user account has been deactivated. 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);


protected:
    std::shared_ptr<AnyType> m_User_id;
    bool m_User_idIsSet;
    std::shared_ptr<AnyType> m_Full_name;
    bool m_Full_nameIsSet;
    std::shared_ptr<AnyType> m_Api_key;
    bool m_Api_keyIsSet;
    std::shared_ptr<AnyType> m_Default_sending_stream;
    bool m_Default_sending_streamIsSet;
    std::shared_ptr<AnyType> m_Default_events_register_stream;
    bool m_Default_events_register_streamIsSet;
    std::shared_ptr<AnyType> m_Default_all_public_streams;
    bool m_Default_all_public_streamsIsSet;
    std::shared_ptr<AnyType> m_Avatar_url;
    bool m_Avatar_urlIsSet;
    std::shared_ptr<AnyType> m_Owner_id;
    bool m_Owner_idIsSet;
    std::shared_ptr<AnyType> m_Services;
    bool m_ServicesIsSet;
    utility::string_t m_Email;
    bool m_EmailIsSet;
    int32_t m_Bot_type;
    bool m_Bot_typeIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Bot_H_ */
