/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Presence.h
 *
 * &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Presence_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Presence_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// &#x60;{client_name}&#x60;: Object containing the details of the user&#39;s presence on a particular platform with the client&#39;s platform name being the object key. 
/// </summary>
class  Presence
    : public ModelBase
{
public:
    Presence();
    virtual ~Presence();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Presence members

    /// <summary>
    /// The client&#39;s platform name. 
    /// </summary>
    utility::string_t getClient() const;
    bool clientIsSet() const;
    void unsetClient();

    void setClient(const utility::string_t& value);

    /// <summary>
    /// The status of the user on this client. It is either &#x60;idle&#x60; or &#x60;active&#x60;. 
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const utility::string_t& value);

    /// <summary>
    /// The UNIX timestamp of when this client sent the user&#39;s presence to the server with the precision of a second. 
    /// </summary>
    int32_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(int32_t value);

    /// <summary>
    /// Whether the client is capable of showing mobile/push notifications to the user. 
    /// </summary>
    bool isPushable() const;
    bool pushableIsSet() const;
    void unsetPushable();

    void setPushable(bool value);


protected:
    utility::string_t m_Client;
    bool m_ClientIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    int32_t m_Timestamp;
    bool m_TimestampIsSet;
    bool m_Pushable;
    bool m_PushableIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Presence_H_ */
