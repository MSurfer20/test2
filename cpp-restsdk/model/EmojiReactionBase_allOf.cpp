/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmojiReactionBase_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EmojiReactionBase_allOf::EmojiReactionBase_allOf()
{
    m_User_id = 0;
    m_User_idIsSet = false;
    m_UserIsSet = false;
}

EmojiReactionBase_allOf::~EmojiReactionBase_allOf()
{
}

void EmojiReactionBase_allOf::validate()
{
    // TODO: implement validation
}

web::json::value EmojiReactionBase_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t("user")] = ModelBase::toJson(m_User);
    }

    return val;
}

bool EmojiReactionBase_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_id);
            setUserId(refVal_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmojiReactionBase_allOf_user> refVal_user;
            ok &= ModelBase::fromJson(fieldValue, refVal_user);
            setUser(refVal_user);
        }
    }
    return ok;
}

void EmojiReactionBase_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user"), m_User));
    }
}

bool EmojiReactionBase_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        int32_t refVal_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id")), refVal_user_id );
        setUserId(refVal_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user")))
    {
        std::shared_ptr<EmojiReactionBase_allOf_user> refVal_user;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user")), refVal_user );
        setUser(refVal_user);
    }
    return ok;
}

int32_t EmojiReactionBase_allOf::getUserId() const
{
    return m_User_id;
}

void EmojiReactionBase_allOf::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool EmojiReactionBase_allOf::userIdIsSet() const
{
    return m_User_idIsSet;
}

void EmojiReactionBase_allOf::unsetUser_id()
{
    m_User_idIsSet = false;
}
std::shared_ptr<EmojiReactionBase_allOf_user> EmojiReactionBase_allOf::getUser() const
{
    return m_User;
}

void EmojiReactionBase_allOf::setUser(const std::shared_ptr<EmojiReactionBase_allOf_user>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool EmojiReactionBase_allOf::userIsSet() const
{
    return m_UserIsSet;
}

void EmojiReactionBase_allOf::unsetUser()
{
    m_UserIsSet = false;
}
}
}
}
}


