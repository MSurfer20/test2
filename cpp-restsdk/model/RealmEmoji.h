/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RealmEmoji.h
 *
 * &#x60;{emoji_id}&#x60;: Object containing details about the emoji with  the specified ID. It has the following properties: 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RealmEmoji_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RealmEmoji_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// &#x60;{emoji_id}&#x60;: Object containing details about the emoji with  the specified ID. It has the following properties: 
/// </summary>
class  RealmEmoji
    : public ModelBase
{
public:
    RealmEmoji();
    virtual ~RealmEmoji();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RealmEmoji members

    /// <summary>
    /// The ID for this emoji, same as the object&#39;s key. 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The user-friendly name for this emoji. Users in the organization can use this emoji by writing this name between colons (&#x60;:name  :&#x60;). 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The path relative to the organization&#39;s URL where the emoji&#39;s image can be found. 
    /// </summary>
    utility::string_t getSourceUrl() const;
    bool sourceUrlIsSet() const;
    void unsetSource_url();

    void setSourceUrl(const utility::string_t& value);

    /// <summary>
    /// Whether the emoji has been deactivated or not. 
    /// </summary>
    bool isDeactivated() const;
    bool deactivatedIsSet() const;
    void unsetDeactivated();

    void setDeactivated(bool value);

    /// <summary>
    /// The user ID of the user who uploaded the custom emoji. Will be null if the uploader is unknown.  **Changes**: New in Zulip 3.0 (feature level 7).  Previously was accessible via and &#x60;author&#x60; object with an &#x60;id&#x60; field. 
    /// </summary>
    int32_t getAuthorId() const;
    bool authorIdIsSet() const;
    void unsetAuthor_id();

    void setAuthorId(int32_t value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Source_url;
    bool m_Source_urlIsSet;
    bool m_Deactivated;
    bool m_DeactivatedIsSet;
    int32_t m_Author_id;
    bool m_Author_idIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RealmEmoji_H_ */
