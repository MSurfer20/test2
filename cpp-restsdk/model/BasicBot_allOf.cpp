/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BasicBot_allOf.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BasicBot_allOf::BasicBot_allOf()
{
    m_User_idIsSet = false;
    m_Full_nameIsSet = false;
    m_Api_keyIsSet = false;
    m_Default_sending_streamIsSet = false;
    m_Default_events_register_streamIsSet = false;
    m_Default_all_public_streamsIsSet = false;
    m_Avatar_urlIsSet = false;
    m_Owner_idIsSet = false;
    m_ServicesIsSet = false;
}

BasicBot_allOf::~BasicBot_allOf()
{
}

void BasicBot_allOf::validate()
{
    // TODO: implement validation
}

web::json::value BasicBot_allOf::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Full_nameIsSet)
    {
        val[utility::conversions::to_string_t("full_name")] = ModelBase::toJson(m_Full_name);
    }
    if(m_Api_keyIsSet)
    {
        val[utility::conversions::to_string_t("api_key")] = ModelBase::toJson(m_Api_key);
    }
    if(m_Default_sending_streamIsSet)
    {
        val[utility::conversions::to_string_t("default_sending_stream")] = ModelBase::toJson(m_Default_sending_stream);
    }
    if(m_Default_events_register_streamIsSet)
    {
        val[utility::conversions::to_string_t("default_events_register_stream")] = ModelBase::toJson(m_Default_events_register_stream);
    }
    if(m_Default_all_public_streamsIsSet)
    {
        val[utility::conversions::to_string_t("default_all_public_streams")] = ModelBase::toJson(m_Default_all_public_streams);
    }
    if(m_Avatar_urlIsSet)
    {
        val[utility::conversions::to_string_t("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    if(m_Owner_idIsSet)
    {
        val[utility::conversions::to_string_t("owner_id")] = ModelBase::toJson(m_Owner_id);
    }
    if(m_ServicesIsSet)
    {
        val[utility::conversions::to_string_t("services")] = ModelBase::toJson(m_Services);
    }

    return val;
}

bool BasicBot_allOf::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_id);
            setUserId(refVal_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("full_name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_full_name);
            setFullName(refVal_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_key")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_key"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_api_key;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_key);
            setApiKey(refVal_api_key);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default_sending_stream")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("default_sending_stream"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_default_sending_stream;
            ok &= ModelBase::fromJson(fieldValue, refVal_default_sending_stream);
            setDefaultSendingStream(refVal_default_sending_stream);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default_events_register_stream")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("default_events_register_stream"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_default_events_register_stream;
            ok &= ModelBase::fromJson(fieldValue, refVal_default_events_register_stream);
            setDefaultEventsRegisterStream(refVal_default_events_register_stream);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("default_all_public_streams")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("default_all_public_streams"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_default_all_public_streams;
            ok &= ModelBase::fromJson(fieldValue, refVal_default_all_public_streams);
            setDefaultAllPublicStreams(refVal_default_all_public_streams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_url"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_avatar_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_url);
            setAvatarUrl(refVal_avatar_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("owner_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("owner_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_owner_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_owner_id);
            setOwnerId(refVal_owner_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("services")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("services"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_services;
            ok &= ModelBase::fromJson(fieldValue, refVal_services);
            setServices(refVal_services);
        }
    }
    return ok;
}

void BasicBot_allOf::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("full_name"), m_Full_name));
    }
    if(m_Api_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_key"), m_Api_key));
    }
    if(m_Default_sending_streamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("default_sending_stream"), m_Default_sending_stream));
    }
    if(m_Default_events_register_streamIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("default_events_register_stream"), m_Default_events_register_stream));
    }
    if(m_Default_all_public_streamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("default_all_public_streams"), m_Default_all_public_streams));
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_url"), m_Avatar_url));
    }
    if(m_Owner_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("owner_id"), m_Owner_id));
    }
    if(m_ServicesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("services"), m_Services));
    }
}

bool BasicBot_allOf::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        std::shared_ptr<AnyType> refVal_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id")), refVal_user_id );
        setUserId(refVal_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("full_name")))
    {
        std::shared_ptr<AnyType> refVal_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("full_name")), refVal_full_name );
        setFullName(refVal_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_key")))
    {
        std::shared_ptr<AnyType> refVal_api_key;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_key")), refVal_api_key );
        setApiKey(refVal_api_key);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default_sending_stream")))
    {
        std::shared_ptr<AnyType> refVal_default_sending_stream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("default_sending_stream")), refVal_default_sending_stream );
        setDefaultSendingStream(refVal_default_sending_stream);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default_events_register_stream")))
    {
        std::shared_ptr<AnyType> refVal_default_events_register_stream;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("default_events_register_stream")), refVal_default_events_register_stream );
        setDefaultEventsRegisterStream(refVal_default_events_register_stream);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("default_all_public_streams")))
    {
        std::shared_ptr<AnyType> refVal_default_all_public_streams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("default_all_public_streams")), refVal_default_all_public_streams );
        setDefaultAllPublicStreams(refVal_default_all_public_streams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar_url")))
    {
        std::shared_ptr<AnyType> refVal_avatar_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_url")), refVal_avatar_url );
        setAvatarUrl(refVal_avatar_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("owner_id")))
    {
        std::shared_ptr<AnyType> refVal_owner_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("owner_id")), refVal_owner_id );
        setOwnerId(refVal_owner_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("services")))
    {
        std::shared_ptr<AnyType> refVal_services;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("services")), refVal_services );
        setServices(refVal_services);
    }
    return ok;
}

std::shared_ptr<AnyType> BasicBot_allOf::getUserId() const
{
    return m_User_id;
}

void BasicBot_allOf::setUserId(const std::shared_ptr<AnyType>& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool BasicBot_allOf::userIdIsSet() const
{
    return m_User_idIsSet;
}

void BasicBot_allOf::unsetUser_id()
{
    m_User_idIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getFullName() const
{
    return m_Full_name;
}

void BasicBot_allOf::setFullName(const std::shared_ptr<AnyType>& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}

bool BasicBot_allOf::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}

void BasicBot_allOf::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getApiKey() const
{
    return m_Api_key;
}

void BasicBot_allOf::setApiKey(const std::shared_ptr<AnyType>& value)
{
    m_Api_key = value;
    m_Api_keyIsSet = true;
}

bool BasicBot_allOf::apiKeyIsSet() const
{
    return m_Api_keyIsSet;
}

void BasicBot_allOf::unsetApi_key()
{
    m_Api_keyIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultSendingStream() const
{
    return m_Default_sending_stream;
}

void BasicBot_allOf::setDefaultSendingStream(const std::shared_ptr<AnyType>& value)
{
    m_Default_sending_stream = value;
    m_Default_sending_streamIsSet = true;
}

bool BasicBot_allOf::defaultSendingStreamIsSet() const
{
    return m_Default_sending_streamIsSet;
}

void BasicBot_allOf::unsetDefault_sending_stream()
{
    m_Default_sending_streamIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultEventsRegisterStream() const
{
    return m_Default_events_register_stream;
}

void BasicBot_allOf::setDefaultEventsRegisterStream(const std::shared_ptr<AnyType>& value)
{
    m_Default_events_register_stream = value;
    m_Default_events_register_streamIsSet = true;
}

bool BasicBot_allOf::defaultEventsRegisterStreamIsSet() const
{
    return m_Default_events_register_streamIsSet;
}

void BasicBot_allOf::unsetDefault_events_register_stream()
{
    m_Default_events_register_streamIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getDefaultAllPublicStreams() const
{
    return m_Default_all_public_streams;
}

void BasicBot_allOf::setDefaultAllPublicStreams(const std::shared_ptr<AnyType>& value)
{
    m_Default_all_public_streams = value;
    m_Default_all_public_streamsIsSet = true;
}

bool BasicBot_allOf::defaultAllPublicStreamsIsSet() const
{
    return m_Default_all_public_streamsIsSet;
}

void BasicBot_allOf::unsetDefault_all_public_streams()
{
    m_Default_all_public_streamsIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getAvatarUrl() const
{
    return m_Avatar_url;
}

void BasicBot_allOf::setAvatarUrl(const std::shared_ptr<AnyType>& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}

bool BasicBot_allOf::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}

void BasicBot_allOf::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getOwnerId() const
{
    return m_Owner_id;
}

void BasicBot_allOf::setOwnerId(const std::shared_ptr<AnyType>& value)
{
    m_Owner_id = value;
    m_Owner_idIsSet = true;
}

bool BasicBot_allOf::ownerIdIsSet() const
{
    return m_Owner_idIsSet;
}

void BasicBot_allOf::unsetOwner_id()
{
    m_Owner_idIsSet = false;
}
std::shared_ptr<AnyType> BasicBot_allOf::getServices() const
{
    return m_Services;
}

void BasicBot_allOf::setServices(const std::shared_ptr<AnyType>& value)
{
    m_Services = value;
    m_ServicesIsSet = true;
}

bool BasicBot_allOf::servicesIsSet() const
{
    return m_ServicesIsSet;
}

void BasicBot_allOf::unsetServices()
{
    m_ServicesIsSet = false;
}
}
}
}
}


