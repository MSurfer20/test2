/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmojiReactionBase_user.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




EmojiReactionBase_user::EmojiReactionBase_user()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Full_name = utility::conversions::to_string_t("");
    m_Full_nameIsSet = false;
    m_Is_mirror_dummy = false;
    m_Is_mirror_dummyIsSet = false;
}

EmojiReactionBase_user::~EmojiReactionBase_user()
{
}

void EmojiReactionBase_user::validate()
{
    // TODO: implement validation
}

web::json::value EmojiReactionBase_user::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_Full_nameIsSet)
    {
        val[utility::conversions::to_string_t("full_name")] = ModelBase::toJson(m_Full_name);
    }
    if(m_Is_mirror_dummyIsSet)
    {
        val[utility::conversions::to_string_t("is_mirror_dummy")] = ModelBase::toJson(m_Is_mirror_dummy);
    }

    return val;
}

bool EmojiReactionBase_user::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("full_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_full_name);
            setFullName(refVal_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_mirror_dummy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_mirror_dummy"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_mirror_dummy;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_mirror_dummy);
            setIsMirrorDummy(refVal_is_mirror_dummy);
        }
    }
    return ok;
}

void EmojiReactionBase_user::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_Full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("full_name"), m_Full_name));
    }
    if(m_Is_mirror_dummyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_mirror_dummy"), m_Is_mirror_dummy));
    }
}

bool EmojiReactionBase_user::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("full_name")))
    {
        utility::string_t refVal_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("full_name")), refVal_full_name );
        setFullName(refVal_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_mirror_dummy")))
    {
        bool refVal_is_mirror_dummy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_mirror_dummy")), refVal_is_mirror_dummy );
        setIsMirrorDummy(refVal_is_mirror_dummy);
    }
    return ok;
}

int32_t EmojiReactionBase_user::getId() const
{
    return m_Id;
}

void EmojiReactionBase_user::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EmojiReactionBase_user::idIsSet() const
{
    return m_IdIsSet;
}

void EmojiReactionBase_user::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EmojiReactionBase_user::getEmail() const
{
    return m_Email;
}

void EmojiReactionBase_user::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool EmojiReactionBase_user::emailIsSet() const
{
    return m_EmailIsSet;
}

void EmojiReactionBase_user::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t EmojiReactionBase_user::getFullName() const
{
    return m_Full_name;
}

void EmojiReactionBase_user::setFullName(const utility::string_t& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}

bool EmojiReactionBase_user::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}

void EmojiReactionBase_user::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
bool EmojiReactionBase_user::isIsMirrorDummy() const
{
    return m_Is_mirror_dummy;
}

void EmojiReactionBase_user::setIsMirrorDummy(bool value)
{
    m_Is_mirror_dummy = value;
    m_Is_mirror_dummyIsSet = true;
}

bool EmojiReactionBase_user::isMirrorDummyIsSet() const
{
    return m_Is_mirror_dummyIsSet;
}

void EmojiReactionBase_user::unsetIs_mirror_dummy()
{
    m_Is_mirror_dummyIsSet = false;
}
}
}
}
}


