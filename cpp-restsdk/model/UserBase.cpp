/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserBase.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UserBase::UserBase()
{
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Is_bot = false;
    m_Is_botIsSet = false;
    m_Avatar_url = utility::conversions::to_string_t("");
    m_Avatar_urlIsSet = false;
    m_Avatar_version = 0;
    m_Avatar_versionIsSet = false;
    m_Full_name = utility::conversions::to_string_t("");
    m_Full_nameIsSet = false;
    m_Is_admin = false;
    m_Is_adminIsSet = false;
    m_Is_owner = false;
    m_Is_ownerIsSet = false;
    m_Is_billing_admin = false;
    m_Is_billing_adminIsSet = false;
    m_Role = 0;
    m_RoleIsSet = false;
    m_Bot_type = 0;
    m_Bot_typeIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Bot_owner_id = 0;
    m_Bot_owner_idIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
    m_Is_guest = false;
    m_Is_guestIsSet = false;
    m_Timezone = utility::conversions::to_string_t("");
    m_TimezoneIsSet = false;
    m_Date_joined = utility::conversions::to_string_t("");
    m_Date_joinedIsSet = false;
    m_Delivery_email = utility::conversions::to_string_t("");
    m_Delivery_emailIsSet = false;
    m_Profile_dataIsSet = false;
}

UserBase::~UserBase()
{
}

void UserBase::validate()
{
    // TODO: implement validation
}

web::json::value UserBase::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_Is_botIsSet)
    {
        val[utility::conversions::to_string_t("is_bot")] = ModelBase::toJson(m_Is_bot);
    }
    if(m_Avatar_urlIsSet)
    {
        val[utility::conversions::to_string_t("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    if(m_Avatar_versionIsSet)
    {
        val[utility::conversions::to_string_t("avatar_version")] = ModelBase::toJson(m_Avatar_version);
    }
    if(m_Full_nameIsSet)
    {
        val[utility::conversions::to_string_t("full_name")] = ModelBase::toJson(m_Full_name);
    }
    if(m_Is_adminIsSet)
    {
        val[utility::conversions::to_string_t("is_admin")] = ModelBase::toJson(m_Is_admin);
    }
    if(m_Is_ownerIsSet)
    {
        val[utility::conversions::to_string_t("is_owner")] = ModelBase::toJson(m_Is_owner);
    }
    if(m_Is_billing_adminIsSet)
    {
        val[utility::conversions::to_string_t("is_billing_admin")] = ModelBase::toJson(m_Is_billing_admin);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }
    if(m_Bot_typeIsSet)
    {
        val[utility::conversions::to_string_t("bot_type")] = ModelBase::toJson(m_Bot_type);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Bot_owner_idIsSet)
    {
        val[utility::conversions::to_string_t("bot_owner_id")] = ModelBase::toJson(m_Bot_owner_id);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t("is_active")] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_guestIsSet)
    {
        val[utility::conversions::to_string_t("is_guest")] = ModelBase::toJson(m_Is_guest);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    }
    if(m_Date_joinedIsSet)
    {
        val[utility::conversions::to_string_t("date_joined")] = ModelBase::toJson(m_Date_joined);
    }
    if(m_Delivery_emailIsSet)
    {
        val[utility::conversions::to_string_t("delivery_email")] = ModelBase::toJson(m_Delivery_email);
    }
    if(m_Profile_dataIsSet)
    {
        val[utility::conversions::to_string_t("profile_data")] = ModelBase::toJson(m_Profile_data);
    }

    return val;
}

bool UserBase::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_bot")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_bot"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_bot;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_bot);
            setIsBot(refVal_is_bot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_avatar_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_url);
            setAvatarUrl(refVal_avatar_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_version"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_avatar_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_version);
            setAvatarVersion(refVal_avatar_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("full_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_full_name);
            setFullName(refVal_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_admin"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_admin);
            setIsAdmin(refVal_is_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_owner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_owner"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_owner;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_owner);
            setIsOwner(refVal_is_owner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_billing_admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_billing_admin"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_billing_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_billing_admin);
            setIsBillingAdmin(refVal_is_billing_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("role"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_role;
            ok &= ModelBase::fromJson(fieldValue, refVal_role);
            setRole(refVal_role);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bot_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bot_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_type);
            setBotType(refVal_bot_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_id);
            setUserId(refVal_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bot_owner_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_owner_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_bot_owner_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_owner_id);
            setBotOwnerId(refVal_bot_owner_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_active"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_active);
            setIsActive(refVal_is_active);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_guest")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_guest"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_guest;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_guest);
            setIsGuest(refVal_is_guest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_timezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone);
            setTimezone(refVal_timezone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_joined")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_joined"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_date_joined;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_joined);
            setDateJoined(refVal_date_joined);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delivery_email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("delivery_email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_delivery_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_delivery_email);
            setDeliveryEmail(refVal_delivery_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("profile_data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("profile_data"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_profile_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_profile_data);
            setProfileData(refVal_profile_data);
        }
    }
    return ok;
}

void UserBase::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_Is_botIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_bot"), m_Is_bot));
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_url"), m_Avatar_url));
    }
    if(m_Avatar_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_version"), m_Avatar_version));
    }
    if(m_Full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("full_name"), m_Full_name));
    }
    if(m_Is_adminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_admin"), m_Is_admin));
    }
    if(m_Is_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_owner"), m_Is_owner));
    }
    if(m_Is_billing_adminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_billing_admin"), m_Is_billing_admin));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("role"), m_Role));
    }
    if(m_Bot_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_type"), m_Bot_type));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Bot_owner_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_owner_id"), m_Bot_owner_id));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_active"), m_Is_active));
    }
    if(m_Is_guestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_guest"), m_Is_guest));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    }
    if(m_Date_joinedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_joined"), m_Date_joined));
    }
    if(m_Delivery_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delivery_email"), m_Delivery_email));
    }
    if(m_Profile_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("profile_data"), m_Profile_data));
    }
}

bool UserBase::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_bot")))
    {
        bool refVal_is_bot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_bot")), refVal_is_bot );
        setIsBot(refVal_is_bot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar_url")))
    {
        utility::string_t refVal_avatar_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_url")), refVal_avatar_url );
        setAvatarUrl(refVal_avatar_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar_version")))
    {
        int32_t refVal_avatar_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_version")), refVal_avatar_version );
        setAvatarVersion(refVal_avatar_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("full_name")))
    {
        utility::string_t refVal_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("full_name")), refVal_full_name );
        setFullName(refVal_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_admin")))
    {
        bool refVal_is_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_admin")), refVal_is_admin );
        setIsAdmin(refVal_is_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_owner")))
    {
        bool refVal_is_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_owner")), refVal_is_owner );
        setIsOwner(refVal_is_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_billing_admin")))
    {
        bool refVal_is_billing_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_billing_admin")), refVal_is_billing_admin );
        setIsBillingAdmin(refVal_is_billing_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        int32_t refVal_role;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("role")), refVal_role );
        setRole(refVal_role);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bot_type")))
    {
        int32_t refVal_bot_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_type")), refVal_bot_type );
        setBotType(refVal_bot_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        int32_t refVal_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id")), refVal_user_id );
        setUserId(refVal_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bot_owner_id")))
    {
        int32_t refVal_bot_owner_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_owner_id")), refVal_bot_owner_id );
        setBotOwnerId(refVal_bot_owner_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_active")))
    {
        bool refVal_is_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_active")), refVal_is_active );
        setIsActive(refVal_is_active);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_guest")))
    {
        bool refVal_is_guest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_guest")), refVal_is_guest );
        setIsGuest(refVal_is_guest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone")))
    {
        utility::string_t refVal_timezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone")), refVal_timezone );
        setTimezone(refVal_timezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_joined")))
    {
        utility::string_t refVal_date_joined;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_joined")), refVal_date_joined );
        setDateJoined(refVal_date_joined);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delivery_email")))
    {
        utility::string_t refVal_delivery_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("delivery_email")), refVal_delivery_email );
        setDeliveryEmail(refVal_delivery_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("profile_data")))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_profile_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("profile_data")), refVal_profile_data );
        setProfileData(refVal_profile_data);
    }
    return ok;
}

utility::string_t UserBase::getEmail() const
{
    return m_Email;
}

void UserBase::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool UserBase::emailIsSet() const
{
    return m_EmailIsSet;
}

void UserBase::unsetEmail()
{
    m_EmailIsSet = false;
}
bool UserBase::isIsBot() const
{
    return m_Is_bot;
}

void UserBase::setIsBot(bool value)
{
    m_Is_bot = value;
    m_Is_botIsSet = true;
}

bool UserBase::isBotIsSet() const
{
    return m_Is_botIsSet;
}

void UserBase::unsetIs_bot()
{
    m_Is_botIsSet = false;
}
utility::string_t UserBase::getAvatarUrl() const
{
    return m_Avatar_url;
}

void UserBase::setAvatarUrl(const utility::string_t& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}

bool UserBase::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}

void UserBase::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
int32_t UserBase::getAvatarVersion() const
{
    return m_Avatar_version;
}

void UserBase::setAvatarVersion(int32_t value)
{
    m_Avatar_version = value;
    m_Avatar_versionIsSet = true;
}

bool UserBase::avatarVersionIsSet() const
{
    return m_Avatar_versionIsSet;
}

void UserBase::unsetAvatar_version()
{
    m_Avatar_versionIsSet = false;
}
utility::string_t UserBase::getFullName() const
{
    return m_Full_name;
}

void UserBase::setFullName(const utility::string_t& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}

bool UserBase::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}

void UserBase::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
bool UserBase::isIsAdmin() const
{
    return m_Is_admin;
}

void UserBase::setIsAdmin(bool value)
{
    m_Is_admin = value;
    m_Is_adminIsSet = true;
}

bool UserBase::isAdminIsSet() const
{
    return m_Is_adminIsSet;
}

void UserBase::unsetIs_admin()
{
    m_Is_adminIsSet = false;
}
bool UserBase::isIsOwner() const
{
    return m_Is_owner;
}

void UserBase::setIsOwner(bool value)
{
    m_Is_owner = value;
    m_Is_ownerIsSet = true;
}

bool UserBase::isOwnerIsSet() const
{
    return m_Is_ownerIsSet;
}

void UserBase::unsetIs_owner()
{
    m_Is_ownerIsSet = false;
}
bool UserBase::isIsBillingAdmin() const
{
    return m_Is_billing_admin;
}

void UserBase::setIsBillingAdmin(bool value)
{
    m_Is_billing_admin = value;
    m_Is_billing_adminIsSet = true;
}

bool UserBase::isBillingAdminIsSet() const
{
    return m_Is_billing_adminIsSet;
}

void UserBase::unsetIs_billing_admin()
{
    m_Is_billing_adminIsSet = false;
}
int32_t UserBase::getRole() const
{
    return m_Role;
}

void UserBase::setRole(int32_t value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool UserBase::roleIsSet() const
{
    return m_RoleIsSet;
}

void UserBase::unsetRole()
{
    m_RoleIsSet = false;
}
int32_t UserBase::getBotType() const
{
    return m_Bot_type;
}

void UserBase::setBotType(int32_t value)
{
    m_Bot_type = value;
    m_Bot_typeIsSet = true;
}

bool UserBase::botTypeIsSet() const
{
    return m_Bot_typeIsSet;
}

void UserBase::unsetBot_type()
{
    m_Bot_typeIsSet = false;
}
int32_t UserBase::getUserId() const
{
    return m_User_id;
}

void UserBase::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool UserBase::userIdIsSet() const
{
    return m_User_idIsSet;
}

void UserBase::unsetUser_id()
{
    m_User_idIsSet = false;
}
int32_t UserBase::getBotOwnerId() const
{
    return m_Bot_owner_id;
}

void UserBase::setBotOwnerId(int32_t value)
{
    m_Bot_owner_id = value;
    m_Bot_owner_idIsSet = true;
}

bool UserBase::botOwnerIdIsSet() const
{
    return m_Bot_owner_idIsSet;
}

void UserBase::unsetBot_owner_id()
{
    m_Bot_owner_idIsSet = false;
}
bool UserBase::isIsActive() const
{
    return m_Is_active;
}

void UserBase::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool UserBase::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void UserBase::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
bool UserBase::isIsGuest() const
{
    return m_Is_guest;
}

void UserBase::setIsGuest(bool value)
{
    m_Is_guest = value;
    m_Is_guestIsSet = true;
}

bool UserBase::isGuestIsSet() const
{
    return m_Is_guestIsSet;
}

void UserBase::unsetIs_guest()
{
    m_Is_guestIsSet = false;
}
utility::string_t UserBase::getTimezone() const
{
    return m_Timezone;
}

void UserBase::setTimezone(const utility::string_t& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool UserBase::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void UserBase::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
utility::string_t UserBase::getDateJoined() const
{
    return m_Date_joined;
}

void UserBase::setDateJoined(const utility::string_t& value)
{
    m_Date_joined = value;
    m_Date_joinedIsSet = true;
}

bool UserBase::dateJoinedIsSet() const
{
    return m_Date_joinedIsSet;
}

void UserBase::unsetDate_joined()
{
    m_Date_joinedIsSet = false;
}
utility::string_t UserBase::getDeliveryEmail() const
{
    return m_Delivery_email;
}

void UserBase::setDeliveryEmail(const utility::string_t& value)
{
    m_Delivery_email = value;
    m_Delivery_emailIsSet = true;
}

bool UserBase::deliveryEmailIsSet() const
{
    return m_Delivery_emailIsSet;
}

void UserBase::unsetDelivery_email()
{
    m_Delivery_emailIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& UserBase::getProfileData()
{
    return m_Profile_data;
}

void UserBase::setProfileData(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_Profile_data = value;
    m_Profile_dataIsSet = true;
}

bool UserBase::profileDataIsSet() const
{
    return m_Profile_dataIsSet;
}

void UserBase::unsetProfile_data()
{
    m_Profile_dataIsSet = false;
}
}
}
}
}


