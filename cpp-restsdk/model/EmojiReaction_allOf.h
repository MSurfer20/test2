/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmojiReaction_allOf.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_EmojiReaction_allOf_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_EmojiReaction_allOf_H_


#include "../ModelBase.h"

#include "AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  EmojiReaction_allOf
    : public ModelBase
{
public:
    EmojiReaction_allOf();
    virtual ~EmojiReaction_allOf();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmojiReaction_allOf members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getEmojiCode() const;
    bool emojiCodeIsSet() const;
    void unsetEmoji_code();

    void setEmojiCode(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getEmojiName() const;
    bool emojiNameIsSet() const;
    void unsetEmoji_name();

    void setEmojiName(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getReactionType() const;
    bool reactionTypeIsSet() const;
    void unsetReaction_type();

    void setReactionType(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const std::shared_ptr<AnyType>& value);


protected:
    std::shared_ptr<AnyType> m_Emoji_code;
    bool m_Emoji_codeIsSet;
    std::shared_ptr<AnyType> m_Emoji_name;
    bool m_Emoji_nameIsSet;
    std::shared_ptr<AnyType> m_Reaction_type;
    bool m_Reaction_typeIsSet;
    std::shared_ptr<AnyType> m_User_id;
    bool m_User_idIsSet;
    std::shared_ptr<AnyType> m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_EmojiReaction_allOf_H_ */
