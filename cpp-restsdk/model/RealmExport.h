/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RealmExport.h
 *
 * Object containing details about a realm export. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RealmExport_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RealmExport_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Object containing details about a realm export. 
/// </summary>
class  RealmExport
    : public ModelBase
{
public:
    RealmExport();
    virtual ~RealmExport();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RealmExport members

    /// <summary>
    /// The id of the export. 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// The id of the user who did the export. 
    /// </summary>
    int32_t getActingUserId() const;
    bool actingUserIdIsSet() const;
    void unsetActing_user_id();

    void setActingUserId(int32_t value);

    /// <summary>
    /// The UNIX timestamp of when the export was made. 
    /// </summary>
    double getExportTime() const;
    bool exportTimeIsSet() const;
    void unsetExport_time();

    void setExportTime(double value);

    /// <summary>
    /// The timestamp of when the export was deleted. Null if it wasn&#39;t. 
    /// </summary>
    double getDeletedTimestamp() const;
    bool deletedTimestampIsSet() const;
    void unsetDeleted_timestamp();

    void setDeletedTimestamp(double value);

    /// <summary>
    /// The timestamp of when the export failed. Null if it didn&#39;t. 
    /// </summary>
    double getFailedTimestamp() const;
    bool failedTimestampIsSet() const;
    void unsetFailed_timestamp();

    void setFailedTimestamp(double value);

    /// <summary>
    /// The URL of the export. &#x60;null&#x60; if there&#39;s no URL. 
    /// </summary>
    utility::string_t getExportUrl() const;
    bool exportUrlIsSet() const;
    void unsetExport_url();

    void setExportUrl(const utility::string_t& value);

    /// <summary>
    /// Whether the export is pending or not. 
    /// </summary>
    bool isPending() const;
    bool pendingIsSet() const;
    void unsetPending();

    void setPending(bool value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_Acting_user_id;
    bool m_Acting_user_idIsSet;
    double m_Export_time;
    bool m_Export_timeIsSet;
    double m_Deleted_timestamp;
    bool m_Deleted_timestampIsSet;
    double m_Failed_timestamp;
    bool m_Failed_timestampIsSet;
    utility::string_t m_Export_url;
    bool m_Export_urlIsSet;
    bool m_Pending;
    bool m_PendingIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RealmExport_H_ */
