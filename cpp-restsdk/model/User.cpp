/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "User.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




User::User()
{
    m_EmailIsSet = false;
    m_Is_botIsSet = false;
    m_Avatar_urlIsSet = false;
    m_Avatar_versionIsSet = false;
    m_Full_nameIsSet = false;
    m_Is_adminIsSet = false;
    m_Is_ownerIsSet = false;
    m_Is_billing_adminIsSet = false;
    m_RoleIsSet = false;
    m_Bot_typeIsSet = false;
    m_User_idIsSet = false;
    m_Bot_owner_idIsSet = false;
    m_Is_activeIsSet = false;
    m_Is_guestIsSet = false;
    m_TimezoneIsSet = false;
    m_Date_joinedIsSet = false;
    m_Delivery_emailIsSet = false;
    m_Profile_dataIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_Is_botIsSet)
    {
        val[utility::conversions::to_string_t("is_bot")] = ModelBase::toJson(m_Is_bot);
    }
    if(m_Avatar_urlIsSet)
    {
        val[utility::conversions::to_string_t("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    if(m_Avatar_versionIsSet)
    {
        val[utility::conversions::to_string_t("avatar_version")] = ModelBase::toJson(m_Avatar_version);
    }
    if(m_Full_nameIsSet)
    {
        val[utility::conversions::to_string_t("full_name")] = ModelBase::toJson(m_Full_name);
    }
    if(m_Is_adminIsSet)
    {
        val[utility::conversions::to_string_t("is_admin")] = ModelBase::toJson(m_Is_admin);
    }
    if(m_Is_ownerIsSet)
    {
        val[utility::conversions::to_string_t("is_owner")] = ModelBase::toJson(m_Is_owner);
    }
    if(m_Is_billing_adminIsSet)
    {
        val[utility::conversions::to_string_t("is_billing_admin")] = ModelBase::toJson(m_Is_billing_admin);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }
    if(m_Bot_typeIsSet)
    {
        val[utility::conversions::to_string_t("bot_type")] = ModelBase::toJson(m_Bot_type);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Bot_owner_idIsSet)
    {
        val[utility::conversions::to_string_t("bot_owner_id")] = ModelBase::toJson(m_Bot_owner_id);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t("is_active")] = ModelBase::toJson(m_Is_active);
    }
    if(m_Is_guestIsSet)
    {
        val[utility::conversions::to_string_t("is_guest")] = ModelBase::toJson(m_Is_guest);
    }
    if(m_TimezoneIsSet)
    {
        val[utility::conversions::to_string_t("timezone")] = ModelBase::toJson(m_Timezone);
    }
    if(m_Date_joinedIsSet)
    {
        val[utility::conversions::to_string_t("date_joined")] = ModelBase::toJson(m_Date_joined);
    }
    if(m_Delivery_emailIsSet)
    {
        val[utility::conversions::to_string_t("delivery_email")] = ModelBase::toJson(m_Delivery_email);
    }
    if(m_Profile_dataIsSet)
    {
        val[utility::conversions::to_string_t("profile_data")] = ModelBase::toJson(m_Profile_data);
    }

    return val;
}

bool User::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_bot")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_bot"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_bot;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_bot);
            setIsBot(refVal_is_bot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_url"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_avatar_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_url);
            setAvatarUrl(refVal_avatar_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("avatar_version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("avatar_version"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_avatar_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_avatar_version);
            setAvatarVersion(refVal_avatar_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("full_name"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_full_name);
            setFullName(refVal_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_admin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_admin);
            setIsAdmin(refVal_is_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_owner")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_owner"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_owner;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_owner);
            setIsOwner(refVal_is_owner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_billing_admin")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_billing_admin"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_billing_admin;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_billing_admin);
            setIsBillingAdmin(refVal_is_billing_admin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("role"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_role;
            ok &= ModelBase::fromJson(fieldValue, refVal_role);
            setRole(refVal_role);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bot_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_type"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_bot_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_type);
            setBotType(refVal_bot_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_id);
            setUserId(refVal_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bot_owner_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_owner_id"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_bot_owner_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_owner_id);
            setBotOwnerId(refVal_bot_owner_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_active"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_active);
            setIsActive(refVal_is_active);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_guest")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_guest"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_is_guest;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_guest);
            setIsGuest(refVal_is_guest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timezone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timezone"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_timezone;
            ok &= ModelBase::fromJson(fieldValue, refVal_timezone);
            setTimezone(refVal_timezone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_joined")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_joined"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_date_joined;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_joined);
            setDateJoined(refVal_date_joined);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delivery_email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("delivery_email"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_delivery_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_delivery_email);
            setDeliveryEmail(refVal_delivery_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("profile_data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("profile_data"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyType> refVal_profile_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_profile_data);
            setProfileData(refVal_profile_data);
        }
    }
    return ok;
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_Is_botIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_bot"), m_Is_bot));
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_url"), m_Avatar_url));
    }
    if(m_Avatar_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("avatar_version"), m_Avatar_version));
    }
    if(m_Full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("full_name"), m_Full_name));
    }
    if(m_Is_adminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_admin"), m_Is_admin));
    }
    if(m_Is_ownerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_owner"), m_Is_owner));
    }
    if(m_Is_billing_adminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_billing_admin"), m_Is_billing_admin));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("role"), m_Role));
    }
    if(m_Bot_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_type"), m_Bot_type));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Bot_owner_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_owner_id"), m_Bot_owner_id));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_active"), m_Is_active));
    }
    if(m_Is_guestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_guest"), m_Is_guest));
    }
    if(m_TimezoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timezone"), m_Timezone));
    }
    if(m_Date_joinedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_joined"), m_Date_joined));
    }
    if(m_Delivery_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delivery_email"), m_Delivery_email));
    }
    if(m_Profile_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("profile_data"), m_Profile_data));
    }
}

bool User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        std::shared_ptr<AnyType> refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_bot")))
    {
        std::shared_ptr<AnyType> refVal_is_bot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_bot")), refVal_is_bot );
        setIsBot(refVal_is_bot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar_url")))
    {
        std::shared_ptr<AnyType> refVal_avatar_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_url")), refVal_avatar_url );
        setAvatarUrl(refVal_avatar_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("avatar_version")))
    {
        std::shared_ptr<AnyType> refVal_avatar_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("avatar_version")), refVal_avatar_version );
        setAvatarVersion(refVal_avatar_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("full_name")))
    {
        std::shared_ptr<AnyType> refVal_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("full_name")), refVal_full_name );
        setFullName(refVal_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_admin")))
    {
        std::shared_ptr<AnyType> refVal_is_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_admin")), refVal_is_admin );
        setIsAdmin(refVal_is_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_owner")))
    {
        std::shared_ptr<AnyType> refVal_is_owner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_owner")), refVal_is_owner );
        setIsOwner(refVal_is_owner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_billing_admin")))
    {
        std::shared_ptr<AnyType> refVal_is_billing_admin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_billing_admin")), refVal_is_billing_admin );
        setIsBillingAdmin(refVal_is_billing_admin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        std::shared_ptr<AnyType> refVal_role;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("role")), refVal_role );
        setRole(refVal_role);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bot_type")))
    {
        std::shared_ptr<AnyType> refVal_bot_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_type")), refVal_bot_type );
        setBotType(refVal_bot_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        std::shared_ptr<AnyType> refVal_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id")), refVal_user_id );
        setUserId(refVal_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bot_owner_id")))
    {
        std::shared_ptr<AnyType> refVal_bot_owner_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_owner_id")), refVal_bot_owner_id );
        setBotOwnerId(refVal_bot_owner_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_active")))
    {
        std::shared_ptr<AnyType> refVal_is_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_active")), refVal_is_active );
        setIsActive(refVal_is_active);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_guest")))
    {
        std::shared_ptr<AnyType> refVal_is_guest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_guest")), refVal_is_guest );
        setIsGuest(refVal_is_guest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timezone")))
    {
        std::shared_ptr<AnyType> refVal_timezone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timezone")), refVal_timezone );
        setTimezone(refVal_timezone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_joined")))
    {
        std::shared_ptr<AnyType> refVal_date_joined;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_joined")), refVal_date_joined );
        setDateJoined(refVal_date_joined);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delivery_email")))
    {
        std::shared_ptr<AnyType> refVal_delivery_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("delivery_email")), refVal_delivery_email );
        setDeliveryEmail(refVal_delivery_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("profile_data")))
    {
        std::shared_ptr<AnyType> refVal_profile_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("profile_data")), refVal_profile_data );
        setProfileData(refVal_profile_data);
    }
    return ok;
}

std::shared_ptr<AnyType> User::getEmail() const
{
    return m_Email;
}

void User::setEmail(const std::shared_ptr<AnyType>& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool User::emailIsSet() const
{
    return m_EmailIsSet;
}

void User::unsetEmail()
{
    m_EmailIsSet = false;
}
std::shared_ptr<AnyType> User::getIsBot() const
{
    return m_Is_bot;
}

void User::setIsBot(const std::shared_ptr<AnyType>& value)
{
    m_Is_bot = value;
    m_Is_botIsSet = true;
}

bool User::isBotIsSet() const
{
    return m_Is_botIsSet;
}

void User::unsetIs_bot()
{
    m_Is_botIsSet = false;
}
std::shared_ptr<AnyType> User::getAvatarUrl() const
{
    return m_Avatar_url;
}

void User::setAvatarUrl(const std::shared_ptr<AnyType>& value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}

bool User::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}

void User::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
std::shared_ptr<AnyType> User::getAvatarVersion() const
{
    return m_Avatar_version;
}

void User::setAvatarVersion(const std::shared_ptr<AnyType>& value)
{
    m_Avatar_version = value;
    m_Avatar_versionIsSet = true;
}

bool User::avatarVersionIsSet() const
{
    return m_Avatar_versionIsSet;
}

void User::unsetAvatar_version()
{
    m_Avatar_versionIsSet = false;
}
std::shared_ptr<AnyType> User::getFullName() const
{
    return m_Full_name;
}

void User::setFullName(const std::shared_ptr<AnyType>& value)
{
    m_Full_name = value;
    m_Full_nameIsSet = true;
}

bool User::fullNameIsSet() const
{
    return m_Full_nameIsSet;
}

void User::unsetFull_name()
{
    m_Full_nameIsSet = false;
}
std::shared_ptr<AnyType> User::getIsAdmin() const
{
    return m_Is_admin;
}

void User::setIsAdmin(const std::shared_ptr<AnyType>& value)
{
    m_Is_admin = value;
    m_Is_adminIsSet = true;
}

bool User::isAdminIsSet() const
{
    return m_Is_adminIsSet;
}

void User::unsetIs_admin()
{
    m_Is_adminIsSet = false;
}
std::shared_ptr<AnyType> User::getIsOwner() const
{
    return m_Is_owner;
}

void User::setIsOwner(const std::shared_ptr<AnyType>& value)
{
    m_Is_owner = value;
    m_Is_ownerIsSet = true;
}

bool User::isOwnerIsSet() const
{
    return m_Is_ownerIsSet;
}

void User::unsetIs_owner()
{
    m_Is_ownerIsSet = false;
}
std::shared_ptr<AnyType> User::getIsBillingAdmin() const
{
    return m_Is_billing_admin;
}

void User::setIsBillingAdmin(const std::shared_ptr<AnyType>& value)
{
    m_Is_billing_admin = value;
    m_Is_billing_adminIsSet = true;
}

bool User::isBillingAdminIsSet() const
{
    return m_Is_billing_adminIsSet;
}

void User::unsetIs_billing_admin()
{
    m_Is_billing_adminIsSet = false;
}
std::shared_ptr<AnyType> User::getRole() const
{
    return m_Role;
}

void User::setRole(const std::shared_ptr<AnyType>& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool User::roleIsSet() const
{
    return m_RoleIsSet;
}

void User::unsetRole()
{
    m_RoleIsSet = false;
}
std::shared_ptr<AnyType> User::getBotType() const
{
    return m_Bot_type;
}

void User::setBotType(const std::shared_ptr<AnyType>& value)
{
    m_Bot_type = value;
    m_Bot_typeIsSet = true;
}

bool User::botTypeIsSet() const
{
    return m_Bot_typeIsSet;
}

void User::unsetBot_type()
{
    m_Bot_typeIsSet = false;
}
std::shared_ptr<AnyType> User::getUserId() const
{
    return m_User_id;
}

void User::setUserId(const std::shared_ptr<AnyType>& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool User::userIdIsSet() const
{
    return m_User_idIsSet;
}

void User::unsetUser_id()
{
    m_User_idIsSet = false;
}
std::shared_ptr<AnyType> User::getBotOwnerId() const
{
    return m_Bot_owner_id;
}

void User::setBotOwnerId(const std::shared_ptr<AnyType>& value)
{
    m_Bot_owner_id = value;
    m_Bot_owner_idIsSet = true;
}

bool User::botOwnerIdIsSet() const
{
    return m_Bot_owner_idIsSet;
}

void User::unsetBot_owner_id()
{
    m_Bot_owner_idIsSet = false;
}
std::shared_ptr<AnyType> User::getIsActive() const
{
    return m_Is_active;
}

void User::setIsActive(const std::shared_ptr<AnyType>& value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool User::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void User::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
std::shared_ptr<AnyType> User::getIsGuest() const
{
    return m_Is_guest;
}

void User::setIsGuest(const std::shared_ptr<AnyType>& value)
{
    m_Is_guest = value;
    m_Is_guestIsSet = true;
}

bool User::isGuestIsSet() const
{
    return m_Is_guestIsSet;
}

void User::unsetIs_guest()
{
    m_Is_guestIsSet = false;
}
std::shared_ptr<AnyType> User::getTimezone() const
{
    return m_Timezone;
}

void User::setTimezone(const std::shared_ptr<AnyType>& value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}

bool User::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}

void User::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
std::shared_ptr<AnyType> User::getDateJoined() const
{
    return m_Date_joined;
}

void User::setDateJoined(const std::shared_ptr<AnyType>& value)
{
    m_Date_joined = value;
    m_Date_joinedIsSet = true;
}

bool User::dateJoinedIsSet() const
{
    return m_Date_joinedIsSet;
}

void User::unsetDate_joined()
{
    m_Date_joinedIsSet = false;
}
std::shared_ptr<AnyType> User::getDeliveryEmail() const
{
    return m_Delivery_email;
}

void User::setDeliveryEmail(const std::shared_ptr<AnyType>& value)
{
    m_Delivery_email = value;
    m_Delivery_emailIsSet = true;
}

bool User::deliveryEmailIsSet() const
{
    return m_Delivery_emailIsSet;
}

void User::unsetDelivery_email()
{
    m_Delivery_emailIsSet = false;
}
std::shared_ptr<AnyType> User::getProfileData() const
{
    return m_Profile_data;
}

void User::setProfileData(const std::shared_ptr<AnyType>& value)
{
    m_Profile_data = value;
    m_Profile_dataIsSet = true;
}

bool User::profileDataIsSet() const
{
    return m_Profile_dataIsSet;
}

void User::unsetProfile_data()
{
    m_Profile_dataIsSet = false;
}
}
}
}
}


