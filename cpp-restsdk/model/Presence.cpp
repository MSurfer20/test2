/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Presence.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Presence::Presence()
{
    m_Client = utility::conversions::to_string_t("");
    m_ClientIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Pushable = false;
    m_PushableIsSet = false;
}

Presence::~Presence()
{
}

void Presence::validate()
{
    // TODO: implement validation
}

web::json::value Presence::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClientIsSet)
    {
        val[utility::conversions::to_string_t("client")] = ModelBase::toJson(m_Client);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t("status")] = ModelBase::toJson(m_Status);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_PushableIsSet)
    {
        val[utility::conversions::to_string_t("pushable")] = ModelBase::toJson(m_Pushable);
    }

    return val;
}

bool Presence::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("client")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("client"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_client;
            ok &= ModelBase::fromJson(fieldValue, refVal_client);
            setClient(refVal_client);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("status"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_status);
            setStatus(refVal_status);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("timestamp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("timestamp"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_timestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_timestamp);
            setTimestamp(refVal_timestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pushable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pushable"));
        if(!fieldValue.is_null())
        {
            bool refVal_pushable;
            ok &= ModelBase::fromJson(fieldValue, refVal_pushable);
            setPushable(refVal_pushable);
        }
    }
    return ok;
}

void Presence::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("client"), m_Client));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("status"), m_Status));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("timestamp"), m_Timestamp));
    }
    if(m_PushableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pushable"), m_Pushable));
    }
}

bool Presence::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("client")))
    {
        utility::string_t refVal_client;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("client")), refVal_client );
        setClient(refVal_client);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("status")))
    {
        utility::string_t refVal_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("status")), refVal_status );
        setStatus(refVal_status);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("timestamp")))
    {
        int32_t refVal_timestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("timestamp")), refVal_timestamp );
        setTimestamp(refVal_timestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pushable")))
    {
        bool refVal_pushable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pushable")), refVal_pushable );
        setPushable(refVal_pushable);
    }
    return ok;
}

utility::string_t Presence::getClient() const
{
    return m_Client;
}

void Presence::setClient(const utility::string_t& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}

bool Presence::clientIsSet() const
{
    return m_ClientIsSet;
}

void Presence::unsetClient()
{
    m_ClientIsSet = false;
}
utility::string_t Presence::getStatus() const
{
    return m_Status;
}

void Presence::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Presence::statusIsSet() const
{
    return m_StatusIsSet;
}

void Presence::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t Presence::getTimestamp() const
{
    return m_Timestamp;
}

void Presence::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Presence::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Presence::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
bool Presence::isPushable() const
{
    return m_Pushable;
}

void Presence::setPushable(bool value)
{
    m_Pushable = value;
    m_PushableIsSet = true;
}

bool Presence::pushableIsSet() const
{
    return m_PushableIsSet;
}

void Presence::unsetPushable()
{
    m_PushableIsSet = false;
}
}
}
}
}


