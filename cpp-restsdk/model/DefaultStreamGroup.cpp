/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DefaultStreamGroup.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




DefaultStreamGroup::DefaultStreamGroup()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_StreamsIsSet = false;
}

DefaultStreamGroup::~DefaultStreamGroup()
{
}

void DefaultStreamGroup::validate()
{
    // TODO: implement validation
}

web::json::value DefaultStreamGroup::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_StreamsIsSet)
    {
        val[utility::conversions::to_string_t("streams")] = ModelBase::toJson(m_Streams);
    }

    return val;
}

bool DefaultStreamGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("streams")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("streams"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<BasicStream>> refVal_streams;
            ok &= ModelBase::fromJson(fieldValue, refVal_streams);
            setStreams(refVal_streams);
        }
    }
    return ok;
}

void DefaultStreamGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_StreamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("streams"), m_Streams));
    }
}

bool DefaultStreamGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("streams")))
    {
        std::vector<std::shared_ptr<BasicStream>> refVal_streams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("streams")), refVal_streams );
        setStreams(refVal_streams);
    }
    return ok;
}

utility::string_t DefaultStreamGroup::getName() const
{
    return m_Name;
}

void DefaultStreamGroup::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DefaultStreamGroup::nameIsSet() const
{
    return m_NameIsSet;
}

void DefaultStreamGroup::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t DefaultStreamGroup::getDescription() const
{
    return m_Description;
}

void DefaultStreamGroup::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool DefaultStreamGroup::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DefaultStreamGroup::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t DefaultStreamGroup::getId() const
{
    return m_Id;
}

void DefaultStreamGroup::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DefaultStreamGroup::idIsSet() const
{
    return m_IdIsSet;
}

void DefaultStreamGroup::unsetId()
{
    m_IdIsSet = false;
}
std::vector<std::shared_ptr<BasicStream>>& DefaultStreamGroup::getStreams()
{
    return m_Streams;
}

void DefaultStreamGroup::setStreams(const std::vector<std::shared_ptr<BasicStream>>& value)
{
    m_Streams = value;
    m_StreamsIsSet = true;
}

bool DefaultStreamGroup::streamsIsSet() const
{
    return m_StreamsIsSet;
}

void DefaultStreamGroup::unsetStreams()
{
    m_StreamsIsSet = false;
}
}
}
}
}


