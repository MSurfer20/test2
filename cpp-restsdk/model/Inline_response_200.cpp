/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_response_200.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Inline_response_200::Inline_response_200()
{
    m_Bot_email = utility::conversions::to_string_t("");
    m_Bot_emailIsSet = false;
    m_Bot_full_name = utility::conversions::to_string_t("");
    m_Bot_full_nameIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
    m_Trigger = utility::conversions::to_string_t("");
    m_TriggerIsSet = false;
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_MessageIsSet = false;
}

Inline_response_200::~Inline_response_200()
{
}

void Inline_response_200::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Bot_emailIsSet)
    {
        val[utility::conversions::to_string_t("bot_email")] = ModelBase::toJson(m_Bot_email);
    }
    if(m_Bot_full_nameIsSet)
    {
        val[utility::conversions::to_string_t("bot_full_name")] = ModelBase::toJson(m_Bot_full_name);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }
    if(m_TriggerIsSet)
    {
        val[utility::conversions::to_string_t("trigger")] = ModelBase::toJson(m_Trigger);
    }
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t("token")] = ModelBase::toJson(m_Token);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool Inline_response_200::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bot_email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bot_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_email);
            setBotEmail(refVal_bot_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bot_full_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bot_full_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bot_full_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_bot_full_name);
            setBotFullName(refVal_bot_full_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("trigger")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("trigger"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_trigger;
            ok &= ModelBase::fromJson(fieldValue, refVal_trigger);
            setTrigger(refVal_trigger);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("token"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_token;
            ok &= ModelBase::fromJson(fieldValue, refVal_token);
            setToken(refVal_token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MessagesBase> refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    return ok;
}

void Inline_response_200::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Bot_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_email"), m_Bot_email));
    }
    if(m_Bot_full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bot_full_name"), m_Bot_full_name));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
    if(m_TriggerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("trigger"), m_Trigger));
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("token"), m_Token));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
}

bool Inline_response_200::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bot_email")))
    {
        utility::string_t refVal_bot_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_email")), refVal_bot_email );
        setBotEmail(refVal_bot_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bot_full_name")))
    {
        utility::string_t refVal_bot_full_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bot_full_name")), refVal_bot_full_name );
        setBotFullName(refVal_bot_full_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        utility::string_t refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("trigger")))
    {
        utility::string_t refVal_trigger;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("trigger")), refVal_trigger );
        setTrigger(refVal_trigger);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token")))
    {
        utility::string_t refVal_token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("token")), refVal_token );
        setToken(refVal_token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        std::shared_ptr<MessagesBase> refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    return ok;
}

utility::string_t Inline_response_200::getBotEmail() const
{
    return m_Bot_email;
}

void Inline_response_200::setBotEmail(const utility::string_t& value)
{
    m_Bot_email = value;
    m_Bot_emailIsSet = true;
}

bool Inline_response_200::botEmailIsSet() const
{
    return m_Bot_emailIsSet;
}

void Inline_response_200::unsetBot_email()
{
    m_Bot_emailIsSet = false;
}
utility::string_t Inline_response_200::getBotFullName() const
{
    return m_Bot_full_name;
}

void Inline_response_200::setBotFullName(const utility::string_t& value)
{
    m_Bot_full_name = value;
    m_Bot_full_nameIsSet = true;
}

bool Inline_response_200::botFullNameIsSet() const
{
    return m_Bot_full_nameIsSet;
}

void Inline_response_200::unsetBot_full_name()
{
    m_Bot_full_nameIsSet = false;
}
utility::string_t Inline_response_200::getData() const
{
    return m_Data;
}

void Inline_response_200::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool Inline_response_200::dataIsSet() const
{
    return m_DataIsSet;
}

void Inline_response_200::unsetData()
{
    m_DataIsSet = false;
}
utility::string_t Inline_response_200::getTrigger() const
{
    return m_Trigger;
}

void Inline_response_200::setTrigger(const utility::string_t& value)
{
    m_Trigger = value;
    m_TriggerIsSet = true;
}

bool Inline_response_200::triggerIsSet() const
{
    return m_TriggerIsSet;
}

void Inline_response_200::unsetTrigger()
{
    m_TriggerIsSet = false;
}
utility::string_t Inline_response_200::getToken() const
{
    return m_Token;
}

void Inline_response_200::setToken(const utility::string_t& value)
{
    m_Token = value;
    m_TokenIsSet = true;
}

bool Inline_response_200::tokenIsSet() const
{
    return m_TokenIsSet;
}

void Inline_response_200::unsetToken()
{
    m_TokenIsSet = false;
}
std::shared_ptr<MessagesBase> Inline_response_200::getMessage() const
{
    return m_Message;
}

void Inline_response_200::setMessage(const std::shared_ptr<MessagesBase>& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool Inline_response_200::messageIsSet() const
{
    return m_MessageIsSet;
}

void Inline_response_200::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


