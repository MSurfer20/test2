/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RealmPlayground.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RealmPlayground::RealmPlayground()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Pygments_language = utility::conversions::to_string_t("");
    m_Pygments_languageIsSet = false;
    m_Url_prefix = utility::conversions::to_string_t("");
    m_Url_prefixIsSet = false;
}

RealmPlayground::~RealmPlayground()
{
}

void RealmPlayground::validate()
{
    // TODO: implement validation
}

web::json::value RealmPlayground::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Pygments_languageIsSet)
    {
        val[utility::conversions::to_string_t("pygments_language")] = ModelBase::toJson(m_Pygments_language);
    }
    if(m_Url_prefixIsSet)
    {
        val[utility::conversions::to_string_t("url_prefix")] = ModelBase::toJson(m_Url_prefix);
    }

    return val;
}

bool RealmPlayground::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pygments_language")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pygments_language"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_pygments_language;
            ok &= ModelBase::fromJson(fieldValue, refVal_pygments_language);
            setPygmentsLanguage(refVal_pygments_language);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url_prefix")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url_prefix"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url_prefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_url_prefix);
            setUrlPrefix(refVal_url_prefix);
        }
    }
    return ok;
}

void RealmPlayground::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Pygments_languageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pygments_language"), m_Pygments_language));
    }
    if(m_Url_prefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url_prefix"), m_Url_prefix));
    }
}

bool RealmPlayground::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pygments_language")))
    {
        utility::string_t refVal_pygments_language;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pygments_language")), refVal_pygments_language );
        setPygmentsLanguage(refVal_pygments_language);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url_prefix")))
    {
        utility::string_t refVal_url_prefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("url_prefix")), refVal_url_prefix );
        setUrlPrefix(refVal_url_prefix);
    }
    return ok;
}

int32_t RealmPlayground::getId() const
{
    return m_Id;
}

void RealmPlayground::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RealmPlayground::idIsSet() const
{
    return m_IdIsSet;
}

void RealmPlayground::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RealmPlayground::getName() const
{
    return m_Name;
}

void RealmPlayground::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool RealmPlayground::nameIsSet() const
{
    return m_NameIsSet;
}

void RealmPlayground::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t RealmPlayground::getPygmentsLanguage() const
{
    return m_Pygments_language;
}

void RealmPlayground::setPygmentsLanguage(const utility::string_t& value)
{
    m_Pygments_language = value;
    m_Pygments_languageIsSet = true;
}

bool RealmPlayground::pygmentsLanguageIsSet() const
{
    return m_Pygments_languageIsSet;
}

void RealmPlayground::unsetPygments_language()
{
    m_Pygments_languageIsSet = false;
}
utility::string_t RealmPlayground::getUrlPrefix() const
{
    return m_Url_prefix;
}

void RealmPlayground::setUrlPrefix(const utility::string_t& value)
{
    m_Url_prefix = value;
    m_Url_prefixIsSet = true;
}

bool RealmPlayground::urlPrefixIsSet() const
{
    return m_Url_prefixIsSet;
}

void RealmPlayground::unsetUrl_prefix()
{
    m_Url_prefixIsSet = false;
}
}
}
}
}


