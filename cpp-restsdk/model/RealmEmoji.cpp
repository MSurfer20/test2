/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RealmEmoji.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RealmEmoji::RealmEmoji()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Source_url = utility::conversions::to_string_t("");
    m_Source_urlIsSet = false;
    m_Deactivated = false;
    m_DeactivatedIsSet = false;
    m_Author_id = 0;
    m_Author_idIsSet = false;
}

RealmEmoji::~RealmEmoji()
{
}

void RealmEmoji::validate()
{
    // TODO: implement validation
}

web::json::value RealmEmoji::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Source_urlIsSet)
    {
        val[utility::conversions::to_string_t("source_url")] = ModelBase::toJson(m_Source_url);
    }
    if(m_DeactivatedIsSet)
    {
        val[utility::conversions::to_string_t("deactivated")] = ModelBase::toJson(m_Deactivated);
    }
    if(m_Author_idIsSet)
    {
        val[utility::conversions::to_string_t("author_id")] = ModelBase::toJson(m_Author_id);
    }

    return val;
}

bool RealmEmoji::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("source_url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("source_url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_source_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_source_url);
            setSourceUrl(refVal_source_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("deactivated")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("deactivated"));
        if(!fieldValue.is_null())
        {
            bool refVal_deactivated;
            ok &= ModelBase::fromJson(fieldValue, refVal_deactivated);
            setDeactivated(refVal_deactivated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("author_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("author_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_author_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_author_id);
            setAuthorId(refVal_author_id);
        }
    }
    return ok;
}

void RealmEmoji::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_Source_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("source_url"), m_Source_url));
    }
    if(m_DeactivatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("deactivated"), m_Deactivated));
    }
    if(m_Author_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("author_id"), m_Author_id));
    }
}

bool RealmEmoji::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("source_url")))
    {
        utility::string_t refVal_source_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("source_url")), refVal_source_url );
        setSourceUrl(refVal_source_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("deactivated")))
    {
        bool refVal_deactivated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("deactivated")), refVal_deactivated );
        setDeactivated(refVal_deactivated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("author_id")))
    {
        int32_t refVal_author_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("author_id")), refVal_author_id );
        setAuthorId(refVal_author_id);
    }
    return ok;
}

utility::string_t RealmEmoji::getId() const
{
    return m_Id;
}

void RealmEmoji::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool RealmEmoji::idIsSet() const
{
    return m_IdIsSet;
}

void RealmEmoji::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t RealmEmoji::getName() const
{
    return m_Name;
}

void RealmEmoji::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool RealmEmoji::nameIsSet() const
{
    return m_NameIsSet;
}

void RealmEmoji::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t RealmEmoji::getSourceUrl() const
{
    return m_Source_url;
}

void RealmEmoji::setSourceUrl(const utility::string_t& value)
{
    m_Source_url = value;
    m_Source_urlIsSet = true;
}

bool RealmEmoji::sourceUrlIsSet() const
{
    return m_Source_urlIsSet;
}

void RealmEmoji::unsetSource_url()
{
    m_Source_urlIsSet = false;
}
bool RealmEmoji::isDeactivated() const
{
    return m_Deactivated;
}

void RealmEmoji::setDeactivated(bool value)
{
    m_Deactivated = value;
    m_DeactivatedIsSet = true;
}

bool RealmEmoji::deactivatedIsSet() const
{
    return m_DeactivatedIsSet;
}

void RealmEmoji::unsetDeactivated()
{
    m_DeactivatedIsSet = false;
}
int32_t RealmEmoji::getAuthorId() const
{
    return m_Author_id;
}

void RealmEmoji::setAuthorId(int32_t value)
{
    m_Author_id = value;
    m_Author_idIsSet = true;
}

bool RealmEmoji::authorIdIsSet() const
{
    return m_Author_idIsSet;
}

void RealmEmoji::unsetAuthor_id()
{
    m_Author_idIsSet = false;
}
}
}
}
}


