/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RealmPlayground.h
 *
 * Object containing details about a realm playground. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RealmPlayground_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RealmPlayground_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Object containing details about a realm playground. 
/// </summary>
class  RealmPlayground
    : public ModelBase
{
public:
    RealmPlayground();
    virtual ~RealmPlayground();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RealmPlayground members

    /// <summary>
    /// The unique ID for the realm playground. 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// The user-visible display name of the playground.  Clients should display this in UI for picking which playground to open a code block in, to differentiate between multiple configured playground options for a given pygments language.  **Changes**: New in Zulip 4.0 (feature level 49). 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The name of the Pygments language lexer for that programming language. 
    /// </summary>
    utility::string_t getPygmentsLanguage() const;
    bool pygmentsLanguageIsSet() const;
    void unsetPygments_language();

    void setPygmentsLanguage(const utility::string_t& value);

    /// <summary>
    /// The url prefix for the playground. 
    /// </summary>
    utility::string_t getUrlPrefix() const;
    bool urlPrefixIsSet() const;
    void unsetUrl_prefix();

    void setUrlPrefix(const utility::string_t& value);


protected:
    int32_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Pygments_language;
    bool m_Pygments_languageIsSet;
    utility::string_t m_Url_prefix;
    bool m_Url_prefixIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RealmPlayground_H_ */
