/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserBase.h
 *
 * A dictionary containing basic data on a given Zulip user. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UserBase_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UserBase_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <map>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// A dictionary containing basic data on a given Zulip user. 
/// </summary>
class  UserBase
    : public ModelBase
{
public:
    UserBase();
    virtual ~UserBase();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserBase members

    /// <summary>
    /// The Zulip API email address of the user or bot.  If you do not have permission to view the email address of the target user, this will be a fake email address that is usable for the Zulip API but nothing else. 
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const utility::string_t& value);

    /// <summary>
    /// A boolean specifying whether the user is a bot or full account. 
    /// </summary>
    bool isIsBot() const;
    bool isBotIsSet() const;
    void unsetIs_bot();

    void setIsBot(bool value);

    /// <summary>
    /// URL for the user&#39;s avatar.  Will be &#x60;null&#x60; if the &#x60;client_gravatar&#x60; query parameter was set to &#x60;True&#x60; and the user&#39;s avatar is hosted by the Gravatar provider (i.e. the user has never uploaded an avatar).  **Changes**: In Zulip 3.0 (feature level 18), if the client has the &#x60;user_avatar_url_field_optional&#x60; capability, this will be missing at the server&#39;s sole discretion. 
    /// </summary>
    utility::string_t getAvatarUrl() const;
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();

    void setAvatarUrl(const utility::string_t& value);

    /// <summary>
    /// Version for the user&#39;s avatar.  Used for cache-busting requests for the user&#39;s avatar.  Clients generally shouldn&#39;t need to use this; most avatar URLs sent by Zulip will already end with &#x60;?v&#x3D;{avatar_version}&#x60;. 
    /// </summary>
    int32_t getAvatarVersion() const;
    bool avatarVersionIsSet() const;
    void unsetAvatar_version();

    void setAvatarVersion(int32_t value);

    /// <summary>
    /// Full name of the user or bot, used for all display purposes. 
    /// </summary>
    utility::string_t getFullName() const;
    bool fullNameIsSet() const;
    void unsetFull_name();

    void setFullName(const utility::string_t& value);

    /// <summary>
    /// A boolean specifying whether the user is an organization administrator. 
    /// </summary>
    bool isIsAdmin() const;
    bool isAdminIsSet() const;
    void unsetIs_admin();

    void setIsAdmin(bool value);

    /// <summary>
    /// A boolean specifying whether the user is an organization owner. If true, is_admin will also be true.  **Changes**: New in Zulip 3.0 (feature level 8). 
    /// </summary>
    bool isIsOwner() const;
    bool isOwnerIsSet() const;
    void unsetIs_owner();

    void setIsOwner(bool value);

    /// <summary>
    /// A boolean specifying whether the user is a billing administrator.  **Changes**: New in Zulip 5.0 (feature level 73). 
    /// </summary>
    bool isIsBillingAdmin() const;
    bool isBillingAdminIsSet() const;
    void unsetIs_billing_admin();

    void setIsBillingAdmin(bool value);

    /// <summary>
    /// [Organization-level role](/help/roles-and-permissions)) of the user. Poosible values are:  * Organization owner &#x3D;&gt; 100 * Organization administrator &#x3D;&gt; 200 * Organization moderator &#x3D;&gt; 300 * Member &#x3D;&gt; 400 * Guest &#x3D;&gt; 600  **Changes**: New in Zulip 4.0 (feature level 59). 
    /// </summary>
    int32_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();

    void setRole(int32_t value);

    /// <summary>
    /// An integer describing the type of bot: * &#x60;null&#x60; if the user isn&#39;t a bot. * &#x60;1&#x60; for a &#x60;Generic&#x60; bot. * &#x60;2&#x60; for an &#x60;Incoming webhook&#x60; bot. * &#x60;3&#x60; for an &#x60;Outgoing webhook&#x60; bot. * &#x60;4&#x60; for an &#x60;Embedded&#x60; bot. 
    /// </summary>
    int32_t getBotType() const;
    bool botTypeIsSet() const;
    void unsetBot_type();

    void setBotType(int32_t value);

    /// <summary>
    /// The unique ID of the user. 
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(int32_t value);

    /// <summary>
    /// If the user is a bot (i.e. &#x60;is_bot&#x60; is &#x60;True&#x60;), &#x60;bot_owner&#x60; is the user ID of the bot&#39;s owner (usually, whoever created the bot).  Will be null for legacy bots that do not have an owner.  **Changes**: New in Zulip 3.0 (feature level 1).  In previous versions, there was a &#x60;bot_owner&#x60; field containing the email address of the bot&#39;s owner. 
    /// </summary>
    int32_t getBotOwnerId() const;
    bool botOwnerIdIsSet() const;
    void unsetBot_owner_id();

    void setBotOwnerId(int32_t value);

    /// <summary>
    /// A boolean specifying whether the user account has been deactivated. 
    /// </summary>
    bool isIsActive() const;
    bool isActiveIsSet() const;
    void unsetIs_active();

    void setIsActive(bool value);

    /// <summary>
    /// A boolean specifying whether the user is a guest user. 
    /// </summary>
    bool isIsGuest() const;
    bool isGuestIsSet() const;
    void unsetIs_guest();

    void setIsGuest(bool value);

    /// <summary>
    /// The time zone of the user. 
    /// </summary>
    utility::string_t getTimezone() const;
    bool timezoneIsSet() const;
    void unsetTimezone();

    void setTimezone(const utility::string_t& value);

    /// <summary>
    /// The time the user account was created. 
    /// </summary>
    utility::string_t getDateJoined() const;
    bool dateJoinedIsSet() const;
    void unsetDate_joined();

    void setDateJoined(const utility::string_t& value);

    /// <summary>
    /// The user&#39;s real email address.  This field is present only if [email address visibility](/help/restrict-visibility-of-email-addresses) is limited and you are an administrator with access to real email addresses under the configured policy. 
    /// </summary>
    utility::string_t getDeliveryEmail() const;
    bool deliveryEmailIsSet() const;
    void unsetDelivery_email();

    void setDeliveryEmail(const utility::string_t& value);

    /// <summary>
    /// A dictionary containing custom profile field data for the user. Each entry maps the integer ID of a custom profile field in the organization to a dictionary containing the user&#39;s data for that field.  Generally the data includes just a single &#x60;value&#x60; key; for those custom profile fields supporting Markdown, a &#x60;rendered_value&#x60; key will also be present. 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Object>>& getProfileData();
    bool profileDataIsSet() const;
    void unsetProfile_data();

    void setProfileData(const std::map<utility::string_t, std::shared_ptr<Object>>& value);


protected:
    utility::string_t m_Email;
    bool m_EmailIsSet;
    bool m_Is_bot;
    bool m_Is_botIsSet;
    utility::string_t m_Avatar_url;
    bool m_Avatar_urlIsSet;
    int32_t m_Avatar_version;
    bool m_Avatar_versionIsSet;
    utility::string_t m_Full_name;
    bool m_Full_nameIsSet;
    bool m_Is_admin;
    bool m_Is_adminIsSet;
    bool m_Is_owner;
    bool m_Is_ownerIsSet;
    bool m_Is_billing_admin;
    bool m_Is_billing_adminIsSet;
    int32_t m_Role;
    bool m_RoleIsSet;
    int32_t m_Bot_type;
    bool m_Bot_typeIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
    int32_t m_Bot_owner_id;
    bool m_Bot_owner_idIsSet;
    bool m_Is_active;
    bool m_Is_activeIsSet;
    bool m_Is_guest;
    bool m_Is_guestIsSet;
    utility::string_t m_Timezone;
    bool m_TimezoneIsSet;
    utility::string_t m_Date_joined;
    bool m_Date_joinedIsSet;
    utility::string_t m_Delivery_email;
    bool m_Delivery_emailIsSet;
    std::map<utility::string_t, std::shared_ptr<Object>> m_Profile_data;
    bool m_Profile_dataIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UserBase_H_ */
