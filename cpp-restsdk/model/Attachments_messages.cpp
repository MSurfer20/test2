/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Attachments_messages.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Attachments_messages::Attachments_messages()
{
    m_Date_sent = 0;
    m_Date_sentIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
}

Attachments_messages::~Attachments_messages()
{
}

void Attachments_messages::validate()
{
    // TODO: implement validation
}

web::json::value Attachments_messages::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Date_sentIsSet)
    {
        val[utility::conversions::to_string_t("date_sent")] = ModelBase::toJson(m_Date_sent);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool Attachments_messages::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("date_sent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_sent"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_date_sent;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_sent);
            setDateSent(refVal_date_sent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    return ok;
}

void Attachments_messages::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Date_sentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_sent"), m_Date_sent));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
}

bool Attachments_messages::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("date_sent")))
    {
        int32_t refVal_date_sent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_sent")), refVal_date_sent );
        setDateSent(refVal_date_sent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        int32_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    return ok;
}

int32_t Attachments_messages::getDateSent() const
{
    return m_Date_sent;
}

void Attachments_messages::setDateSent(int32_t value)
{
    m_Date_sent = value;
    m_Date_sentIsSet = true;
}

bool Attachments_messages::dateSentIsSet() const
{
    return m_Date_sentIsSet;
}

void Attachments_messages::unsetDate_sent()
{
    m_Date_sentIsSet = false;
}
int32_t Attachments_messages::getId() const
{
    return m_Id;
}

void Attachments_messages::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Attachments_messages::idIsSet() const
{
    return m_IdIsSet;
}

void Attachments_messages::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


