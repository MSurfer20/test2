/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Messages.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Messages_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Messages_H_


#include "../ModelBase.h"

#include "Messages_allOf.h"
#include "MessagesBase.h"
#include "AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Messages
    : public ModelBase
{
public:
    Messages();
    virtual ~Messages();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Messages members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getAvatarUrl() const;
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();

    void setAvatarUrl(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getClient() const;
    bool clientIsSet() const;
    void unsetClient();

    void setClient(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContent() const;
    bool contentIsSet() const;
    void unsetContent();

    void setContent(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getContentType() const;
    bool contentTypeIsSet() const;
    void unsetContent_type();

    void setContentType(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getDisplayRecipient() const;
    bool displayRecipientIsSet() const;
    void unsetDisplay_recipient();

    void setDisplayRecipient(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getIsMeMessage() const;
    bool isMeMessageIsSet() const;
    void unsetIs_me_message();

    void setIsMeMessage(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getReactions() const;
    bool reactionsIsSet() const;
    void unsetReactions();

    void setReactions(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getRecipientId() const;
    bool recipientIdIsSet() const;
    void unsetRecipient_id();

    void setRecipientId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderEmail() const;
    bool senderEmailIsSet() const;
    void unsetSender_email();

    void setSenderEmail(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderFullName() const;
    bool senderFullNameIsSet() const;
    void unsetSender_full_name();

    void setSenderFullName(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderId() const;
    bool senderIdIsSet() const;
    void unsetSender_id();

    void setSenderId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSenderRealmStr() const;
    bool senderRealmStrIsSet() const;
    void unsetSender_realm_str();

    void setSenderRealmStr(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getStreamId() const;
    bool streamIdIsSet() const;
    void unsetStream_id();

    void setStreamId(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTopicLinks() const;
    bool topicLinksIsSet() const;
    void unsetTopic_links();

    void setTopicLinks(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getSubmessages() const;
    bool submessagesIsSet() const;
    void unsetSubmessages();

    void setSubmessages(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const std::shared_ptr<AnyType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AnyType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<AnyType>& value);


protected:
    std::shared_ptr<AnyType> m_Avatar_url;
    bool m_Avatar_urlIsSet;
    std::shared_ptr<AnyType> m_Client;
    bool m_ClientIsSet;
    std::shared_ptr<AnyType> m_Content;
    bool m_ContentIsSet;
    std::shared_ptr<AnyType> m_Content_type;
    bool m_Content_typeIsSet;
    std::shared_ptr<AnyType> m_Display_recipient;
    bool m_Display_recipientIsSet;
    std::shared_ptr<AnyType> m_Id;
    bool m_IdIsSet;
    std::shared_ptr<AnyType> m_Is_me_message;
    bool m_Is_me_messageIsSet;
    std::shared_ptr<AnyType> m_Reactions;
    bool m_ReactionsIsSet;
    std::shared_ptr<AnyType> m_Recipient_id;
    bool m_Recipient_idIsSet;
    std::shared_ptr<AnyType> m_Sender_email;
    bool m_Sender_emailIsSet;
    std::shared_ptr<AnyType> m_Sender_full_name;
    bool m_Sender_full_nameIsSet;
    std::shared_ptr<AnyType> m_Sender_id;
    bool m_Sender_idIsSet;
    std::shared_ptr<AnyType> m_Sender_realm_str;
    bool m_Sender_realm_strIsSet;
    std::shared_ptr<AnyType> m_Stream_id;
    bool m_Stream_idIsSet;
    std::shared_ptr<AnyType> m_Subject;
    bool m_SubjectIsSet;
    std::shared_ptr<AnyType> m_Topic_links;
    bool m_Topic_linksIsSet;
    std::shared_ptr<AnyType> m_Submessages;
    bool m_SubmessagesIsSet;
    std::shared_ptr<AnyType> m_Timestamp;
    bool m_TimestampIsSet;
    std::shared_ptr<AnyType> m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Messages_H_ */
