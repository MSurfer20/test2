/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BasicStreamBase.h
 *
 * Object containing basic details about the stream. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BasicStreamBase_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BasicStreamBase_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Object containing basic details about the stream. 
/// </summary>
class  BasicStreamBase
    : public ModelBase
{
public:
    BasicStreamBase();
    virtual ~BasicStreamBase();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BasicStreamBase members

    /// <summary>
    /// The unique ID of the stream. 
    /// </summary>
    int32_t getStreamId() const;
    bool streamIdIsSet() const;
    void unsetStream_id();

    void setStreamId(int32_t value);

    /// <summary>
    /// The name of the stream. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream&#39;s description. 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
    /// </summary>
    int32_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDate_created();

    void setDateCreated(int32_t value);

    /// <summary>
    /// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
    /// </summary>
    bool isInviteOnly() const;
    bool inviteOnlyIsSet() const;
    void unsetInvite_only();

    void setInviteOnly(bool value);

    /// <summary>
    /// The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
    /// </summary>
    utility::string_t getRenderedDescription() const;
    bool renderedDescriptionIsSet() const;
    void unsetRendered_description();

    void setRenderedDescription(const utility::string_t& value);

    /// <summary>
    /// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
    /// </summary>
    bool isIsWebPublic() const;
    bool isWebPublicIsSet() const;
    void unsetIs_web_public();

    void setIsWebPublic(bool value);

    /// <summary>
    /// Policy for which users can post messages to the stream.  * 1 &#x3D;&gt; Any user can post. * 2 &#x3D;&gt; Only administrators can post. * 3 &#x3D;&gt; Only full members can post. * 4 &#x3D;&gt; Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous &#x60;is_announcement_only&#x60; boolean. 
    /// </summary>
    int32_t getStreamPostPolicy() const;
    bool streamPostPolicyIsSet() const;
    void unsetStream_post_policy();

    void setStreamPostPolicy(int32_t value);

    /// <summary>
    /// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * &#x60;null&#x60;, the default, means the stream will inherit the organization   level setting. * &#x60;-1&#x60; encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
    /// </summary>
    int32_t getMessageRetentionDays() const;
    bool messageRetentionDaysIsSet() const;
    void unsetMessage_retention_days();

    void setMessageRetentionDays(int32_t value);

    /// <summary>
    /// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only&#x3D;False implies history_public_to_subscribers&#x3D;True), but clients should not make that assumption, as we may change that behavior in the future. 
    /// </summary>
    bool isHistoryPublicToSubscribers() const;
    bool historyPublicToSubscribersIsSet() const;
    void unsetHistory_public_to_subscribers();

    void setHistoryPublicToSubscribers(bool value);

    /// <summary>
    /// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \&quot;more topics\&quot; widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
    /// </summary>
    int32_t getFirstMessageId() const;
    bool firstMessageIdIsSet() const;
    void unsetFirst_message_id();

    void setFirstMessageId(int32_t value);

    /// <summary>
    /// Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use &#x60;stream_post_policy&#x60; instead. 
    /// </summary>
    bool isIsAnnouncementOnly() const;
    bool isAnnouncementOnlyIsSet() const;
    void unsetIs_announcement_only();

    void setIsAnnouncementOnly(bool value);


protected:
    int32_t m_Stream_id;
    bool m_Stream_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Date_created;
    bool m_Date_createdIsSet;
    bool m_Invite_only;
    bool m_Invite_onlyIsSet;
    utility::string_t m_Rendered_description;
    bool m_Rendered_descriptionIsSet;
    bool m_Is_web_public;
    bool m_Is_web_publicIsSet;
    int32_t m_Stream_post_policy;
    bool m_Stream_post_policyIsSet;
    int32_t m_Message_retention_days;
    bool m_Message_retention_daysIsSet;
    bool m_History_public_to_subscribers;
    bool m_History_public_to_subscribersIsSet;
    int32_t m_First_message_id;
    bool m_First_message_idIsSet;
    bool m_Is_announcement_only;
    bool m_Is_announcement_onlyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BasicStreamBase_H_ */
