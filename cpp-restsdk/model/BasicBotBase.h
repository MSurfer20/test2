/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BasicBotBase.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BasicBotBase_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BasicBotBase_H_


#include "../ModelBase.h"

#include "OneOfobjectobject.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  BasicBotBase
    : public ModelBase
{
public:
    BasicBotBase();
    virtual ~BasicBotBase();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BasicBotBase members

    /// <summary>
    /// The user id of the bot. 
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(int32_t value);

    /// <summary>
    /// The full name of the bot. 
    /// </summary>
    utility::string_t getFullName() const;
    bool fullNameIsSet() const;
    void unsetFull_name();

    void setFullName(const utility::string_t& value);

    /// <summary>
    /// The API key of the bot which it uses to make API requests. 
    /// </summary>
    utility::string_t getApiKey() const;
    bool apiKeyIsSet() const;
    void unsetApi_key();

    void setApiKey(const utility::string_t& value);

    /// <summary>
    /// The default sending stream of the bot. Null if the bot doesn&#39;t have a default sending stream. 
    /// </summary>
    utility::string_t getDefaultSendingStream() const;
    bool defaultSendingStreamIsSet() const;
    void unsetDefault_sending_stream();

    void setDefaultSendingStream(const utility::string_t& value);

    /// <summary>
    /// The default stream for which the bot receives events/register data. Null if the bot doesn&#39;t have such a default stream. 
    /// </summary>
    utility::string_t getDefaultEventsRegisterStream() const;
    bool defaultEventsRegisterStreamIsSet() const;
    void unsetDefault_events_register_stream();

    void setDefaultEventsRegisterStream(const utility::string_t& value);

    /// <summary>
    /// Whether the bot can send messages to all streams by default. 
    /// </summary>
    bool isDefaultAllPublicStreams() const;
    bool defaultAllPublicStreamsIsSet() const;
    void unsetDefault_all_public_streams();

    void setDefaultAllPublicStreams(bool value);

    /// <summary>
    /// The URL of the bot&#39;s avatar. 
    /// </summary>
    utility::string_t getAvatarUrl() const;
    bool avatarUrlIsSet() const;
    void unsetAvatar_url();

    void setAvatarUrl(const utility::string_t& value);

    /// <summary>
    /// The user id of the bot&#39;s owner.  Null if the bot has no owner. 
    /// </summary>
    int32_t getOwnerId() const;
    bool ownerIdIsSet() const;
    void unsetOwner_id();

    void setOwnerId(int32_t value);

    /// <summary>
    /// The \&quot;Services\&quot; array contains extra configuration fields only relevant for Outgoing webhook bots and Embedded bots.  It is always a single-element array.  We consider this part of the Zulip API to be unstable; it is used only for UI elements for administering bots and is likely to change. 
    /// </summary>
    std::vector<std::shared_ptr<OneOfobjectobject>>& getServices();
    bool servicesIsSet() const;
    void unsetServices();

    void setServices(const std::vector<std::shared_ptr<OneOfobjectobject>>& value);


protected:
    int32_t m_User_id;
    bool m_User_idIsSet;
    utility::string_t m_Full_name;
    bool m_Full_nameIsSet;
    utility::string_t m_Api_key;
    bool m_Api_keyIsSet;
    utility::string_t m_Default_sending_stream;
    bool m_Default_sending_streamIsSet;
    utility::string_t m_Default_events_register_stream;
    bool m_Default_events_register_streamIsSet;
    bool m_Default_all_public_streams;
    bool m_Default_all_public_streamsIsSet;
    utility::string_t m_Avatar_url;
    bool m_Avatar_urlIsSet;
    int32_t m_Owner_id;
    bool m_Owner_idIsSet;
    std::vector<std::shared_ptr<OneOfobjectobject>> m_Services;
    bool m_ServicesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BasicBotBase_H_ */
