/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Subscriptions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Subscriptions::Subscriptions()
{
    m_Stream_id = 0;
    m_Stream_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Rendered_description = utility::conversions::to_string_t("");
    m_Rendered_descriptionIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Invite_only = false;
    m_Invite_onlyIsSet = false;
    m_SubscribersIsSet = false;
    m_Desktop_notifications = false;
    m_Desktop_notificationsIsSet = false;
    m_Email_notifications = false;
    m_Email_notificationsIsSet = false;
    m_Wildcard_mentions_notify = false;
    m_Wildcard_mentions_notifyIsSet = false;
    m_Push_notifications = false;
    m_Push_notificationsIsSet = false;
    m_Audible_notifications = false;
    m_Audible_notificationsIsSet = false;
    m_Pin_to_top = false;
    m_Pin_to_topIsSet = false;
    m_Email_address = utility::conversions::to_string_t("");
    m_Email_addressIsSet = false;
    m_Is_muted = false;
    m_Is_mutedIsSet = false;
    m_In_home_view = false;
    m_In_home_viewIsSet = false;
    m_Is_announcement_only = false;
    m_Is_announcement_onlyIsSet = false;
    m_Is_web_public = false;
    m_Is_web_publicIsSet = false;
    m_Role = 0;
    m_RoleIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_Stream_post_policy = 0;
    m_Stream_post_policyIsSet = false;
    m_Message_retention_days = 0;
    m_Message_retention_daysIsSet = false;
    m_History_public_to_subscribers = false;
    m_History_public_to_subscribersIsSet = false;
    m_First_message_id = 0;
    m_First_message_idIsSet = false;
    m_Stream_weekly_traffic = 0;
    m_Stream_weekly_trafficIsSet = false;
}

Subscriptions::~Subscriptions()
{
}

void Subscriptions::validate()
{
    // TODO: implement validation
}

web::json::value Subscriptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Stream_idIsSet)
    {
        val[utility::conversions::to_string_t("stream_id")] = ModelBase::toJson(m_Stream_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Rendered_descriptionIsSet)
    {
        val[utility::conversions::to_string_t("rendered_description")] = ModelBase::toJson(m_Rendered_description);
    }
    if(m_Date_createdIsSet)
    {
        val[utility::conversions::to_string_t("date_created")] = ModelBase::toJson(m_Date_created);
    }
    if(m_Invite_onlyIsSet)
    {
        val[utility::conversions::to_string_t("invite_only")] = ModelBase::toJson(m_Invite_only);
    }
    if(m_SubscribersIsSet)
    {
        val[utility::conversions::to_string_t("subscribers")] = ModelBase::toJson(m_Subscribers);
    }
    if(m_Desktop_notificationsIsSet)
    {
        val[utility::conversions::to_string_t("desktop_notifications")] = ModelBase::toJson(m_Desktop_notifications);
    }
    if(m_Email_notificationsIsSet)
    {
        val[utility::conversions::to_string_t("email_notifications")] = ModelBase::toJson(m_Email_notifications);
    }
    if(m_Wildcard_mentions_notifyIsSet)
    {
        val[utility::conversions::to_string_t("wildcard_mentions_notify")] = ModelBase::toJson(m_Wildcard_mentions_notify);
    }
    if(m_Push_notificationsIsSet)
    {
        val[utility::conversions::to_string_t("push_notifications")] = ModelBase::toJson(m_Push_notifications);
    }
    if(m_Audible_notificationsIsSet)
    {
        val[utility::conversions::to_string_t("audible_notifications")] = ModelBase::toJson(m_Audible_notifications);
    }
    if(m_Pin_to_topIsSet)
    {
        val[utility::conversions::to_string_t("pin_to_top")] = ModelBase::toJson(m_Pin_to_top);
    }
    if(m_Email_addressIsSet)
    {
        val[utility::conversions::to_string_t("email_address")] = ModelBase::toJson(m_Email_address);
    }
    if(m_Is_mutedIsSet)
    {
        val[utility::conversions::to_string_t("is_muted")] = ModelBase::toJson(m_Is_muted);
    }
    if(m_In_home_viewIsSet)
    {
        val[utility::conversions::to_string_t("in_home_view")] = ModelBase::toJson(m_In_home_view);
    }
    if(m_Is_announcement_onlyIsSet)
    {
        val[utility::conversions::to_string_t("is_announcement_only")] = ModelBase::toJson(m_Is_announcement_only);
    }
    if(m_Is_web_publicIsSet)
    {
        val[utility::conversions::to_string_t("is_web_public")] = ModelBase::toJson(m_Is_web_public);
    }
    if(m_RoleIsSet)
    {
        val[utility::conversions::to_string_t("role")] = ModelBase::toJson(m_Role);
    }
    if(m_ColorIsSet)
    {
        val[utility::conversions::to_string_t("color")] = ModelBase::toJson(m_Color);
    }
    if(m_Stream_post_policyIsSet)
    {
        val[utility::conversions::to_string_t("stream_post_policy")] = ModelBase::toJson(m_Stream_post_policy);
    }
    if(m_Message_retention_daysIsSet)
    {
        val[utility::conversions::to_string_t("message_retention_days")] = ModelBase::toJson(m_Message_retention_days);
    }
    if(m_History_public_to_subscribersIsSet)
    {
        val[utility::conversions::to_string_t("history_public_to_subscribers")] = ModelBase::toJson(m_History_public_to_subscribers);
    }
    if(m_First_message_idIsSet)
    {
        val[utility::conversions::to_string_t("first_message_id")] = ModelBase::toJson(m_First_message_id);
    }
    if(m_Stream_weekly_trafficIsSet)
    {
        val[utility::conversions::to_string_t("stream_weekly_traffic")] = ModelBase::toJson(m_Stream_weekly_traffic);
    }

    return val;
}

bool Subscriptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("stream_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stream_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_id);
            setStreamId(refVal_stream_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rendered_description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rendered_description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rendered_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_rendered_description);
            setRenderedDescription(refVal_rendered_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_created"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_date_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_created);
            setDateCreated(refVal_date_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("invite_only")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("invite_only"));
        if(!fieldValue.is_null())
        {
            bool refVal_invite_only;
            ok &= ModelBase::fromJson(fieldValue, refVal_invite_only);
            setInviteOnly(refVal_invite_only);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subscribers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subscribers"));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_subscribers;
            ok &= ModelBase::fromJson(fieldValue, refVal_subscribers);
            setSubscribers(refVal_subscribers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("desktop_notifications")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("desktop_notifications"));
        if(!fieldValue.is_null())
        {
            bool refVal_desktop_notifications;
            ok &= ModelBase::fromJson(fieldValue, refVal_desktop_notifications);
            setDesktopNotifications(refVal_desktop_notifications);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email_notifications")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email_notifications"));
        if(!fieldValue.is_null())
        {
            bool refVal_email_notifications;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_notifications);
            setEmailNotifications(refVal_email_notifications);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("wildcard_mentions_notify")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("wildcard_mentions_notify"));
        if(!fieldValue.is_null())
        {
            bool refVal_wildcard_mentions_notify;
            ok &= ModelBase::fromJson(fieldValue, refVal_wildcard_mentions_notify);
            setWildcardMentionsNotify(refVal_wildcard_mentions_notify);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("push_notifications")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("push_notifications"));
        if(!fieldValue.is_null())
        {
            bool refVal_push_notifications;
            ok &= ModelBase::fromJson(fieldValue, refVal_push_notifications);
            setPushNotifications(refVal_push_notifications);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("audible_notifications")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("audible_notifications"));
        if(!fieldValue.is_null())
        {
            bool refVal_audible_notifications;
            ok &= ModelBase::fromJson(fieldValue, refVal_audible_notifications);
            setAudibleNotifications(refVal_audible_notifications);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pin_to_top")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pin_to_top"));
        if(!fieldValue.is_null())
        {
            bool refVal_pin_to_top;
            ok &= ModelBase::fromJson(fieldValue, refVal_pin_to_top);
            setPinToTop(refVal_pin_to_top);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email_address")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email_address"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email_address;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_address);
            setEmailAddress(refVal_email_address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_muted")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_muted"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_muted;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_muted);
            setIsMuted(refVal_is_muted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("in_home_view")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("in_home_view"));
        if(!fieldValue.is_null())
        {
            bool refVal_in_home_view;
            ok &= ModelBase::fromJson(fieldValue, refVal_in_home_view);
            setInHomeView(refVal_in_home_view);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_announcement_only")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_announcement_only"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_announcement_only;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_announcement_only);
            setIsAnnouncementOnly(refVal_is_announcement_only);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_web_public")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_web_public"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_web_public;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_web_public);
            setIsWebPublic(refVal_is_web_public);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("role")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("role"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_role;
            ok &= ModelBase::fromJson(fieldValue, refVal_role);
            setRole(refVal_role);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("color")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("color"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_color;
            ok &= ModelBase::fromJson(fieldValue, refVal_color);
            setColor(refVal_color);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stream_post_policy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_post_policy"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stream_post_policy;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_post_policy);
            setStreamPostPolicy(refVal_stream_post_policy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message_retention_days")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message_retention_days"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_message_retention_days;
            ok &= ModelBase::fromJson(fieldValue, refVal_message_retention_days);
            setMessageRetentionDays(refVal_message_retention_days);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("history_public_to_subscribers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("history_public_to_subscribers"));
        if(!fieldValue.is_null())
        {
            bool refVal_history_public_to_subscribers;
            ok &= ModelBase::fromJson(fieldValue, refVal_history_public_to_subscribers);
            setHistoryPublicToSubscribers(refVal_history_public_to_subscribers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("first_message_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("first_message_id"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_first_message_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_first_message_id);
            setFirstMessageId(refVal_first_message_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("stream_weekly_traffic")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("stream_weekly_traffic"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_stream_weekly_traffic;
            ok &= ModelBase::fromJson(fieldValue, refVal_stream_weekly_traffic);
            setStreamWeeklyTraffic(refVal_stream_weekly_traffic);
        }
    }
    return ok;
}

void Subscriptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Stream_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_id"), m_Stream_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_Rendered_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rendered_description"), m_Rendered_description));
    }
    if(m_Date_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_created"), m_Date_created));
    }
    if(m_Invite_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("invite_only"), m_Invite_only));
    }
    if(m_SubscribersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subscribers"), m_Subscribers));
    }
    if(m_Desktop_notificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("desktop_notifications"), m_Desktop_notifications));
    }
    if(m_Email_notificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email_notifications"), m_Email_notifications));
    }
    if(m_Wildcard_mentions_notifyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("wildcard_mentions_notify"), m_Wildcard_mentions_notify));
    }
    if(m_Push_notificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("push_notifications"), m_Push_notifications));
    }
    if(m_Audible_notificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("audible_notifications"), m_Audible_notifications));
    }
    if(m_Pin_to_topIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pin_to_top"), m_Pin_to_top));
    }
    if(m_Email_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email_address"), m_Email_address));
    }
    if(m_Is_mutedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_muted"), m_Is_muted));
    }
    if(m_In_home_viewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("in_home_view"), m_In_home_view));
    }
    if(m_Is_announcement_onlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_announcement_only"), m_Is_announcement_only));
    }
    if(m_Is_web_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_web_public"), m_Is_web_public));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("role"), m_Role));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("color"), m_Color));
    }
    if(m_Stream_post_policyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_post_policy"), m_Stream_post_policy));
    }
    if(m_Message_retention_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message_retention_days"), m_Message_retention_days));
    }
    if(m_History_public_to_subscribersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("history_public_to_subscribers"), m_History_public_to_subscribers));
    }
    if(m_First_message_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("first_message_id"), m_First_message_id));
    }
    if(m_Stream_weekly_trafficIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("stream_weekly_traffic"), m_Stream_weekly_traffic));
    }
}

bool Subscriptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("stream_id")))
    {
        int32_t refVal_stream_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_id")), refVal_stream_id );
        setStreamId(refVal_stream_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rendered_description")))
    {
        utility::string_t refVal_rendered_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rendered_description")), refVal_rendered_description );
        setRenderedDescription(refVal_rendered_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_created")))
    {
        int32_t refVal_date_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_created")), refVal_date_created );
        setDateCreated(refVal_date_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("invite_only")))
    {
        bool refVal_invite_only;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("invite_only")), refVal_invite_only );
        setInviteOnly(refVal_invite_only);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subscribers")))
    {
        std::vector<int32_t> refVal_subscribers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subscribers")), refVal_subscribers );
        setSubscribers(refVal_subscribers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("desktop_notifications")))
    {
        bool refVal_desktop_notifications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("desktop_notifications")), refVal_desktop_notifications );
        setDesktopNotifications(refVal_desktop_notifications);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email_notifications")))
    {
        bool refVal_email_notifications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email_notifications")), refVal_email_notifications );
        setEmailNotifications(refVal_email_notifications);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("wildcard_mentions_notify")))
    {
        bool refVal_wildcard_mentions_notify;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("wildcard_mentions_notify")), refVal_wildcard_mentions_notify );
        setWildcardMentionsNotify(refVal_wildcard_mentions_notify);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("push_notifications")))
    {
        bool refVal_push_notifications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("push_notifications")), refVal_push_notifications );
        setPushNotifications(refVal_push_notifications);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("audible_notifications")))
    {
        bool refVal_audible_notifications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("audible_notifications")), refVal_audible_notifications );
        setAudibleNotifications(refVal_audible_notifications);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pin_to_top")))
    {
        bool refVal_pin_to_top;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pin_to_top")), refVal_pin_to_top );
        setPinToTop(refVal_pin_to_top);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email_address")))
    {
        utility::string_t refVal_email_address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email_address")), refVal_email_address );
        setEmailAddress(refVal_email_address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_muted")))
    {
        bool refVal_is_muted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_muted")), refVal_is_muted );
        setIsMuted(refVal_is_muted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("in_home_view")))
    {
        bool refVal_in_home_view;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("in_home_view")), refVal_in_home_view );
        setInHomeView(refVal_in_home_view);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_announcement_only")))
    {
        bool refVal_is_announcement_only;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_announcement_only")), refVal_is_announcement_only );
        setIsAnnouncementOnly(refVal_is_announcement_only);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_web_public")))
    {
        bool refVal_is_web_public;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_web_public")), refVal_is_web_public );
        setIsWebPublic(refVal_is_web_public);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("role")))
    {
        int32_t refVal_role;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("role")), refVal_role );
        setRole(refVal_role);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("color")))
    {
        utility::string_t refVal_color;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("color")), refVal_color );
        setColor(refVal_color);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stream_post_policy")))
    {
        int32_t refVal_stream_post_policy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_post_policy")), refVal_stream_post_policy );
        setStreamPostPolicy(refVal_stream_post_policy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message_retention_days")))
    {
        int32_t refVal_message_retention_days;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message_retention_days")), refVal_message_retention_days );
        setMessageRetentionDays(refVal_message_retention_days);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("history_public_to_subscribers")))
    {
        bool refVal_history_public_to_subscribers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("history_public_to_subscribers")), refVal_history_public_to_subscribers );
        setHistoryPublicToSubscribers(refVal_history_public_to_subscribers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("first_message_id")))
    {
        int32_t refVal_first_message_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("first_message_id")), refVal_first_message_id );
        setFirstMessageId(refVal_first_message_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("stream_weekly_traffic")))
    {
        int32_t refVal_stream_weekly_traffic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("stream_weekly_traffic")), refVal_stream_weekly_traffic );
        setStreamWeeklyTraffic(refVal_stream_weekly_traffic);
    }
    return ok;
}

int32_t Subscriptions::getStreamId() const
{
    return m_Stream_id;
}

void Subscriptions::setStreamId(int32_t value)
{
    m_Stream_id = value;
    m_Stream_idIsSet = true;
}

bool Subscriptions::streamIdIsSet() const
{
    return m_Stream_idIsSet;
}

void Subscriptions::unsetStream_id()
{
    m_Stream_idIsSet = false;
}
utility::string_t Subscriptions::getName() const
{
    return m_Name;
}

void Subscriptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Subscriptions::nameIsSet() const
{
    return m_NameIsSet;
}

void Subscriptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Subscriptions::getDescription() const
{
    return m_Description;
}

void Subscriptions::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Subscriptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Subscriptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Subscriptions::getRenderedDescription() const
{
    return m_Rendered_description;
}

void Subscriptions::setRenderedDescription(const utility::string_t& value)
{
    m_Rendered_description = value;
    m_Rendered_descriptionIsSet = true;
}

bool Subscriptions::renderedDescriptionIsSet() const
{
    return m_Rendered_descriptionIsSet;
}

void Subscriptions::unsetRendered_description()
{
    m_Rendered_descriptionIsSet = false;
}
int32_t Subscriptions::getDateCreated() const
{
    return m_Date_created;
}

void Subscriptions::setDateCreated(int32_t value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}

bool Subscriptions::dateCreatedIsSet() const
{
    return m_Date_createdIsSet;
}

void Subscriptions::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
bool Subscriptions::isInviteOnly() const
{
    return m_Invite_only;
}

void Subscriptions::setInviteOnly(bool value)
{
    m_Invite_only = value;
    m_Invite_onlyIsSet = true;
}

bool Subscriptions::inviteOnlyIsSet() const
{
    return m_Invite_onlyIsSet;
}

void Subscriptions::unsetInvite_only()
{
    m_Invite_onlyIsSet = false;
}
std::vector<int32_t>& Subscriptions::getSubscribers()
{
    return m_Subscribers;
}

void Subscriptions::setSubscribers(std::vector<int32_t> value)
{
    m_Subscribers = value;
    m_SubscribersIsSet = true;
}

bool Subscriptions::subscribersIsSet() const
{
    return m_SubscribersIsSet;
}

void Subscriptions::unsetSubscribers()
{
    m_SubscribersIsSet = false;
}
bool Subscriptions::isDesktopNotifications() const
{
    return m_Desktop_notifications;
}

void Subscriptions::setDesktopNotifications(bool value)
{
    m_Desktop_notifications = value;
    m_Desktop_notificationsIsSet = true;
}

bool Subscriptions::desktopNotificationsIsSet() const
{
    return m_Desktop_notificationsIsSet;
}

void Subscriptions::unsetDesktop_notifications()
{
    m_Desktop_notificationsIsSet = false;
}
bool Subscriptions::isEmailNotifications() const
{
    return m_Email_notifications;
}

void Subscriptions::setEmailNotifications(bool value)
{
    m_Email_notifications = value;
    m_Email_notificationsIsSet = true;
}

bool Subscriptions::emailNotificationsIsSet() const
{
    return m_Email_notificationsIsSet;
}

void Subscriptions::unsetEmail_notifications()
{
    m_Email_notificationsIsSet = false;
}
bool Subscriptions::isWildcardMentionsNotify() const
{
    return m_Wildcard_mentions_notify;
}

void Subscriptions::setWildcardMentionsNotify(bool value)
{
    m_Wildcard_mentions_notify = value;
    m_Wildcard_mentions_notifyIsSet = true;
}

bool Subscriptions::wildcardMentionsNotifyIsSet() const
{
    return m_Wildcard_mentions_notifyIsSet;
}

void Subscriptions::unsetWildcard_mentions_notify()
{
    m_Wildcard_mentions_notifyIsSet = false;
}
bool Subscriptions::isPushNotifications() const
{
    return m_Push_notifications;
}

void Subscriptions::setPushNotifications(bool value)
{
    m_Push_notifications = value;
    m_Push_notificationsIsSet = true;
}

bool Subscriptions::pushNotificationsIsSet() const
{
    return m_Push_notificationsIsSet;
}

void Subscriptions::unsetPush_notifications()
{
    m_Push_notificationsIsSet = false;
}
bool Subscriptions::isAudibleNotifications() const
{
    return m_Audible_notifications;
}

void Subscriptions::setAudibleNotifications(bool value)
{
    m_Audible_notifications = value;
    m_Audible_notificationsIsSet = true;
}

bool Subscriptions::audibleNotificationsIsSet() const
{
    return m_Audible_notificationsIsSet;
}

void Subscriptions::unsetAudible_notifications()
{
    m_Audible_notificationsIsSet = false;
}
bool Subscriptions::isPinToTop() const
{
    return m_Pin_to_top;
}

void Subscriptions::setPinToTop(bool value)
{
    m_Pin_to_top = value;
    m_Pin_to_topIsSet = true;
}

bool Subscriptions::pinToTopIsSet() const
{
    return m_Pin_to_topIsSet;
}

void Subscriptions::unsetPin_to_top()
{
    m_Pin_to_topIsSet = false;
}
utility::string_t Subscriptions::getEmailAddress() const
{
    return m_Email_address;
}

void Subscriptions::setEmailAddress(const utility::string_t& value)
{
    m_Email_address = value;
    m_Email_addressIsSet = true;
}

bool Subscriptions::emailAddressIsSet() const
{
    return m_Email_addressIsSet;
}

void Subscriptions::unsetEmail_address()
{
    m_Email_addressIsSet = false;
}
bool Subscriptions::isIsMuted() const
{
    return m_Is_muted;
}

void Subscriptions::setIsMuted(bool value)
{
    m_Is_muted = value;
    m_Is_mutedIsSet = true;
}

bool Subscriptions::isMutedIsSet() const
{
    return m_Is_mutedIsSet;
}

void Subscriptions::unsetIs_muted()
{
    m_Is_mutedIsSet = false;
}
bool Subscriptions::isInHomeView() const
{
    return m_In_home_view;
}

void Subscriptions::setInHomeView(bool value)
{
    m_In_home_view = value;
    m_In_home_viewIsSet = true;
}

bool Subscriptions::inHomeViewIsSet() const
{
    return m_In_home_viewIsSet;
}

void Subscriptions::unsetIn_home_view()
{
    m_In_home_viewIsSet = false;
}
bool Subscriptions::isIsAnnouncementOnly() const
{
    return m_Is_announcement_only;
}

void Subscriptions::setIsAnnouncementOnly(bool value)
{
    m_Is_announcement_only = value;
    m_Is_announcement_onlyIsSet = true;
}

bool Subscriptions::isAnnouncementOnlyIsSet() const
{
    return m_Is_announcement_onlyIsSet;
}

void Subscriptions::unsetIs_announcement_only()
{
    m_Is_announcement_onlyIsSet = false;
}
bool Subscriptions::isIsWebPublic() const
{
    return m_Is_web_public;
}

void Subscriptions::setIsWebPublic(bool value)
{
    m_Is_web_public = value;
    m_Is_web_publicIsSet = true;
}

bool Subscriptions::isWebPublicIsSet() const
{
    return m_Is_web_publicIsSet;
}

void Subscriptions::unsetIs_web_public()
{
    m_Is_web_publicIsSet = false;
}
int32_t Subscriptions::getRole() const
{
    return m_Role;
}

void Subscriptions::setRole(int32_t value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool Subscriptions::roleIsSet() const
{
    return m_RoleIsSet;
}

void Subscriptions::unsetRole()
{
    m_RoleIsSet = false;
}
utility::string_t Subscriptions::getColor() const
{
    return m_Color;
}

void Subscriptions::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool Subscriptions::colorIsSet() const
{
    return m_ColorIsSet;
}

void Subscriptions::unsetColor()
{
    m_ColorIsSet = false;
}
int32_t Subscriptions::getStreamPostPolicy() const
{
    return m_Stream_post_policy;
}

void Subscriptions::setStreamPostPolicy(int32_t value)
{
    m_Stream_post_policy = value;
    m_Stream_post_policyIsSet = true;
}

bool Subscriptions::streamPostPolicyIsSet() const
{
    return m_Stream_post_policyIsSet;
}

void Subscriptions::unsetStream_post_policy()
{
    m_Stream_post_policyIsSet = false;
}
int32_t Subscriptions::getMessageRetentionDays() const
{
    return m_Message_retention_days;
}

void Subscriptions::setMessageRetentionDays(int32_t value)
{
    m_Message_retention_days = value;
    m_Message_retention_daysIsSet = true;
}

bool Subscriptions::messageRetentionDaysIsSet() const
{
    return m_Message_retention_daysIsSet;
}

void Subscriptions::unsetMessage_retention_days()
{
    m_Message_retention_daysIsSet = false;
}
bool Subscriptions::isHistoryPublicToSubscribers() const
{
    return m_History_public_to_subscribers;
}

void Subscriptions::setHistoryPublicToSubscribers(bool value)
{
    m_History_public_to_subscribers = value;
    m_History_public_to_subscribersIsSet = true;
}

bool Subscriptions::historyPublicToSubscribersIsSet() const
{
    return m_History_public_to_subscribersIsSet;
}

void Subscriptions::unsetHistory_public_to_subscribers()
{
    m_History_public_to_subscribersIsSet = false;
}
int32_t Subscriptions::getFirstMessageId() const
{
    return m_First_message_id;
}

void Subscriptions::setFirstMessageId(int32_t value)
{
    m_First_message_id = value;
    m_First_message_idIsSet = true;
}

bool Subscriptions::firstMessageIdIsSet() const
{
    return m_First_message_idIsSet;
}

void Subscriptions::unsetFirst_message_id()
{
    m_First_message_idIsSet = false;
}
int32_t Subscriptions::getStreamWeeklyTraffic() const
{
    return m_Stream_weekly_traffic;
}

void Subscriptions::setStreamWeeklyTraffic(int32_t value)
{
    m_Stream_weekly_traffic = value;
    m_Stream_weekly_trafficIsSet = true;
}

bool Subscriptions::streamWeeklyTrafficIsSet() const
{
    return m_Stream_weekly_trafficIsSet;
}

void Subscriptions::unsetStream_weekly_traffic()
{
    m_Stream_weekly_trafficIsSet = false;
}
}
}
}
}


