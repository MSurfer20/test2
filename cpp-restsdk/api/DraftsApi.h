/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DraftsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DraftsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DraftsApi_H_


#include "../ApiClient.h"

#include "CodedError.h"
#include "Draft.h"
#include "JsonError.h"
#include "JsonSuccess.h"


#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DraftsApi 
{
public:

    explicit DraftsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DraftsApi();

    /// <summary>
    /// Create drafts
    /// </summary>
    /// <remarks>
    /// Create one or more drafts on the server. These drafts will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;POST {{ api_url }}/v1/drafts&#x60; 
    /// </remarks>
    /// <param name="drafts">A JSON-encoded list of containing new draft objects.  (optional, default to std::vector&lt;std::shared_ptr&lt;Draft&gt;&gt;())</param>
    pplx::task<std::shared_ptr<JsonSuccess>> createDrafts(
        boost::optional<std::vector<std::shared_ptr<Draft>>> drafts
    ) const;
    /// <summary>
    /// Delete a draft
    /// </summary>
    /// <remarks>
    /// Delete a single draft from the server. The deletion will be automatically synchronized to other clients via a &#x60;drafts&#x60; event.  &#x60;DELETE {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    /// </remarks>
    /// <param name="draftId">The ID of the draft you want to delete. </param>
    pplx::task<std::shared_ptr<JsonSuccess>> deleteDraft(
        int32_t draftId
    ) const;
    /// <summary>
    /// Edit a draft
    /// </summary>
    /// <remarks>
    /// Edit a draft on the server. The edit will be automatically synchronized to other clients via &#x60;drafts&#x60; events.  &#x60;PATCH {{ api_url }}/v1/drafts/{draft_id}&#x60; 
    /// </remarks>
    /// <param name="draftId">The ID of the draft to be edited. </param>
    /// <param name="draft">A JSON-encoded object containing a replacement draft object for this ID. </param>
    pplx::task<std::shared_ptr<JsonSuccess>> editDraft(
        int32_t draftId,
        std::shared_ptr<Draft> draft
    ) const;
    /// <summary>
    /// Get drafts
    /// </summary>
    /// <remarks>
    /// Fetch all drafts for the current user.  &#x60;GET {{ api_url }}/v1/drafts&#x60; 
    /// </remarks>
    pplx::task<std::shared_ptr<JsonSuccess>> getDrafts(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DraftsApi_H_ */

