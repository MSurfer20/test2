#
# Zulip REST API
# 
# Powerful open source group chat 
# The version of the OpenAPI document: 1.0.0
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_coded_error
import ../models/model_draft
import ../models/model_json_error
import ../models/model_json_success

const basepath = "https://example.zulipchat.com/api/v1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createDrafts*(httpClient: HttpClient, drafts: seq[Draft]): (Option[JsonSuccess], Response) =
  ## Create drafts
  let query_for_api_call = encodeQuery([
    ("drafts", $drafts.join(",")), # A JSON-encoded list of containing new draft objects. 
  ])

  let response = httpClient.post(basepath & "/drafts" & "?" & query_for_api_call)
  constructResult[JsonSuccess](response)


proc deleteDraft*(httpClient: HttpClient, draftId: int): (Option[JsonSuccess], Response) =
  ## Delete a draft

  let response = httpClient.delete(basepath & fmt"/drafts/{draft_id}")
  constructResult[JsonSuccess](response)


proc editDraft*(httpClient: HttpClient, draftId: int, draft: Draft): (Option[JsonSuccess], Response) =
  ## Edit a draft
  let query_for_api_call = encodeQuery([
    ("draft", $draft), # A JSON-encoded object containing a replacement draft object for this ID. 
  ])

  let response = httpClient.patch(basepath & fmt"/drafts/{draft_id}" & "?" & query_for_api_call)
  constructResult[JsonSuccess](response)


proc getDrafts*(httpClient: HttpClient): (Option[JsonSuccess], Response) =
  ## Get drafts

  let response = httpClient.get(basepath & "/drafts")
  constructResult[JsonSuccess](response)

