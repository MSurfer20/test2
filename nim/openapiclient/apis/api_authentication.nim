#
# Zulip REST API
# 
# Powerful open source group chat 
# The version of the OpenAPI document: 1.0.0
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_key_response

const basepath = "https://example.zulipchat.com/api/v1"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc devFetchApiKey*(httpClient: HttpClient, username: string): (Option[ApiKeyResponse], Response) =
  ## Fetch an API key (development only)
  let query_for_api_call = encodeQuery([
    ("username", $username), # The email address for the user that owns the API key. 
  ])

  let response = httpClient.post(basepath & "/dev_fetch_api_key" & "?" & query_for_api_call)
  constructResult[ApiKeyResponse](response)


proc fetchApiKey*(httpClient: HttpClient, username: string, password: string): (Option[ApiKeyResponse], Response) =
  ## Fetch an API key (production)
  let query_for_api_call = encodeQuery([
    ("username", $username), # The username to be used for authentication (typically, the email address, but depending on configuration, it could be an LDAP username).  See the `require_email_format_usernames` parameter documented in [GET /server_settings](/api/get-server-settings) for details. 
    ("password", $password), # The user's Zulip password (or LDAP password, if LDAP authentication is in use). 
  ])

  let response = httpClient.post(basepath & "/fetch_api_key" & "?" & query_for_api_call)
  constructResult[ApiKeyResponse](response)

