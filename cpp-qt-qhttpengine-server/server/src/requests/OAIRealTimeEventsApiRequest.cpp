/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIRealTimeEventsApiRequest.h"

namespace OpenAPI {

OAIRealTimeEventsApiRequest::OAIRealTimeEventsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRealTimeEventsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIRealTimeEventsApiRequest::~OAIRealTimeEventsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIRealTimeEventsApiRequest::~OAIRealTimeEventsApiRequest()";
}

QMap<QString, QString>
OAIRealTimeEventsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIRealTimeEventsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIRealTimeEventsApiRequest::getRawSocket(){
    return socket;
}


void OAIRealTimeEventsApiRequest::deleteQueueRequest(){
    qDebug() << "/api/v1/events";
    connect(this, &OAIRealTimeEventsApiRequest::deleteQueue, handler.data(), &OAIRealTimeEventsApiHandler::deleteQueue);

    
    QString queue_id;
    if(socket->queryString().keys().contains("queue_id")){
        fromStringValue(socket->queryString().value("queue_id"), queue_id);
    }
    


    emit deleteQueue(queue_id);
}


void OAIRealTimeEventsApiRequest::getEventsRequest(){
    qDebug() << "/api/v1/events";
    connect(this, &OAIRealTimeEventsApiRequest::getEvents, handler.data(), &OAIRealTimeEventsApiHandler::getEvents);

    
    QString queue_id;
    if(socket->queryString().keys().contains("queue_id")){
        fromStringValue(socket->queryString().value("queue_id"), queue_id);
    }
    
    qint32 last_event_id;
    if(socket->queryString().keys().contains("last_event_id")){
        fromStringValue(socket->queryString().value("last_event_id"), last_event_id);
    }
    
    bool dont_block;
    if(socket->queryString().keys().contains("dont_block")){
        fromStringValue(socket->queryString().value("dont_block"), dont_block);
    }
    


    emit getEvents(queue_id, last_event_id, dont_block);
}


void OAIRealTimeEventsApiRequest::realTimePostRequest(){
    qDebug() << "/api/v1/real-time";
    connect(this, &OAIRealTimeEventsApiRequest::realTimePost, handler.data(), &OAIRealTimeEventsApiHandler::realTimePost);

    
    QList<QString> event_types;
    if(socket->queryString().keys().contains("event_types")){
        fromStringValue(socket->queryString().values("event_types"), event_types);
    }
    
    QList<QList<QString>> narrow;
    if(socket->queryString().keys().contains("narrow")){
        fromStringValue(socket->queryString().values("narrow"), narrow);
    }
    
    bool all_public_streams;
    if(socket->queryString().keys().contains("all_public_streams")){
        fromStringValue(socket->queryString().value("all_public_streams"), all_public_streams);
    }
    


    emit realTimePost(event_types, narrow, all_public_streams);
}


void OAIRealTimeEventsApiRequest::registerQueueRequest(){
    qDebug() << "/api/v1/register";
    connect(this, &OAIRealTimeEventsApiRequest::registerQueue, handler.data(), &OAIRealTimeEventsApiHandler::registerQueue);

    
    bool apply_markdown;
    if(socket->queryString().keys().contains("apply_markdown")){
        fromStringValue(socket->queryString().value("apply_markdown"), apply_markdown);
    }
    
    bool client_gravatar;
    if(socket->queryString().keys().contains("client_gravatar")){
        fromStringValue(socket->queryString().value("client_gravatar"), client_gravatar);
    }
    
    bool slim_presence;
    if(socket->queryString().keys().contains("slim_presence")){
        fromStringValue(socket->queryString().value("slim_presence"), slim_presence);
    }
    
    QList<QString> event_types;
    if(socket->queryString().keys().contains("event_types")){
        fromStringValue(socket->queryString().values("event_types"), event_types);
    }
    
    bool all_public_streams;
    if(socket->queryString().keys().contains("all_public_streams")){
        fromStringValue(socket->queryString().value("all_public_streams"), all_public_streams);
    }
    
    bool include_subscribers;
    if(socket->queryString().keys().contains("include_subscribers")){
        fromStringValue(socket->queryString().value("include_subscribers"), include_subscribers);
    }
    
    OAIObject client_capabilities;
    if(socket->queryString().keys().contains("client_capabilities")){
        fromStringValue(socket->queryString().value("client_capabilities"), client_capabilities);
    }
    
    QList<QString> fetch_event_types;
    if(socket->queryString().keys().contains("fetch_event_types")){
        fromStringValue(socket->queryString().values("fetch_event_types"), fetch_event_types);
    }
    
    QList<QList<QString>> narrow;
    if(socket->queryString().keys().contains("narrow")){
        fromStringValue(socket->queryString().values("narrow"), narrow);
    }
    


    emit registerQueue(apply_markdown, client_gravatar, slim_presence, event_types, all_public_streams, include_subscribers, client_capabilities, fetch_event_types, narrow);
}


void OAIRealTimeEventsApiRequest::restErrorHandlingRequest(){
    qDebug() << "/api/v1/rest-error-handling";
    connect(this, &OAIRealTimeEventsApiRequest::restErrorHandling, handler.data(), &OAIRealTimeEventsApiHandler::restErrorHandling);

    


    emit restErrorHandling();
}



void OAIRealTimeEventsApiRequest::deleteQueueResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::getEventsResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::realTimePostResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::registerQueueResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::restErrorHandlingResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRealTimeEventsApiRequest::deleteQueueError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::getEventsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::realTimePostError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::registerQueueError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRealTimeEventsApiRequest::restErrorHandlingError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRealTimeEventsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIRealTimeEventsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
