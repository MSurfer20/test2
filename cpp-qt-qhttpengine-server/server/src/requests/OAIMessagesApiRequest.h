/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApiRequest_H
#define OAI_OAIMessagesApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAnyType.h"
#include "OAICodedError.h"
#include "OAIHttpFileElement.h"
#include "OAIInvalidMessageError.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include "OAIOneOfobjectobject.h"
#include "OAIOneOfstringinteger.h"
#include <QString>
#include "OAIMessagesApiHandler.h"

namespace OpenAPI {

class OAIMessagesApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIMessagesApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIMessagesApiHandler> handler);
    virtual ~OAIMessagesApiRequest();

    void addReactionRequest(const QString& message_id);
    void checkMessagesMatchNarrowRequest();
    void deleteMessageRequest(const QString& message_id);
    void getFileTemporaryUrlRequest(const QString& realm_id_str, const QString& filename);
    void getMessageHistoryRequest(const QString& message_id);
    void getMessagesRequest();
    void getRawMessageRequest(const QString& message_id);
    void markAllAsReadRequest();
    void markStreamAsReadRequest();
    void markTopicAsReadRequest();
    void removeReactionRequest(const QString& message_id);
    void renderMessageRequest();
    void sendMessageRequest();
    void updateMessageRequest(const QString& message_id);
    void updateMessageFlagsRequest();
    void uploadFileRequest();
    

    void addReactionResponse(const OAIJsonSuccess& res);
    void checkMessagesMatchNarrowResponse(const OAIAnyType& res);
    void deleteMessageResponse(const OAIJsonSuccess& res);
    void getFileTemporaryUrlResponse(const OAIJsonSuccessBase& res);
    void getMessageHistoryResponse(const OAIJsonSuccessBase& res);
    void getMessagesResponse(const OAIJsonSuccessBase& res);
    void getRawMessageResponse(const OAIJsonSuccessBase& res);
    void markAllAsReadResponse(const OAIJsonSuccess& res);
    void markStreamAsReadResponse(const OAIJsonSuccess& res);
    void markTopicAsReadResponse(const OAIJsonSuccess& res);
    void removeReactionResponse(const OAIJsonSuccess& res);
    void renderMessageResponse(const OAIJsonSuccessBase& res);
    void sendMessageResponse(const OAIJsonSuccessBase& res);
    void updateMessageResponse(const OAIJsonSuccess& res);
    void updateMessageFlagsResponse(const OAIJsonSuccessBase& res);
    void uploadFileResponse(const OAIJsonSuccessBase& res);
    

    void addReactionError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void checkMessagesMatchNarrowError(const OAIAnyType& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteMessageError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getFileTemporaryUrlError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMessageHistoryError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getMessagesError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRawMessageError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void markAllAsReadError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void markStreamAsReadError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void markTopicAsReadError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void removeReactionError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void renderMessageError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void sendMessageError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateMessageError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateMessageFlagsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadFileError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void addReaction(qint32 message_id, QString emoji_name, QString emoji_code, QString reaction_type);
    void checkMessagesMatchNarrow(QList<qint32> msg_ids, QList<OAIObject> narrow);
    void deleteMessage(qint32 message_id);
    void getFileTemporaryUrl(qint32 realm_id_str, QString filename);
    void getMessageHistory(qint32 message_id);
    void getMessages(qint32 num_before, qint32 num_after, OAIOneOfstringinteger anchor, QList<OAIObject> narrow, bool client_gravatar, bool apply_markdown, bool use_first_unread_anchor);
    void getRawMessage(qint32 message_id);
    void markAllAsRead();
    void markStreamAsRead(qint32 stream_id);
    void markTopicAsRead(qint32 stream_id, QString topic_name);
    void removeReaction(qint32 message_id, QString emoji_name, QString emoji_code, QString reaction_type);
    void renderMessage(QString content);
    void sendMessage(QString type, QList<qint32> to, QString content, QString topic, QString queue_id, QString local_id);
    void updateMessage(qint32 message_id, QString topic, QString propagate_mode, bool send_notification_to_old_thread, bool send_notification_to_new_thread, QString content, qint32 stream_id);
    void updateMessageFlags(QList<qint32> messages, QString op, QString flag);
    void uploadFile(OAIHttpFileElement filename);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIMessagesApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIMessagesApiRequest_H
