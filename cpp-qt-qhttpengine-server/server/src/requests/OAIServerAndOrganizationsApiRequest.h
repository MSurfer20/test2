/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerAndOrganizationsApiRequest_H
#define OAI_OAIServerAndOrganizationsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIHttpFileElement.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include <QString>
#include "OAIServerAndOrganizationsApiHandler.h"

namespace OpenAPI {

class OAIServerAndOrganizationsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIServerAndOrganizationsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIServerAndOrganizationsApiHandler> handler);
    virtual ~OAIServerAndOrganizationsApiRequest();

    void addCodePlaygroundRequest();
    void addLinkifierRequest();
    void createCustomProfileFieldRequest();
    void getCustomEmojiRequest();
    void getCustomProfileFieldsRequest();
    void getLinkifiersRequest();
    void getServerSettingsRequest();
    void removeCodePlaygroundRequest(const QString& playground_id);
    void removeLinkifierRequest(const QString& filter_id);
    void reorderCustomProfileFieldsRequest();
    void updateLinkifierRequest(const QString& filter_id);
    void uploadCustomEmojiRequest(const QString& emoji_name);
    

    void addCodePlaygroundResponse(const OAIJsonSuccessBase& res);
    void addLinkifierResponse(const OAIJsonSuccessBase& res);
    void createCustomProfileFieldResponse(const OAIJsonSuccessBase& res);
    void getCustomEmojiResponse(const OAIJsonSuccessBase& res);
    void getCustomProfileFieldsResponse(const OAIJsonSuccessBase& res);
    void getLinkifiersResponse(const OAIJsonSuccessBase& res);
    void getServerSettingsResponse(const OAIJsonSuccessBase& res);
    void removeCodePlaygroundResponse(const OAIJsonSuccess& res);
    void removeLinkifierResponse(const OAIJsonSuccess& res);
    void reorderCustomProfileFieldsResponse(const OAIJsonSuccess& res);
    void updateLinkifierResponse(const OAIJsonSuccess& res);
    void uploadCustomEmojiResponse(const OAIJsonSuccess& res);
    

    void addCodePlaygroundError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void addLinkifierError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createCustomProfileFieldError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCustomEmojiError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCustomProfileFieldsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getLinkifiersError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getServerSettingsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void removeCodePlaygroundError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void removeLinkifierError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void reorderCustomProfileFieldsError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateLinkifierError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void uploadCustomEmojiError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void addCodePlayground(QString name, QString pygments_language, QString url_prefix);
    void addLinkifier(QString pattern, QString url_format_string);
    void createCustomProfileField(qint32 field_type, QString name, QString hint, OAIObject field_data);
    void getCustomEmoji();
    void getCustomProfileFields();
    void getLinkifiers();
    void getServerSettings();
    void removeCodePlayground(qint32 playground_id);
    void removeLinkifier(qint32 filter_id);
    void reorderCustomProfileFields(QList<qint32> order);
    void updateLinkifier(qint32 filter_id, QString pattern, QString url_format_string);
    void uploadCustomEmoji(QString emoji_name, OAIHttpFileElement filename);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIServerAndOrganizationsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIServerAndOrganizationsApiRequest_H
