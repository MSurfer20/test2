/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIWebhooksApiRequest.h"

namespace OpenAPI {

OAIWebhooksApiRequest::OAIWebhooksApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIWebhooksApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIWebhooksApiRequest::~OAIWebhooksApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIWebhooksApiRequest::~OAIWebhooksApiRequest()";
}

QMap<QString, QString>
OAIWebhooksApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIWebhooksApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIWebhooksApiRequest::getRawSocket(){
    return socket;
}


void OAIWebhooksApiRequest::zulipOutgoingWebhooksRequest(){
    qDebug() << "/api/v1/zulip-outgoing-webhook";
    connect(this, &OAIWebhooksApiRequest::zulipOutgoingWebhooks, handler.data(), &OAIWebhooksApiHandler::zulipOutgoingWebhooks);

    


    emit zulipOutgoingWebhooks();
}



void OAIWebhooksApiRequest::zulipOutgoingWebhooksResponse(const OAIInline_response_200& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIWebhooksApiRequest::zulipOutgoingWebhooksError(const OAIInline_response_200& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIWebhooksApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIWebhooksApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
