/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIDraftsApiRequest.h"

namespace OpenAPI {

OAIDraftsApiRequest::OAIDraftsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIDraftsApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIDraftsApiRequest::~OAIDraftsApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIDraftsApiRequest::~OAIDraftsApiRequest()";
}

QMap<QString, QString>
OAIDraftsApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIDraftsApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIDraftsApiRequest::getRawSocket(){
    return socket;
}


void OAIDraftsApiRequest::createDraftsRequest(){
    qDebug() << "/api/v1/drafts";
    connect(this, &OAIDraftsApiRequest::createDrafts, handler.data(), &OAIDraftsApiHandler::createDrafts);

    
    QList<OAIDraft> drafts;
    if(socket->queryString().keys().contains("drafts")){
        fromStringValue(socket->queryString().values("drafts"), drafts);
    }
    


    emit createDrafts(drafts);
}


void OAIDraftsApiRequest::deleteDraftRequest(const QString& draft_idstr){
    qDebug() << "/api/v1/drafts/{draft_id}";
    connect(this, &OAIDraftsApiRequest::deleteDraft, handler.data(), &OAIDraftsApiHandler::deleteDraft);

    
    qint32 draft_id;
    fromStringValue(draft_idstr, draft_id);
    

    emit deleteDraft(draft_id);
}


void OAIDraftsApiRequest::editDraftRequest(const QString& draft_idstr){
    qDebug() << "/api/v1/drafts/{draft_id}";
    connect(this, &OAIDraftsApiRequest::editDraft, handler.data(), &OAIDraftsApiHandler::editDraft);

    
    OAIDraft draft;
    if(socket->queryString().keys().contains("draft")){
        fromStringValue(socket->queryString().value("draft"), draft);
    }
    
    qint32 draft_id;
    fromStringValue(draft_idstr, draft_id);
    

    emit editDraft(draft_id, draft);
}


void OAIDraftsApiRequest::getDraftsRequest(){
    qDebug() << "/api/v1/drafts";
    connect(this, &OAIDraftsApiRequest::getDrafts, handler.data(), &OAIDraftsApiHandler::getDrafts);

    


    emit getDrafts();
}



void OAIDraftsApiRequest::createDraftsResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::deleteDraftResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::editDraftResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::getDraftsResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDraftsApiRequest::createDraftsError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::deleteDraftError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::editDraftError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIDraftsApiRequest::getDraftsError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIDraftsApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIDraftsApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
