/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIUsersApiRequest.h"

namespace OpenAPI {

OAIUsersApiRequest::OAIUsersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIUsersApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIUsersApiRequest::~OAIUsersApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIUsersApiRequest::~OAIUsersApiRequest()";
}

QMap<QString, QString>
OAIUsersApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIUsersApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIUsersApiRequest::getRawSocket(){
    return socket;
}


void OAIUsersApiRequest::createUserRequest(){
    qDebug() << "/api/v1/users";
    connect(this, &OAIUsersApiRequest::createUser, handler.data(), &OAIUsersApiHandler::createUser);

    
    QString email;
    if(socket->queryString().keys().contains("email")){
        fromStringValue(socket->queryString().value("email"), email);
    }
    
    QString password;
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    
    QString full_name;
    if(socket->queryString().keys().contains("full_name")){
        fromStringValue(socket->queryString().value("full_name"), full_name);
    }
    


    emit createUser(email, password, full_name);
}


void OAIUsersApiRequest::createUserGroupRequest(){
    qDebug() << "/api/v1/user_groups/create";
    connect(this, &OAIUsersApiRequest::createUserGroup, handler.data(), &OAIUsersApiHandler::createUserGroup);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString description;
    if(socket->queryString().keys().contains("description")){
        fromStringValue(socket->queryString().value("description"), description);
    }
    
    QList<qint32> members;
    if(socket->queryString().keys().contains("members")){
        fromStringValue(socket->queryString().values("members"), members);
    }
    


    emit createUserGroup(name, description, members);
}


void OAIUsersApiRequest::deactivateOwnUserRequest(){
    qDebug() << "/api/v1/users/me";
    connect(this, &OAIUsersApiRequest::deactivateOwnUser, handler.data(), &OAIUsersApiHandler::deactivateOwnUser);

    


    emit deactivateOwnUser();
}


void OAIUsersApiRequest::deactivateUserRequest(const QString& user_idstr){
    qDebug() << "/api/v1/users/{user_id}";
    connect(this, &OAIUsersApiRequest::deactivateUser, handler.data(), &OAIUsersApiHandler::deactivateUser);

    
    qint32 user_id;
    fromStringValue(user_idstr, user_id);
    

    emit deactivateUser(user_id);
}


void OAIUsersApiRequest::getAttachmentsRequest(){
    qDebug() << "/api/v1/attachments";
    connect(this, &OAIUsersApiRequest::getAttachments, handler.data(), &OAIUsersApiHandler::getAttachments);

    


    emit getAttachments();
}


void OAIUsersApiRequest::getOwnUserRequest(){
    qDebug() << "/api/v1/users/me";
    connect(this, &OAIUsersApiRequest::getOwnUser, handler.data(), &OAIUsersApiHandler::getOwnUser);

    


    emit getOwnUser();
}


void OAIUsersApiRequest::getUserRequest(const QString& user_idstr){
    qDebug() << "/api/v1/users/{user_id}";
    connect(this, &OAIUsersApiRequest::getUser, handler.data(), &OAIUsersApiHandler::getUser);

    
    bool client_gravatar;
    if(socket->queryString().keys().contains("client_gravatar")){
        fromStringValue(socket->queryString().value("client_gravatar"), client_gravatar);
    }
    
    bool include_custom_profile_fields;
    if(socket->queryString().keys().contains("include_custom_profile_fields")){
        fromStringValue(socket->queryString().value("include_custom_profile_fields"), include_custom_profile_fields);
    }
    
    qint32 user_id;
    fromStringValue(user_idstr, user_id);
    

    emit getUser(user_id, client_gravatar, include_custom_profile_fields);
}


void OAIUsersApiRequest::getUserByEmailRequest(const QString& emailstr){
    qDebug() << "/api/v1/users/{email}";
    connect(this, &OAIUsersApiRequest::getUserByEmail, handler.data(), &OAIUsersApiHandler::getUserByEmail);

    
    bool client_gravatar;
    if(socket->queryString().keys().contains("client_gravatar")){
        fromStringValue(socket->queryString().value("client_gravatar"), client_gravatar);
    }
    
    bool include_custom_profile_fields;
    if(socket->queryString().keys().contains("include_custom_profile_fields")){
        fromStringValue(socket->queryString().value("include_custom_profile_fields"), include_custom_profile_fields);
    }
    
    QString email;
    fromStringValue(emailstr, email);
    

    emit getUserByEmail(email, client_gravatar, include_custom_profile_fields);
}


void OAIUsersApiRequest::getUserGroupsRequest(){
    qDebug() << "/api/v1/user_groups";
    connect(this, &OAIUsersApiRequest::getUserGroups, handler.data(), &OAIUsersApiHandler::getUserGroups);

    


    emit getUserGroups();
}


void OAIUsersApiRequest::getUserPresenceRequest(const QString& user_id_or_emailstr){
    qDebug() << "/api/v1/users/{user_id_or_email}/presence";
    connect(this, &OAIUsersApiRequest::getUserPresence, handler.data(), &OAIUsersApiHandler::getUserPresence);

    
    QString user_id_or_email;
    fromStringValue(user_id_or_emailstr, user_id_or_email);
    

    emit getUserPresence(user_id_or_email);
}


void OAIUsersApiRequest::getUsersRequest(){
    qDebug() << "/api/v1/users";
    connect(this, &OAIUsersApiRequest::getUsers, handler.data(), &OAIUsersApiHandler::getUsers);

    
    bool client_gravatar;
    if(socket->queryString().keys().contains("client_gravatar")){
        fromStringValue(socket->queryString().value("client_gravatar"), client_gravatar);
    }
    
    bool include_custom_profile_fields;
    if(socket->queryString().keys().contains("include_custom_profile_fields")){
        fromStringValue(socket->queryString().value("include_custom_profile_fields"), include_custom_profile_fields);
    }
    


    emit getUsers(client_gravatar, include_custom_profile_fields);
}


void OAIUsersApiRequest::muteUserRequest(const QString& muted_user_idstr){
    qDebug() << "/api/v1/users/me/muted_users/{muted_user_id}";
    connect(this, &OAIUsersApiRequest::muteUser, handler.data(), &OAIUsersApiHandler::muteUser);

    
    qint32 muted_user_id;
    fromStringValue(muted_user_idstr, muted_user_id);
    

    emit muteUser(muted_user_id);
}


void OAIUsersApiRequest::reactivateUserRequest(const QString& user_idstr){
    qDebug() << "/api/v1/users/{user_id}/reactivate";
    connect(this, &OAIUsersApiRequest::reactivateUser, handler.data(), &OAIUsersApiHandler::reactivateUser);

    
    qint32 user_id;
    fromStringValue(user_idstr, user_id);
    

    emit reactivateUser(user_id);
}


void OAIUsersApiRequest::removeUserGroupRequest(const QString& user_group_idstr){
    qDebug() << "/api/v1/user_groups/{user_group_id}";
    connect(this, &OAIUsersApiRequest::removeUserGroup, handler.data(), &OAIUsersApiHandler::removeUserGroup);

    
    qint32 user_group_id;
    fromStringValue(user_group_idstr, user_group_id);
    

    emit removeUserGroup(user_group_id);
}


void OAIUsersApiRequest::setTypingStatusRequest(){
    qDebug() << "/api/v1/typing";
    connect(this, &OAIUsersApiRequest::setTypingStatus, handler.data(), &OAIUsersApiHandler::setTypingStatus);

    
    QString type;
    if(socket->queryString().keys().contains("type")){
        fromStringValue(socket->queryString().value("type"), type);
    }
    
    QString op;
    if(socket->queryString().keys().contains("op")){
        fromStringValue(socket->queryString().value("op"), op);
    }
    
    QList<qint32> to;
    if(socket->queryString().keys().contains("to")){
        fromStringValue(socket->queryString().values("to"), to);
    }
    
    QString topic;
    if(socket->queryString().keys().contains("topic")){
        fromStringValue(socket->queryString().value("topic"), topic);
    }
    


    emit setTypingStatus(op, to, type, topic);
}


void OAIUsersApiRequest::unmuteUserRequest(const QString& muted_user_idstr){
    qDebug() << "/api/v1/users/me/muted_users/{muted_user_id}";
    connect(this, &OAIUsersApiRequest::unmuteUser, handler.data(), &OAIUsersApiHandler::unmuteUser);

    
    qint32 muted_user_id;
    fromStringValue(muted_user_idstr, muted_user_id);
    

    emit unmuteUser(muted_user_id);
}


void OAIUsersApiRequest::updateDisplaySettingsRequest(){
    qDebug() << "/api/v1/settings/display";
    connect(this, &OAIUsersApiRequest::updateDisplaySettings, handler.data(), &OAIUsersApiHandler::updateDisplaySettings);

    
    bool twenty_four_hour_time;
    if(socket->queryString().keys().contains("twenty_four_hour_time")){
        fromStringValue(socket->queryString().value("twenty_four_hour_time"), twenty_four_hour_time);
    }
    
    bool dense_mode;
    if(socket->queryString().keys().contains("dense_mode")){
        fromStringValue(socket->queryString().value("dense_mode"), dense_mode);
    }
    
    bool starred_message_counts;
    if(socket->queryString().keys().contains("starred_message_counts")){
        fromStringValue(socket->queryString().value("starred_message_counts"), starred_message_counts);
    }
    
    bool fluid_layout_width;
    if(socket->queryString().keys().contains("fluid_layout_width")){
        fromStringValue(socket->queryString().value("fluid_layout_width"), fluid_layout_width);
    }
    
    bool high_contrast_mode;
    if(socket->queryString().keys().contains("high_contrast_mode")){
        fromStringValue(socket->queryString().value("high_contrast_mode"), high_contrast_mode);
    }
    
    qint32 color_scheme;
    if(socket->queryString().keys().contains("color_scheme")){
        fromStringValue(socket->queryString().value("color_scheme"), color_scheme);
    }
    
    bool translate_emoticons;
    if(socket->queryString().keys().contains("translate_emoticons")){
        fromStringValue(socket->queryString().value("translate_emoticons"), translate_emoticons);
    }
    
    QString default_language;
    if(socket->queryString().keys().contains("default_language")){
        fromStringValue(socket->queryString().value("default_language"), default_language);
    }
    
    QString default_view;
    if(socket->queryString().keys().contains("default_view")){
        fromStringValue(socket->queryString().value("default_view"), default_view);
    }
    
    bool left_side_userlist;
    if(socket->queryString().keys().contains("left_side_userlist")){
        fromStringValue(socket->queryString().value("left_side_userlist"), left_side_userlist);
    }
    
    QString emojiset;
    if(socket->queryString().keys().contains("emojiset")){
        fromStringValue(socket->queryString().value("emojiset"), emojiset);
    }
    
    qint32 demote_inactive_streams;
    if(socket->queryString().keys().contains("demote_inactive_streams")){
        fromStringValue(socket->queryString().value("demote_inactive_streams"), demote_inactive_streams);
    }
    
    QString timezone;
    if(socket->queryString().keys().contains("timezone")){
        fromStringValue(socket->queryString().value("timezone"), timezone);
    }
    


    emit updateDisplaySettings(twenty_four_hour_time, dense_mode, starred_message_counts, fluid_layout_width, high_contrast_mode, color_scheme, translate_emoticons, default_language, default_view, left_side_userlist, emojiset, demote_inactive_streams, timezone);
}


void OAIUsersApiRequest::updateNotificationSettingsRequest(){
    qDebug() << "/api/v1/settings/notifications";
    connect(this, &OAIUsersApiRequest::updateNotificationSettings, handler.data(), &OAIUsersApiHandler::updateNotificationSettings);

    
    bool enable_stream_desktop_notifications;
    if(socket->queryString().keys().contains("enable_stream_desktop_notifications")){
        fromStringValue(socket->queryString().value("enable_stream_desktop_notifications"), enable_stream_desktop_notifications);
    }
    
    bool enable_stream_email_notifications;
    if(socket->queryString().keys().contains("enable_stream_email_notifications")){
        fromStringValue(socket->queryString().value("enable_stream_email_notifications"), enable_stream_email_notifications);
    }
    
    bool enable_stream_push_notifications;
    if(socket->queryString().keys().contains("enable_stream_push_notifications")){
        fromStringValue(socket->queryString().value("enable_stream_push_notifications"), enable_stream_push_notifications);
    }
    
    bool enable_stream_audible_notifications;
    if(socket->queryString().keys().contains("enable_stream_audible_notifications")){
        fromStringValue(socket->queryString().value("enable_stream_audible_notifications"), enable_stream_audible_notifications);
    }
    
    QString notification_sound;
    if(socket->queryString().keys().contains("notification_sound")){
        fromStringValue(socket->queryString().value("notification_sound"), notification_sound);
    }
    
    bool enable_desktop_notifications;
    if(socket->queryString().keys().contains("enable_desktop_notifications")){
        fromStringValue(socket->queryString().value("enable_desktop_notifications"), enable_desktop_notifications);
    }
    
    bool enable_sounds;
    if(socket->queryString().keys().contains("enable_sounds")){
        fromStringValue(socket->queryString().value("enable_sounds"), enable_sounds);
    }
    
    bool enable_offline_email_notifications;
    if(socket->queryString().keys().contains("enable_offline_email_notifications")){
        fromStringValue(socket->queryString().value("enable_offline_email_notifications"), enable_offline_email_notifications);
    }
    
    bool enable_offline_push_notifications;
    if(socket->queryString().keys().contains("enable_offline_push_notifications")){
        fromStringValue(socket->queryString().value("enable_offline_push_notifications"), enable_offline_push_notifications);
    }
    
    bool enable_online_push_notifications;
    if(socket->queryString().keys().contains("enable_online_push_notifications")){
        fromStringValue(socket->queryString().value("enable_online_push_notifications"), enable_online_push_notifications);
    }
    
    bool enable_digest_emails;
    if(socket->queryString().keys().contains("enable_digest_emails")){
        fromStringValue(socket->queryString().value("enable_digest_emails"), enable_digest_emails);
    }
    
    bool enable_marketing_emails;
    if(socket->queryString().keys().contains("enable_marketing_emails")){
        fromStringValue(socket->queryString().value("enable_marketing_emails"), enable_marketing_emails);
    }
    
    bool enable_login_emails;
    if(socket->queryString().keys().contains("enable_login_emails")){
        fromStringValue(socket->queryString().value("enable_login_emails"), enable_login_emails);
    }
    
    bool message_content_in_email_notifications;
    if(socket->queryString().keys().contains("message_content_in_email_notifications")){
        fromStringValue(socket->queryString().value("message_content_in_email_notifications"), message_content_in_email_notifications);
    }
    
    bool pm_content_in_desktop_notifications;
    if(socket->queryString().keys().contains("pm_content_in_desktop_notifications")){
        fromStringValue(socket->queryString().value("pm_content_in_desktop_notifications"), pm_content_in_desktop_notifications);
    }
    
    bool wildcard_mentions_notify;
    if(socket->queryString().keys().contains("wildcard_mentions_notify")){
        fromStringValue(socket->queryString().value("wildcard_mentions_notify"), wildcard_mentions_notify);
    }
    
    qint32 desktop_icon_count_display;
    if(socket->queryString().keys().contains("desktop_icon_count_display")){
        fromStringValue(socket->queryString().value("desktop_icon_count_display"), desktop_icon_count_display);
    }
    
    bool realm_name_in_notifications;
    if(socket->queryString().keys().contains("realm_name_in_notifications")){
        fromStringValue(socket->queryString().value("realm_name_in_notifications"), realm_name_in_notifications);
    }
    
    bool presence_enabled;
    if(socket->queryString().keys().contains("presence_enabled")){
        fromStringValue(socket->queryString().value("presence_enabled"), presence_enabled);
    }
    


    emit updateNotificationSettings(enable_stream_desktop_notifications, enable_stream_email_notifications, enable_stream_push_notifications, enable_stream_audible_notifications, notification_sound, enable_desktop_notifications, enable_sounds, enable_offline_email_notifications, enable_offline_push_notifications, enable_online_push_notifications, enable_digest_emails, enable_marketing_emails, enable_login_emails, message_content_in_email_notifications, pm_content_in_desktop_notifications, wildcard_mentions_notify, desktop_icon_count_display, realm_name_in_notifications, presence_enabled);
}


void OAIUsersApiRequest::updateUserRequest(const QString& user_idstr){
    qDebug() << "/api/v1/users/{user_id}";
    connect(this, &OAIUsersApiRequest::updateUser, handler.data(), &OAIUsersApiHandler::updateUser);

    
    QString full_name;
    if(socket->queryString().keys().contains("full_name")){
        fromStringValue(socket->queryString().value("full_name"), full_name);
    }
    
    qint32 role;
    if(socket->queryString().keys().contains("role")){
        fromStringValue(socket->queryString().value("role"), role);
    }
    
    QList<OAIObject> profile_data;
    if(socket->queryString().keys().contains("profile_data")){
        fromStringValue(socket->queryString().values("profile_data"), profile_data);
    }
    
    qint32 user_id;
    fromStringValue(user_idstr, user_id);
    

    emit updateUser(user_id, full_name, role, profile_data);
}


void OAIUsersApiRequest::updateUserGroupRequest(const QString& user_group_idstr){
    qDebug() << "/api/v1/user_groups/{user_group_id}";
    connect(this, &OAIUsersApiRequest::updateUserGroup, handler.data(), &OAIUsersApiHandler::updateUserGroup);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString description;
    if(socket->queryString().keys().contains("description")){
        fromStringValue(socket->queryString().value("description"), description);
    }
    
    qint32 user_group_id;
    fromStringValue(user_group_idstr, user_group_id);
    

    emit updateUserGroup(user_group_id, name, description);
}


void OAIUsersApiRequest::updateUserGroupMembersRequest(const QString& user_group_idstr){
    qDebug() << "/api/v1/user_groups/{user_group_id}/members";
    connect(this, &OAIUsersApiRequest::updateUserGroupMembers, handler.data(), &OAIUsersApiHandler::updateUserGroupMembers);

    
    QList<qint32> r_delete;
    if(socket->queryString().keys().contains("r_delete")){
        fromStringValue(socket->queryString().values("r_delete"), r_delete);
    }
    
    QList<qint32> add;
    if(socket->queryString().keys().contains("add")){
        fromStringValue(socket->queryString().values("add"), add);
    }
    
    qint32 user_group_id;
    fromStringValue(user_group_idstr, user_group_id);
    

    emit updateUserGroupMembers(user_group_id, r_delete, add);
}



void OAIUsersApiRequest::createUserResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::createUserGroupResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::deactivateOwnUserResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::deactivateUserResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getAttachmentsResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getOwnUserResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserByEmailResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserGroupsResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserPresenceResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUsersResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::muteUserResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::reactivateUserResponse(const OAIAnyType& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::removeUserGroupResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::setTypingStatusResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::unmuteUserResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateDisplaySettingsResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateNotificationSettingsResponse(const OAIJsonSuccessBase& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserGroupResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserGroupMembersResponse(const OAIJsonSuccess& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUsersApiRequest::createUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::createUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::deactivateOwnUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::deactivateUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getAttachmentsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getOwnUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserByEmailError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserGroupsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUserPresenceError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::getUsersError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::muteUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::reactivateUserError(const OAIAnyType& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::removeUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::setTypingStatusError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::unmuteUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateDisplaySettingsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateNotificationSettingsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIUsersApiRequest::updateUserGroupMembersError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIUsersApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIUsersApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
