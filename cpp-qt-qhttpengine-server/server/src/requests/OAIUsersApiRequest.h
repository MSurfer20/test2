/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApiRequest_H
#define OAI_OAIUsersApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIAnyType.h"
#include "OAICodedError.h"
#include "OAIJsonError.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include "OAIOneOfobjectobject.h"
#include "OAIOneOfobjectobjectobject.h"
#include <QString>
#include "OAIUsersApiHandler.h"

namespace OpenAPI {

class OAIUsersApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIUsersApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIUsersApiHandler> handler);
    virtual ~OAIUsersApiRequest();

    void createUserRequest();
    void createUserGroupRequest();
    void deactivateOwnUserRequest();
    void deactivateUserRequest(const QString& user_id);
    void getAttachmentsRequest();
    void getOwnUserRequest();
    void getUserRequest(const QString& user_id);
    void getUserByEmailRequest(const QString& email);
    void getUserGroupsRequest();
    void getUserPresenceRequest(const QString& user_id_or_email);
    void getUsersRequest();
    void muteUserRequest(const QString& muted_user_id);
    void reactivateUserRequest(const QString& user_id);
    void removeUserGroupRequest(const QString& user_group_id);
    void setTypingStatusRequest();
    void unmuteUserRequest(const QString& muted_user_id);
    void updateDisplaySettingsRequest();
    void updateNotificationSettingsRequest();
    void updateUserRequest(const QString& user_id);
    void updateUserGroupRequest(const QString& user_group_id);
    void updateUserGroupMembersRequest(const QString& user_group_id);
    

    void createUserResponse(const OAIJsonSuccessBase& res);
    void createUserGroupResponse(const OAIJsonSuccess& res);
    void deactivateOwnUserResponse(const OAIJsonSuccess& res);
    void deactivateUserResponse(const OAIJsonSuccess& res);
    void getAttachmentsResponse(const OAIJsonSuccessBase& res);
    void getOwnUserResponse(const OAIJsonSuccessBase& res);
    void getUserResponse(const OAIJsonSuccessBase& res);
    void getUserByEmailResponse(const OAIJsonSuccessBase& res);
    void getUserGroupsResponse(const OAIJsonSuccessBase& res);
    void getUserPresenceResponse(const OAIJsonSuccessBase& res);
    void getUsersResponse(const OAIJsonSuccessBase& res);
    void muteUserResponse(const OAIJsonSuccess& res);
    void reactivateUserResponse(const OAIAnyType& res);
    void removeUserGroupResponse(const OAIJsonSuccess& res);
    void setTypingStatusResponse(const OAIJsonSuccess& res);
    void unmuteUserResponse(const OAIJsonSuccess& res);
    void updateDisplaySettingsResponse(const OAIJsonSuccessBase& res);
    void updateNotificationSettingsResponse(const OAIJsonSuccessBase& res);
    void updateUserResponse(const OAIJsonSuccess& res);
    void updateUserGroupResponse(const OAIJsonSuccess& res);
    void updateUserGroupMembersResponse(const OAIJsonSuccess& res);
    

    void createUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void createUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deactivateOwnUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void deactivateUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getAttachmentsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOwnUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserByEmailError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserGroupsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserPresenceError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void muteUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void reactivateUserError(const OAIAnyType& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void removeUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void setTypingStatusError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void unmuteUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateDisplaySettingsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateNotificationSettingsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserGroupError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserGroupMembersError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void createUser(QString email, QString password, QString full_name);
    void createUserGroup(QString name, QString description, QList<qint32> members);
    void deactivateOwnUser();
    void deactivateUser(qint32 user_id);
    void getAttachments();
    void getOwnUser();
    void getUser(qint32 user_id, bool client_gravatar, bool include_custom_profile_fields);
    void getUserByEmail(QString email, bool client_gravatar, bool include_custom_profile_fields);
    void getUserGroups();
    void getUserPresence(QString user_id_or_email);
    void getUsers(bool client_gravatar, bool include_custom_profile_fields);
    void muteUser(qint32 muted_user_id);
    void reactivateUser(qint32 user_id);
    void removeUserGroup(qint32 user_group_id);
    void setTypingStatus(QString op, QList<qint32> to, QString type, QString topic);
    void unmuteUser(qint32 muted_user_id);
    void updateDisplaySettings(bool twenty_four_hour_time, bool dense_mode, bool starred_message_counts, bool fluid_layout_width, bool high_contrast_mode, qint32 color_scheme, bool translate_emoticons, QString default_language, QString default_view, bool left_side_userlist, QString emojiset, qint32 demote_inactive_streams, QString timezone);
    void updateNotificationSettings(bool enable_stream_desktop_notifications, bool enable_stream_email_notifications, bool enable_stream_push_notifications, bool enable_stream_audible_notifications, QString notification_sound, bool enable_desktop_notifications, bool enable_sounds, bool enable_offline_email_notifications, bool enable_offline_push_notifications, bool enable_online_push_notifications, bool enable_digest_emails, bool enable_marketing_emails, bool enable_login_emails, bool message_content_in_email_notifications, bool pm_content_in_desktop_notifications, bool wildcard_mentions_notify, qint32 desktop_icon_count_display, bool realm_name_in_notifications, bool presence_enabled);
    void updateUser(qint32 user_id, QString full_name, qint32 role, QList<OAIObject> profile_data);
    void updateUserGroup(qint32 user_group_id, QString name, QString description);
    void updateUserGroupMembers(qint32 user_group_id, QList<qint32> r_delete, QList<qint32> add);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIUsersApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIUsersApiRequest_H
