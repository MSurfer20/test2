/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApiRequest_H
#define OAI_OAIAuthenticationApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIApiKeyResponse.h"
#include <QString>
#include "OAIAuthenticationApiHandler.h"

namespace OpenAPI {

class OAIAuthenticationApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIAuthenticationApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAuthenticationApiHandler> handler);
    virtual ~OAIAuthenticationApiRequest();

    void devFetchApiKeyRequest();
    void fetchApiKeyRequest();
    

    void devFetchApiKeyResponse(const OAIApiKeyResponse& res);
    void fetchApiKeyResponse(const OAIApiKeyResponse& res);
    

    void devFetchApiKeyError(const OAIApiKeyResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void fetchApiKeyError(const OAIApiKeyResponse& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void devFetchApiKey(QString username);
    void fetchApiKey(QString username, QString password);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIAuthenticationApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIAuthenticationApiRequest_H
