/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIAuthenticationApiRequest.h"

namespace OpenAPI {

OAIAuthenticationApiRequest::OAIAuthenticationApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIAuthenticationApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIAuthenticationApiRequest::~OAIAuthenticationApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIAuthenticationApiRequest::~OAIAuthenticationApiRequest()";
}

QMap<QString, QString>
OAIAuthenticationApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIAuthenticationApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIAuthenticationApiRequest::getRawSocket(){
    return socket;
}


void OAIAuthenticationApiRequest::devFetchApiKeyRequest(){
    qDebug() << "/api/v1/dev_fetch_api_key";
    connect(this, &OAIAuthenticationApiRequest::devFetchApiKey, handler.data(), &OAIAuthenticationApiHandler::devFetchApiKey);

    
    QString username;
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    


    emit devFetchApiKey(username);
}


void OAIAuthenticationApiRequest::fetchApiKeyRequest(){
    qDebug() << "/api/v1/fetch_api_key";
    connect(this, &OAIAuthenticationApiRequest::fetchApiKey, handler.data(), &OAIAuthenticationApiHandler::fetchApiKey);

    
    QString username;
    if(socket->queryString().keys().contains("username")){
        fromStringValue(socket->queryString().value("username"), username);
    }
    
    QString password;
    if(socket->queryString().keys().contains("password")){
        fromStringValue(socket->queryString().value("password"), password);
    }
    


    emit fetchApiKey(username, password);
}



void OAIAuthenticationApiRequest::devFetchApiKeyResponse(const OAIApiKeyResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAuthenticationApiRequest::fetchApiKeyResponse(const OAIApiKeyResponse& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAuthenticationApiRequest::devFetchApiKeyError(const OAIApiKeyResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIAuthenticationApiRequest::fetchApiKeyError(const OAIApiKeyResponse& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIAuthenticationApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }    
}

void OAIAuthenticationApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
