/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRealTimeEventsApiRequest_H
#define OAI_OAIRealTimeEventsApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIBadEventQueueIdError.h"
#include "OAIJsonSuccess.h"
#include "OAIJsonSuccessBase.h"
#include "OAIObject.h"
#include "OAIOneOfInvalidApiKeyErrorMissingArgumentErrorUserNotAuthorizedError.h"
#include "OAIOneOfRateLimitedError.h"
#include "OAIOneOfUserDeactivatedErrorRealmDeactivatedError.h"
#include <QList>
#include <QString>
#include "OAIRealTimeEventsApiHandler.h"

namespace OpenAPI {

class OAIRealTimeEventsApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIRealTimeEventsApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRealTimeEventsApiHandler> handler);
    virtual ~OAIRealTimeEventsApiRequest();

    void deleteQueueRequest();
    void getEventsRequest();
    void realTimePostRequest();
    void registerQueueRequest();
    void restErrorHandlingRequest();
    

    void deleteQueueResponse(const OAIJsonSuccess& res);
    void getEventsResponse(const OAIJsonSuccessBase& res);
    void realTimePostResponse();
    void registerQueueResponse(const OAIJsonSuccessBase& res);
    void restErrorHandlingResponse();
    

    void deleteQueueError(const OAIJsonSuccess& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getEventsError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void realTimePostError(QNetworkReply::NetworkError error_type, QString& error_str);
    void registerQueueError(const OAIJsonSuccessBase& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void restErrorHandlingError(QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

signals:
    void deleteQueue(QString queue_id);
    void getEvents(QString queue_id, qint32 last_event_id, bool dont_block);
    void realTimePost(QList<QString> event_types, QList<QList<QString>> narrow, bool all_public_streams);
    void registerQueue(bool apply_markdown, bool client_gravatar, bool slim_presence, QList<QString> event_types, bool all_public_streams, bool include_subscribers, OAIObject client_capabilities, QList<QString> fetch_event_types, QList<QList<QString>> narrow);
    void restErrorHandling();
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIRealTimeEventsApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIRealTimeEventsApiRequest_H
