/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessagesBase.h
 *
 * Object containing details of the message. 
 */

#ifndef OAIMessagesBase_H
#define OAIMessagesBase_H

#include <QJsonObject>

#include "OAIEmojiReaction.h"
#include "OAIMessagesBase_topic_links.h"
#include "OAIOneOfstringarray.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMessagesBase : public OAIObject {
public:
    OAIMessagesBase();
    OAIMessagesBase(QString json);
    ~OAIMessagesBase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAvatarUrl() const;
    void setAvatarUrl(const QString &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    QString getClient() const;
    void setClient(const QString &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getContentType() const;
    void setContentType(const QString &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAIOneOfstringarray getDisplayRecipient() const;
    void setDisplayRecipient(const OAIOneOfstringarray &display_recipient);
    bool is_display_recipient_Set() const;
    bool is_display_recipient_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsMeMessage() const;
    void setIsMeMessage(const bool &is_me_message);
    bool is_is_me_message_Set() const;
    bool is_is_me_message_Valid() const;

    QList<OAIEmojiReaction> getReactions() const;
    void setReactions(const QList<OAIEmojiReaction> &reactions);
    bool is_reactions_Set() const;
    bool is_reactions_Valid() const;

    qint32 getRecipientId() const;
    void setRecipientId(const qint32 &recipient_id);
    bool is_recipient_id_Set() const;
    bool is_recipient_id_Valid() const;

    QString getSenderEmail() const;
    void setSenderEmail(const QString &sender_email);
    bool is_sender_email_Set() const;
    bool is_sender_email_Valid() const;

    QString getSenderFullName() const;
    void setSenderFullName(const QString &sender_full_name);
    bool is_sender_full_name_Set() const;
    bool is_sender_full_name_Valid() const;

    qint32 getSenderId() const;
    void setSenderId(const qint32 &sender_id);
    bool is_sender_id_Set() const;
    bool is_sender_id_Valid() const;

    QString getSenderRealmStr() const;
    void setSenderRealmStr(const QString &sender_realm_str);
    bool is_sender_realm_str_Set() const;
    bool is_sender_realm_str_Valid() const;

    qint32 getStreamId() const;
    void setStreamId(const qint32 &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    QString getSubject() const;
    void setSubject(const QString &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    QList<OAIMessagesBase_topic_links> getTopicLinks() const;
    void setTopicLinks(const QList<OAIMessagesBase_topic_links> &topic_links);
    bool is_topic_links_Set() const;
    bool is_topic_links_Valid() const;

    QList<QString> getSubmessages() const;
    void setSubmessages(const QList<QString> &submessages);
    bool is_submessages_Set() const;
    bool is_submessages_Valid() const;

    qint32 getTimestamp() const;
    void setTimestamp(const qint32 &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    QString client;
    bool m_client_isSet;
    bool m_client_isValid;

    QString content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAIOneOfstringarray display_recipient;
    bool m_display_recipient_isSet;
    bool m_display_recipient_isValid;

    qint32 id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool is_me_message;
    bool m_is_me_message_isSet;
    bool m_is_me_message_isValid;

    QList<OAIEmojiReaction> reactions;
    bool m_reactions_isSet;
    bool m_reactions_isValid;

    qint32 recipient_id;
    bool m_recipient_id_isSet;
    bool m_recipient_id_isValid;

    QString sender_email;
    bool m_sender_email_isSet;
    bool m_sender_email_isValid;

    QString sender_full_name;
    bool m_sender_full_name_isSet;
    bool m_sender_full_name_isValid;

    qint32 sender_id;
    bool m_sender_id_isSet;
    bool m_sender_id_isValid;

    QString sender_realm_str;
    bool m_sender_realm_str_isSet;
    bool m_sender_realm_str_isValid;

    qint32 stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;

    QString subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    QList<OAIMessagesBase_topic_links> topic_links;
    bool m_topic_links_isSet;
    bool m_topic_links_isValid;

    QList<QString> submessages;
    bool m_submessages_isSet;
    bool m_submessages_isValid;

    qint32 timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessagesBase)

#endif // OAIMessagesBase_H
