/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRealmEmoji.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRealmEmoji::OAIRealmEmoji(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRealmEmoji::OAIRealmEmoji() {
    this->initializeModel();
}

OAIRealmEmoji::~OAIRealmEmoji() {}

void OAIRealmEmoji::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_deactivated_isSet = false;
    m_deactivated_isValid = false;

    m_author_id_isSet = false;
    m_author_id_isValid = false;
}

void OAIRealmEmoji::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRealmEmoji::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(source_url, json[QString("source_url")]);
    m_source_url_isSet = !json[QString("source_url")].isNull() && m_source_url_isValid;

    m_deactivated_isValid = ::OpenAPI::fromJsonValue(deactivated, json[QString("deactivated")]);
    m_deactivated_isSet = !json[QString("deactivated")].isNull() && m_deactivated_isValid;

    m_author_id_isValid = ::OpenAPI::fromJsonValue(author_id, json[QString("author_id")]);
    m_author_id_isSet = !json[QString("author_id")].isNull() && m_author_id_isValid;
}

QString OAIRealmEmoji::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRealmEmoji::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("source_url"), ::OpenAPI::toJsonValue(source_url));
    }
    if (m_deactivated_isSet) {
        obj.insert(QString("deactivated"), ::OpenAPI::toJsonValue(deactivated));
    }
    if (m_author_id_isSet) {
        obj.insert(QString("author_id"), ::OpenAPI::toJsonValue(author_id));
    }
    return obj;
}

QString OAIRealmEmoji::getId() const {
    return id;
}
void OAIRealmEmoji::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIRealmEmoji::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRealmEmoji::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRealmEmoji::getName() const {
    return name;
}
void OAIRealmEmoji::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIRealmEmoji::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRealmEmoji::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRealmEmoji::getSourceUrl() const {
    return source_url;
}
void OAIRealmEmoji::setSourceUrl(const QString &source_url) {
    this->source_url = source_url;
    this->m_source_url_isSet = true;
}

bool OAIRealmEmoji::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIRealmEmoji::is_source_url_Valid() const{
    return m_source_url_isValid;
}

bool OAIRealmEmoji::isDeactivated() const {
    return deactivated;
}
void OAIRealmEmoji::setDeactivated(const bool &deactivated) {
    this->deactivated = deactivated;
    this->m_deactivated_isSet = true;
}

bool OAIRealmEmoji::is_deactivated_Set() const{
    return m_deactivated_isSet;
}

bool OAIRealmEmoji::is_deactivated_Valid() const{
    return m_deactivated_isValid;
}

qint32 OAIRealmEmoji::getAuthorId() const {
    return author_id;
}
void OAIRealmEmoji::setAuthorId(const qint32 &author_id) {
    this->author_id = author_id;
    this->m_author_id_isSet = true;
}

bool OAIRealmEmoji::is_author_id_Set() const{
    return m_author_id_isSet;
}

bool OAIRealmEmoji::is_author_id_Valid() const{
    return m_author_id_isValid;
}

bool OAIRealmEmoji::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deactivated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRealmEmoji::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
