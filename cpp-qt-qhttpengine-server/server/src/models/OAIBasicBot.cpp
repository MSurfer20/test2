/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasicBot.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasicBot::OAIBasicBot(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasicBot::OAIBasicBot() {
    this->initializeModel();
}

OAIBasicBot::~OAIBasicBot() {}

void OAIBasicBot::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_default_sending_stream_isSet = false;
    m_default_sending_stream_isValid = false;

    m_default_events_register_stream_isSet = false;
    m_default_events_register_stream_isValid = false;

    m_default_all_public_streams_isSet = false;
    m_default_all_public_streams_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_services_isSet = false;
    m_services_isValid = false;
}

void OAIBasicBot::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasicBot::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(api_key, json[QString("api_key")]);
    m_api_key_isSet = !json[QString("api_key")].isNull() && m_api_key_isValid;

    m_default_sending_stream_isValid = ::OpenAPI::fromJsonValue(default_sending_stream, json[QString("default_sending_stream")]);
    m_default_sending_stream_isSet = !json[QString("default_sending_stream")].isNull() && m_default_sending_stream_isValid;

    m_default_events_register_stream_isValid = ::OpenAPI::fromJsonValue(default_events_register_stream, json[QString("default_events_register_stream")]);
    m_default_events_register_stream_isSet = !json[QString("default_events_register_stream")].isNull() && m_default_events_register_stream_isValid;

    m_default_all_public_streams_isValid = ::OpenAPI::fromJsonValue(default_all_public_streams, json[QString("default_all_public_streams")]);
    m_default_all_public_streams_isSet = !json[QString("default_all_public_streams")].isNull() && m_default_all_public_streams_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(owner_id, json[QString("owner_id")]);
    m_owner_id_isSet = !json[QString("owner_id")].isNull() && m_owner_id_isValid;

    m_services_isValid = ::OpenAPI::fromJsonValue(services, json[QString("services")]);
    m_services_isSet = !json[QString("services")].isNull() && m_services_isValid;
}

QString OAIBasicBot::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasicBot::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(user_id));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(full_name));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("api_key"), ::OpenAPI::toJsonValue(api_key));
    }
    if (m_default_sending_stream_isSet) {
        obj.insert(QString("default_sending_stream"), ::OpenAPI::toJsonValue(default_sending_stream));
    }
    if (m_default_events_register_stream_isSet) {
        obj.insert(QString("default_events_register_stream"), ::OpenAPI::toJsonValue(default_events_register_stream));
    }
    if (m_default_all_public_streams_isSet) {
        obj.insert(QString("default_all_public_streams"), ::OpenAPI::toJsonValue(default_all_public_streams));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(avatar_url));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("owner_id"), ::OpenAPI::toJsonValue(owner_id));
    }
    if (m_services_isSet) {
        obj.insert(QString("services"), ::OpenAPI::toJsonValue(services));
    }
    return obj;
}

OAIAnyType OAIBasicBot::getUserId() const {
    return user_id;
}
void OAIBasicBot::setUserId(const OAIAnyType &user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

bool OAIBasicBot::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBasicBot::is_user_id_Valid() const{
    return m_user_id_isValid;
}

OAIAnyType OAIBasicBot::getFullName() const {
    return full_name;
}
void OAIBasicBot::setFullName(const OAIAnyType &full_name) {
    this->full_name = full_name;
    this->m_full_name_isSet = true;
}

bool OAIBasicBot::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIBasicBot::is_full_name_Valid() const{
    return m_full_name_isValid;
}

OAIAnyType OAIBasicBot::getApiKey() const {
    return api_key;
}
void OAIBasicBot::setApiKey(const OAIAnyType &api_key) {
    this->api_key = api_key;
    this->m_api_key_isSet = true;
}

bool OAIBasicBot::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIBasicBot::is_api_key_Valid() const{
    return m_api_key_isValid;
}

OAIAnyType OAIBasicBot::getDefaultSendingStream() const {
    return default_sending_stream;
}
void OAIBasicBot::setDefaultSendingStream(const OAIAnyType &default_sending_stream) {
    this->default_sending_stream = default_sending_stream;
    this->m_default_sending_stream_isSet = true;
}

bool OAIBasicBot::is_default_sending_stream_Set() const{
    return m_default_sending_stream_isSet;
}

bool OAIBasicBot::is_default_sending_stream_Valid() const{
    return m_default_sending_stream_isValid;
}

OAIAnyType OAIBasicBot::getDefaultEventsRegisterStream() const {
    return default_events_register_stream;
}
void OAIBasicBot::setDefaultEventsRegisterStream(const OAIAnyType &default_events_register_stream) {
    this->default_events_register_stream = default_events_register_stream;
    this->m_default_events_register_stream_isSet = true;
}

bool OAIBasicBot::is_default_events_register_stream_Set() const{
    return m_default_events_register_stream_isSet;
}

bool OAIBasicBot::is_default_events_register_stream_Valid() const{
    return m_default_events_register_stream_isValid;
}

OAIAnyType OAIBasicBot::getDefaultAllPublicStreams() const {
    return default_all_public_streams;
}
void OAIBasicBot::setDefaultAllPublicStreams(const OAIAnyType &default_all_public_streams) {
    this->default_all_public_streams = default_all_public_streams;
    this->m_default_all_public_streams_isSet = true;
}

bool OAIBasicBot::is_default_all_public_streams_Set() const{
    return m_default_all_public_streams_isSet;
}

bool OAIBasicBot::is_default_all_public_streams_Valid() const{
    return m_default_all_public_streams_isValid;
}

OAIAnyType OAIBasicBot::getAvatarUrl() const {
    return avatar_url;
}
void OAIBasicBot::setAvatarUrl(const OAIAnyType &avatar_url) {
    this->avatar_url = avatar_url;
    this->m_avatar_url_isSet = true;
}

bool OAIBasicBot::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIBasicBot::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

OAIAnyType OAIBasicBot::getOwnerId() const {
    return owner_id;
}
void OAIBasicBot::setOwnerId(const OAIAnyType &owner_id) {
    this->owner_id = owner_id;
    this->m_owner_id_isSet = true;
}

bool OAIBasicBot::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAIBasicBot::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

OAIAnyType OAIBasicBot::getServices() const {
    return services;
}
void OAIBasicBot::setServices(const OAIAnyType &services) {
    this->services = services;
    this->m_services_isSet = true;
}

bool OAIBasicBot::is_services_Set() const{
    return m_services_isSet;
}

bool OAIBasicBot::is_services_Valid() const{
    return m_services_isValid;
}

bool OAIBasicBot::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_sending_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_events_register_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_all_public_streams_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasicBot::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
