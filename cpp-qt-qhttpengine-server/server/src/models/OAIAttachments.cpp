/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachments::OAIAttachments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachments::OAIAttachments() {
    this->initializeModel();
}

OAIAttachments::~OAIAttachments() {}

void OAIAttachments::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_id_isSet = false;
    m_path_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIAttachments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachments::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_id_isValid = ::OpenAPI::fromJsonValue(path_id, json[QString("path_id")]);
    m_path_id_isSet = !json[QString("path_id")].isNull() && m_path_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(create_time, json[QString("create_time")]);
    m_create_time_isSet = !json[QString("create_time")].isNull() && m_create_time_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIAttachments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachments::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_path_id_isSet) {
        obj.insert(QString("path_id"), ::OpenAPI::toJsonValue(path_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(size));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("create_time"), ::OpenAPI::toJsonValue(create_time));
    }
    if (messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(messages));
    }
    return obj;
}

qint32 OAIAttachments::getId() const {
    return id;
}
void OAIAttachments::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAttachments::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAttachments::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAttachments::getName() const {
    return name;
}
void OAIAttachments::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIAttachments::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAttachments::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAttachments::getPathId() const {
    return path_id;
}
void OAIAttachments::setPathId(const QString &path_id) {
    this->path_id = path_id;
    this->m_path_id_isSet = true;
}

bool OAIAttachments::is_path_id_Set() const{
    return m_path_id_isSet;
}

bool OAIAttachments::is_path_id_Valid() const{
    return m_path_id_isValid;
}

qint32 OAIAttachments::getSize() const {
    return size;
}
void OAIAttachments::setSize(const qint32 &size) {
    this->size = size;
    this->m_size_isSet = true;
}

bool OAIAttachments::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAttachments::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIAttachments::getCreateTime() const {
    return create_time;
}
void OAIAttachments::setCreateTime(const qint32 &create_time) {
    this->create_time = create_time;
    this->m_create_time_isSet = true;
}

bool OAIAttachments::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAttachments::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList<OAIAttachments_messages> OAIAttachments::getMessages() const {
    return messages;
}
void OAIAttachments::setMessages(const QList<OAIAttachments_messages> &messages) {
    this->messages = messages;
    this->m_messages_isSet = true;
}

bool OAIAttachments::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIAttachments::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIAttachments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachments::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
