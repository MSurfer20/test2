/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDraft.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDraft::OAIDraft(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDraft::OAIDraft() {
    this->initializeModel();
}

OAIDraft::~OAIDraft() {}

void OAIDraft::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIDraft::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDraft::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIDraft::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDraft::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (to.size() > 0) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(to));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(topic));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(content));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(timestamp));
    }
    return obj;
}

qint32 OAIDraft::getId() const {
    return id;
}
void OAIDraft::setId(const qint32 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIDraft::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDraft::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDraft::getType() const {
    return type;
}
void OAIDraft::setType(const QString &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIDraft::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDraft::is_type_Valid() const{
    return m_type_isValid;
}

QList<qint32> OAIDraft::getTo() const {
    return to;
}
void OAIDraft::setTo(const QList<qint32> &to) {
    this->to = to;
    this->m_to_isSet = true;
}

bool OAIDraft::is_to_Set() const{
    return m_to_isSet;
}

bool OAIDraft::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIDraft::getTopic() const {
    return topic;
}
void OAIDraft::setTopic(const QString &topic) {
    this->topic = topic;
    this->m_topic_isSet = true;
}

bool OAIDraft::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIDraft::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIDraft::getContent() const {
    return content;
}
void OAIDraft::setContent(const QString &content) {
    this->content = content;
    this->m_content_isSet = true;
}

bool OAIDraft::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDraft::is_content_Valid() const{
    return m_content_isValid;
}

double OAIDraft::getTimestamp() const {
    return timestamp;
}
void OAIDraft::setTimestamp(const double &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool OAIDraft::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDraft::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIDraft::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDraft::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_to_isValid && m_topic_isValid && m_content_isValid && true;
}

} // namespace OpenAPI
