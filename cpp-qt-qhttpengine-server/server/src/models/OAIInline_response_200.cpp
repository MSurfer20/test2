/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200::OAIInline_response_200(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200::OAIInline_response_200() {
    this->initializeModel();
}

OAIInline_response_200::~OAIInline_response_200() {}

void OAIInline_response_200::initializeModel() {

    m_bot_email_isSet = false;
    m_bot_email_isValid = false;

    m_bot_full_name_isSet = false;
    m_bot_full_name_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIInline_response_200::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200::fromJsonObject(QJsonObject json) {

    m_bot_email_isValid = ::OpenAPI::fromJsonValue(bot_email, json[QString("bot_email")]);
    m_bot_email_isSet = !json[QString("bot_email")].isNull() && m_bot_email_isValid;

    m_bot_full_name_isValid = ::OpenAPI::fromJsonValue(bot_full_name, json[QString("bot_full_name")]);
    m_bot_full_name_isSet = !json[QString("bot_full_name")].isNull() && m_bot_full_name_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIInline_response_200::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_email_isSet) {
        obj.insert(QString("bot_email"), ::OpenAPI::toJsonValue(bot_email));
    }
    if (m_bot_full_name_isSet) {
        obj.insert(QString("bot_full_name"), ::OpenAPI::toJsonValue(bot_full_name));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(data));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(trigger));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(token));
    }
    if (message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(message));
    }
    return obj;
}

QString OAIInline_response_200::getBotEmail() const {
    return bot_email;
}
void OAIInline_response_200::setBotEmail(const QString &bot_email) {
    this->bot_email = bot_email;
    this->m_bot_email_isSet = true;
}

bool OAIInline_response_200::is_bot_email_Set() const{
    return m_bot_email_isSet;
}

bool OAIInline_response_200::is_bot_email_Valid() const{
    return m_bot_email_isValid;
}

QString OAIInline_response_200::getBotFullName() const {
    return bot_full_name;
}
void OAIInline_response_200::setBotFullName(const QString &bot_full_name) {
    this->bot_full_name = bot_full_name;
    this->m_bot_full_name_isSet = true;
}

bool OAIInline_response_200::is_bot_full_name_Set() const{
    return m_bot_full_name_isSet;
}

bool OAIInline_response_200::is_bot_full_name_Valid() const{
    return m_bot_full_name_isValid;
}

QString OAIInline_response_200::getData() const {
    return data;
}
void OAIInline_response_200::setData(const QString &data) {
    this->data = data;
    this->m_data_isSet = true;
}

bool OAIInline_response_200::is_data_Set() const{
    return m_data_isSet;
}

bool OAIInline_response_200::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIInline_response_200::getTrigger() const {
    return trigger;
}
void OAIInline_response_200::setTrigger(const QString &trigger) {
    this->trigger = trigger;
    this->m_trigger_isSet = true;
}

bool OAIInline_response_200::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIInline_response_200::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIInline_response_200::getToken() const {
    return token;
}
void OAIInline_response_200::setToken(const QString &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAIInline_response_200::is_token_Set() const{
    return m_token_isSet;
}

bool OAIInline_response_200::is_token_Valid() const{
    return m_token_isValid;
}

OAIMessagesBase OAIInline_response_200::getMessage() const {
    return message;
}
void OAIInline_response_200::setMessage(const OAIMessagesBase &message) {
    this->message = message;
    this->m_message_isSet = true;
}

bool OAIInline_response_200::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInline_response_200::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIInline_response_200::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
