/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRateLimitedError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRateLimitedError::OAIRateLimitedError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRateLimitedError::OAIRateLimitedError() {
    this->initializeModel();
}

OAIRateLimitedError::~OAIRateLimitedError() {}

void OAIRateLimitedError::initializeModel() {

    m_result_isSet = false;
    m_result_isValid = false;

    m_msg_isSet = false;
    m_msg_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void OAIRateLimitedError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRateLimitedError::fromJsonObject(QJsonObject json) {

    m_result_isValid = ::OpenAPI::fromJsonValue(result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_msg_isValid = ::OpenAPI::fromJsonValue(msg, json[QString("msg")]);
    m_msg_isSet = !json[QString("msg")].isNull() && m_msg_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString OAIRateLimitedError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRateLimitedError::asJsonObject() const {
    QJsonObject obj;
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(result));
    }
    if (m_msg_isSet) {
        obj.insert(QString("msg"), ::OpenAPI::toJsonValue(msg));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(code));
    }
    return obj;
}

OAIAnyType OAIRateLimitedError::getResult() const {
    return result;
}
void OAIRateLimitedError::setResult(const OAIAnyType &result) {
    this->result = result;
    this->m_result_isSet = true;
}

bool OAIRateLimitedError::is_result_Set() const{
    return m_result_isSet;
}

bool OAIRateLimitedError::is_result_Valid() const{
    return m_result_isValid;
}

OAIAnyType OAIRateLimitedError::getMsg() const {
    return msg;
}
void OAIRateLimitedError::setMsg(const OAIAnyType &msg) {
    this->msg = msg;
    this->m_msg_isSet = true;
}

bool OAIRateLimitedError::is_msg_Set() const{
    return m_msg_isSet;
}

bool OAIRateLimitedError::is_msg_Valid() const{
    return m_msg_isValid;
}

OAIAnyType OAIRateLimitedError::getCode() const {
    return code;
}
void OAIRateLimitedError::setCode(const OAIAnyType &code) {
    this->code = code;
    this->m_code_isSet = true;
}

bool OAIRateLimitedError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRateLimitedError::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIRateLimitedError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msg_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRateLimitedError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_result_isValid && m_msg_isValid && true;
}

} // namespace OpenAPI
