/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetMessages_allOf.h
 *
 * 
 */

#ifndef OAIGetMessages_allOf_H
#define OAIGetMessages_allOf_H

#include <QJsonObject>

#include "OAIAnyType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetMessages_allOf : public OAIObject {
public:
    OAIGetMessages_allOf();
    OAIGetMessages_allOf(QString json);
    ~OAIGetMessages_allOf() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAnyType getAvatarUrl() const;
    void setAvatarUrl(const OAIAnyType &avatar_url);
    bool is_avatar_url_Set() const;
    bool is_avatar_url_Valid() const;

    OAIAnyType getClient() const;
    void setClient(const OAIAnyType &client);
    bool is_client_Set() const;
    bool is_client_Valid() const;

    OAIAnyType getContent() const;
    void setContent(const OAIAnyType &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    OAIAnyType getContentType() const;
    void setContentType(const OAIAnyType &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    OAIAnyType getDisplayRecipient() const;
    void setDisplayRecipient(const OAIAnyType &display_recipient);
    bool is_display_recipient_Set() const;
    bool is_display_recipient_Valid() const;

    OAIAnyType getId() const;
    void setId(const OAIAnyType &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIAnyType getIsMeMessage() const;
    void setIsMeMessage(const OAIAnyType &is_me_message);
    bool is_is_me_message_Set() const;
    bool is_is_me_message_Valid() const;

    OAIAnyType getReactions() const;
    void setReactions(const OAIAnyType &reactions);
    bool is_reactions_Set() const;
    bool is_reactions_Valid() const;

    OAIAnyType getRecipientId() const;
    void setRecipientId(const OAIAnyType &recipient_id);
    bool is_recipient_id_Set() const;
    bool is_recipient_id_Valid() const;

    OAIAnyType getSenderEmail() const;
    void setSenderEmail(const OAIAnyType &sender_email);
    bool is_sender_email_Set() const;
    bool is_sender_email_Valid() const;

    OAIAnyType getSenderFullName() const;
    void setSenderFullName(const OAIAnyType &sender_full_name);
    bool is_sender_full_name_Set() const;
    bool is_sender_full_name_Valid() const;

    OAIAnyType getSenderId() const;
    void setSenderId(const OAIAnyType &sender_id);
    bool is_sender_id_Set() const;
    bool is_sender_id_Valid() const;

    OAIAnyType getSenderRealmStr() const;
    void setSenderRealmStr(const OAIAnyType &sender_realm_str);
    bool is_sender_realm_str_Set() const;
    bool is_sender_realm_str_Valid() const;

    OAIAnyType getStreamId() const;
    void setStreamId(const OAIAnyType &stream_id);
    bool is_stream_id_Set() const;
    bool is_stream_id_Valid() const;

    OAIAnyType getSubject() const;
    void setSubject(const OAIAnyType &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    OAIAnyType getTopicLinks() const;
    void setTopicLinks(const OAIAnyType &topic_links);
    bool is_topic_links_Set() const;
    bool is_topic_links_Valid() const;

    OAIAnyType getSubmessages() const;
    void setSubmessages(const OAIAnyType &submessages);
    bool is_submessages_Set() const;
    bool is_submessages_Valid() const;

    OAIAnyType getTimestamp() const;
    void setTimestamp(const OAIAnyType &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    OAIAnyType getType() const;
    void setType(const OAIAnyType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<QString> getFlags() const;
    void setFlags(const QList<QString> &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    qint32 getLastEditTimestamp() const;
    void setLastEditTimestamp(const qint32 &last_edit_timestamp);
    bool is_last_edit_timestamp_Set() const;
    bool is_last_edit_timestamp_Valid() const;

    QString getMatchContent() const;
    void setMatchContent(const QString &match_content);
    bool is_match_content_Set() const;
    bool is_match_content_Valid() const;

    QString getMatchSubject() const;
    void setMatchSubject(const QString &match_subject);
    bool is_match_subject_Set() const;
    bool is_match_subject_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAnyType avatar_url;
    bool m_avatar_url_isSet;
    bool m_avatar_url_isValid;

    OAIAnyType client;
    bool m_client_isSet;
    bool m_client_isValid;

    OAIAnyType content;
    bool m_content_isSet;
    bool m_content_isValid;

    OAIAnyType content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    OAIAnyType display_recipient;
    bool m_display_recipient_isSet;
    bool m_display_recipient_isValid;

    OAIAnyType id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIAnyType is_me_message;
    bool m_is_me_message_isSet;
    bool m_is_me_message_isValid;

    OAIAnyType reactions;
    bool m_reactions_isSet;
    bool m_reactions_isValid;

    OAIAnyType recipient_id;
    bool m_recipient_id_isSet;
    bool m_recipient_id_isValid;

    OAIAnyType sender_email;
    bool m_sender_email_isSet;
    bool m_sender_email_isValid;

    OAIAnyType sender_full_name;
    bool m_sender_full_name_isSet;
    bool m_sender_full_name_isValid;

    OAIAnyType sender_id;
    bool m_sender_id_isSet;
    bool m_sender_id_isValid;

    OAIAnyType sender_realm_str;
    bool m_sender_realm_str_isSet;
    bool m_sender_realm_str_isValid;

    OAIAnyType stream_id;
    bool m_stream_id_isSet;
    bool m_stream_id_isValid;

    OAIAnyType subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    OAIAnyType topic_links;
    bool m_topic_links_isSet;
    bool m_topic_links_isValid;

    OAIAnyType submessages;
    bool m_submessages_isSet;
    bool m_submessages_isValid;

    OAIAnyType timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    OAIAnyType type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<QString> flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    qint32 last_edit_timestamp;
    bool m_last_edit_timestamp_isSet;
    bool m_last_edit_timestamp_isValid;

    QString match_content;
    bool m_match_content_isSet;
    bool m_match_content_isValid;

    QString match_subject;
    bool m_match_subject_isSet;
    bool m_match_subject_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetMessages_allOf)

#endif // OAIGetMessages_allOf_H
