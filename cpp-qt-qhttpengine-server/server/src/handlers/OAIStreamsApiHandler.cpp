/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIStreamsApiHandler.h"
#include "OAIStreamsApiRequest.h"

namespace OpenAPI {

OAIStreamsApiHandler::OAIStreamsApiHandler(){

}

OAIStreamsApiHandler::~OAIStreamsApiHandler(){

}

void OAIStreamsApiHandler::archiveStream(qint32 stream_id) {
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->archiveStreamResponse(res);
    }    
}
void OAIStreamsApiHandler::createBigBlueButtonVideoCall() {
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->createBigBlueButtonVideoCallResponse(res);
    }    
}
void OAIStreamsApiHandler::deleteTopic(qint32 stream_id, QString topic_name) {
    Q_UNUSED(stream_id);
    Q_UNUSED(topic_name);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->deleteTopicResponse(res);
    }    
}
void OAIStreamsApiHandler::getStreamId(QString stream) {
    Q_UNUSED(stream);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getStreamIdResponse(res);
    }    
}
void OAIStreamsApiHandler::getStreamTopics(qint32 stream_id) {
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getStreamTopicsResponse(res);
    }    
}
void OAIStreamsApiHandler::getStreams(bool include_public, bool include_web_public, bool include_subscribed, bool include_all_active, bool include_default, bool include_owner_subscribed) {
    Q_UNUSED(include_public);
    Q_UNUSED(include_web_public);
    Q_UNUSED(include_subscribed);
    Q_UNUSED(include_all_active);
    Q_UNUSED(include_default);
    Q_UNUSED(include_owner_subscribed);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getStreamsResponse(res);
    }    
}
void OAIStreamsApiHandler::getSubscribers(qint32 stream_id) {
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getSubscribersResponse(res);
    }    
}
void OAIStreamsApiHandler::getSubscriptionStatus(qint32 user_id, qint32 stream_id) {
    Q_UNUSED(user_id);
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getSubscriptionStatusResponse(res);
    }    
}
void OAIStreamsApiHandler::getSubscriptions(bool include_subscribers) {
    Q_UNUSED(include_subscribers);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getSubscriptionsResponse(res);
    }    
}
void OAIStreamsApiHandler::muteTopic(QString topic, QString op, QString stream, qint32 stream_id) {
    Q_UNUSED(topic);
    Q_UNUSED(op);
    Q_UNUSED(stream);
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->muteTopicResponse(res);
    }    
}
void OAIStreamsApiHandler::subscribe(QList<OAIObject> subscriptions, QList<OAIOneOfstringinteger> principals, bool authorization_errors_fatal, bool announce, bool invite_only, bool history_public_to_subscribers, qint32 stream_post_policy, OAIOneOfstringinteger message_retention_days) {
    Q_UNUSED(subscriptions);
    Q_UNUSED(principals);
    Q_UNUSED(authorization_errors_fatal);
    Q_UNUSED(announce);
    Q_UNUSED(invite_only);
    Q_UNUSED(history_public_to_subscribers);
    Q_UNUSED(stream_post_policy);
    Q_UNUSED(message_retention_days);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIOneOfobjectobject res;
        reqObj->subscribeResponse(res);
    }    
}
void OAIStreamsApiHandler::unsubscribe(QList<QString> subscriptions, QList<OAIOneOfstringinteger> principals) {
    Q_UNUSED(subscriptions);
    Q_UNUSED(principals);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->unsubscribeResponse(res);
    }    
}
void OAIStreamsApiHandler::updateStream(qint32 stream_id, QString description, QString new_name, bool is_private, bool is_announcement_only, qint32 stream_post_policy, bool history_public_to_subscribers, OAIOneOfstringinteger message_retention_days) {
    Q_UNUSED(stream_id);
    Q_UNUSED(description);
    Q_UNUSED(new_name);
    Q_UNUSED(is_private);
    Q_UNUSED(is_announcement_only);
    Q_UNUSED(stream_post_policy);
    Q_UNUSED(history_public_to_subscribers);
    Q_UNUSED(message_retention_days);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->updateStreamResponse(res);
    }    
}
void OAIStreamsApiHandler::updateSubscriptionSettings(QList<OAIObject> subscription_data) {
    Q_UNUSED(subscription_data);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->updateSubscriptionSettingsResponse(res);
    }    
}
void OAIStreamsApiHandler::updateSubscriptions(QList<QString> r_delete, QList<OAIObject> add) {
    Q_UNUSED(r_delete);
    Q_UNUSED(add);
    auto reqObj = qobject_cast<OAIStreamsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->updateSubscriptionsResponse(res);
    }    
}


}
