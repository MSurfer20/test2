/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>


#include "OAIApiRouter.h"
#include "OAIAuthenticationApiRequest.h"
#include "OAIDraftsApiRequest.h"
#include "OAIMessagesApiRequest.h"
#include "OAIRealTimeEventsApiRequest.h"
#include "OAIServerAndOrganizationsApiRequest.h"
#include "OAIStreamsApiRequest.h"
#include "OAIUsersApiRequest.h"
#include "OAIWebhooksApiRequest.h"


namespace OpenAPI {

OAIApiRouter::OAIApiRouter() {
    createApiHandlers();
}

OAIApiRouter::~OAIApiRouter(){

}

void OAIApiRouter::createApiHandlers() { 
    mOAIAuthenticationApiHandler = QSharedPointer<OAIAuthenticationApiHandler>::create();
    mOAIDraftsApiHandler = QSharedPointer<OAIDraftsApiHandler>::create();
    mOAIMessagesApiHandler = QSharedPointer<OAIMessagesApiHandler>::create();
    mOAIRealTimeEventsApiHandler = QSharedPointer<OAIRealTimeEventsApiHandler>::create();
    mOAIServerAndOrganizationsApiHandler = QSharedPointer<OAIServerAndOrganizationsApiHandler>::create();
    mOAIStreamsApiHandler = QSharedPointer<OAIStreamsApiHandler>::create();
    mOAIUsersApiHandler = QSharedPointer<OAIUsersApiHandler>::create();
    mOAIWebhooksApiHandler = QSharedPointer<OAIWebhooksApiHandler>::create();
}


void OAIApiRouter::setOAIAuthenticationApiHandler(QSharedPointer<OAIAuthenticationApiHandler> handler){
    mOAIAuthenticationApiHandler = handler;
}
void OAIApiRouter::setOAIDraftsApiHandler(QSharedPointer<OAIDraftsApiHandler> handler){
    mOAIDraftsApiHandler = handler;
}
void OAIApiRouter::setOAIMessagesApiHandler(QSharedPointer<OAIMessagesApiHandler> handler){
    mOAIMessagesApiHandler = handler;
}
void OAIApiRouter::setOAIRealTimeEventsApiHandler(QSharedPointer<OAIRealTimeEventsApiHandler> handler){
    mOAIRealTimeEventsApiHandler = handler;
}
void OAIApiRouter::setOAIServerAndOrganizationsApiHandler(QSharedPointer<OAIServerAndOrganizationsApiHandler> handler){
    mOAIServerAndOrganizationsApiHandler = handler;
}
void OAIApiRouter::setOAIStreamsApiHandler(QSharedPointer<OAIStreamsApiHandler> handler){
    mOAIStreamsApiHandler = handler;
}
void OAIApiRouter::setOAIUsersApiHandler(QSharedPointer<OAIUsersApiHandler> handler){
    mOAIUsersApiHandler = handler;
}
void OAIApiRouter::setOAIWebhooksApiHandler(QSharedPointer<OAIWebhooksApiHandler> handler){
    mOAIWebhooksApiHandler = handler;
}

void OAIApiRouter::setUpRoutes() {
    
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/dev_fetch_api_key").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIAuthenticationApiRequest(socket, mOAIAuthenticationApiHandler);
            reqObj->devFetchApiKeyRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/fetch_api_key").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIAuthenticationApiRequest(socket, mOAIAuthenticationApiHandler);
            reqObj->fetchApiKeyRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/drafts").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIDraftsApiRequest(socket, mOAIDraftsApiHandler);
            reqObj->createDraftsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/drafts").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIDraftsApiRequest(socket, mOAIDraftsApiHandler);
            reqObj->getDraftsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/messages/matches_narrow").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->checkMessagesMatchNarrowRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/messages").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->getMessagesRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/mark_all_as_read").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->markAllAsReadRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/mark_stream_as_read").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->markStreamAsReadRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/mark_topic_as_read").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->markTopicAsReadRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/messages/render").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->renderMessageRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/messages").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->sendMessageRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/messages/flags").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->updateMessageFlagsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/user_uploads").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
            reqObj->uploadFileRequest();
    });
    Routes.insert(QString("%1 %2").arg("DELETE").arg("/api/v1/events").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRealTimeEventsApiRequest(socket, mOAIRealTimeEventsApiHandler);
            reqObj->deleteQueueRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/events").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRealTimeEventsApiRequest(socket, mOAIRealTimeEventsApiHandler);
            reqObj->getEventsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/real-time").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRealTimeEventsApiRequest(socket, mOAIRealTimeEventsApiHandler);
            reqObj->realTimePostRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/register").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRealTimeEventsApiRequest(socket, mOAIRealTimeEventsApiHandler);
            reqObj->registerQueueRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/rest-error-handling").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIRealTimeEventsApiRequest(socket, mOAIRealTimeEventsApiHandler);
            reqObj->restErrorHandlingRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/realm/playgrounds").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->addCodePlaygroundRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/realm/filters").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->addLinkifierRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/realm/profile_fields").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->createCustomProfileFieldRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/realm/emoji").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->getCustomEmojiRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/realm/profile_fields").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->getCustomProfileFieldsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/realm/linkifiers").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->getLinkifiersRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/server_settings").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->getServerSettingsRequest();
    });
    Routes.insert(QString("%1 %2").arg("PATCH").arg("/api/v1/realm/profile_fields").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
            reqObj->reorderCustomProfileFieldsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/calls/bigbluebutton/create").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->createBigBlueButtonVideoCallRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/get_stream_id").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->getStreamIdRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/streams").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->getStreamsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/users/me/subscriptions").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->getSubscriptionsRequest();
    });
    Routes.insert(QString("%1 %2").arg("PATCH").arg("/api/v1/users/me/subscriptions/muted_topics").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->muteTopicRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/users/me/subscriptions").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->subscribeRequest();
    });
    Routes.insert(QString("%1 %2").arg("DELETE").arg("/api/v1/users/me/subscriptions").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->unsubscribeRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/users/me/subscriptions/properties").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->updateSubscriptionSettingsRequest();
    });
    Routes.insert(QString("%1 %2").arg("PATCH").arg("/api/v1/users/me/subscriptions").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
            reqObj->updateSubscriptionsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/users").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->createUserRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/user_groups/create").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->createUserGroupRequest();
    });
    Routes.insert(QString("%1 %2").arg("DELETE").arg("/api/v1/users/me").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->deactivateOwnUserRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/attachments").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->getAttachmentsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/users/me").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->getOwnUserRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/user_groups").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->getUserGroupsRequest();
    });
    Routes.insert(QString("%1 %2").arg("GET").arg("/api/v1/users").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->getUsersRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/typing").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->setTypingStatusRequest();
    });
    Routes.insert(QString("%1 %2").arg("PATCH").arg("/api/v1/settings").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->updateSettingsRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/users/me/status").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
            reqObj->updateStatusRequest();
    });
    Routes.insert(QString("%1 %2").arg("POST").arg("/api/v1/zulip-outgoing-webhook").toLower(), [this](QHttpEngine::Socket *socket) {
            auto reqObj = new OAIWebhooksApiRequest(socket, mOAIWebhooksApiHandler);
            reqObj->zulipOutgoingWebhooksRequest();
    });
}

void OAIApiRouter::processRequest(QHttpEngine::Socket *socket){
    if( handleRequest(socket) ){
        return;
    }
    if( handleRequestAndExtractPathParam(socket) ){
        return;
    }
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    if(socket->isOpen()){
        socket->writeHeaders();
        socket->close();
    }
}

bool OAIApiRouter::handleRequest(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    if ( Routes.contains(reqPath) ) {
        Routes.value(reqPath).operator()(socket);
        return true;
    }
    return false;
}

bool OAIApiRouter::handleRequestAndExtractPathParam(QHttpEngine::Socket *socket){
    auto reqPath = QString("%1 %2").arg(fromQHttpEngineMethod(socket->method())).arg(socket->path()).toLower();
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/drafts/{draft_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString draft_id = match.captured(QString("draft_id").toLower());
                auto reqObj = new OAIDraftsApiRequest(socket, mOAIDraftsApiHandler);
                reqObj->deleteDraftRequest(draft_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/drafts/{draft_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString draft_id = match.captured(QString("draft_id").toLower());
                auto reqObj = new OAIDraftsApiRequest(socket, mOAIDraftsApiHandler);
                reqObj->editDraftRequest(draft_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/messages/{message_id}/reactions").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->addReactionRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/messages/{message_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->deleteMessageRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/user_uploads/{realm_id_str}/{filename}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString realm_id_str = match.captured(QString("realm_id_str").toLower());
                QString filename = match.captured(QString("filename").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->getFileTemporaryUrlRequest(realm_id_str, filename);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/messages/{message_id}/history").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->getMessageHistoryRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/messages/{message_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->getRawMessageRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/messages/{message_id}/reactions").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->removeReactionRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/messages/{message_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString message_id = match.captured(QString("message_id").toLower());
                auto reqObj = new OAIMessagesApiRequest(socket, mOAIMessagesApiHandler);
                reqObj->updateMessageRequest(message_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/realm/playgrounds/{playground_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString playground_id = match.captured(QString("playground_id").toLower());
                auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
                reqObj->removeCodePlaygroundRequest(playground_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/realm/filters/{filter_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString filter_id = match.captured(QString("filter_id").toLower());
                auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
                reqObj->removeLinkifierRequest(filter_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/realm/filters/{filter_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString filter_id = match.captured(QString("filter_id").toLower());
                auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
                reqObj->updateLinkifierRequest(filter_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/realm/emoji/{emoji_name}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString emoji_name = match.captured(QString("emoji_name").toLower());
                auto reqObj = new OAIServerAndOrganizationsApiRequest(socket, mOAIServerAndOrganizationsApiHandler);
                reqObj->uploadCustomEmojiRequest(emoji_name);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/streams/{stream_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->archiveStreamRequest(stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/streams/{stream_id}/delete_topic").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->deleteTopicRequest(stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/users/me/{stream_id}/topics").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->getStreamTopicsRequest(stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/streams/{stream_id}/members").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->getSubscribersRequest(stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/users/{user_id}/subscriptions/{stream_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id = match.captured(QString("user_id").toLower());
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->getSubscriptionStatusRequest(user_id, stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/streams/{stream_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString stream_id = match.captured(QString("stream_id").toLower());
                auto reqObj = new OAIStreamsApiRequest(socket, mOAIStreamsApiHandler);
                reqObj->updateStreamRequest(stream_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/users/{user_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id = match.captured(QString("user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->deactivateUserRequest(user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/users/{user_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id = match.captured(QString("user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->getUserRequest(user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/users/{email}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString email = match.captured(QString("email").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->getUserByEmailRequest(email);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("GET").arg("/api/v1/users/{user_id_or_email}/presence").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id_or_email = match.captured(QString("user_id_or_email").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->getUserPresenceRequest(user_id_or_email);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/users/me/muted_users/{muted_user_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString muted_user_id = match.captured(QString("muted_user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->muteUserRequest(muted_user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/users/{user_id}/reactivate").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id = match.captured(QString("user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->reactivateUserRequest(user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/user_groups/{user_group_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_group_id = match.captured(QString("user_group_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->removeUserGroupRequest(user_group_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("DELETE").arg("/api/v1/users/me/muted_users/{muted_user_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString muted_user_id = match.captured(QString("muted_user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->unmuteUserRequest(muted_user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/users/{user_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_id = match.captured(QString("user_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->updateUserRequest(user_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("PATCH").arg("/api/v1/user_groups/{user_group_id}").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_group_id = match.captured(QString("user_group_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->updateUserGroupRequest(user_group_id);
                return true;
            }
        }
    }
    {
        auto completePath = QString("%1 %2").arg("POST").arg("/api/v1/user_groups/{user_group_id}/members").toLower();
        if ( reqPath.startsWith(completePath.leftRef( completePath.indexOf(QString("/{")))) ) {
            QRegularExpressionMatch match = getRequestMatch( completePath, reqPath );
            if ( match.hasMatch() ){
                QString user_group_id = match.captured(QString("user_group_id").toLower());
                auto reqObj = new OAIUsersApiRequest(socket, mOAIUsersApiHandler);
                reqObj->updateUserGroupMembersRequest(user_group_id);
                return true;
            }
        }
    }
    return false;
}

}
