/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIUsersApiHandler.h"
#include "OAIUsersApiRequest.h"

namespace OpenAPI {

OAIUsersApiHandler::OAIUsersApiHandler(){

}

OAIUsersApiHandler::~OAIUsersApiHandler(){

}

void OAIUsersApiHandler::createUser(QString email, QString password, QString full_name) {
    Q_UNUSED(email);
    Q_UNUSED(password);
    Q_UNUSED(full_name);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->createUserResponse(res);
    }    
}
void OAIUsersApiHandler::createUserGroup(QString name, QString description, QList<qint32> members) {
    Q_UNUSED(name);
    Q_UNUSED(description);
    Q_UNUSED(members);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->createUserGroupResponse(res);
    }    
}
void OAIUsersApiHandler::deactivateOwnUser() {
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->deactivateOwnUserResponse(res);
    }    
}
void OAIUsersApiHandler::deactivateUser(qint32 user_id) {
    Q_UNUSED(user_id);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->deactivateUserResponse(res);
    }    
}
void OAIUsersApiHandler::getAttachments() {
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getAttachmentsResponse(res);
    }    
}
void OAIUsersApiHandler::getOwnUser() {
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getOwnUserResponse(res);
    }    
}
void OAIUsersApiHandler::getUser(qint32 user_id, bool client_gravatar, bool include_custom_profile_fields) {
    Q_UNUSED(user_id);
    Q_UNUSED(client_gravatar);
    Q_UNUSED(include_custom_profile_fields);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getUserResponse(res);
    }    
}
void OAIUsersApiHandler::getUserByEmail(QString email, bool client_gravatar, bool include_custom_profile_fields) {
    Q_UNUSED(email);
    Q_UNUSED(client_gravatar);
    Q_UNUSED(include_custom_profile_fields);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getUserByEmailResponse(res);
    }    
}
void OAIUsersApiHandler::getUserGroups() {
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getUserGroupsResponse(res);
    }    
}
void OAIUsersApiHandler::getUserPresence(QString user_id_or_email) {
    Q_UNUSED(user_id_or_email);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getUserPresenceResponse(res);
    }    
}
void OAIUsersApiHandler::getUsers(bool client_gravatar, bool include_custom_profile_fields) {
    Q_UNUSED(client_gravatar);
    Q_UNUSED(include_custom_profile_fields);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getUsersResponse(res);
    }    
}
void OAIUsersApiHandler::muteUser(qint32 muted_user_id) {
    Q_UNUSED(muted_user_id);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->muteUserResponse(res);
    }    
}
void OAIUsersApiHandler::reactivateUser(qint32 user_id) {
    Q_UNUSED(user_id);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIAnyType res;
        reqObj->reactivateUserResponse(res);
    }    
}
void OAIUsersApiHandler::removeUserGroup(qint32 user_group_id) {
    Q_UNUSED(user_group_id);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->removeUserGroupResponse(res);
    }    
}
void OAIUsersApiHandler::setTypingStatus(QString op, QList<qint32> to, QString type, QString topic) {
    Q_UNUSED(op);
    Q_UNUSED(to);
    Q_UNUSED(type);
    Q_UNUSED(topic);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->setTypingStatusResponse(res);
    }    
}
void OAIUsersApiHandler::unmuteUser(qint32 muted_user_id) {
    Q_UNUSED(muted_user_id);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->unmuteUserResponse(res);
    }    
}
void OAIUsersApiHandler::updateDisplaySettings(bool twenty_four_hour_time, bool dense_mode, bool starred_message_counts, bool fluid_layout_width, bool high_contrast_mode, qint32 color_scheme, bool translate_emoticons, QString default_language, QString default_view, bool left_side_userlist, QString emojiset, qint32 demote_inactive_streams, QString timezone) {
    Q_UNUSED(twenty_four_hour_time);
    Q_UNUSED(dense_mode);
    Q_UNUSED(starred_message_counts);
    Q_UNUSED(fluid_layout_width);
    Q_UNUSED(high_contrast_mode);
    Q_UNUSED(color_scheme);
    Q_UNUSED(translate_emoticons);
    Q_UNUSED(default_language);
    Q_UNUSED(default_view);
    Q_UNUSED(left_side_userlist);
    Q_UNUSED(emojiset);
    Q_UNUSED(demote_inactive_streams);
    Q_UNUSED(timezone);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->updateDisplaySettingsResponse(res);
    }    
}
void OAIUsersApiHandler::updateNotificationSettings(bool enable_stream_desktop_notifications, bool enable_stream_email_notifications, bool enable_stream_push_notifications, bool enable_stream_audible_notifications, QString notification_sound, bool enable_desktop_notifications, bool enable_sounds, bool enable_offline_email_notifications, bool enable_offline_push_notifications, bool enable_online_push_notifications, bool enable_digest_emails, bool enable_marketing_emails, bool enable_login_emails, bool message_content_in_email_notifications, bool pm_content_in_desktop_notifications, bool wildcard_mentions_notify, qint32 desktop_icon_count_display, bool realm_name_in_notifications, bool presence_enabled) {
    Q_UNUSED(enable_stream_desktop_notifications);
    Q_UNUSED(enable_stream_email_notifications);
    Q_UNUSED(enable_stream_push_notifications);
    Q_UNUSED(enable_stream_audible_notifications);
    Q_UNUSED(notification_sound);
    Q_UNUSED(enable_desktop_notifications);
    Q_UNUSED(enable_sounds);
    Q_UNUSED(enable_offline_email_notifications);
    Q_UNUSED(enable_offline_push_notifications);
    Q_UNUSED(enable_online_push_notifications);
    Q_UNUSED(enable_digest_emails);
    Q_UNUSED(enable_marketing_emails);
    Q_UNUSED(enable_login_emails);
    Q_UNUSED(message_content_in_email_notifications);
    Q_UNUSED(pm_content_in_desktop_notifications);
    Q_UNUSED(wildcard_mentions_notify);
    Q_UNUSED(desktop_icon_count_display);
    Q_UNUSED(realm_name_in_notifications);
    Q_UNUSED(presence_enabled);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->updateNotificationSettingsResponse(res);
    }    
}
void OAIUsersApiHandler::updateUser(qint32 user_id, QString full_name, qint32 role, QList<OAIObject> profile_data) {
    Q_UNUSED(user_id);
    Q_UNUSED(full_name);
    Q_UNUSED(role);
    Q_UNUSED(profile_data);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->updateUserResponse(res);
    }    
}
void OAIUsersApiHandler::updateUserGroup(qint32 user_group_id, QString name, QString description) {
    Q_UNUSED(user_group_id);
    Q_UNUSED(name);
    Q_UNUSED(description);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->updateUserGroupResponse(res);
    }    
}
void OAIUsersApiHandler::updateUserGroupMembers(qint32 user_group_id, QList<qint32> r_delete, QList<qint32> add) {
    Q_UNUSED(user_group_id);
    Q_UNUSED(r_delete);
    Q_UNUSED(add);
    auto reqObj = qobject_cast<OAIUsersApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->updateUserGroupMembersResponse(res);
    }    
}


}
