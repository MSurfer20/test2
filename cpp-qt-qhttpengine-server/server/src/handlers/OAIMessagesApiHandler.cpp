/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIMessagesApiHandler.h"
#include "OAIMessagesApiRequest.h"

namespace OpenAPI {

OAIMessagesApiHandler::OAIMessagesApiHandler(){

}

OAIMessagesApiHandler::~OAIMessagesApiHandler(){

}

void OAIMessagesApiHandler::addReaction(qint32 message_id, QString emoji_name, QString emoji_code, QString reaction_type) {
    Q_UNUSED(message_id);
    Q_UNUSED(emoji_name);
    Q_UNUSED(emoji_code);
    Q_UNUSED(reaction_type);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->addReactionResponse(res);
    }    
}
void OAIMessagesApiHandler::checkMessagesMatchNarrow(QList<qint32> msg_ids, QList<OAIObject> narrow) {
    Q_UNUSED(msg_ids);
    Q_UNUSED(narrow);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIAnyType res;
        reqObj->checkMessagesMatchNarrowResponse(res);
    }    
}
void OAIMessagesApiHandler::deleteMessage(qint32 message_id) {
    Q_UNUSED(message_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->deleteMessageResponse(res);
    }    
}
void OAIMessagesApiHandler::getFileTemporaryUrl(qint32 realm_id_str, QString filename) {
    Q_UNUSED(realm_id_str);
    Q_UNUSED(filename);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getFileTemporaryUrlResponse(res);
    }    
}
void OAIMessagesApiHandler::getMessageHistory(qint32 message_id) {
    Q_UNUSED(message_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getMessageHistoryResponse(res);
    }    
}
void OAIMessagesApiHandler::getMessages(qint32 num_before, qint32 num_after, OAIOneOfstringinteger anchor, QList<OAIObject> narrow, bool client_gravatar, bool apply_markdown, bool use_first_unread_anchor) {
    Q_UNUSED(num_before);
    Q_UNUSED(num_after);
    Q_UNUSED(anchor);
    Q_UNUSED(narrow);
    Q_UNUSED(client_gravatar);
    Q_UNUSED(apply_markdown);
    Q_UNUSED(use_first_unread_anchor);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getMessagesResponse(res);
    }    
}
void OAIMessagesApiHandler::getRawMessage(qint32 message_id) {
    Q_UNUSED(message_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getRawMessageResponse(res);
    }    
}
void OAIMessagesApiHandler::markAllAsRead() {
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->markAllAsReadResponse(res);
    }    
}
void OAIMessagesApiHandler::markStreamAsRead(qint32 stream_id) {
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->markStreamAsReadResponse(res);
    }    
}
void OAIMessagesApiHandler::markTopicAsRead(qint32 stream_id, QString topic_name) {
    Q_UNUSED(stream_id);
    Q_UNUSED(topic_name);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->markTopicAsReadResponse(res);
    }    
}
void OAIMessagesApiHandler::removeReaction(qint32 message_id, QString emoji_name, QString emoji_code, QString reaction_type) {
    Q_UNUSED(message_id);
    Q_UNUSED(emoji_name);
    Q_UNUSED(emoji_code);
    Q_UNUSED(reaction_type);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->removeReactionResponse(res);
    }    
}
void OAIMessagesApiHandler::renderMessage(QString content) {
    Q_UNUSED(content);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->renderMessageResponse(res);
    }    
}
void OAIMessagesApiHandler::sendMessage(QString type, QList<qint32> to, QString content, QString topic, QString queue_id, QString local_id) {
    Q_UNUSED(type);
    Q_UNUSED(to);
    Q_UNUSED(content);
    Q_UNUSED(topic);
    Q_UNUSED(queue_id);
    Q_UNUSED(local_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->sendMessageResponse(res);
    }    
}
void OAIMessagesApiHandler::updateMessage(qint32 message_id, QString topic, QString propagate_mode, bool send_notification_to_old_thread, bool send_notification_to_new_thread, QString content, qint32 stream_id) {
    Q_UNUSED(message_id);
    Q_UNUSED(topic);
    Q_UNUSED(propagate_mode);
    Q_UNUSED(send_notification_to_old_thread);
    Q_UNUSED(send_notification_to_new_thread);
    Q_UNUSED(content);
    Q_UNUSED(stream_id);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->updateMessageResponse(res);
    }    
}
void OAIMessagesApiHandler::updateMessageFlags(QList<qint32> messages, QString op, QString flag) {
    Q_UNUSED(messages);
    Q_UNUSED(op);
    Q_UNUSED(flag);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->updateMessageFlagsResponse(res);
    }    
}
void OAIMessagesApiHandler::uploadFile(OAIHttpFileElement filename) {
    Q_UNUSED(filename);
    auto reqObj = qobject_cast<OAIMessagesApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->uploadFileResponse(res);
    }    
}


}
