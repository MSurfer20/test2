/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIRealTimeEventsApiHandler.h"
#include "OAIRealTimeEventsApiRequest.h"

namespace OpenAPI {

OAIRealTimeEventsApiHandler::OAIRealTimeEventsApiHandler(){

}

OAIRealTimeEventsApiHandler::~OAIRealTimeEventsApiHandler(){

}

void OAIRealTimeEventsApiHandler::deleteQueue(QString queue_id) {
    Q_UNUSED(queue_id);
    auto reqObj = qobject_cast<OAIRealTimeEventsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccess res;
        reqObj->deleteQueueResponse(res);
    }    
}
void OAIRealTimeEventsApiHandler::getEvents(QString queue_id, qint32 last_event_id, bool dont_block) {
    Q_UNUSED(queue_id);
    Q_UNUSED(last_event_id);
    Q_UNUSED(dont_block);
    auto reqObj = qobject_cast<OAIRealTimeEventsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->getEventsResponse(res);
    }    
}
void OAIRealTimeEventsApiHandler::realTimePost(QList<QString> event_types, QList<QList<QString>> narrow, bool all_public_streams) {
    Q_UNUSED(event_types);
    Q_UNUSED(narrow);
    Q_UNUSED(all_public_streams);
    auto reqObj = qobject_cast<OAIRealTimeEventsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->realTimePostResponse();
    }    
}
void OAIRealTimeEventsApiHandler::registerQueue(bool apply_markdown, bool client_gravatar, bool slim_presence, QList<QString> event_types, bool all_public_streams, bool include_subscribers, OAIObject client_capabilities, QList<QString> fetch_event_types, QList<QList<QString>> narrow) {
    Q_UNUSED(apply_markdown);
    Q_UNUSED(client_gravatar);
    Q_UNUSED(slim_presence);
    Q_UNUSED(event_types);
    Q_UNUSED(all_public_streams);
    Q_UNUSED(include_subscribers);
    Q_UNUSED(client_capabilities);
    Q_UNUSED(fetch_event_types);
    Q_UNUSED(narrow);
    auto reqObj = qobject_cast<OAIRealTimeEventsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        OAIJsonSuccessBase res;
        reqObj->registerQueueResponse(res);
    }    
}
void OAIRealTimeEventsApiHandler::restErrorHandling() {
    auto reqObj = qobject_cast<OAIRealTimeEventsApiRequest*>(sender());
    if( reqObj != nullptr ) 
    { 
        
        reqObj->restErrorHandlingResponse();
    }    
}


}
