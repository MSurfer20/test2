/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddSubscriptionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddSubscriptionsResponse>>(){}.getType();
    }
    
    if ("AddSubscriptionsResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddSubscriptionsResponseAllOf>>(){}.getType();
    }
    
    if ("ApiKeyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApiKeyResponse>>(){}.getType();
    }
    
    if ("ApiKeyResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ApiKeyResponseAllOf>>(){}.getType();
    }
    
    if ("Attachments".equalsIgnoreCase(className)) {
      return new TypeToken<List<Attachments>>(){}.getType();
    }
    
    if ("AttachmentsMessages".equalsIgnoreCase(className)) {
      return new TypeToken<List<AttachmentsMessages>>(){}.getType();
    }
    
    if ("BadEventQueueIdError".equalsIgnoreCase(className)) {
      return new TypeToken<List<BadEventQueueIdError>>(){}.getType();
    }
    
    if ("BadEventQueueIdErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<BadEventQueueIdErrorAllOf>>(){}.getType();
    }
    
    if ("BasicBot".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicBot>>(){}.getType();
    }
    
    if ("BasicBotAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicBotAllOf>>(){}.getType();
    }
    
    if ("BasicBotBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicBotBase>>(){}.getType();
    }
    
    if ("BasicStream".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicStream>>(){}.getType();
    }
    
    if ("BasicStreamAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicStreamAllOf>>(){}.getType();
    }
    
    if ("BasicStreamBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<BasicStreamBase>>(){}.getType();
    }
    
    if ("Bot".equalsIgnoreCase(className)) {
      return new TypeToken<List<Bot>>(){}.getType();
    }
    
    if ("BotAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<BotAllOf>>(){}.getType();
    }
    
    if ("CodedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<CodedError>>(){}.getType();
    }
    
    if ("CodedErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<CodedErrorAllOf>>(){}.getType();
    }
    
    if ("CodedErrorBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<CodedErrorBase>>(){}.getType();
    }
    
    if ("CodedErrorBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<CodedErrorBaseAllOf>>(){}.getType();
    }
    
    if ("CustomProfileField".equalsIgnoreCase(className)) {
      return new TypeToken<List<CustomProfileField>>(){}.getType();
    }
    
    if ("DefaultStreamGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<DefaultStreamGroup>>(){}.getType();
    }
    
    if ("EmojiReaction".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmojiReaction>>(){}.getType();
    }
    
    if ("EmojiReactionAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmojiReactionAllOf>>(){}.getType();
    }
    
    if ("EmojiReactionBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmojiReactionBase>>(){}.getType();
    }
    
    if ("EmojiReactionBaseUser".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmojiReactionBaseUser>>(){}.getType();
    }
    
    if ("GetMessages".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetMessages>>(){}.getType();
    }
    
    if ("GetMessagesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<GetMessagesAllOf>>(){}.getType();
    }
    
    if ("Hotspot".equalsIgnoreCase(className)) {
      return new TypeToken<List<Hotspot>>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineResponse200>>(){}.getType();
    }
    
    if ("InvalidApiKeyError".equalsIgnoreCase(className)) {
      return new TypeToken<List<InvalidApiKeyError>>(){}.getType();
    }
    
    if ("InvalidMessageError".equalsIgnoreCase(className)) {
      return new TypeToken<List<InvalidMessageError>>(){}.getType();
    }
    
    if ("InvalidMessageErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<InvalidMessageErrorAllOf>>(){}.getType();
    }
    
    if ("JsonError".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonError>>(){}.getType();
    }
    
    if ("JsonErrorBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonErrorBase>>(){}.getType();
    }
    
    if ("JsonErrorBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonErrorBaseAllOf>>(){}.getType();
    }
    
    if ("JsonResponseBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonResponseBase>>(){}.getType();
    }
    
    if ("JsonSuccess".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonSuccess>>(){}.getType();
    }
    
    if ("JsonSuccessAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonSuccessAllOf>>(){}.getType();
    }
    
    if ("JsonSuccessBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonSuccessBase>>(){}.getType();
    }
    
    if ("JsonSuccessBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<JsonSuccessBaseAllOf>>(){}.getType();
    }
    
    if ("Messages".equalsIgnoreCase(className)) {
      return new TypeToken<List<Messages>>(){}.getType();
    }
    
    if ("MessagesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<MessagesAllOf>>(){}.getType();
    }
    
    if ("MessagesBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<MessagesBase>>(){}.getType();
    }
    
    if ("MessagesBaseTopicLinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<MessagesBaseTopicLinks>>(){}.getType();
    }
    
    if ("MissingArgumentError".equalsIgnoreCase(className)) {
      return new TypeToken<List<MissingArgumentError>>(){}.getType();
    }
    
    if ("MissingArgumentErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<MissingArgumentErrorAllOf>>(){}.getType();
    }
    
    if ("NonExistingStreamError".equalsIgnoreCase(className)) {
      return new TypeToken<List<NonExistingStreamError>>(){}.getType();
    }
    
    if ("NonExistingStreamErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<NonExistingStreamErrorAllOf>>(){}.getType();
    }
    
    if ("Presence".equalsIgnoreCase(className)) {
      return new TypeToken<List<Presence>>(){}.getType();
    }
    
    if ("RateLimitedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<RateLimitedError>>(){}.getType();
    }
    
    if ("RealmDeactivatedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<RealmDeactivatedError>>(){}.getType();
    }
    
    if ("RealmDomain".equalsIgnoreCase(className)) {
      return new TypeToken<List<RealmDomain>>(){}.getType();
    }
    
    if ("RealmEmoji".equalsIgnoreCase(className)) {
      return new TypeToken<List<RealmEmoji>>(){}.getType();
    }
    
    if ("RealmExport".equalsIgnoreCase(className)) {
      return new TypeToken<List<RealmExport>>(){}.getType();
    }
    
    if ("RealmPlayground".equalsIgnoreCase(className)) {
      return new TypeToken<List<RealmPlayground>>(){}.getType();
    }
    
    if ("Subscriptions".equalsIgnoreCase(className)) {
      return new TypeToken<List<Subscriptions>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserAllOf>>(){}.getType();
    }
    
    if ("UserBase".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserBase>>(){}.getType();
    }
    
    if ("UserDeactivatedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserDeactivatedError>>(){}.getType();
    }
    
    if ("UserGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserGroup>>(){}.getType();
    }
    
    if ("UserNotAuthorizedError".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserNotAuthorizedError>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddSubscriptionsResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AddSubscriptionsResponse>(){}.getType();
    }
    
    if ("AddSubscriptionsResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<AddSubscriptionsResponseAllOf>(){}.getType();
    }
    
    if ("ApiKeyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ApiKeyResponse>(){}.getType();
    }
    
    if ("ApiKeyResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ApiKeyResponseAllOf>(){}.getType();
    }
    
    if ("Attachments".equalsIgnoreCase(className)) {
      return new TypeToken<Attachments>(){}.getType();
    }
    
    if ("AttachmentsMessages".equalsIgnoreCase(className)) {
      return new TypeToken<AttachmentsMessages>(){}.getType();
    }
    
    if ("BadEventQueueIdError".equalsIgnoreCase(className)) {
      return new TypeToken<BadEventQueueIdError>(){}.getType();
    }
    
    if ("BadEventQueueIdErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<BadEventQueueIdErrorAllOf>(){}.getType();
    }
    
    if ("BasicBot".equalsIgnoreCase(className)) {
      return new TypeToken<BasicBot>(){}.getType();
    }
    
    if ("BasicBotAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<BasicBotAllOf>(){}.getType();
    }
    
    if ("BasicBotBase".equalsIgnoreCase(className)) {
      return new TypeToken<BasicBotBase>(){}.getType();
    }
    
    if ("BasicStream".equalsIgnoreCase(className)) {
      return new TypeToken<BasicStream>(){}.getType();
    }
    
    if ("BasicStreamAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<BasicStreamAllOf>(){}.getType();
    }
    
    if ("BasicStreamBase".equalsIgnoreCase(className)) {
      return new TypeToken<BasicStreamBase>(){}.getType();
    }
    
    if ("Bot".equalsIgnoreCase(className)) {
      return new TypeToken<Bot>(){}.getType();
    }
    
    if ("BotAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<BotAllOf>(){}.getType();
    }
    
    if ("CodedError".equalsIgnoreCase(className)) {
      return new TypeToken<CodedError>(){}.getType();
    }
    
    if ("CodedErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<CodedErrorAllOf>(){}.getType();
    }
    
    if ("CodedErrorBase".equalsIgnoreCase(className)) {
      return new TypeToken<CodedErrorBase>(){}.getType();
    }
    
    if ("CodedErrorBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<CodedErrorBaseAllOf>(){}.getType();
    }
    
    if ("CustomProfileField".equalsIgnoreCase(className)) {
      return new TypeToken<CustomProfileField>(){}.getType();
    }
    
    if ("DefaultStreamGroup".equalsIgnoreCase(className)) {
      return new TypeToken<DefaultStreamGroup>(){}.getType();
    }
    
    if ("EmojiReaction".equalsIgnoreCase(className)) {
      return new TypeToken<EmojiReaction>(){}.getType();
    }
    
    if ("EmojiReactionAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<EmojiReactionAllOf>(){}.getType();
    }
    
    if ("EmojiReactionBase".equalsIgnoreCase(className)) {
      return new TypeToken<EmojiReactionBase>(){}.getType();
    }
    
    if ("EmojiReactionBaseUser".equalsIgnoreCase(className)) {
      return new TypeToken<EmojiReactionBaseUser>(){}.getType();
    }
    
    if ("GetMessages".equalsIgnoreCase(className)) {
      return new TypeToken<GetMessages>(){}.getType();
    }
    
    if ("GetMessagesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<GetMessagesAllOf>(){}.getType();
    }
    
    if ("Hotspot".equalsIgnoreCase(className)) {
      return new TypeToken<Hotspot>(){}.getType();
    }
    
    if ("InlineResponse200".equalsIgnoreCase(className)) {
      return new TypeToken<InlineResponse200>(){}.getType();
    }
    
    if ("InvalidApiKeyError".equalsIgnoreCase(className)) {
      return new TypeToken<InvalidApiKeyError>(){}.getType();
    }
    
    if ("InvalidMessageError".equalsIgnoreCase(className)) {
      return new TypeToken<InvalidMessageError>(){}.getType();
    }
    
    if ("InvalidMessageErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<InvalidMessageErrorAllOf>(){}.getType();
    }
    
    if ("JsonError".equalsIgnoreCase(className)) {
      return new TypeToken<JsonError>(){}.getType();
    }
    
    if ("JsonErrorBase".equalsIgnoreCase(className)) {
      return new TypeToken<JsonErrorBase>(){}.getType();
    }
    
    if ("JsonErrorBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<JsonErrorBaseAllOf>(){}.getType();
    }
    
    if ("JsonResponseBase".equalsIgnoreCase(className)) {
      return new TypeToken<JsonResponseBase>(){}.getType();
    }
    
    if ("JsonSuccess".equalsIgnoreCase(className)) {
      return new TypeToken<JsonSuccess>(){}.getType();
    }
    
    if ("JsonSuccessAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<JsonSuccessAllOf>(){}.getType();
    }
    
    if ("JsonSuccessBase".equalsIgnoreCase(className)) {
      return new TypeToken<JsonSuccessBase>(){}.getType();
    }
    
    if ("JsonSuccessBaseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<JsonSuccessBaseAllOf>(){}.getType();
    }
    
    if ("Messages".equalsIgnoreCase(className)) {
      return new TypeToken<Messages>(){}.getType();
    }
    
    if ("MessagesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<MessagesAllOf>(){}.getType();
    }
    
    if ("MessagesBase".equalsIgnoreCase(className)) {
      return new TypeToken<MessagesBase>(){}.getType();
    }
    
    if ("MessagesBaseTopicLinks".equalsIgnoreCase(className)) {
      return new TypeToken<MessagesBaseTopicLinks>(){}.getType();
    }
    
    if ("MissingArgumentError".equalsIgnoreCase(className)) {
      return new TypeToken<MissingArgumentError>(){}.getType();
    }
    
    if ("MissingArgumentErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<MissingArgumentErrorAllOf>(){}.getType();
    }
    
    if ("NonExistingStreamError".equalsIgnoreCase(className)) {
      return new TypeToken<NonExistingStreamError>(){}.getType();
    }
    
    if ("NonExistingStreamErrorAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<NonExistingStreamErrorAllOf>(){}.getType();
    }
    
    if ("Presence".equalsIgnoreCase(className)) {
      return new TypeToken<Presence>(){}.getType();
    }
    
    if ("RateLimitedError".equalsIgnoreCase(className)) {
      return new TypeToken<RateLimitedError>(){}.getType();
    }
    
    if ("RealmDeactivatedError".equalsIgnoreCase(className)) {
      return new TypeToken<RealmDeactivatedError>(){}.getType();
    }
    
    if ("RealmDomain".equalsIgnoreCase(className)) {
      return new TypeToken<RealmDomain>(){}.getType();
    }
    
    if ("RealmEmoji".equalsIgnoreCase(className)) {
      return new TypeToken<RealmEmoji>(){}.getType();
    }
    
    if ("RealmExport".equalsIgnoreCase(className)) {
      return new TypeToken<RealmExport>(){}.getType();
    }
    
    if ("RealmPlayground".equalsIgnoreCase(className)) {
      return new TypeToken<RealmPlayground>(){}.getType();
    }
    
    if ("Subscriptions".equalsIgnoreCase(className)) {
      return new TypeToken<Subscriptions>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<UserAllOf>(){}.getType();
    }
    
    if ("UserBase".equalsIgnoreCase(className)) {
      return new TypeToken<UserBase>(){}.getType();
    }
    
    if ("UserDeactivatedError".equalsIgnoreCase(className)) {
      return new TypeToken<UserDeactivatedError>(){}.getType();
    }
    
    if ("UserGroup".equalsIgnoreCase(className)) {
      return new TypeToken<UserGroup>(){}.getType();
    }
    
    if ("UserNotAuthorizedError".equalsIgnoreCase(className)) {
      return new TypeToken<UserNotAuthorizedError>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
