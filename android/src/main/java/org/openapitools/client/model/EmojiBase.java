/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class EmojiBase {
  
  @SerializedName("emoji_code")
  private String emojiCode = null;
  @SerializedName("emoji_name")
  private String emojiName = null;
  @SerializedName("reaction_type")
  private String reactionType = null;

  /**
   * A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji. 
   **/
  @ApiModelProperty(value = "A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint; for `realm_emoji`, it'll be the ID of the realm emoji. ")
  public String getEmojiCode() {
    return emojiCode;
  }
  public void setEmojiCode(String emojiCode) {
    this.emojiCode = emojiCode;
  }

  /**
   * Name of the emoji. 
   **/
  @ApiModelProperty(value = "Name of the emoji. ")
  public String getEmojiName() {
    return emojiName;
  }
  public void setEmojiName(String emojiName) {
    this.emojiName = emojiName;
  }

  /**
   * One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 
   **/
  @ApiModelProperty(value = "One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. ")
  public String getReactionType() {
    return reactionType;
  }
  public void setReactionType(String reactionType) {
    this.reactionType = reactionType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmojiBase emojiBase = (EmojiBase) o;
    return (this.emojiCode == null ? emojiBase.emojiCode == null : this.emojiCode.equals(emojiBase.emojiCode)) &&
        (this.emojiName == null ? emojiBase.emojiName == null : this.emojiName.equals(emojiBase.emojiName)) &&
        (this.reactionType == null ? emojiBase.reactionType == null : this.reactionType.equals(emojiBase.reactionType));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.emojiCode == null ? 0: this.emojiCode.hashCode());
    result = 31 * result + (this.emojiName == null ? 0: this.emojiName.hashCode());
    result = 31 * result + (this.reactionType == null ? 0: this.reactionType.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmojiBase {\n");
    
    sb.append("  emojiCode: ").append(emojiCode).append("\n");
    sb.append("  emojiName: ").append(emojiName).append("\n");
    sb.append("  reactionType: ").append(reactionType).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
