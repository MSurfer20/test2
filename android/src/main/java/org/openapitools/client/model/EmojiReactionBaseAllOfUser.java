/**
 * Zulip REST API
 * Powerful open source group chat 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the &#x60;id&#x60; field.  **Note**: In the [events API](/api/get-events), this &#x60;user&#x60; dictionary confusing had the user ID in a field called &#x60;user_id&#x60; instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the &#x60;user_id&#x60; field. 
 **/
@ApiModel(description = "Whether the user is a mirror dummy. Dictionary with data on the user who added the reaction, including the user ID as the `id` field.  **Note**: In the [events API](/api/get-events), this `user` dictionary confusing had the user ID in a field called `user_id` instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the `user_id` field. ")
public class EmojiReactionBaseAllOfUser {
  
  @SerializedName("id")
  private Integer id = null;
  @SerializedName("email")
  private String email = null;
  @SerializedName("full_name")
  private String fullName = null;
  @SerializedName("is_mirror_dummy")
  private Boolean isMirrorDummy = null;

  /**
   * ID of the user. 
   **/
  @ApiModelProperty(value = "ID of the user. ")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Email of the user. 
   **/
  @ApiModelProperty(value = "Email of the user. ")
  public String getEmail() {
    return email;
  }
  public void setEmail(String email) {
    this.email = email;
  }

  /**
   * Full name of the user. 
   **/
  @ApiModelProperty(value = "Full name of the user. ")
  public String getFullName() {
    return fullName;
  }
  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  /**
   * Whether the user is a mirror dummy. 
   **/
  @ApiModelProperty(value = "Whether the user is a mirror dummy. ")
  public Boolean getIsMirrorDummy() {
    return isMirrorDummy;
  }
  public void setIsMirrorDummy(Boolean isMirrorDummy) {
    this.isMirrorDummy = isMirrorDummy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmojiReactionBaseAllOfUser emojiReactionBaseAllOfUser = (EmojiReactionBaseAllOfUser) o;
    return (this.id == null ? emojiReactionBaseAllOfUser.id == null : this.id.equals(emojiReactionBaseAllOfUser.id)) &&
        (this.email == null ? emojiReactionBaseAllOfUser.email == null : this.email.equals(emojiReactionBaseAllOfUser.email)) &&
        (this.fullName == null ? emojiReactionBaseAllOfUser.fullName == null : this.fullName.equals(emojiReactionBaseAllOfUser.fullName)) &&
        (this.isMirrorDummy == null ? emojiReactionBaseAllOfUser.isMirrorDummy == null : this.isMirrorDummy.equals(emojiReactionBaseAllOfUser.isMirrorDummy));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.email == null ? 0: this.email.hashCode());
    result = 31 * result + (this.fullName == null ? 0: this.fullName.hashCode());
    result = 31 * result + (this.isMirrorDummy == null ? 0: this.isMirrorDummy.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmojiReactionBaseAllOfUser {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  email: ").append(email).append("\n");
    sb.append("  fullName: ").append(fullName).append("\n");
    sb.append("  isMirrorDummy: ").append(isMirrorDummy).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
