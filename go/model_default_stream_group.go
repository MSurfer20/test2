/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DefaultStreamGroup Dictionary containing details of a default stream group. 
type DefaultStreamGroup struct {
	// Name of the default stream group. 
	Name *string `json:"name,omitempty"`
	// Description of the default stream group. 
	Description *string `json:"description,omitempty"`
	// id of the default stream group. 
	Id *int32 `json:"id,omitempty"`
	// Array containing details about the streams in the default stream group. 
	Streams *[]BasicStream `json:"streams,omitempty"`
}

// NewDefaultStreamGroup instantiates a new DefaultStreamGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultStreamGroup() *DefaultStreamGroup {
	this := DefaultStreamGroup{}
	return &this
}

// NewDefaultStreamGroupWithDefaults instantiates a new DefaultStreamGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultStreamGroupWithDefaults() *DefaultStreamGroup {
	this := DefaultStreamGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DefaultStreamGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultStreamGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DefaultStreamGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DefaultStreamGroup) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DefaultStreamGroup) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultStreamGroup) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DefaultStreamGroup) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DefaultStreamGroup) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DefaultStreamGroup) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultStreamGroup) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DefaultStreamGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DefaultStreamGroup) SetId(v int32) {
	o.Id = &v
}

// GetStreams returns the Streams field value if set, zero value otherwise.
func (o *DefaultStreamGroup) GetStreams() []BasicStream {
	if o == nil || o.Streams == nil {
		var ret []BasicStream
		return ret
	}
	return *o.Streams
}

// GetStreamsOk returns a tuple with the Streams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultStreamGroup) GetStreamsOk() (*[]BasicStream, bool) {
	if o == nil || o.Streams == nil {
		return nil, false
	}
	return o.Streams, true
}

// HasStreams returns a boolean if a field has been set.
func (o *DefaultStreamGroup) HasStreams() bool {
	if o != nil && o.Streams != nil {
		return true
	}

	return false
}

// SetStreams gets a reference to the given []BasicStream and assigns it to the Streams field.
func (o *DefaultStreamGroup) SetStreams(v []BasicStream) {
	o.Streams = &v
}

func (o DefaultStreamGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Streams != nil {
		toSerialize["streams"] = o.Streams
	}
	return json.Marshal(toSerialize)
}

type NullableDefaultStreamGroup struct {
	value *DefaultStreamGroup
	isSet bool
}

func (v NullableDefaultStreamGroup) Get() *DefaultStreamGroup {
	return v.value
}

func (v *NullableDefaultStreamGroup) Set(val *DefaultStreamGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultStreamGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultStreamGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultStreamGroup(val *DefaultStreamGroup) *NullableDefaultStreamGroup {
	return &NullableDefaultStreamGroup{value: val, isSet: true}
}

func (v NullableDefaultStreamGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultStreamGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


