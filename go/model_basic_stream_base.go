/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BasicStreamBase Object containing basic details about the stream. 
type BasicStreamBase struct {
	// The unique ID of the stream. 
	StreamId *int32 `json:"stream_id,omitempty"`
	// The name of the stream. 
	Name *string `json:"name,omitempty"`
	// The short description of the stream in text/markdown format, intended to be used to prepopulate UI for editing a stream's description. 
	Description *string `json:"description,omitempty"`
	// The UNIX timestamp for when the stream was created, in UTC seconds.  **Changes**: New in Zulip 4.0 (feature level 30). 
	DateCreated *int32 `json:"date_created,omitempty"`
	// Specifies whether the stream is private or not. Only people who have been invited can access a private stream. 
	InviteOnly *bool `json:"invite_only,omitempty"`
	// The short description of the stream rendered as HTML, intended to be used when displaying the stream description in a UI.  One should use the standard Zulip rendered_markdown CSS when displaying this content so that emoji, LaTeX, and other syntax work correctly.  And any client-side security logic for user-generated message content should be applied when displaying this HTML as though it were the body of a Zulip message. 
	RenderedDescription *string `json:"rendered_description,omitempty"`
	// Whether the stream has been configured to allow unauthenticated access to its message history from the web. 
	IsWebPublic *bool `json:"is_web_public,omitempty"`
	// Policy for which users can post messages to the stream.  * 1 => Any user can post. * 2 => Only administrators can post. * 3 => Only full members can post. * 4 => Only moderators can post.  **Changes**: New in Zulip 3.0, replacing the previous `is_announcement_only` boolean. 
	StreamPostPolicy *int32 `json:"stream_post_policy,omitempty"`
	// Number of days that messages sent to this stream will be stored before being automatically deleted by the [message retention policy](/help/message-retention-policy).  There are two special values:  * `null`, the default, means the stream will inherit the organization   level setting. * `-1` encodes retaining messages in this stream forever.  **Changes**: New in Zulip 3.0 (feature level 17). 
	MessageRetentionDays NullableInt32 `json:"message_retention_days,omitempty"`
	// Whether the history of the stream is public to its subscribers.  Currently always true for public streams (i.e. invite_only=False implies history_public_to_subscribers=True), but clients should not make that assumption, as we may change that behavior in the future. 
	HistoryPublicToSubscribers *bool `json:"history_public_to_subscribers,omitempty"`
	// The id of the first message in the stream.  Intended to help clients determine whether they need to display UI like the \"more topics\" widget that would suggest the stream has older history that can be accessed.  Null is used for streams with no message history. 
	FirstMessageId NullableInt32 `json:"first_message_id,omitempty"`
	// Whether the given stream is announcement only or not.  **Changes**: Deprecated in Zulip 3.0 (feature level 1), use `stream_post_policy` instead. 
	IsAnnouncementOnly *bool `json:"is_announcement_only,omitempty"`
}

// NewBasicStreamBase instantiates a new BasicStreamBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicStreamBase() *BasicStreamBase {
	this := BasicStreamBase{}
	return &this
}

// NewBasicStreamBaseWithDefaults instantiates a new BasicStreamBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicStreamBaseWithDefaults() *BasicStreamBase {
	this := BasicStreamBase{}
	return &this
}

// GetStreamId returns the StreamId field value if set, zero value otherwise.
func (o *BasicStreamBase) GetStreamId() int32 {
	if o == nil || o.StreamId == nil {
		var ret int32
		return ret
	}
	return *o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetStreamIdOk() (*int32, bool) {
	if o == nil || o.StreamId == nil {
		return nil, false
	}
	return o.StreamId, true
}

// HasStreamId returns a boolean if a field has been set.
func (o *BasicStreamBase) HasStreamId() bool {
	if o != nil && o.StreamId != nil {
		return true
	}

	return false
}

// SetStreamId gets a reference to the given int32 and assigns it to the StreamId field.
func (o *BasicStreamBase) SetStreamId(v int32) {
	o.StreamId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BasicStreamBase) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BasicStreamBase) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BasicStreamBase) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BasicStreamBase) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BasicStreamBase) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BasicStreamBase) SetDescription(v string) {
	o.Description = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *BasicStreamBase) GetDateCreated() int32 {
	if o == nil || o.DateCreated == nil {
		var ret int32
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetDateCreatedOk() (*int32, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *BasicStreamBase) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int32 and assigns it to the DateCreated field.
func (o *BasicStreamBase) SetDateCreated(v int32) {
	o.DateCreated = &v
}

// GetInviteOnly returns the InviteOnly field value if set, zero value otherwise.
func (o *BasicStreamBase) GetInviteOnly() bool {
	if o == nil || o.InviteOnly == nil {
		var ret bool
		return ret
	}
	return *o.InviteOnly
}

// GetInviteOnlyOk returns a tuple with the InviteOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetInviteOnlyOk() (*bool, bool) {
	if o == nil || o.InviteOnly == nil {
		return nil, false
	}
	return o.InviteOnly, true
}

// HasInviteOnly returns a boolean if a field has been set.
func (o *BasicStreamBase) HasInviteOnly() bool {
	if o != nil && o.InviteOnly != nil {
		return true
	}

	return false
}

// SetInviteOnly gets a reference to the given bool and assigns it to the InviteOnly field.
func (o *BasicStreamBase) SetInviteOnly(v bool) {
	o.InviteOnly = &v
}

// GetRenderedDescription returns the RenderedDescription field value if set, zero value otherwise.
func (o *BasicStreamBase) GetRenderedDescription() string {
	if o == nil || o.RenderedDescription == nil {
		var ret string
		return ret
	}
	return *o.RenderedDescription
}

// GetRenderedDescriptionOk returns a tuple with the RenderedDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetRenderedDescriptionOk() (*string, bool) {
	if o == nil || o.RenderedDescription == nil {
		return nil, false
	}
	return o.RenderedDescription, true
}

// HasRenderedDescription returns a boolean if a field has been set.
func (o *BasicStreamBase) HasRenderedDescription() bool {
	if o != nil && o.RenderedDescription != nil {
		return true
	}

	return false
}

// SetRenderedDescription gets a reference to the given string and assigns it to the RenderedDescription field.
func (o *BasicStreamBase) SetRenderedDescription(v string) {
	o.RenderedDescription = &v
}

// GetIsWebPublic returns the IsWebPublic field value if set, zero value otherwise.
func (o *BasicStreamBase) GetIsWebPublic() bool {
	if o == nil || o.IsWebPublic == nil {
		var ret bool
		return ret
	}
	return *o.IsWebPublic
}

// GetIsWebPublicOk returns a tuple with the IsWebPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetIsWebPublicOk() (*bool, bool) {
	if o == nil || o.IsWebPublic == nil {
		return nil, false
	}
	return o.IsWebPublic, true
}

// HasIsWebPublic returns a boolean if a field has been set.
func (o *BasicStreamBase) HasIsWebPublic() bool {
	if o != nil && o.IsWebPublic != nil {
		return true
	}

	return false
}

// SetIsWebPublic gets a reference to the given bool and assigns it to the IsWebPublic field.
func (o *BasicStreamBase) SetIsWebPublic(v bool) {
	o.IsWebPublic = &v
}

// GetStreamPostPolicy returns the StreamPostPolicy field value if set, zero value otherwise.
func (o *BasicStreamBase) GetStreamPostPolicy() int32 {
	if o == nil || o.StreamPostPolicy == nil {
		var ret int32
		return ret
	}
	return *o.StreamPostPolicy
}

// GetStreamPostPolicyOk returns a tuple with the StreamPostPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetStreamPostPolicyOk() (*int32, bool) {
	if o == nil || o.StreamPostPolicy == nil {
		return nil, false
	}
	return o.StreamPostPolicy, true
}

// HasStreamPostPolicy returns a boolean if a field has been set.
func (o *BasicStreamBase) HasStreamPostPolicy() bool {
	if o != nil && o.StreamPostPolicy != nil {
		return true
	}

	return false
}

// SetStreamPostPolicy gets a reference to the given int32 and assigns it to the StreamPostPolicy field.
func (o *BasicStreamBase) SetStreamPostPolicy(v int32) {
	o.StreamPostPolicy = &v
}

// GetMessageRetentionDays returns the MessageRetentionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicStreamBase) GetMessageRetentionDays() int32 {
	if o == nil || o.MessageRetentionDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MessageRetentionDays.Get()
}

// GetMessageRetentionDaysOk returns a tuple with the MessageRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicStreamBase) GetMessageRetentionDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MessageRetentionDays.Get(), o.MessageRetentionDays.IsSet()
}

// HasMessageRetentionDays returns a boolean if a field has been set.
func (o *BasicStreamBase) HasMessageRetentionDays() bool {
	if o != nil && o.MessageRetentionDays.IsSet() {
		return true
	}

	return false
}

// SetMessageRetentionDays gets a reference to the given NullableInt32 and assigns it to the MessageRetentionDays field.
func (o *BasicStreamBase) SetMessageRetentionDays(v int32) {
	o.MessageRetentionDays.Set(&v)
}
// SetMessageRetentionDaysNil sets the value for MessageRetentionDays to be an explicit nil
func (o *BasicStreamBase) SetMessageRetentionDaysNil() {
	o.MessageRetentionDays.Set(nil)
}

// UnsetMessageRetentionDays ensures that no value is present for MessageRetentionDays, not even an explicit nil
func (o *BasicStreamBase) UnsetMessageRetentionDays() {
	o.MessageRetentionDays.Unset()
}

// GetHistoryPublicToSubscribers returns the HistoryPublicToSubscribers field value if set, zero value otherwise.
func (o *BasicStreamBase) GetHistoryPublicToSubscribers() bool {
	if o == nil || o.HistoryPublicToSubscribers == nil {
		var ret bool
		return ret
	}
	return *o.HistoryPublicToSubscribers
}

// GetHistoryPublicToSubscribersOk returns a tuple with the HistoryPublicToSubscribers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetHistoryPublicToSubscribersOk() (*bool, bool) {
	if o == nil || o.HistoryPublicToSubscribers == nil {
		return nil, false
	}
	return o.HistoryPublicToSubscribers, true
}

// HasHistoryPublicToSubscribers returns a boolean if a field has been set.
func (o *BasicStreamBase) HasHistoryPublicToSubscribers() bool {
	if o != nil && o.HistoryPublicToSubscribers != nil {
		return true
	}

	return false
}

// SetHistoryPublicToSubscribers gets a reference to the given bool and assigns it to the HistoryPublicToSubscribers field.
func (o *BasicStreamBase) SetHistoryPublicToSubscribers(v bool) {
	o.HistoryPublicToSubscribers = &v
}

// GetFirstMessageId returns the FirstMessageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicStreamBase) GetFirstMessageId() int32 {
	if o == nil || o.FirstMessageId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FirstMessageId.Get()
}

// GetFirstMessageIdOk returns a tuple with the FirstMessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicStreamBase) GetFirstMessageIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FirstMessageId.Get(), o.FirstMessageId.IsSet()
}

// HasFirstMessageId returns a boolean if a field has been set.
func (o *BasicStreamBase) HasFirstMessageId() bool {
	if o != nil && o.FirstMessageId.IsSet() {
		return true
	}

	return false
}

// SetFirstMessageId gets a reference to the given NullableInt32 and assigns it to the FirstMessageId field.
func (o *BasicStreamBase) SetFirstMessageId(v int32) {
	o.FirstMessageId.Set(&v)
}
// SetFirstMessageIdNil sets the value for FirstMessageId to be an explicit nil
func (o *BasicStreamBase) SetFirstMessageIdNil() {
	o.FirstMessageId.Set(nil)
}

// UnsetFirstMessageId ensures that no value is present for FirstMessageId, not even an explicit nil
func (o *BasicStreamBase) UnsetFirstMessageId() {
	o.FirstMessageId.Unset()
}

// GetIsAnnouncementOnly returns the IsAnnouncementOnly field value if set, zero value otherwise.
func (o *BasicStreamBase) GetIsAnnouncementOnly() bool {
	if o == nil || o.IsAnnouncementOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsAnnouncementOnly
}

// GetIsAnnouncementOnlyOk returns a tuple with the IsAnnouncementOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasicStreamBase) GetIsAnnouncementOnlyOk() (*bool, bool) {
	if o == nil || o.IsAnnouncementOnly == nil {
		return nil, false
	}
	return o.IsAnnouncementOnly, true
}

// HasIsAnnouncementOnly returns a boolean if a field has been set.
func (o *BasicStreamBase) HasIsAnnouncementOnly() bool {
	if o != nil && o.IsAnnouncementOnly != nil {
		return true
	}

	return false
}

// SetIsAnnouncementOnly gets a reference to the given bool and assigns it to the IsAnnouncementOnly field.
func (o *BasicStreamBase) SetIsAnnouncementOnly(v bool) {
	o.IsAnnouncementOnly = &v
}

func (o BasicStreamBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StreamId != nil {
		toSerialize["stream_id"] = o.StreamId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DateCreated != nil {
		toSerialize["date_created"] = o.DateCreated
	}
	if o.InviteOnly != nil {
		toSerialize["invite_only"] = o.InviteOnly
	}
	if o.RenderedDescription != nil {
		toSerialize["rendered_description"] = o.RenderedDescription
	}
	if o.IsWebPublic != nil {
		toSerialize["is_web_public"] = o.IsWebPublic
	}
	if o.StreamPostPolicy != nil {
		toSerialize["stream_post_policy"] = o.StreamPostPolicy
	}
	if o.MessageRetentionDays.IsSet() {
		toSerialize["message_retention_days"] = o.MessageRetentionDays.Get()
	}
	if o.HistoryPublicToSubscribers != nil {
		toSerialize["history_public_to_subscribers"] = o.HistoryPublicToSubscribers
	}
	if o.FirstMessageId.IsSet() {
		toSerialize["first_message_id"] = o.FirstMessageId.Get()
	}
	if o.IsAnnouncementOnly != nil {
		toSerialize["is_announcement_only"] = o.IsAnnouncementOnly
	}
	return json.Marshal(toSerialize)
}

type NullableBasicStreamBase struct {
	value *BasicStreamBase
	isSet bool
}

func (v NullableBasicStreamBase) Get() *BasicStreamBase {
	return v.value
}

func (v *NullableBasicStreamBase) Set(val *BasicStreamBase) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicStreamBase) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicStreamBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicStreamBase(val *BasicStreamBase) *NullableBasicStreamBase {
	return &NullableBasicStreamBase{value: val, isSet: true}
}

func (v NullableBasicStreamBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicStreamBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


