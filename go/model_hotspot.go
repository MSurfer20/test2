/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Hotspot Dictionary containing details of a single hotspot. 
type Hotspot struct {
	// The delay after which the user should be shown the hotspot. 
	Delay *float32 `json:"delay,omitempty"`
	// The name of the hotspot. 
	Name *string `json:"name,omitempty"`
	// The title of the hotspot, as will be displayed to the user. 
	Title *string `json:"title,omitempty"`
	// The description of the hotspot, as will be displayed to the user. 
	Description *string `json:"description,omitempty"`
}

// NewHotspot instantiates a new Hotspot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHotspot() *Hotspot {
	this := Hotspot{}
	return &this
}

// NewHotspotWithDefaults instantiates a new Hotspot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHotspotWithDefaults() *Hotspot {
	this := Hotspot{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *Hotspot) GetDelay() float32 {
	if o == nil || o.Delay == nil {
		var ret float32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetDelayOk() (*float32, bool) {
	if o == nil || o.Delay == nil {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *Hotspot) HasDelay() bool {
	if o != nil && o.Delay != nil {
		return true
	}

	return false
}

// SetDelay gets a reference to the given float32 and assigns it to the Delay field.
func (o *Hotspot) SetDelay(v float32) {
	o.Delay = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Hotspot) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Hotspot) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Hotspot) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Hotspot) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Hotspot) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Hotspot) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Hotspot) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hotspot) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Hotspot) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Hotspot) SetDescription(v string) {
	o.Description = &v
}

func (o Hotspot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Delay != nil {
		toSerialize["delay"] = o.Delay
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableHotspot struct {
	value *Hotspot
	isSet bool
}

func (v NullableHotspot) Get() *Hotspot {
	return v.value
}

func (v *NullableHotspot) Set(val *Hotspot) {
	v.value = val
	v.isSet = true
}

func (v NullableHotspot) IsSet() bool {
	return v.isSet
}

func (v *NullableHotspot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHotspot(val *Hotspot) *NullableHotspot {
	return &NullableHotspot{value: val, isSet: true}
}

func (v NullableHotspot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHotspot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


