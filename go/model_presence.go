/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Presence `{client_name}`: Object containing the details of the user's presence on a particular platform with the client's platform name being the object key. 
type Presence struct {
	// The client's platform name. 
	Client *string `json:"client,omitempty"`
	// The status of the user on this client. It is either `idle` or `active`. 
	Status *string `json:"status,omitempty"`
	// The UNIX timestamp of when this client sent the user's presence to the server with the precision of a second. 
	Timestamp *int32 `json:"timestamp,omitempty"`
	// Whether the client is capable of showing mobile/push notifications to the user. 
	Pushable *bool `json:"pushable,omitempty"`
}

// NewPresence instantiates a new Presence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresence() *Presence {
	this := Presence{}
	return &this
}

// NewPresenceWithDefaults instantiates a new Presence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresenceWithDefaults() *Presence {
	this := Presence{}
	return &this
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *Presence) GetClient() string {
	if o == nil || o.Client == nil {
		var ret string
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetClientOk() (*string, bool) {
	if o == nil || o.Client == nil {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *Presence) HasClient() bool {
	if o != nil && o.Client != nil {
		return true
	}

	return false
}

// SetClient gets a reference to the given string and assigns it to the Client field.
func (o *Presence) SetClient(v string) {
	o.Client = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Presence) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Presence) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Presence) SetStatus(v string) {
	o.Status = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Presence) GetTimestamp() int32 {
	if o == nil || o.Timestamp == nil {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetTimestampOk() (*int32, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Presence) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *Presence) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetPushable returns the Pushable field value if set, zero value otherwise.
func (o *Presence) GetPushable() bool {
	if o == nil || o.Pushable == nil {
		var ret bool
		return ret
	}
	return *o.Pushable
}

// GetPushableOk returns a tuple with the Pushable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Presence) GetPushableOk() (*bool, bool) {
	if o == nil || o.Pushable == nil {
		return nil, false
	}
	return o.Pushable, true
}

// HasPushable returns a boolean if a field has been set.
func (o *Presence) HasPushable() bool {
	if o != nil && o.Pushable != nil {
		return true
	}

	return false
}

// SetPushable gets a reference to the given bool and assigns it to the Pushable field.
func (o *Presence) SetPushable(v bool) {
	o.Pushable = &v
}

func (o Presence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Client != nil {
		toSerialize["client"] = o.Client
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Pushable != nil {
		toSerialize["pushable"] = o.Pushable
	}
	return json.Marshal(toSerialize)
}

type NullablePresence struct {
	value *Presence
	isSet bool
}

func (v NullablePresence) Get() *Presence {
	return v.value
}

func (v *NullablePresence) Set(val *Presence) {
	v.value = val
	v.isSet = true
}

func (v NullablePresence) IsSet() bool {
	return v.isSet
}

func (v *NullablePresence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresence(val *Presence) *NullablePresence {
	return &NullablePresence{value: val, isSet: true}
}

func (v NullablePresence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


