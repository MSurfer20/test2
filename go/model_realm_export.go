/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RealmExport Object containing details about a realm export. 
type RealmExport struct {
	// The id of the export. 
	Id *int32 `json:"id,omitempty"`
	// The id of the user who did the export. 
	ActingUserId *int32 `json:"acting_user_id,omitempty"`
	// The UNIX timestamp of when the export was made. 
	ExportTime *float32 `json:"export_time,omitempty"`
	// The timestamp of when the export was deleted. Null if it wasn't. 
	DeletedTimestamp NullableFloat32 `json:"deleted_timestamp,omitempty"`
	// The timestamp of when the export failed. Null if it didn't. 
	FailedTimestamp NullableFloat32 `json:"failed_timestamp,omitempty"`
	// The URL of the export. `null` if there's no URL. 
	ExportUrl NullableString `json:"export_url,omitempty"`
	// Whether the export is pending or not. 
	Pending *bool `json:"pending,omitempty"`
}

// NewRealmExport instantiates a new RealmExport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealmExport() *RealmExport {
	this := RealmExport{}
	return &this
}

// NewRealmExportWithDefaults instantiates a new RealmExport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealmExportWithDefaults() *RealmExport {
	this := RealmExport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealmExport) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmExport) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealmExport) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RealmExport) SetId(v int32) {
	o.Id = &v
}

// GetActingUserId returns the ActingUserId field value if set, zero value otherwise.
func (o *RealmExport) GetActingUserId() int32 {
	if o == nil || o.ActingUserId == nil {
		var ret int32
		return ret
	}
	return *o.ActingUserId
}

// GetActingUserIdOk returns a tuple with the ActingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmExport) GetActingUserIdOk() (*int32, bool) {
	if o == nil || o.ActingUserId == nil {
		return nil, false
	}
	return o.ActingUserId, true
}

// HasActingUserId returns a boolean if a field has been set.
func (o *RealmExport) HasActingUserId() bool {
	if o != nil && o.ActingUserId != nil {
		return true
	}

	return false
}

// SetActingUserId gets a reference to the given int32 and assigns it to the ActingUserId field.
func (o *RealmExport) SetActingUserId(v int32) {
	o.ActingUserId = &v
}

// GetExportTime returns the ExportTime field value if set, zero value otherwise.
func (o *RealmExport) GetExportTime() float32 {
	if o == nil || o.ExportTime == nil {
		var ret float32
		return ret
	}
	return *o.ExportTime
}

// GetExportTimeOk returns a tuple with the ExportTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmExport) GetExportTimeOk() (*float32, bool) {
	if o == nil || o.ExportTime == nil {
		return nil, false
	}
	return o.ExportTime, true
}

// HasExportTime returns a boolean if a field has been set.
func (o *RealmExport) HasExportTime() bool {
	if o != nil && o.ExportTime != nil {
		return true
	}

	return false
}

// SetExportTime gets a reference to the given float32 and assigns it to the ExportTime field.
func (o *RealmExport) SetExportTime(v float32) {
	o.ExportTime = &v
}

// GetDeletedTimestamp returns the DeletedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RealmExport) GetDeletedTimestamp() float32 {
	if o == nil || o.DeletedTimestamp.Get() == nil {
		var ret float32
		return ret
	}
	return *o.DeletedTimestamp.Get()
}

// GetDeletedTimestampOk returns a tuple with the DeletedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RealmExport) GetDeletedTimestampOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletedTimestamp.Get(), o.DeletedTimestamp.IsSet()
}

// HasDeletedTimestamp returns a boolean if a field has been set.
func (o *RealmExport) HasDeletedTimestamp() bool {
	if o != nil && o.DeletedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetDeletedTimestamp gets a reference to the given NullableFloat32 and assigns it to the DeletedTimestamp field.
func (o *RealmExport) SetDeletedTimestamp(v float32) {
	o.DeletedTimestamp.Set(&v)
}
// SetDeletedTimestampNil sets the value for DeletedTimestamp to be an explicit nil
func (o *RealmExport) SetDeletedTimestampNil() {
	o.DeletedTimestamp.Set(nil)
}

// UnsetDeletedTimestamp ensures that no value is present for DeletedTimestamp, not even an explicit nil
func (o *RealmExport) UnsetDeletedTimestamp() {
	o.DeletedTimestamp.Unset()
}

// GetFailedTimestamp returns the FailedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RealmExport) GetFailedTimestamp() float32 {
	if o == nil || o.FailedTimestamp.Get() == nil {
		var ret float32
		return ret
	}
	return *o.FailedTimestamp.Get()
}

// GetFailedTimestampOk returns a tuple with the FailedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RealmExport) GetFailedTimestampOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedTimestamp.Get(), o.FailedTimestamp.IsSet()
}

// HasFailedTimestamp returns a boolean if a field has been set.
func (o *RealmExport) HasFailedTimestamp() bool {
	if o != nil && o.FailedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetFailedTimestamp gets a reference to the given NullableFloat32 and assigns it to the FailedTimestamp field.
func (o *RealmExport) SetFailedTimestamp(v float32) {
	o.FailedTimestamp.Set(&v)
}
// SetFailedTimestampNil sets the value for FailedTimestamp to be an explicit nil
func (o *RealmExport) SetFailedTimestampNil() {
	o.FailedTimestamp.Set(nil)
}

// UnsetFailedTimestamp ensures that no value is present for FailedTimestamp, not even an explicit nil
func (o *RealmExport) UnsetFailedTimestamp() {
	o.FailedTimestamp.Unset()
}

// GetExportUrl returns the ExportUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RealmExport) GetExportUrl() string {
	if o == nil || o.ExportUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExportUrl.Get()
}

// GetExportUrlOk returns a tuple with the ExportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RealmExport) GetExportUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExportUrl.Get(), o.ExportUrl.IsSet()
}

// HasExportUrl returns a boolean if a field has been set.
func (o *RealmExport) HasExportUrl() bool {
	if o != nil && o.ExportUrl.IsSet() {
		return true
	}

	return false
}

// SetExportUrl gets a reference to the given NullableString and assigns it to the ExportUrl field.
func (o *RealmExport) SetExportUrl(v string) {
	o.ExportUrl.Set(&v)
}
// SetExportUrlNil sets the value for ExportUrl to be an explicit nil
func (o *RealmExport) SetExportUrlNil() {
	o.ExportUrl.Set(nil)
}

// UnsetExportUrl ensures that no value is present for ExportUrl, not even an explicit nil
func (o *RealmExport) UnsetExportUrl() {
	o.ExportUrl.Unset()
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *RealmExport) GetPending() bool {
	if o == nil || o.Pending == nil {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealmExport) GetPendingOk() (*bool, bool) {
	if o == nil || o.Pending == nil {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *RealmExport) HasPending() bool {
	if o != nil && o.Pending != nil {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *RealmExport) SetPending(v bool) {
	o.Pending = &v
}

func (o RealmExport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ActingUserId != nil {
		toSerialize["acting_user_id"] = o.ActingUserId
	}
	if o.ExportTime != nil {
		toSerialize["export_time"] = o.ExportTime
	}
	if o.DeletedTimestamp.IsSet() {
		toSerialize["deleted_timestamp"] = o.DeletedTimestamp.Get()
	}
	if o.FailedTimestamp.IsSet() {
		toSerialize["failed_timestamp"] = o.FailedTimestamp.Get()
	}
	if o.ExportUrl.IsSet() {
		toSerialize["export_url"] = o.ExportUrl.Get()
	}
	if o.Pending != nil {
		toSerialize["pending"] = o.Pending
	}
	return json.Marshal(toSerialize)
}

type NullableRealmExport struct {
	value *RealmExport
	isSet bool
}

func (v NullableRealmExport) Get() *RealmExport {
	return v.value
}

func (v *NullableRealmExport) Set(val *RealmExport) {
	v.value = val
	v.isSet = true
}

func (v NullableRealmExport) IsSet() bool {
	return v.isSet
}

func (v *NullableRealmExport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealmExport(val *RealmExport) *NullableRealmExport {
	return &NullableRealmExport{value: val, isSet: true}
}

func (v NullableRealmExport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealmExport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


