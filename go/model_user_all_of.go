/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserAllOf struct for UserAllOf
type UserAllOf struct {
	Email interface{} `json:"email,omitempty"`
	IsBot interface{} `json:"is_bot,omitempty"`
	AvatarUrl interface{} `json:"avatar_url,omitempty"`
	AvatarVersion interface{} `json:"avatar_version,omitempty"`
	FullName interface{} `json:"full_name,omitempty"`
	IsAdmin interface{} `json:"is_admin,omitempty"`
	IsOwner interface{} `json:"is_owner,omitempty"`
	IsBillingAdmin interface{} `json:"is_billing_admin,omitempty"`
	Role interface{} `json:"role,omitempty"`
	BotType interface{} `json:"bot_type,omitempty"`
	UserId interface{} `json:"user_id,omitempty"`
	BotOwnerId interface{} `json:"bot_owner_id,omitempty"`
	IsActive interface{} `json:"is_active,omitempty"`
	IsGuest interface{} `json:"is_guest,omitempty"`
	Timezone interface{} `json:"timezone,omitempty"`
	DateJoined interface{} `json:"date_joined,omitempty"`
	DeliveryEmail interface{} `json:"delivery_email,omitempty"`
	ProfileData interface{} `json:"profile_data,omitempty"`
}

// NewUserAllOf instantiates a new UserAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAllOf() *UserAllOf {
	this := UserAllOf{}
	return &this
}

// NewUserAllOfWithDefaults instantiates a new UserAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAllOfWithDefaults() *UserAllOf {
	this := UserAllOf{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetEmail() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetEmailOk() (*interface{}, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return &o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserAllOf) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given interface{} and assigns it to the Email field.
func (o *UserAllOf) SetEmail(v interface{}) {
	o.Email = v
}

// GetIsBot returns the IsBot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsBot() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsBot
}

// GetIsBotOk returns a tuple with the IsBot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsBotOk() (*interface{}, bool) {
	if o == nil || o.IsBot == nil {
		return nil, false
	}
	return &o.IsBot, true
}

// HasIsBot returns a boolean if a field has been set.
func (o *UserAllOf) HasIsBot() bool {
	if o != nil && o.IsBot != nil {
		return true
	}

	return false
}

// SetIsBot gets a reference to the given interface{} and assigns it to the IsBot field.
func (o *UserAllOf) SetIsBot(v interface{}) {
	o.IsBot = v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetAvatarUrl() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetAvatarUrlOk() (*interface{}, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *UserAllOf) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given interface{} and assigns it to the AvatarUrl field.
func (o *UserAllOf) SetAvatarUrl(v interface{}) {
	o.AvatarUrl = v
}

// GetAvatarVersion returns the AvatarVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetAvatarVersion() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.AvatarVersion
}

// GetAvatarVersionOk returns a tuple with the AvatarVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetAvatarVersionOk() (*interface{}, bool) {
	if o == nil || o.AvatarVersion == nil {
		return nil, false
	}
	return &o.AvatarVersion, true
}

// HasAvatarVersion returns a boolean if a field has been set.
func (o *UserAllOf) HasAvatarVersion() bool {
	if o != nil && o.AvatarVersion != nil {
		return true
	}

	return false
}

// SetAvatarVersion gets a reference to the given interface{} and assigns it to the AvatarVersion field.
func (o *UserAllOf) SetAvatarVersion(v interface{}) {
	o.AvatarVersion = v
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetFullName() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetFullNameOk() (*interface{}, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return &o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *UserAllOf) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given interface{} and assigns it to the FullName field.
func (o *UserAllOf) SetFullName(v interface{}) {
	o.FullName = v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsAdmin() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsAdminOk() (*interface{}, bool) {
	if o == nil || o.IsAdmin == nil {
		return nil, false
	}
	return &o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *UserAllOf) HasIsAdmin() bool {
	if o != nil && o.IsAdmin != nil {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given interface{} and assigns it to the IsAdmin field.
func (o *UserAllOf) SetIsAdmin(v interface{}) {
	o.IsAdmin = v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsOwner() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsOwnerOk() (*interface{}, bool) {
	if o == nil || o.IsOwner == nil {
		return nil, false
	}
	return &o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *UserAllOf) HasIsOwner() bool {
	if o != nil && o.IsOwner != nil {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given interface{} and assigns it to the IsOwner field.
func (o *UserAllOf) SetIsOwner(v interface{}) {
	o.IsOwner = v
}

// GetIsBillingAdmin returns the IsBillingAdmin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsBillingAdmin() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsBillingAdmin
}

// GetIsBillingAdminOk returns a tuple with the IsBillingAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsBillingAdminOk() (*interface{}, bool) {
	if o == nil || o.IsBillingAdmin == nil {
		return nil, false
	}
	return &o.IsBillingAdmin, true
}

// HasIsBillingAdmin returns a boolean if a field has been set.
func (o *UserAllOf) HasIsBillingAdmin() bool {
	if o != nil && o.IsBillingAdmin != nil {
		return true
	}

	return false
}

// SetIsBillingAdmin gets a reference to the given interface{} and assigns it to the IsBillingAdmin field.
func (o *UserAllOf) SetIsBillingAdmin(v interface{}) {
	o.IsBillingAdmin = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetRole() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetRoleOk() (*interface{}, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return &o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *UserAllOf) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given interface{} and assigns it to the Role field.
func (o *UserAllOf) SetRole(v interface{}) {
	o.Role = v
}

// GetBotType returns the BotType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetBotType() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.BotType
}

// GetBotTypeOk returns a tuple with the BotType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetBotTypeOk() (*interface{}, bool) {
	if o == nil || o.BotType == nil {
		return nil, false
	}
	return &o.BotType, true
}

// HasBotType returns a boolean if a field has been set.
func (o *UserAllOf) HasBotType() bool {
	if o != nil && o.BotType != nil {
		return true
	}

	return false
}

// SetBotType gets a reference to the given interface{} and assigns it to the BotType field.
func (o *UserAllOf) SetBotType(v interface{}) {
	o.BotType = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetUserId() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetUserIdOk() (*interface{}, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return &o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserAllOf) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given interface{} and assigns it to the UserId field.
func (o *UserAllOf) SetUserId(v interface{}) {
	o.UserId = v
}

// GetBotOwnerId returns the BotOwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetBotOwnerId() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.BotOwnerId
}

// GetBotOwnerIdOk returns a tuple with the BotOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetBotOwnerIdOk() (*interface{}, bool) {
	if o == nil || o.BotOwnerId == nil {
		return nil, false
	}
	return &o.BotOwnerId, true
}

// HasBotOwnerId returns a boolean if a field has been set.
func (o *UserAllOf) HasBotOwnerId() bool {
	if o != nil && o.BotOwnerId != nil {
		return true
	}

	return false
}

// SetBotOwnerId gets a reference to the given interface{} and assigns it to the BotOwnerId field.
func (o *UserAllOf) SetBotOwnerId(v interface{}) {
	o.BotOwnerId = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsActive() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsActiveOk() (*interface{}, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UserAllOf) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given interface{} and assigns it to the IsActive field.
func (o *UserAllOf) SetIsActive(v interface{}) {
	o.IsActive = v
}

// GetIsGuest returns the IsGuest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetIsGuest() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.IsGuest
}

// GetIsGuestOk returns a tuple with the IsGuest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetIsGuestOk() (*interface{}, bool) {
	if o == nil || o.IsGuest == nil {
		return nil, false
	}
	return &o.IsGuest, true
}

// HasIsGuest returns a boolean if a field has been set.
func (o *UserAllOf) HasIsGuest() bool {
	if o != nil && o.IsGuest != nil {
		return true
	}

	return false
}

// SetIsGuest gets a reference to the given interface{} and assigns it to the IsGuest field.
func (o *UserAllOf) SetIsGuest(v interface{}) {
	o.IsGuest = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetTimezone() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetTimezoneOk() (*interface{}, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return &o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UserAllOf) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given interface{} and assigns it to the Timezone field.
func (o *UserAllOf) SetTimezone(v interface{}) {
	o.Timezone = v
}

// GetDateJoined returns the DateJoined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetDateJoined() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.DateJoined
}

// GetDateJoinedOk returns a tuple with the DateJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetDateJoinedOk() (*interface{}, bool) {
	if o == nil || o.DateJoined == nil {
		return nil, false
	}
	return &o.DateJoined, true
}

// HasDateJoined returns a boolean if a field has been set.
func (o *UserAllOf) HasDateJoined() bool {
	if o != nil && o.DateJoined != nil {
		return true
	}

	return false
}

// SetDateJoined gets a reference to the given interface{} and assigns it to the DateJoined field.
func (o *UserAllOf) SetDateJoined(v interface{}) {
	o.DateJoined = v
}

// GetDeliveryEmail returns the DeliveryEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetDeliveryEmail() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.DeliveryEmail
}

// GetDeliveryEmailOk returns a tuple with the DeliveryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetDeliveryEmailOk() (*interface{}, bool) {
	if o == nil || o.DeliveryEmail == nil {
		return nil, false
	}
	return &o.DeliveryEmail, true
}

// HasDeliveryEmail returns a boolean if a field has been set.
func (o *UserAllOf) HasDeliveryEmail() bool {
	if o != nil && o.DeliveryEmail != nil {
		return true
	}

	return false
}

// SetDeliveryEmail gets a reference to the given interface{} and assigns it to the DeliveryEmail field.
func (o *UserAllOf) SetDeliveryEmail(v interface{}) {
	o.DeliveryEmail = v
}

// GetProfileData returns the ProfileData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAllOf) GetProfileData() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.ProfileData
}

// GetProfileDataOk returns a tuple with the ProfileData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAllOf) GetProfileDataOk() (*interface{}, bool) {
	if o == nil || o.ProfileData == nil {
		return nil, false
	}
	return &o.ProfileData, true
}

// HasProfileData returns a boolean if a field has been set.
func (o *UserAllOf) HasProfileData() bool {
	if o != nil && o.ProfileData != nil {
		return true
	}

	return false
}

// SetProfileData gets a reference to the given interface{} and assigns it to the ProfileData field.
func (o *UserAllOf) SetProfileData(v interface{}) {
	o.ProfileData = v
}

func (o UserAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.IsBot != nil {
		toSerialize["is_bot"] = o.IsBot
	}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.AvatarVersion != nil {
		toSerialize["avatar_version"] = o.AvatarVersion
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.IsAdmin != nil {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if o.IsOwner != nil {
		toSerialize["is_owner"] = o.IsOwner
	}
	if o.IsBillingAdmin != nil {
		toSerialize["is_billing_admin"] = o.IsBillingAdmin
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.BotType != nil {
		toSerialize["bot_type"] = o.BotType
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.BotOwnerId != nil {
		toSerialize["bot_owner_id"] = o.BotOwnerId
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.IsGuest != nil {
		toSerialize["is_guest"] = o.IsGuest
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.DateJoined != nil {
		toSerialize["date_joined"] = o.DateJoined
	}
	if o.DeliveryEmail != nil {
		toSerialize["delivery_email"] = o.DeliveryEmail
	}
	if o.ProfileData != nil {
		toSerialize["profile_data"] = o.ProfileData
	}
	return json.Marshal(toSerialize)
}

type NullableUserAllOf struct {
	value *UserAllOf
	isSet bool
}

func (v NullableUserAllOf) Get() *UserAllOf {
	return v.value
}

func (v *NullableUserAllOf) Set(val *UserAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAllOf(val *UserAllOf) *NullableUserAllOf {
	return &NullableUserAllOf{value: val, isSet: true}
}

func (v NullableUserAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


