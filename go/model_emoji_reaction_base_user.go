/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmojiReactionBaseUser Dictionary with data on the user who added the reaction, including the user ID as the `id` field.  **Note**: In the [events API](/api/get-events), this `user` dictionary confusing had the user ID in a field called `user_id` instead.  We recommend ignoring fields other than the user ID.  **Deprecated** and to be removed in a future release once core clients have migrated to use the `user_id` field. 
type EmojiReactionBaseUser struct {
	// ID of the user. 
	Id *int32 `json:"id,omitempty"`
	// Email of the user. 
	Email *string `json:"email,omitempty"`
	// Full name of the user. 
	FullName *string `json:"full_name,omitempty"`
	// Whether the user is a mirror dummy. 
	IsMirrorDummy *bool `json:"is_mirror_dummy,omitempty"`
}

// NewEmojiReactionBaseUser instantiates a new EmojiReactionBaseUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReactionBaseUser() *EmojiReactionBaseUser {
	this := EmojiReactionBaseUser{}
	return &this
}

// NewEmojiReactionBaseUserWithDefaults instantiates a new EmojiReactionBaseUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionBaseUserWithDefaults() *EmojiReactionBaseUser {
	this := EmojiReactionBaseUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmojiReactionBaseUser) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseUser) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmojiReactionBaseUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *EmojiReactionBaseUser) SetId(v int32) {
	o.Id = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EmojiReactionBaseUser) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseUser) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EmojiReactionBaseUser) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EmojiReactionBaseUser) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *EmojiReactionBaseUser) GetFullName() string {
	if o == nil || o.FullName == nil {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseUser) GetFullNameOk() (*string, bool) {
	if o == nil || o.FullName == nil {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *EmojiReactionBaseUser) HasFullName() bool {
	if o != nil && o.FullName != nil {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *EmojiReactionBaseUser) SetFullName(v string) {
	o.FullName = &v
}

// GetIsMirrorDummy returns the IsMirrorDummy field value if set, zero value otherwise.
func (o *EmojiReactionBaseUser) GetIsMirrorDummy() bool {
	if o == nil || o.IsMirrorDummy == nil {
		var ret bool
		return ret
	}
	return *o.IsMirrorDummy
}

// GetIsMirrorDummyOk returns a tuple with the IsMirrorDummy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseUser) GetIsMirrorDummyOk() (*bool, bool) {
	if o == nil || o.IsMirrorDummy == nil {
		return nil, false
	}
	return o.IsMirrorDummy, true
}

// HasIsMirrorDummy returns a boolean if a field has been set.
func (o *EmojiReactionBaseUser) HasIsMirrorDummy() bool {
	if o != nil && o.IsMirrorDummy != nil {
		return true
	}

	return false
}

// SetIsMirrorDummy gets a reference to the given bool and assigns it to the IsMirrorDummy field.
func (o *EmojiReactionBaseUser) SetIsMirrorDummy(v bool) {
	o.IsMirrorDummy = &v
}

func (o EmojiReactionBaseUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.FullName != nil {
		toSerialize["full_name"] = o.FullName
	}
	if o.IsMirrorDummy != nil {
		toSerialize["is_mirror_dummy"] = o.IsMirrorDummy
	}
	return json.Marshal(toSerialize)
}

type NullableEmojiReactionBaseUser struct {
	value *EmojiReactionBaseUser
	isSet bool
}

func (v NullableEmojiReactionBaseUser) Get() *EmojiReactionBaseUser {
	return v.value
}

func (v *NullableEmojiReactionBaseUser) Set(val *EmojiReactionBaseUser) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReactionBaseUser) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReactionBaseUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReactionBaseUser(val *EmojiReactionBaseUser) *NullableEmojiReactionBaseUser {
	return &NullableEmojiReactionBaseUser{value: val, isSet: true}
}

func (v NullableEmojiReactionBaseUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReactionBaseUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


