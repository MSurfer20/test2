/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonSuccessBase struct for JsonSuccessBase
type JsonSuccessBase struct {
	Result string `json:"result"`
	Msg string `json:"msg"`
}

// NewJsonSuccessBase instantiates a new JsonSuccessBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonSuccessBase(result string, msg string) *JsonSuccessBase {
	this := JsonSuccessBase{}
	this.Result = result
	this.Msg = msg
	return &this
}

// NewJsonSuccessBaseWithDefaults instantiates a new JsonSuccessBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonSuccessBaseWithDefaults() *JsonSuccessBase {
	this := JsonSuccessBase{}
	return &this
}

// GetResult returns the Result field value
func (o *JsonSuccessBase) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *JsonSuccessBase) GetResultOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *JsonSuccessBase) SetResult(v string) {
	o.Result = v
}

// GetMsg returns the Msg field value
func (o *JsonSuccessBase) GetMsg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Msg
}

// GetMsgOk returns a tuple with the Msg field value
// and a boolean to check if the value has been set.
func (o *JsonSuccessBase) GetMsgOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Msg, true
}

// SetMsg sets field value
func (o *JsonSuccessBase) SetMsg(v string) {
	o.Msg = v
}

func (o JsonSuccessBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["result"] = o.Result
	}
	if true {
		toSerialize["msg"] = o.Msg
	}
	return json.Marshal(toSerialize)
}

type NullableJsonSuccessBase struct {
	value *JsonSuccessBase
	isSet bool
}

func (v NullableJsonSuccessBase) Get() *JsonSuccessBase {
	return v.value
}

func (v *NullableJsonSuccessBase) Set(val *JsonSuccessBase) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonSuccessBase) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonSuccessBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonSuccessBase(val *JsonSuccessBase) *NullableJsonSuccessBase {
	return &NullableJsonSuccessBase{value: val, isSet: true}
}

func (v NullableJsonSuccessBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonSuccessBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


