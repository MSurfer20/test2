/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmojiReactionBase struct for EmojiReactionBase
type EmojiReactionBase struct {
	// A unique identifier, defining the specific emoji codepoint requested, within the namespace of the `reaction_type`.  For example, for `unicode_emoji`, this will be an encoding of the Unicode codepoint. 
	EmojiCode *string `json:"emoji_code,omitempty"`
	// Name of the emoji. 
	EmojiName *string `json:"emoji_name,omitempty"`
	// One of the following values:  * `unicode_emoji`: Unicode emoji (`emoji_code` will be its Unicode   codepoint). * `realm_emoji`: [Custom emoji](/help/add-custom-emoji).   (`emoji_code` will be its ID). * `zulip_extra_emoji`: Special emoji included with Zulip.  Exists to   namespace the `zulip` emoji. 
	ReactionType *string `json:"reaction_type,omitempty"`
	// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 
	UserId *int32 `json:"user_id,omitempty"`
	User *EmojiReactionBaseUser `json:"user,omitempty"`
}

// NewEmojiReactionBase instantiates a new EmojiReactionBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReactionBase() *EmojiReactionBase {
	this := EmojiReactionBase{}
	return &this
}

// NewEmojiReactionBaseWithDefaults instantiates a new EmojiReactionBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionBaseWithDefaults() *EmojiReactionBase {
	this := EmojiReactionBase{}
	return &this
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise.
func (o *EmojiReactionBase) GetEmojiCode() string {
	if o == nil || o.EmojiCode == nil {
		var ret string
		return ret
	}
	return *o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBase) GetEmojiCodeOk() (*string, bool) {
	if o == nil || o.EmojiCode == nil {
		return nil, false
	}
	return o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *EmojiReactionBase) HasEmojiCode() bool {
	if o != nil && o.EmojiCode != nil {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given string and assigns it to the EmojiCode field.
func (o *EmojiReactionBase) SetEmojiCode(v string) {
	o.EmojiCode = &v
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise.
func (o *EmojiReactionBase) GetEmojiName() string {
	if o == nil || o.EmojiName == nil {
		var ret string
		return ret
	}
	return *o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBase) GetEmojiNameOk() (*string, bool) {
	if o == nil || o.EmojiName == nil {
		return nil, false
	}
	return o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *EmojiReactionBase) HasEmojiName() bool {
	if o != nil && o.EmojiName != nil {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given string and assigns it to the EmojiName field.
func (o *EmojiReactionBase) SetEmojiName(v string) {
	o.EmojiName = &v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise.
func (o *EmojiReactionBase) GetReactionType() string {
	if o == nil || o.ReactionType == nil {
		var ret string
		return ret
	}
	return *o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBase) GetReactionTypeOk() (*string, bool) {
	if o == nil || o.ReactionType == nil {
		return nil, false
	}
	return o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *EmojiReactionBase) HasReactionType() bool {
	if o != nil && o.ReactionType != nil {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given string and assigns it to the ReactionType field.
func (o *EmojiReactionBase) SetReactionType(v string) {
	o.ReactionType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmojiReactionBase) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBase) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmojiReactionBase) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *EmojiReactionBase) SetUserId(v int32) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EmojiReactionBase) GetUser() EmojiReactionBaseUser {
	if o == nil || o.User == nil {
		var ret EmojiReactionBaseUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBase) GetUserOk() (*EmojiReactionBaseUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EmojiReactionBase) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given EmojiReactionBaseUser and assigns it to the User field.
func (o *EmojiReactionBase) SetUser(v EmojiReactionBaseUser) {
	o.User = &v
}

func (o EmojiReactionBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmojiCode != nil {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if o.EmojiName != nil {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if o.ReactionType != nil {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableEmojiReactionBase struct {
	value *EmojiReactionBase
	isSet bool
}

func (v NullableEmojiReactionBase) Get() *EmojiReactionBase {
	return v.value
}

func (v *NullableEmojiReactionBase) Set(val *EmojiReactionBase) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReactionBase) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReactionBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReactionBase(val *EmojiReactionBase) *NullableEmojiReactionBase {
	return &NullableEmojiReactionBase{value: val, isSet: true}
}

func (v NullableEmojiReactionBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReactionBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


