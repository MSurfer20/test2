/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmojiReactionBaseAllOf struct for EmojiReactionBaseAllOf
type EmojiReactionBaseAllOf struct {
	// The ID of the user who added the reaction.  **Changes**: New in Zulip 3.0 (feature level 2). The `user` object is deprecated and will be removed in the future. 
	UserId *int32 `json:"user_id,omitempty"`
	User *EmojiReactionBaseAllOfUser `json:"user,omitempty"`
}

// NewEmojiReactionBaseAllOf instantiates a new EmojiReactionBaseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReactionBaseAllOf() *EmojiReactionBaseAllOf {
	this := EmojiReactionBaseAllOf{}
	return &this
}

// NewEmojiReactionBaseAllOfWithDefaults instantiates a new EmojiReactionBaseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionBaseAllOfWithDefaults() *EmojiReactionBaseAllOf {
	this := EmojiReactionBaseAllOf{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *EmojiReactionBaseAllOf) GetUserId() int32 {
	if o == nil || o.UserId == nil {
		var ret int32
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseAllOf) GetUserIdOk() (*int32, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmojiReactionBaseAllOf) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int32 and assigns it to the UserId field.
func (o *EmojiReactionBaseAllOf) SetUserId(v int32) {
	o.UserId = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EmojiReactionBaseAllOf) GetUser() EmojiReactionBaseAllOfUser {
	if o == nil || o.User == nil {
		var ret EmojiReactionBaseAllOfUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmojiReactionBaseAllOf) GetUserOk() (*EmojiReactionBaseAllOfUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EmojiReactionBaseAllOf) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given EmojiReactionBaseAllOfUser and assigns it to the User field.
func (o *EmojiReactionBaseAllOf) SetUser(v EmojiReactionBaseAllOfUser) {
	o.User = &v
}

func (o EmojiReactionBaseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableEmojiReactionBaseAllOf struct {
	value *EmojiReactionBaseAllOf
	isSet bool
}

func (v NullableEmojiReactionBaseAllOf) Get() *EmojiReactionBaseAllOf {
	return v.value
}

func (v *NullableEmojiReactionBaseAllOf) Set(val *EmojiReactionBaseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReactionBaseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReactionBaseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReactionBaseAllOf(val *EmojiReactionBaseAllOf) *NullableEmojiReactionBaseAllOf {
	return &NullableEmojiReactionBaseAllOf{value: val, isSet: true}
}

func (v NullableEmojiReactionBaseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReactionBaseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


