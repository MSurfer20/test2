/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Attachments Dictionary containing details of a file uploaded by a user. 
type Attachments struct {
	// The unique ID for the attachment. 
	Id *int32 `json:"id,omitempty"`
	// Name of the uploaded file. 
	Name *string `json:"name,omitempty"`
	// A representation of the path of the file within the repository of user-uploaded files.  If the `path_id` of a file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be: `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`. 
	PathId *string `json:"path_id,omitempty"`
	// Size of the file in bytes. 
	Size *int32 `json:"size,omitempty"`
	// Time when the attachment was uploaded as a UNIX timestamp multiplied by 1000 (matching the format of getTime() in JavaScript).  **Changes**: Changed in Zulip 2.2 (feature level 22).  This field was previously a floating point number. 
	CreateTime *int32 `json:"create_time,omitempty"`
	// Contains basic details on any Zulip messages that have been sent referencing this [uploaded file](/api/upload-file). This includes messages sent by any user in the Zulip organization who sent a message containing a link to the uploaded file. 
	Messages *[]AttachmentsMessages `json:"messages,omitempty"`
}

// NewAttachments instantiates a new Attachments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachments() *Attachments {
	this := Attachments{}
	return &this
}

// NewAttachmentsWithDefaults instantiates a new Attachments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentsWithDefaults() *Attachments {
	this := Attachments{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Attachments) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Attachments) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Attachments) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Attachments) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Attachments) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Attachments) SetName(v string) {
	o.Name = &v
}

// GetPathId returns the PathId field value if set, zero value otherwise.
func (o *Attachments) GetPathId() string {
	if o == nil || o.PathId == nil {
		var ret string
		return ret
	}
	return *o.PathId
}

// GetPathIdOk returns a tuple with the PathId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetPathIdOk() (*string, bool) {
	if o == nil || o.PathId == nil {
		return nil, false
	}
	return o.PathId, true
}

// HasPathId returns a boolean if a field has been set.
func (o *Attachments) HasPathId() bool {
	if o != nil && o.PathId != nil {
		return true
	}

	return false
}

// SetPathId gets a reference to the given string and assigns it to the PathId field.
func (o *Attachments) SetPathId(v string) {
	o.PathId = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Attachments) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Attachments) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Attachments) SetSize(v int32) {
	o.Size = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Attachments) GetCreateTime() int32 {
	if o == nil || o.CreateTime == nil {
		var ret int32
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetCreateTimeOk() (*int32, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Attachments) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given int32 and assigns it to the CreateTime field.
func (o *Attachments) SetCreateTime(v int32) {
	o.CreateTime = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *Attachments) GetMessages() []AttachmentsMessages {
	if o == nil || o.Messages == nil {
		var ret []AttachmentsMessages
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachments) GetMessagesOk() (*[]AttachmentsMessages, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *Attachments) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []AttachmentsMessages and assigns it to the Messages field.
func (o *Attachments) SetMessages(v []AttachmentsMessages) {
	o.Messages = &v
}

func (o Attachments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.PathId != nil {
		toSerialize["path_id"] = o.PathId
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableAttachments struct {
	value *Attachments
	isSet bool
}

func (v NullableAttachments) Get() *Attachments {
	return v.value
}

func (v *NullableAttachments) Set(val *Attachments) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachments) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachments(val *Attachments) *NullableAttachments {
	return &NullableAttachments{value: val, isSet: true}
}

func (v NullableAttachments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


