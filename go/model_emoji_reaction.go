/*
 * Zulip REST API
 *
 * Powerful open source group chat 
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EmojiReaction struct for EmojiReaction
type EmojiReaction struct {
	EmojiCode interface{} `json:"emoji_code,omitempty"`
	EmojiName interface{} `json:"emoji_name,omitempty"`
	ReactionType interface{} `json:"reaction_type,omitempty"`
	UserId interface{} `json:"user_id,omitempty"`
	User interface{} `json:"user,omitempty"`
}

// NewEmojiReaction instantiates a new EmojiReaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmojiReaction() *EmojiReaction {
	this := EmojiReaction{}
	return &this
}

// NewEmojiReactionWithDefaults instantiates a new EmojiReaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmojiReactionWithDefaults() *EmojiReaction {
	this := EmojiReaction{}
	return &this
}

// GetEmojiCode returns the EmojiCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmojiReaction) GetEmojiCode() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.EmojiCode
}

// GetEmojiCodeOk returns a tuple with the EmojiCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmojiReaction) GetEmojiCodeOk() (*interface{}, bool) {
	if o == nil || o.EmojiCode == nil {
		return nil, false
	}
	return &o.EmojiCode, true
}

// HasEmojiCode returns a boolean if a field has been set.
func (o *EmojiReaction) HasEmojiCode() bool {
	if o != nil && o.EmojiCode != nil {
		return true
	}

	return false
}

// SetEmojiCode gets a reference to the given interface{} and assigns it to the EmojiCode field.
func (o *EmojiReaction) SetEmojiCode(v interface{}) {
	o.EmojiCode = v
}

// GetEmojiName returns the EmojiName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmojiReaction) GetEmojiName() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.EmojiName
}

// GetEmojiNameOk returns a tuple with the EmojiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmojiReaction) GetEmojiNameOk() (*interface{}, bool) {
	if o == nil || o.EmojiName == nil {
		return nil, false
	}
	return &o.EmojiName, true
}

// HasEmojiName returns a boolean if a field has been set.
func (o *EmojiReaction) HasEmojiName() bool {
	if o != nil && o.EmojiName != nil {
		return true
	}

	return false
}

// SetEmojiName gets a reference to the given interface{} and assigns it to the EmojiName field.
func (o *EmojiReaction) SetEmojiName(v interface{}) {
	o.EmojiName = v
}

// GetReactionType returns the ReactionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmojiReaction) GetReactionType() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.ReactionType
}

// GetReactionTypeOk returns a tuple with the ReactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmojiReaction) GetReactionTypeOk() (*interface{}, bool) {
	if o == nil || o.ReactionType == nil {
		return nil, false
	}
	return &o.ReactionType, true
}

// HasReactionType returns a boolean if a field has been set.
func (o *EmojiReaction) HasReactionType() bool {
	if o != nil && o.ReactionType != nil {
		return true
	}

	return false
}

// SetReactionType gets a reference to the given interface{} and assigns it to the ReactionType field.
func (o *EmojiReaction) SetReactionType(v interface{}) {
	o.ReactionType = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmojiReaction) GetUserId() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmojiReaction) GetUserIdOk() (*interface{}, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return &o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *EmojiReaction) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given interface{} and assigns it to the UserId field.
func (o *EmojiReaction) SetUserId(v interface{}) {
	o.UserId = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmojiReaction) GetUser() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmojiReaction) GetUserOk() (*interface{}, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return &o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EmojiReaction) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given interface{} and assigns it to the User field.
func (o *EmojiReaction) SetUser(v interface{}) {
	o.User = v
}

func (o EmojiReaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmojiCode != nil {
		toSerialize["emoji_code"] = o.EmojiCode
	}
	if o.EmojiName != nil {
		toSerialize["emoji_name"] = o.EmojiName
	}
	if o.ReactionType != nil {
		toSerialize["reaction_type"] = o.ReactionType
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableEmojiReaction struct {
	value *EmojiReaction
	isSet bool
}

func (v NullableEmojiReaction) Get() *EmojiReaction {
	return v.value
}

func (v *NullableEmojiReaction) Set(val *EmojiReaction) {
	v.value = val
	v.isSet = true
}

func (v NullableEmojiReaction) IsSet() bool {
	return v.isSet
}

func (v *NullableEmojiReaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmojiReaction(val *EmojiReaction) *NullableEmojiReaction {
	return &NullableEmojiReaction{value: val, isSet: true}
}

func (v NullableEmojiReaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmojiReaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


